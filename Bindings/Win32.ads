--------------------------------------------------------------------------------
with System;
with Interfaces.C;
with Interfaces.C.Extensions;
--------------------------------------------------------------------------------
package Win32 is
   
   type Void is null record;
   
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\sal.h>
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\concurrencysal.h>
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\vadefs.h>
   subtype uintptr_t is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type va_list is access Character; -- CXType_Pointer - CXType_Char_S
   -- va_start(...); -- variadic function not supported
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\vcruntime.h>
   subtype size_t is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   subtype ptrdiff_t is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   subtype intptr_t is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   subtype vcrt_bool_x is Boolean; -- CXType_Bool
   procedure security_init_cookie;
   pragma import (C,security_init_cookie,"__security_init_cookie");
   procedure security_check_cookie(
      StackCookie : uintptr_t
   );
   pragma import (C,security_check_cookie,"__security_check_cookie");
   procedure report_gsfailure(
      StackCookie : uintptr_t
   );
   pragma import (C,report_gsfailure,"__report_gsfailure");
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\excpt.h>
   type EXCEPTION_DISPOSITION_x is (
      ExceptionContinueExecution,
      ExceptionContinueSearch,
      ExceptionNestedException,
      ExceptionCollidedUnwind
   );
   for EXCEPTION_DISPOSITION_x use (
      ExceptionContinueExecution => 0,
      ExceptionContinueSearch => 1,
      ExceptionNestedException => 2,
      ExceptionCollidedUnwind => 3
   );
   for EXCEPTION_DISPOSITION_x'Size use 32;
   subtype EXCEPTION_DISPOSITION is EXCEPTION_DISPOSITION_x; -- CXType_Elaborated
   type EXCEPTION_RECORD_x; -- Forward Declaration
   type CONTEXT_x; -- Forward Declaration
   type DISPATCHER_CONTEXT_x; -- Forward Declaration
   function C_specific_handler(
      ExceptionRecord : access Void;
      EstablisherFrame : access Void;
      ContextRecord : access Void;
      DispatcherContext : access Void
   ) return EXCEPTION_DISPOSITION;
   pragma import (C,C_specific_handler,"__C_specific_handler");
   function exception_code return Interfaces.C.unsigned_long;
   pragma import (C,exception_code,"_exception_code");
   procedure exception_info;
   pragma import (C,exception_info,"_exception_info");
   function abnormal_termination return Interfaces.C.Int;
   pragma import (C,abnormal_termination,"_abnormal_termination");
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\stdarg.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\windef.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\SpecStrings.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared/DriverSpecs.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\minwindef.h>
   subtype ULONG is Interfaces.C.unsigned_long; -- CXType_ULong
   type PULONG is access ULONG; -- CXType_Pointer - CXType_Typedef
   subtype USHORT is Interfaces.C.unsigned_short; -- CXType_UShort
   type PUSHORT is access USHORT; -- CXType_Pointer - CXType_Typedef
   subtype UCHAR is Interfaces.C.unsigned_char; -- CXType_UChar
   type PUCHAR is access UCHAR; -- CXType_Pointer - CXType_Typedef
   type PSZ is access Character; -- CXType_Pointer - CXType_Char_S
   subtype DWORD is Interfaces.C.unsigned_long; -- CXType_ULong
   subtype BOOL is Interfaces.C.Int; -- CXType_Int
   subtype BYTE is Interfaces.C.unsigned_char; -- CXType_UChar
   subtype WORD is Interfaces.C.unsigned_short; -- CXType_UShort
   subtype FLOAT is Standard.Float; -- CXType_Float
   type PFLOAT is access FLOAT; -- CXType_Pointer - CXType_Typedef
   type PBOOL is access BOOL; -- CXType_Pointer - CXType_Typedef
   type LPBOOL is access BOOL; -- CXType_Pointer - CXType_Typedef
   type PBYTE is access BYTE; -- CXType_Pointer - CXType_Typedef
   type LPBYTE is access BYTE; -- CXType_Pointer - CXType_Typedef
   type PINT is access Interfaces.C.Int; -- CXType_Pointer - CXType_Int
   type LPINT is access Interfaces.C.Int; -- CXType_Pointer - CXType_Int
   type PWORD is access WORD; -- CXType_Pointer - CXType_Typedef
   type LPWORD is access WORD; -- CXType_Pointer - CXType_Typedef
   type LPLONG is access Interfaces.C.Long; -- CXType_Pointer - CXType_Long
   type PDWORD is access DWORD; -- CXType_Pointer - CXType_Typedef
   type LPDWORD is access DWORD; -- CXType_Pointer - CXType_Typedef
   type LPVOID is access Void; -- CXType_Pointer - CXType_Void
   type LPCVOID is access constant Void; -- CXType_Pointer - CXType_Void
   subtype INT is Interfaces.C.Int; -- CXType_Int
   subtype UINT is Interfaces.C.unsigned; -- CXType_UInt
   type PUINT is access Interfaces.C.unsigned; -- CXType_Pointer - CXType_UInt
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt.h>
   subtype Type_x is System.Address; -- [FIXME - CXType_Unexposed]
   subtype crt_bool_x is Boolean; -- CXType_Bool
   procedure invalid_parameter_noinfo;
   pragma import (C,invalid_parameter_noinfo,"_invalid_parameter_noinfo");
   procedure invalid_parameter_noinfo_noreturn;
   pragma import (C,invalid_parameter_noinfo_noreturn,"_invalid_parameter_noinfo_noreturn");
   procedure invoke_watson(
      Expression : access Wide_Character;
      FunctionName : access Wide_Character;
      FileName : access Wide_Character;
      LineNo : Interfaces.C.unsigned;
      Reserved : uintptr_t
   );
   pragma import (C,invoke_watson,"_invoke_watson");
   subtype errno_t is Interfaces.C.Int; -- CXType_Int
   subtype wint_t is Interfaces.C.unsigned_short; -- CXType_UShort
   subtype wctype_t is Interfaces.C.unsigned_short; -- CXType_UShort
   subtype time32_t_x is Interfaces.C.Long; -- CXType_Long
   subtype time64_t_x is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   type crt_locale_data_public_x is record
      locale_pctype : access Interfaces.C.unsigned_short;
      locale_mb_cur_max : Interfaces.C.Int;
      locale_lc_codepage : Interfaces.C.unsigned;
   end record;
   type crt_locale_pointers_x is record
      locinfo : access Void;
      mbcinfo : access Void;
   end record;
   type crt_locale_data_x; -- Forward Declaration
   type crt_multibyte_data_x; -- Forward Declaration
   type locale_t_x is access crt_locale_pointers_x; -- CXType_Pointer - CXType_Typedef
   type Mbstatet_x is record
      Wchar : Interfaces.C.unsigned_long;
      Byte_x : Interfaces.C.unsigned_short;
      State : Interfaces.C.unsigned_short;
   end record;
   subtype mbstate_t is Mbstatet_x; -- CXType_Typedef
   subtype time_t is time64_t_x; -- CXType_Typedef
   subtype rsize_t is size_t; -- CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_wctype.h>
   function pctype_func return PUSHORT;
   pragma import (C,pctype_func,"__pctype_func");
   function pwctype_func return PUSHORT;
   pragma import (C,pwctype_func,"__pwctype_func");
   function iswalnum(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswalnum,"iswalnum");
   function iswalpha(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswalpha,"iswalpha");
   function iswascii(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswascii,"iswascii");
   function iswblank(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswblank,"iswblank");
   function iswcntrl(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswcntrl,"iswcntrl");
   function iswdigit(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswdigit,"iswdigit");
   function iswgraph(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswgraph,"iswgraph");
   function iswlower(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswlower,"iswlower");
   function iswprint(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswprint,"iswprint");
   function iswpunct(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswpunct,"iswpunct");
   function iswspace(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswspace,"iswspace");
   function iswupper(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswupper,"iswupper");
   function iswxdigit(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswxdigit,"iswxdigit");
   function iswcsymf(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswcsymf,"__iswcsymf");
   function iswcsym(
      C : wint_t
   ) return Interfaces.C.Int;
   pragma import (C,iswcsym,"__iswcsym");
   function iswalnum_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswalnum_l,"_iswalnum_l");
   function iswalpha_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswalpha_l,"_iswalpha_l");
   function iswblank_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswblank_l,"_iswblank_l");
   function iswcntrl_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswcntrl_l,"_iswcntrl_l");
   function iswdigit_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswdigit_l,"_iswdigit_l");
   function iswgraph_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswgraph_l,"_iswgraph_l");
   function iswlower_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswlower_l,"_iswlower_l");
   function iswprint_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswprint_l,"_iswprint_l");
   function iswpunct_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswpunct_l,"_iswpunct_l");
   function iswspace_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswspace_l,"_iswspace_l");
   function iswupper_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswupper_l,"_iswupper_l");
   function iswxdigit_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswxdigit_l,"_iswxdigit_l");
   function iswcsymf_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswcsymf_l,"_iswcsymf_l");
   function iswcsym_l(
      C : wint_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswcsym_l,"_iswcsym_l");
   function towupper(
      C : wint_t
   ) return wint_t;
   pragma import (C,towupper,"towupper");
   function towlower(
      C : wint_t
   ) return wint_t;
   pragma import (C,towlower,"towlower");
   function iswctype(
      C : wint_t;
      type_x : wctype_t
   ) return Interfaces.C.Int;
   pragma import (C,iswctype,"iswctype");
   function towupper_l(
      C : wint_t;
      Locale : locale_t_x
   ) return wint_t;
   pragma import (C,towupper_l,"_towupper_l");
   function towlower_l(
      C : wint_t;
      Locale : locale_t_x
   ) return wint_t;
   pragma import (C,towlower_l,"_towlower_l");
   function iswctype_l(
      C : wint_t;
      type_x : wctype_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iswctype_l,"_iswctype_l");
   function isleadbyte(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isleadbyte,"isleadbyte");
   function isleadbyte_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isleadbyte_l,"_isleadbyte_l");
   function is_wctype(
      C : wint_t;
      type_x : wctype_t
   ) return Interfaces.C.Int;
   pragma import (C,is_wctype,"is_wctype");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\ctype.h>
   function isctype(
      C : Interfaces.C.Int;
      type_x : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isctype,"_isctype");
   function isctype_l(
      C : Interfaces.C.Int;
      type_x : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isctype_l,"_isctype_l");
   function isalpha(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isalpha,"isalpha");
   function isalpha_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isalpha_l,"_isalpha_l");
   function isupper(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isupper,"isupper");
   function isupper_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isupper_l,"_isupper_l");
   function islower(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,islower,"islower");
   function islower_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,islower_l,"_islower_l");
   function isdigit(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isdigit,"isdigit");
   function isdigit_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isdigit_l,"_isdigit_l");
   function isxdigit(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isxdigit,"isxdigit");
   function isxdigit_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isxdigit_l,"_isxdigit_l");
   function isspace(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isspace,"isspace");
   function isspace_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isspace_l,"_isspace_l");
   function ispunct(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,ispunct,"ispunct");
   function ispunct_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,ispunct_l,"_ispunct_l");
   function isblank(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isblank,"isblank");
   function isblank_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isblank_l,"_isblank_l");
   function isalnum(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isalnum,"isalnum");
   function isalnum_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isalnum_l,"_isalnum_l");
   function isprint(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isprint,"isprint");
   function isprint_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isprint_l,"_isprint_l");
   function isgraph(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isgraph,"isgraph");
   function isgraph_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,isgraph_l,"_isgraph_l");
   function iscntrl(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,iscntrl,"iscntrl");
   function iscntrl_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,iscntrl_l,"_iscntrl_l");
   function toupper(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,toupper,"toupper");
   function tolower(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,tolower,"tolower");
   function tolower_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,tolower_l,"_tolower_l");
   function toupper_l(
      C : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,toupper_l,"_toupper_l");
   function isascii(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,isascii,"__isascii");
   function toascii(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,toascii,"__toascii");
   function iscsymf(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,iscsymf,"__iscsymf");
   function iscsym(
      C : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,iscsym,"__iscsym");
   function mb_cur_max_func return Interfaces.C.Int;
   pragma import (C,mb_cur_max_func,"___mb_cur_max_func");
   function mb_cur_max_l_func(
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,mb_cur_max_l_func,"___mb_cur_max_l_func");
   -- acrt_get_locale_data_prefix(); -- inlined function not supported
   -- chvalidchk_l(); -- inlined function not supported
   -- ischartype_l(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\kernelspecs.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared/basetsd.h>
   subtype POINTER_64_INT is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   subtype INT8 is Interfaces.C.signed_char; -- CXType_SChar
   type PINT8 is access Interfaces.C.signed_char; -- CXType_Pointer - CXType_SChar
   subtype INT16 is Interfaces.C.Short; -- CXType_Short
   type PINT16 is access Interfaces.C.Short; -- CXType_Pointer - CXType_Short
   subtype INT32 is Interfaces.C.Int; -- CXType_Int
   type PINT32 is access Interfaces.C.Int; -- CXType_Pointer - CXType_Int
   subtype INT64 is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   type PINT64 is access Interfaces.C.Extensions.long_long; -- CXType_Pointer - CXType_LongLong
   subtype UINT8 is Interfaces.C.unsigned_char; -- CXType_UChar
   type PUINT8 is access Interfaces.C.unsigned_char; -- CXType_Pointer - CXType_UChar
   subtype UINT16 is Interfaces.C.unsigned_short; -- CXType_UShort
   type PUINT16 is access Interfaces.C.unsigned_short; -- CXType_Pointer - CXType_UShort
   subtype UINT32 is Interfaces.C.unsigned; -- CXType_UInt
   type PUINT32 is access Interfaces.C.unsigned; -- CXType_Pointer - CXType_UInt
   subtype UINT64 is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type PUINT64 is access Interfaces.C.Extensions.unsigned_long_long; -- CXType_Pointer - CXType_ULongLong
   subtype LONG32 is Interfaces.C.Int; -- CXType_Int
   type PLONG32 is access Interfaces.C.Int; -- CXType_Pointer - CXType_Int
   subtype ULONG32 is Interfaces.C.unsigned; -- CXType_UInt
   type PULONG32 is access Interfaces.C.unsigned; -- CXType_Pointer - CXType_UInt
   subtype DWORD32 is Interfaces.C.unsigned; -- CXType_UInt
   type PDWORD32 is access Interfaces.C.unsigned; -- CXType_Pointer - CXType_UInt
   subtype INT_PTR is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   type PINT_PTR is access Interfaces.C.Extensions.long_long; -- CXType_Pointer - CXType_LongLong
   subtype UINT_PTR is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type PUINT_PTR is access Interfaces.C.Extensions.unsigned_long_long; -- CXType_Pointer - CXType_ULongLong
   subtype LONG_PTR is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   type PLONG_PTR is access Interfaces.C.Extensions.long_long; -- CXType_Pointer - CXType_LongLong
   subtype ULONG_PTR is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type PULONG_PTR is access Interfaces.C.Extensions.unsigned_long_long; -- CXType_Pointer - CXType_ULongLong
   subtype SHANDLE_PTR is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   subtype HANDLE_PTR is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   subtype UHALF_PTR is Interfaces.C.unsigned; -- CXType_UInt
   type PUHALF_PTR is access Interfaces.C.unsigned; -- CXType_Pointer - CXType_UInt
   subtype HALF_PTR is Interfaces.C.Int; -- CXType_Int
   type PHALF_PTR is access Interfaces.C.Int; -- CXType_Pointer - CXType_Int
   -- HandleToULong(); -- inlined function not supported
   -- HandleToLong(); -- inlined function not supported
   -- ULongToHandle(); -- inlined function not supported
   -- LongToHandle(); -- inlined function not supported
   -- PtrToUlong(); -- inlined function not supported
   -- PtrToUint(); -- inlined function not supported
   -- PtrToUshort(); -- inlined function not supported
   -- PtrToLong(); -- inlined function not supported
   -- PtrToInt(); -- inlined function not supported
   -- PtrToShort(); -- inlined function not supported
   -- IntToPtr(); -- inlined function not supported
   -- UIntToPtr(); -- inlined function not supported
   -- LongToPtr(); -- inlined function not supported
   -- ULongToPtr(); -- inlined function not supported
   -- Ptr32ToPtr(); -- inlined function not supported
   -- Handle32ToHandle(); -- inlined function not supported
   -- PtrToPtr32(); -- inlined function not supported
   -- subtype SIZE_T is ULONG_PTR; -- CXType_Typedef [Note: Type already defined (case sensitive issue)]
   type PSIZE_T is access ULONG_PTR; -- CXType_Pointer - CXType_Typedef
   subtype SSIZE_T is LONG_PTR; -- CXType_Typedef
   type PSSIZE_T is access LONG_PTR; -- CXType_Pointer - CXType_Typedef
   subtype DWORD_PTR is ULONG_PTR; -- CXType_Typedef
   type PDWORD_PTR is access ULONG_PTR; -- CXType_Pointer - CXType_Typedef
   subtype LONG64 is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   type PLONG64 is access Interfaces.C.Extensions.long_long; -- CXType_Pointer - CXType_LongLong
   subtype ULONG64 is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type PULONG64 is access Interfaces.C.Extensions.unsigned_long_long; -- CXType_Pointer - CXType_ULongLong
   subtype DWORD64 is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type PDWORD64 is access Interfaces.C.Extensions.unsigned_long_long; -- CXType_Pointer - CXType_ULongLong
   subtype KAFFINITY is ULONG_PTR; -- CXType_Typedef
   type PKAFFINITY is access KAFFINITY; -- CXType_Pointer - CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   type PVOID is access Void; -- CXType_Pointer - CXType_Void
   type PVOID64 is access Void; -- CXType_Pointer - CXType_Void
   subtype CHAR is Character; -- CXType_Char_S
   subtype SHORT is Interfaces.C.Short; -- CXType_Short
   subtype LONG is Interfaces.C.Long; -- CXType_Long
   subtype WCHAR is Wide_Character; -- CXType_WChar
   type PWCHAR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type LPWCH is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PWCH is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type LPCWCH is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCWCH is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type NWPSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type LPWSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PWSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PZPWSTR is access PWSTR; -- CXType_Pointer - CXType_Typedef
   type PCZPWSTR is access constant PWSTR; -- CXType_Pointer - CXType_Typedef
   type LPUWSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PUWSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type LPCWSTR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCWSTR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PZPCWSTR is access PCWSTR; -- CXType_Pointer - CXType_Typedef
   type PCZPCWSTR is access constant PCWSTR; -- CXType_Pointer - CXType_Typedef
   type LPCUWSTR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUWSTR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PZZWSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCZZWSTR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PUZZWSTR is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUZZWSTR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PNZWCH is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCNZWCH is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PUNZWCH is access WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUNZWCH is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type LPCWCHAR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCWCHAR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type LPCUWCHAR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUWCHAR is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   subtype UCSCHAR is Interfaces.C.unsigned_long; -- CXType_ULong
   type PUCSCHAR is access UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUCSCHAR is access constant UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PUCSSTR is access UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PUUCSSTR is access UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUCSSTR is access constant UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUUCSSTR is access constant UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PUUCSCHAR is access UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PCUUCSCHAR is access constant UCSCHAR; -- CXType_Pointer - CXType_Typedef
   type PCHAR is access CHAR; -- CXType_Pointer - CXType_Typedef
   type LPCH is access CHAR; -- CXType_Pointer - CXType_Typedef
   type PCH is access CHAR; -- CXType_Pointer - CXType_Typedef
   type LPCCH is access constant CHAR; -- CXType_Pointer - CXType_Typedef
   type PCCH is access constant CHAR; -- CXType_Pointer - CXType_Typedef
   type NPSTR is access CHAR; -- CXType_Pointer - CXType_Typedef
   type LPSTR is access CHAR; -- CXType_Pointer - CXType_Typedef
   type PSTR is access CHAR; -- CXType_Pointer - CXType_Typedef
   type PZPSTR is access PSTR; -- CXType_Pointer - CXType_Typedef
   type PCZPSTR is access constant PSTR; -- CXType_Pointer - CXType_Typedef
   type LPCSTR is access constant CHAR; -- CXType_Pointer - CXType_Typedef
   type PCSTR is access constant CHAR; -- CXType_Pointer - CXType_Typedef
   type PZPCSTR is access PCSTR; -- CXType_Pointer - CXType_Typedef
   type PCZPCSTR is access constant PCSTR; -- CXType_Pointer - CXType_Typedef
   type PZZSTR is access CHAR; -- CXType_Pointer - CXType_Typedef
   type PCZZSTR is access constant CHAR; -- CXType_Pointer - CXType_Typedef
   type PNZCH is access CHAR; -- CXType_Pointer - CXType_Typedef
   type PCNZCH is access constant CHAR; -- CXType_Pointer - CXType_Typedef
   subtype TCHAR is Character; -- CXType_Char_S
   type PTCHAR is access Character; -- CXType_Pointer - CXType_Char_S
   subtype TBYTE is Interfaces.C.unsigned_char; -- CXType_UChar
   type PTBYTE is access Interfaces.C.unsigned_char; -- CXType_Pointer - CXType_UChar
   subtype LPTCH is LPCH; -- CXType_Typedef
   subtype PTCH is LPCH; -- CXType_Typedef
   subtype LPCTCH is LPCCH; -- CXType_Typedef
   subtype PCTCH is LPCCH; -- CXType_Typedef
   subtype PTSTR is LPSTR; -- CXType_Typedef
   subtype LPTSTR is LPSTR; -- CXType_Typedef
   subtype PUTSTR is LPSTR; -- CXType_Typedef
   subtype LPUTSTR is LPSTR; -- CXType_Typedef
   subtype PCTSTR is LPCSTR; -- CXType_Typedef
   subtype LPCTSTR is LPCSTR; -- CXType_Typedef
   subtype PCUTSTR is LPCSTR; -- CXType_Typedef
   subtype LPCUTSTR is LPCSTR; -- CXType_Typedef
   subtype PZZTSTR is PZZSTR; -- CXType_Typedef
   subtype PUZZTSTR is PZZSTR; -- CXType_Typedef
   subtype PCZZTSTR is PCZZSTR; -- CXType_Typedef
   subtype PCUZZTSTR is PCZZSTR; -- CXType_Typedef
   subtype PZPTSTR is PZPSTR; -- CXType_Typedef
   subtype PNZTCH is PNZCH; -- CXType_Typedef
   subtype PUNZTCH is PNZCH; -- CXType_Typedef
   subtype PCNZTCH is PCNZCH; -- CXType_Typedef
   subtype PCUNZTCH is PCNZCH; -- CXType_Typedef
   type PSHORT is access SHORT; -- CXType_Pointer - CXType_Typedef
   type PLONG is access LONG; -- CXType_Pointer - CXType_Typedef
   type PROCESSOR_NUMBER_x is record
      Group : WORD;
      Number : BYTE;
      Reserved : BYTE;
   end record;
   subtype PROCESSOR_NUMBER is PROCESSOR_NUMBER_x; -- CXType_Elaborated
   type PPROCESSOR_NUMBER is access PROCESSOR_NUMBER_x; -- CXType_Pointer - CXType_Elaborated
   type GROUP_AFFINITY_x is record
      Mask : KAFFINITY;
      Group : WORD;
      Reserved : Void;
   end record;
   subtype GROUP_AFFINITY is GROUP_AFFINITY_x; -- CXType_Elaborated
   type PGROUP_AFFINITY is access GROUP_AFFINITY_x; -- CXType_Pointer - CXType_Elaborated
   type HANDLE is access Void; -- CXType_Pointer - CXType_Void
   type PHANDLE is access HANDLE; -- CXType_Pointer - CXType_Typedef
   subtype FCHAR is BYTE; -- CXType_Typedef
   subtype FSHORT is WORD; -- CXType_Typedef
   subtype FLONG is DWORD; -- CXType_Typedef
   subtype HRESULT is Interfaces.C.Long; -- CXType_Long
   subtype CCHAR is Character; -- CXType_Char_S
   subtype LCID is DWORD; -- CXType_Typedef
   subtype PLCID is PDWORD; -- CXType_Typedef
   subtype LANGID is WORD; -- CXType_Typedef
   type COMPARTMENT_ID is (
      UNSPECIFIED_COMPARTMENT_ID,
      DEFAULT_COMPARTMENT_ID
   );
   for COMPARTMENT_ID use (
      UNSPECIFIED_COMPARTMENT_ID => 0,
      DEFAULT_COMPARTMENT_ID => 1
   );
   for COMPARTMENT_ID'Size use 32;
   type PCOMPARTMENT_ID is access COMPARTMENT_ID; -- CXType_Pointer - CXType_Elaborated
   type FLOAT128_x is record
      LowPart : Interfaces.C.Extensions.long_long;
      HighPart : Interfaces.C.Extensions.long_long;
   end record;
   subtype FLOAT128 is FLOAT128_x; -- CXType_Elaborated
   type PFLOAT128 is access FLOAT128; -- CXType_Pointer - CXType_Typedef
   subtype LONGLONG is Interfaces.C.Extensions.long_long; -- CXType_LongLong
   subtype ULONGLONG is Interfaces.C.Extensions.unsigned_long_long; -- CXType_ULongLong
   type PLONGLONG is access LONGLONG; -- CXType_Pointer - CXType_Typedef
   type PULONGLONG is access ULONGLONG; -- CXType_Pointer - CXType_Typedef
   subtype USN is LONGLONG; -- CXType_Typedef
   type LARGE_INTEGER_x is null record; -- Union Placeholder [FIXME]
   subtype LARGE_INTEGER is LARGE_INTEGER_x; -- CXType_Elaborated
   type PLARGE_INTEGER is access LARGE_INTEGER; -- CXType_Pointer - CXType_Typedef
   type ULARGE_INTEGER_x is null record; -- Union Placeholder [FIXME]
   subtype ULARGE_INTEGER is ULARGE_INTEGER_x; -- CXType_Elaborated
   type PULARGE_INTEGER is access ULARGE_INTEGER; -- CXType_Pointer - CXType_Typedef
   subtype RTL_REFERENCE_COUNT is LONG_PTR; -- CXType_Typedef
   type PRTL_REFERENCE_COUNT is access LONG_PTR; -- CXType_Pointer - CXType_Typedef
   subtype RTL_REFERENCE_COUNT32 is LONG; -- CXType_Typedef
   type PRTL_REFERENCE_COUNT32 is access LONG; -- CXType_Pointer - CXType_Typedef
   type LUID_x is record
      LowPart : DWORD;
      HighPart : LONG;
   end record;
   subtype LUID is LUID_x; -- CXType_Elaborated
   type PLUID is access LUID_x; -- CXType_Pointer - CXType_Elaborated
   subtype DWORDLONG is ULONGLONG; -- CXType_Typedef
   type PDWORDLONG is access DWORDLONG; -- CXType_Pointer - CXType_Typedef
   function rotl8(
      Value : Interfaces.C.unsigned_char;
      Shift : Interfaces.C.unsigned_char
   ) return Interfaces.C.unsigned_char;
   pragma import (C,rotl8,"_rotl8");
   function rotl16(
      Value : Interfaces.C.unsigned_short;
      Shift : Interfaces.C.unsigned_char
   ) return Interfaces.C.unsigned_short;
   pragma import (C,rotl16,"_rotl16");
   function rotr8(
      Value : Interfaces.C.unsigned_char;
      Shift : Interfaces.C.unsigned_char
   ) return Interfaces.C.unsigned_char;
   pragma import (C,rotr8,"_rotr8");
   function rotr16(
      Value : Interfaces.C.unsigned_short;
      Shift : Interfaces.C.unsigned_char
   ) return Interfaces.C.unsigned_short;
   pragma import (C,rotr16,"_rotr16");
   function rotl(
      Value : Interfaces.C.unsigned;
      Shift : Interfaces.C.Int
   ) return Interfaces.C.unsigned;
   pragma import (C,rotl,"_rotl");
   function rotl64(
      Value : Interfaces.C.Extensions.unsigned_long_long;
      Shift : Interfaces.C.Int
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,rotl64,"_rotl64");
   function rotr(
      Value : Interfaces.C.unsigned;
      Shift : Interfaces.C.Int
   ) return Interfaces.C.unsigned;
   pragma import (C,rotr,"_rotr");
   function rotr64(
      Value : Interfaces.C.Extensions.unsigned_long_long;
      Shift : Interfaces.C.Int
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,rotr64,"_rotr64");
   subtype BOOLEAN is BYTE; -- CXType_Typedef
   type PBOOLEAN is access BOOLEAN; -- CXType_Pointer - CXType_Typedef
   type LIST_ENTRY_x is record
      Flink : access Void;
      Blink : access Void;
   end record;
   subtype LIST_ENTRY is LIST_ENTRY_x; -- CXType_Elaborated
   type PLIST_ENTRY is access LIST_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type PRLIST_ENTRY is access LIST_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type SINGLE_LIST_ENTRY_x is record
      Next : access Void;
   end record;
   subtype SINGLE_LIST_ENTRY is SINGLE_LIST_ENTRY_x; -- CXType_Elaborated
   type PSINGLE_LIST_ENTRY is access SINGLE_LIST_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type LIST_ENTRY32 is record
      Flink : DWORD;
      Blink : DWORD;
   end record;
   type PLIST_ENTRY32 is access LIST_ENTRY32; -- CXType_Pointer - CXType_Typedef
   type LIST_ENTRY64 is record
      Flink : ULONGLONG;
      Blink : ULONGLONG;
   end record;
   type PLIST_ENTRY64 is access LIST_ENTRY64; -- CXType_Pointer - CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared/guiddef.h>
   type GUID_x is record
      Data1 : Interfaces.C.unsigned_long;
      Data2 : Interfaces.C.unsigned_short;
      Data3 : Interfaces.C.unsigned_short;
      Data4 : Void;
   end record;
   subtype GUID is GUID_x; -- CXType_Elaborated
   type LPGUID is access GUID; -- CXType_Pointer - CXType_Typedef
   type LPCGUID is access constant GUID; -- CXType_Pointer - CXType_Typedef
   subtype IID is GUID; -- CXType_Typedef
   type LPIID is access IID; -- CXType_Pointer - CXType_Typedef
   subtype CLSID is GUID; -- CXType_Typedef
   type LPCLSID is access CLSID; -- CXType_Pointer - CXType_Typedef
   subtype FMTID is GUID; -- CXType_Typedef
   type LPFMTID is access FMTID; -- CXType_Pointer - CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\errno.h>
   function errno return PINT;
   pragma import (C,errno,"_errno");
   function set_errno(
      Value : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,set_errno,"_set_errno");
   function get_errno(
      Value : access Interfaces.C.Int
   ) return errno_t;
   pragma import (C,get_errno,"_get_errno");
   function doserrno return PULONG;
   pragma import (C,doserrno,"__doserrno");
   function set_doserrno(
      Value : Interfaces.C.unsigned_long
   ) return errno_t;
   pragma import (C,set_doserrno,"_set_doserrno");
   function get_doserrno(
      Value : access Interfaces.C.unsigned_long
   ) return errno_t;
   pragma import (C,get_doserrno,"_get_doserrno");
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\vcruntime_string.h>
   procedure memchr(
      Buf : access Void;
      Val : Interfaces.C.Int;
      MaxCount : size_t
   );
   pragma import (C,memchr,"memchr");
   function memcmp(
      Buf1 : access Void;
      Buf2 : access Void;
      Size : size_t
   ) return Interfaces.C.Int;
   pragma import (C,memcmp,"memcmp");
   procedure memcpy(
      Dst : access Void;
      Src : access Void;
      Size : size_t
   );
   pragma import (C,memcpy,"memcpy");
   procedure memmove(
      Dst : access Void;
      Src : access Void;
      Size : size_t
   );
   pragma import (C,memmove,"memmove");
   procedure memset(
      Dst : access Void;
      Val : Interfaces.C.Int;
      Size : size_t
   );
   pragma import (C,memset,"memset");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_memcpy_s.h>
   -- memcpy_s(); -- inlined function not supported
   -- memmove_s(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_memory.h>
   function memicmp(
      Buf1 : access Void;
      Buf2 : access Void;
      Size : size_t
   ) return Interfaces.C.Int;
   pragma import (C,memicmp,"_memicmp");
   function memicmp_l(
      Buf1 : access Void;
      Buf2 : access Void;
      Size : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,memicmp_l,"_memicmp_l");
   procedure memccpy(
      Dst : access Void;
      Src : access Void;
      Val : Interfaces.C.Int;
      Size : size_t
   );
   pragma import (C,memccpy,"memccpy");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_wstring.h>
   function wcscat_s(
      Destination : access Wide_Character;
      SizeInWords : rsize_t;
      Source : access Wide_Character
   ) return errno_t;
   pragma import (C,wcscat_s,"wcscat_s");
   function wcscpy_s(
      Destination : access Wide_Character;
      SizeInWords : rsize_t;
      Source : access Wide_Character
   ) return errno_t;
   pragma import (C,wcscpy_s,"wcscpy_s");
   function wcsncat_s(
      Destination : access Wide_Character;
      SizeInWords : rsize_t;
      Source : access Wide_Character;
      MaxCount : rsize_t
   ) return errno_t;
   pragma import (C,wcsncat_s,"wcsncat_s");
   function wcsncpy_s(
      Destination : access Wide_Character;
      SizeInWords : rsize_t;
      Source : access Wide_Character;
      MaxCount : rsize_t
   ) return errno_t;
   pragma import (C,wcsncpy_s,"wcsncpy_s");
   type Wide_Character_Ptr is access all Wide_Character; -- Auto Generated Dependancy
   function wcscmp(
      String1 : access Wide_Character;
      String2 : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wcscmp,"wcscmp");
   function wcscspn(
      String : access Wide_Character;
      Control : access Wide_Character
   ) return size_t;
   pragma import (C,wcscspn,"wcscspn");
   function wcslen(
      String : access Wide_Character
   ) return size_t;
   pragma import (C,wcslen,"wcslen");
   function wcsnlen(
      Source : access Wide_Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,wcsnlen,"wcsnlen");
   -- wcsnlen_s(); -- inlined function not supported
   function wcsncmp(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,wcsncmp,"wcsncmp");
   function wcsspn(
      String : access Wide_Character;
      Control : access Wide_Character
   ) return size_t;
   pragma import (C,wcsspn,"wcsspn");
   function wcserror_s(
      Buffer : access Wide_Character;
      SizeInWords : size_t;
      ErrorNumber : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,wcserror_s,"_wcserror_s");
   function wcsicmp(
      String1 : access Wide_Character;
      String2 : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wcsicmp,"_wcsicmp");
   function wcsicmp_l(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wcsicmp_l,"_wcsicmp_l");
   function wcsnicmp(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,wcsnicmp,"_wcsnicmp");
   function wcsnicmp_l(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wcsnicmp_l,"_wcsnicmp_l");
   function wcsnset_s(
      Destination : access Wide_Character;
      SizeInWords : size_t;
      Value : Wide_Character;
      MaxCount : size_t
   ) return errno_t;
   pragma import (C,wcsnset_s,"_wcsnset_s");
   function wcsset_s(
      Destination : access Wide_Character;
      SizeInWords : size_t;
      Value : Wide_Character
   ) return errno_t;
   pragma import (C,wcsset_s,"_wcsset_s");
   function wcslwr_s(
      String : access Wide_Character;
      SizeInWords : size_t
   ) return errno_t;
   pragma import (C,wcslwr_s,"_wcslwr_s");
   function wcslwr_s_l(
      String : access Wide_Character;
      SizeInWords : size_t;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,wcslwr_s_l,"_wcslwr_s_l");
   function wcsupr_s(
      String : access Wide_Character;
      Size : size_t
   ) return errno_t;
   pragma import (C,wcsupr_s,"_wcsupr_s");
   function wcsupr_s_l(
      String : access Wide_Character;
      Size : size_t;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,wcsupr_s_l,"_wcsupr_s_l");
   function wcsxfrm(
      Destination : access Wide_Character;
      Source : access Wide_Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,wcsxfrm,"wcsxfrm");
   function wcsxfrm_l(
      Destination : access Wide_Character;
      Source : access Wide_Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return size_t;
   pragma import (C,wcsxfrm_l,"_wcsxfrm_l");
   function wcscoll(
      String1 : access Wide_Character;
      String2 : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wcscoll,"wcscoll");
   function wcscoll_l(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wcscoll_l,"_wcscoll_l");
   function wcsicoll(
      String1 : access Wide_Character;
      String2 : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wcsicoll,"_wcsicoll");
   function wcsicoll_l(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wcsicoll_l,"_wcsicoll_l");
   function wcsncoll(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,wcsncoll,"_wcsncoll");
   function wcsncoll_l(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wcsncoll_l,"_wcsncoll_l");
   function wcsnicoll(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,wcsnicoll,"_wcsnicoll");
   function wcsnicoll_l(
      String1 : access Wide_Character;
      String2 : access Wide_Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wcsnicoll_l,"_wcsnicoll_l");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\string.h>
   function strcpy_s(
      Destination : access Character;
      SizeInBytes : rsize_t;
      Source : access Character
   ) return errno_t;
   pragma import (C,strcpy_s,"strcpy_s");
   function strcat_s(
      Destination : access Character;
      SizeInBytes : rsize_t;
      Source : access Character
   ) return errno_t;
   pragma import (C,strcat_s,"strcat_s");
   function strerror_s(
      Buffer : access Character;
      SizeInBytes : size_t;
      ErrorNumber : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,strerror_s,"strerror_s");
   function strncat_s(
      Destination : access Character;
      SizeInBytes : rsize_t;
      Source : access Character;
      MaxCount : rsize_t
   ) return errno_t;
   pragma import (C,strncat_s,"strncat_s");
   function strncpy_s(
      Destination : access Character;
      SizeInBytes : rsize_t;
      Source : access Character;
      MaxCount : rsize_t
   ) return errno_t;
   pragma import (C,strncpy_s,"strncpy_s");
   function strcmp(
      Str1 : access Character;
      Str2 : access Character
   ) return Interfaces.C.Int;
   pragma import (C,strcmp,"strcmp");
   function strcmpi(
      String1 : access Character;
      String2 : access Character
   ) return Interfaces.C.Int;
   pragma import (C,strcmpi,"_strcmpi");
   function strcoll(
      String1 : access Character;
      String2 : access Character
   ) return Interfaces.C.Int;
   pragma import (C,strcoll,"strcoll");
   function strcoll_l(
      String1 : access Character;
      String2 : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,strcoll_l,"_strcoll_l");
   function strcspn(
      Str : access Character;
      Control : access Character
   ) return size_t;
   pragma import (C,strcspn,"strcspn");
   function stricmp(
      String1 : access Character;
      String2 : access Character
   ) return Interfaces.C.Int;
   pragma import (C,stricmp,"_stricmp");
   function stricoll(
      String1 : access Character;
      String2 : access Character
   ) return Interfaces.C.Int;
   pragma import (C,stricoll,"_stricoll");
   function stricoll_l(
      String1 : access Character;
      String2 : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,stricoll_l,"_stricoll_l");
   function stricmp_l(
      String1 : access Character;
      String2 : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,stricmp_l,"_stricmp_l");
   function strlen(
      Str : access Character
   ) return size_t;
   pragma import (C,strlen,"strlen");
   function strlwr_s(
      String : access Character;
      Size : size_t
   ) return errno_t;
   pragma import (C,strlwr_s,"_strlwr_s");
   function strlwr_s_l(
      String : access Character;
      Size : size_t;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,strlwr_s_l,"_strlwr_s_l");
   function strncmp(
      Str1 : access Character;
      Str2 : access Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,strncmp,"strncmp");
   function strnicmp(
      String1 : access Character;
      String2 : access Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,strnicmp,"_strnicmp");
   function strnicmp_l(
      String1 : access Character;
      String2 : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,strnicmp_l,"_strnicmp_l");
   function strnicoll(
      String1 : access Character;
      String2 : access Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,strnicoll,"_strnicoll");
   function strnicoll_l(
      String1 : access Character;
      String2 : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,strnicoll_l,"_strnicoll_l");
   function strncoll(
      String1 : access Character;
      String2 : access Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,strncoll,"_strncoll");
   function strncoll_l(
      String1 : access Character;
      String2 : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,strncoll_l,"_strncoll_l");
   function strncnt(
      String : access Character;
      Count : size_t
   ) return size_t;
   pragma import (C,strncnt,"__strncnt");
   function strnlen(
      String : access Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,strnlen,"strnlen");
   -- strnlen_s(); -- inlined function not supported
   function strnset_s(
      String : access Character;
      SizeInBytes : size_t;
      Value : Interfaces.C.Int;
      MaxCount : size_t
   ) return errno_t;
   pragma import (C,strnset_s,"_strnset_s");
   function strset_s(
      Destination : access Character;
      DestinationSize : size_t;
      Value : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,strset_s,"_strset_s");
   function strspn(
      Str : access Character;
      Control : access Character
   ) return size_t;
   pragma import (C,strspn,"strspn");
   function strupr_s(
      String : access Character;
      Size : size_t
   ) return errno_t;
   pragma import (C,strupr_s,"_strupr_s");
   function strupr_s_l(
      String : access Character;
      Size : size_t;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,strupr_s_l,"_strupr_s_l");
   function strxfrm(
      Destination : access Character;
      Source : access Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,strxfrm,"strxfrm");
   function strxfrm_l(
      Destination : access Character;
      Source : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return size_t;
   pragma import (C,strxfrm_l,"_strxfrm_l");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared/guiddef.h>
   -- InlineIsEqualGUID(); -- inlined function not supported
   -- IsEqualGUID(); -- inlined function not supported
   -- operator==(); -- inlined function not supported
   -- operator!=(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   type OBJECTID_x is record
      Lineage : GUID;
      Uniquifier : DWORD;
   end record;
   subtype OBJECTID is OBJECTID_x; -- CXType_Elaborated
   subtype EXCEPTION_ROUTINE is System.Address; -- [FIXME - CXType_FunctionProto] EXCEPTION_DISPOSITION (struct _EXCEPTION_RECORD *, PVOID, struct _CONTEXT *, PVOID)
   subtype PEXCEPTION_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_FunctionProto] EXCEPTION_DISPOSITION (struct _EXCEPTION_RECORD *, PVOID, struct _CONTEXT *, PVOID)
   type ENUM_FLAG_INTEGER_FOR_SIZE_x is null record;
   subtype type_xx is INT8; -- CXType_Typedef
   subtype KSPIN_LOCK is ULONG_PTR; -- CXType_Typedef
   type PKSPIN_LOCK is access KSPIN_LOCK; -- CXType_Pointer - CXType_Typedef
   type M128A_x is record
      Low : ULONGLONG;
      High : LONGLONG;
   end record;
   subtype M128A is M128A_x; -- CXType_Elaborated
   type PM128A is access M128A_x; -- CXType_Pointer - CXType_Elaborated
   type XSAVE_FORMAT_x is record
      ControlWord : WORD;
      StatusWord : WORD;
      TagWord : BYTE;
      Reserved1 : BYTE;
      ErrorOpcode : WORD;
      ErrorOffset : DWORD;
      ErrorSelector : WORD;
      Reserved2 : WORD;
      DataOffset : DWORD;
      DataSelector : WORD;
      Reserved3 : WORD;
      MxCsr : DWORD;
      MxCsr_Mask : DWORD;
      FloatRegisters : Void;
      XmmRegisters : Void;
      Reserved4 : Void;
   end record;
   subtype XSAVE_FORMAT is XSAVE_FORMAT_x; -- CXType_Elaborated
   type PXSAVE_FORMAT is access XSAVE_FORMAT_x; -- CXType_Pointer - CXType_Elaborated
   type XSAVE_AREA_HEADER_x is record
      Mask : DWORD64;
      CompactionMask : DWORD64;
      Reserved2 : Void;
   end record;
   subtype XSAVE_AREA_HEADER is XSAVE_AREA_HEADER_x; -- CXType_Elaborated
   type PXSAVE_AREA_HEADER is access XSAVE_AREA_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type XSAVE_AREA_x is record
      LegacyState : XSAVE_FORMAT;
      Header : XSAVE_AREA_HEADER;
   end record;
   subtype XSAVE_AREA is XSAVE_AREA_x; -- CXType_Elaborated
   type PXSAVE_AREA is access XSAVE_AREA_x; -- CXType_Pointer - CXType_Elaborated
   type XSTATE_CONTEXT_x is record
      Mask : DWORD64;
      Length : DWORD;
      Reserved1 : DWORD;
      Area : PXSAVE_AREA;
      Buffer : PVOID;
   end record;
   subtype XSTATE_CONTEXT is XSTATE_CONTEXT_x; -- CXType_Elaborated
   type PXSTATE_CONTEXT is access XSTATE_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type SCOPE_TABLE_AMD64_x is record
      Count : DWORD;
      ScopeRecord : Void;
   end record;
   subtype SCOPE_TABLE_AMD64 is SCOPE_TABLE_AMD64_x; -- CXType_Elaborated
   type PSCOPE_TABLE_AMD64 is access SCOPE_TABLE_AMD64_x; -- CXType_Pointer - CXType_Elaborated
   function bittest(
      Base : access constant LONG;
      Offset : LONG
   ) return BOOLEAN;
   pragma import (C,bittest,"_bittest");
   function bittestandcomplement(
      Base : access LONG;
      Offset : LONG
   ) return BOOLEAN;
   pragma import (C,bittestandcomplement,"_bittestandcomplement");
   function bittestandset(
      Base : access LONG;
      Offset : LONG
   ) return BOOLEAN;
   pragma import (C,bittestandset,"_bittestandset");
   function bittestandreset(
      Base : access LONG;
      Offset : LONG
   ) return BOOLEAN;
   pragma import (C,bittestandreset,"_bittestandreset");
   function interlockedbittestandset(
      Base : access LONG;
      Offset : LONG
   ) return BOOLEAN;
   pragma import (C,interlockedbittestandset,"_interlockedbittestandset");
   function interlockedbittestandreset(
      Base : access LONG;
      Offset : LONG
   ) return BOOLEAN;
   pragma import (C,interlockedbittestandreset,"_interlockedbittestandreset");
   function bittest64(
      Base : access constant LONG64;
      Offset : LONG64
   ) return BOOLEAN;
   pragma import (C,bittest64,"_bittest64");
   function bittestandcomplement64(
      Base : access LONG64;
      Offset : LONG64
   ) return BOOLEAN;
   pragma import (C,bittestandcomplement64,"_bittestandcomplement64");
   function bittestandset64(
      Base : access LONG64;
      Offset : LONG64
   ) return BOOLEAN;
   pragma import (C,bittestandset64,"_bittestandset64");
   function bittestandreset64(
      Base : access LONG64;
      Offset : LONG64
   ) return BOOLEAN;
   pragma import (C,bittestandreset64,"_bittestandreset64");
   function interlockedbittestandset64(
      Base : access LONG64;
      Offset : LONG64
   ) return BOOLEAN;
   pragma import (C,interlockedbittestandset64,"_interlockedbittestandset64");
   function interlockedbittestandreset64(
      Base : access LONG64;
      Offset : LONG64
   ) return BOOLEAN;
   pragma import (C,interlockedbittestandreset64,"_interlockedbittestandreset64");
   function BitScanForward(
      Index : access DWORD;
      Mask : DWORD
   ) return BOOLEAN;
   pragma import (C,BitScanForward,"_BitScanForward");
   function BitScanReverse(
      Index : access DWORD;
      Mask : DWORD
   ) return BOOLEAN;
   pragma import (C,BitScanReverse,"_BitScanReverse");
   function BitScanForward64(
      Index : access DWORD;
      Mask : DWORD64
   ) return BOOLEAN;
   pragma import (C,BitScanForward64,"_BitScanForward64");
   function BitScanReverse64(
      Index : access DWORD;
      Mask : DWORD64
   ) return BOOLEAN;
   pragma import (C,BitScanReverse64,"_BitScanReverse64");
   function InterlockedIncrement16(
      Addend : access SHORT
   ) return SHORT;
   pragma import (C,InterlockedIncrement16,"_InterlockedIncrement16");
   function InterlockedDecrement16(
      Addend : access SHORT
   ) return SHORT;
   pragma import (C,InterlockedDecrement16,"_InterlockedDecrement16");
   function InterlockedCompareExchange16(
      Destination : access SHORT;
      ExChange : SHORT;
      Comperand : SHORT
   ) return SHORT;
   pragma import (C,InterlockedCompareExchange16,"_InterlockedCompareExchange16");
   function InterlockedAnd(
      Destination : access LONG;
      Value : LONG
   ) return LONG;
   pragma import (C,InterlockedAnd,"_InterlockedAnd");
   function InterlockedOr(
      Destination : access LONG;
      Value : LONG
   ) return LONG;
   pragma import (C,InterlockedOr,"_InterlockedOr");
   function InterlockedXor(
      Destination : access LONG;
      Value : LONG
   ) return LONG;
   pragma import (C,InterlockedXor,"_InterlockedXor");
   function InterlockedAnd64(
      Destination : access LONG64;
      Value : LONG64
   ) return LONG64;
   pragma import (C,InterlockedAnd64,"_InterlockedAnd64");
   function InterlockedOr64(
      Destination : access LONG64;
      Value : LONG64
   ) return LONG64;
   pragma import (C,InterlockedOr64,"_InterlockedOr64");
   function InterlockedXor64(
      Destination : access LONG64;
      Value : LONG64
   ) return LONG64;
   pragma import (C,InterlockedXor64,"_InterlockedXor64");
   function InterlockedIncrement(
      Addend : access LONG
   ) return LONG;
   pragma import (C,InterlockedIncrement,"_InterlockedIncrement");
   function InterlockedDecrement(
      Addend : access LONG
   ) return LONG;
   pragma import (C,InterlockedDecrement,"_InterlockedDecrement");
   function InterlockedExchange(
      Target : access LONG;
      Value : LONG
   ) return LONG;
   pragma import (C,InterlockedExchange,"_InterlockedExchange");
   function InterlockedExchangeAdd(
      Addend : access LONG;
      Value : LONG
   ) return LONG;
   pragma import (C,InterlockedExchangeAdd,"_InterlockedExchangeAdd");
   -- InlineInterlockedAdd(); -- inlined function not supported
   function InterlockedCompareExchange(
      Destination : access LONG;
      ExChange : LONG;
      Comperand : LONG
   ) return LONG;
   pragma import (C,InterlockedCompareExchange,"_InterlockedCompareExchange");
   function InterlockedIncrement64(
      Addend : access LONG64
   ) return LONG64;
   pragma import (C,InterlockedIncrement64,"_InterlockedIncrement64");
   function InterlockedDecrement64(
      Addend : access LONG64
   ) return LONG64;
   pragma import (C,InterlockedDecrement64,"_InterlockedDecrement64");
   function InterlockedExchange64(
      Target : access LONG64;
      Value : LONG64
   ) return LONG64;
   pragma import (C,InterlockedExchange64,"_InterlockedExchange64");
   function InterlockedExchangeAdd64(
      Addend : access LONG64;
      Value : LONG64
   ) return LONG64;
   pragma import (C,InterlockedExchangeAdd64,"_InterlockedExchangeAdd64");
   -- InlineInterlockedAdd64(); -- inlined function not supported
   function InterlockedCompareExchange64(
      Destination : access LONG64;
      ExChange : LONG64;
      Comperand : LONG64
   ) return LONG64;
   pragma import (C,InterlockedCompareExchange64,"_InterlockedCompareExchange64");
   function InterlockedCompareExchange128(
      Destination : access LONG64;
      ExchangeHigh : LONG64;
      ExchangeLow : LONG64;
      ComparandResult : access LONG64
   ) return BOOLEAN;
   pragma import (C,InterlockedCompareExchange128,"_InterlockedCompareExchange128");
   procedure InterlockedCompareExchangePointer(
      Destination : access PVOID;
      Exchange : PVOID;
      Comperand : PVOID
   );
   pragma import (C,InterlockedCompareExchangePointer,"_InterlockedCompareExchangePointer");
   procedure InterlockedExchangePointer(
      Target : access PVOID;
      Value : PVOID
   );
   pragma import (C,InterlockedExchangePointer,"_InterlockedExchangePointer");
   function InterlockedExchange8(
      Target : access CHAR;
      Value : CHAR
   ) return CHAR;
   pragma import (C,InterlockedExchange8,"_InterlockedExchange8");
   function InterlockedExchange16(
      Destination : access SHORT;
      ExChange : SHORT
   ) return SHORT;
   pragma import (C,InterlockedExchange16,"_InterlockedExchange16");
   function InterlockedExchangeAdd8(
      Addend : access Character;
      Value : Character
   ) return Character;
   pragma import (C,InterlockedExchangeAdd8,"_InterlockedExchangeAdd8");
   function InterlockedAnd8(
      Destination : access Character;
      Value : Character
   ) return Character;
   pragma import (C,InterlockedAnd8,"_InterlockedAnd8");
   function InterlockedOr8(
      Destination : access Character;
      Value : Character
   ) return Character;
   pragma import (C,InterlockedOr8,"_InterlockedOr8");
   function InterlockedXor8(
      Destination : access Character;
      Value : Character
   ) return Character;
   pragma import (C,InterlockedXor8,"_InterlockedXor8");
   function InterlockedAnd16(
      Destination : access SHORT;
      Value : SHORT
   ) return SHORT;
   pragma import (C,InterlockedAnd16,"_InterlockedAnd16");
   function InterlockedOr16(
      Destination : access SHORT;
      Value : SHORT
   ) return SHORT;
   pragma import (C,InterlockedOr16,"_InterlockedOr16");
   function InterlockedXor16(
      Destination : access SHORT;
      Value : SHORT
   ) return SHORT;
   pragma import (C,InterlockedXor16,"_InterlockedXor16");
   procedure cpuidex(
      CPUInfo : Void;
      function_x : Interfaces.C.Int;
      SubLeaf : Interfaces.C.Int
   );
   pragma import (C,cpuidex,"__cpuidex");
   procedure mm_clflush(
      Address : access Void
   );
   pragma import (C,mm_clflush,"_mm_clflush");
   procedure ReadWriteBarrier;
   pragma import (C,ReadWriteBarrier,"_ReadWriteBarrier");
   procedure faststorefence;
   pragma import (C,faststorefence,"__faststorefence");
   procedure mm_lfence;
   pragma import (C,mm_lfence,"_mm_lfence");
   procedure mm_mfence;
   pragma import (C,mm_mfence,"_mm_mfence");
   procedure mm_sfence;
   pragma import (C,mm_sfence,"_mm_sfence");
   procedure mm_pause;
   pragma import (C,mm_pause,"_mm_pause");
   procedure mm_prefetch(
      a : access constant CHAR;
      sel : Interfaces.C.Int
   );
   pragma import (C,mm_prefetch,"_mm_prefetch");
   procedure m_prefetchw(
      Source : access Void
   );
   pragma import (C,m_prefetchw,"_m_prefetchw");
   function mm_getcsr return Interfaces.C.unsigned;
   pragma import (C,mm_getcsr,"_mm_getcsr");
   procedure mm_setcsr(
      MxCsr : Interfaces.C.unsigned
   );
   pragma import (C,mm_setcsr,"_mm_setcsr");
   function getcallerseflags return Interfaces.C.unsigned;
   pragma import (C,getcallerseflags,"__getcallerseflags");
   function segmentlimit(
      Selector : DWORD
   ) return DWORD;
   pragma import (C,segmentlimit,"__segmentlimit");
   function readpmc(
      Counter : DWORD
   ) return DWORD64;
   pragma import (C,readpmc,"__readpmc");
   function rdtsc return DWORD64;
   pragma import (C,rdtsc,"__rdtsc");
   procedure movsb(
      Destination : PBYTE;
      Source : access constant BYTE;
      Count : SIZE_T
   );
   pragma import (C,movsb,"__movsb");
   procedure movsw(
      Destination : PWORD;
      Source : access constant WORD;
      Count : SIZE_T
   );
   pragma import (C,movsw,"__movsw");
   procedure movsd(
      Destination : PDWORD;
      Source : access constant DWORD;
      Count : SIZE_T
   );
   pragma import (C,movsd,"__movsd");
   procedure movsq(
      Destination : PDWORD64;
      Source : access constant DWORD64;
      Count : SIZE_T
   );
   pragma import (C,movsq,"__movsq");
   procedure stosb(
      Destination : PBYTE;
      Value : BYTE;
      Count : SIZE_T
   );
   pragma import (C,stosb,"__stosb");
   procedure stosw(
      Destination : PWORD;
      Value : WORD;
      Count : SIZE_T
   );
   pragma import (C,stosw,"__stosw");
   procedure stosd(
      Destination : PDWORD;
      Value : DWORD;
      Count : SIZE_T
   );
   pragma import (C,stosd,"__stosd");
   procedure stosq(
      Destination : PDWORD64;
      Value : DWORD64;
      Count : SIZE_T
   );
   pragma import (C,stosq,"__stosq");
   function mulh(
      Multiplier : LONG64;
      Multiplicand : LONG64
   ) return LONGLONG;
   pragma import (C,mulh,"__mulh");
   function umulh(
      Multiplier : DWORD64;
      Multiplicand : DWORD64
   ) return ULONGLONG;
   pragma import (C,umulh,"__umulh");
   function popcnt64(
      operand : DWORD64
   ) return DWORD64;
   pragma import (C,popcnt64,"__popcnt64");
   function shiftleft128(
      LowPart : DWORD64;
      HighPart : DWORD64;
      Shift : BYTE
   ) return DWORD64;
   pragma import (C,shiftleft128,"__shiftleft128");
   function shiftright128(
      LowPart : DWORD64;
      HighPart : DWORD64;
      Shift : BYTE
   ) return DWORD64;
   pragma import (C,shiftright128,"__shiftright128");
   function mul128(
      Multiplier : LONG64;
      Multiplicand : LONG64;
      HighProduct : access LONG64
   ) return LONG64;
   pragma import (C,mul128,"_mul128");
   function umul128(
      Multiplier : DWORD64;
      Multiplicand : DWORD64;
      HighProduct : access DWORD64
   ) return DWORD64;
   pragma import (C,umul128,"_umul128");
   -- MultiplyExtract128(); -- inlined function not supported
   -- UnsignedMultiplyExtract128(); -- inlined function not supported
   function readgsbyte(
      Offset : DWORD
   ) return BYTE;
   pragma import (C,readgsbyte,"__readgsbyte");
   function readgsword(
      Offset : DWORD
   ) return WORD;
   pragma import (C,readgsword,"__readgsword");
   function readgsdword(
      Offset : DWORD
   ) return DWORD;
   pragma import (C,readgsdword,"__readgsdword");
   function readgsqword(
      Offset : DWORD
   ) return DWORD64;
   pragma import (C,readgsqword,"__readgsqword");
   procedure writegsbyte(
      Offset : DWORD;
      Data : BYTE
   );
   pragma import (C,writegsbyte,"__writegsbyte");
   procedure writegsword(
      Offset : DWORD;
      Data : WORD
   );
   pragma import (C,writegsword,"__writegsword");
   procedure writegsdword(
      Offset : DWORD;
      Data : DWORD
   );
   pragma import (C,writegsdword,"__writegsdword");
   procedure writegsqword(
      Offset : DWORD;
      Data : DWORD64
   );
   pragma import (C,writegsqword,"__writegsqword");
   procedure incgsbyte(
      Offset : DWORD
   );
   pragma import (C,incgsbyte,"__incgsbyte");
   procedure addgsbyte(
      Offset : DWORD;
      Value : BYTE
   );
   pragma import (C,addgsbyte,"__addgsbyte");
   procedure incgsword(
      Offset : DWORD
   );
   pragma import (C,incgsword,"__incgsword");
   procedure addgsword(
      Offset : DWORD;
      Value : WORD
   );
   pragma import (C,addgsword,"__addgsword");
   procedure incgsdword(
      Offset : DWORD
   );
   pragma import (C,incgsdword,"__incgsdword");
   procedure addgsdword(
      Offset : DWORD;
      Value : DWORD
   );
   pragma import (C,addgsdword,"__addgsdword");
   procedure incgsqword(
      Offset : DWORD
   );
   pragma import (C,incgsqword,"__incgsqword");
   procedure addgsqword(
      Offset : DWORD;
      Value : DWORD64
   );
   pragma import (C,addgsqword,"__addgsqword");
   subtype XMM_SAVE_AREA32 is XSAVE_FORMAT; -- CXType_Typedef
   type PXMM_SAVE_AREA32 is access XSAVE_FORMAT; -- CXType_Pointer - CXType_Typedef
   type CONTEXT_x is record
      P1Home : DWORD64;
      P2Home : DWORD64;
      P3Home : DWORD64;
      P4Home : DWORD64;
      P5Home : DWORD64;
      P6Home : DWORD64;
      ContextFlags : DWORD;
      MxCsr : DWORD;
      SegCs : WORD;
      SegDs : WORD;
      SegEs : WORD;
      SegFs : WORD;
      SegGs : WORD;
      SegSs : WORD;
      EFlags : DWORD;
      Dr0 : DWORD64;
      Dr1 : DWORD64;
      Dr2 : DWORD64;
      Dr3 : DWORD64;
      Dr6 : DWORD64;
      Dr7 : DWORD64;
      Rax : DWORD64;
      Rcx : DWORD64;
      Rdx : DWORD64;
      Rbx : DWORD64;
      Rsp : DWORD64;
      Rbp : DWORD64;
      Rsi : DWORD64;
      Rdi : DWORD64;
      R8 : DWORD64;
      R9 : DWORD64;
      R10 : DWORD64;
      R11 : DWORD64;
      R12 : DWORD64;
      R13 : DWORD64;
      R14 : DWORD64;
      R15 : DWORD64;
      Rip : DWORD64;
      VectorRegister : Void;
      VectorControl : DWORD64;
      DebugControl : DWORD64;
      LastBranchToRip : DWORD64;
      LastBranchFromRip : DWORD64;
      LastExceptionToRip : DWORD64;
      LastExceptionFromRip : DWORD64;
   end record;
   subtype CONTEXT is CONTEXT_x; -- CXType_Elaborated
   type PCONTEXT is access CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_RUNTIME_FUNCTION_ENTRY_x; -- Forward Declaration
   subtype RUNTIME_FUNCTION is IMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PRUNTIME_FUNCTION is access IMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   subtype SCOPE_TABLE is SCOPE_TABLE_AMD64; -- CXType_Typedef
   type PSCOPE_TABLE is access SCOPE_TABLE_AMD64; -- CXType_Pointer - CXType_Typedef
   type UNWIND_HISTORY_TABLE_ENTRY_x is record
      ImageBase : DWORD64;
      FunctionEntry : PRUNTIME_FUNCTION;
   end record;
   subtype UNWIND_HISTORY_TABLE_ENTRY is UNWIND_HISTORY_TABLE_ENTRY_x; -- CXType_Elaborated
   type PUNWIND_HISTORY_TABLE_ENTRY is access UNWIND_HISTORY_TABLE_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type UNWIND_HISTORY_TABLE_x is record
      Count : DWORD;
      LocalHint : BYTE;
      GlobalHint : BYTE;
      Search : BYTE;
      Once : BYTE;
      LowAddress : DWORD64;
      HighAddress : DWORD64;
      entry_x : Void;
   end record;
   subtype UNWIND_HISTORY_TABLE is UNWIND_HISTORY_TABLE_x; -- CXType_Elaborated
   type PUNWIND_HISTORY_TABLE is access UNWIND_HISTORY_TABLE_x; -- CXType_Pointer - CXType_Elaborated
   subtype GET_RUNTIME_FUNCTION_CALLBACK is System.Address; -- [FIXME - CXType_FunctionProto] PRUNTIME_FUNCTION (DWORD64, PVOID)
   type PGET_RUNTIME_FUNCTION_CALLBACK is access GET_RUNTIME_FUNCTION_CALLBACK; -- CXType_Pointer - CXType_Typedef
   subtype OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK is System.Address; -- [FIXME - CXType_FunctionProto] DWORD (HANDLE, PVOID, PDWORD, PRUNTIME_FUNCTION *)
   type POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK is access OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK; -- CXType_Pointer - CXType_Typedef
   type DISPATCHER_CONTEXT_x is record
      ControlPc : DWORD64;
      ImageBase : DWORD64;
      FunctionEntry : PRUNTIME_FUNCTION;
      EstablisherFrame : DWORD64;
      TargetIp : DWORD64;
      ContextRecord : PCONTEXT;
      LanguageHandler : PEXCEPTION_ROUTINE;
      HandlerData : PVOID;
      HistoryTable : PUNWIND_HISTORY_TABLE;
      ScopeIndex : DWORD;
      Fill0 : DWORD;
   end record;
   subtype DISPATCHER_CONTEXT is DISPATCHER_CONTEXT_x; -- CXType_Elaborated
   type PDISPATCHER_CONTEXT is access DISPATCHER_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type EXCEPTION_POINTERS_x; -- Forward Declaration
   subtype PEXCEPTION_FILTER is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LONG (struct _EXCEPTION_POINTERS *, PVOID)
   subtype PTERMINATION_HANDLER is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (BOOLEAN, PVOID)
   type KNONVOLATILE_CONTEXT_POINTERS_x is null record;
   subtype KNONVOLATILE_CONTEXT_POINTERS is KNONVOLATILE_CONTEXT_POINTERS_x; -- CXType_Elaborated
   type PKNONVOLATILE_CONTEXT_POINTERS is access KNONVOLATILE_CONTEXT_POINTERS_x; -- CXType_Pointer - CXType_Elaborated
   type SCOPE_TABLE_ARM_x is record
      Count : DWORD;
      ScopeRecord : Void;
   end record;
   subtype SCOPE_TABLE_ARM is SCOPE_TABLE_ARM_x; -- CXType_Elaborated
   type PSCOPE_TABLE_ARM is access SCOPE_TABLE_ARM_x; -- CXType_Pointer - CXType_Elaborated
   type SCOPE_TABLE_ARM64_x is record
      Count : DWORD;
      ScopeRecord : Void;
   end record;
   subtype SCOPE_TABLE_ARM64 is SCOPE_TABLE_ARM64_x; -- CXType_Elaborated
   type PSCOPE_TABLE_ARM64 is access SCOPE_TABLE_ARM64_x; -- CXType_Pointer - CXType_Elaborated
   type KNONVOLATILE_CONTEXT_POINTERS_ARM64_x is record
      X19 : PDWORD64;
      X20 : PDWORD64;
      X21 : PDWORD64;
      X22 : PDWORD64;
      X23 : PDWORD64;
      X24 : PDWORD64;
      X25 : PDWORD64;
      X26 : PDWORD64;
      X27 : PDWORD64;
      X28 : PDWORD64;
      Fp : PDWORD64;
      Lr : PDWORD64;
      D8 : PDWORD64;
      D9 : PDWORD64;
      D10 : PDWORD64;
      D11 : PDWORD64;
      D12 : PDWORD64;
      D13 : PDWORD64;
      D14 : PDWORD64;
      D15 : PDWORD64;
   end record;
   subtype KNONVOLATILE_CONTEXT_POINTERS_ARM64 is KNONVOLATILE_CONTEXT_POINTERS_ARM64_x; -- CXType_Elaborated
   type PKNONVOLATILE_CONTEXT_POINTERS_ARM64 is access KNONVOLATILE_CONTEXT_POINTERS_ARM64_x; -- CXType_Pointer - CXType_Elaborated
   procedure int2c;
   pragma import (C,int2c,"__int2c");
   type LDT_ENTRY_x is record
      LimitLow : WORD;
      BaseLow : WORD;
      HighWord : Void;
   end record;
   subtype LDT_ENTRY is LDT_ENTRY_x; -- CXType_Elaborated
   type PLDT_ENTRY is access LDT_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   -- ReadAcquire8(); -- inlined function not supported
   -- ReadNoFence8(); -- inlined function not supported
   -- WriteRelease8(); -- inlined function not supported
   -- WriteNoFence8(); -- inlined function not supported
   -- ReadAcquire16(); -- inlined function not supported
   -- ReadNoFence16(); -- inlined function not supported
   -- WriteRelease16(); -- inlined function not supported
   -- WriteNoFence16(); -- inlined function not supported
   -- ReadAcquire(); -- inlined function not supported
   -- ReadNoFence(); -- inlined function not supported
   -- WriteRelease(); -- inlined function not supported
   -- WriteNoFence(); -- inlined function not supported
   -- ReadAcquire64(); -- inlined function not supported
   -- ReadNoFence64(); -- inlined function not supported
   -- WriteRelease64(); -- inlined function not supported
   -- WriteNoFence64(); -- inlined function not supported
   -- ReadRaw8(); -- inlined function not supported
   -- WriteRaw8(); -- inlined function not supported
   -- ReadRaw16(); -- inlined function not supported
   -- WriteRaw16(); -- inlined function not supported
   -- ReadRaw(); -- inlined function not supported
   -- WriteRaw(); -- inlined function not supported
   -- ReadRaw64(); -- inlined function not supported
   -- WriteRaw64(); -- inlined function not supported
   -- ReadUCharAcquire(); -- inlined function not supported
   -- ReadUCharNoFence(); -- inlined function not supported
   -- ReadBooleanAcquire(); -- inlined function not supported
   -- ReadBooleanNoFence(); -- inlined function not supported
   -- ReadUCharRaw(); -- inlined function not supported
   -- WriteUCharRelease(); -- inlined function not supported
   -- WriteUCharNoFence(); -- inlined function not supported
   -- WriteBooleanRelease(); -- inlined function not supported
   -- WriteBooleanNoFence(); -- inlined function not supported
   -- WriteUCharRaw(); -- inlined function not supported
   -- ReadUShortAcquire(); -- inlined function not supported
   -- ReadUShortNoFence(); -- inlined function not supported
   -- ReadUShortRaw(); -- inlined function not supported
   -- WriteUShortRelease(); -- inlined function not supported
   -- WriteUShortNoFence(); -- inlined function not supported
   -- WriteUShortRaw(); -- inlined function not supported
   -- ReadULongAcquire(); -- inlined function not supported
   -- ReadULongNoFence(); -- inlined function not supported
   -- ReadULongRaw(); -- inlined function not supported
   -- WriteULongRelease(); -- inlined function not supported
   -- WriteULongNoFence(); -- inlined function not supported
   -- WriteULongRaw(); -- inlined function not supported
   -- ReadULong64Acquire(); -- inlined function not supported
   -- ReadULong64NoFence(); -- inlined function not supported
   -- ReadULong64Raw(); -- inlined function not supported
   -- WriteULong64Release(); -- inlined function not supported
   -- WriteULong64NoFence(); -- inlined function not supported
   -- WriteULong64Raw(); -- inlined function not supported
   -- ReadPointerAcquire(); -- inlined function not supported
   -- ReadPointerNoFence(); -- inlined function not supported
   -- ReadPointerRaw(); -- inlined function not supported
   -- WritePointerRelease(); -- inlined function not supported
   -- WritePointerNoFence(); -- inlined function not supported
   -- WritePointerRaw(); -- inlined function not supported
   type WOW64_FLOATING_SAVE_AREA_x is record
      ControlWord : DWORD;
      StatusWord : DWORD;
      TagWord : DWORD;
      ErrorOffset : DWORD;
      ErrorSelector : DWORD;
      DataOffset : DWORD;
      DataSelector : DWORD;
      RegisterArea : Void;
      Cr0NpxState : DWORD;
   end record;
   subtype WOW64_FLOATING_SAVE_AREA is WOW64_FLOATING_SAVE_AREA_x; -- CXType_Elaborated
   type PWOW64_FLOATING_SAVE_AREA is access WOW64_FLOATING_SAVE_AREA; -- CXType_Pointer - CXType_Typedef
   type WOW64_CONTEXT_x is record
      ContextFlags : DWORD;
      Dr0 : DWORD;
      Dr1 : DWORD;
      Dr2 : DWORD;
      Dr3 : DWORD;
      Dr6 : DWORD;
      Dr7 : DWORD;
      FloatSave : WOW64_FLOATING_SAVE_AREA;
      SegGs : DWORD;
      SegFs : DWORD;
      SegEs : DWORD;
      SegDs : DWORD;
      Edi : DWORD;
      Esi : DWORD;
      Ebx : DWORD;
      Edx : DWORD;
      Ecx : DWORD;
      Eax : DWORD;
      Ebp : DWORD;
      Eip : DWORD;
      SegCs : DWORD;
      EFlags : DWORD;
      Esp : DWORD;
      SegSs : DWORD;
      ExtendedRegisters : Void;
   end record;
   subtype WOW64_CONTEXT is WOW64_CONTEXT_x; -- CXType_Elaborated
   type PWOW64_CONTEXT is access WOW64_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type WOW64_LDT_ENTRY_x is record
      LimitLow : WORD;
      BaseLow : WORD;
      HighWord : Void;
   end record;
   subtype WOW64_LDT_ENTRY is WOW64_LDT_ENTRY_x; -- CXType_Elaborated
   type PWOW64_LDT_ENTRY is access WOW64_LDT_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type WOW64_DESCRIPTOR_TABLE_ENTRY_x is record
      Selector : DWORD;
      Descriptor : WOW64_LDT_ENTRY;
   end record;
   subtype WOW64_DESCRIPTOR_TABLE_ENTRY is WOW64_DESCRIPTOR_TABLE_ENTRY_x; -- CXType_Elaborated
   type PWOW64_DESCRIPTOR_TABLE_ENTRY is access WOW64_DESCRIPTOR_TABLE_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type EXCEPTION_RECORD_x is record
      ExceptionCode : DWORD;
      ExceptionFlags : DWORD;
      ExceptionRecord : access Void;
      ExceptionAddress : PVOID;
      NumberParameters : DWORD;
      ExceptionInformation : Void;
   end record;
   subtype EXCEPTION_RECORD is EXCEPTION_RECORD_x; -- CXType_Elaborated
   type PEXCEPTION_RECORD is access EXCEPTION_RECORD; -- CXType_Pointer - CXType_Typedef
   type EXCEPTION_RECORD32_x is record
      ExceptionCode : DWORD;
      ExceptionFlags : DWORD;
      ExceptionRecord : DWORD;
      ExceptionAddress : DWORD;
      NumberParameters : DWORD;
      ExceptionInformation : Void;
   end record;
   subtype EXCEPTION_RECORD32 is EXCEPTION_RECORD32_x; -- CXType_Elaborated
   type PEXCEPTION_RECORD32 is access EXCEPTION_RECORD32_x; -- CXType_Pointer - CXType_Elaborated
   type EXCEPTION_RECORD64_x is record
      ExceptionCode : DWORD;
      ExceptionFlags : DWORD;
      ExceptionRecord : DWORD64;
      ExceptionAddress : DWORD64;
      NumberParameters : DWORD;
      unusedAlignment : DWORD;
      ExceptionInformation : Void;
   end record;
   subtype EXCEPTION_RECORD64 is EXCEPTION_RECORD64_x; -- CXType_Elaborated
   type PEXCEPTION_RECORD64 is access EXCEPTION_RECORD64_x; -- CXType_Pointer - CXType_Elaborated
   type EXCEPTION_POINTERS_x is record
      ExceptionRecord : PEXCEPTION_RECORD;
      ContextRecord : PCONTEXT;
   end record;
   subtype EXCEPTION_POINTERS is EXCEPTION_POINTERS_x; -- CXType_Elaborated
   type PEXCEPTION_POINTERS is access EXCEPTION_POINTERS_x; -- CXType_Pointer - CXType_Elaborated
   subtype PACCESS_TOKEN is PVOID; -- CXType_Typedef
   subtype PSECURITY_DESCRIPTOR is PVOID; -- CXType_Typedef
   subtype PSID is PVOID; -- CXType_Typedef
   subtype PCLAIMS_BLOB is PVOID; -- CXType_Typedef
   subtype ACCESS_MASK is DWORD; -- CXType_Typedef
   type PACCESS_MASK is access ACCESS_MASK; -- CXType_Pointer - CXType_Typedef
   type GENERIC_MAPPING_x is record
      GenericRead : ACCESS_MASK;
      GenericWrite : ACCESS_MASK;
      GenericExecute : ACCESS_MASK;
      GenericAll : ACCESS_MASK;
   end record;
   subtype GENERIC_MAPPING is GENERIC_MAPPING_x; -- CXType_Elaborated
   type PGENERIC_MAPPING is access GENERIC_MAPPING; -- CXType_Pointer - CXType_Typedef
   type LUID_AND_ATTRIBUTES_x is record
      Luid_x : LUID;
      Attributes : DWORD;
   end record;
   subtype LUID_AND_ATTRIBUTES is LUID_AND_ATTRIBUTES_x; -- CXType_Elaborated
   type PLUID_AND_ATTRIBUTES is access LUID_AND_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   subtype LUID_AND_ATTRIBUTES_ARRAY is System.Address; -- [FIXME - CXType_ConstantArray]
   type PLUID_AND_ATTRIBUTES_ARRAY is access LUID_AND_ATTRIBUTES_ARRAY; -- CXType_Pointer - CXType_Typedef
   type SID_IDENTIFIER_AUTHORITY_x is record
      Value : Void;
   end record;
   subtype SID_IDENTIFIER_AUTHORITY is SID_IDENTIFIER_AUTHORITY_x; -- CXType_Elaborated
   type PSID_IDENTIFIER_AUTHORITY is access SID_IDENTIFIER_AUTHORITY_x; -- CXType_Pointer - CXType_Elaborated
   type SID_x is record
      Revision : BYTE;
      SubAuthorityCount : BYTE;
      IdentifierAuthority : SID_IDENTIFIER_AUTHORITY;
      SubAuthority : Void;
   end record;
   subtype SID is SID_x; -- CXType_Elaborated
   type PISID is access SID_x; -- CXType_Pointer - CXType_Elaborated
   type SE_SID_x is null record; -- Union Placeholder [FIXME]
   subtype SE_SID is SE_SID_x; -- CXType_Elaborated
   type PSE_SID is access SE_SID_x; -- CXType_Pointer - CXType_Elaborated
   type SID_NAME_USE_x is (
      SidTypeUser,
      SidTypeGroup,
      SidTypeDomain,
      SidTypeAlias,
      SidTypeWellKnownGroup,
      SidTypeDeletedAccount,
      SidTypeInvalid,
      SidTypeUnknown,
      SidTypeComputer,
      SidTypeLabel,
      SidTypeLogonSession
   );
   for SID_NAME_USE_x use (
      SidTypeUser => 1,
      SidTypeGroup => 2,
      SidTypeDomain => 3,
      SidTypeAlias => 4,
      SidTypeWellKnownGroup => 5,
      SidTypeDeletedAccount => 6,
      SidTypeInvalid => 7,
      SidTypeUnknown => 8,
      SidTypeComputer => 9,
      SidTypeLabel => 10,
      SidTypeLogonSession => 11
   );
   for SID_NAME_USE_x'Size use 32;
   subtype SID_NAME_USE is SID_NAME_USE_x; -- CXType_Elaborated
   type PSID_NAME_USE is access SID_NAME_USE_x; -- CXType_Pointer - CXType_Elaborated
   type SID_AND_ATTRIBUTES_x is record
      Sid_x : PSID;
      Attributes : DWORD;
   end record;
   subtype SID_AND_ATTRIBUTES is SID_AND_ATTRIBUTES_x; -- CXType_Elaborated
   type PSID_AND_ATTRIBUTES is access SID_AND_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   subtype SID_AND_ATTRIBUTES_ARRAY is System.Address; -- [FIXME - CXType_ConstantArray]
   type PSID_AND_ATTRIBUTES_ARRAY is access SID_AND_ATTRIBUTES_ARRAY; -- CXType_Pointer - CXType_Typedef
   subtype SID_HASH_ENTRY is ULONG_PTR; -- CXType_Typedef
   type PSID_HASH_ENTRY is access ULONG_PTR; -- CXType_Pointer - CXType_Typedef
   type SID_AND_ATTRIBUTES_HASH_x is record
      SidCount : DWORD;
      SidAttr : PSID_AND_ATTRIBUTES;
      Hash : Void;
   end record;
   subtype SID_AND_ATTRIBUTES_HASH is SID_AND_ATTRIBUTES_HASH_x; -- CXType_Elaborated
   type PSID_AND_ATTRIBUTES_HASH is access SID_AND_ATTRIBUTES_HASH_x; -- CXType_Pointer - CXType_Elaborated
   type WELL_KNOWN_SID_TYPE is (
      WinNullSid,
      WinWorldSid,
      WinLocalSid,
      WinCreatorOwnerSid,
      WinCreatorGroupSid,
      WinCreatorOwnerServerSid,
      WinCreatorGroupServerSid,
      WinNtAuthoritySid,
      WinDialupSid,
      WinNetworkSid,
      WinBatchSid,
      WinInteractiveSid,
      WinServiceSid,
      WinAnonymousSid,
      WinProxySid,
      WinEnterpriseControllersSid,
      WinSelfSid,
      WinAuthenticatedUserSid,
      WinRestrictedCodeSid,
      WinTerminalServerSid,
      WinRemoteLogonIdSid,
      WinLogonIdsSid,
      WinLocalSystemSid,
      WinLocalServiceSid,
      WinNetworkServiceSid,
      WinBuiltinDomainSid,
      WinBuiltinAdministratorsSid,
      WinBuiltinUsersSid,
      WinBuiltinGuestsSid,
      WinBuiltinPowerUsersSid,
      WinBuiltinAccountOperatorsSid,
      WinBuiltinSystemOperatorsSid,
      WinBuiltinPrintOperatorsSid,
      WinBuiltinBackupOperatorsSid,
      WinBuiltinReplicatorSid,
      WinBuiltinPreWindows2000CompatibleAccessSid,
      WinBuiltinRemoteDesktopUsersSid,
      WinBuiltinNetworkConfigurationOperatorsSid,
      WinAccountAdministratorSid,
      WinAccountGuestSid,
      WinAccountKrbtgtSid,
      WinAccountDomainAdminsSid,
      WinAccountDomainUsersSid,
      WinAccountDomainGuestsSid,
      WinAccountComputersSid,
      WinAccountControllersSid,
      WinAccountCertAdminsSid,
      WinAccountSchemaAdminsSid,
      WinAccountEnterpriseAdminsSid,
      WinAccountPolicyAdminsSid,
      WinAccountRasAndIasServersSid,
      WinNTLMAuthenticationSid,
      WinDigestAuthenticationSid,
      WinSChannelAuthenticationSid,
      WinThisOrganizationSid,
      WinOtherOrganizationSid,
      WinBuiltinIncomingForestTrustBuildersSid,
      WinBuiltinPerfMonitoringUsersSid,
      WinBuiltinPerfLoggingUsersSid,
      WinBuiltinAuthorizationAccessSid,
      WinBuiltinTerminalServerLicenseServersSid,
      WinBuiltinDCOMUsersSid,
      WinBuiltinIUsersSid,
      WinIUserSid,
      WinBuiltinCryptoOperatorsSid,
      WinUntrustedLabelSid,
      WinLowLabelSid,
      WinMediumLabelSid,
      WinHighLabelSid,
      WinSystemLabelSid,
      WinWriteRestrictedCodeSid,
      WinCreatorOwnerRightsSid,
      WinCacheablePrincipalsGroupSid,
      WinNonCacheablePrincipalsGroupSid,
      WinEnterpriseReadonlyControllersSid,
      WinAccountReadonlyControllersSid,
      WinBuiltinEventLogReadersGroup,
      WinNewEnterpriseReadonlyControllersSid,
      WinBuiltinCertSvcDComAccessGroup,
      WinMediumPlusLabelSid,
      WinLocalLogonSid,
      WinConsoleLogonSid,
      WinThisOrganizationCertificateSid,
      WinApplicationPackageAuthoritySid,
      WinBuiltinAnyPackageSid,
      WinCapabilityInternetClientSid,
      WinCapabilityInternetClientServerSid,
      WinCapabilityPrivateNetworkClientServerSid,
      WinCapabilityPicturesLibrarySid,
      WinCapabilityVideosLibrarySid,
      WinCapabilityMusicLibrarySid,
      WinCapabilityDocumentsLibrarySid,
      WinCapabilitySharedUserCertificatesSid,
      WinCapabilityEnterpriseAuthenticationSid,
      WinCapabilityRemovableStorageSid,
      WinBuiltinRDSRemoteAccessServersSid,
      WinBuiltinRDSEndpointServersSid,
      WinBuiltinRDSManagementServersSid,
      WinUserModeDriversSid,
      WinBuiltinHyperVAdminsSid,
      WinAccountCloneableControllersSid,
      WinBuiltinAccessControlAssistanceOperatorsSid,
      WinBuiltinRemoteManagementUsersSid,
      WinAuthenticationAuthorityAssertedSid,
      WinAuthenticationServiceAssertedSid,
      WinLocalAccountSid,
      WinLocalAccountAndAdministratorSid,
      WinAccountProtectedUsersSid,
      WinCapabilityAppointmentsSid,
      WinCapabilityContactsSid,
      WinAccountDefaultSystemManagedSid,
      WinBuiltinDefaultSystemManagedGroupSid,
      WinBuiltinStorageReplicaAdminsSid,
      WinAccountKeyAdminsSid,
      WinAccountEnterpriseKeyAdminsSid,
      WinAuthenticationKeyTrustSid,
      WinAuthenticationKeyPropertyMFASid,
      WinAuthenticationKeyPropertyAttestationSid,
      WinAuthenticationFreshKeyAuthSid,
      WinBuiltinDeviceOwnersSid
   );
   for WELL_KNOWN_SID_TYPE use (
      WinNullSid => 0,
      WinWorldSid => 1,
      WinLocalSid => 2,
      WinCreatorOwnerSid => 3,
      WinCreatorGroupSid => 4,
      WinCreatorOwnerServerSid => 5,
      WinCreatorGroupServerSid => 6,
      WinNtAuthoritySid => 7,
      WinDialupSid => 8,
      WinNetworkSid => 9,
      WinBatchSid => 10,
      WinInteractiveSid => 11,
      WinServiceSid => 12,
      WinAnonymousSid => 13,
      WinProxySid => 14,
      WinEnterpriseControllersSid => 15,
      WinSelfSid => 16,
      WinAuthenticatedUserSid => 17,
      WinRestrictedCodeSid => 18,
      WinTerminalServerSid => 19,
      WinRemoteLogonIdSid => 20,
      WinLogonIdsSid => 21,
      WinLocalSystemSid => 22,
      WinLocalServiceSid => 23,
      WinNetworkServiceSid => 24,
      WinBuiltinDomainSid => 25,
      WinBuiltinAdministratorsSid => 26,
      WinBuiltinUsersSid => 27,
      WinBuiltinGuestsSid => 28,
      WinBuiltinPowerUsersSid => 29,
      WinBuiltinAccountOperatorsSid => 30,
      WinBuiltinSystemOperatorsSid => 31,
      WinBuiltinPrintOperatorsSid => 32,
      WinBuiltinBackupOperatorsSid => 33,
      WinBuiltinReplicatorSid => 34,
      WinBuiltinPreWindows2000CompatibleAccessSid => 35,
      WinBuiltinRemoteDesktopUsersSid => 36,
      WinBuiltinNetworkConfigurationOperatorsSid => 37,
      WinAccountAdministratorSid => 38,
      WinAccountGuestSid => 39,
      WinAccountKrbtgtSid => 40,
      WinAccountDomainAdminsSid => 41,
      WinAccountDomainUsersSid => 42,
      WinAccountDomainGuestsSid => 43,
      WinAccountComputersSid => 44,
      WinAccountControllersSid => 45,
      WinAccountCertAdminsSid => 46,
      WinAccountSchemaAdminsSid => 47,
      WinAccountEnterpriseAdminsSid => 48,
      WinAccountPolicyAdminsSid => 49,
      WinAccountRasAndIasServersSid => 50,
      WinNTLMAuthenticationSid => 51,
      WinDigestAuthenticationSid => 52,
      WinSChannelAuthenticationSid => 53,
      WinThisOrganizationSid => 54,
      WinOtherOrganizationSid => 55,
      WinBuiltinIncomingForestTrustBuildersSid => 56,
      WinBuiltinPerfMonitoringUsersSid => 57,
      WinBuiltinPerfLoggingUsersSid => 58,
      WinBuiltinAuthorizationAccessSid => 59,
      WinBuiltinTerminalServerLicenseServersSid => 60,
      WinBuiltinDCOMUsersSid => 61,
      WinBuiltinIUsersSid => 62,
      WinIUserSid => 63,
      WinBuiltinCryptoOperatorsSid => 64,
      WinUntrustedLabelSid => 65,
      WinLowLabelSid => 66,
      WinMediumLabelSid => 67,
      WinHighLabelSid => 68,
      WinSystemLabelSid => 69,
      WinWriteRestrictedCodeSid => 70,
      WinCreatorOwnerRightsSid => 71,
      WinCacheablePrincipalsGroupSid => 72,
      WinNonCacheablePrincipalsGroupSid => 73,
      WinEnterpriseReadonlyControllersSid => 74,
      WinAccountReadonlyControllersSid => 75,
      WinBuiltinEventLogReadersGroup => 76,
      WinNewEnterpriseReadonlyControllersSid => 77,
      WinBuiltinCertSvcDComAccessGroup => 78,
      WinMediumPlusLabelSid => 79,
      WinLocalLogonSid => 80,
      WinConsoleLogonSid => 81,
      WinThisOrganizationCertificateSid => 82,
      WinApplicationPackageAuthoritySid => 83,
      WinBuiltinAnyPackageSid => 84,
      WinCapabilityInternetClientSid => 85,
      WinCapabilityInternetClientServerSid => 86,
      WinCapabilityPrivateNetworkClientServerSid => 87,
      WinCapabilityPicturesLibrarySid => 88,
      WinCapabilityVideosLibrarySid => 89,
      WinCapabilityMusicLibrarySid => 90,
      WinCapabilityDocumentsLibrarySid => 91,
      WinCapabilitySharedUserCertificatesSid => 92,
      WinCapabilityEnterpriseAuthenticationSid => 93,
      WinCapabilityRemovableStorageSid => 94,
      WinBuiltinRDSRemoteAccessServersSid => 95,
      WinBuiltinRDSEndpointServersSid => 96,
      WinBuiltinRDSManagementServersSid => 97,
      WinUserModeDriversSid => 98,
      WinBuiltinHyperVAdminsSid => 99,
      WinAccountCloneableControllersSid => 100,
      WinBuiltinAccessControlAssistanceOperatorsSid => 101,
      WinBuiltinRemoteManagementUsersSid => 102,
      WinAuthenticationAuthorityAssertedSid => 103,
      WinAuthenticationServiceAssertedSid => 104,
      WinLocalAccountSid => 105,
      WinLocalAccountAndAdministratorSid => 106,
      WinAccountProtectedUsersSid => 107,
      WinCapabilityAppointmentsSid => 108,
      WinCapabilityContactsSid => 109,
      WinAccountDefaultSystemManagedSid => 110,
      WinBuiltinDefaultSystemManagedGroupSid => 111,
      WinBuiltinStorageReplicaAdminsSid => 112,
      WinAccountKeyAdminsSid => 113,
      WinAccountEnterpriseKeyAdminsSid => 114,
      WinAuthenticationKeyTrustSid => 115,
      WinAuthenticationKeyPropertyMFASid => 116,
      WinAuthenticationKeyPropertyAttestationSid => 117,
      WinAuthenticationFreshKeyAuthSid => 118,
      WinBuiltinDeviceOwnersSid => 119
   );
   for WELL_KNOWN_SID_TYPE'Size use 32;
   type ACL_x is record
      AclRevision : BYTE;
      Sbz1 : BYTE;
      AclSize : WORD;
      AceCount : WORD;
      Sbz2 : WORD;
   end record;
   subtype ACL is ACL_x; -- CXType_Elaborated
   type PACL is access ACL; -- CXType_Pointer - CXType_Typedef
   type ACE_HEADER_x is record
      AceType : BYTE;
      AceFlags : BYTE;
      AceSize : WORD;
   end record;
   subtype ACE_HEADER is ACE_HEADER_x; -- CXType_Elaborated
   type PACE_HEADER is access ACE_HEADER; -- CXType_Pointer - CXType_Typedef
   type ACCESS_ALLOWED_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype ACCESS_ALLOWED_ACE is ACCESS_ALLOWED_ACE_x; -- CXType_Elaborated
   type PACCESS_ALLOWED_ACE is access ACCESS_ALLOWED_ACE; -- CXType_Pointer - CXType_Typedef
   type ACCESS_DENIED_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype ACCESS_DENIED_ACE is ACCESS_DENIED_ACE_x; -- CXType_Elaborated
   type PACCESS_DENIED_ACE is access ACCESS_DENIED_ACE; -- CXType_Pointer - CXType_Typedef
   type SYSTEM_AUDIT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_AUDIT_ACE is SYSTEM_AUDIT_ACE_x; -- CXType_Elaborated
   type PSYSTEM_AUDIT_ACE is access SYSTEM_AUDIT_ACE; -- CXType_Pointer - CXType_Typedef
   type SYSTEM_ALARM_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_ALARM_ACE is SYSTEM_ALARM_ACE_x; -- CXType_Elaborated
   type PSYSTEM_ALARM_ACE is access SYSTEM_ALARM_ACE; -- CXType_Pointer - CXType_Typedef
   type SYSTEM_RESOURCE_ATTRIBUTE_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_RESOURCE_ATTRIBUTE_ACE is SYSTEM_RESOURCE_ATTRIBUTE_ACE_x; -- CXType_Elaborated
   type PSYSTEM_RESOURCE_ATTRIBUTE_ACE is access SYSTEM_RESOURCE_ATTRIBUTE_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_SCOPED_POLICY_ID_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_SCOPED_POLICY_ID_ACE is SYSTEM_SCOPED_POLICY_ID_ACE_x; -- CXType_Elaborated
   type PSYSTEM_SCOPED_POLICY_ID_ACE is access SYSTEM_SCOPED_POLICY_ID_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_MANDATORY_LABEL_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_MANDATORY_LABEL_ACE is SYSTEM_MANDATORY_LABEL_ACE_x; -- CXType_Elaborated
   type PSYSTEM_MANDATORY_LABEL_ACE is access SYSTEM_MANDATORY_LABEL_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_PROCESS_TRUST_LABEL_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_PROCESS_TRUST_LABEL_ACE is SYSTEM_PROCESS_TRUST_LABEL_ACE_x; -- CXType_Elaborated
   type PSYSTEM_PROCESS_TRUST_LABEL_ACE is access SYSTEM_PROCESS_TRUST_LABEL_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_ACCESS_FILTER_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_ACCESS_FILTER_ACE is SYSTEM_ACCESS_FILTER_ACE_x; -- CXType_Elaborated
   type PSYSTEM_ACCESS_FILTER_ACE is access SYSTEM_ACCESS_FILTER_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_ALLOWED_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype ACCESS_ALLOWED_OBJECT_ACE is ACCESS_ALLOWED_OBJECT_ACE_x; -- CXType_Elaborated
   type PACCESS_ALLOWED_OBJECT_ACE is access ACCESS_ALLOWED_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_DENIED_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype ACCESS_DENIED_OBJECT_ACE is ACCESS_DENIED_OBJECT_ACE_x; -- CXType_Elaborated
   type PACCESS_DENIED_OBJECT_ACE is access ACCESS_DENIED_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_AUDIT_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_AUDIT_OBJECT_ACE is SYSTEM_AUDIT_OBJECT_ACE_x; -- CXType_Elaborated
   type PSYSTEM_AUDIT_OBJECT_ACE is access SYSTEM_AUDIT_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_ALARM_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_ALARM_OBJECT_ACE is SYSTEM_ALARM_OBJECT_ACE_x; -- CXType_Elaborated
   type PSYSTEM_ALARM_OBJECT_ACE is access SYSTEM_ALARM_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_ALLOWED_CALLBACK_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype ACCESS_ALLOWED_CALLBACK_ACE is ACCESS_ALLOWED_CALLBACK_ACE_x; -- CXType_Elaborated
   type PACCESS_ALLOWED_CALLBACK_ACE is access ACCESS_ALLOWED_CALLBACK_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_DENIED_CALLBACK_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype ACCESS_DENIED_CALLBACK_ACE is ACCESS_DENIED_CALLBACK_ACE_x; -- CXType_Elaborated
   type PACCESS_DENIED_CALLBACK_ACE is access ACCESS_DENIED_CALLBACK_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_AUDIT_CALLBACK_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_AUDIT_CALLBACK_ACE is SYSTEM_AUDIT_CALLBACK_ACE_x; -- CXType_Elaborated
   type PSYSTEM_AUDIT_CALLBACK_ACE is access SYSTEM_AUDIT_CALLBACK_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_ALARM_CALLBACK_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_ALARM_CALLBACK_ACE is SYSTEM_ALARM_CALLBACK_ACE_x; -- CXType_Elaborated
   type PSYSTEM_ALARM_CALLBACK_ACE is access SYSTEM_ALARM_CALLBACK_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype ACCESS_ALLOWED_CALLBACK_OBJECT_ACE is ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_x; -- CXType_Elaborated
   type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE is access ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_DENIED_CALLBACK_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype ACCESS_DENIED_CALLBACK_OBJECT_ACE is ACCESS_DENIED_CALLBACK_OBJECT_ACE_x; -- CXType_Elaborated
   type PACCESS_DENIED_CALLBACK_OBJECT_ACE is access ACCESS_DENIED_CALLBACK_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_AUDIT_CALLBACK_OBJECT_ACE is SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_x; -- CXType_Elaborated
   type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE is access SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_ALARM_CALLBACK_OBJECT_ACE_x is record
      Header : ACE_HEADER;
      Mask : ACCESS_MASK;
      Flags : DWORD;
      ObjectType : GUID;
      InheritedObjectType : GUID;
      SidStart : DWORD;
   end record;
   subtype SYSTEM_ALARM_CALLBACK_OBJECT_ACE is SYSTEM_ALARM_CALLBACK_OBJECT_ACE_x; -- CXType_Elaborated
   type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE is access SYSTEM_ALARM_CALLBACK_OBJECT_ACE_x; -- CXType_Pointer - CXType_Elaborated
   type ACL_INFORMATION_CLASS_x is (
      AclRevisionInformation,
      AclSizeInformation
   );
   for ACL_INFORMATION_CLASS_x use (
      AclRevisionInformation => 1,
      AclSizeInformation => 2
   );
   for ACL_INFORMATION_CLASS_x'Size use 32;
   subtype ACL_INFORMATION_CLASS is ACL_INFORMATION_CLASS_x; -- CXType_Elaborated
   type ACL_REVISION_INFORMATION_x is record
      AclRevision : DWORD;
   end record;
   subtype ACL_REVISION_INFORMATION is ACL_REVISION_INFORMATION_x; -- CXType_Elaborated
   type PACL_REVISION_INFORMATION is access ACL_REVISION_INFORMATION; -- CXType_Pointer - CXType_Typedef
   type ACL_SIZE_INFORMATION_x is record
      AceCount : DWORD;
      AclBytesInUse : DWORD;
      AclBytesFree : DWORD;
   end record;
   subtype ACL_SIZE_INFORMATION is ACL_SIZE_INFORMATION_x; -- CXType_Elaborated
   type PACL_SIZE_INFORMATION is access ACL_SIZE_INFORMATION; -- CXType_Pointer - CXType_Typedef
   subtype SECURITY_DESCRIPTOR_CONTROL is WORD; -- CXType_Typedef
   type PSECURITY_DESCRIPTOR_CONTROL is access WORD; -- CXType_Pointer - CXType_Typedef
   type SECURITY_DESCRIPTOR_RELATIVE_x is record
      Revision : BYTE;
      Sbz1 : BYTE;
      Control : SECURITY_DESCRIPTOR_CONTROL;
      Owner : DWORD;
      Group : DWORD;
      Sacl : DWORD;
      Dacl : DWORD;
   end record;
   subtype SECURITY_DESCRIPTOR_RELATIVE is SECURITY_DESCRIPTOR_RELATIVE_x; -- CXType_Elaborated
   type PISECURITY_DESCRIPTOR_RELATIVE is access SECURITY_DESCRIPTOR_RELATIVE_x; -- CXType_Pointer - CXType_Elaborated
   type SECURITY_DESCRIPTOR_x is record
      Revision : BYTE;
      Sbz1 : BYTE;
      Control : SECURITY_DESCRIPTOR_CONTROL;
      Owner : PSID;
      Group : PSID;
      Sacl : PACL;
      Dacl : PACL;
   end record;
   subtype SECURITY_DESCRIPTOR is SECURITY_DESCRIPTOR_x; -- CXType_Elaborated
   type PISECURITY_DESCRIPTOR is access SECURITY_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type SECURITY_OBJECT_AI_PARAMS_x is record
      Size : DWORD;
      ConstraintMask : DWORD;
   end record;
   subtype SECURITY_OBJECT_AI_PARAMS is SECURITY_OBJECT_AI_PARAMS_x; -- CXType_Elaborated
   type PSECURITY_OBJECT_AI_PARAMS is access SECURITY_OBJECT_AI_PARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type OBJECT_TYPE_LIST_x is record
      Level : WORD;
      Sbz : WORD;
      ObjectType : access GUID;
   end record;
   subtype OBJECT_TYPE_LIST is OBJECT_TYPE_LIST_x; -- CXType_Elaborated
   type POBJECT_TYPE_LIST is access OBJECT_TYPE_LIST_x; -- CXType_Pointer - CXType_Elaborated
   type AUDIT_EVENT_TYPE_x is (
      AuditEventObjectAccess,
      AuditEventDirectoryServiceAccess
   );
   for AUDIT_EVENT_TYPE_x use (
      AuditEventObjectAccess => 0,
      AuditEventDirectoryServiceAccess => 1
   );
   for AUDIT_EVENT_TYPE_x'Size use 32;
   subtype AUDIT_EVENT_TYPE is AUDIT_EVENT_TYPE_x; -- CXType_Elaborated
   type PAUDIT_EVENT_TYPE is access AUDIT_EVENT_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type PRIVILEGE_SET_x is record
      PrivilegeCount : DWORD;
      Control : DWORD;
      Privilege : Void;
   end record;
   subtype PRIVILEGE_SET is PRIVILEGE_SET_x; -- CXType_Elaborated
   type PPRIVILEGE_SET is access PRIVILEGE_SET_x; -- CXType_Pointer - CXType_Elaborated
   type ACCESS_REASON_TYPE_x is (
      AccessReasonNone,
      AccessReasonAllowedAce,
      AccessReasonDeniedAce,
      AccessReasonAllowedParentAce,
      AccessReasonDeniedParentAce,
      AccessReasonNotGrantedByCape,
      AccessReasonNotGrantedByParentCape,
      AccessReasonNotGrantedToAppContainer,
      AccessReasonMissingPrivilege,
      AccessReasonFromPrivilege,
      AccessReasonIntegrityLevel,
      AccessReasonOwnership,
      AccessReasonNullDacl,
      AccessReasonEmptyDacl,
      AccessReasonNoSD,
      AccessReasonNoGrant,
      AccessReasonTrustLabel,
      AccessReasonFilterAce
   );
   for ACCESS_REASON_TYPE_x use (
      AccessReasonNone => 0,
      AccessReasonAllowedAce => 65536,
      AccessReasonDeniedAce => 131072,
      AccessReasonAllowedParentAce => 196608,
      AccessReasonDeniedParentAce => 262144,
      AccessReasonNotGrantedByCape => 327680,
      AccessReasonNotGrantedByParentCape => 393216,
      AccessReasonNotGrantedToAppContainer => 458752,
      AccessReasonMissingPrivilege => 1048576,
      AccessReasonFromPrivilege => 2097152,
      AccessReasonIntegrityLevel => 3145728,
      AccessReasonOwnership => 4194304,
      AccessReasonNullDacl => 5242880,
      AccessReasonEmptyDacl => 6291456,
      AccessReasonNoSD => 7340032,
      AccessReasonNoGrant => 8388608,
      AccessReasonTrustLabel => 9437184,
      AccessReasonFilterAce => 10485760
   );
   for ACCESS_REASON_TYPE_x'Size use 32;
   subtype ACCESS_REASON_TYPE is ACCESS_REASON_TYPE_x; -- CXType_Elaborated
   subtype ACCESS_REASON is DWORD; -- CXType_Typedef
   type ACCESS_REASONS_x is record
      Data : Void;
   end record;
   subtype ACCESS_REASONS is ACCESS_REASONS_x; -- CXType_Elaborated
   type PACCESS_REASONS is access ACCESS_REASONS_x; -- CXType_Pointer - CXType_Elaborated
   type SE_SECURITY_DESCRIPTOR_x is record
      Size : DWORD;
      Flags : DWORD;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
   end record;
   subtype SE_SECURITY_DESCRIPTOR is SE_SECURITY_DESCRIPTOR_x; -- CXType_Elaborated
   type PSE_SECURITY_DESCRIPTOR is access SE_SECURITY_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type SE_ACCESS_REQUEST_x is record
      Size : DWORD;
      SeSecurityDescriptor : PSE_SECURITY_DESCRIPTOR;
      DesiredAccess : ACCESS_MASK;
      PreviouslyGrantedAccess : ACCESS_MASK;
      PrincipalSelfSid : PSID;
      GenericMapping : PGENERIC_MAPPING;
      ObjectTypeListCount : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
   end record;
   subtype SE_ACCESS_REQUEST is SE_ACCESS_REQUEST_x; -- CXType_Elaborated
   type PSE_ACCESS_REQUEST is access SE_ACCESS_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type SE_ACCESS_REPLY_x is record
      Size : DWORD;
      ResultListCount : DWORD;
      GrantedAccess : PACCESS_MASK;
      AccessStatus : PDWORD;
      AccessReason : PACCESS_REASONS;
      Privileges : access PPRIVILEGE_SET;
   end record;
   subtype SE_ACCESS_REPLY is SE_ACCESS_REPLY_x; -- CXType_Elaborated
   type PSE_ACCESS_REPLY is access SE_ACCESS_REPLY_x; -- CXType_Pointer - CXType_Elaborated
   type SECURITY_IMPERSONATION_LEVEL_x is (
      SecurityAnonymous,
      SecurityIdentification,
      SecurityImpersonation,
      SecurityDelegation
   );
   for SECURITY_IMPERSONATION_LEVEL_x use (
      SecurityAnonymous => 0,
      SecurityIdentification => 1,
      SecurityImpersonation => 2,
      SecurityDelegation => 3
   );
   for SECURITY_IMPERSONATION_LEVEL_x'Size use 32;
   subtype SECURITY_IMPERSONATION_LEVEL is SECURITY_IMPERSONATION_LEVEL_x; -- CXType_Elaborated
   type PSECURITY_IMPERSONATION_LEVEL is access SECURITY_IMPERSONATION_LEVEL_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_TYPE_x is (
      TokenPrimary,
      TokenImpersonation
   );
   for TOKEN_TYPE_x use (
      TokenPrimary => 1,
      TokenImpersonation => 2
   );
   for TOKEN_TYPE_x'Size use 32;
   subtype TOKEN_TYPE is TOKEN_TYPE_x; -- CXType_Elaborated
   type PTOKEN_TYPE is access TOKEN_TYPE; -- CXType_Pointer - CXType_Typedef
   type TOKEN_ELEVATION_TYPE_x is (
      TokenElevationTypeDefault,
      TokenElevationTypeFull,
      TokenElevationTypeLimited
   );
   for TOKEN_ELEVATION_TYPE_x use (
      TokenElevationTypeDefault => 1,
      TokenElevationTypeFull => 2,
      TokenElevationTypeLimited => 3
   );
   for TOKEN_ELEVATION_TYPE_x'Size use 32;
   subtype TOKEN_ELEVATION_TYPE is TOKEN_ELEVATION_TYPE_x; -- CXType_Elaborated
   type PTOKEN_ELEVATION_TYPE is access TOKEN_ELEVATION_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_INFORMATION_CLASS_x is (
      TokenUser,
      TokenGroups,
      TokenPrivileges,
      TokenOwner,
      TokenPrimaryGroup,
      TokenDefaultDacl,
      TokenSource,
      TokenType,
      TokenImpersonationLevel,
      TokenStatistics,
      TokenRestrictedSids,
      TokenSessionId,
      TokenGroupsAndPrivileges,
      TokenSessionReference,
      TokenSandBoxInert,
      TokenAuditPolicy,
      TokenOrigin,
      TokenElevationType,
      TokenLinkedToken,
      TokenElevation,
      TokenHasRestrictions,
      TokenAccessInformation,
      TokenVirtualizationAllowed,
      TokenVirtualizationEnabled,
      TokenIntegrityLevel,
      TokenUIAccess,
      TokenMandatoryPolicy,
      TokenLogonSid,
      TokenIsAppContainer,
      TokenCapabilities,
      TokenAppContainerSid,
      TokenAppContainerNumber,
      TokenUserClaimAttributes,
      TokenDeviceClaimAttributes,
      TokenRestrictedUserClaimAttributes,
      TokenRestrictedDeviceClaimAttributes,
      TokenDeviceGroups,
      TokenRestrictedDeviceGroups,
      TokenSecurityAttributes,
      TokenIsRestricted,
      TokenProcessTrustLevel,
      TokenPrivateNameSpace,
      TokenSingletonAttributes,
      TokenBnoIsolation,
      TokenChildProcessFlags,
      MaxTokenInfoClass
   );
   for TOKEN_INFORMATION_CLASS_x use (
      TokenUser => 1,
      TokenGroups => 2,
      TokenPrivileges => 3,
      TokenOwner => 4,
      TokenPrimaryGroup => 5,
      TokenDefaultDacl => 6,
      TokenSource => 7,
      TokenType => 8,
      TokenImpersonationLevel => 9,
      TokenStatistics => 10,
      TokenRestrictedSids => 11,
      TokenSessionId => 12,
      TokenGroupsAndPrivileges => 13,
      TokenSessionReference => 14,
      TokenSandBoxInert => 15,
      TokenAuditPolicy => 16,
      TokenOrigin => 17,
      TokenElevationType => 18,
      TokenLinkedToken => 19,
      TokenElevation => 20,
      TokenHasRestrictions => 21,
      TokenAccessInformation => 22,
      TokenVirtualizationAllowed => 23,
      TokenVirtualizationEnabled => 24,
      TokenIntegrityLevel => 25,
      TokenUIAccess => 26,
      TokenMandatoryPolicy => 27,
      TokenLogonSid => 28,
      TokenIsAppContainer => 29,
      TokenCapabilities => 30,
      TokenAppContainerSid => 31,
      TokenAppContainerNumber => 32,
      TokenUserClaimAttributes => 33,
      TokenDeviceClaimAttributes => 34,
      TokenRestrictedUserClaimAttributes => 35,
      TokenRestrictedDeviceClaimAttributes => 36,
      TokenDeviceGroups => 37,
      TokenRestrictedDeviceGroups => 38,
      TokenSecurityAttributes => 39,
      TokenIsRestricted => 40,
      TokenProcessTrustLevel => 41,
      TokenPrivateNameSpace => 42,
      TokenSingletonAttributes => 43,
      TokenBnoIsolation => 44,
      TokenChildProcessFlags => 45,
      MaxTokenInfoClass => 46
   );
   for TOKEN_INFORMATION_CLASS_x'Size use 32;
   subtype TOKEN_INFORMATION_CLASS is TOKEN_INFORMATION_CLASS_x; -- CXType_Elaborated
   type PTOKEN_INFORMATION_CLASS is access TOKEN_INFORMATION_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_USER_x is record
      User : SID_AND_ATTRIBUTES;
   end record;
   subtype TOKEN_USER is TOKEN_USER_x; -- CXType_Elaborated
   type PTOKEN_USER is access TOKEN_USER_x; -- CXType_Pointer - CXType_Elaborated
   type SE_TOKEN_USER_x is null record;
   subtype SE_TOKEN_USER is SE_TOKEN_USER_x; -- CXType_Elaborated
   subtype PSE_TOKEN_USER is SE_TOKEN_USER_x; -- CXType_Elaborated
   type TOKEN_GROUPS_x is record
      GroupCount : DWORD;
      Groups : Void;
   end record;
   subtype TOKEN_GROUPS is TOKEN_GROUPS_x; -- CXType_Elaborated
   type PTOKEN_GROUPS is access TOKEN_GROUPS_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_PRIVILEGES_x is record
      PrivilegeCount : DWORD;
      Privileges : Void;
   end record;
   subtype TOKEN_PRIVILEGES is TOKEN_PRIVILEGES_x; -- CXType_Elaborated
   type PTOKEN_PRIVILEGES is access TOKEN_PRIVILEGES_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_OWNER_x is record
      Owner : PSID;
   end record;
   subtype TOKEN_OWNER is TOKEN_OWNER_x; -- CXType_Elaborated
   type PTOKEN_OWNER is access TOKEN_OWNER_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_PRIMARY_GROUP_x is record
      PrimaryGroup : PSID;
   end record;
   subtype TOKEN_PRIMARY_GROUP is TOKEN_PRIMARY_GROUP_x; -- CXType_Elaborated
   type PTOKEN_PRIMARY_GROUP is access TOKEN_PRIMARY_GROUP_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_DEFAULT_DACL_x is record
      DefaultDacl : PACL;
   end record;
   subtype TOKEN_DEFAULT_DACL is TOKEN_DEFAULT_DACL_x; -- CXType_Elaborated
   type PTOKEN_DEFAULT_DACL is access TOKEN_DEFAULT_DACL_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_USER_CLAIMS_x is record
      UserClaims : PCLAIMS_BLOB;
   end record;
   subtype TOKEN_USER_CLAIMS is TOKEN_USER_CLAIMS_x; -- CXType_Elaborated
   type PTOKEN_USER_CLAIMS is access TOKEN_USER_CLAIMS_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_DEVICE_CLAIMS_x is record
      DeviceClaims : PCLAIMS_BLOB;
   end record;
   subtype TOKEN_DEVICE_CLAIMS is TOKEN_DEVICE_CLAIMS_x; -- CXType_Elaborated
   type PTOKEN_DEVICE_CLAIMS is access TOKEN_DEVICE_CLAIMS_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_GROUPS_AND_PRIVILEGES_x is record
      SidCount : DWORD;
      SidLength : DWORD;
      Sids : PSID_AND_ATTRIBUTES;
      RestrictedSidCount : DWORD;
      RestrictedSidLength : DWORD;
      RestrictedSids : PSID_AND_ATTRIBUTES;
      PrivilegeCount : DWORD;
      PrivilegeLength : DWORD;
      Privileges : PLUID_AND_ATTRIBUTES;
      AuthenticationId : LUID;
   end record;
   subtype TOKEN_GROUPS_AND_PRIVILEGES is TOKEN_GROUPS_AND_PRIVILEGES_x; -- CXType_Elaborated
   type PTOKEN_GROUPS_AND_PRIVILEGES is access TOKEN_GROUPS_AND_PRIVILEGES_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_LINKED_TOKEN_x is record
      LinkedToken : HANDLE;
   end record;
   subtype TOKEN_LINKED_TOKEN is TOKEN_LINKED_TOKEN_x; -- CXType_Elaborated
   type PTOKEN_LINKED_TOKEN is access TOKEN_LINKED_TOKEN_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_ELEVATION_x is record
      TokenIsElevated : DWORD;
   end record;
   subtype TOKEN_ELEVATION is TOKEN_ELEVATION_x; -- CXType_Elaborated
   type PTOKEN_ELEVATION is access TOKEN_ELEVATION_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_MANDATORY_LABEL_x is record
      Label : SID_AND_ATTRIBUTES;
   end record;
   subtype TOKEN_MANDATORY_LABEL is TOKEN_MANDATORY_LABEL_x; -- CXType_Elaborated
   type PTOKEN_MANDATORY_LABEL is access TOKEN_MANDATORY_LABEL_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_MANDATORY_POLICY_x is record
      Policy : DWORD;
   end record;
   subtype TOKEN_MANDATORY_POLICY is TOKEN_MANDATORY_POLICY_x; -- CXType_Elaborated
   type PTOKEN_MANDATORY_POLICY is access TOKEN_MANDATORY_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   subtype PSECURITY_ATTRIBUTES_OPAQUE is PVOID; -- CXType_Typedef
   type TOKEN_ACCESS_INFORMATION_x is record
      SidHash : PSID_AND_ATTRIBUTES_HASH;
      RestrictedSidHash : PSID_AND_ATTRIBUTES_HASH;
      Privileges : PTOKEN_PRIVILEGES;
      AuthenticationId : LUID;
      TokenType : TOKEN_TYPE;
      ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
      MandatoryPolicy : TOKEN_MANDATORY_POLICY;
      Flags : DWORD;
      AppContainerNumber : DWORD;
      PackageSid : PSID;
      CapabilitiesHash : PSID_AND_ATTRIBUTES_HASH;
      TrustLevelSid : PSID;
      SecurityAttributes : PSECURITY_ATTRIBUTES_OPAQUE;
   end record;
   subtype TOKEN_ACCESS_INFORMATION is TOKEN_ACCESS_INFORMATION_x; -- CXType_Elaborated
   type PTOKEN_ACCESS_INFORMATION is access TOKEN_ACCESS_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_AUDIT_POLICY_x is record
      PerUserPolicy : Void;
   end record;
   subtype TOKEN_AUDIT_POLICY is TOKEN_AUDIT_POLICY_x; -- CXType_Elaborated
   type PTOKEN_AUDIT_POLICY is access TOKEN_AUDIT_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_SOURCE_x is record
      SourceName : Void;
      SourceIdentifier : LUID;
   end record;
   subtype TOKEN_SOURCE is TOKEN_SOURCE_x; -- CXType_Elaborated
   type PTOKEN_SOURCE is access TOKEN_SOURCE_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_STATISTICS_x is record
      TokenId : LUID;
      AuthenticationId : LUID;
      ExpirationTime : LARGE_INTEGER;
      TokenType : TOKEN_TYPE;
      ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
      DynamicCharged : DWORD;
      DynamicAvailable : DWORD;
      GroupCount : DWORD;
      PrivilegeCount : DWORD;
      ModifiedId : LUID;
   end record;
   subtype TOKEN_STATISTICS is TOKEN_STATISTICS_x; -- CXType_Elaborated
   type PTOKEN_STATISTICS is access TOKEN_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_CONTROL_x is record
      TokenId : LUID;
      AuthenticationId : LUID;
      ModifiedId : LUID;
      TokenSource : TOKEN_SOURCE;
   end record;
   subtype TOKEN_CONTROL is TOKEN_CONTROL_x; -- CXType_Elaborated
   type PTOKEN_CONTROL is access TOKEN_CONTROL_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_ORIGIN_x is record
      OriginatingLogonSession : LUID;
   end record;
   subtype TOKEN_ORIGIN is TOKEN_ORIGIN_x; -- CXType_Elaborated
   type PTOKEN_ORIGIN is access TOKEN_ORIGIN_x; -- CXType_Pointer - CXType_Elaborated
   type MANDATORY_LEVEL_x is (
      MandatoryLevelUntrusted,
      MandatoryLevelLow,
      MandatoryLevelMedium,
      MandatoryLevelHigh,
      MandatoryLevelSystem,
      MandatoryLevelSecureProcess,
      MandatoryLevelCount
   );
   for MANDATORY_LEVEL_x use (
      MandatoryLevelUntrusted => 0,
      MandatoryLevelLow => 1,
      MandatoryLevelMedium => 2,
      MandatoryLevelHigh => 3,
      MandatoryLevelSystem => 4,
      MandatoryLevelSecureProcess => 5,
      MandatoryLevelCount => 6
   );
   for MANDATORY_LEVEL_x'Size use 32;
   subtype MANDATORY_LEVEL is MANDATORY_LEVEL_x; -- CXType_Elaborated
   type PMANDATORY_LEVEL is access MANDATORY_LEVEL_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_APPCONTAINER_INFORMATION_x is record
      TokenAppContainer : PSID;
   end record;
   subtype TOKEN_APPCONTAINER_INFORMATION is TOKEN_APPCONTAINER_INFORMATION_x; -- CXType_Elaborated
   type PTOKEN_APPCONTAINER_INFORMATION is access TOKEN_APPCONTAINER_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_SID_INFORMATION_x is record
      Sid_x : PSID;
   end record;
   subtype TOKEN_SID_INFORMATION is TOKEN_SID_INFORMATION_x; -- CXType_Elaborated
   type PTOKEN_SID_INFORMATION is access TOKEN_SID_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TOKEN_BNO_ISOLATION_INFORMATION_x is record
      IsolationPrefix : PWSTR;
      IsolationEnabled : BOOLEAN;
   end record;
   subtype TOKEN_BNO_ISOLATION_INFORMATION is TOKEN_BNO_ISOLATION_INFORMATION_x; -- CXType_Elaborated
   type PTOKEN_BNO_ISOLATION_INFORMATION is access TOKEN_BNO_ISOLATION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE_x is record
      Version : DWORD64;
      Name : PWSTR;
   end record;
   subtype CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE is CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE_x; -- CXType_Elaborated
   type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE is access CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE_x; -- CXType_Pointer - CXType_Elaborated
   type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE_x is record
      pValue : PVOID;
      ValueLength : DWORD;
   end record;
   subtype CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE is CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE_x; -- CXType_Elaborated
   type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE is access CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE_x; -- CXType_Pointer - CXType_Elaborated
   type CLAIM_SECURITY_ATTRIBUTE_V1_x is record
      Name : PWSTR;
      ValueType : WORD;
      Reserved : WORD;
      Flags : DWORD;
      ValueCount : DWORD;
      Values : Void;
   end record;
   subtype CLAIM_SECURITY_ATTRIBUTE_V1 is CLAIM_SECURITY_ATTRIBUTE_V1_x; -- CXType_Elaborated
   type PCLAIM_SECURITY_ATTRIBUTE_V1 is access CLAIM_SECURITY_ATTRIBUTE_V1_x; -- CXType_Pointer - CXType_Elaborated
   type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_x is record
      Name : DWORD;
      ValueType : WORD;
      Reserved : WORD;
      Flags : DWORD;
      ValueCount : DWORD;
      Values : Void;
   end record;
   subtype CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 is CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_x; -- CXType_Elaborated
   type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 is access CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_x; -- CXType_Pointer - CXType_Elaborated
   type CLAIM_SECURITY_ATTRIBUTES_INFORMATION_x is record
      Version : WORD;
      Reserved : WORD;
      AttributeCount : DWORD;
      Attribute : Void;
   end record;
   subtype CLAIM_SECURITY_ATTRIBUTES_INFORMATION is CLAIM_SECURITY_ATTRIBUTES_INFORMATION_x; -- CXType_Elaborated
   type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION is access CLAIM_SECURITY_ATTRIBUTES_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   subtype SECURITY_CONTEXT_TRACKING_MODE is BOOLEAN; -- CXType_Typedef
   type PSECURITY_CONTEXT_TRACKING_MODE is access BOOLEAN; -- CXType_Pointer - CXType_Typedef
   type SECURITY_QUALITY_OF_SERVICE_x is record
      Length : DWORD;
      ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
      ContextTrackingMode : SECURITY_CONTEXT_TRACKING_MODE;
      EffectiveOnly : BOOLEAN;
   end record;
   subtype SECURITY_QUALITY_OF_SERVICE is SECURITY_QUALITY_OF_SERVICE_x; -- CXType_Elaborated
   type PSECURITY_QUALITY_OF_SERVICE is access SECURITY_QUALITY_OF_SERVICE_x; -- CXType_Pointer - CXType_Elaborated
   type SE_IMPERSONATION_STATE_x is record
      Token : PACCESS_TOKEN;
      CopyOnOpen : BOOLEAN;
      EffectiveOnly : BOOLEAN;
      Level : SECURITY_IMPERSONATION_LEVEL;
   end record;
   subtype SE_IMPERSONATION_STATE is SE_IMPERSONATION_STATE_x; -- CXType_Elaborated
   type PSE_IMPERSONATION_STATE is access SE_IMPERSONATION_STATE_x; -- CXType_Pointer - CXType_Elaborated
   subtype SECURITY_INFORMATION is DWORD; -- CXType_Typedef
   type PSECURITY_INFORMATION is access DWORD; -- CXType_Pointer - CXType_Typedef
   subtype SE_SIGNING_LEVEL is BYTE; -- CXType_Typedef
   type PSE_SIGNING_LEVEL is access BYTE; -- CXType_Pointer - CXType_Typedef
   type SE_IMAGE_SIGNATURE_TYPE_x is (
      SeImageSignatureNone,
      SeImageSignatureEmbedded,
      SeImageSignatureCache,
      SeImageSignatureCatalogCached,
      SeImageSignatureCatalogNotCached,
      SeImageSignatureCatalogHint,
      SeImageSignaturePackageCatalog
   );
   for SE_IMAGE_SIGNATURE_TYPE_x use (
      SeImageSignatureNone => 0,
      SeImageSignatureEmbedded => 1,
      SeImageSignatureCache => 2,
      SeImageSignatureCatalogCached => 3,
      SeImageSignatureCatalogNotCached => 4,
      SeImageSignatureCatalogHint => 5,
      SeImageSignaturePackageCatalog => 6
   );
   for SE_IMAGE_SIGNATURE_TYPE_x'Size use 32;
   subtype SE_IMAGE_SIGNATURE_TYPE is SE_IMAGE_SIGNATURE_TYPE_x; -- CXType_Elaborated
   type PSE_IMAGE_SIGNATURE_TYPE is access SE_IMAGE_SIGNATURE_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type SE_LEARNING_MODE_DATA_TYPE_x is (
      SeLearningModeInvalidType,
      SeLearningModeSettings,
      SeLearningModeMax
   );
   for SE_LEARNING_MODE_DATA_TYPE_x use (
      SeLearningModeInvalidType => 0,
      SeLearningModeSettings => 1,
      SeLearningModeMax => 2
   );
   for SE_LEARNING_MODE_DATA_TYPE_x'Size use 32;
   subtype SE_LEARNING_MODE_DATA_TYPE is SE_LEARNING_MODE_DATA_TYPE_x; -- CXType_Elaborated
   type SECURITY_CAPABILITIES_x is record
      AppContainerSid : PSID;
      Capabilities : PSID_AND_ATTRIBUTES;
      CapabilityCount : DWORD;
      Reserved : DWORD;
   end record;
   subtype SECURITY_CAPABILITIES is SECURITY_CAPABILITIES_x; -- CXType_Elaborated
   type PSECURITY_CAPABILITIES is access SECURITY_CAPABILITIES_x; -- CXType_Pointer - CXType_Elaborated
   type LPSECURITY_CAPABILITIES is access SECURITY_CAPABILITIES_x; -- CXType_Pointer - CXType_Elaborated
   type JOB_SET_ARRAY_x is record
      JobHandle : HANDLE;
      MemberLevel : DWORD;
      Flags : DWORD;
   end record;
   subtype JOB_SET_ARRAY is JOB_SET_ARRAY_x; -- CXType_Elaborated
   type PJOB_SET_ARRAY is access JOB_SET_ARRAY_x; -- CXType_Pointer - CXType_Elaborated
   type EXCEPTION_REGISTRATION_RECORD_x is record
      Next : access Void;
      Handler : PEXCEPTION_ROUTINE;
   end record;
   subtype EXCEPTION_REGISTRATION_RECORD is EXCEPTION_REGISTRATION_RECORD_x; -- CXType_Elaborated
   type PEXCEPTION_REGISTRATION_RECORD is access EXCEPTION_REGISTRATION_RECORD; -- CXType_Pointer - CXType_Typedef
   type NT_TIB_x is record
      ExceptionList : access Void;
      StackBase : PVOID;
      StackLimit : PVOID;
      SubSystemTib : PVOID;
      ArbitraryUserPointer : PVOID;
      Self : access Void;
   end record;
   subtype NT_TIB is NT_TIB_x; -- CXType_Elaborated
   type PNT_TIB is access NT_TIB; -- CXType_Pointer - CXType_Typedef
   type NT_TIB32_x is record
      ExceptionList : DWORD;
      StackBase : DWORD;
      StackLimit : DWORD;
      SubSystemTib : DWORD;
      ArbitraryUserPointer : DWORD;
      Self : DWORD;
   end record;
   subtype NT_TIB32 is NT_TIB32_x; -- CXType_Elaborated
   type PNT_TIB32 is access NT_TIB32_x; -- CXType_Pointer - CXType_Elaborated
   type NT_TIB64_x is record
      ExceptionList : DWORD64;
      StackBase : DWORD64;
      StackLimit : DWORD64;
      SubSystemTib : DWORD64;
      ArbitraryUserPointer : DWORD64;
      Self : DWORD64;
   end record;
   subtype NT_TIB64 is NT_TIB64_x; -- CXType_Elaborated
   type PNT_TIB64 is access NT_TIB64_x; -- CXType_Pointer - CXType_Elaborated
   type UMS_CREATE_THREAD_ATTRIBUTES_x is record
      UmsVersion : DWORD;
      UmsContext : PVOID;
      UmsCompletionList : PVOID;
   end record;
   subtype UMS_CREATE_THREAD_ATTRIBUTES is UMS_CREATE_THREAD_ATTRIBUTES_x; -- CXType_Elaborated
   type PUMS_CREATE_THREAD_ATTRIBUTES is access UMS_CREATE_THREAD_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type WOW64_ARCHITECTURE_INFORMATION_x is record
      Machine : DWORD;
      KernelMode : DWORD;
      UserMode : DWORD;
      Native : DWORD;
      Process : DWORD;
      ReservedZero0 : DWORD;
   end record;
   subtype WOW64_ARCHITECTURE_INFORMATION is WOW64_ARCHITECTURE_INFORMATION_x; -- CXType_Elaborated
   type QUOTA_LIMITS_x is record
      PagedPoolLimit : SIZE_T;
      NonPagedPoolLimit : SIZE_T;
      MinimumWorkingSetSize : SIZE_T;
      MaximumWorkingSetSize : SIZE_T;
      PagefileLimit : SIZE_T;
      TimeLimit : LARGE_INTEGER;
   end record;
   subtype QUOTA_LIMITS is QUOTA_LIMITS_x; -- CXType_Elaborated
   type PQUOTA_LIMITS is access QUOTA_LIMITS_x; -- CXType_Pointer - CXType_Elaborated
   type RATE_QUOTA_LIMIT_x is null record; -- Union Placeholder [FIXME]
   subtype RATE_QUOTA_LIMIT is RATE_QUOTA_LIMIT_x; -- CXType_Elaborated
   type PRATE_QUOTA_LIMIT is access RATE_QUOTA_LIMIT_x; -- CXType_Pointer - CXType_Elaborated
   type QUOTA_LIMITS_EX_x is record
      PagedPoolLimit : SIZE_T;
      NonPagedPoolLimit : SIZE_T;
      MinimumWorkingSetSize : SIZE_T;
      MaximumWorkingSetSize : SIZE_T;
      PagefileLimit : SIZE_T;
      TimeLimit : LARGE_INTEGER;
      WorkingSetLimit : SIZE_T;
      Reserved2 : SIZE_T;
      Reserved3 : SIZE_T;
      Reserved4 : SIZE_T;
      Flags : DWORD;
      CpuRateLimit : RATE_QUOTA_LIMIT;
   end record;
   subtype QUOTA_LIMITS_EX is QUOTA_LIMITS_EX_x; -- CXType_Elaborated
   type PQUOTA_LIMITS_EX is access QUOTA_LIMITS_EX_x; -- CXType_Pointer - CXType_Elaborated
   type IO_COUNTERS_x is record
      ReadOperationCount : ULONGLONG;
      WriteOperationCount : ULONGLONG;
      OtherOperationCount : ULONGLONG;
      ReadTransferCount : ULONGLONG;
      WriteTransferCount : ULONGLONG;
      OtherTransferCount : ULONGLONG;
   end record;
   subtype IO_COUNTERS is IO_COUNTERS_x; -- CXType_Elaborated
   type PIO_COUNTERS is access IO_COUNTERS; -- CXType_Pointer - CXType_Typedef
   type HARDWARE_COUNTER_TYPE_x is (
      PMCCounter,
      MaxHardwareCounterType
   );
   for HARDWARE_COUNTER_TYPE_x use (
      PMCCounter => 0,
      MaxHardwareCounterType => 1
   );
   for HARDWARE_COUNTER_TYPE_x'Size use 32;
   subtype HARDWARE_COUNTER_TYPE is HARDWARE_COUNTER_TYPE_x; -- CXType_Elaborated
   type PHARDWARE_COUNTER_TYPE is access HARDWARE_COUNTER_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_POLICY_x is (
      ProcessDEPPolicy,
      ProcessASLRPolicy,
      ProcessDynamicCodePolicy,
      ProcessStrictHandleCheckPolicy,
      ProcessSystemCallDisablePolicy,
      ProcessMitigationOptionsMask,
      ProcessExtensionPointDisablePolicy,
      ProcessControlFlowGuardPolicy,
      ProcessSignaturePolicy,
      ProcessFontDisablePolicy,
      ProcessImageLoadPolicy,
      ProcessSystemCallFilterPolicy,
      ProcessPayloadRestrictionPolicy,
      ProcessChildProcessPolicy,
      MaxProcessMitigationPolicy
   );
   for PROCESS_MITIGATION_POLICY_x use (
      ProcessDEPPolicy => 0,
      ProcessASLRPolicy => 1,
      ProcessDynamicCodePolicy => 2,
      ProcessStrictHandleCheckPolicy => 3,
      ProcessSystemCallDisablePolicy => 4,
      ProcessMitigationOptionsMask => 5,
      ProcessExtensionPointDisablePolicy => 6,
      ProcessControlFlowGuardPolicy => 7,
      ProcessSignaturePolicy => 8,
      ProcessFontDisablePolicy => 9,
      ProcessImageLoadPolicy => 10,
      ProcessSystemCallFilterPolicy => 11,
      ProcessPayloadRestrictionPolicy => 12,
      ProcessChildProcessPolicy => 13,
      MaxProcessMitigationPolicy => 14
   );
   for PROCESS_MITIGATION_POLICY_x'Size use 32;
   subtype PROCESS_MITIGATION_POLICY is PROCESS_MITIGATION_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_POLICY is access PROCESS_MITIGATION_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_ASLR_POLICY_x is null record;
   subtype PROCESS_MITIGATION_ASLR_POLICY is PROCESS_MITIGATION_ASLR_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_ASLR_POLICY is access PROCESS_MITIGATION_ASLR_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_DEP_POLICY_x is record
      Permanent : BOOLEAN;
   end record;
   subtype PROCESS_MITIGATION_DEP_POLICY is PROCESS_MITIGATION_DEP_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_DEP_POLICY is access PROCESS_MITIGATION_DEP_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_x is null record;
   subtype PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY is PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY is access PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_x is null record;
   subtype PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY is PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY is access PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_x is null record;
   subtype PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY is PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY is access PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_x is null record;
   subtype PROCESS_MITIGATION_DYNAMIC_CODE_POLICY is PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY is access PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_x is null record;
   subtype PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY is PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY is access PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_x is null record;
   subtype PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY is PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY is access PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_FONT_DISABLE_POLICY_x is null record;
   subtype PROCESS_MITIGATION_FONT_DISABLE_POLICY is PROCESS_MITIGATION_FONT_DISABLE_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_FONT_DISABLE_POLICY is access PROCESS_MITIGATION_FONT_DISABLE_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_IMAGE_LOAD_POLICY_x is null record;
   subtype PROCESS_MITIGATION_IMAGE_LOAD_POLICY is PROCESS_MITIGATION_IMAGE_LOAD_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_IMAGE_LOAD_POLICY is access PROCESS_MITIGATION_IMAGE_LOAD_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_x is null record;
   subtype PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY is PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY is access PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_x is null record;
   subtype PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY is PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY is access PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MITIGATION_CHILD_PROCESS_POLICY_x is null record;
   subtype PROCESS_MITIGATION_CHILD_PROCESS_POLICY is PROCESS_MITIGATION_CHILD_PROCESS_POLICY_x; -- CXType_Elaborated
   type PPROCESS_MITIGATION_CHILD_PROCESS_POLICY is access PROCESS_MITIGATION_CHILD_PROCESS_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION_x is record
      TotalUserTime : LARGE_INTEGER;
      TotalKernelTime : LARGE_INTEGER;
      ThisPeriodTotalUserTime : LARGE_INTEGER;
      ThisPeriodTotalKernelTime : LARGE_INTEGER;
      TotalPageFaultCount : DWORD;
      TotalProcesses : DWORD;
      ActiveProcesses : DWORD;
      TotalTerminatedProcesses : DWORD;
   end record;
   subtype JOBOBJECT_BASIC_ACCOUNTING_INFORMATION is JOBOBJECT_BASIC_ACCOUNTING_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION is access JOBOBJECT_BASIC_ACCOUNTING_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_BASIC_LIMIT_INFORMATION_x is record
      PerProcessUserTimeLimit : LARGE_INTEGER;
      PerJobUserTimeLimit : LARGE_INTEGER;
      LimitFlags : DWORD;
      MinimumWorkingSetSize : SIZE_T;
      MaximumWorkingSetSize : SIZE_T;
      ActiveProcessLimit : DWORD;
      Affinity : ULONG_PTR;
      PriorityClass : DWORD;
      SchedulingClass : DWORD;
   end record;
   subtype JOBOBJECT_BASIC_LIMIT_INFORMATION is JOBOBJECT_BASIC_LIMIT_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_BASIC_LIMIT_INFORMATION is access JOBOBJECT_BASIC_LIMIT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_EXTENDED_LIMIT_INFORMATION_x is record
      BasicLimitInformation : JOBOBJECT_BASIC_LIMIT_INFORMATION;
      IoInfo : IO_COUNTERS;
      ProcessMemoryLimit : SIZE_T;
      JobMemoryLimit : SIZE_T;
      PeakProcessMemoryUsed : SIZE_T;
      PeakJobMemoryUsed : SIZE_T;
   end record;
   subtype JOBOBJECT_EXTENDED_LIMIT_INFORMATION is JOBOBJECT_EXTENDED_LIMIT_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION is access JOBOBJECT_EXTENDED_LIMIT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_BASIC_PROCESS_ID_LIST_x is record
      NumberOfAssignedProcesses : DWORD;
      NumberOfProcessIdsInList : DWORD;
      ProcessIdList : Void;
   end record;
   subtype JOBOBJECT_BASIC_PROCESS_ID_LIST is JOBOBJECT_BASIC_PROCESS_ID_LIST_x; -- CXType_Elaborated
   type PJOBOBJECT_BASIC_PROCESS_ID_LIST is access JOBOBJECT_BASIC_PROCESS_ID_LIST_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_BASIC_UI_RESTRICTIONS_x is record
      UIRestrictionsClass : DWORD;
   end record;
   subtype JOBOBJECT_BASIC_UI_RESTRICTIONS is JOBOBJECT_BASIC_UI_RESTRICTIONS_x; -- CXType_Elaborated
   type PJOBOBJECT_BASIC_UI_RESTRICTIONS is access JOBOBJECT_BASIC_UI_RESTRICTIONS_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_SECURITY_LIMIT_INFORMATION_x is record
      SecurityLimitFlags : DWORD;
      JobToken : HANDLE;
      SidsToDisable : PTOKEN_GROUPS;
      PrivilegesToDelete : PTOKEN_PRIVILEGES;
      RestrictedSids : PTOKEN_GROUPS;
   end record;
   subtype JOBOBJECT_SECURITY_LIMIT_INFORMATION is JOBOBJECT_SECURITY_LIMIT_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_SECURITY_LIMIT_INFORMATION is access JOBOBJECT_SECURITY_LIMIT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_END_OF_JOB_TIME_INFORMATION_x is record
      EndOfJobTimeAction : DWORD;
   end record;
   subtype JOBOBJECT_END_OF_JOB_TIME_INFORMATION is JOBOBJECT_END_OF_JOB_TIME_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION is access JOBOBJECT_END_OF_JOB_TIME_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_ASSOCIATE_COMPLETION_PORT_x is record
      CompletionKey : PVOID;
      CompletionPort : HANDLE;
   end record;
   subtype JOBOBJECT_ASSOCIATE_COMPLETION_PORT is JOBOBJECT_ASSOCIATE_COMPLETION_PORT_x; -- CXType_Elaborated
   type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT is access JOBOBJECT_ASSOCIATE_COMPLETION_PORT_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION_x is record
      BasicInfo : JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
      IoInfo : IO_COUNTERS;
   end record;
   subtype JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION is JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION is access JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_JOBSET_INFORMATION_x is record
      MemberLevel : DWORD;
   end record;
   subtype JOBOBJECT_JOBSET_INFORMATION is JOBOBJECT_JOBSET_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_JOBSET_INFORMATION is access JOBOBJECT_JOBSET_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_RATE_CONTROL_TOLERANCE_x is (
      ToleranceLow,
      ToleranceMedium,
      ToleranceHigh
   );
   for JOBOBJECT_RATE_CONTROL_TOLERANCE_x use (
      ToleranceLow => 1,
      ToleranceMedium => 2,
      ToleranceHigh => 3
   );
   for JOBOBJECT_RATE_CONTROL_TOLERANCE_x'Size use 32;
   subtype JOBOBJECT_RATE_CONTROL_TOLERANCE is JOBOBJECT_RATE_CONTROL_TOLERANCE_x; -- CXType_Elaborated
   type PJOBOBJECT_RATE_CONTROL_TOLERANCE is access JOBOBJECT_RATE_CONTROL_TOLERANCE_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_x is (
      ToleranceIntervalShort,
      ToleranceIntervalMedium,
      ToleranceIntervalLong
   );
   for JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_x use (
      ToleranceIntervalShort => 1,
      ToleranceIntervalMedium => 2,
      ToleranceIntervalLong => 3
   );
   for JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_x'Size use 32;
   subtype JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL is JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_x; -- CXType_Elaborated
   type PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL is access JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_x is record
      IoReadBytesLimit : DWORD64;
      IoWriteBytesLimit : DWORD64;
      PerJobUserTimeLimit : LARGE_INTEGER;
      JobMemoryLimit : DWORD64;
      RateControlTolerance : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      RateControlToleranceInterval : JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
      LimitFlags : DWORD;
   end record;
   subtype JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION is JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION is access JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 is record
      IoReadBytesLimit : DWORD64;
      IoWriteBytesLimit : DWORD64;
      PerJobUserTimeLimit : LARGE_INTEGER;
      LimitFlags : DWORD;
      IoRateControlTolerance : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      JobLowMemoryLimit : DWORD64;
      IoRateControlToleranceInterval : JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
      NetRateControlTolerance : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      NetRateControlToleranceInterval : JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
   end record;
   type JOBOBJECT_LIMIT_VIOLATION_INFORMATION_x is record
      LimitFlags : DWORD;
      ViolationLimitFlags : DWORD;
      IoReadBytes : DWORD64;
      IoReadBytesLimit : DWORD64;
      IoWriteBytes : DWORD64;
      IoWriteBytesLimit : DWORD64;
      PerJobUserTime : LARGE_INTEGER;
      PerJobUserTimeLimit : LARGE_INTEGER;
      JobMemory : DWORD64;
      JobMemoryLimit : DWORD64;
      RateControlTolerance : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      RateControlToleranceLimit : JOBOBJECT_RATE_CONTROL_TOLERANCE;
   end record;
   subtype JOBOBJECT_LIMIT_VIOLATION_INFORMATION is JOBOBJECT_LIMIT_VIOLATION_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION is access JOBOBJECT_LIMIT_VIOLATION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 is record
      LimitFlags : DWORD;
      ViolationLimitFlags : DWORD;
      IoReadBytes : DWORD64;
      IoReadBytesLimit : DWORD64;
      IoWriteBytes : DWORD64;
      IoWriteBytesLimit : DWORD64;
      PerJobUserTime : LARGE_INTEGER;
      PerJobUserTimeLimit : LARGE_INTEGER;
      JobMemory : DWORD64;
      JobLowMemoryLimit : DWORD64;
      IoRateControlTolerance : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      IoRateControlToleranceLimit : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      NetRateControlTolerance : JOBOBJECT_RATE_CONTROL_TOLERANCE;
      NetRateControlToleranceLimit : JOBOBJECT_RATE_CONTROL_TOLERANCE;
   end record;
   type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_x is record
      ControlFlags : DWORD;
   end record;
   subtype JOBOBJECT_CPU_RATE_CONTROL_INFORMATION is JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION is access JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOB_OBJECT_NET_RATE_CONTROL_FLAGS is (
      JOB_OBJECT_NET_RATE_CONTROL_ENABLE,
      JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH,
      JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG,
      JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS
   );
   for JOB_OBJECT_NET_RATE_CONTROL_FLAGS use (
      JOB_OBJECT_NET_RATE_CONTROL_ENABLE => 1,
      JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH => 2,
      JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG => 4,
      JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS => 7
   );
   for JOB_OBJECT_NET_RATE_CONTROL_FLAGS'Size use 32;
   -- operator|(); -- inlined function not supported
   -- operator|=(); -- inlined function not supported
   -- operator&(); -- inlined function not supported
   -- operator&=(); -- inlined function not supported
   -- operator~(); -- inlined function not supported
   -- operator^(); -- inlined function not supported
   -- operator^=(); -- inlined function not supported
   subtype C_ASSERT_x_x is System.Address; -- [FIXME - CXType_ConstantArray]
   type JOBOBJECT_NET_RATE_CONTROL_INFORMATION is record
      MaxBandwidth : DWORD64;
      ControlFlags : JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
      DscpTag : BYTE;
   end record;
   type JOB_OBJECT_IO_RATE_CONTROL_FLAGS is (
      JOB_OBJECT_IO_RATE_CONTROL_ENABLE,
      JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME,
      JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL,
      JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP,
      JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS
   );
   for JOB_OBJECT_IO_RATE_CONTROL_FLAGS use (
      JOB_OBJECT_IO_RATE_CONTROL_ENABLE => 1,
      JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME => 2,
      JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL => 4,
      JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP => 8,
      JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS => 15
   );
   for JOB_OBJECT_IO_RATE_CONTROL_FLAGS'Size use 32;
   type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE is record
      MaxIops : LONG64;
      MaxBandwidth : LONG64;
      ReservationIops : LONG64;
      VolumeName : PWSTR;
      BaseIoSize : DWORD;
      ControlFlags : JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
      VolumeNameLength : WORD;
   end record;
   subtype JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 is JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE; -- CXType_Typedef
   type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 is record
      MaxIops : LONG64;
      MaxBandwidth : LONG64;
      ReservationIops : LONG64;
      VolumeName : PWSTR;
      BaseIoSize : DWORD;
      ControlFlags : JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
      VolumeNameLength : WORD;
      CriticalReservationIops : LONG64;
      ReservationBandwidth : LONG64;
      CriticalReservationBandwidth : LONG64;
      MaxTimePercent : LONG64;
      ReservationTimePercent : LONG64;
      CriticalReservationTimePercent : LONG64;
   end record;
   type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 is record
      MaxIops : LONG64;
      MaxBandwidth : LONG64;
      ReservationIops : LONG64;
      VolumeName : PWSTR;
      BaseIoSize : DWORD;
      ControlFlags : JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
      VolumeNameLength : WORD;
      CriticalReservationIops : LONG64;
      ReservationBandwidth : LONG64;
      CriticalReservationBandwidth : LONG64;
      MaxTimePercent : LONG64;
      ReservationTimePercent : LONG64;
      CriticalReservationTimePercent : LONG64;
      SoftMaxIops : LONG64;
      SoftMaxBandwidth : LONG64;
      SoftMaxTimePercent : LONG64;
      LimitExcessNotifyIops : LONG64;
      LimitExcessNotifyBandwidth : LONG64;
      LimitExcessNotifyTimePercent : LONG64;
   end record;
   type JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS is (
      JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE,
      JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE,
      JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS
   );
   for JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS use (
      JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE => 1,
      JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE => 2,
      JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS => 3
   );
   for JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS'Size use 32;
   type JOBOBJECT_IO_ATTRIBUTION_STATS_x is record
      IoCount : ULONG_PTR;
      TotalNonOverlappedQueueTime : ULONGLONG;
      TotalNonOverlappedServiceTime : ULONGLONG;
      TotalSize : ULONGLONG;
   end record;
   subtype JOBOBJECT_IO_ATTRIBUTION_STATS is JOBOBJECT_IO_ATTRIBUTION_STATS_x; -- CXType_Elaborated
   type PJOBOBJECT_IO_ATTRIBUTION_STATS is access JOBOBJECT_IO_ATTRIBUTION_STATS_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECT_IO_ATTRIBUTION_INFORMATION_x is record
      ControlFlags : DWORD;
      ReadStats : JOBOBJECT_IO_ATTRIBUTION_STATS;
      WriteStats : JOBOBJECT_IO_ATTRIBUTION_STATS;
   end record;
   subtype JOBOBJECT_IO_ATTRIBUTION_INFORMATION is JOBOBJECT_IO_ATTRIBUTION_INFORMATION_x; -- CXType_Elaborated
   type PJOBOBJECT_IO_ATTRIBUTION_INFORMATION is access JOBOBJECT_IO_ATTRIBUTION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type JOBOBJECTINFOCLASS_x is (
      JobObjectBasicAccountingInformation,
      JobObjectBasicLimitInformation,
      JobObjectBasicProcessIdList,
      JobObjectBasicUIRestrictions,
      JobObjectSecurityLimitInformation,
      JobObjectEndOfJobTimeInformation,
      JobObjectAssociateCompletionPortInformation,
      JobObjectBasicAndIoAccountingInformation,
      JobObjectExtendedLimitInformation,
      JobObjectJobSetInformation,
      JobObjectGroupInformation,
      JobObjectNotificationLimitInformation,
      JobObjectLimitViolationInformation,
      JobObjectGroupInformationEx,
      JobObjectCpuRateControlInformation,
      JobObjectCompletionFilter,
      JobObjectCompletionCounter,
      JobObjectReserved1Information,
      JobObjectReserved2Information,
      JobObjectReserved3Information,
      JobObjectReserved4Information,
      JobObjectReserved5Information,
      JobObjectReserved6Information,
      JobObjectReserved7Information,
      JobObjectReserved8Information,
      JobObjectReserved9Information,
      JobObjectReserved10Information,
      JobObjectReserved11Information,
      JobObjectReserved12Information,
      JobObjectReserved13Information,
      JobObjectReserved14Information,
      JobObjectNetRateControlInformation,
      JobObjectNotificationLimitInformation2,
      JobObjectLimitViolationInformation2,
      JobObjectCreateSilo,
      JobObjectSiloBasicInformation,
      JobObjectReserved15Information,
      JobObjectReserved16Information,
      JobObjectReserved17Information,
      JobObjectReserved18Information,
      JobObjectReserved19Information,
      JobObjectReserved20Information,
      JobObjectReserved21Information,
      JobObjectReserved22Information,
      JobObjectReserved23Information,
      JobObjectReserved24Information,
      JobObjectReserved25Information,
      MaxJobObjectInfoClass
   );
   for JOBOBJECTINFOCLASS_x use (
      JobObjectBasicAccountingInformation => 1,
      JobObjectBasicLimitInformation => 2,
      JobObjectBasicProcessIdList => 3,
      JobObjectBasicUIRestrictions => 4,
      JobObjectSecurityLimitInformation => 5,
      JobObjectEndOfJobTimeInformation => 6,
      JobObjectAssociateCompletionPortInformation => 7,
      JobObjectBasicAndIoAccountingInformation => 8,
      JobObjectExtendedLimitInformation => 9,
      JobObjectJobSetInformation => 10,
      JobObjectGroupInformation => 11,
      JobObjectNotificationLimitInformation => 12,
      JobObjectLimitViolationInformation => 13,
      JobObjectGroupInformationEx => 14,
      JobObjectCpuRateControlInformation => 15,
      JobObjectCompletionFilter => 16,
      JobObjectCompletionCounter => 17,
      JobObjectReserved1Information => 18,
      JobObjectReserved2Information => 19,
      JobObjectReserved3Information => 20,
      JobObjectReserved4Information => 21,
      JobObjectReserved5Information => 22,
      JobObjectReserved6Information => 23,
      JobObjectReserved7Information => 24,
      JobObjectReserved8Information => 25,
      JobObjectReserved9Information => 26,
      JobObjectReserved10Information => 27,
      JobObjectReserved11Information => 28,
      JobObjectReserved12Information => 29,
      JobObjectReserved13Information => 30,
      JobObjectReserved14Information => 31,
      JobObjectNetRateControlInformation => 32,
      JobObjectNotificationLimitInformation2 => 33,
      JobObjectLimitViolationInformation2 => 34,
      JobObjectCreateSilo => 35,
      JobObjectSiloBasicInformation => 36,
      JobObjectReserved15Information => 37,
      JobObjectReserved16Information => 38,
      JobObjectReserved17Information => 39,
      JobObjectReserved18Information => 40,
      JobObjectReserved19Information => 41,
      JobObjectReserved20Information => 42,
      JobObjectReserved21Information => 43,
      JobObjectReserved22Information => 44,
      JobObjectReserved23Information => 45,
      JobObjectReserved24Information => 46,
      JobObjectReserved25Information => 47,
      MaxJobObjectInfoClass => 48
   );
   for JOBOBJECTINFOCLASS_x'Size use 32;
   subtype JOBOBJECTINFOCLASS is JOBOBJECTINFOCLASS_x; -- CXType_Elaborated
   type SILOOBJECT_BASIC_INFORMATION_x is record
      SiloId : DWORD;
      SiloParentId : DWORD;
      NumberOfProcesses : DWORD;
      IsInServerSilo : BOOLEAN;
      Reserved : Void;
   end record;
   subtype SILOOBJECT_BASIC_INFORMATION is SILOOBJECT_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PSILOOBJECT_BASIC_INFORMATION is access SILOOBJECT_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type SERVERSILO_STATE_x is (
      SERVERSILO_INITING,
      SERVERSILO_STARTED,
      SERVERSILO_SHUTTING_DOWN,
      SERVERSILO_TERMINATING,
      SERVERSILO_TERMINATED
   );
   for SERVERSILO_STATE_x use (
      SERVERSILO_INITING => 0,
      SERVERSILO_STARTED => 1,
      SERVERSILO_SHUTTING_DOWN => 2,
      SERVERSILO_TERMINATING => 3,
      SERVERSILO_TERMINATED => 4
   );
   for SERVERSILO_STATE_x'Size use 32;
   subtype SERVERSILO_STATE is SERVERSILO_STATE_x; -- CXType_Elaborated
   type PSERVERSILO_STATE is access SERVERSILO_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type SERVERSILO_BASIC_INFORMATION_x is record
      ServiceSessionId : DWORD;
      State : SERVERSILO_STATE;
      ExitStatus : DWORD;
   end record;
   subtype SERVERSILO_BASIC_INFORMATION is SERVERSILO_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PSERVERSILO_BASIC_INFORMATION is access SERVERSILO_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type FIRMWARE_TYPE_x is (
      FirmwareTypeUnknown,
      FirmwareTypeBios,
      FirmwareTypeUefi,
      FirmwareTypeMax
   );
   for FIRMWARE_TYPE_x use (
      FirmwareTypeUnknown => 0,
      FirmwareTypeBios => 1,
      FirmwareTypeUefi => 2,
      FirmwareTypeMax => 3
   );
   for FIRMWARE_TYPE_x'Size use 32;
   subtype FIRMWARE_TYPE is FIRMWARE_TYPE_x; -- CXType_Elaborated
   type PFIRMWARE_TYPE is access FIRMWARE_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type LOGICAL_PROCESSOR_RELATIONSHIP_x is (
      RelationProcessorCore,
      RelationNumaNode,
      RelationCache,
      RelationProcessorPackage,
      RelationGroup,
      RelationAll
   );
   for LOGICAL_PROCESSOR_RELATIONSHIP_x use (
      RelationProcessorCore => 0,
      RelationNumaNode => 1,
      RelationCache => 2,
      RelationProcessorPackage => 3,
      RelationGroup => 4,
      RelationAll => 65535
   );
   for LOGICAL_PROCESSOR_RELATIONSHIP_x'Size use 32;
   subtype LOGICAL_PROCESSOR_RELATIONSHIP is LOGICAL_PROCESSOR_RELATIONSHIP_x; -- CXType_Elaborated
   type PROCESSOR_CACHE_TYPE_x is (
      CacheUnified,
      CacheInstruction,
      CacheData,
      CacheTrace
   );
   for PROCESSOR_CACHE_TYPE_x use (
      CacheUnified => 0,
      CacheInstruction => 1,
      CacheData => 2,
      CacheTrace => 3
   );
   for PROCESSOR_CACHE_TYPE_x'Size use 32;
   subtype PROCESSOR_CACHE_TYPE is PROCESSOR_CACHE_TYPE_x; -- CXType_Elaborated
   type CACHE_DESCRIPTOR_x is record
      Level : BYTE;
      Associativity : BYTE;
      LineSize : WORD;
      Size : DWORD;
      type_x : PROCESSOR_CACHE_TYPE;
   end record;
   subtype CACHE_DESCRIPTOR is CACHE_DESCRIPTOR_x; -- CXType_Elaborated
   type PCACHE_DESCRIPTOR is access CACHE_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_x is record
      ProcessorMask : ULONG_PTR;
      Relationship : LOGICAL_PROCESSOR_RELATIONSHIP;
   end record;
   subtype SYSTEM_LOGICAL_PROCESSOR_INFORMATION is SYSTEM_LOGICAL_PROCESSOR_INFORMATION_x; -- CXType_Elaborated
   type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION is access SYSTEM_LOGICAL_PROCESSOR_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_RELATIONSHIP_x is record
      Flags : BYTE;
      EfficiencyClass : BYTE;
      Reserved : Void;
      GroupCount : WORD;
      GroupMask : Void;
   end record;
   subtype PROCESSOR_RELATIONSHIP is PROCESSOR_RELATIONSHIP_x; -- CXType_Elaborated
   type PPROCESSOR_RELATIONSHIP is access PROCESSOR_RELATIONSHIP_x; -- CXType_Pointer - CXType_Elaborated
   type NUMA_NODE_RELATIONSHIP_x is record
      NodeNumber : DWORD;
      Reserved : Void;
      GroupMask : GROUP_AFFINITY;
   end record;
   subtype NUMA_NODE_RELATIONSHIP is NUMA_NODE_RELATIONSHIP_x; -- CXType_Elaborated
   type PNUMA_NODE_RELATIONSHIP is access NUMA_NODE_RELATIONSHIP_x; -- CXType_Pointer - CXType_Elaborated
   type CACHE_RELATIONSHIP_x is record
      Level : BYTE;
      Associativity : BYTE;
      LineSize : WORD;
      CacheSize : DWORD;
      type_x : PROCESSOR_CACHE_TYPE;
      Reserved : Void;
      GroupMask : GROUP_AFFINITY;
   end record;
   subtype CACHE_RELATIONSHIP is CACHE_RELATIONSHIP_x; -- CXType_Elaborated
   type PCACHE_RELATIONSHIP is access CACHE_RELATIONSHIP_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_GROUP_INFO_x is record
      MaximumProcessorCount : BYTE;
      ActiveProcessorCount : BYTE;
      Reserved : Void;
      ActiveProcessorMask : KAFFINITY;
   end record;
   subtype PROCESSOR_GROUP_INFO is PROCESSOR_GROUP_INFO_x; -- CXType_Elaborated
   type PPROCESSOR_GROUP_INFO is access PROCESSOR_GROUP_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type GROUP_RELATIONSHIP_x is record
      MaximumGroupCount : WORD;
      ActiveGroupCount : WORD;
      Reserved : Void;
      GroupInfo : Void;
   end record;
   subtype GROUP_RELATIONSHIP is GROUP_RELATIONSHIP_x; -- CXType_Elaborated
   type PGROUP_RELATIONSHIP is access GROUP_RELATIONSHIP_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX_x is record
      Relationship : LOGICAL_PROCESSOR_RELATIONSHIP;
      Size : DWORD;
   end record;
   subtype SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX is SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX_x; -- CXType_Elaborated
   type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX is access SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX_x; -- CXType_Pointer - CXType_Elaborated
   type CPU_SET_INFORMATION_TYPE_x is (
      CpuSetInformation
   );
   for CPU_SET_INFORMATION_TYPE_x use (
      CpuSetInformation => 0
   );
   for CPU_SET_INFORMATION_TYPE_x'Size use 32;
   subtype CPU_SET_INFORMATION_TYPE is CPU_SET_INFORMATION_TYPE_x; -- CXType_Elaborated
   type PCPU_SET_INFORMATION_TYPE is access CPU_SET_INFORMATION_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_CPU_SET_INFORMATION_x is record
      Size : DWORD;
      type_x : CPU_SET_INFORMATION_TYPE;
   end record;
   subtype SYSTEM_CPU_SET_INFORMATION is SYSTEM_CPU_SET_INFORMATION_x; -- CXType_Elaborated
   type PSYSTEM_CPU_SET_INFORMATION is access SYSTEM_CPU_SET_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION_x is record
      CycleTime : DWORD64;
   end record;
   subtype SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION is SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION_x; -- CXType_Elaborated
   type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION is access SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type XSTATE_FEATURE_x is record
      Offset : DWORD;
      Size : DWORD;
   end record;
   subtype XSTATE_FEATURE is XSTATE_FEATURE_x; -- CXType_Elaborated
   type PXSTATE_FEATURE is access XSTATE_FEATURE_x; -- CXType_Pointer - CXType_Elaborated
   type XSTATE_CONFIGURATION_x is record
      EnabledFeatures : DWORD64;
      EnabledVolatileFeatures : DWORD64;
      Size : DWORD;
      Features : Void;
      EnabledSupervisorFeatures : DWORD64;
      AlignedFeatures : DWORD64;
      AllFeatureSize : DWORD;
      AllFeatures : Void;
   end record;
   subtype XSTATE_CONFIGURATION is XSTATE_CONFIGURATION_x; -- CXType_Elaborated
   type PXSTATE_CONFIGURATION is access XSTATE_CONFIGURATION_x; -- CXType_Pointer - CXType_Elaborated
   type MEMORY_BASIC_INFORMATION_x is record
      BaseAddress : PVOID;
      AllocationBase : PVOID;
      AllocationProtect : DWORD;
      RegionSize : SIZE_T;
      State : DWORD;
      Protect : DWORD;
      type_x : DWORD;
   end record;
   subtype MEMORY_BASIC_INFORMATION is MEMORY_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PMEMORY_BASIC_INFORMATION is access MEMORY_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type MEMORY_BASIC_INFORMATION32_x is record
      BaseAddress : DWORD;
      AllocationBase : DWORD;
      AllocationProtect : DWORD;
      RegionSize : DWORD;
      State : DWORD;
      Protect : DWORD;
      type_x : DWORD;
   end record;
   subtype MEMORY_BASIC_INFORMATION32 is MEMORY_BASIC_INFORMATION32_x; -- CXType_Elaborated
   type PMEMORY_BASIC_INFORMATION32 is access MEMORY_BASIC_INFORMATION32_x; -- CXType_Pointer - CXType_Elaborated
   type MEMORY_BASIC_INFORMATION64_x is record
      BaseAddress : ULONGLONG;
      AllocationBase : ULONGLONG;
      AllocationProtect : DWORD;
      alignment1 : DWORD;
      RegionSize : ULONGLONG;
      State : DWORD;
      Protect : DWORD;
      type_x : DWORD;
      alignment2 : DWORD;
   end record;
   subtype MEMORY_BASIC_INFORMATION64 is MEMORY_BASIC_INFORMATION64_x; -- CXType_Elaborated
   type PMEMORY_BASIC_INFORMATION64 is access MEMORY_BASIC_INFORMATION64_x; -- CXType_Pointer - CXType_Elaborated
   type CFG_CALL_TARGET_INFO_x is record
      Offset : ULONG_PTR;
      Flags : ULONG_PTR;
   end record;
   subtype CFG_CALL_TARGET_INFO is CFG_CALL_TARGET_INFO_x; -- CXType_Elaborated
   type PCFG_CALL_TARGET_INFO is access CFG_CALL_TARGET_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type MEM_ADDRESS_REQUIREMENTS is record
      LowestStartingAddress : PVOID;
      HighestEndingAddress : PVOID;
      Alignment : SIZE_T;
   end record;
   type PMEM_ADDRESS_REQUIREMENTS is access MEM_ADDRESS_REQUIREMENTS; -- CXType_Pointer - CXType_Elaborated
   type MEM_EXTENDED_PARAMETER_TYPE is (
      MemExtendedParameterInvalidType,
      MemExtendedParameterAddressRequirements,
      MemExtendedParameterNumaNode,
      MemExtendedParameterPartitionHandle,
      MemExtendedParameterMax
   );
   for MEM_EXTENDED_PARAMETER_TYPE use (
      MemExtendedParameterInvalidType => 0,
      MemExtendedParameterAddressRequirements => 1,
      MemExtendedParameterNumaNode => 2,
      MemExtendedParameterPartitionHandle => 3,
      MemExtendedParameterMax => 4
   );
   for MEM_EXTENDED_PARAMETER_TYPE'Size use 32;
   type PMEM_EXTENDED_PARAMETER_TYPE is access MEM_EXTENDED_PARAMETER_TYPE; -- CXType_Pointer - CXType_Elaborated
   type MEM_EXTENDED_PARAMETER is null record;
   type PMEM_EXTENDED_PARAMETER is access MEM_EXTENDED_PARAMETER; -- CXType_Pointer - CXType_Elaborated
   type ENCLAVE_CREATE_INFO_SGX_x is record
      Secs : Void;
   end record;
   subtype ENCLAVE_CREATE_INFO_SGX is ENCLAVE_CREATE_INFO_SGX_x; -- CXType_Elaborated
   type PENCLAVE_CREATE_INFO_SGX is access ENCLAVE_CREATE_INFO_SGX_x; -- CXType_Pointer - CXType_Elaborated
   type ENCLAVE_INIT_INFO_SGX_x is record
      SigStruct : Void;
      Reserved1 : Void;
      EInitToken : Void;
      Reserved2 : Void;
   end record;
   subtype ENCLAVE_INIT_INFO_SGX is ENCLAVE_INIT_INFO_SGX_x; -- CXType_Elaborated
   type PENCLAVE_INIT_INFO_SGX is access ENCLAVE_INIT_INFO_SGX_x; -- CXType_Pointer - CXType_Elaborated
   type ENCLAVE_CREATE_INFO_VBS_x is record
      Flags : DWORD;
      OwnerID : Void;
   end record;
   subtype ENCLAVE_CREATE_INFO_VBS is ENCLAVE_CREATE_INFO_VBS_x; -- CXType_Elaborated
   type PENCLAVE_CREATE_INFO_VBS is access ENCLAVE_CREATE_INFO_VBS_x; -- CXType_Pointer - CXType_Elaborated
   type ENCLAVE_INIT_INFO_VBS_x is record
      Length : DWORD;
      ThreadCount : DWORD;
   end record;
   subtype ENCLAVE_INIT_INFO_VBS is ENCLAVE_INIT_INFO_VBS_x; -- CXType_Elaborated
   type PENCLAVE_INIT_INFO_VBS is access ENCLAVE_INIT_INFO_VBS_x; -- CXType_Pointer - CXType_Elaborated
   subtype ENCLAVE_TARGET_FUNCTION is System.Address; -- [FIXME - CXType_Unexposed]
   type PENCLAVE_TARGET_FUNCTION is access ENCLAVE_TARGET_FUNCTION; -- CXType_Pointer - CXType_Unexposed
   subtype LPENCLAVE_TARGET_FUNCTION is PENCLAVE_TARGET_FUNCTION; -- CXType_Typedef
   type FILE_ID_128_x is record
      Identifier : Void;
   end record;
   subtype FILE_ID_128 is FILE_ID_128_x; -- CXType_Elaborated
   type PFILE_ID_128 is access FILE_ID_128_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_NOTIFY_INFORMATION_x is record
      NextEntryOffset : DWORD;
      Action : DWORD;
      FileNameLength : DWORD;
      FileName : Void;
   end record;
   subtype FILE_NOTIFY_INFORMATION is FILE_NOTIFY_INFORMATION_x; -- CXType_Elaborated
   type PFILE_NOTIFY_INFORMATION is access FILE_NOTIFY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_NOTIFY_EXTENDED_INFORMATION_x is record
      NextEntryOffset : DWORD;
      Action : DWORD;
      CreationTime : LARGE_INTEGER;
      LastModificationTime : LARGE_INTEGER;
      LastChangeTime : LARGE_INTEGER;
      LastAccessTime : LARGE_INTEGER;
      AllocatedLength : LARGE_INTEGER;
      FileSize : LARGE_INTEGER;
      FileAttributes : DWORD;
      ReparsePointTag : DWORD;
      FileId : LARGE_INTEGER;
      ParentFileId : LARGE_INTEGER;
      FileNameLength : DWORD;
      FileName : Void;
   end record;
   subtype FILE_NOTIFY_EXTENDED_INFORMATION is FILE_NOTIFY_EXTENDED_INFORMATION_x; -- CXType_Elaborated
   type PFILE_NOTIFY_EXTENDED_INFORMATION is access FILE_NOTIFY_EXTENDED_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_SEGMENT_ELEMENT_x is null record; -- Union Placeholder [FIXME]
   subtype FILE_SEGMENT_ELEMENT is FILE_SEGMENT_ELEMENT_x; -- CXType_Elaborated
   type PFILE_SEGMENT_ELEMENT is access FILE_SEGMENT_ELEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type REPARSE_GUID_DATA_BUFFER_x is record
      ReparseTag : DWORD;
      ReparseDataLength : WORD;
      Reserved : WORD;
      ReparseGuid : GUID;
      GenericReparseBuffer : Void;
   end record;
   subtype REPARSE_GUID_DATA_BUFFER is REPARSE_GUID_DATA_BUFFER_x; -- CXType_Elaborated
   type PREPARSE_GUID_DATA_BUFFER is access REPARSE_GUID_DATA_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type SCRUB_DATA_INPUT_x is record
      Size : DWORD;
      Flags : DWORD;
      MaximumIos : DWORD;
      ObjectId_x : Void;
      Reserved : Void;
      ResumeContext : Void;
   end record;
   subtype SCRUB_DATA_INPUT is SCRUB_DATA_INPUT_x; -- CXType_Elaborated
   type PSCRUB_DATA_INPUT is access SCRUB_DATA_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SCRUB_PARITY_EXTENT_x is record
      Offset : LONGLONG;
      Length : ULONGLONG;
   end record;
   subtype SCRUB_PARITY_EXTENT is SCRUB_PARITY_EXTENT_x; -- CXType_Elaborated
   type PSCRUB_PARITY_EXTENT is access SCRUB_PARITY_EXTENT_x; -- CXType_Pointer - CXType_Elaborated
   type SCRUB_PARITY_EXTENT_DATA_x is record
      Size : WORD;
      Flags : WORD;
      NumberOfParityExtents : WORD;
      MaximumNumberOfParityExtents : WORD;
      ParityExtents : Void;
   end record;
   subtype SCRUB_PARITY_EXTENT_DATA is SCRUB_PARITY_EXTENT_DATA_x; -- CXType_Elaborated
   type PSCRUB_PARITY_EXTENT_DATA is access SCRUB_PARITY_EXTENT_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type SCRUB_DATA_OUTPUT_x is record
      Size : DWORD;
      Flags : DWORD;
      Status : DWORD;
      ErrorFileOffset : ULONGLONG;
      ErrorLength : ULONGLONG;
      NumberOfBytesRepaired : ULONGLONG;
      NumberOfBytesFailed : ULONGLONG;
      InternalFileReference : ULONGLONG;
      ResumeContextLength : WORD;
      ParityExtentDataOffset : WORD;
      Reserved : Void;
      ResumeContext : Void;
   end record;
   subtype SCRUB_DATA_OUTPUT is SCRUB_DATA_OUTPUT_x; -- CXType_Elaborated
   type PSCRUB_DATA_OUTPUT is access SCRUB_DATA_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SharedVirtualDiskSupportType_x is (
      SharedVirtualDisksUnsupported,
      SharedVirtualDisksSupported,
      SharedVirtualDiskSnapshotsSupported,
      SharedVirtualDiskCDPSnapshotsSupported
   );
   for SharedVirtualDiskSupportType_x use (
      SharedVirtualDisksUnsupported => 0,
      SharedVirtualDisksSupported => 1,
      SharedVirtualDiskSnapshotsSupported => 3,
      SharedVirtualDiskCDPSnapshotsSupported => 7
   );
   for SharedVirtualDiskSupportType_x'Size use 32;
   subtype SharedVirtualDiskSupportType is SharedVirtualDiskSupportType_x; -- CXType_Elaborated
   type SharedVirtualDiskHandleState_x is (
      SharedVirtualDiskHandleStateNone,
      SharedVirtualDiskHandleStateFileShared,
      SharedVirtualDiskHandleStateHandleShared
   );
   for SharedVirtualDiskHandleState_x use (
      SharedVirtualDiskHandleStateNone => 0,
      SharedVirtualDiskHandleStateFileShared => 1,
      SharedVirtualDiskHandleStateHandleShared => 3
   );
   for SharedVirtualDiskHandleState_x'Size use 32;
   subtype SharedVirtualDiskHandleState is SharedVirtualDiskHandleState_x; -- CXType_Elaborated
   type SHARED_VIRTUAL_DISK_SUPPORT_x is record
      SharedVirtualDiskSupport : SharedVirtualDiskSupportType;
      HandleState : SharedVirtualDiskHandleState;
   end record;
   subtype SHARED_VIRTUAL_DISK_SUPPORT is SHARED_VIRTUAL_DISK_SUPPORT_x; -- CXType_Elaborated
   type PSHARED_VIRTUAL_DISK_SUPPORT is access SHARED_VIRTUAL_DISK_SUPPORT_x; -- CXType_Pointer - CXType_Elaborated
   type NETWORK_APP_INSTANCE_EA_x is record
      AppInstanceID : GUID;
      CsvFlags : DWORD;
   end record;
   subtype NETWORK_APP_INSTANCE_EA is NETWORK_APP_INSTANCE_EA_x; -- CXType_Elaborated
   type PNETWORK_APP_INSTANCE_EA is access NETWORK_APP_INSTANCE_EA_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_POWER_STATE_x is (
      PowerSystemUnspecified,
      PowerSystemWorking,
      PowerSystemSleeping1,
      PowerSystemSleeping2,
      PowerSystemSleeping3,
      PowerSystemHibernate,
      PowerSystemShutdown,
      PowerSystemMaximum
   );
   for SYSTEM_POWER_STATE_x use (
      PowerSystemUnspecified => 0,
      PowerSystemWorking => 1,
      PowerSystemSleeping1 => 2,
      PowerSystemSleeping2 => 3,
      PowerSystemSleeping3 => 4,
      PowerSystemHibernate => 5,
      PowerSystemShutdown => 6,
      PowerSystemMaximum => 7
   );
   for SYSTEM_POWER_STATE_x'Size use 32;
   subtype SYSTEM_POWER_STATE is SYSTEM_POWER_STATE_x; -- CXType_Elaborated
   type PSYSTEM_POWER_STATE is access SYSTEM_POWER_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_ACTION is (
      PowerActionNone,
      PowerActionReserved,
      PowerActionSleep,
      PowerActionHibernate,
      PowerActionShutdown,
      PowerActionShutdownReset,
      PowerActionShutdownOff,
      PowerActionWarmEject,
      PowerActionDisplayOff
   );
   for POWER_ACTION use (
      PowerActionNone => 0,
      PowerActionReserved => 1,
      PowerActionSleep => 2,
      PowerActionHibernate => 3,
      PowerActionShutdown => 4,
      PowerActionShutdownReset => 5,
      PowerActionShutdownOff => 6,
      PowerActionWarmEject => 7,
      PowerActionDisplayOff => 8
   );
   for POWER_ACTION'Size use 32;
   type PPOWER_ACTION is access POWER_ACTION; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_POWER_STATE_x is (
      PowerDeviceUnspecified,
      PowerDeviceD0,
      PowerDeviceD1,
      PowerDeviceD2,
      PowerDeviceD3,
      PowerDeviceMaximum
   );
   for DEVICE_POWER_STATE_x use (
      PowerDeviceUnspecified => 0,
      PowerDeviceD0 => 1,
      PowerDeviceD1 => 2,
      PowerDeviceD2 => 3,
      PowerDeviceD3 => 4,
      PowerDeviceMaximum => 5
   );
   for DEVICE_POWER_STATE_x'Size use 32;
   subtype DEVICE_POWER_STATE is DEVICE_POWER_STATE_x; -- CXType_Elaborated
   type PDEVICE_POWER_STATE is access DEVICE_POWER_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type MONITOR_DISPLAY_STATE_x is (
      PowerMonitorOff,
      PowerMonitorOn,
      PowerMonitorDim
   );
   for MONITOR_DISPLAY_STATE_x use (
      PowerMonitorOff => 0,
      PowerMonitorOn => 1,
      PowerMonitorDim => 2
   );
   for MONITOR_DISPLAY_STATE_x'Size use 32;
   subtype MONITOR_DISPLAY_STATE is MONITOR_DISPLAY_STATE_x; -- CXType_Elaborated
   type PMONITOR_DISPLAY_STATE is access MONITOR_DISPLAY_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type USER_ACTIVITY_PRESENCE_x is (
      PowerUserPresent,
      PowerUserNotPresent,
      PowerUserInactive,
      PowerUserMaximum
   );
   for USER_ACTIVITY_PRESENCE_x use (
      PowerUserPresent => 0,
      PowerUserNotPresent => 1,
      PowerUserInactive => 2,
      PowerUserMaximum => 3
   );
   for USER_ACTIVITY_PRESENCE_x'Size use 32;
   subtype USER_ACTIVITY_PRESENCE is USER_ACTIVITY_PRESENCE_x; -- CXType_Elaborated
   type PUSER_ACTIVITY_PRESENCE is access USER_ACTIVITY_PRESENCE_x; -- CXType_Pointer - CXType_Elaborated
   subtype EXECUTION_STATE is DWORD; -- CXType_Typedef
   type PEXECUTION_STATE is access DWORD; -- CXType_Pointer - CXType_Typedef
   type LATENCY_TIME is (
      LT_DONT_CARE,
      LT_LOWEST_LATENCY
   );
   for LATENCY_TIME use (
      LT_DONT_CARE => 0,
      LT_LOWEST_LATENCY => 1
   );
   for LATENCY_TIME'Size use 32;
   type POWER_REQUEST_TYPE_x is (
      PowerRequestDisplayRequired,
      PowerRequestSystemRequired,
      PowerRequestAwayModeRequired,
      PowerRequestExecutionRequired
   );
   for POWER_REQUEST_TYPE_x use (
      PowerRequestDisplayRequired => 0,
      PowerRequestSystemRequired => 1,
      PowerRequestAwayModeRequired => 2,
      PowerRequestExecutionRequired => 3
   );
   for POWER_REQUEST_TYPE_x'Size use 32;
   subtype POWER_REQUEST_TYPE is POWER_REQUEST_TYPE_x; -- CXType_Elaborated
   type PPOWER_REQUEST_TYPE is access POWER_REQUEST_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type CM_Power_Data_s is record
      PD_Size : DWORD;
      PD_MostRecentPowerState : DEVICE_POWER_STATE;
      PD_Capabilities : DWORD;
      PD_D1Latency : DWORD;
      PD_D2Latency : DWORD;
      PD_D3Latency : DWORD;
      PD_PowerStateMapping : Void;
      PD_DeepestSystemWake : SYSTEM_POWER_STATE;
   end record;
   subtype CM_POWER_DATA is CM_Power_Data_s; -- CXType_Elaborated
   type PCM_POWER_DATA is access CM_Power_Data_s; -- CXType_Pointer - CXType_Elaborated
   type POWER_INFORMATION_LEVEL is (
      SystemPowerPolicyAc,
      SystemPowerPolicyDc,
      VerifySystemPolicyAc,
      VerifySystemPolicyDc,
      SystemPowerCapabilities,
      SystemBatteryState,
      SystemPowerStateHandler,
      ProcessorStateHandler,
      SystemPowerPolicyCurrent,
      AdministratorPowerPolicy,
      SystemReserveHiberFile,
      ProcessorInformation,
      SystemPowerInformation,
      ProcessorStateHandler2,
      LastWakeTime,
      LastSleepTime,
      SystemExecutionState,
      SystemPowerStateNotifyHandler,
      ProcessorPowerPolicyAc,
      ProcessorPowerPolicyDc,
      VerifyProcessorPowerPolicyAc,
      VerifyProcessorPowerPolicyDc,
      ProcessorPowerPolicyCurrent,
      SystemPowerStateLogging,
      SystemPowerLoggingEntry,
      SetPowerSettingValue,
      NotifyUserPowerSetting,
      PowerInformationLevelUnused0,
      SystemMonitorHiberBootPowerOff,
      SystemVideoState,
      TraceApplicationPowerMessage,
      TraceApplicationPowerMessageEnd,
      ProcessorPerfStates,
      ProcessorIdleStates,
      ProcessorCap,
      SystemWakeSource,
      SystemHiberFileInformation,
      TraceServicePowerMessage,
      ProcessorLoad,
      PowerShutdownNotification,
      MonitorCapabilities,
      SessionPowerInit,
      SessionDisplayState,
      PowerRequestCreate,
      PowerRequestAction,
      GetPowerRequestList,
      ProcessorInformationEx,
      NotifyUserModeLegacyPowerEvent,
      GroupPark,
      ProcessorIdleDomains,
      WakeTimerList,
      SystemHiberFileSize,
      ProcessorIdleStatesHv,
      ProcessorPerfStatesHv,
      ProcessorPerfCapHv,
      ProcessorSetIdle,
      LogicalProcessorIdling,
      UserPresence,
      PowerSettingNotificationName,
      GetPowerSettingValue,
      IdleResiliency,
      SessionRITState,
      SessionConnectNotification,
      SessionPowerCleanup,
      SessionLockState,
      SystemHiberbootState,
      PlatformInformation,
      PdcInvocation,
      MonitorInvocation,
      FirmwareTableInformationRegistered,
      SetShutdownSelectedTime,
      SuspendResumeInvocation,
      PlmPowerRequestCreate,
      ScreenOff,
      CsDeviceNotification,
      PlatformRole,
      LastResumePerformance,
      DisplayBurst,
      ExitLatencySamplingPercentage,
      RegisterSpmPowerSettings,
      PlatformIdleStates,
      ProcessorIdleVeto,
      PlatformIdleVeto,
      SystemBatteryStatePrecise,
      ThermalEvent,
      PowerRequestActionInternal,
      BatteryDeviceState,
      PowerInformationInternal,
      ThermalStandby,
      SystemHiberFileType,
      PhysicalPowerButtonPress,
      QueryPotentialDripsConstraint,
      EnergyTrackerCreate,
      EnergyTrackerQuery,
      UpdateBlackBoxRecorder,
      PowerInformationLevelMaximum
   );
   for POWER_INFORMATION_LEVEL use (
      SystemPowerPolicyAc => 0,
      SystemPowerPolicyDc => 1,
      VerifySystemPolicyAc => 2,
      VerifySystemPolicyDc => 3,
      SystemPowerCapabilities => 4,
      SystemBatteryState => 5,
      SystemPowerStateHandler => 6,
      ProcessorStateHandler => 7,
      SystemPowerPolicyCurrent => 8,
      AdministratorPowerPolicy => 9,
      SystemReserveHiberFile => 10,
      ProcessorInformation => 11,
      SystemPowerInformation => 12,
      ProcessorStateHandler2 => 13,
      LastWakeTime => 14,
      LastSleepTime => 15,
      SystemExecutionState => 16,
      SystemPowerStateNotifyHandler => 17,
      ProcessorPowerPolicyAc => 18,
      ProcessorPowerPolicyDc => 19,
      VerifyProcessorPowerPolicyAc => 20,
      VerifyProcessorPowerPolicyDc => 21,
      ProcessorPowerPolicyCurrent => 22,
      SystemPowerStateLogging => 23,
      SystemPowerLoggingEntry => 24,
      SetPowerSettingValue => 25,
      NotifyUserPowerSetting => 26,
      PowerInformationLevelUnused0 => 27,
      SystemMonitorHiberBootPowerOff => 28,
      SystemVideoState => 29,
      TraceApplicationPowerMessage => 30,
      TraceApplicationPowerMessageEnd => 31,
      ProcessorPerfStates => 32,
      ProcessorIdleStates => 33,
      ProcessorCap => 34,
      SystemWakeSource => 35,
      SystemHiberFileInformation => 36,
      TraceServicePowerMessage => 37,
      ProcessorLoad => 38,
      PowerShutdownNotification => 39,
      MonitorCapabilities => 40,
      SessionPowerInit => 41,
      SessionDisplayState => 42,
      PowerRequestCreate => 43,
      PowerRequestAction => 44,
      GetPowerRequestList => 45,
      ProcessorInformationEx => 46,
      NotifyUserModeLegacyPowerEvent => 47,
      GroupPark => 48,
      ProcessorIdleDomains => 49,
      WakeTimerList => 50,
      SystemHiberFileSize => 51,
      ProcessorIdleStatesHv => 52,
      ProcessorPerfStatesHv => 53,
      ProcessorPerfCapHv => 54,
      ProcessorSetIdle => 55,
      LogicalProcessorIdling => 56,
      UserPresence => 57,
      PowerSettingNotificationName => 58,
      GetPowerSettingValue => 59,
      IdleResiliency => 60,
      SessionRITState => 61,
      SessionConnectNotification => 62,
      SessionPowerCleanup => 63,
      SessionLockState => 64,
      SystemHiberbootState => 65,
      PlatformInformation => 66,
      PdcInvocation => 67,
      MonitorInvocation => 68,
      FirmwareTableInformationRegistered => 69,
      SetShutdownSelectedTime => 70,
      SuspendResumeInvocation => 71,
      PlmPowerRequestCreate => 72,
      ScreenOff => 73,
      CsDeviceNotification => 74,
      PlatformRole => 75,
      LastResumePerformance => 76,
      DisplayBurst => 77,
      ExitLatencySamplingPercentage => 78,
      RegisterSpmPowerSettings => 79,
      PlatformIdleStates => 80,
      ProcessorIdleVeto => 81,
      PlatformIdleVeto => 82,
      SystemBatteryStatePrecise => 83,
      ThermalEvent => 84,
      PowerRequestActionInternal => 85,
      BatteryDeviceState => 86,
      PowerInformationInternal => 87,
      ThermalStandby => 88,
      SystemHiberFileType => 89,
      PhysicalPowerButtonPress => 90,
      QueryPotentialDripsConstraint => 91,
      EnergyTrackerCreate => 92,
      EnergyTrackerQuery => 93,
      UpdateBlackBoxRecorder => 94,
      PowerInformationLevelMaximum => 95
   );
   for POWER_INFORMATION_LEVEL'Size use 32;
   type POWER_USER_PRESENCE_TYPE is (
      UserNotPresent,
      UserPresent,
      UserUnknown
   );
   for POWER_USER_PRESENCE_TYPE use (
      UserNotPresent => 0,
      UserPresent => 1,
      UserUnknown => 255
   );
   for POWER_USER_PRESENCE_TYPE'Size use 32;
   type PPOWER_USER_PRESENCE_TYPE is access POWER_USER_PRESENCE_TYPE; -- CXType_Pointer - CXType_Elaborated
   type POWER_USER_PRESENCE_x is record
      UserPresence : POWER_USER_PRESENCE_TYPE;
   end record;
   subtype POWER_USER_PRESENCE is POWER_USER_PRESENCE_x; -- CXType_Elaborated
   type PPOWER_USER_PRESENCE is access POWER_USER_PRESENCE_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_SESSION_CONNECT_x is record
      Connected : BOOLEAN;
      Console : BOOLEAN;
   end record;
   subtype POWER_SESSION_CONNECT is POWER_SESSION_CONNECT_x; -- CXType_Elaborated
   type PPOWER_SESSION_CONNECT is access POWER_SESSION_CONNECT_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_SESSION_TIMEOUTS_x is record
      InputTimeout : DWORD;
      DisplayTimeout : DWORD;
   end record;
   subtype POWER_SESSION_TIMEOUTS is POWER_SESSION_TIMEOUTS_x; -- CXType_Elaborated
   type PPOWER_SESSION_TIMEOUTS is access POWER_SESSION_TIMEOUTS_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_SESSION_RIT_STATE_x is record
      Active : BOOLEAN;
      LastInputTime : DWORD;
   end record;
   subtype POWER_SESSION_RIT_STATE is POWER_SESSION_RIT_STATE_x; -- CXType_Elaborated
   type PPOWER_SESSION_RIT_STATE is access POWER_SESSION_RIT_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_SESSION_WINLOGON_x is record
      SessionId : DWORD;
      Console : BOOLEAN;
      Locked : BOOLEAN;
   end record;
   subtype POWER_SESSION_WINLOGON is POWER_SESSION_WINLOGON_x; -- CXType_Elaborated
   type PPOWER_SESSION_WINLOGON is access POWER_SESSION_WINLOGON_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_IDLE_RESILIENCY_x is record
      CoalescingTimeout : DWORD;
      IdleResiliencyPeriod : DWORD;
   end record;
   subtype POWER_IDLE_RESILIENCY is POWER_IDLE_RESILIENCY_x; -- CXType_Elaborated
   type PPOWER_IDLE_RESILIENCY is access POWER_IDLE_RESILIENCY_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_MONITOR_REQUEST_REASON is (
      MonitorRequestReasonUnknown,
      MonitorRequestReasonPowerButton,
      MonitorRequestReasonRemoteConnection,
      MonitorRequestReasonScMonitorpower,
      MonitorRequestReasonUserInput,
      MonitorRequestReasonAcDcDisplayBurst,
      MonitorRequestReasonUserDisplayBurst,
      MonitorRequestReasonPoSetSystemState,
      MonitorRequestReasonSetThreadExecutionState,
      MonitorRequestReasonFullWake,
      MonitorRequestReasonSessionUnlock,
      MonitorRequestReasonScreenOffRequest,
      MonitorRequestReasonIdleTimeout,
      MonitorRequestReasonPolicyChange,
      MonitorRequestReasonSleepButton,
      MonitorRequestReasonLid,
      MonitorRequestReasonBatteryCountChange,
      MonitorRequestReasonGracePeriod,
      MonitorRequestReasonPnP,
      MonitorRequestReasonDP,
      MonitorRequestReasonSxTransition,
      MonitorRequestReasonSystemIdle,
      MonitorRequestReasonNearProximity,
      MonitorRequestReasonThermalStandby,
      MonitorRequestReasonResumePdc,
      MonitorRequestReasonResumeS4,
      MonitorRequestReasonTerminal,
      MonitorRequestReasonPdcSignal,
      MonitorRequestReasonAcDcDisplayBurstSuppressed,
      MonitorRequestReasonSystemStateEntered,
      MonitorRequestReasonWinrt,
      MonitorRequestReasonUserInputKeyboard,
      MonitorRequestReasonUserInputMouse,
      MonitorRequestReasonUserInputTouch,
      MonitorRequestReasonUserInputPen,
      MonitorRequestReasonUserInputAccelerometer,
      MonitorRequestReasonUserInputHid,
      MonitorRequestReasonUserInputPoUserPresent,
      MonitorRequestReasonUserInputSessionSwitch,
      MonitorRequestReasonUserInputInitialization,
      MonitorRequestReasonPdcSignalWindowsMobilePwrNotif,
      MonitorRequestReasonPdcSignalWindowsMobileShell,
      MonitorRequestReasonPdcSignalHeyCortana,
      MonitorRequestReasonPdcSignalHolographicShell,
      MonitorRequestReasonPdcSignalFingerprint,
      MonitorRequestReasonMax
   );
   for POWER_MONITOR_REQUEST_REASON use (
      MonitorRequestReasonUnknown => 0,
      MonitorRequestReasonPowerButton => 1,
      MonitorRequestReasonRemoteConnection => 2,
      MonitorRequestReasonScMonitorpower => 3,
      MonitorRequestReasonUserInput => 4,
      MonitorRequestReasonAcDcDisplayBurst => 5,
      MonitorRequestReasonUserDisplayBurst => 6,
      MonitorRequestReasonPoSetSystemState => 7,
      MonitorRequestReasonSetThreadExecutionState => 8,
      MonitorRequestReasonFullWake => 9,
      MonitorRequestReasonSessionUnlock => 10,
      MonitorRequestReasonScreenOffRequest => 11,
      MonitorRequestReasonIdleTimeout => 12,
      MonitorRequestReasonPolicyChange => 13,
      MonitorRequestReasonSleepButton => 14,
      MonitorRequestReasonLid => 15,
      MonitorRequestReasonBatteryCountChange => 16,
      MonitorRequestReasonGracePeriod => 17,
      MonitorRequestReasonPnP => 18,
      MonitorRequestReasonDP => 19,
      MonitorRequestReasonSxTransition => 20,
      MonitorRequestReasonSystemIdle => 21,
      MonitorRequestReasonNearProximity => 22,
      MonitorRequestReasonThermalStandby => 23,
      MonitorRequestReasonResumePdc => 24,
      MonitorRequestReasonResumeS4 => 25,
      MonitorRequestReasonTerminal => 26,
      MonitorRequestReasonPdcSignal => 27,
      MonitorRequestReasonAcDcDisplayBurstSuppressed => 28,
      MonitorRequestReasonSystemStateEntered => 29,
      MonitorRequestReasonWinrt => 30,
      MonitorRequestReasonUserInputKeyboard => 31,
      MonitorRequestReasonUserInputMouse => 32,
      MonitorRequestReasonUserInputTouch => 33,
      MonitorRequestReasonUserInputPen => 34,
      MonitorRequestReasonUserInputAccelerometer => 35,
      MonitorRequestReasonUserInputHid => 36,
      MonitorRequestReasonUserInputPoUserPresent => 37,
      MonitorRequestReasonUserInputSessionSwitch => 38,
      MonitorRequestReasonUserInputInitialization => 39,
      MonitorRequestReasonPdcSignalWindowsMobilePwrNotif => 40,
      MonitorRequestReasonPdcSignalWindowsMobileShell => 41,
      MonitorRequestReasonPdcSignalHeyCortana => 42,
      MonitorRequestReasonPdcSignalHolographicShell => 43,
      MonitorRequestReasonPdcSignalFingerprint => 44,
      MonitorRequestReasonMax => 45
   );
   for POWER_MONITOR_REQUEST_REASON'Size use 32;
   type POWER_MONITOR_REQUEST_TYPE_x is (
      MonitorRequestTypeOff,
      MonitorRequestTypeOnAndPresent,
      MonitorRequestTypeToggleOn
   );
   for POWER_MONITOR_REQUEST_TYPE_x use (
      MonitorRequestTypeOff => 0,
      MonitorRequestTypeOnAndPresent => 1,
      MonitorRequestTypeToggleOn => 2
   );
   for POWER_MONITOR_REQUEST_TYPE_x'Size use 32;
   subtype POWER_MONITOR_REQUEST_TYPE is POWER_MONITOR_REQUEST_TYPE_x; -- CXType_Elaborated
   type POWER_MONITOR_INVOCATION_x is record
      Console : BOOLEAN;
      RequestReason : POWER_MONITOR_REQUEST_REASON;
   end record;
   subtype POWER_MONITOR_INVOCATION is POWER_MONITOR_INVOCATION_x; -- CXType_Elaborated
   type PPOWER_MONITOR_INVOCATION is access POWER_MONITOR_INVOCATION_x; -- CXType_Pointer - CXType_Elaborated
   type RESUME_PERFORMANCE_x is record
      PostTimeMs : DWORD;
      TotalResumeTimeMs : ULONGLONG;
      ResumeCompleteTimestamp : ULONGLONG;
   end record;
   subtype RESUME_PERFORMANCE is RESUME_PERFORMANCE_x; -- CXType_Elaborated
   type PRESUME_PERFORMANCE is access RESUME_PERFORMANCE_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_POWER_CONDITION is (
      PoAc,
      PoDc,
      PoHot,
      PoConditionMaximum
   );
   for SYSTEM_POWER_CONDITION use (
      PoAc => 0,
      PoDc => 1,
      PoHot => 2,
      PoConditionMaximum => 3
   );
   for SYSTEM_POWER_CONDITION'Size use 32;
   type SET_POWER_SETTING_VALUE is record
      Version : DWORD;
      Guid_x : GUID;
      PowerCondition : SYSTEM_POWER_CONDITION;
      DataLength : DWORD;
      Data : Void;
   end record;
   type PSET_POWER_SETTING_VALUE is access SET_POWER_SETTING_VALUE; -- CXType_Pointer - CXType_Elaborated
   type NOTIFY_USER_POWER_SETTING is record
      Guid_x : GUID;
   end record;
   type PNOTIFY_USER_POWER_SETTING is access NOTIFY_USER_POWER_SETTING; -- CXType_Pointer - CXType_Elaborated
   type APPLICATIONLAUNCH_SETTING_VALUE_x is record
      ActivationTime : LARGE_INTEGER;
      Flags : DWORD;
      ButtonInstanceID : DWORD;
   end record;
   subtype APPLICATIONLAUNCH_SETTING_VALUE is APPLICATIONLAUNCH_SETTING_VALUE_x; -- CXType_Elaborated
   type PAPPLICATIONLAUNCH_SETTING_VALUE is access APPLICATIONLAUNCH_SETTING_VALUE_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_PLATFORM_ROLE_x is (
      PlatformRoleUnspecified,
      PlatformRoleDesktop,
      PlatformRoleMobile,
      PlatformRoleWorkstation,
      PlatformRoleEnterpriseServer,
      PlatformRoleSOHOServer,
      PlatformRoleAppliancePC,
      PlatformRolePerformanceServer,
      PlatformRoleSlate,
      PlatformRoleMaximum
   );
   for POWER_PLATFORM_ROLE_x use (
      PlatformRoleUnspecified => 0,
      PlatformRoleDesktop => 1,
      PlatformRoleMobile => 2,
      PlatformRoleWorkstation => 3,
      PlatformRoleEnterpriseServer => 4,
      PlatformRoleSOHOServer => 5,
      PlatformRoleAppliancePC => 6,
      PlatformRolePerformanceServer => 7,
      PlatformRoleSlate => 8,
      PlatformRoleMaximum => 9
   );
   for POWER_PLATFORM_ROLE_x'Size use 32;
   subtype POWER_PLATFORM_ROLE is POWER_PLATFORM_ROLE_x; -- CXType_Elaborated
   type PPOWER_PLATFORM_ROLE is access POWER_PLATFORM_ROLE_x; -- CXType_Pointer - CXType_Elaborated
   type POWER_PLATFORM_INFORMATION_x is record
      AoAc : BOOLEAN;
   end record;
   subtype POWER_PLATFORM_INFORMATION is POWER_PLATFORM_INFORMATION_x; -- CXType_Elaborated
   type PPOWER_PLATFORM_INFORMATION is access POWER_PLATFORM_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type BATTERY_REPORTING_SCALE is record
      Granularity : DWORD;
      Capacity : DWORD;
   end record;
   type PBATTERY_REPORTING_SCALE is access BATTERY_REPORTING_SCALE; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_LEGACY_PERFSTATE is record
      Frequency : DWORD;
      Flags : DWORD;
      PercentFrequency : DWORD;
   end record;
   type PPPM_WMI_LEGACY_PERFSTATE is access PPM_WMI_LEGACY_PERFSTATE; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_IDLE_STATE is record
      Latency : DWORD;
      Power : DWORD;
      TimeCheck : DWORD;
      PromotePercent : BYTE;
      DemotePercent : BYTE;
      StateType : BYTE;
      Reserved : BYTE;
      StateFlags : DWORD;
      Context_x : DWORD;
      IdleHandler : DWORD;
      Reserved1 : DWORD;
   end record;
   type PPPM_WMI_IDLE_STATE is access PPM_WMI_IDLE_STATE; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_IDLE_STATES is record
      type_x : DWORD;
      Count : DWORD;
      TargetState : DWORD;
      OldState : DWORD;
      TargetProcessors : DWORD64;
      State : Void;
   end record;
   type PPPM_WMI_IDLE_STATES is access PPM_WMI_IDLE_STATES; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_IDLE_STATES_EX is record
      type_x : DWORD;
      Count : DWORD;
      TargetState : DWORD;
      OldState : DWORD;
      TargetProcessors : PVOID;
      State : Void;
   end record;
   type PPPM_WMI_IDLE_STATES_EX is access PPM_WMI_IDLE_STATES_EX; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_PERF_STATE is record
      Frequency : DWORD;
      Power : DWORD;
      PercentFrequency : BYTE;
      IncreaseLevel : BYTE;
      DecreaseLevel : BYTE;
      type_x : BYTE;
      IncreaseTime : DWORD;
      DecreaseTime : DWORD;
      Control : DWORD64;
      Status : DWORD64;
      HitCount : DWORD;
      Reserved1 : DWORD;
      Reserved2 : DWORD64;
      Reserved3 : DWORD64;
   end record;
   type PPPM_WMI_PERF_STATE is access PPM_WMI_PERF_STATE; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_PERF_STATES is record
      Count : DWORD;
      MaxFrequency : DWORD;
      CurrentState : DWORD;
      MaxPerfState : DWORD;
      MinPerfState : DWORD;
      LowestPerfState : DWORD;
      ThermalConstraint : DWORD;
      BusyAdjThreshold : BYTE;
      PolicyType : BYTE;
      type_x : BYTE;
      Reserved : BYTE;
      TimerInterval : DWORD;
      TargetProcessors : DWORD64;
      PStateHandler : DWORD;
      PStateContext : DWORD;
      TStateHandler : DWORD;
      TStateContext : DWORD;
      FeedbackHandler : DWORD;
      Reserved1 : DWORD;
      Reserved2 : DWORD64;
      State : Void;
   end record;
   type PPPM_WMI_PERF_STATES is access PPM_WMI_PERF_STATES; -- CXType_Pointer - CXType_Elaborated
   type PPM_WMI_PERF_STATES_EX is record
      Count : DWORD;
      MaxFrequency : DWORD;
      CurrentState : DWORD;
      MaxPerfState : DWORD;
      MinPerfState : DWORD;
      LowestPerfState : DWORD;
      ThermalConstraint : DWORD;
      BusyAdjThreshold : BYTE;
      PolicyType : BYTE;
      type_x : BYTE;
      Reserved : BYTE;
      TimerInterval : DWORD;
      TargetProcessors : PVOID;
      PStateHandler : DWORD;
      PStateContext : DWORD;
      TStateHandler : DWORD;
      TStateContext : DWORD;
      FeedbackHandler : DWORD;
      Reserved1 : DWORD;
      Reserved2 : DWORD64;
      State : Void;
   end record;
   type PPPM_WMI_PERF_STATES_EX is access PPM_WMI_PERF_STATES_EX; -- CXType_Pointer - CXType_Elaborated
   type PPM_IDLE_STATE_ACCOUNTING is record
      IdleTransitions : DWORD;
      FailedTransitions : DWORD;
      InvalidBucketIndex : DWORD;
      TotalTime : DWORD64;
      IdleTimeBuckets : Void;
   end record;
   type PPPM_IDLE_STATE_ACCOUNTING is access PPM_IDLE_STATE_ACCOUNTING; -- CXType_Pointer - CXType_Elaborated
   type PPM_IDLE_ACCOUNTING is record
      StateCount : DWORD;
      TotalTransitions : DWORD;
      ResetCount : DWORD;
      StartTime : DWORD64;
      State : Void;
   end record;
   type PPPM_IDLE_ACCOUNTING is access PPM_IDLE_ACCOUNTING; -- CXType_Pointer - CXType_Elaborated
   type PPM_IDLE_STATE_BUCKET_EX is record
      TotalTimeUs : DWORD64;
      MinTimeUs : DWORD;
      MaxTimeUs : DWORD;
      Count : DWORD;
   end record;
   type PPPM_IDLE_STATE_BUCKET_EX is access PPM_IDLE_STATE_BUCKET_EX; -- CXType_Pointer - CXType_Elaborated
   type PPM_IDLE_STATE_ACCOUNTING_EX is record
      TotalTime : DWORD64;
      IdleTransitions : DWORD;
      FailedTransitions : DWORD;
      InvalidBucketIndex : DWORD;
      MinTimeUs : DWORD;
      MaxTimeUs : DWORD;
      CancelledTransitions : DWORD;
      IdleTimeBuckets : Void;
   end record;
   type PPPM_IDLE_STATE_ACCOUNTING_EX is access PPM_IDLE_STATE_ACCOUNTING_EX; -- CXType_Pointer - CXType_Elaborated
   type PPM_IDLE_ACCOUNTING_EX is record
      StateCount : DWORD;
      TotalTransitions : DWORD;
      ResetCount : DWORD;
      AbortCount : DWORD;
      StartTime : DWORD64;
      State : Void;
   end record;
   type PPPM_IDLE_ACCOUNTING_EX is access PPM_IDLE_ACCOUNTING_EX; -- CXType_Pointer - CXType_Elaborated
   type PPM_PERFSTATE_EVENT is record
      State : DWORD;
      Status : DWORD;
      Latency : DWORD;
      Speed : DWORD;
      Processor : DWORD;
   end record;
   type PPPM_PERFSTATE_EVENT is access PPM_PERFSTATE_EVENT; -- CXType_Pointer - CXType_Elaborated
   type PPM_PERFSTATE_DOMAIN_EVENT is record
      State : DWORD;
      Latency : DWORD;
      Speed : DWORD;
      Processors : DWORD64;
   end record;
   type PPPM_PERFSTATE_DOMAIN_EVENT is access PPM_PERFSTATE_DOMAIN_EVENT; -- CXType_Pointer - CXType_Elaborated
   type PPM_IDLESTATE_EVENT is record
      NewState : DWORD;
      OldState : DWORD;
      Processors : DWORD64;
   end record;
   type PPPM_IDLESTATE_EVENT is access PPM_IDLESTATE_EVENT; -- CXType_Pointer - CXType_Elaborated
   type PPM_THERMALCHANGE_EVENT is record
      ThermalConstraint : DWORD;
      Processors : DWORD64;
   end record;
   type PPPM_THERMALCHANGE_EVENT is access PPM_THERMALCHANGE_EVENT; -- CXType_Pointer - CXType_Elaborated
   type PPM_THERMAL_POLICY_EVENT is record
      Mode : BYTE;
      Processors : DWORD64;
   end record;
   type PPPM_THERMAL_POLICY_EVENT is access PPM_THERMAL_POLICY_EVENT; -- CXType_Pointer - CXType_Elaborated
   type POWER_ACTION_POLICY is record
      Action : POWER_ACTION;
      Flags : DWORD;
      EventCode : DWORD;
   end record;
   type PPOWER_ACTION_POLICY is access POWER_ACTION_POLICY; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_POWER_LEVEL is record
      Enable : BOOLEAN;
      Spare : Void;
      BatteryLevel : DWORD;
      PowerPolicy : POWER_ACTION_POLICY;
      MinSystemState : SYSTEM_POWER_STATE;
   end record;
   type PSYSTEM_POWER_LEVEL is access SYSTEM_POWER_LEVEL; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_POWER_POLICY_x is record
      Revision : DWORD;
      PowerButton : POWER_ACTION_POLICY;
      SleepButton : POWER_ACTION_POLICY;
      LidClose : POWER_ACTION_POLICY;
      LidOpenWake : SYSTEM_POWER_STATE;
      Reserved : DWORD;
      Idle : POWER_ACTION_POLICY;
      IdleTimeout : DWORD;
      IdleSensitivity : BYTE;
      DynamicThrottle : BYTE;
      Spare2 : Void;
      MinSleep : SYSTEM_POWER_STATE;
      MaxSleep : SYSTEM_POWER_STATE;
      ReducedLatencySleep : SYSTEM_POWER_STATE;
      WinLogonFlags : DWORD;
      Spare3 : DWORD;
      DozeS4Timeout : DWORD;
      BroadcastCapacityResolution : DWORD;
      DischargePolicy : Void;
      VideoTimeout : DWORD;
      VideoDimDisplay : BOOLEAN;
      VideoReserved : Void;
      SpindownTimeout : DWORD;
      OptimizeForPower : BOOLEAN;
      FanThrottleTolerance : BYTE;
      ForcedThrottle : BYTE;
      MinThrottle : BYTE;
      OverThrottled : POWER_ACTION_POLICY;
   end record;
   subtype SYSTEM_POWER_POLICY is SYSTEM_POWER_POLICY_x; -- CXType_Elaborated
   type PSYSTEM_POWER_POLICY is access SYSTEM_POWER_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_IDLESTATE_INFO is record
      TimeCheck : DWORD;
      DemotePercent : BYTE;
      PromotePercent : BYTE;
      Spare : Void;
   end record;
   type PPROCESSOR_IDLESTATE_INFO is access PROCESSOR_IDLESTATE_INFO; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_IDLESTATE_POLICY is record
      Revision : WORD;
      Flags : Void;
      PolicyCount : DWORD;
      Policy : Void;
   end record;
   type PPROCESSOR_IDLESTATE_POLICY is access PROCESSOR_IDLESTATE_POLICY; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_POWER_POLICY_INFO_x is record
      TimeCheck : DWORD;
      DemoteLimit : DWORD;
      PromoteLimit : DWORD;
      DemotePercent : BYTE;
      PromotePercent : BYTE;
      Spare : Void;
      AllowDemotion : DWORD;
      AllowPromotion : DWORD;
      Reserved : DWORD;
   end record;
   subtype PROCESSOR_POWER_POLICY_INFO is PROCESSOR_POWER_POLICY_INFO_x; -- CXType_Elaborated
   type PPROCESSOR_POWER_POLICY_INFO is access PROCESSOR_POWER_POLICY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_POWER_POLICY_x is record
      Revision : DWORD;
      DynamicThrottle : BYTE;
      Spare : Void;
      DisableCStates : DWORD;
      Reserved : DWORD;
      PolicyCount : DWORD;
      Policy : Void;
   end record;
   subtype PROCESSOR_POWER_POLICY is PROCESSOR_POWER_POLICY_x; -- CXType_Elaborated
   type PPROCESSOR_POWER_POLICY is access PROCESSOR_POWER_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESSOR_PERFSTATE_POLICY is record
      Revision : DWORD;
      MaxThrottle : BYTE;
      MinThrottle : BYTE;
      BusyAdjThreshold : BYTE;
      TimeCheck : DWORD;
      IncreaseTime : DWORD;
      DecreaseTime : DWORD;
      IncreasePercent : DWORD;
      DecreasePercent : DWORD;
   end record;
   type PPROCESSOR_PERFSTATE_POLICY is access PROCESSOR_PERFSTATE_POLICY; -- CXType_Pointer - CXType_Elaborated
   type ADMINISTRATOR_POWER_POLICY_x is record
      MinSleep : SYSTEM_POWER_STATE;
      MaxSleep : SYSTEM_POWER_STATE;
      MinVideoTimeout : DWORD;
      MaxVideoTimeout : DWORD;
      MinSpindownTimeout : DWORD;
      MaxSpindownTimeout : DWORD;
   end record;
   subtype ADMINISTRATOR_POWER_POLICY is ADMINISTRATOR_POWER_POLICY_x; -- CXType_Elaborated
   type PADMINISTRATOR_POWER_POLICY is access ADMINISTRATOR_POWER_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   type HIBERFILE_BUCKET_SIZE_x is (
      HiberFileBucket1GB,
      HiberFileBucket2GB,
      HiberFileBucket4GB,
      HiberFileBucket8GB,
      HiberFileBucket16GB,
      HiberFileBucket32GB,
      HiberFileBucketUnlimited,
      HiberFileBucketMax
   );
   for HIBERFILE_BUCKET_SIZE_x use (
      HiberFileBucket1GB => 0,
      HiberFileBucket2GB => 1,
      HiberFileBucket4GB => 2,
      HiberFileBucket8GB => 3,
      HiberFileBucket16GB => 4,
      HiberFileBucket32GB => 5,
      HiberFileBucketUnlimited => 6,
      HiberFileBucketMax => 7
   );
   for HIBERFILE_BUCKET_SIZE_x'Size use 32;
   subtype HIBERFILE_BUCKET_SIZE is HIBERFILE_BUCKET_SIZE_x; -- CXType_Elaborated
   type PHIBERFILE_BUCKET_SIZE is access HIBERFILE_BUCKET_SIZE_x; -- CXType_Pointer - CXType_Elaborated
   type HIBERFILE_BUCKET_x is record
      MaxPhysicalMemory : DWORD64;
      PhysicalMemoryPercent : Void;
   end record;
   subtype HIBERFILE_BUCKET is HIBERFILE_BUCKET_x; -- CXType_Elaborated
   type PHIBERFILE_BUCKET is access HIBERFILE_BUCKET_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_POWER_CAPABILITIES is record
      PowerButtonPresent : BOOLEAN;
      SleepButtonPresent : BOOLEAN;
      LidPresent : BOOLEAN;
      SystemS1 : BOOLEAN;
      SystemS2 : BOOLEAN;
      SystemS3 : BOOLEAN;
      SystemS4 : BOOLEAN;
      SystemS5 : BOOLEAN;
      HiberFilePresent : BOOLEAN;
      FullWake : BOOLEAN;
      VideoDimPresent : BOOLEAN;
      ApmPresent : BOOLEAN;
      UpsPresent : BOOLEAN;
      ThermalControl : BOOLEAN;
      ProcessorThrottle : BOOLEAN;
      ProcessorMinThrottle : BYTE;
      ProcessorMaxThrottle : BYTE;
      FastSystemS4 : BOOLEAN;
      Hiberboot : BOOLEAN;
      WakeAlarmPresent : BOOLEAN;
      AoAc : BOOLEAN;
      DiskSpinDown : BOOLEAN;
      HiberFileType : BYTE;
      AoAcConnectivitySupported : BOOLEAN;
      spare3 : Void;
      SystemBatteriesPresent : BOOLEAN;
      BatteriesAreShortTerm : BOOLEAN;
      BatteryScale : Void;
      AcOnLineWake : SYSTEM_POWER_STATE;
      SoftLidWake : SYSTEM_POWER_STATE;
      RtcWake : SYSTEM_POWER_STATE;
      MinDeviceWakeState : SYSTEM_POWER_STATE;
      DefaultLowLatencyWake : SYSTEM_POWER_STATE;
   end record;
   type PSYSTEM_POWER_CAPABILITIES is access SYSTEM_POWER_CAPABILITIES; -- CXType_Pointer - CXType_Elaborated
   type SYSTEM_BATTERY_STATE is record
      AcOnLine : BOOLEAN;
      BatteryPresent : BOOLEAN;
      Charging : BOOLEAN;
      Discharging : BOOLEAN;
      Spare1 : Void;
      Tag : BYTE;
      MaxCapacity : DWORD;
      RemainingCapacity : DWORD;
      Rate : DWORD;
      EstimatedTime : DWORD;
      DefaultAlert1 : DWORD;
      DefaultAlert2 : DWORD;
   end record;
   type PSYSTEM_BATTERY_STATE is access SYSTEM_BATTERY_STATE; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DOS_HEADER_x is record
      e_magic : WORD;
      e_cblp : WORD;
      e_cp : WORD;
      e_crlc : WORD;
      e_cparhdr : WORD;
      e_minalloc : WORD;
      e_maxalloc : WORD;
      e_ss : WORD;
      e_sp : WORD;
      e_csum : WORD;
      e_ip : WORD;
      e_cs : WORD;
      e_lfarlc : WORD;
      e_ovno : WORD;
      e_res : Void;
      e_oemid : WORD;
      e_oeminfo : WORD;
      e_res2 : Void;
      e_lfanew : LONG;
   end record;
   subtype IMAGE_DOS_HEADER is IMAGE_DOS_HEADER_x; -- CXType_Elaborated
   type PIMAGE_DOS_HEADER is access IMAGE_DOS_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_OS2_HEADER_x is record
      ne_magic : WORD;
      ne_ver : CHAR;
      ne_rev : CHAR;
      ne_enttab : WORD;
      ne_cbenttab : WORD;
      ne_crc : LONG;
      ne_flags : WORD;
      ne_autodata : WORD;
      ne_heap : WORD;
      ne_stack : WORD;
      ne_csip : LONG;
      ne_sssp : LONG;
      ne_cseg : WORD;
      ne_cmod : WORD;
      ne_cbnrestab : WORD;
      ne_segtab : WORD;
      ne_rsrctab : WORD;
      ne_restab : WORD;
      ne_modtab : WORD;
      ne_imptab : WORD;
      ne_nrestab : LONG;
      ne_cmovent : WORD;
      ne_align : WORD;
      ne_cres : WORD;
      ne_exetyp : BYTE;
      ne_flagsothers : BYTE;
      ne_pretthunks : WORD;
      ne_psegrefbytes : WORD;
      ne_swaparea : WORD;
      ne_expver : WORD;
   end record;
   subtype IMAGE_OS2_HEADER is IMAGE_OS2_HEADER_x; -- CXType_Elaborated
   type PIMAGE_OS2_HEADER is access IMAGE_OS2_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_VXD_HEADER_x is record
      e32_magic : WORD;
      e32_border : BYTE;
      e32_worder : BYTE;
      e32_level : DWORD;
      e32_cpu : WORD;
      e32_os : WORD;
      e32_ver : DWORD;
      e32_mflags : DWORD;
      e32_mpages : DWORD;
      e32_startobj : DWORD;
      e32_eip : DWORD;
      e32_stackobj : DWORD;
      e32_esp : DWORD;
      e32_pagesize : DWORD;
      e32_lastpagesize : DWORD;
      e32_fixupsize : DWORD;
      e32_fixupsum : DWORD;
      e32_ldrsize : DWORD;
      e32_ldrsum : DWORD;
      e32_objtab : DWORD;
      e32_objcnt : DWORD;
      e32_objmap : DWORD;
      e32_itermap : DWORD;
      e32_rsrctab : DWORD;
      e32_rsrccnt : DWORD;
      e32_restab : DWORD;
      e32_enttab : DWORD;
      e32_dirtab : DWORD;
      e32_dircnt : DWORD;
      e32_fpagetab : DWORD;
      e32_frectab : DWORD;
      e32_impmod : DWORD;
      e32_impmodcnt : DWORD;
      e32_impproc : DWORD;
      e32_pagesum : DWORD;
      e32_datapage : DWORD;
      e32_preload : DWORD;
      e32_nrestab : DWORD;
      e32_cbnrestab : DWORD;
      e32_nressum : DWORD;
      e32_autodata : DWORD;
      e32_debuginfo : DWORD;
      e32_debuglen : DWORD;
      e32_instpreload : DWORD;
      e32_instdemand : DWORD;
      e32_heapsize : DWORD;
      e32_res3 : Void;
      e32_winresoff : DWORD;
      e32_winreslen : DWORD;
      e32_devid : WORD;
      e32_ddkver : WORD;
   end record;
   subtype IMAGE_VXD_HEADER is IMAGE_VXD_HEADER_x; -- CXType_Elaborated
   type PIMAGE_VXD_HEADER is access IMAGE_VXD_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_FILE_HEADER_x is record
      Machine : WORD;
      NumberOfSections : WORD;
      TimeDateStamp : DWORD;
      PointerToSymbolTable : DWORD;
      NumberOfSymbols : DWORD;
      SizeOfOptionalHeader : WORD;
      Characteristics : WORD;
   end record;
   subtype IMAGE_FILE_HEADER is IMAGE_FILE_HEADER_x; -- CXType_Elaborated
   type PIMAGE_FILE_HEADER is access IMAGE_FILE_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DATA_DIRECTORY_x is record
      VirtualAddress : DWORD;
      Size : DWORD;
   end record;
   subtype IMAGE_DATA_DIRECTORY is IMAGE_DATA_DIRECTORY_x; -- CXType_Elaborated
   type PIMAGE_DATA_DIRECTORY is access IMAGE_DATA_DIRECTORY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_OPTIONAL_HEADER_x is record
      Magic : WORD;
      MajorLinkerVersion : BYTE;
      MinorLinkerVersion : BYTE;
      SizeOfCode : DWORD;
      SizeOfInitializedData : DWORD;
      SizeOfUninitializedData : DWORD;
      AddressOfEntryPoint : DWORD;
      BaseOfCode : DWORD;
      BaseOfData : DWORD;
      ImageBase : DWORD;
      SectionAlignment : DWORD;
      FileAlignment : DWORD;
      MajorOperatingSystemVersion : WORD;
      MinorOperatingSystemVersion : WORD;
      MajorImageVersion : WORD;
      MinorImageVersion : WORD;
      MajorSubsystemVersion : WORD;
      MinorSubsystemVersion : WORD;
      Win32VersionValue : DWORD;
      SizeOfImage : DWORD;
      SizeOfHeaders : DWORD;
      CheckSum : DWORD;
      Subsystem : WORD;
      DllCharacteristics : WORD;
      SizeOfStackReserve : DWORD;
      SizeOfStackCommit : DWORD;
      SizeOfHeapReserve : DWORD;
      SizeOfHeapCommit : DWORD;
      LoaderFlags : DWORD;
      NumberOfRvaAndSizes : DWORD;
      DataDirectory : Void;
   end record;
   subtype IMAGE_OPTIONAL_HEADER32 is IMAGE_OPTIONAL_HEADER_x; -- CXType_Elaborated
   type PIMAGE_OPTIONAL_HEADER32 is access IMAGE_OPTIONAL_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ROM_OPTIONAL_HEADER_x is record
      Magic : WORD;
      MajorLinkerVersion : BYTE;
      MinorLinkerVersion : BYTE;
      SizeOfCode : DWORD;
      SizeOfInitializedData : DWORD;
      SizeOfUninitializedData : DWORD;
      AddressOfEntryPoint : DWORD;
      BaseOfCode : DWORD;
      BaseOfData : DWORD;
      BaseOfBss : DWORD;
      GprMask : DWORD;
      CprMask : Void;
      GpValue : DWORD;
   end record;
   subtype IMAGE_ROM_OPTIONAL_HEADER is IMAGE_ROM_OPTIONAL_HEADER_x; -- CXType_Elaborated
   type PIMAGE_ROM_OPTIONAL_HEADER is access IMAGE_ROM_OPTIONAL_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_OPTIONAL_HEADER64_x is record
      Magic : WORD;
      MajorLinkerVersion : BYTE;
      MinorLinkerVersion : BYTE;
      SizeOfCode : DWORD;
      SizeOfInitializedData : DWORD;
      SizeOfUninitializedData : DWORD;
      AddressOfEntryPoint : DWORD;
      BaseOfCode : DWORD;
      ImageBase : ULONGLONG;
      SectionAlignment : DWORD;
      FileAlignment : DWORD;
      MajorOperatingSystemVersion : WORD;
      MinorOperatingSystemVersion : WORD;
      MajorImageVersion : WORD;
      MinorImageVersion : WORD;
      MajorSubsystemVersion : WORD;
      MinorSubsystemVersion : WORD;
      Win32VersionValue : DWORD;
      SizeOfImage : DWORD;
      SizeOfHeaders : DWORD;
      CheckSum : DWORD;
      Subsystem : WORD;
      DllCharacteristics : WORD;
      SizeOfStackReserve : ULONGLONG;
      SizeOfStackCommit : ULONGLONG;
      SizeOfHeapReserve : ULONGLONG;
      SizeOfHeapCommit : ULONGLONG;
      LoaderFlags : DWORD;
      NumberOfRvaAndSizes : DWORD;
      DataDirectory : Void;
   end record;
   subtype IMAGE_OPTIONAL_HEADER64 is IMAGE_OPTIONAL_HEADER64_x; -- CXType_Elaborated
   type PIMAGE_OPTIONAL_HEADER64 is access IMAGE_OPTIONAL_HEADER64_x; -- CXType_Pointer - CXType_Elaborated
   subtype IMAGE_OPTIONAL_HEADER is IMAGE_OPTIONAL_HEADER64; -- CXType_Typedef
   subtype PIMAGE_OPTIONAL_HEADER is PIMAGE_OPTIONAL_HEADER64; -- CXType_Typedef
   type IMAGE_NT_HEADERS64_x is record
      Signature : DWORD;
      FileHeader : IMAGE_FILE_HEADER;
      OptionalHeader : IMAGE_OPTIONAL_HEADER64;
   end record;
   subtype IMAGE_NT_HEADERS64 is IMAGE_NT_HEADERS64_x; -- CXType_Elaborated
   type PIMAGE_NT_HEADERS64 is access IMAGE_NT_HEADERS64_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_NT_HEADERS_x is record
      Signature : DWORD;
      FileHeader : IMAGE_FILE_HEADER;
      OptionalHeader : IMAGE_OPTIONAL_HEADER32;
   end record;
   subtype IMAGE_NT_HEADERS32 is IMAGE_NT_HEADERS_x; -- CXType_Elaborated
   type PIMAGE_NT_HEADERS32 is access IMAGE_NT_HEADERS_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ROM_HEADERS_x is record
      FileHeader : IMAGE_FILE_HEADER;
      OptionalHeader : IMAGE_ROM_OPTIONAL_HEADER;
   end record;
   subtype IMAGE_ROM_HEADERS is IMAGE_ROM_HEADERS_x; -- CXType_Elaborated
   type PIMAGE_ROM_HEADERS is access IMAGE_ROM_HEADERS_x; -- CXType_Pointer - CXType_Elaborated
   subtype IMAGE_NT_HEADERS is IMAGE_NT_HEADERS64; -- CXType_Typedef
   subtype PIMAGE_NT_HEADERS is PIMAGE_NT_HEADERS64; -- CXType_Typedef
   type ANON_OBJECT_HEADER is record
      Sig1 : WORD;
      Sig2 : WORD;
      Version : WORD;
      Machine : WORD;
      TimeDateStamp : DWORD;
      ClassID : CLSID;
      SizeOfData : DWORD;
   end record;
   type ANON_OBJECT_HEADER_V2 is record
      Sig1 : WORD;
      Sig2 : WORD;
      Version : WORD;
      Machine : WORD;
      TimeDateStamp : DWORD;
      ClassID : CLSID;
      SizeOfData : DWORD;
      Flags : DWORD;
      MetaDataSize : DWORD;
      MetaDataOffset : DWORD;
   end record;
   type ANON_OBJECT_HEADER_BIGOBJ is record
      Sig1 : WORD;
      Sig2 : WORD;
      Version : WORD;
      Machine : WORD;
      TimeDateStamp : DWORD;
      ClassID : CLSID;
      SizeOfData : DWORD;
      Flags : DWORD;
      MetaDataSize : DWORD;
      MetaDataOffset : DWORD;
      NumberOfSections : DWORD;
      PointerToSymbolTable : DWORD;
      NumberOfSymbols : DWORD;
   end record;
   type IMAGE_SECTION_HEADER_x is record
      Name : Void;
      Misc : Void;
      VirtualAddress : DWORD;
      SizeOfRawData : DWORD;
      PointerToRawData : DWORD;
      PointerToRelocations : DWORD;
      PointerToLinenumbers : DWORD;
      NumberOfRelocations : WORD;
      NumberOfLinenumbers : WORD;
      Characteristics : DWORD;
   end record;
   subtype IMAGE_SECTION_HEADER is IMAGE_SECTION_HEADER_x; -- CXType_Elaborated
   type PIMAGE_SECTION_HEADER is access IMAGE_SECTION_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_SYMBOL_x is record
      N : Void;
      Value : DWORD;
      SectionNumber : SHORT;
      type_x : WORD;
      StorageClass : BYTE;
      NumberOfAuxSymbols : BYTE;
   end record;
   subtype IMAGE_SYMBOL is IMAGE_SYMBOL_x; -- CXType_Elaborated
   type PIMAGE_SYMBOL is access IMAGE_SYMBOL; -- CXType_Pointer - CXType_Typedef
   type IMAGE_SYMBOL_EX_x is record
      N : Void;
      Value : DWORD;
      SectionNumber : LONG;
      type_x : WORD;
      StorageClass : BYTE;
      NumberOfAuxSymbols : BYTE;
   end record;
   subtype IMAGE_SYMBOL_EX is IMAGE_SYMBOL_EX_x; -- CXType_Elaborated
   type PIMAGE_SYMBOL_EX is access IMAGE_SYMBOL_EX; -- CXType_Pointer - CXType_Typedef
   type IMAGE_AUX_SYMBOL_TOKEN_DEF is record
      bAuxType : BYTE;
      bReserved : BYTE;
      SymbolTableIndex : DWORD;
      rgbReserved : Void;
   end record;
   type PIMAGE_AUX_SYMBOL_TOKEN_DEF is access IMAGE_AUX_SYMBOL_TOKEN_DEF; -- CXType_Pointer - CXType_Typedef
   type IMAGE_AUX_SYMBOL_x is null record; -- Union Placeholder [FIXME]
   subtype IMAGE_AUX_SYMBOL is IMAGE_AUX_SYMBOL_x; -- CXType_Elaborated
   type PIMAGE_AUX_SYMBOL is access IMAGE_AUX_SYMBOL; -- CXType_Pointer - CXType_Typedef
   type IMAGE_AUX_SYMBOL_EX_x is null record; -- Union Placeholder [FIXME]
   subtype IMAGE_AUX_SYMBOL_EX is IMAGE_AUX_SYMBOL_EX_x; -- CXType_Elaborated
   type PIMAGE_AUX_SYMBOL_EX is access IMAGE_AUX_SYMBOL_EX; -- CXType_Pointer - CXType_Typedef
   type IMAGE_AUX_SYMBOL_TYPE is (
      IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF
   );
   for IMAGE_AUX_SYMBOL_TYPE use (
      IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF => 1
   );
   for IMAGE_AUX_SYMBOL_TYPE'Size use 32;
   type IMAGE_RELOCATION_x is record
      SymbolTableIndex : DWORD;
      type_x : WORD;
   end record;
   subtype IMAGE_RELOCATION is IMAGE_RELOCATION_x; -- CXType_Elaborated
   type PIMAGE_RELOCATION is access IMAGE_RELOCATION; -- CXType_Pointer - CXType_Typedef
   type IMAGE_LINENUMBER_x is record
      type_x : Void;
      Linenumber : WORD;
   end record;
   subtype IMAGE_LINENUMBER is IMAGE_LINENUMBER_x; -- CXType_Elaborated
   type PIMAGE_LINENUMBER is access IMAGE_LINENUMBER; -- CXType_Pointer - CXType_Typedef
   type IMAGE_BASE_RELOCATION_x is record
      VirtualAddress : DWORD;
      SizeOfBlock : DWORD;
   end record;
   subtype IMAGE_BASE_RELOCATION is IMAGE_BASE_RELOCATION_x; -- CXType_Elaborated
   type PIMAGE_BASE_RELOCATION is access IMAGE_BASE_RELOCATION; -- CXType_Pointer - CXType_Typedef
   type IMAGE_ARCHIVE_MEMBER_HEADER_x is record
      Name : Void;
      Date : Void;
      UserID : Void;
      GroupID : Void;
      Mode : Void;
      Size : Void;
      EndHeader : Void;
   end record;
   subtype IMAGE_ARCHIVE_MEMBER_HEADER is IMAGE_ARCHIVE_MEMBER_HEADER_x; -- CXType_Elaborated
   type PIMAGE_ARCHIVE_MEMBER_HEADER is access IMAGE_ARCHIVE_MEMBER_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_EXPORT_DIRECTORY_x is record
      Characteristics : DWORD;
      TimeDateStamp : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      Name : DWORD;
      Base : DWORD;
      NumberOfFunctions : DWORD;
      NumberOfNames : DWORD;
      AddressOfFunctions : DWORD;
      AddressOfNames : DWORD;
      AddressOfNameOrdinals : DWORD;
   end record;
   subtype IMAGE_EXPORT_DIRECTORY is IMAGE_EXPORT_DIRECTORY_x; -- CXType_Elaborated
   type PIMAGE_EXPORT_DIRECTORY is access IMAGE_EXPORT_DIRECTORY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_IMPORT_BY_NAME_x is record
      Hint : WORD;
      Name : Void;
   end record;
   subtype IMAGE_IMPORT_BY_NAME is IMAGE_IMPORT_BY_NAME_x; -- CXType_Elaborated
   type PIMAGE_IMPORT_BY_NAME is access IMAGE_IMPORT_BY_NAME_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_THUNK_DATA64_x is record
      u1 : Void;
   end record;
   subtype IMAGE_THUNK_DATA64 is IMAGE_THUNK_DATA64_x; -- CXType_Elaborated
   type PIMAGE_THUNK_DATA64 is access IMAGE_THUNK_DATA64; -- CXType_Pointer - CXType_Typedef
   type IMAGE_THUNK_DATA32_x is record
      u1 : Void;
   end record;
   subtype IMAGE_THUNK_DATA32 is IMAGE_THUNK_DATA32_x; -- CXType_Elaborated
   type PIMAGE_THUNK_DATA32 is access IMAGE_THUNK_DATA32; -- CXType_Pointer - CXType_Typedef
   subtype PIMAGE_TLS_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PVOID, DWORD, PVOID)
   type IMAGE_TLS_DIRECTORY64_x is record
      StartAddressOfRawData : ULONGLONG;
      EndAddressOfRawData : ULONGLONG;
      AddressOfIndex : ULONGLONG;
      AddressOfCallBacks : ULONGLONG;
      SizeOfZeroFill : DWORD;
   end record;
   subtype IMAGE_TLS_DIRECTORY64 is IMAGE_TLS_DIRECTORY64_x; -- CXType_Elaborated
   type PIMAGE_TLS_DIRECTORY64 is access IMAGE_TLS_DIRECTORY64; -- CXType_Pointer - CXType_Typedef
   type IMAGE_TLS_DIRECTORY32_x is record
      StartAddressOfRawData : DWORD;
      EndAddressOfRawData : DWORD;
      AddressOfIndex : DWORD;
      AddressOfCallBacks : DWORD;
      SizeOfZeroFill : DWORD;
   end record;
   subtype IMAGE_TLS_DIRECTORY32 is IMAGE_TLS_DIRECTORY32_x; -- CXType_Elaborated
   type PIMAGE_TLS_DIRECTORY32 is access IMAGE_TLS_DIRECTORY32; -- CXType_Pointer - CXType_Typedef
   subtype IMAGE_THUNK_DATA is IMAGE_THUNK_DATA64; -- CXType_Typedef
   subtype PIMAGE_THUNK_DATA is PIMAGE_THUNK_DATA64; -- CXType_Typedef
   subtype IMAGE_TLS_DIRECTORY is IMAGE_TLS_DIRECTORY64; -- CXType_Typedef
   subtype PIMAGE_TLS_DIRECTORY is PIMAGE_TLS_DIRECTORY64; -- CXType_Typedef
   type IMAGE_IMPORT_DESCRIPTOR_x is record
      TimeDateStamp : DWORD;
      ForwarderChain : DWORD;
      Name : DWORD;
      FirstThunk : DWORD;
   end record;
   subtype IMAGE_IMPORT_DESCRIPTOR is IMAGE_IMPORT_DESCRIPTOR_x; -- CXType_Elaborated
   type PIMAGE_IMPORT_DESCRIPTOR is access IMAGE_IMPORT_DESCRIPTOR; -- CXType_Pointer - CXType_Typedef
   type IMAGE_BOUND_IMPORT_DESCRIPTOR_x is record
      TimeDateStamp : DWORD;
      OffsetModuleName : WORD;
      NumberOfModuleForwarderRefs : WORD;
   end record;
   subtype IMAGE_BOUND_IMPORT_DESCRIPTOR is IMAGE_BOUND_IMPORT_DESCRIPTOR_x; -- CXType_Elaborated
   type PIMAGE_BOUND_IMPORT_DESCRIPTOR is access IMAGE_BOUND_IMPORT_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_BOUND_FORWARDER_REF_x is record
      TimeDateStamp : DWORD;
      OffsetModuleName : WORD;
      Reserved : WORD;
   end record;
   subtype IMAGE_BOUND_FORWARDER_REF is IMAGE_BOUND_FORWARDER_REF_x; -- CXType_Elaborated
   type PIMAGE_BOUND_FORWARDER_REF is access IMAGE_BOUND_FORWARDER_REF_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DELAYLOAD_DESCRIPTOR_x is record
      Attributes : Void;
      DllNameRVA : DWORD;
      ModuleHandleRVA : DWORD;
      ImportAddressTableRVA : DWORD;
      ImportNameTableRVA : DWORD;
      BoundImportAddressTableRVA : DWORD;
      UnloadInformationTableRVA : DWORD;
      TimeDateStamp : DWORD;
   end record;
   subtype IMAGE_DELAYLOAD_DESCRIPTOR is IMAGE_DELAYLOAD_DESCRIPTOR_x; -- CXType_Elaborated
   type PIMAGE_DELAYLOAD_DESCRIPTOR is access IMAGE_DELAYLOAD_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type PCIMAGE_DELAYLOAD_DESCRIPTOR is access constant IMAGE_DELAYLOAD_DESCRIPTOR; -- CXType_Pointer - CXType_Typedef
   type IMAGE_RESOURCE_DIRECTORY_x is record
      Characteristics : DWORD;
      TimeDateStamp : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      NumberOfNamedEntries : WORD;
      NumberOfIdEntries : WORD;
   end record;
   subtype IMAGE_RESOURCE_DIRECTORY is IMAGE_RESOURCE_DIRECTORY_x; -- CXType_Elaborated
   type PIMAGE_RESOURCE_DIRECTORY is access IMAGE_RESOURCE_DIRECTORY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_RESOURCE_DIRECTORY_ENTRY_x is null record;
   subtype IMAGE_RESOURCE_DIRECTORY_ENTRY is IMAGE_RESOURCE_DIRECTORY_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_RESOURCE_DIRECTORY_ENTRY is access IMAGE_RESOURCE_DIRECTORY_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_RESOURCE_DIRECTORY_STRING_x is record
      Length : WORD;
      NameString : Void;
   end record;
   subtype IMAGE_RESOURCE_DIRECTORY_STRING is IMAGE_RESOURCE_DIRECTORY_STRING_x; -- CXType_Elaborated
   type PIMAGE_RESOURCE_DIRECTORY_STRING is access IMAGE_RESOURCE_DIRECTORY_STRING_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_RESOURCE_DIR_STRING_U_x is record
      Length : WORD;
      NameString : Void;
   end record;
   subtype IMAGE_RESOURCE_DIR_STRING_U is IMAGE_RESOURCE_DIR_STRING_U_x; -- CXType_Elaborated
   type PIMAGE_RESOURCE_DIR_STRING_U is access IMAGE_RESOURCE_DIR_STRING_U_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_RESOURCE_DATA_ENTRY_x is record
      OffsetToData : DWORD;
      Size : DWORD;
      CodePage : DWORD;
      Reserved : DWORD;
   end record;
   subtype IMAGE_RESOURCE_DATA_ENTRY is IMAGE_RESOURCE_DATA_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_RESOURCE_DATA_ENTRY is access IMAGE_RESOURCE_DATA_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_LOAD_CONFIG_CODE_INTEGRITY_x is record
      Flags : WORD;
      Catalog : WORD;
      CatalogOffset : DWORD;
      Reserved : DWORD;
   end record;
   subtype IMAGE_LOAD_CONFIG_CODE_INTEGRITY is IMAGE_LOAD_CONFIG_CODE_INTEGRITY_x; -- CXType_Elaborated
   type PIMAGE_LOAD_CONFIG_CODE_INTEGRITY is access IMAGE_LOAD_CONFIG_CODE_INTEGRITY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DYNAMIC_RELOCATION_TABLE_x is record
      Version : DWORD;
      Size : DWORD;
   end record;
   subtype IMAGE_DYNAMIC_RELOCATION_TABLE is IMAGE_DYNAMIC_RELOCATION_TABLE_x; -- CXType_Elaborated
   type PIMAGE_DYNAMIC_RELOCATION_TABLE is access IMAGE_DYNAMIC_RELOCATION_TABLE_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DYNAMIC_RELOCATION32_x is record
      Symbol : DWORD;
      BaseRelocSize : DWORD;
   end record;
   subtype IMAGE_DYNAMIC_RELOCATION32 is IMAGE_DYNAMIC_RELOCATION32_x; -- CXType_Elaborated
   type PIMAGE_DYNAMIC_RELOCATION32 is access IMAGE_DYNAMIC_RELOCATION32_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DYNAMIC_RELOCATION64_x is record
      Symbol : ULONGLONG;
      BaseRelocSize : DWORD;
   end record;
   subtype IMAGE_DYNAMIC_RELOCATION64 is IMAGE_DYNAMIC_RELOCATION64_x; -- CXType_Elaborated
   type PIMAGE_DYNAMIC_RELOCATION64 is access IMAGE_DYNAMIC_RELOCATION64_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DYNAMIC_RELOCATION32_V2_x is record
      HeaderSize : DWORD;
      FixupInfoSize : DWORD;
      Symbol : DWORD;
      SymbolGroup : DWORD;
      Flags : DWORD;
   end record;
   subtype IMAGE_DYNAMIC_RELOCATION32_V2 is IMAGE_DYNAMIC_RELOCATION32_V2_x; -- CXType_Elaborated
   type PIMAGE_DYNAMIC_RELOCATION32_V2 is access IMAGE_DYNAMIC_RELOCATION32_V2_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DYNAMIC_RELOCATION64_V2_x is record
      HeaderSize : DWORD;
      FixupInfoSize : DWORD;
      Symbol : ULONGLONG;
      SymbolGroup : DWORD;
      Flags : DWORD;
   end record;
   subtype IMAGE_DYNAMIC_RELOCATION64_V2 is IMAGE_DYNAMIC_RELOCATION64_V2_x; -- CXType_Elaborated
   type PIMAGE_DYNAMIC_RELOCATION64_V2 is access IMAGE_DYNAMIC_RELOCATION64_V2_x; -- CXType_Pointer - CXType_Elaborated
   subtype IMAGE_DYNAMIC_RELOCATION is IMAGE_DYNAMIC_RELOCATION64; -- CXType_Typedef
   subtype PIMAGE_DYNAMIC_RELOCATION is PIMAGE_DYNAMIC_RELOCATION64; -- CXType_Typedef
   subtype IMAGE_DYNAMIC_RELOCATION_V2 is IMAGE_DYNAMIC_RELOCATION64_V2; -- CXType_Typedef
   subtype PIMAGE_DYNAMIC_RELOCATION_V2 is PIMAGE_DYNAMIC_RELOCATION64_V2; -- CXType_Typedef
   type IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER_x is record
      PrologueByteCount : BYTE;
   end record;
   subtype IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER is IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER_x; -- CXType_Elaborated
   type PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER is access IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER; -- CXType_Pointer - CXType_Typedef
   type IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER_x is record
      EpilogueCount : DWORD;
      EpilogueByteCount : BYTE;
      BranchDescriptorElementSize : BYTE;
      BranchDescriptorCount : WORD;
   end record;
   subtype IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER is IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER_x; -- CXType_Elaborated
   type PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER is access IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER; -- CXType_Pointer - CXType_Typedef
   type IMAGE_LOAD_CONFIG_DIRECTORY32_x is record
      Size : DWORD;
      TimeDateStamp : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      GlobalFlagsClear : DWORD;
      GlobalFlagsSet : DWORD;
      CriticalSectionDefaultTimeout : DWORD;
      DeCommitFreeBlockThreshold : DWORD;
      DeCommitTotalFreeThreshold : DWORD;
      LockPrefixTable : DWORD;
      MaximumAllocationSize : DWORD;
      VirtualMemoryThreshold : DWORD;
      ProcessHeapFlags : DWORD;
      ProcessAffinityMask : DWORD;
      CSDVersion : WORD;
      DependentLoadFlags : WORD;
      EditList : DWORD;
      SecurityCookie : DWORD;
      SEHandlerTable : DWORD;
      SEHandlerCount : DWORD;
      GuardCFCheckFunctionPointer : DWORD;
      GuardCFDispatchFunctionPointer : DWORD;
      GuardCFFunctionTable : DWORD;
      GuardCFFunctionCount : DWORD;
      GuardFlags : DWORD;
      CodeIntegrity : IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
      GuardAddressTakenIatEntryTable : DWORD;
      GuardAddressTakenIatEntryCount : DWORD;
      GuardLongJumpTargetTable : DWORD;
      GuardLongJumpTargetCount : DWORD;
      DynamicValueRelocTable : DWORD;
      CHPEMetadataPointer : DWORD;
      GuardRFFailureRoutine : DWORD;
      GuardRFFailureRoutineFunctionPointer : DWORD;
      DynamicValueRelocTableOffset : DWORD;
      DynamicValueRelocTableSection : WORD;
      Reserved2 : WORD;
      GuardRFVerifyStackPointerFunctionPointer : DWORD;
      HotPatchTableOffset : DWORD;
      Reserved3 : DWORD;
      EnclaveConfigurationPointer : DWORD;
   end record;
   subtype IMAGE_LOAD_CONFIG_DIRECTORY32 is IMAGE_LOAD_CONFIG_DIRECTORY32_x; -- CXType_Elaborated
   type PIMAGE_LOAD_CONFIG_DIRECTORY32 is access IMAGE_LOAD_CONFIG_DIRECTORY32_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_LOAD_CONFIG_DIRECTORY64_x is record
      Size : DWORD;
      TimeDateStamp : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      GlobalFlagsClear : DWORD;
      GlobalFlagsSet : DWORD;
      CriticalSectionDefaultTimeout : DWORD;
      DeCommitFreeBlockThreshold : ULONGLONG;
      DeCommitTotalFreeThreshold : ULONGLONG;
      LockPrefixTable : ULONGLONG;
      MaximumAllocationSize : ULONGLONG;
      VirtualMemoryThreshold : ULONGLONG;
      ProcessAffinityMask : ULONGLONG;
      ProcessHeapFlags : DWORD;
      CSDVersion : WORD;
      DependentLoadFlags : WORD;
      EditList : ULONGLONG;
      SecurityCookie : ULONGLONG;
      SEHandlerTable : ULONGLONG;
      SEHandlerCount : ULONGLONG;
      GuardCFCheckFunctionPointer : ULONGLONG;
      GuardCFDispatchFunctionPointer : ULONGLONG;
      GuardCFFunctionTable : ULONGLONG;
      GuardCFFunctionCount : ULONGLONG;
      GuardFlags : DWORD;
      CodeIntegrity : IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
      GuardAddressTakenIatEntryTable : ULONGLONG;
      GuardAddressTakenIatEntryCount : ULONGLONG;
      GuardLongJumpTargetTable : ULONGLONG;
      GuardLongJumpTargetCount : ULONGLONG;
      DynamicValueRelocTable : ULONGLONG;
      CHPEMetadataPointer : ULONGLONG;
      GuardRFFailureRoutine : ULONGLONG;
      GuardRFFailureRoutineFunctionPointer : ULONGLONG;
      DynamicValueRelocTableOffset : DWORD;
      DynamicValueRelocTableSection : WORD;
      Reserved2 : WORD;
      GuardRFVerifyStackPointerFunctionPointer : ULONGLONG;
      HotPatchTableOffset : DWORD;
      Reserved3 : DWORD;
      EnclaveConfigurationPointer : ULONGLONG;
   end record;
   subtype IMAGE_LOAD_CONFIG_DIRECTORY64 is IMAGE_LOAD_CONFIG_DIRECTORY64_x; -- CXType_Elaborated
   type PIMAGE_LOAD_CONFIG_DIRECTORY64 is access IMAGE_LOAD_CONFIG_DIRECTORY64_x; -- CXType_Pointer - CXType_Elaborated
   subtype IMAGE_LOAD_CONFIG_DIRECTORY is IMAGE_LOAD_CONFIG_DIRECTORY64; -- CXType_Typedef
   subtype PIMAGE_LOAD_CONFIG_DIRECTORY is PIMAGE_LOAD_CONFIG_DIRECTORY64; -- CXType_Typedef
   type IMAGE_HOT_PATCH_INFO_x is record
      Version : DWORD;
      Size : DWORD;
      SequenceNumber : DWORD;
      BaseImageList : DWORD;
      BaseImageCount : DWORD;
      BufferOffset : DWORD;
   end record;
   subtype IMAGE_HOT_PATCH_INFO is IMAGE_HOT_PATCH_INFO_x; -- CXType_Elaborated
   type PIMAGE_HOT_PATCH_INFO is access IMAGE_HOT_PATCH_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_HOT_PATCH_BASE_x is record
      SequenceNumber : DWORD;
      Flags : DWORD;
      OriginalTimeDateStamp : DWORD;
      OriginalCheckSum : DWORD;
      CodeIntegrityInfo : DWORD;
      CodeIntegritySize : DWORD;
      PatchTable : DWORD;
      BufferOffset : DWORD;
   end record;
   subtype IMAGE_HOT_PATCH_BASE is IMAGE_HOT_PATCH_BASE_x; -- CXType_Elaborated
   type PIMAGE_HOT_PATCH_BASE is access IMAGE_HOT_PATCH_BASE_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_HOT_PATCH_HASHES_x is record
      SHA256 : Void;
      SHA1 : Void;
   end record;
   subtype IMAGE_HOT_PATCH_HASHES is IMAGE_HOT_PATCH_HASHES_x; -- CXType_Elaborated
   type PIMAGE_HOT_PATCH_HASHES is access IMAGE_HOT_PATCH_HASHES_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_CE_RUNTIME_FUNCTION_ENTRY_x is record
      FuncStart : DWORD;
      PrologLen : DWORD;
      FuncLen : DWORD;
      ThirtyTwoBit : DWORD;
      ExceptionFlag : DWORD;
   end record;
   subtype IMAGE_CE_RUNTIME_FUNCTION_ENTRY is IMAGE_CE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY is access IMAGE_CE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_x is record
      BeginAddress : DWORD;
   end record;
   subtype IMAGE_ARM_RUNTIME_FUNCTION_ENTRY is IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY is access IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_x is record
      BeginAddress : DWORD;
   end record;
   subtype IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY is IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY is access IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY_x is record
      BeginAddress : ULONGLONG;
      EndAddress : ULONGLONG;
      ExceptionHandler : ULONGLONG;
      HandlerData : ULONGLONG;
      PrologEndAddress : ULONGLONG;
   end record;
   subtype IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY is IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY is access IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY_x is record
      BeginAddress : DWORD;
      EndAddress : DWORD;
      ExceptionHandler : DWORD;
      HandlerData : DWORD;
      PrologEndAddress : DWORD;
   end record;
   subtype IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY is IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY is access IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_RUNTIME_FUNCTION_ENTRY_x is record
      BeginAddress : DWORD;
      EndAddress : DWORD;
   end record;
   type PIMAGE_RUNTIME_FUNCTION_ENTRY_x is access IMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   subtype IMAGE_IA64_RUNTIME_FUNCTION_ENTRY is IMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Typedef
   subtype PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY is PIMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Typedef
   subtype IMAGE_RUNTIME_FUNCTION_ENTRY is IMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Typedef
   subtype PIMAGE_RUNTIME_FUNCTION_ENTRY is PIMAGE_RUNTIME_FUNCTION_ENTRY_x; -- CXType_Typedef
   type IMAGE_ENCLAVE_CONFIG32_x is record
      Size : DWORD;
      MinimumRequiredConfigSize : DWORD;
      PolicyFlags : DWORD;
      NumberOfImports : DWORD;
      ImportList : DWORD;
      ImportEntrySize : DWORD;
      FamilyID : Void;
      ImageID : Void;
      ImageVersion : DWORD;
      SecurityVersion : DWORD;
      EnclaveSize : DWORD;
      NumberOfThreads : DWORD;
      EnclaveFlags : DWORD;
   end record;
   subtype IMAGE_ENCLAVE_CONFIG32 is IMAGE_ENCLAVE_CONFIG32_x; -- CXType_Elaborated
   type PIMAGE_ENCLAVE_CONFIG32 is access IMAGE_ENCLAVE_CONFIG32_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_ENCLAVE_CONFIG64_x is record
      Size : DWORD;
      MinimumRequiredConfigSize : DWORD;
      PolicyFlags : DWORD;
      NumberOfImports : DWORD;
      ImportList : DWORD;
      ImportEntrySize : DWORD;
      FamilyID : Void;
      ImageID : Void;
      ImageVersion : DWORD;
      SecurityVersion : DWORD;
      EnclaveSize : ULONGLONG;
      NumberOfThreads : DWORD;
      EnclaveFlags : DWORD;
   end record;
   subtype IMAGE_ENCLAVE_CONFIG64 is IMAGE_ENCLAVE_CONFIG64_x; -- CXType_Elaborated
   type PIMAGE_ENCLAVE_CONFIG64 is access IMAGE_ENCLAVE_CONFIG64_x; -- CXType_Pointer - CXType_Elaborated
   subtype IMAGE_ENCLAVE_CONFIG is IMAGE_ENCLAVE_CONFIG64; -- CXType_Typedef
   subtype PIMAGE_ENCLAVE_CONFIG is PIMAGE_ENCLAVE_CONFIG64; -- CXType_Typedef
   type IMAGE_ENCLAVE_IMPORT_x is record
      MatchType : DWORD;
      MinimumSecurityVersion : DWORD;
      UniqueOrAuthorID : Void;
      FamilyID : Void;
      ImageID : Void;
      ImportName : DWORD;
      Reserved : DWORD;
   end record;
   subtype IMAGE_ENCLAVE_IMPORT is IMAGE_ENCLAVE_IMPORT_x; -- CXType_Elaborated
   type PIMAGE_ENCLAVE_IMPORT is access IMAGE_ENCLAVE_IMPORT_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DEBUG_DIRECTORY_x is record
      Characteristics : DWORD;
      TimeDateStamp : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      type_x : DWORD;
      SizeOfData : DWORD;
      AddressOfRawData : DWORD;
      PointerToRawData : DWORD;
   end record;
   subtype IMAGE_DEBUG_DIRECTORY is IMAGE_DEBUG_DIRECTORY_x; -- CXType_Elaborated
   type PIMAGE_DEBUG_DIRECTORY is access IMAGE_DEBUG_DIRECTORY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_COFF_SYMBOLS_HEADER_x is record
      NumberOfSymbols : DWORD;
      LvaToFirstSymbol : DWORD;
      NumberOfLinenumbers : DWORD;
      LvaToFirstLinenumber : DWORD;
      RvaToFirstByteOfCode : DWORD;
      RvaToLastByteOfCode : DWORD;
      RvaToFirstByteOfData : DWORD;
      RvaToLastByteOfData : DWORD;
   end record;
   subtype IMAGE_COFF_SYMBOLS_HEADER is IMAGE_COFF_SYMBOLS_HEADER_x; -- CXType_Elaborated
   type PIMAGE_COFF_SYMBOLS_HEADER is access IMAGE_COFF_SYMBOLS_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type FPO_DATA_x is record
      ulOffStart : DWORD;
      cbProcSize : DWORD;
      cdwLocals : DWORD;
      cdwParams : WORD;
      cbProlog : WORD;
      cbRegs : WORD;
      fHasSEH : WORD;
      fUseBP : WORD;
      reserved : WORD;
      cbFrame : WORD;
   end record;
   subtype FPO_DATA is FPO_DATA_x; -- CXType_Elaborated
   type PFPO_DATA is access FPO_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_DEBUG_MISC_x is record
      DataType : DWORD;
      Length : DWORD;
      Unicode : BOOLEAN;
      Reserved : Void;
      Data : Void;
   end record;
   subtype IMAGE_DEBUG_MISC is IMAGE_DEBUG_MISC_x; -- CXType_Elaborated
   type PIMAGE_DEBUG_MISC is access IMAGE_DEBUG_MISC_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_FUNCTION_ENTRY_x is record
      StartingAddress : DWORD;
      EndingAddress : DWORD;
      EndOfPrologue : DWORD;
   end record;
   subtype IMAGE_FUNCTION_ENTRY is IMAGE_FUNCTION_ENTRY_x; -- CXType_Elaborated
   type PIMAGE_FUNCTION_ENTRY is access IMAGE_FUNCTION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_FUNCTION_ENTRY64_x is record
      StartingAddress : ULONGLONG;
      EndingAddress : ULONGLONG;
   end record;
   subtype IMAGE_FUNCTION_ENTRY64 is IMAGE_FUNCTION_ENTRY64_x; -- CXType_Elaborated
   type PIMAGE_FUNCTION_ENTRY64 is access IMAGE_FUNCTION_ENTRY64_x; -- CXType_Pointer - CXType_Elaborated
   type IMAGE_SEPARATE_DEBUG_HEADER_x is record
      Signature : WORD;
      Flags : WORD;
      Machine : WORD;
      Characteristics : WORD;
      TimeDateStamp : DWORD;
      CheckSum : DWORD;
      ImageBase : DWORD;
      SizeOfImage : DWORD;
      NumberOfSections : DWORD;
      ExportedNamesSize : DWORD;
      DebugDirectorySize : DWORD;
      SectionAlignment : DWORD;
      Reserved : Void;
   end record;
   subtype IMAGE_SEPARATE_DEBUG_HEADER is IMAGE_SEPARATE_DEBUG_HEADER_x; -- CXType_Elaborated
   type PIMAGE_SEPARATE_DEBUG_HEADER is access IMAGE_SEPARATE_DEBUG_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type NON_PAGED_DEBUG_INFO_x is record
      Signature : WORD;
      Flags : WORD;
      Size : DWORD;
      Machine : WORD;
      Characteristics : WORD;
      TimeDateStamp : DWORD;
      CheckSum : DWORD;
      SizeOfImage : DWORD;
      ImageBase : ULONGLONG;
   end record;
   subtype NON_PAGED_DEBUG_INFO is NON_PAGED_DEBUG_INFO_x; -- CXType_Elaborated
   type PNON_PAGED_DEBUG_INFO is access NON_PAGED_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type ImageArchitectureHeader_x is record
      AmaskValue : Interfaces.C.unsigned;
      field1 : Interfaces.C.Int;
      AmaskShift : Interfaces.C.unsigned;
      field2 : Interfaces.C.Int;
      FirstEntryRVA : DWORD;
   end record;
   subtype IMAGE_ARCHITECTURE_HEADER is ImageArchitectureHeader_x; -- CXType_Elaborated
   type PIMAGE_ARCHITECTURE_HEADER is access ImageArchitectureHeader_x; -- CXType_Pointer - CXType_Elaborated
   type ImageArchitectureEntry_x is record
      FixupInstRVA : DWORD;
      NewInst : DWORD;
   end record;
   subtype IMAGE_ARCHITECTURE_ENTRY is ImageArchitectureEntry_x; -- CXType_Elaborated
   type PIMAGE_ARCHITECTURE_ENTRY is access ImageArchitectureEntry_x; -- CXType_Pointer - CXType_Elaborated
   type IMPORT_OBJECT_HEADER is record
      Sig1 : WORD;
      Sig2 : WORD;
      Version : WORD;
      Machine : WORD;
      TimeDateStamp : DWORD;
      SizeOfData : DWORD;
      type_x : WORD;
      NameType : WORD;
      Reserved : WORD;
   end record;
   type IMPORT_OBJECT_TYPE is (
      IMPORT_OBJECT_CODE,
      IMPORT_OBJECT_DATA,
      IMPORT_OBJECT_CONST
   );
   for IMPORT_OBJECT_TYPE use (
      IMPORT_OBJECT_CODE => 0,
      IMPORT_OBJECT_DATA => 1,
      IMPORT_OBJECT_CONST => 2
   );
   for IMPORT_OBJECT_TYPE'Size use 32;
   type IMPORT_OBJECT_NAME_TYPE is (
      IMPORT_OBJECT_ORDINAL,
      IMPORT_OBJECT_NAME,
      IMPORT_OBJECT_NAME_NO_PREFIX,
      IMPORT_OBJECT_NAME_UNDECORATE,
      IMPORT_OBJECT_NAME_EXPORTAS
   );
   for IMPORT_OBJECT_NAME_TYPE use (
      IMPORT_OBJECT_ORDINAL => 0,
      IMPORT_OBJECT_NAME => 1,
      IMPORT_OBJECT_NAME_NO_PREFIX => 2,
      IMPORT_OBJECT_NAME_UNDECORATE => 3,
      IMPORT_OBJECT_NAME_EXPORTAS => 4
   );
   for IMPORT_OBJECT_NAME_TYPE'Size use 32;
   type ReplacesCorHdrNumericDefines is (
      COMIMAGE_FLAGS_ILONLY,
      COR_VERSION_MAJOR_V2,
      COMIMAGE_FLAGS_IL_LIBRARY,
      COR_VERSION_MINOR,
      COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN,
      COR_VTABLE_CALL_MOST_DERIVED,
      IMAGE_COR_EATJ_THUNK_SIZE,
      COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE,
      MAX_CLASS_NAME,
      COMIMAGE_FLAGS_TRACKDEBUGDATA,
      COMIMAGE_FLAGS_32BITPREFERRED
   );
   for ReplacesCorHdrNumericDefines use (
      COMIMAGE_FLAGS_ILONLY => 1,
      COR_VERSION_MAJOR_V2 => 2,
      COMIMAGE_FLAGS_IL_LIBRARY => 4,
      COR_VERSION_MINOR => 5,
      COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN => 8,
      COR_VTABLE_CALL_MOST_DERIVED => 16,
      IMAGE_COR_EATJ_THUNK_SIZE => 32,
      COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE => 255,
      MAX_CLASS_NAME => 1024,
      COMIMAGE_FLAGS_TRACKDEBUGDATA => 65536,
      COMIMAGE_FLAGS_32BITPREFERRED => 131072
   );
   for ReplacesCorHdrNumericDefines'Size use 32;
   type IMAGE_COR20_HEADER is record
      cb : DWORD;
      MajorRuntimeVersion : WORD;
      MinorRuntimeVersion : WORD;
      MetaData : IMAGE_DATA_DIRECTORY;
      Flags : DWORD;
      Resources : IMAGE_DATA_DIRECTORY;
      StrongNameSignature : IMAGE_DATA_DIRECTORY;
      CodeManagerTable : IMAGE_DATA_DIRECTORY;
      VTableFixups : IMAGE_DATA_DIRECTORY;
      ExportAddressTableJumps : IMAGE_DATA_DIRECTORY;
      ManagedNativeHeader : IMAGE_DATA_DIRECTORY;
   end record;
   type PIMAGE_COR20_HEADER is access IMAGE_COR20_HEADER; -- CXType_Pointer - CXType_Elaborated
   function RtlCaptureStackBackTrace(
      FramesToSkip : DWORD;
      FramesToCapture : DWORD;
      BackTrace : access PVOID;
      BackTraceHash : PDWORD
   ) return WORD;
   pragma import (C,RtlCaptureStackBackTrace,"RtlCaptureStackBackTrace");
   procedure RtlCaptureContext(
      ContextRecord : PCONTEXT
   );
   pragma import (C,RtlCaptureContext,"RtlCaptureContext");
   procedure RtlUnwind(
      TargetFrame : PVOID;
      TargetIp : PVOID;
      ExceptionRecord : PEXCEPTION_RECORD;
      ReturnValue : PVOID
   );
   pragma import (C,RtlUnwind,"RtlUnwind");
   function RtlAddFunctionTable(
      FunctionTable : PRUNTIME_FUNCTION;
      EntryCount : DWORD;
      BaseAddress : DWORD64
   ) return BOOLEAN;
   pragma import (C,RtlAddFunctionTable,"RtlAddFunctionTable");
   function RtlDeleteFunctionTable(
      FunctionTable : PRUNTIME_FUNCTION
   ) return BOOLEAN;
   pragma import (C,RtlDeleteFunctionTable,"RtlDeleteFunctionTable");
   function RtlInstallFunctionTableCallback(
      TableIdentifier : DWORD64;
      BaseAddress : DWORD64;
      Length : DWORD;
      Callback : PGET_RUNTIME_FUNCTION_CALLBACK;
      Context_x : PVOID;
      OutOfProcessCallbackDll : PCWSTR
   ) return BOOLEAN;
   pragma import (C,RtlInstallFunctionTableCallback,"RtlInstallFunctionTableCallback");
   function RtlAddGrowableFunctionTable(
      DynamicTable : access PVOID;
      FunctionTable : PRUNTIME_FUNCTION;
      EntryCount : DWORD;
      MaximumEntryCount : DWORD;
      RangeBase : ULONG_PTR;
      RangeEnd : ULONG_PTR
   ) return DWORD;
   pragma import (C,RtlAddGrowableFunctionTable,"RtlAddGrowableFunctionTable");
   procedure RtlGrowFunctionTable(
      DynamicTable : PVOID;
      NewEntryCount : DWORD
   );
   pragma import (C,RtlGrowFunctionTable,"RtlGrowFunctionTable");
   procedure RtlDeleteGrowableFunctionTable(
      DynamicTable : PVOID
   );
   pragma import (C,RtlDeleteGrowableFunctionTable,"RtlDeleteGrowableFunctionTable");
   function RtlLookupFunctionEntry(
      ControlPc : DWORD64;
      ImageBase : PDWORD64;
      HistoryTable : PUNWIND_HISTORY_TABLE
   ) return PRUNTIME_FUNCTION;
   pragma import (C,RtlLookupFunctionEntry,"RtlLookupFunctionEntry");
   procedure RtlRestoreContext(
      ContextRecord : PCONTEXT;
      ExceptionRecord : access Void
   );
   pragma import (C,RtlRestoreContext,"RtlRestoreContext");
   procedure RtlUnwindEx(
      TargetFrame : PVOID;
      TargetIp : PVOID;
      ExceptionRecord : PEXCEPTION_RECORD;
      ReturnValue : PVOID;
      ContextRecord : PCONTEXT;
      HistoryTable : PUNWIND_HISTORY_TABLE
   );
   pragma import (C,RtlUnwindEx,"RtlUnwindEx");
   function RtlVirtualUnwind(
      HandlerType : DWORD;
      ImageBase : DWORD64;
      ControlPc : DWORD64;
      FunctionEntry : PRUNTIME_FUNCTION;
      ContextRecord : PCONTEXT;
      HandlerData : access PVOID;
      EstablisherFrame : PDWORD64;
      ContextPointers : PKNONVOLATILE_CONTEXT_POINTERS
   ) return PEXCEPTION_ROUTINE;
   pragma import (C,RtlVirtualUnwind,"RtlVirtualUnwind");
   procedure RtlPcToFileHeader(
      PcValue : PVOID;
      BaseOfImage : access PVOID
   );
   pragma import (C,RtlPcToFileHeader,"RtlPcToFileHeader");
   function RtlCompareMemory(
      Source1 : access Void;
      Source2 : access Void;
      Length : SIZE_T
   ) return SIZE_T;
   pragma import (C,RtlCompareMemory,"RtlCompareMemory");
   type SLIST_ENTRY_x is record
      Next : access Void;
   end record;
   subtype SLIST_ENTRY is SLIST_ENTRY_x; -- CXType_Elaborated
   type PSLIST_ENTRY is access SLIST_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type SLIST_HEADER_x is null record; -- Union Placeholder [FIXME]
   subtype SLIST_HEADER is SLIST_HEADER_x; -- CXType_Elaborated
   type PSLIST_HEADER is access SLIST_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   procedure RtlInitializeSListHead(
      ListHead : PSLIST_HEADER
   );
   pragma import (C,RtlInitializeSListHead,"RtlInitializeSListHead");
   function RtlFirstEntrySList(
      ListHead : access constant SLIST_HEADER
   ) return PSLIST_ENTRY;
   pragma import (C,RtlFirstEntrySList,"RtlFirstEntrySList");
   function RtlInterlockedPopEntrySList(
      ListHead : PSLIST_HEADER
   ) return PSLIST_ENTRY;
   pragma import (C,RtlInterlockedPopEntrySList,"RtlInterlockedPopEntrySList");
   function RtlInterlockedPushEntrySList(
      ListHead : PSLIST_HEADER;
      ListEntry : PSLIST_ENTRY
   ) return PSLIST_ENTRY;
   pragma import (C,RtlInterlockedPushEntrySList,"RtlInterlockedPushEntrySList");
   function RtlInterlockedPushListSListEx(
      ListHead : PSLIST_HEADER;
      List : PSLIST_ENTRY;
      ListEnd : PSLIST_ENTRY;
      Count : DWORD
   ) return PSLIST_ENTRY;
   pragma import (C,RtlInterlockedPushListSListEx,"RtlInterlockedPushListSListEx");
   function RtlInterlockedFlushSList(
      ListHead : PSLIST_HEADER
   ) return PSLIST_ENTRY;
   pragma import (C,RtlInterlockedFlushSList,"RtlInterlockedFlushSList");
   function RtlQueryDepthSList(
      ListHead : PSLIST_HEADER
   ) return WORD;
   pragma import (C,RtlQueryDepthSList,"RtlQueryDepthSList");
   type RTL_RUN_ONCE_x is null record; -- Union Placeholder [FIXME]
   subtype RTL_RUN_ONCE is RTL_RUN_ONCE_x; -- CXType_Elaborated
   type PRTL_RUN_ONCE is access RTL_RUN_ONCE_x; -- CXType_Pointer - CXType_Elaborated
   type RTL_BARRIER_x is record
      Reserved1 : DWORD;
      Reserved2 : DWORD;
      Reserved3 : Void;
      Reserved4 : DWORD;
      Reserved5 : DWORD;
   end record;
   subtype RTL_BARRIER is RTL_BARRIER_x; -- CXType_Elaborated
   type PRTL_BARRIER is access RTL_BARRIER_x; -- CXType_Pointer - CXType_Elaborated
   procedure fastfail(
      Code : Interfaces.C.unsigned
   );
   pragma import (C,fastfail,"__fastfail");
   -- HEAP_MAKE_TAG_FLAGS(); -- inlined function not supported
   -- RtlSecureZeroMemory(); -- inlined function not supported
   type MESSAGE_RESOURCE_ENTRY_x is record
      Length : WORD;
      Flags : WORD;
      Text : Void;
   end record;
   subtype MESSAGE_RESOURCE_ENTRY is MESSAGE_RESOURCE_ENTRY_x; -- CXType_Elaborated
   type PMESSAGE_RESOURCE_ENTRY is access MESSAGE_RESOURCE_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type MESSAGE_RESOURCE_BLOCK_x is record
      LowId : DWORD;
      HighId : DWORD;
      OffsetToEntries : DWORD;
   end record;
   subtype MESSAGE_RESOURCE_BLOCK is MESSAGE_RESOURCE_BLOCK_x; -- CXType_Elaborated
   type PMESSAGE_RESOURCE_BLOCK is access MESSAGE_RESOURCE_BLOCK_x; -- CXType_Pointer - CXType_Elaborated
   type MESSAGE_RESOURCE_DATA_x is record
      NumberOfBlocks : DWORD;
      Blocks : Void;
   end record;
   subtype MESSAGE_RESOURCE_DATA is MESSAGE_RESOURCE_DATA_x; -- CXType_Elaborated
   type PMESSAGE_RESOURCE_DATA is access MESSAGE_RESOURCE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type OSVERSIONINFOA_x is record
      dwOSVersionInfoSize : DWORD;
      dwMajorVersion : DWORD;
      dwMinorVersion : DWORD;
      dwBuildNumber : DWORD;
      dwPlatformId : DWORD;
      szCSDVersion : Void;
   end record;
   subtype OSVERSIONINFOA is OSVERSIONINFOA_x; -- CXType_Elaborated
   type POSVERSIONINFOA is access OSVERSIONINFOA_x; -- CXType_Pointer - CXType_Elaborated
   type LPOSVERSIONINFOA is access OSVERSIONINFOA_x; -- CXType_Pointer - CXType_Elaborated
   type OSVERSIONINFOW_x is record
      dwOSVersionInfoSize : DWORD;
      dwMajorVersion : DWORD;
      dwMinorVersion : DWORD;
      dwBuildNumber : DWORD;
      dwPlatformId : DWORD;
      szCSDVersion : Void;
   end record;
   subtype OSVERSIONINFOW is OSVERSIONINFOW_x; -- CXType_Elaborated
   type POSVERSIONINFOW is access OSVERSIONINFOW_x; -- CXType_Pointer - CXType_Elaborated
   type LPOSVERSIONINFOW is access OSVERSIONINFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype RTL_OSVERSIONINFOW is OSVERSIONINFOW_x; -- CXType_Elaborated
   type PRTL_OSVERSIONINFOW is access OSVERSIONINFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype OSVERSIONINFO is OSVERSIONINFOA; -- CXType_Typedef
   subtype POSVERSIONINFO is POSVERSIONINFOA; -- CXType_Typedef
   subtype LPOSVERSIONINFO is LPOSVERSIONINFOA; -- CXType_Typedef
   type OSVERSIONINFOEXA_x is record
      dwOSVersionInfoSize : DWORD;
      dwMajorVersion : DWORD;
      dwMinorVersion : DWORD;
      dwBuildNumber : DWORD;
      dwPlatformId : DWORD;
      szCSDVersion : Void;
      wServicePackMajor : WORD;
      wServicePackMinor : WORD;
      wSuiteMask : WORD;
      wProductType : BYTE;
      wReserved : BYTE;
   end record;
   subtype OSVERSIONINFOEXA is OSVERSIONINFOEXA_x; -- CXType_Elaborated
   type POSVERSIONINFOEXA is access OSVERSIONINFOEXA_x; -- CXType_Pointer - CXType_Elaborated
   type LPOSVERSIONINFOEXA is access OSVERSIONINFOEXA_x; -- CXType_Pointer - CXType_Elaborated
   type OSVERSIONINFOEXW_x is record
      dwOSVersionInfoSize : DWORD;
      dwMajorVersion : DWORD;
      dwMinorVersion : DWORD;
      dwBuildNumber : DWORD;
      dwPlatformId : DWORD;
      szCSDVersion : Void;
      wServicePackMajor : WORD;
      wServicePackMinor : WORD;
      wSuiteMask : WORD;
      wProductType : BYTE;
      wReserved : BYTE;
   end record;
   subtype OSVERSIONINFOEXW is OSVERSIONINFOEXW_x; -- CXType_Elaborated
   type POSVERSIONINFOEXW is access OSVERSIONINFOEXW_x; -- CXType_Pointer - CXType_Elaborated
   type LPOSVERSIONINFOEXW is access OSVERSIONINFOEXW_x; -- CXType_Pointer - CXType_Elaborated
   subtype RTL_OSVERSIONINFOEXW is OSVERSIONINFOEXW_x; -- CXType_Elaborated
   type PRTL_OSVERSIONINFOEXW is access OSVERSIONINFOEXW_x; -- CXType_Pointer - CXType_Elaborated
   subtype OSVERSIONINFOEX is OSVERSIONINFOEXA; -- CXType_Typedef
   subtype POSVERSIONINFOEX is POSVERSIONINFOEXA; -- CXType_Typedef
   subtype LPOSVERSIONINFOEX is LPOSVERSIONINFOEXA; -- CXType_Typedef
   function VerSetConditionMask(
      ConditionMask : ULONGLONG;
      TypeMask : DWORD;
      Condition : BYTE
   ) return ULONGLONG;
   pragma import (C,VerSetConditionMask,"VerSetConditionMask");
   function RtlGetProductInfo(
      OSMajorVersion : DWORD;
      OSMinorVersion : DWORD;
      SpMajorVersion : DWORD;
      SpMinorVersion : DWORD;
      ReturnedProductType : PDWORD
   ) return BOOLEAN;
   pragma import (C,RtlGetProductInfo,"RtlGetProductInfo");
   type RTL_UMS_THREAD_INFO_CLASS_x is (
      UmsThreadInvalidInfoClass,
      UmsThreadUserContext,
      UmsThreadPriority,
      UmsThreadAffinity,
      UmsThreadTeb,
      UmsThreadIsSuspended,
      UmsThreadIsTerminated,
      UmsThreadMaxInfoClass
   );
   for RTL_UMS_THREAD_INFO_CLASS_x use (
      UmsThreadInvalidInfoClass => 0,
      UmsThreadUserContext => 1,
      UmsThreadPriority => 2,
      UmsThreadAffinity => 3,
      UmsThreadTeb => 4,
      UmsThreadIsSuspended => 5,
      UmsThreadIsTerminated => 6,
      UmsThreadMaxInfoClass => 7
   );
   for RTL_UMS_THREAD_INFO_CLASS_x'Size use 32;
   subtype RTL_UMS_THREAD_INFO_CLASS is RTL_UMS_THREAD_INFO_CLASS_x; -- CXType_Elaborated
   type PRTL_UMS_THREAD_INFO_CLASS is access RTL_UMS_THREAD_INFO_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   type RTL_UMS_SCHEDULER_REASON_x is (
      UmsSchedulerStartup,
      UmsSchedulerThreadBlocked,
      UmsSchedulerThreadYield
   );
   for RTL_UMS_SCHEDULER_REASON_x use (
      UmsSchedulerStartup => 0,
      UmsSchedulerThreadBlocked => 1,
      UmsSchedulerThreadYield => 2
   );
   for RTL_UMS_SCHEDULER_REASON_x'Size use 32;
   subtype RTL_UMS_SCHEDULER_REASON is RTL_UMS_SCHEDULER_REASON_x; -- CXType_Elaborated
   type PRTL_UMS_SCHEDULER_REASON is access RTL_UMS_SCHEDULER_REASON_x; -- CXType_Pointer - CXType_Elaborated
   subtype RTL_UMS_SCHEDULER_ENTRY_POINT is System.Address; -- [FIXME - CXType_FunctionProto] void (RTL_UMS_SCHEDULER_REASON, ULONG_PTR, PVOID)
   subtype PRTL_UMS_SCHEDULER_ENTRY_POINT is System.Address; -- [FIXME - CXType_Pointer - CXType_FunctionProto] void (RTL_UMS_SCHEDULER_REASON, ULONG_PTR, PVOID)
   function RtlCrc32(
      Buffer : access Void;
      Size : size_t;
      InitialCrc : DWORD
   ) return DWORD;
   pragma import (C,RtlCrc32,"RtlCrc32");
   function RtlCrc64(
      Buffer : access Void;
      Size : size_t;
      InitialCrc : ULONGLONG
   ) return ULONGLONG;
   pragma import (C,RtlCrc64,"RtlCrc64");
   type OS_DEPLOYEMENT_STATE_VALUES_x is (
      OS_DEPLOYMENT_STANDARD,
      OS_DEPLOYMENT_COMPACT
   );
   for OS_DEPLOYEMENT_STATE_VALUES_x use (
      OS_DEPLOYMENT_STANDARD => 1,
      OS_DEPLOYMENT_COMPACT => 2
   );
   for OS_DEPLOYEMENT_STATE_VALUES_x'Size use 32;
   subtype OS_DEPLOYEMENT_STATE_VALUES is OS_DEPLOYEMENT_STATE_VALUES_x; -- CXType_Elaborated
   function RtlOsDeploymentState(
      Flags : DWORD
   ) return OS_DEPLOYEMENT_STATE_VALUES;
   pragma import (C,RtlOsDeploymentState,"RtlOsDeploymentState");
   type NV_MEMORY_RANGE_x is record
      BaseAddress : access Void;
      Length : SIZE_T;
   end record;
   subtype NV_MEMORY_RANGE is NV_MEMORY_RANGE_x; -- CXType_Elaborated
   type PNV_MEMORY_RANGE is access NV_MEMORY_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   function RtlGetNonVolatileToken(
      NvBuffer : PVOID;
      Size : SIZE_T;
      NvToken : access PVOID
   ) return DWORD;
   pragma import (C,RtlGetNonVolatileToken,"RtlGetNonVolatileToken");
   function RtlFreeNonVolatileToken(
      NvToken : PVOID
   ) return DWORD;
   pragma import (C,RtlFreeNonVolatileToken,"RtlFreeNonVolatileToken");
   function RtlFlushNonVolatileMemory(
      NvToken : PVOID;
      NvBuffer : PVOID;
      Size : SIZE_T;
      Flags : DWORD
   ) return DWORD;
   pragma import (C,RtlFlushNonVolatileMemory,"RtlFlushNonVolatileMemory");
   function RtlDrainNonVolatileFlush(
      NvToken : PVOID
   ) return DWORD;
   pragma import (C,RtlDrainNonVolatileFlush,"RtlDrainNonVolatileFlush");
   function RtlWriteNonVolatileMemory(
      NvToken : PVOID;
      NvDestination : access Void;
      Source : access Void;
      Size : SIZE_T;
      Flags : DWORD
   ) return DWORD;
   pragma import (C,RtlWriteNonVolatileMemory,"RtlWriteNonVolatileMemory");
   function RtlFlushNonVolatileMemoryRanges(
      NvToken : PVOID;
      NvRanges : PNV_MEMORY_RANGE;
      NumRanges : SIZE_T;
      Flags : DWORD
   ) return DWORD;
   pragma import (C,RtlFlushNonVolatileMemoryRanges,"RtlFlushNonVolatileMemoryRanges");
   type CORRELATION_VECTOR is record
      Version : CHAR;
      Vector : Void;
   end record;
   type PCORRELATION_VECTOR is access CORRELATION_VECTOR; -- CXType_Pointer - CXType_Typedef
   function RtlInitializeCorrelationVector(
      CorrelationVector : PCORRELATION_VECTOR;
      Version : Interfaces.C.Int;
      Guid_x : access constant GUID
   ) return DWORD;
   pragma import (C,RtlInitializeCorrelationVector,"RtlInitializeCorrelationVector");
   function RtlIncrementCorrelationVector(
      CorrelationVector : PCORRELATION_VECTOR
   ) return DWORD;
   pragma import (C,RtlIncrementCorrelationVector,"RtlIncrementCorrelationVector");
   function RtlExtendCorrelationVector(
      CorrelationVector : PCORRELATION_VECTOR
   ) return DWORD;
   pragma import (C,RtlExtendCorrelationVector,"RtlExtendCorrelationVector");
   function RtlValidateCorrelationVector(
      Vector : PCORRELATION_VECTOR
   ) return DWORD;
   pragma import (C,RtlValidateCorrelationVector,"RtlValidateCorrelationVector");
   type CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG_x is record
      Size : DWORD;
      TriggerId : PCWSTR;
   end record;
   subtype CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG is CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG_x; -- CXType_Elaborated
   type PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG is access CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG_x; -- CXType_Pointer - CXType_Elaborated
   -- CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(); -- inlined function not supported
   function RtlRaiseCustomSystemEventTrigger(
      TriggerConfig : PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
   ) return DWORD;
   pragma import (C,RtlRaiseCustomSystemEventTrigger,"RtlRaiseCustomSystemEventTrigger");
   type IMAGE_POLICY_ENTRY_TYPE_x is (
      ImagePolicyEntryTypeNone,
      ImagePolicyEntryTypeBool,
      ImagePolicyEntryTypeInt8,
      ImagePolicyEntryTypeUInt8,
      ImagePolicyEntryTypeInt16,
      ImagePolicyEntryTypeUInt16,
      ImagePolicyEntryTypeInt32,
      ImagePolicyEntryTypeUInt32,
      ImagePolicyEntryTypeInt64,
      ImagePolicyEntryTypeUInt64,
      ImagePolicyEntryTypeAnsiString,
      ImagePolicyEntryTypeUnicodeString,
      ImagePolicyEntryTypeOverride,
      ImagePolicyEntryTypeMaximum
   );
   for IMAGE_POLICY_ENTRY_TYPE_x use (
      ImagePolicyEntryTypeNone => 0,
      ImagePolicyEntryTypeBool => 1,
      ImagePolicyEntryTypeInt8 => 2,
      ImagePolicyEntryTypeUInt8 => 3,
      ImagePolicyEntryTypeInt16 => 4,
      ImagePolicyEntryTypeUInt16 => 5,
      ImagePolicyEntryTypeInt32 => 6,
      ImagePolicyEntryTypeUInt32 => 7,
      ImagePolicyEntryTypeInt64 => 8,
      ImagePolicyEntryTypeUInt64 => 9,
      ImagePolicyEntryTypeAnsiString => 10,
      ImagePolicyEntryTypeUnicodeString => 11,
      ImagePolicyEntryTypeOverride => 12,
      ImagePolicyEntryTypeMaximum => 13
   );
   for IMAGE_POLICY_ENTRY_TYPE_x'Size use 32;
   subtype IMAGE_POLICY_ENTRY_TYPE is IMAGE_POLICY_ENTRY_TYPE_x; -- CXType_Elaborated
   type IMAGE_POLICY_ID_x is (
      ImagePolicyIdNone,
      ImagePolicyIdEtw,
      ImagePolicyIdDebug,
      ImagePolicyIdCrashDump,
      ImagePolicyIdCrashDumpKey,
      ImagePolicyIdCrashDumpKeyGuid,
      ImagePolicyIdParentSd,
      ImagePolicyIdParentSdRev,
      ImagePolicyIdSvn,
      ImagePolicyIdDeviceId,
      ImagePolicyIdCapability,
      ImagePolicyIdScenarioId,
      ImagePolicyIdMaximum
   );
   for IMAGE_POLICY_ID_x use (
      ImagePolicyIdNone => 0,
      ImagePolicyIdEtw => 1,
      ImagePolicyIdDebug => 2,
      ImagePolicyIdCrashDump => 3,
      ImagePolicyIdCrashDumpKey => 4,
      ImagePolicyIdCrashDumpKeyGuid => 5,
      ImagePolicyIdParentSd => 6,
      ImagePolicyIdParentSdRev => 7,
      ImagePolicyIdSvn => 8,
      ImagePolicyIdDeviceId => 9,
      ImagePolicyIdCapability => 10,
      ImagePolicyIdScenarioId => 11,
      ImagePolicyIdMaximum => 12
   );
   for IMAGE_POLICY_ID_x'Size use 32;
   subtype IMAGE_POLICY_ID is IMAGE_POLICY_ID_x; -- CXType_Elaborated
   type IMAGE_POLICY_ENTRY_x is record
      type_x : IMAGE_POLICY_ENTRY_TYPE;
      PolicyId : IMAGE_POLICY_ID;
      u : Void;
   end record;
   subtype IMAGE_POLICY_ENTRY is IMAGE_POLICY_ENTRY_x; -- CXType_Elaborated
   type PCIMAGE_POLICY_ENTRY is access constant IMAGE_POLICY_ENTRY; -- CXType_Pointer - CXType_Typedef
   type IMAGE_POLICY_METADATA_x is record
      Version : BYTE;
      Reserved0 : Void;
      ApplicationId : ULONGLONG;
      Policies : Void;
   end record;
   subtype IMAGE_POLICY_METADATA is IMAGE_POLICY_METADATA_x; -- CXType_Elaborated
   type PCIMAGE_POLICY_METADATA is access constant IMAGE_POLICY_METADATA; -- CXType_Pointer - CXType_Typedef
   type RTL_CRITICAL_SECTION_DEBUG_x is record
      type_x : WORD;
      CreatorBackTraceIndex : WORD;
      CriticalSection : access Void;
      ProcessLocksList : LIST_ENTRY;
      EntryCount : DWORD;
      ContentionCount : DWORD;
      Flags : DWORD;
      CreatorBackTraceIndexHigh : WORD;
      SpareWORD : WORD;
   end record;
   type RTL_CRITICAL_SECTION_x; -- Forward Declaration
   subtype RTL_CRITICAL_SECTION_DEBUG is RTL_CRITICAL_SECTION_DEBUG_x; -- CXType_Elaborated
   type PRTL_CRITICAL_SECTION_DEBUG is access RTL_CRITICAL_SECTION_DEBUG_x; -- CXType_Pointer - CXType_Elaborated
   subtype RTL_RESOURCE_DEBUG is RTL_CRITICAL_SECTION_DEBUG_x; -- CXType_Elaborated
   type PRTL_RESOURCE_DEBUG is access RTL_CRITICAL_SECTION_DEBUG_x; -- CXType_Pointer - CXType_Elaborated
   type RTL_CRITICAL_SECTION_x is record
      DebugInfo : PRTL_CRITICAL_SECTION_DEBUG;
      LockCount : LONG;
      RecursionCount : LONG;
      OwningThread : HANDLE;
      LockSemaphore : HANDLE;
      SpinCount : ULONG_PTR;
   end record;
   subtype RTL_CRITICAL_SECTION is RTL_CRITICAL_SECTION_x; -- CXType_Elaborated
   type PRTL_CRITICAL_SECTION is access RTL_CRITICAL_SECTION_x; -- CXType_Pointer - CXType_Elaborated
   type RTL_SRWLOCK_x is record
      Ptr : PVOID;
   end record;
   subtype RTL_SRWLOCK is RTL_SRWLOCK_x; -- CXType_Elaborated
   type PRTL_SRWLOCK is access RTL_SRWLOCK_x; -- CXType_Pointer - CXType_Elaborated
   type RTL_CONDITION_VARIABLE_x is record
      Ptr : PVOID;
   end record;
   subtype RTL_CONDITION_VARIABLE is RTL_CONDITION_VARIABLE_x; -- CXType_Elaborated
   type PRTL_CONDITION_VARIABLE is access RTL_CONDITION_VARIABLE_x; -- CXType_Pointer - CXType_Elaborated
   subtype PAPCFUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (ULONG_PTR)
   subtype PVECTORED_EXCEPTION_HANDLER is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LONG (struct _EXCEPTION_POINTERS *)
   type HEAP_INFORMATION_CLASS_x is (
      HeapCompatibilityInformation,
      HeapEnableTerminationOnCorruption,
      HeapOptimizeResources
   );
   for HEAP_INFORMATION_CLASS_x use (
      HeapCompatibilityInformation => 0,
      HeapEnableTerminationOnCorruption => 1,
      HeapOptimizeResources => 3
   );
   for HEAP_INFORMATION_CLASS_x'Size use 32;
   subtype HEAP_INFORMATION_CLASS is HEAP_INFORMATION_CLASS_x; -- CXType_Elaborated
   type HEAP_OPTIMIZE_RESOURCES_INFORMATION_x is record
      Version : DWORD;
      Flags : DWORD;
   end record;
   subtype HEAP_OPTIMIZE_RESOURCES_INFORMATION is HEAP_OPTIMIZE_RESOURCES_INFORMATION_x; -- CXType_Elaborated
   type PHEAP_OPTIMIZE_RESOURCES_INFORMATION is access HEAP_OPTIMIZE_RESOURCES_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   subtype WAITORTIMERCALLBACKFUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PVOID, BOOLEAN)
   subtype WORKERCALLBACKFUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PVOID)
   subtype APC_CALLBACK_FUNCTION is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (DWORD, PVOID, PVOID)
   subtype WAITORTIMERCALLBACK is WAITORTIMERCALLBACKFUNC; -- CXType_Typedef
   subtype PFLS_CALLBACK_FUNCTION is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PVOID)
   subtype PSECURE_MEMORY_CACHE_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOLEAN (PVOID, SIZE_T)
   type ACTIVATION_CONTEXT_INFO_CLASS_x is (
      ActivationContextBasicInformation,
      ActivationContextDetailedInformation,
      AssemblyDetailedInformationInActivationContext,
      FileInformationInAssemblyOfAssemblyInActivationContext,
      RunlevelInformationInActivationContext,
      CompatibilityInformationInActivationContext,
      ActivationContextManifestResourceName,
      MaxActivationContextInfoClass
   );
   for ACTIVATION_CONTEXT_INFO_CLASS_x use (
      ActivationContextBasicInformation => 1,
      ActivationContextDetailedInformation => 2,
      AssemblyDetailedInformationInActivationContext => 3,
      FileInformationInAssemblyOfAssemblyInActivationContext => 4,
      RunlevelInformationInActivationContext => 5,
      CompatibilityInformationInActivationContext => 6,
      ActivationContextManifestResourceName => 7,
      MaxActivationContextInfoClass => 8
   );
   for ACTIVATION_CONTEXT_INFO_CLASS_x'Size use 32;
   subtype ACTIVATION_CONTEXT_INFO_CLASS is ACTIVATION_CONTEXT_INFO_CLASS_x; -- CXType_Elaborated
   type ACTIVATION_CONTEXT_QUERY_INDEX_x is record
      ulAssemblyIndex : DWORD;
      ulFileIndexInAssembly : DWORD;
   end record;
   subtype ACTIVATION_CONTEXT_QUERY_INDEX is ACTIVATION_CONTEXT_QUERY_INDEX_x; -- CXType_Elaborated
   type PACTIVATION_CONTEXT_QUERY_INDEX is access ACTIVATION_CONTEXT_QUERY_INDEX_x; -- CXType_Pointer - CXType_Elaborated
   type PCACTIVATION_CONTEXT_QUERY_INDEX is access constant ACTIVATION_CONTEXT_QUERY_INDEX_x; -- CXType_Pointer - CXType_Elaborated
   type ASSEMBLY_FILE_DETAILED_INFORMATION_x is record
      ulFlags : DWORD;
      ulFilenameLength : DWORD;
      ulPathLength : DWORD;
      lpFileName : PCWSTR;
      lpFilePath : PCWSTR;
   end record;
   subtype ASSEMBLY_FILE_DETAILED_INFORMATION is ASSEMBLY_FILE_DETAILED_INFORMATION_x; -- CXType_Elaborated
   type PASSEMBLY_FILE_DETAILED_INFORMATION is access ASSEMBLY_FILE_DETAILED_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PCASSEMBLY_FILE_DETAILED_INFORMATION is access constant ASSEMBLY_FILE_DETAILED_INFORMATION; -- CXType_Pointer - CXType_Typedef
   type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION_x is record
      ulFlags : DWORD;
      ulEncodedAssemblyIdentityLength : DWORD;
      ulManifestPathType : DWORD;
      ulManifestPathLength : DWORD;
      liManifestLastWriteTime : LARGE_INTEGER;
      ulPolicyPathType : DWORD;
      ulPolicyPathLength : DWORD;
      liPolicyLastWriteTime : LARGE_INTEGER;
      ulMetadataSatelliteRosterIndex : DWORD;
      ulManifestVersionMajor : DWORD;
      ulManifestVersionMinor : DWORD;
      ulPolicyVersionMajor : DWORD;
      ulPolicyVersionMinor : DWORD;
      ulAssemblyDirectoryNameLength : DWORD;
      lpAssemblyEncodedAssemblyIdentity : PCWSTR;
      lpAssemblyManifestPath : PCWSTR;
      lpAssemblyPolicyPath : PCWSTR;
      lpAssemblyDirectoryName : PCWSTR;
      ulFileCount : DWORD;
   end record;
   subtype ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION is ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION_x; -- CXType_Elaborated
   type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION is access ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION is access constant ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type ACTCTX_REQUESTED_RUN_LEVEL is (
      ACTCTX_RUN_LEVEL_UNSPECIFIED,
      ACTCTX_RUN_LEVEL_AS_INVOKER,
      ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
      ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
      ACTCTX_RUN_LEVEL_NUMBERS
   );
   for ACTCTX_REQUESTED_RUN_LEVEL use (
      ACTCTX_RUN_LEVEL_UNSPECIFIED => 0,
      ACTCTX_RUN_LEVEL_AS_INVOKER => 1,
      ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE => 2,
      ACTCTX_RUN_LEVEL_REQUIRE_ADMIN => 3,
      ACTCTX_RUN_LEVEL_NUMBERS => 4
   );
   for ACTCTX_REQUESTED_RUN_LEVEL'Size use 32;
   type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION_x is record
      ulFlags : DWORD;
      RunLevel : ACTCTX_REQUESTED_RUN_LEVEL;
      UiAccess : DWORD;
   end record;
   subtype ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION is ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION_x; -- CXType_Elaborated
   type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION is access ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION is access constant ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type ACTCTX_COMPATIBILITY_ELEMENT_TYPE is (
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
   );
   for ACTCTX_COMPATIBILITY_ELEMENT_TYPE use (
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN => 0,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS => 1,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION => 2
   );
   for ACTCTX_COMPATIBILITY_ELEMENT_TYPE'Size use 32;
   type COMPATIBILITY_CONTEXT_ELEMENT_x is record
      Id : GUID;
      type_x : ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
   end record;
   subtype COMPATIBILITY_CONTEXT_ELEMENT is COMPATIBILITY_CONTEXT_ELEMENT_x; -- CXType_Elaborated
   type PCOMPATIBILITY_CONTEXT_ELEMENT is access COMPATIBILITY_CONTEXT_ELEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCOMPATIBILITY_CONTEXT_ELEMENT is access constant COMPATIBILITY_CONTEXT_ELEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_x is record
      ElementCount : DWORD;
      Elements : Void;
   end record;
   subtype ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION is ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_x; -- CXType_Elaborated
   type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION is access ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION is access constant ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type SUPPORTED_OS_INFO_x is record
      MajorVersion : WORD;
      MinorVersion : WORD;
   end record;
   subtype SUPPORTED_OS_INFO is SUPPORTED_OS_INFO_x; -- CXType_Elaborated
   type PSUPPORTED_OS_INFO is access SUPPORTED_OS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type ACTIVATION_CONTEXT_DETAILED_INFORMATION_x is record
      dwFlags : DWORD;
      ulFormatVersion : DWORD;
      ulAssemblyCount : DWORD;
      ulRootManifestPathType : DWORD;
      ulRootManifestPathChars : DWORD;
      ulRootConfigurationPathType : DWORD;
      ulRootConfigurationPathChars : DWORD;
      ulAppDirPathType : DWORD;
      ulAppDirPathChars : DWORD;
      lpRootManifestPath : PCWSTR;
      lpRootConfigurationPath : PCWSTR;
      lpAppDirPath : PCWSTR;
   end record;
   subtype ACTIVATION_CONTEXT_DETAILED_INFORMATION is ACTIVATION_CONTEXT_DETAILED_INFORMATION_x; -- CXType_Elaborated
   type PACTIVATION_CONTEXT_DETAILED_INFORMATION is access ACTIVATION_CONTEXT_DETAILED_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PCACTIVATION_CONTEXT_DETAILED_INFORMATION is access constant ACTIVATION_CONTEXT_DETAILED_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type HARDWARE_COUNTER_DATA_x is record
      type_x : HARDWARE_COUNTER_TYPE;
      Reserved : DWORD;
      Value : DWORD64;
   end record;
   subtype HARDWARE_COUNTER_DATA is HARDWARE_COUNTER_DATA_x; -- CXType_Elaborated
   type PHARDWARE_COUNTER_DATA is access HARDWARE_COUNTER_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type PERFORMANCE_DATA_x is record
      Size : WORD;
      Version : BYTE;
      HwCountersCount : BYTE;
      ContextSwitchCount : DWORD;
      WaitReasonBitMap : DWORD64;
      CycleTime : DWORD64;
      RetryCount : DWORD;
      Reserved : DWORD;
      HwCounters : Void;
   end record;
   subtype PERFORMANCE_DATA is PERFORMANCE_DATA_x; -- CXType_Elaborated
   type PPERFORMANCE_DATA is access PERFORMANCE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   procedure RtlGetDeviceFamilyInfoEnum(
      pullUAPInfo : access ULONGLONG;
      pulDeviceFamily : access DWORD;
      pulDeviceForm : access DWORD
   );
   pragma import (C,RtlGetDeviceFamilyInfoEnum,"RtlGetDeviceFamilyInfoEnum");
   function RtlConvertDeviceFamilyInfoToString(
      pulDeviceFamilyBufferSize : PDWORD;
      pulDeviceFormBufferSize : PDWORD;
      DeviceFamily : PWSTR;
      DeviceForm : PWSTR
   ) return DWORD;
   pragma import (C,RtlConvertDeviceFamilyInfoToString,"RtlConvertDeviceFamilyInfoToString");
   function RtlSwitchedVVI(
      VersionInfo : PRTL_OSVERSIONINFOEXW;
      TypeMask : DWORD;
      ConditionMask : ULONGLONG
   ) return DWORD;
   pragma import (C,RtlSwitchedVVI,"RtlSwitchedVVI");
   type EVENTLOGRECORD_x is record
      Length : DWORD;
      Reserved : DWORD;
      RecordNumber : DWORD;
      TimeGenerated : DWORD;
      TimeWritten : DWORD;
      EventID : DWORD;
      EventType : WORD;
      NumStrings : WORD;
      EventCategory : WORD;
      ReservedFlags : WORD;
      ClosingRecordNumber : DWORD;
      StringOffset : DWORD;
      UserSidLength : DWORD;
      UserSidOffset : DWORD;
      DataLength : DWORD;
      DataOffset : DWORD;
   end record;
   subtype EVENTLOGRECORD is EVENTLOGRECORD_x; -- CXType_Elaborated
   type PEVENTLOGRECORD is access EVENTLOGRECORD_x; -- CXType_Pointer - CXType_Elaborated
   type EVENTSFORLOGFILE_x; -- Forward Declaration
   subtype EVENTSFORLOGFILE is EVENTSFORLOGFILE_x; -- CXType_Elaborated
   type PEVENTSFORLOGFILE is access EVENTSFORLOGFILE_x; -- CXType_Pointer - CXType_Elaborated
   type PACKEDEVENTINFO_x; -- Forward Declaration
   subtype PACKEDEVENTINFO is PACKEDEVENTINFO_x; -- CXType_Elaborated
   type PPACKEDEVENTINFO is access PACKEDEVENTINFO_x; -- CXType_Pointer - CXType_Elaborated
   type EVENTSFORLOGFILE_x is record
      ulSize : DWORD;
      szLogicalLogFile : Void;
      ulNumRecords : DWORD;
      pEventLogRecords : Void;
   end record;
   type PACKEDEVENTINFO_x is record
      ulSize : DWORD;
      ulNumEventsForLogFile : DWORD;
      ulOffsets : Void;
   end record;
   type CM_SERVICE_NODE_TYPE_x is (
      DriverType,
      FileSystemType,
      AdapterType,
      RecognizerType,
      Win32ServiceOwnProcess,
      Win32ServiceShareProcess
   );
   for CM_SERVICE_NODE_TYPE_x use (
      DriverType => 1,
      FileSystemType => 2,
      AdapterType => 4,
      RecognizerType => 8,
      Win32ServiceOwnProcess => 16,
      Win32ServiceShareProcess => 32
   );
   for CM_SERVICE_NODE_TYPE_x'Size use 32;
   subtype SERVICE_NODE_TYPE is CM_SERVICE_NODE_TYPE_x; -- CXType_Elaborated
   type CM_SERVICE_LOAD_TYPE_x is (
      BootLoad,
      SystemLoad,
      AutoLoad,
      DemandLoad,
      DisableLoad
   );
   for CM_SERVICE_LOAD_TYPE_x use (
      BootLoad => 0,
      SystemLoad => 1,
      AutoLoad => 2,
      DemandLoad => 3,
      DisableLoad => 4
   );
   for CM_SERVICE_LOAD_TYPE_x'Size use 32;
   subtype SERVICE_LOAD_TYPE is CM_SERVICE_LOAD_TYPE_x; -- CXType_Elaborated
   type CM_ERROR_CONTROL_TYPE_x is (
      IgnoreError,
      NormalError,
      SevereError,
      CriticalError
   );
   for CM_ERROR_CONTROL_TYPE_x use (
      IgnoreError => 0,
      NormalError => 1,
      SevereError => 2,
      CriticalError => 3
   );
   for CM_ERROR_CONTROL_TYPE_x'Size use 32;
   subtype SERVICE_ERROR_TYPE is CM_ERROR_CONTROL_TYPE_x; -- CXType_Elaborated
   type TAPE_ERASE_x is record
      type_x : DWORD;
      Immediate : BOOLEAN;
   end record;
   subtype TAPE_ERASE is TAPE_ERASE_x; -- CXType_Elaborated
   type PTAPE_ERASE is access TAPE_ERASE_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_PREPARE_x is record
      Operation : DWORD;
      Immediate : BOOLEAN;
   end record;
   subtype TAPE_PREPARE is TAPE_PREPARE_x; -- CXType_Elaborated
   type PTAPE_PREPARE is access TAPE_PREPARE_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_WRITE_MARKS_x is record
      type_x : DWORD;
      Count : DWORD;
      Immediate : BOOLEAN;
   end record;
   subtype TAPE_WRITE_MARKS is TAPE_WRITE_MARKS_x; -- CXType_Elaborated
   type PTAPE_WRITE_MARKS is access TAPE_WRITE_MARKS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_GET_POSITION_x is record
      type_x : DWORD;
      Partition : DWORD;
      Offset : LARGE_INTEGER;
   end record;
   subtype TAPE_GET_POSITION is TAPE_GET_POSITION_x; -- CXType_Elaborated
   type PTAPE_GET_POSITION is access TAPE_GET_POSITION_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_SET_POSITION_x is record
      Method : DWORD;
      Partition : DWORD;
      Offset : LARGE_INTEGER;
      Immediate : BOOLEAN;
   end record;
   subtype TAPE_SET_POSITION is TAPE_SET_POSITION_x; -- CXType_Elaborated
   type PTAPE_SET_POSITION is access TAPE_SET_POSITION_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_GET_DRIVE_PARAMETERS_x is record
      ECC : BOOLEAN;
      Compression : BOOLEAN;
      DataPadding : BOOLEAN;
      ReportSetmarks : BOOLEAN;
      DefaultBlockSize : DWORD;
      MaximumBlockSize : DWORD;
      MinimumBlockSize : DWORD;
      MaximumPartitionCount : DWORD;
      FeaturesLow : DWORD;
      FeaturesHigh : DWORD;
      EOTWarningZoneSize : DWORD;
   end record;
   subtype TAPE_GET_DRIVE_PARAMETERS is TAPE_GET_DRIVE_PARAMETERS_x; -- CXType_Elaborated
   type PTAPE_GET_DRIVE_PARAMETERS is access TAPE_GET_DRIVE_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_SET_DRIVE_PARAMETERS_x is record
      ECC : BOOLEAN;
      Compression : BOOLEAN;
      DataPadding : BOOLEAN;
      ReportSetmarks : BOOLEAN;
      EOTWarningZoneSize : DWORD;
   end record;
   subtype TAPE_SET_DRIVE_PARAMETERS is TAPE_SET_DRIVE_PARAMETERS_x; -- CXType_Elaborated
   type PTAPE_SET_DRIVE_PARAMETERS is access TAPE_SET_DRIVE_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_GET_MEDIA_PARAMETERS_x is record
      Capacity : LARGE_INTEGER;
      Remaining : LARGE_INTEGER;
      BlockSize : DWORD;
      PartitionCount : DWORD;
      WriteProtected : BOOLEAN;
   end record;
   subtype TAPE_GET_MEDIA_PARAMETERS is TAPE_GET_MEDIA_PARAMETERS_x; -- CXType_Elaborated
   type PTAPE_GET_MEDIA_PARAMETERS is access TAPE_GET_MEDIA_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_SET_MEDIA_PARAMETERS_x is record
      BlockSize : DWORD;
   end record;
   subtype TAPE_SET_MEDIA_PARAMETERS is TAPE_SET_MEDIA_PARAMETERS_x; -- CXType_Elaborated
   type PTAPE_SET_MEDIA_PARAMETERS is access TAPE_SET_MEDIA_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_CREATE_PARTITION_x is record
      Method : DWORD;
      Count : DWORD;
      Size : DWORD;
   end record;
   subtype TAPE_CREATE_PARTITION is TAPE_CREATE_PARTITION_x; -- CXType_Elaborated
   type PTAPE_CREATE_PARTITION is access TAPE_CREATE_PARTITION_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_WMI_OPERATIONS_x is record
      Method : DWORD;
      DataBufferSize : DWORD;
      DataBuffer : PVOID;
   end record;
   subtype TAPE_WMI_OPERATIONS is TAPE_WMI_OPERATIONS_x; -- CXType_Elaborated
   type PTAPE_WMI_OPERATIONS is access TAPE_WMI_OPERATIONS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_DRIVE_PROBLEM_TYPE_x is (
      TapeDriveProblemNone,
      TapeDriveReadWriteWarning,
      TapeDriveReadWriteError,
      TapeDriveReadWarning,
      TapeDriveWriteWarning,
      TapeDriveReadError,
      TapeDriveWriteError,
      TapeDriveHardwareError,
      TapeDriveUnsupportedMedia,
      TapeDriveScsiConnectionError,
      TapeDriveTimetoClean,
      TapeDriveCleanDriveNow,
      TapeDriveMediaLifeExpired,
      TapeDriveSnappedTape
   );
   for TAPE_DRIVE_PROBLEM_TYPE_x use (
      TapeDriveProblemNone => 0,
      TapeDriveReadWriteWarning => 1,
      TapeDriveReadWriteError => 2,
      TapeDriveReadWarning => 3,
      TapeDriveWriteWarning => 4,
      TapeDriveReadError => 5,
      TapeDriveWriteError => 6,
      TapeDriveHardwareError => 7,
      TapeDriveUnsupportedMedia => 8,
      TapeDriveScsiConnectionError => 9,
      TapeDriveTimetoClean => 10,
      TapeDriveCleanDriveNow => 11,
      TapeDriveMediaLifeExpired => 12,
      TapeDriveSnappedTape => 13
   );
   for TAPE_DRIVE_PROBLEM_TYPE_x'Size use 32;
   subtype TAPE_DRIVE_PROBLEM_TYPE is TAPE_DRIVE_PROBLEM_TYPE_x; -- CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\ktmtypes.h>
   subtype UOW is GUID; -- CXType_Typedef
   type PUOW is access GUID; -- CXType_Pointer - CXType_Typedef
   subtype CRM_PROTOCOL_ID is GUID; -- CXType_Typedef
   type PCRM_PROTOCOL_ID is access GUID; -- CXType_Pointer - CXType_Typedef
   subtype NOTIFICATION_MASK is ULONG; -- CXType_Typedef
   type TRANSACTION_NOTIFICATION_x is record
      TransactionKey : PVOID;
      TransactionNotification : ULONG;
      TmVirtualClock : LARGE_INTEGER;
      ArgumentLength : ULONG;
   end record;
   subtype TRANSACTION_NOTIFICATION is TRANSACTION_NOTIFICATION_x; -- CXType_Elaborated
   type PTRANSACTION_NOTIFICATION is access TRANSACTION_NOTIFICATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT_x is record
      EnlistmentId : GUID;
      UOW_x : UOW;
   end record;
   subtype TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT is TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT_x; -- CXType_Elaborated
   type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT is access TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT_x is record
      TmIdentity : GUID;
      Flags : ULONG;
   end record;
   subtype TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT is TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT_x; -- CXType_Elaborated
   type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT is access TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT_x; -- CXType_Pointer - CXType_Elaborated
   subtype SAVEPOINT_ID is ULONG; -- CXType_Typedef
   type PSAVEPOINT_ID is access ULONG; -- CXType_Pointer - CXType_Typedef
   type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT_x is record
      SavepointId : SAVEPOINT_ID;
   end record;
   subtype TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT is TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT_x; -- CXType_Elaborated
   type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT is access TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT_x is record
      PropagationCookie : ULONG;
      UOW_x : GUID;
      TmIdentity : GUID;
      BufferLength : ULONG;
   end record;
   subtype TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT is TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT_x; -- CXType_Elaborated
   type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT is access TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT_x is record
      MarshalCookie : ULONG;
      UOW_x : GUID;
   end record;
   subtype TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT is TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT_x; -- CXType_Elaborated
   type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT is access TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT_x; -- CXType_Pointer - CXType_Elaborated
   subtype TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT is TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT; -- CXType_Typedef
   type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT is access TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT; -- CXType_Pointer - CXType_Typedef
   type KCRM_MARSHAL_HEADER_x is record
      VersionMajor : ULONG;
      VersionMinor : ULONG;
      NumProtocols : ULONG;
      Unused : ULONG;
   end record;
   subtype KCRM_MARSHAL_HEADER is KCRM_MARSHAL_HEADER_x; -- CXType_Elaborated
   type PKCRM_MARSHAL_HEADER is access KCRM_MARSHAL_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type PRKCRM_MARSHAL_HEADER is access KCRM_MARSHAL_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type KCRM_TRANSACTION_BLOB_x is record
      UOW_x : UOW;
      TmIdentity : GUID;
      IsolationLevel : ULONG;
      IsolationFlags : ULONG;
      Timeout : ULONG;
      Description : Void;
   end record;
   subtype KCRM_TRANSACTION_BLOB is KCRM_TRANSACTION_BLOB_x; -- CXType_Elaborated
   type PKCRM_TRANSACTION_BLOB is access KCRM_TRANSACTION_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type PRKCRM_TRANSACTION_BLOB is access KCRM_TRANSACTION_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type KCRM_PROTOCOL_BLOB_x is record
      ProtocolId : CRM_PROTOCOL_ID;
      StaticInfoLength : ULONG;
      TransactionIdInfoLength : ULONG;
      Unused1 : ULONG;
      Unused2 : ULONG;
   end record;
   subtype KCRM_PROTOCOL_BLOB is KCRM_PROTOCOL_BLOB_x; -- CXType_Elaborated
   type PKCRM_PROTOCOL_BLOB is access KCRM_PROTOCOL_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type PRKCRM_PROTOCOL_BLOB is access KCRM_PROTOCOL_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   type TRANSACTION_OUTCOME_x is (
      TransactionOutcomeUndetermined,
      TransactionOutcomeCommitted,
      TransactionOutcomeAborted
   );
   for TRANSACTION_OUTCOME_x use (
      TransactionOutcomeUndetermined => 1,
      TransactionOutcomeCommitted => 2,
      TransactionOutcomeAborted => 3
   );
   for TRANSACTION_OUTCOME_x'Size use 32;
   subtype TRANSACTION_OUTCOME is TRANSACTION_OUTCOME_x; -- CXType_Elaborated
   type TRANSACTION_STATE_x is (
      TransactionStateNormal,
      TransactionStateIndoubt,
      TransactionStateCommittedNotify
   );
   for TRANSACTION_STATE_x use (
      TransactionStateNormal => 1,
      TransactionStateIndoubt => 2,
      TransactionStateCommittedNotify => 3
   );
   for TRANSACTION_STATE_x'Size use 32;
   subtype TRANSACTION_STATE is TRANSACTION_STATE_x; -- CXType_Elaborated
   type TRANSACTION_BASIC_INFORMATION_x is record
      TransactionId : GUID;
      State : DWORD;
      Outcome : DWORD;
   end record;
   subtype TRANSACTION_BASIC_INFORMATION is TRANSACTION_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTION_BASIC_INFORMATION is access TRANSACTION_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTIONMANAGER_BASIC_INFORMATION_x is record
      TmIdentity : GUID;
      VirtualClock : LARGE_INTEGER;
   end record;
   subtype TRANSACTIONMANAGER_BASIC_INFORMATION is TRANSACTIONMANAGER_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTIONMANAGER_BASIC_INFORMATION is access TRANSACTIONMANAGER_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTIONMANAGER_LOG_INFORMATION_x is record
      LogIdentity : GUID;
   end record;
   subtype TRANSACTIONMANAGER_LOG_INFORMATION is TRANSACTIONMANAGER_LOG_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTIONMANAGER_LOG_INFORMATION is access TRANSACTIONMANAGER_LOG_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTIONMANAGER_LOGPATH_INFORMATION_x is record
      LogPathLength : DWORD;
      LogPath : Void;
   end record;
   subtype TRANSACTIONMANAGER_LOGPATH_INFORMATION is TRANSACTIONMANAGER_LOGPATH_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTIONMANAGER_LOGPATH_INFORMATION is access TRANSACTIONMANAGER_LOGPATH_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTIONMANAGER_RECOVERY_INFORMATION_x is record
      LastRecoveredLsn : ULONGLONG;
   end record;
   subtype TRANSACTIONMANAGER_RECOVERY_INFORMATION is TRANSACTIONMANAGER_RECOVERY_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTIONMANAGER_RECOVERY_INFORMATION is access TRANSACTIONMANAGER_RECOVERY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTIONMANAGER_OLDEST_INFORMATION_x is record
      OldestTransactionGuid : GUID;
   end record;
   subtype TRANSACTIONMANAGER_OLDEST_INFORMATION is TRANSACTIONMANAGER_OLDEST_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTIONMANAGER_OLDEST_INFORMATION is access TRANSACTIONMANAGER_OLDEST_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_PROPERTIES_INFORMATION_x is record
      IsolationLevel : DWORD;
      IsolationFlags : DWORD;
      Timeout : LARGE_INTEGER;
      Outcome : DWORD;
      DescriptionLength : DWORD;
      Description : Void;
   end record;
   subtype TRANSACTION_PROPERTIES_INFORMATION is TRANSACTION_PROPERTIES_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTION_PROPERTIES_INFORMATION is access TRANSACTION_PROPERTIES_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_BIND_INFORMATION_x is record
      TmHandle : HANDLE;
   end record;
   subtype TRANSACTION_BIND_INFORMATION is TRANSACTION_BIND_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTION_BIND_INFORMATION is access TRANSACTION_BIND_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_ENLISTMENT_PAIR_x is record
      EnlistmentId : GUID;
      ResourceManagerId : GUID;
   end record;
   subtype TRANSACTION_ENLISTMENT_PAIR is TRANSACTION_ENLISTMENT_PAIR_x; -- CXType_Elaborated
   type PTRANSACTION_ENLISTMENT_PAIR is access TRANSACTION_ENLISTMENT_PAIR_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_ENLISTMENTS_INFORMATION_x is record
      NumberOfEnlistments : DWORD;
      EnlistmentPair : Void;
   end record;
   subtype TRANSACTION_ENLISTMENTS_INFORMATION is TRANSACTION_ENLISTMENTS_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTION_ENLISTMENTS_INFORMATION is access TRANSACTION_ENLISTMENTS_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION_x is record
      SuperiorEnlistmentPair : TRANSACTION_ENLISTMENT_PAIR;
   end record;
   subtype TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION is TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION is access TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type RESOURCEMANAGER_BASIC_INFORMATION_x is record
      ResourceManagerId : GUID;
      DescriptionLength : DWORD;
      Description : Void;
   end record;
   subtype RESOURCEMANAGER_BASIC_INFORMATION is RESOURCEMANAGER_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PRESOURCEMANAGER_BASIC_INFORMATION is access RESOURCEMANAGER_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type RESOURCEMANAGER_COMPLETION_INFORMATION_x is record
      IoCompletionPortHandle : HANDLE;
      CompletionKey : ULONG_PTR;
   end record;
   subtype RESOURCEMANAGER_COMPLETION_INFORMATION is RESOURCEMANAGER_COMPLETION_INFORMATION_x; -- CXType_Elaborated
   type PRESOURCEMANAGER_COMPLETION_INFORMATION is access RESOURCEMANAGER_COMPLETION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_INFORMATION_CLASS_x is (
      TransactionBasicInformation,
      TransactionPropertiesInformation,
      TransactionEnlistmentInformation,
      TransactionSuperiorEnlistmentInformation,
      TransactionBindInformation,
      TransactionDTCPrivateInformation
   );
   for TRANSACTION_INFORMATION_CLASS_x use (
      TransactionBasicInformation => 0,
      TransactionPropertiesInformation => 1,
      TransactionEnlistmentInformation => 2,
      TransactionSuperiorEnlistmentInformation => 3,
      TransactionBindInformation => 4,
      TransactionDTCPrivateInformation => 5
   );
   for TRANSACTION_INFORMATION_CLASS_x'Size use 32;
   subtype TRANSACTION_INFORMATION_CLASS is TRANSACTION_INFORMATION_CLASS_x; -- CXType_Elaborated
   type TRANSACTIONMANAGER_INFORMATION_CLASS_x is (
      TransactionManagerBasicInformation,
      TransactionManagerLogInformation,
      TransactionManagerLogPathInformation,
      TransactionManagerOnlineProbeInformation,
      TransactionManagerRecoveryInformation,
      TransactionManagerOldestTransactionInformation
   );
   for TRANSACTIONMANAGER_INFORMATION_CLASS_x use (
      TransactionManagerBasicInformation => 0,
      TransactionManagerLogInformation => 1,
      TransactionManagerLogPathInformation => 2,
      TransactionManagerOnlineProbeInformation => 3,
      TransactionManagerRecoveryInformation => 4,
      TransactionManagerOldestTransactionInformation => 5
   );
   for TRANSACTIONMANAGER_INFORMATION_CLASS_x'Size use 32;
   subtype TRANSACTIONMANAGER_INFORMATION_CLASS is TRANSACTIONMANAGER_INFORMATION_CLASS_x; -- CXType_Elaborated
   type RESOURCEMANAGER_INFORMATION_CLASS_x is (
      ResourceManagerBasicInformation,
      ResourceManagerCompletionInformation
   );
   for RESOURCEMANAGER_INFORMATION_CLASS_x use (
      ResourceManagerBasicInformation => 0,
      ResourceManagerCompletionInformation => 1
   );
   for RESOURCEMANAGER_INFORMATION_CLASS_x'Size use 32;
   subtype RESOURCEMANAGER_INFORMATION_CLASS is RESOURCEMANAGER_INFORMATION_CLASS_x; -- CXType_Elaborated
   type ENLISTMENT_BASIC_INFORMATION_x is record
      EnlistmentId : GUID;
      TransactionId : GUID;
      ResourceManagerId : GUID;
   end record;
   subtype ENLISTMENT_BASIC_INFORMATION is ENLISTMENT_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PENLISTMENT_BASIC_INFORMATION is access ENLISTMENT_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type ENLISTMENT_CRM_INFORMATION_x is record
      CrmTransactionManagerId : GUID;
      CrmResourceManagerId : GUID;
      CrmEnlistmentId : GUID;
   end record;
   subtype ENLISTMENT_CRM_INFORMATION is ENLISTMENT_CRM_INFORMATION_x; -- CXType_Elaborated
   type PENLISTMENT_CRM_INFORMATION is access ENLISTMENT_CRM_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type ENLISTMENT_INFORMATION_CLASS_x is (
      EnlistmentBasicInformation,
      EnlistmentRecoveryInformation,
      EnlistmentCrmInformation
   );
   for ENLISTMENT_INFORMATION_CLASS_x use (
      EnlistmentBasicInformation => 0,
      EnlistmentRecoveryInformation => 1,
      EnlistmentCrmInformation => 2
   );
   for ENLISTMENT_INFORMATION_CLASS_x'Size use 32;
   subtype ENLISTMENT_INFORMATION_CLASS is ENLISTMENT_INFORMATION_CLASS_x; -- CXType_Elaborated
   type TRANSACTION_LIST_ENTRY_x is record
      UOW_x : UOW;
   end record;
   subtype TRANSACTION_LIST_ENTRY is TRANSACTION_LIST_ENTRY_x; -- CXType_Elaborated
   type PTRANSACTION_LIST_ENTRY is access TRANSACTION_LIST_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type TRANSACTION_LIST_INFORMATION_x is record
      NumberOfTransactions : DWORD;
      TransactionInformation : Void;
   end record;
   subtype TRANSACTION_LIST_INFORMATION is TRANSACTION_LIST_INFORMATION_x; -- CXType_Elaborated
   type PTRANSACTION_LIST_INFORMATION is access TRANSACTION_LIST_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type KTMOBJECT_TYPE_x is (
      KTMOBJECT_TRANSACTION,
      KTMOBJECT_TRANSACTION_MANAGER,
      KTMOBJECT_RESOURCE_MANAGER,
      KTMOBJECT_ENLISTMENT,
      KTMOBJECT_INVALID
   );
   for KTMOBJECT_TYPE_x use (
      KTMOBJECT_TRANSACTION => 0,
      KTMOBJECT_TRANSACTION_MANAGER => 1,
      KTMOBJECT_RESOURCE_MANAGER => 2,
      KTMOBJECT_ENLISTMENT => 3,
      KTMOBJECT_INVALID => 4
   );
   for KTMOBJECT_TYPE_x'Size use 32;
   subtype KTMOBJECT_TYPE is KTMOBJECT_TYPE_x; -- CXType_Elaborated
   type PKTMOBJECT_TYPE is access KTMOBJECT_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type KTMOBJECT_CURSOR_x is record
      LastQuery : GUID;
      ObjectIdCount : DWORD;
      ObjectIds : Void;
   end record;
   subtype KTMOBJECT_CURSOR is KTMOBJECT_CURSOR_x; -- CXType_Elaborated
   type PKTMOBJECT_CURSOR is access KTMOBJECT_CURSOR_x; -- CXType_Pointer - CXType_Elaborated
   subtype TP_VERSION is DWORD; -- CXType_Typedef
   type PTP_VERSION is access DWORD; -- CXType_Pointer - CXType_Typedef
   type TP_CALLBACK_INSTANCE_x; -- Forward Declaration
   subtype TP_CALLBACK_INSTANCE is TP_CALLBACK_INSTANCE_x; -- CXType_Elaborated
   type PTP_CALLBACK_INSTANCE is access TP_CALLBACK_INSTANCE_x; -- CXType_Pointer - CXType_Elaborated
   subtype PTP_SIMPLE_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PTP_CALLBACK_INSTANCE, PVOID)
   type TP_POOL_x; -- Forward Declaration
   subtype TP_POOL is TP_POOL_x; -- CXType_Elaborated
   type PTP_POOL is access TP_POOL_x; -- CXType_Pointer - CXType_Elaborated
   type TP_CALLBACK_PRIORITY_x is (
      TP_CALLBACK_PRIORITY_HIGH,
      TP_CALLBACK_PRIORITY_NORMAL,
      TP_CALLBACK_PRIORITY_LOW,
      TP_CALLBACK_PRIORITY_INVALID
   );
   for TP_CALLBACK_PRIORITY_x use (
      TP_CALLBACK_PRIORITY_HIGH => 0,
      TP_CALLBACK_PRIORITY_NORMAL => 1,
      TP_CALLBACK_PRIORITY_LOW => 2,
      TP_CALLBACK_PRIORITY_INVALID => 3
   );
   for TP_CALLBACK_PRIORITY_x'Size use 32;
   subtype TP_CALLBACK_PRIORITY is TP_CALLBACK_PRIORITY_x; -- CXType_Elaborated
   type TP_POOL_STACK_INFORMATION_x is record
      StackReserve : SIZE_T;
      StackCommit : SIZE_T;
   end record;
   subtype TP_POOL_STACK_INFORMATION is TP_POOL_STACK_INFORMATION_x; -- CXType_Elaborated
   type PTP_POOL_STACK_INFORMATION is access TP_POOL_STACK_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TP_CLEANUP_GROUP_x; -- Forward Declaration
   subtype TP_CLEANUP_GROUP is TP_CLEANUP_GROUP_x; -- CXType_Elaborated
   type PTP_CLEANUP_GROUP is access TP_CLEANUP_GROUP_x; -- CXType_Pointer - CXType_Elaborated
   subtype PTP_CLEANUP_GROUP_CANCEL_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PVOID, PVOID)
   type TP_CALLBACK_ENVIRON_V3_x is record
      Version : TP_VERSION;
      Pool : PTP_POOL;
      CleanupGroup : PTP_CLEANUP_GROUP;
      CleanupGroupCancelCallback : PTP_CLEANUP_GROUP_CANCEL_CALLBACK;
      RaceDll : PVOID;
      ActivationContext : access Void;
      FinalizationCallback : PTP_SIMPLE_CALLBACK;
      u : Void;
      CallbackPriority : TP_CALLBACK_PRIORITY;
      Size : DWORD;
   end record;
   type ACTIVATION_CONTEXT_x; -- Forward Declaration
   subtype TP_CALLBACK_ENVIRON_V3 is TP_CALLBACK_ENVIRON_V3_x; -- CXType_Elaborated
   subtype TP_CALLBACK_ENVIRON is TP_CALLBACK_ENVIRON_V3; -- CXType_Typedef
   type PTP_CALLBACK_ENVIRON is access TP_CALLBACK_ENVIRON_V3; -- CXType_Pointer - CXType_Typedef
   -- TpInitializeCallbackEnviron(); -- inlined function not supported
   -- TpSetCallbackThreadpool(); -- inlined function not supported
   -- TpSetCallbackCleanupGroup(); -- inlined function not supported
   -- TpSetCallbackActivationContext(); -- inlined function not supported
   -- TpSetCallbackNoActivationContext(); -- inlined function not supported
   -- TpSetCallbackLongFunction(); -- inlined function not supported
   -- TpSetCallbackRaceWithDll(); -- inlined function not supported
   -- TpSetCallbackFinalizationCallback(); -- inlined function not supported
   -- TpSetCallbackPriority(); -- inlined function not supported
   -- TpSetCallbackPersistent(); -- inlined function not supported
   -- TpDestroyCallbackEnviron(); -- inlined function not supported
   type TP_WORK_x; -- Forward Declaration
   subtype TP_WORK is TP_WORK_x; -- CXType_Elaborated
   type PTP_WORK is access TP_WORK_x; -- CXType_Pointer - CXType_Elaborated
   subtype PTP_WORK_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK)
   type TP_TIMER_x; -- Forward Declaration
   subtype TP_TIMER is TP_TIMER_x; -- CXType_Elaborated
   type PTP_TIMER is access TP_TIMER_x; -- CXType_Pointer - CXType_Elaborated
   subtype PTP_TIMER_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER)
   subtype TP_WAIT_RESULT is DWORD; -- CXType_Typedef
   type TP_WAIT_x; -- Forward Declaration
   subtype TP_WAIT is TP_WAIT_x; -- CXType_Elaborated
   type PTP_WAIT is access TP_WAIT_x; -- CXType_Pointer - CXType_Elaborated
   subtype PTP_WAIT_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, TP_WAIT_RESULT)
   type TP_IO_x; -- Forward Declaration
   subtype TP_IO is TP_IO_x; -- CXType_Elaborated
   type PTP_IO is access TP_IO_x; -- CXType_Pointer - CXType_Elaborated
   type TEB_x; -- Forward Declaration
   -- NtCurrentTeb(); -- inlined function not supported
   -- GetCurrentFiber(); -- inlined function not supported
   -- GetFiberData(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\minwindef.h>
   subtype WPARAM is UINT_PTR; -- CXType_Typedef
   subtype LPARAM is LONG_PTR; -- CXType_Typedef
   subtype LRESULT is LONG_PTR; -- CXType_Typedef
   type SPHANDLE is access HANDLE; -- CXType_Pointer - CXType_Typedef
   type LPHANDLE is access HANDLE; -- CXType_Pointer - CXType_Typedef
   subtype HGLOBAL is HANDLE; -- CXType_Typedef
   subtype HLOCAL is HANDLE; -- CXType_Typedef
   subtype GLOBALHANDLE is HANDLE; -- CXType_Typedef
   subtype LOCALHANDLE is HANDLE; -- CXType_Typedef
   subtype FARPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] INT_PTR ()
   subtype NEARPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] INT_PTR ()
   subtype PROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] INT_PTR ()
   subtype ATOM is WORD; -- CXType_Typedef
   type HKEY_x is record
      unused : Interfaces.C.Int;
   end record;
   type HKEY is access HKEY_x; -- CXType_Pointer - CXType_Elaborated
   type PHKEY is access HKEY; -- CXType_Pointer - CXType_Typedef
   type HMETAFILE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMETAFILE is access HMETAFILE_x; -- CXType_Pointer - CXType_Elaborated
   type HINSTANCE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HINSTANCE is access HINSTANCE_x; -- CXType_Pointer - CXType_Elaborated
   subtype HMODULE is HINSTANCE; -- CXType_Typedef
   type HRGN_x is record
      unused : Interfaces.C.Int;
   end record;
   type HRGN is access HRGN_x; -- CXType_Pointer - CXType_Elaborated
   type HRSRC_x is record
      unused : Interfaces.C.Int;
   end record;
   type HRSRC is access HRSRC_x; -- CXType_Pointer - CXType_Elaborated
   type HSPRITE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HSPRITE is access HSPRITE_x; -- CXType_Pointer - CXType_Elaborated
   type HLSURF_x is record
      unused : Interfaces.C.Int;
   end record;
   type HLSURF is access HLSURF_x; -- CXType_Pointer - CXType_Elaborated
   type HSTR_x is record
      unused : Interfaces.C.Int;
   end record;
   type HSTR is access HSTR_x; -- CXType_Pointer - CXType_Elaborated
   type HTASK_x is record
      unused : Interfaces.C.Int;
   end record;
   type HTASK is access HTASK_x; -- CXType_Pointer - CXType_Elaborated
   type HWINSTA_x is record
      unused : Interfaces.C.Int;
   end record;
   type HWINSTA is access HWINSTA_x; -- CXType_Pointer - CXType_Elaborated
   type HKL_x is record
      unused : Interfaces.C.Int;
   end record;
   type HKL is access HKL_x; -- CXType_Pointer - CXType_Elaborated
   subtype HFILE is Interfaces.C.Int; -- CXType_Int
   type FILETIME_x is record
      dwLowDateTime : DWORD;
      dwHighDateTime : DWORD;
   end record;
   subtype FILETIME is FILETIME_x; -- CXType_Elaborated
   type PFILETIME is access FILETIME_x; -- CXType_Pointer - CXType_Elaborated
   type LPFILETIME is access FILETIME_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\windef.h>
   type HWND_x is record
      unused : Interfaces.C.Int;
   end record;
   type HWND is access HWND_x; -- CXType_Pointer - CXType_Elaborated
   type HHOOK_x is record
      unused : Interfaces.C.Int;
   end record;
   type HHOOK is access HHOOK_x; -- CXType_Pointer - CXType_Elaborated
   type HGDIOBJ is access Void; -- CXType_Pointer - CXType_Void
   type HACCEL_x is record
      unused : Interfaces.C.Int;
   end record;
   type HACCEL is access HACCEL_x; -- CXType_Pointer - CXType_Elaborated
   type HBITMAP_x is record
      unused : Interfaces.C.Int;
   end record;
   type HBITMAP is access HBITMAP_x; -- CXType_Pointer - CXType_Elaborated
   type HBRUSH_x is record
      unused : Interfaces.C.Int;
   end record;
   type HBRUSH is access HBRUSH_x; -- CXType_Pointer - CXType_Elaborated
   type HCOLORSPACE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HCOLORSPACE is access HCOLORSPACE_x; -- CXType_Pointer - CXType_Elaborated
   type HDC_x is record
      unused : Interfaces.C.Int;
   end record;
   type HDC is access HDC_x; -- CXType_Pointer - CXType_Elaborated
   type HGLRC_x is record
      unused : Interfaces.C.Int;
   end record;
   type HGLRC is access HGLRC_x; -- CXType_Pointer - CXType_Elaborated
   type HDESK_x is record
      unused : Interfaces.C.Int;
   end record;
   type HDESK is access HDESK_x; -- CXType_Pointer - CXType_Elaborated
   type HENHMETAFILE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HENHMETAFILE is access HENHMETAFILE_x; -- CXType_Pointer - CXType_Elaborated
   type HFONT_x is record
      unused : Interfaces.C.Int;
   end record;
   type HFONT is access HFONT_x; -- CXType_Pointer - CXType_Elaborated
   type HICON_x is record
      unused : Interfaces.C.Int;
   end record;
   type HICON is access HICON_x; -- CXType_Pointer - CXType_Elaborated
   type HMENU_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMENU is access HMENU_x; -- CXType_Pointer - CXType_Elaborated
   type HPALETTE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HPALETTE is access HPALETTE_x; -- CXType_Pointer - CXType_Elaborated
   type HPEN_x is record
      unused : Interfaces.C.Int;
   end record;
   type HPEN is access HPEN_x; -- CXType_Pointer - CXType_Elaborated
   type HWINEVENTHOOK_x is record
      unused : Interfaces.C.Int;
   end record;
   type HWINEVENTHOOK is access HWINEVENTHOOK_x; -- CXType_Pointer - CXType_Elaborated
   type HMONITOR_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMONITOR is access HMONITOR_x; -- CXType_Pointer - CXType_Elaborated
   type HUMPD_x is record
      unused : Interfaces.C.Int;
   end record;
   type HUMPD is access HUMPD_x; -- CXType_Pointer - CXType_Elaborated
   subtype HCURSOR is HICON; -- CXType_Typedef
   subtype COLORREF is DWORD; -- CXType_Typedef
   type LPCOLORREF is access DWORD; -- CXType_Pointer - CXType_Typedef
   type tagRECT is record
      left : LONG;
      top : LONG;
      right : LONG;
      bottom : LONG;
   end record;
   subtype RECT is tagRECT; -- CXType_Elaborated
   type PRECT is access tagRECT; -- CXType_Pointer - CXType_Elaborated
   type NPRECT is access tagRECT; -- CXType_Pointer - CXType_Elaborated
   type LPRECT is access tagRECT; -- CXType_Pointer - CXType_Elaborated
   type LPCRECT is access constant RECT; -- CXType_Pointer - CXType_Typedef
   type RECTL_x is record
      left : LONG;
      top : LONG;
      right : LONG;
      bottom : LONG;
   end record;
   subtype RECTL is RECTL_x; -- CXType_Elaborated
   type PRECTL is access RECTL_x; -- CXType_Pointer - CXType_Elaborated
   type LPRECTL is access RECTL_x; -- CXType_Pointer - CXType_Elaborated
   type LPCRECTL is access constant RECTL; -- CXType_Pointer - CXType_Typedef
   type tagPOINT is record
      x : LONG;
      y : LONG;
   end record;
   subtype POINT is tagPOINT; -- CXType_Elaborated
   type PPOINT is access tagPOINT; -- CXType_Pointer - CXType_Elaborated
   type NPPOINT is access tagPOINT; -- CXType_Pointer - CXType_Elaborated
   type LPPOINT is access tagPOINT; -- CXType_Pointer - CXType_Elaborated
   type POINTL_x is record
      x : LONG;
      y : LONG;
   end record;
   subtype POINTL is POINTL_x; -- CXType_Elaborated
   type PPOINTL is access POINTL_x; -- CXType_Pointer - CXType_Elaborated
   type tagSIZE is record
      cx : LONG;
      cy : LONG;
   end record;
   subtype SIZE is tagSIZE; -- CXType_Elaborated
   type PSIZE is access tagSIZE; -- CXType_Pointer - CXType_Elaborated
   type LPSIZE is access tagSIZE; -- CXType_Pointer - CXType_Elaborated
   subtype SIZEL is SIZE; -- CXType_Typedef
   type PSIZEL is access SIZE; -- CXType_Pointer - CXType_Typedef
   type LPSIZEL is access SIZE; -- CXType_Pointer - CXType_Typedef
   type tagPOINTS is record
      x : SHORT;
      y : SHORT;
   end record;
   subtype POINTS is tagPOINTS; -- CXType_Elaborated
   type PPOINTS is access tagPOINTS; -- CXType_Pointer - CXType_Elaborated
   type LPPOINTS is access tagPOINTS; -- CXType_Pointer - CXType_Elaborated
   type DPI_AWARENESS_CONTEXT_x is record
      unused : Interfaces.C.Int;
   end record;
   type DPI_AWARENESS_CONTEXT is access DPI_AWARENESS_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type DPI_AWARENESS is (
      DPI_AWARENESS_INVALID,
      DPI_AWARENESS_UNAWARE,
      DPI_AWARENESS_SYSTEM_AWARE,
      DPI_AWARENESS_PER_MONITOR_AWARE
   );
   for DPI_AWARENESS use (
      DPI_AWARENESS_INVALID => -1,
      DPI_AWARENESS_UNAWARE => 0,
      DPI_AWARENESS_SYSTEM_AWARE => 1,
      DPI_AWARENESS_PER_MONITOR_AWARE => 2
   );
   for DPI_AWARENESS'Size use 32;
   type DPI_HOSTING_BEHAVIOR is (
      DPI_HOSTING_BEHAVIOR_INVALID,
      DPI_HOSTING_BEHAVIOR_DEFAULT,
      DPI_HOSTING_BEHAVIOR_MIXED
   );
   for DPI_HOSTING_BEHAVIOR use (
      DPI_HOSTING_BEHAVIOR_INVALID => -1,
      DPI_HOSTING_BEHAVIOR_DEFAULT => 0,
      DPI_HOSTING_BEHAVIOR_MIXED => 1
   );
   for DPI_HOSTING_BEHAVIOR'Size use 32;
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\minwinbase.h>
   type SECURITY_ATTRIBUTES_x is record
      nLength : DWORD;
      lpSecurityDescriptor : LPVOID;
      bInheritHandle : BOOL;
   end record;
   subtype SECURITY_ATTRIBUTES is SECURITY_ATTRIBUTES_x; -- CXType_Elaborated
   type PSECURITY_ATTRIBUTES is access SECURITY_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type LPSECURITY_ATTRIBUTES is access SECURITY_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type OVERLAPPED_x is record
      Internal : ULONG_PTR;
      InternalHigh : ULONG_PTR;
      hEvent : HANDLE;
   end record;
   subtype OVERLAPPED is OVERLAPPED_x; -- CXType_Elaborated
   type LPOVERLAPPED is access OVERLAPPED_x; -- CXType_Pointer - CXType_Elaborated
   type OVERLAPPED_ENTRY_x is record
      lpCompletionKey : ULONG_PTR;
      lpOverlapped_x : LPOVERLAPPED;
      Internal : ULONG_PTR;
      dwNumberOfBytesTransferred : DWORD;
   end record;
   subtype OVERLAPPED_ENTRY is OVERLAPPED_ENTRY_x; -- CXType_Elaborated
   type LPOVERLAPPED_ENTRY is access OVERLAPPED_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type SYSTEMTIME_x is record
      wYear : WORD;
      wMonth : WORD;
      wDayOfWeek : WORD;
      wDay : WORD;
      wHour : WORD;
      wMinute : WORD;
      wSecond : WORD;
      wMilliseconds : WORD;
   end record;
   subtype SYSTEMTIME is SYSTEMTIME_x; -- CXType_Elaborated
   type PSYSTEMTIME is access SYSTEMTIME_x; -- CXType_Pointer - CXType_Elaborated
   type LPSYSTEMTIME is access SYSTEMTIME_x; -- CXType_Pointer - CXType_Elaborated
   type WIN32_FIND_DATAA_x is record
      dwFileAttributes : DWORD;
      ftCreationTime : FILETIME;
      ftLastAccessTime : FILETIME;
      ftLastWriteTime : FILETIME;
      nFileSizeHigh : DWORD;
      nFileSizeLow : DWORD;
      dwReserved0 : DWORD;
      dwReserved1 : DWORD;
      cFileName : Void;
      cAlternateFileName : Void;
   end record;
   subtype WIN32_FIND_DATAA is WIN32_FIND_DATAA_x; -- CXType_Elaborated
   type PWIN32_FIND_DATAA is access WIN32_FIND_DATAA_x; -- CXType_Pointer - CXType_Elaborated
   type LPWIN32_FIND_DATAA is access WIN32_FIND_DATAA_x; -- CXType_Pointer - CXType_Elaborated
   type WIN32_FIND_DATAW_x is record
      dwFileAttributes : DWORD;
      ftCreationTime : FILETIME;
      ftLastAccessTime : FILETIME;
      ftLastWriteTime : FILETIME;
      nFileSizeHigh : DWORD;
      nFileSizeLow : DWORD;
      dwReserved0 : DWORD;
      dwReserved1 : DWORD;
      cFileName : Void;
      cAlternateFileName : Void;
   end record;
   subtype WIN32_FIND_DATAW is WIN32_FIND_DATAW_x; -- CXType_Elaborated
   type PWIN32_FIND_DATAW is access WIN32_FIND_DATAW_x; -- CXType_Pointer - CXType_Elaborated
   type LPWIN32_FIND_DATAW is access WIN32_FIND_DATAW_x; -- CXType_Pointer - CXType_Elaborated
   subtype WIN32_FIND_DATA is WIN32_FIND_DATAA; -- CXType_Typedef
   subtype PWIN32_FIND_DATA is PWIN32_FIND_DATAA; -- CXType_Typedef
   subtype LPWIN32_FIND_DATA is LPWIN32_FIND_DATAA; -- CXType_Typedef
   type FINDEX_INFO_LEVELS_x is (
      FindExInfoStandard,
      FindExInfoBasic,
      FindExInfoMaxInfoLevel
   );
   for FINDEX_INFO_LEVELS_x use (
      FindExInfoStandard => 0,
      FindExInfoBasic => 1,
      FindExInfoMaxInfoLevel => 2
   );
   for FINDEX_INFO_LEVELS_x'Size use 32;
   subtype FINDEX_INFO_LEVELS is FINDEX_INFO_LEVELS_x; -- CXType_Elaborated
   type FINDEX_SEARCH_OPS_x is (
      FindExSearchNameMatch,
      FindExSearchLimitToDirectories,
      FindExSearchLimitToDevices,
      FindExSearchMaxSearchOp
   );
   for FINDEX_SEARCH_OPS_x use (
      FindExSearchNameMatch => 0,
      FindExSearchLimitToDirectories => 1,
      FindExSearchLimitToDevices => 2,
      FindExSearchMaxSearchOp => 3
   );
   for FINDEX_SEARCH_OPS_x'Size use 32;
   subtype FINDEX_SEARCH_OPS is FINDEX_SEARCH_OPS_x; -- CXType_Elaborated
   type READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_x is (
      ReadDirectoryNotifyInformation,
      ReadDirectoryNotifyExtendedInformation
   );
   for READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_x use (
      ReadDirectoryNotifyInformation => 1,
      ReadDirectoryNotifyExtendedInformation => 2
   );
   for READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_x'Size use 32;
   subtype READ_DIRECTORY_NOTIFY_INFORMATION_CLASS is READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_x; -- CXType_Elaborated
   type PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS is access READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   type GET_FILEEX_INFO_LEVELS_x is (
      GetFileExInfoStandard,
      GetFileExMaxInfoLevel
   );
   for GET_FILEEX_INFO_LEVELS_x use (
      GetFileExInfoStandard => 0,
      GetFileExMaxInfoLevel => 1
   );
   for GET_FILEEX_INFO_LEVELS_x'Size use 32;
   subtype GET_FILEEX_INFO_LEVELS is GET_FILEEX_INFO_LEVELS_x; -- CXType_Elaborated
   type FILE_INFO_BY_HANDLE_CLASS_x is (
      FileBasicInfo,
      FileStandardInfo,
      FileNameInfo,
      FileRenameInfo,
      FileDispositionInfo,
      FileAllocationInfo,
      FileEndOfFileInfo,
      FileStreamInfo,
      FileCompressionInfo,
      FileAttributeTagInfo,
      FileIdBothDirectoryInfo,
      FileIdBothDirectoryRestartInfo,
      FileIoPriorityHintInfo,
      FileRemoteProtocolInfo,
      FileFullDirectoryInfo,
      FileFullDirectoryRestartInfo,
      FileStorageInfo,
      FileAlignmentInfo,
      FileIdInfo,
      FileIdExtdDirectoryInfo,
      FileIdExtdDirectoryRestartInfo,
      FileDispositionInfoEx,
      FileRenameInfoEx,
      MaximumFileInfoByHandleClass
   );
   for FILE_INFO_BY_HANDLE_CLASS_x use (
      FileBasicInfo => 0,
      FileStandardInfo => 1,
      FileNameInfo => 2,
      FileRenameInfo => 3,
      FileDispositionInfo => 4,
      FileAllocationInfo => 5,
      FileEndOfFileInfo => 6,
      FileStreamInfo => 7,
      FileCompressionInfo => 8,
      FileAttributeTagInfo => 9,
      FileIdBothDirectoryInfo => 10,
      FileIdBothDirectoryRestartInfo => 11,
      FileIoPriorityHintInfo => 12,
      FileRemoteProtocolInfo => 13,
      FileFullDirectoryInfo => 14,
      FileFullDirectoryRestartInfo => 15,
      FileStorageInfo => 16,
      FileAlignmentInfo => 17,
      FileIdInfo => 18,
      FileIdExtdDirectoryInfo => 19,
      FileIdExtdDirectoryRestartInfo => 20,
      FileDispositionInfoEx => 21,
      FileRenameInfoEx => 22,
      MaximumFileInfoByHandleClass => 23
   );
   for FILE_INFO_BY_HANDLE_CLASS_x'Size use 32;
   subtype FILE_INFO_BY_HANDLE_CLASS is FILE_INFO_BY_HANDLE_CLASS_x; -- CXType_Elaborated
   type PFILE_INFO_BY_HANDLE_CLASS is access FILE_INFO_BY_HANDLE_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRITICAL_SECTION is RTL_CRITICAL_SECTION; -- CXType_Typedef
   subtype PCRITICAL_SECTION is PRTL_CRITICAL_SECTION; -- CXType_Typedef
   subtype LPCRITICAL_SECTION is PRTL_CRITICAL_SECTION; -- CXType_Typedef
   subtype CRITICAL_SECTION_DEBUG is RTL_CRITICAL_SECTION_DEBUG; -- CXType_Typedef
   subtype PCRITICAL_SECTION_DEBUG is PRTL_CRITICAL_SECTION_DEBUG; -- CXType_Typedef
   subtype LPCRITICAL_SECTION_DEBUG is PRTL_CRITICAL_SECTION_DEBUG; -- CXType_Typedef
   subtype LPOVERLAPPED_COMPLETION_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (DWORD, DWORD, LPOVERLAPPED)
   type PROCESS_HEAP_ENTRY_x is record
      lpData : PVOID;
      cbData : DWORD;
      cbOverhead : BYTE;
      iRegionIndex : BYTE;
      wFlags : WORD;
   end record;
   subtype PROCESS_HEAP_ENTRY is PROCESS_HEAP_ENTRY_x; -- CXType_Elaborated
   type LPPROCESS_HEAP_ENTRY is access PROCESS_HEAP_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type PPROCESS_HEAP_ENTRY is access PROCESS_HEAP_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type REASON_CONTEXT_x is record
      Version : ULONG;
      Flags : DWORD;
      Reason : Void;
   end record;
   subtype REASON_CONTEXT is REASON_CONTEXT_x; -- CXType_Elaborated
   type PREASON_CONTEXT is access REASON_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   subtype PTHREAD_START_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (LPVOID)
   subtype LPTHREAD_START_ROUTINE is PTHREAD_START_ROUTINE; -- CXType_Typedef
   subtype PENCLAVE_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LPVOID (LPVOID)
   subtype LPENCLAVE_ROUTINE is PENCLAVE_ROUTINE; -- CXType_Typedef
   type EXCEPTION_DEBUG_INFO_x is record
      ExceptionRecord : EXCEPTION_RECORD;
      dwFirstChance : DWORD;
   end record;
   subtype EXCEPTION_DEBUG_INFO is EXCEPTION_DEBUG_INFO_x; -- CXType_Elaborated
   type LPEXCEPTION_DEBUG_INFO is access EXCEPTION_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CREATE_THREAD_DEBUG_INFO_x is record
      hThread : HANDLE;
      lpThreadLocalBase : LPVOID;
      lpStartAddress : LPTHREAD_START_ROUTINE;
   end record;
   subtype CREATE_THREAD_DEBUG_INFO is CREATE_THREAD_DEBUG_INFO_x; -- CXType_Elaborated
   type LPCREATE_THREAD_DEBUG_INFO is access CREATE_THREAD_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CREATE_PROCESS_DEBUG_INFO_x is record
      hFile_x : HANDLE;
      hProcess : HANDLE;
      hThread : HANDLE;
      lpBaseOfImage : LPVOID;
      dwDebugInfoFileOffset : DWORD;
      nDebugInfoSize : DWORD;
      lpThreadLocalBase : LPVOID;
      lpStartAddress : LPTHREAD_START_ROUTINE;
      lpImageName : LPVOID;
      fUnicode : WORD;
   end record;
   subtype CREATE_PROCESS_DEBUG_INFO is CREATE_PROCESS_DEBUG_INFO_x; -- CXType_Elaborated
   type LPCREATE_PROCESS_DEBUG_INFO is access CREATE_PROCESS_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EXIT_THREAD_DEBUG_INFO_x is record
      dwExitCode : DWORD;
   end record;
   subtype EXIT_THREAD_DEBUG_INFO is EXIT_THREAD_DEBUG_INFO_x; -- CXType_Elaborated
   type LPEXIT_THREAD_DEBUG_INFO is access EXIT_THREAD_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EXIT_PROCESS_DEBUG_INFO_x is record
      dwExitCode : DWORD;
   end record;
   subtype EXIT_PROCESS_DEBUG_INFO is EXIT_PROCESS_DEBUG_INFO_x; -- CXType_Elaborated
   type LPEXIT_PROCESS_DEBUG_INFO is access EXIT_PROCESS_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type LOAD_DLL_DEBUG_INFO_x is record
      hFile_x : HANDLE;
      lpBaseOfDll : LPVOID;
      dwDebugInfoFileOffset : DWORD;
      nDebugInfoSize : DWORD;
      lpImageName : LPVOID;
      fUnicode : WORD;
   end record;
   subtype LOAD_DLL_DEBUG_INFO is LOAD_DLL_DEBUG_INFO_x; -- CXType_Elaborated
   type LPLOAD_DLL_DEBUG_INFO is access LOAD_DLL_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type UNLOAD_DLL_DEBUG_INFO_x is record
      lpBaseOfDll : LPVOID;
   end record;
   subtype UNLOAD_DLL_DEBUG_INFO is UNLOAD_DLL_DEBUG_INFO_x; -- CXType_Elaborated
   type LPUNLOAD_DLL_DEBUG_INFO is access UNLOAD_DLL_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OUTPUT_DEBUG_STRING_INFO_x is record
      lpDebugStringData : LPSTR;
      fUnicode : WORD;
      nDebugStringLength : WORD;
   end record;
   subtype OUTPUT_DEBUG_STRING_INFO is OUTPUT_DEBUG_STRING_INFO_x; -- CXType_Elaborated
   type LPOUTPUT_DEBUG_STRING_INFO is access OUTPUT_DEBUG_STRING_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type RIP_INFO_x is record
      dwError : DWORD;
      dwType : DWORD;
   end record;
   subtype RIP_INFO is RIP_INFO_x; -- CXType_Elaborated
   type LPRIP_INFO is access RIP_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type DEBUG_EVENT_x is record
      dwDebugEventCode : DWORD;
      dwProcessId : DWORD;
      dwThreadId : DWORD;
      u : Void;
   end record;
   subtype DEBUG_EVENT is DEBUG_EVENT_x; -- CXType_Elaborated
   type LPDEBUG_EVENT is access DEBUG_EVENT_x; -- CXType_Pointer - CXType_Elaborated
   subtype LPCONTEXT is PCONTEXT; -- CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\processenv.h>
   function SetEnvironmentStringsW(
      NewEnvironment : LPWCH
   ) return BOOL;
   pragma import (C,SetEnvironmentStringsW,"SetEnvironmentStringsW");
   function GetStdHandle(
      nStdHandle : DWORD
   ) return HANDLE;
   pragma import (C,GetStdHandle,"GetStdHandle");
   function SetStdHandle(
      nStdHandle : DWORD;
      hHandle : HANDLE
   ) return BOOL;
   pragma import (C,SetStdHandle,"SetStdHandle");
   function SetStdHandleEx(
      nStdHandle : DWORD;
      hHandle : HANDLE;
      phPrevValue : PHANDLE
   ) return BOOL;
   pragma import (C,SetStdHandleEx,"SetStdHandleEx");
   function GetCommandLineA return LPSTR;
   pragma import (C,GetCommandLineA,"GetCommandLineA");
   function GetCommandLineW return LPWSTR;
   pragma import (C,GetCommandLineW,"GetCommandLineW");
   function GetEnvironmentStrings return LPCH;
   pragma import (C,GetEnvironmentStrings,"GetEnvironmentStrings");
   function GetEnvironmentStringsW return LPWCH;
   pragma import (C,GetEnvironmentStringsW,"GetEnvironmentStringsW");
   function FreeEnvironmentStringsA(
      penv : LPCH
   ) return BOOL;
   pragma import (C,FreeEnvironmentStringsA,"FreeEnvironmentStringsA");
   function FreeEnvironmentStringsW(
      penv : LPWCH
   ) return BOOL;
   pragma import (C,FreeEnvironmentStringsW,"FreeEnvironmentStringsW");
   function GetEnvironmentVariableA(
      lpName : LPCSTR;
      lpBuffer : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetEnvironmentVariableA,"GetEnvironmentVariableA");
   function GetEnvironmentVariableW(
      lpName : LPCWSTR;
      lpBuffer : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetEnvironmentVariableW,"GetEnvironmentVariableW");
   function SetEnvironmentVariableA(
      lpName : LPCSTR;
      lpValue : LPCSTR
   ) return BOOL;
   pragma import (C,SetEnvironmentVariableA,"SetEnvironmentVariableA");
   function SetEnvironmentVariableW(
      lpName : LPCWSTR;
      lpValue : LPCWSTR
   ) return BOOL;
   pragma import (C,SetEnvironmentVariableW,"SetEnvironmentVariableW");
   function ExpandEnvironmentStringsA(
      lpSrc : LPCSTR;
      lpDst : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,ExpandEnvironmentStringsA,"ExpandEnvironmentStringsA");
   function ExpandEnvironmentStringsW(
      lpSrc : LPCWSTR;
      lpDst : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,ExpandEnvironmentStringsW,"ExpandEnvironmentStringsW");
   function SetCurrentDirectoryA(
      lpPathName : LPCSTR
   ) return BOOL;
   pragma import (C,SetCurrentDirectoryA,"SetCurrentDirectoryA");
   function SetCurrentDirectoryW(
      lpPathName : LPCWSTR
   ) return BOOL;
   pragma import (C,SetCurrentDirectoryW,"SetCurrentDirectoryW");
   function GetCurrentDirectoryA(
      nBufferLength : DWORD;
      lpBuffer : LPSTR
   ) return DWORD;
   pragma import (C,GetCurrentDirectoryA,"GetCurrentDirectoryA");
   function GetCurrentDirectoryW(
      nBufferLength : DWORD;
      lpBuffer : LPWSTR
   ) return DWORD;
   pragma import (C,GetCurrentDirectoryW,"GetCurrentDirectoryW");
   function SearchPathW(
      lpPath : LPCWSTR;
      lpFileName : LPCWSTR;
      lpExtension : LPCWSTR;
      nBufferLength : DWORD;
      lpBuffer : LPWSTR;
      lpFilePart : access LPWSTR
   ) return DWORD;
   pragma import (C,SearchPathW,"SearchPathW");
   function SearchPathA(
      lpPath : LPCSTR;
      lpFileName : LPCSTR;
      lpExtension : LPCSTR;
      nBufferLength : DWORD;
      lpBuffer : LPSTR;
      lpFilePart : access LPSTR
   ) return DWORD;
   pragma import (C,SearchPathA,"SearchPathA");
   function NeedCurrentDirectoryForExePathA(
      ExeName : LPCSTR
   ) return BOOL;
   pragma import (C,NeedCurrentDirectoryForExePathA,"NeedCurrentDirectoryForExePathA");
   function NeedCurrentDirectoryForExePathW(
      ExeName : LPCWSTR
   ) return BOOL;
   pragma import (C,NeedCurrentDirectoryForExePathW,"NeedCurrentDirectoryForExePathW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\fileapi.h>
   function CompareFileTime(
      lpFileTime1 : access constant FILETIME;
      lpFileTime2 : access constant FILETIME
   ) return LONG;
   pragma import (C,CompareFileTime,"CompareFileTime");
   function CreateDirectoryA(
      lpPathName : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return BOOL;
   pragma import (C,CreateDirectoryA,"CreateDirectoryA");
   function CreateDirectoryW(
      lpPathName : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return BOOL;
   pragma import (C,CreateDirectoryW,"CreateDirectoryW");
   function CreateFileA(
      lpFileName : LPCSTR;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      dwCreationDisposition : DWORD;
      dwFlagsAndAttributes : DWORD;
      hTemplateFile : HANDLE
   ) return HANDLE;
   pragma import (C,CreateFileA,"CreateFileA");
   function CreateFileW(
      lpFileName : LPCWSTR;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      dwCreationDisposition : DWORD;
      dwFlagsAndAttributes : DWORD;
      hTemplateFile : HANDLE
   ) return HANDLE;
   pragma import (C,CreateFileW,"CreateFileW");
   function DefineDosDeviceW(
      dwFlags : DWORD;
      lpDeviceName : LPCWSTR;
      lpTargetPath : LPCWSTR
   ) return BOOL;
   pragma import (C,DefineDosDeviceW,"DefineDosDeviceW");
   function DeleteFileA(
      lpFileName : LPCSTR
   ) return BOOL;
   pragma import (C,DeleteFileA,"DeleteFileA");
   function DeleteFileW(
      lpFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,DeleteFileW,"DeleteFileW");
   function DeleteVolumeMountPointW(
      lpszVolumeMountPoint : LPCWSTR
   ) return BOOL;
   pragma import (C,DeleteVolumeMountPointW,"DeleteVolumeMountPointW");
   function FileTimeToLocalFileTime(
      lpFileTime_x : access constant FILETIME;
      lpLocalFileTime : LPFILETIME
   ) return BOOL;
   pragma import (C,FileTimeToLocalFileTime,"FileTimeToLocalFileTime");
   function FindClose(
      hFindFile : HANDLE
   ) return BOOL;
   pragma import (C,FindClose,"FindClose");
   function FindCloseChangeNotification(
      hChangeHandle : HANDLE
   ) return BOOL;
   pragma import (C,FindCloseChangeNotification,"FindCloseChangeNotification");
   function FindFirstChangeNotificationA(
      lpPathName : LPCSTR;
      bWatchSubtree : BOOL;
      dwNotifyFilter : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstChangeNotificationA,"FindFirstChangeNotificationA");
   function FindFirstChangeNotificationW(
      lpPathName : LPCWSTR;
      bWatchSubtree : BOOL;
      dwNotifyFilter : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstChangeNotificationW,"FindFirstChangeNotificationW");
   function FindFirstFileA(
      lpFileName : LPCSTR;
      lpFindFileData : LPWIN32_FIND_DATAA
   ) return HANDLE;
   pragma import (C,FindFirstFileA,"FindFirstFileA");
   function FindFirstFileW(
      lpFileName : LPCWSTR;
      lpFindFileData : LPWIN32_FIND_DATAW
   ) return HANDLE;
   pragma import (C,FindFirstFileW,"FindFirstFileW");
   function FindFirstFileExA(
      lpFileName : LPCSTR;
      fInfoLevelId : FINDEX_INFO_LEVELS;
      lpFindFileData : LPVOID;
      fSearchOp : FINDEX_SEARCH_OPS;
      lpSearchFilter : LPVOID;
      dwAdditionalFlags : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstFileExA,"FindFirstFileExA");
   function FindFirstFileExW(
      lpFileName : LPCWSTR;
      fInfoLevelId : FINDEX_INFO_LEVELS;
      lpFindFileData : LPVOID;
      fSearchOp : FINDEX_SEARCH_OPS;
      lpSearchFilter : LPVOID;
      dwAdditionalFlags : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstFileExW,"FindFirstFileExW");
   function FindFirstVolumeW(
      lpszVolumeName : LPWSTR;
      cchBufferLength : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstVolumeW,"FindFirstVolumeW");
   function FindNextChangeNotification(
      hChangeHandle : HANDLE
   ) return BOOL;
   pragma import (C,FindNextChangeNotification,"FindNextChangeNotification");
   function FindNextFileA(
      hFindFile : HANDLE;
      lpFindFileData : LPWIN32_FIND_DATAA
   ) return BOOL;
   pragma import (C,FindNextFileA,"FindNextFileA");
   function FindNextFileW(
      hFindFile : HANDLE;
      lpFindFileData : LPWIN32_FIND_DATAW
   ) return BOOL;
   pragma import (C,FindNextFileW,"FindNextFileW");
   function FindNextVolumeW(
      hFindVolume : HANDLE;
      lpszVolumeName : LPWSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,FindNextVolumeW,"FindNextVolumeW");
   function FindVolumeClose(
      hFindVolume : HANDLE
   ) return BOOL;
   pragma import (C,FindVolumeClose,"FindVolumeClose");
   function FlushFileBuffers(
      hFile_x : HANDLE
   ) return BOOL;
   pragma import (C,FlushFileBuffers,"FlushFileBuffers");
   function GetDiskFreeSpaceA(
      lpRootPathName : LPCSTR;
      lpSectorsPerCluster : LPDWORD;
      lpBytesPerSector : LPDWORD;
      lpNumberOfFreeClusters : LPDWORD;
      lpTotalNumberOfClusters : LPDWORD
   ) return BOOL;
   pragma import (C,GetDiskFreeSpaceA,"GetDiskFreeSpaceA");
   function GetDiskFreeSpaceW(
      lpRootPathName : LPCWSTR;
      lpSectorsPerCluster : LPDWORD;
      lpBytesPerSector : LPDWORD;
      lpNumberOfFreeClusters : LPDWORD;
      lpTotalNumberOfClusters : LPDWORD
   ) return BOOL;
   pragma import (C,GetDiskFreeSpaceW,"GetDiskFreeSpaceW");
   function GetDiskFreeSpaceExA(
      lpDirectoryName : LPCSTR;
      lpFreeBytesAvailableToCaller : PULARGE_INTEGER;
      lpTotalNumberOfBytes : PULARGE_INTEGER;
      lpTotalNumberOfFreeBytes : PULARGE_INTEGER
   ) return BOOL;
   pragma import (C,GetDiskFreeSpaceExA,"GetDiskFreeSpaceExA");
   function GetDiskFreeSpaceExW(
      lpDirectoryName : LPCWSTR;
      lpFreeBytesAvailableToCaller : PULARGE_INTEGER;
      lpTotalNumberOfBytes : PULARGE_INTEGER;
      lpTotalNumberOfFreeBytes : PULARGE_INTEGER
   ) return BOOL;
   pragma import (C,GetDiskFreeSpaceExW,"GetDiskFreeSpaceExW");
   function GetDriveTypeA(
      lpRootPathName : LPCSTR
   ) return UINT;
   pragma import (C,GetDriveTypeA,"GetDriveTypeA");
   function GetDriveTypeW(
      lpRootPathName : LPCWSTR
   ) return UINT;
   pragma import (C,GetDriveTypeW,"GetDriveTypeW");
   type WIN32_FILE_ATTRIBUTE_DATA_x is record
      dwFileAttributes : DWORD;
      ftCreationTime : FILETIME;
      ftLastAccessTime : FILETIME;
      ftLastWriteTime : FILETIME;
      nFileSizeHigh : DWORD;
      nFileSizeLow : DWORD;
   end record;
   subtype WIN32_FILE_ATTRIBUTE_DATA is WIN32_FILE_ATTRIBUTE_DATA_x; -- CXType_Elaborated
   type LPWIN32_FILE_ATTRIBUTE_DATA is access WIN32_FILE_ATTRIBUTE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   function GetFileAttributesA(
      lpFileName : LPCSTR
   ) return DWORD;
   pragma import (C,GetFileAttributesA,"GetFileAttributesA");
   function GetFileAttributesW(
      lpFileName : LPCWSTR
   ) return DWORD;
   pragma import (C,GetFileAttributesW,"GetFileAttributesW");
   function GetFileAttributesExA(
      lpFileName : LPCSTR;
      fInfoLevelId : GET_FILEEX_INFO_LEVELS;
      lpFileInformation : LPVOID
   ) return BOOL;
   pragma import (C,GetFileAttributesExA,"GetFileAttributesExA");
   function GetFileAttributesExW(
      lpFileName : LPCWSTR;
      fInfoLevelId : GET_FILEEX_INFO_LEVELS;
      lpFileInformation : LPVOID
   ) return BOOL;
   pragma import (C,GetFileAttributesExW,"GetFileAttributesExW");
   type BY_HANDLE_FILE_INFORMATION_x is record
      dwFileAttributes : DWORD;
      ftCreationTime : FILETIME;
      ftLastAccessTime : FILETIME;
      ftLastWriteTime : FILETIME;
      dwVolumeSerialNumber : DWORD;
      nFileSizeHigh : DWORD;
      nFileSizeLow : DWORD;
      nNumberOfLinks : DWORD;
      nFileIndexHigh : DWORD;
      nFileIndexLow : DWORD;
   end record;
   subtype BY_HANDLE_FILE_INFORMATION is BY_HANDLE_FILE_INFORMATION_x; -- CXType_Elaborated
   type PBY_HANDLE_FILE_INFORMATION is access BY_HANDLE_FILE_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type LPBY_HANDLE_FILE_INFORMATION is access BY_HANDLE_FILE_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   function GetFileInformationByHandle(
      hFile_x : HANDLE;
      lpFileInformation : LPBY_HANDLE_FILE_INFORMATION
   ) return BOOL;
   pragma import (C,GetFileInformationByHandle,"GetFileInformationByHandle");
   function GetFileSize(
      hFile_x : HANDLE;
      lpFileSizeHigh : LPDWORD
   ) return DWORD;
   pragma import (C,GetFileSize,"GetFileSize");
   function GetFileSizeEx(
      hFile_x : HANDLE;
      lpFileSize : PLARGE_INTEGER
   ) return BOOL;
   pragma import (C,GetFileSizeEx,"GetFileSizeEx");
   function GetFileType(
      hFile_x : HANDLE
   ) return DWORD;
   pragma import (C,GetFileType,"GetFileType");
   function GetFinalPathNameByHandleA(
      hFile_x : HANDLE;
      lpszFilePath : LPSTR;
      cchFilePath : DWORD;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,GetFinalPathNameByHandleA,"GetFinalPathNameByHandleA");
   function GetFinalPathNameByHandleW(
      hFile_x : HANDLE;
      lpszFilePath : LPWSTR;
      cchFilePath : DWORD;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,GetFinalPathNameByHandleW,"GetFinalPathNameByHandleW");
   function GetFileTime(
      hFile_x : HANDLE;
      lpCreationTime : LPFILETIME;
      lpLastAccessTime : LPFILETIME;
      lpLastWriteTime : LPFILETIME
   ) return BOOL;
   pragma import (C,GetFileTime,"GetFileTime");
   function GetFullPathNameW(
      lpFileName : LPCWSTR;
      nBufferLength : DWORD;
      lpBuffer : LPWSTR;
      lpFilePart : access LPWSTR
   ) return DWORD;
   pragma import (C,GetFullPathNameW,"GetFullPathNameW");
   function GetFullPathNameA(
      lpFileName : LPCSTR;
      nBufferLength : DWORD;
      lpBuffer : LPSTR;
      lpFilePart : access LPSTR
   ) return DWORD;
   pragma import (C,GetFullPathNameA,"GetFullPathNameA");
   function GetLogicalDrives return DWORD;
   pragma import (C,GetLogicalDrives,"GetLogicalDrives");
   function GetLogicalDriveStringsW(
      nBufferLength : DWORD;
      lpBuffer : LPWSTR
   ) return DWORD;
   pragma import (C,GetLogicalDriveStringsW,"GetLogicalDriveStringsW");
   function GetLongPathNameA(
      lpszShortPath : LPCSTR;
      lpszLongPath : LPSTR;
      cchBuffer : DWORD
   ) return DWORD;
   pragma import (C,GetLongPathNameA,"GetLongPathNameA");
   function GetLongPathNameW(
      lpszShortPath : LPCWSTR;
      lpszLongPath : LPWSTR;
      cchBuffer : DWORD
   ) return DWORD;
   pragma import (C,GetLongPathNameW,"GetLongPathNameW");
   function GetShortPathNameW(
      lpszLongPath : LPCWSTR;
      lpszShortPath : LPWSTR;
      cchBuffer : DWORD
   ) return DWORD;
   pragma import (C,GetShortPathNameW,"GetShortPathNameW");
   function GetTempFileNameW(
      lpPathName : LPCWSTR;
      lpPrefixString : LPCWSTR;
      uUnique : UINT;
      lpTempFileName : LPWSTR
   ) return UINT;
   pragma import (C,GetTempFileNameW,"GetTempFileNameW");
   function GetVolumeInformationByHandleW(
      hFile_x : HANDLE;
      lpVolumeNameBuffer : LPWSTR;
      nVolumeNameSize : DWORD;
      lpVolumeSerialNumber : LPDWORD;
      lpMaximumComponentLength : LPDWORD;
      lpFileSystemFlags : LPDWORD;
      lpFileSystemNameBuffer : LPWSTR;
      nFileSystemNameSize : DWORD
   ) return BOOL;
   pragma import (C,GetVolumeInformationByHandleW,"GetVolumeInformationByHandleW");
   function GetVolumeInformationW(
      lpRootPathName : LPCWSTR;
      lpVolumeNameBuffer : LPWSTR;
      nVolumeNameSize : DWORD;
      lpVolumeSerialNumber : LPDWORD;
      lpMaximumComponentLength : LPDWORD;
      lpFileSystemFlags : LPDWORD;
      lpFileSystemNameBuffer : LPWSTR;
      nFileSystemNameSize : DWORD
   ) return BOOL;
   pragma import (C,GetVolumeInformationW,"GetVolumeInformationW");
   function GetVolumePathNameW(
      lpszFileName : LPCWSTR;
      lpszVolumePathName : LPWSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,GetVolumePathNameW,"GetVolumePathNameW");
   function LocalFileTimeToFileTime(
      lpLocalFileTime : access constant FILETIME;
      lpFileTime_x : LPFILETIME
   ) return BOOL;
   pragma import (C,LocalFileTimeToFileTime,"LocalFileTimeToFileTime");
   function LockFile(
      hFile_x : HANDLE;
      dwFileOffsetLow : DWORD;
      dwFileOffsetHigh : DWORD;
      nNumberOfBytesToLockLow : DWORD;
      nNumberOfBytesToLockHigh : DWORD
   ) return BOOL;
   pragma import (C,LockFile,"LockFile");
   function LockFileEx(
      hFile_x : HANDLE;
      dwFlags : DWORD;
      dwReserved : DWORD;
      nNumberOfBytesToLockLow : DWORD;
      nNumberOfBytesToLockHigh : DWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,LockFileEx,"LockFileEx");
   function QueryDosDeviceW(
      lpDeviceName : LPCWSTR;
      lpTargetPath : LPWSTR;
      ucchMax : DWORD
   ) return DWORD;
   pragma import (C,QueryDosDeviceW,"QueryDosDeviceW");
   function ReadFile(
      hFile_x : HANDLE;
      lpBuffer : LPVOID;
      nNumberOfBytesToRead : DWORD;
      lpNumberOfBytesRead : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,ReadFile,"ReadFile");
   function ReadFileEx(
      hFile_x : HANDLE;
      lpBuffer : LPVOID;
      nNumberOfBytesToRead : DWORD;
      lpOverlapped_x : LPOVERLAPPED;
      lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE
   ) return BOOL;
   pragma import (C,ReadFileEx,"ReadFileEx");
   function ReadFileScatter(
      hFile_x : HANDLE;
      aSegmentArray : Void;
      nNumberOfBytesToRead : DWORD;
      lpReserved : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,ReadFileScatter,"ReadFileScatter");
   function RemoveDirectoryA(
      lpPathName : LPCSTR
   ) return BOOL;
   pragma import (C,RemoveDirectoryA,"RemoveDirectoryA");
   function RemoveDirectoryW(
      lpPathName : LPCWSTR
   ) return BOOL;
   pragma import (C,RemoveDirectoryW,"RemoveDirectoryW");
   function SetEndOfFile(
      hFile_x : HANDLE
   ) return BOOL;
   pragma import (C,SetEndOfFile,"SetEndOfFile");
   function SetFileAttributesA(
      lpFileName : LPCSTR;
      dwFileAttributes : DWORD
   ) return BOOL;
   pragma import (C,SetFileAttributesA,"SetFileAttributesA");
   function SetFileAttributesW(
      lpFileName : LPCWSTR;
      dwFileAttributes : DWORD
   ) return BOOL;
   pragma import (C,SetFileAttributesW,"SetFileAttributesW");
   function SetFileInformationByHandle(
      hFile_x : HANDLE;
      FileInformationClass : FILE_INFO_BY_HANDLE_CLASS;
      lpFileInformation : LPVOID;
      dwBufferSize : DWORD
   ) return BOOL;
   pragma import (C,SetFileInformationByHandle,"SetFileInformationByHandle");
   function SetFilePointer(
      hFile_x : HANDLE;
      lDistanceToMove : LONG;
      lpDistanceToMoveHigh : PLONG;
      dwMoveMethod : DWORD
   ) return DWORD;
   pragma import (C,SetFilePointer,"SetFilePointer");
   function SetFilePointerEx(
      hFile_x : HANDLE;
      liDistanceToMove : LARGE_INTEGER;
      lpNewFilePointer : PLARGE_INTEGER;
      dwMoveMethod : DWORD
   ) return BOOL;
   pragma import (C,SetFilePointerEx,"SetFilePointerEx");
   function SetFileTime(
      hFile_x : HANDLE;
      lpCreationTime : access constant FILETIME;
      lpLastAccessTime : access constant FILETIME;
      lpLastWriteTime : access constant FILETIME
   ) return BOOL;
   pragma import (C,SetFileTime,"SetFileTime");
   function SetFileValidData(
      hFile_x : HANDLE;
      ValidDataLength : LONGLONG
   ) return BOOL;
   pragma import (C,SetFileValidData,"SetFileValidData");
   function UnlockFile(
      hFile_x : HANDLE;
      dwFileOffsetLow : DWORD;
      dwFileOffsetHigh : DWORD;
      nNumberOfBytesToUnlockLow : DWORD;
      nNumberOfBytesToUnlockHigh : DWORD
   ) return BOOL;
   pragma import (C,UnlockFile,"UnlockFile");
   function UnlockFileEx(
      hFile_x : HANDLE;
      dwReserved : DWORD;
      nNumberOfBytesToUnlockLow : DWORD;
      nNumberOfBytesToUnlockHigh : DWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,UnlockFileEx,"UnlockFileEx");
   function WriteFile(
      hFile_x : HANDLE;
      lpBuffer : LPCVOID;
      nNumberOfBytesToWrite : DWORD;
      lpNumberOfBytesWritten : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,WriteFile,"WriteFile");
   function WriteFileEx(
      hFile_x : HANDLE;
      lpBuffer : LPCVOID;
      nNumberOfBytesToWrite : DWORD;
      lpOverlapped_x : LPOVERLAPPED;
      lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE
   ) return BOOL;
   pragma import (C,WriteFileEx,"WriteFileEx");
   function WriteFileGather(
      hFile_x : HANDLE;
      aSegmentArray : Void;
      nNumberOfBytesToWrite : DWORD;
      lpReserved : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,WriteFileGather,"WriteFileGather");
   function GetTempPathW(
      nBufferLength : DWORD;
      lpBuffer : LPWSTR
   ) return DWORD;
   pragma import (C,GetTempPathW,"GetTempPathW");
   function GetVolumeNameForVolumeMountPointW(
      lpszVolumeMountPoint : LPCWSTR;
      lpszVolumeName : LPWSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,GetVolumeNameForVolumeMountPointW,"GetVolumeNameForVolumeMountPointW");
   function GetVolumePathNamesForVolumeNameW(
      lpszVolumeName : LPCWSTR;
      lpszVolumePathNames : LPWCH;
      cchBufferLength : DWORD;
      lpcchReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,GetVolumePathNamesForVolumeNameW,"GetVolumePathNamesForVolumeNameW");
   type CREATEFILE2_EXTENDED_PARAMETERS_x is record
      dwSize : DWORD;
      dwFileAttributes : DWORD;
      dwFileFlags : DWORD;
      dwSecurityQosFlags : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      hTemplateFile : HANDLE;
   end record;
   subtype CREATEFILE2_EXTENDED_PARAMETERS is CREATEFILE2_EXTENDED_PARAMETERS_x; -- CXType_Elaborated
   type PCREATEFILE2_EXTENDED_PARAMETERS is access CREATEFILE2_EXTENDED_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type LPCREATEFILE2_EXTENDED_PARAMETERS is access CREATEFILE2_EXTENDED_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   function CreateFile2(
      lpFileName : LPCWSTR;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      dwCreationDisposition : DWORD;
      pCreateExParams : LPCREATEFILE2_EXTENDED_PARAMETERS
   ) return HANDLE;
   pragma import (C,CreateFile2,"CreateFile2");
   function SetFileIoOverlappedRange(
      FileHandle : HANDLE;
      OverlappedRangeStart : PUCHAR;
      Length : ULONG
   ) return BOOL;
   pragma import (C,SetFileIoOverlappedRange,"SetFileIoOverlappedRange");
   function GetCompressedFileSizeA(
      lpFileName : LPCSTR;
      lpFileSizeHigh : LPDWORD
   ) return DWORD;
   pragma import (C,GetCompressedFileSizeA,"GetCompressedFileSizeA");
   function GetCompressedFileSizeW(
      lpFileName : LPCWSTR;
      lpFileSizeHigh : LPDWORD
   ) return DWORD;
   pragma import (C,GetCompressedFileSizeW,"GetCompressedFileSizeW");
   type STREAM_INFO_LEVELS_x is (
      FindStreamInfoStandard,
      FindStreamInfoMaxInfoLevel
   );
   for STREAM_INFO_LEVELS_x use (
      FindStreamInfoStandard => 0,
      FindStreamInfoMaxInfoLevel => 1
   );
   for STREAM_INFO_LEVELS_x'Size use 32;
   subtype STREAM_INFO_LEVELS is STREAM_INFO_LEVELS_x; -- CXType_Elaborated
   type WIN32_FIND_STREAM_DATA_x is record
      StreamSize : LARGE_INTEGER;
      cStreamName : Void;
   end record;
   subtype WIN32_FIND_STREAM_DATA is WIN32_FIND_STREAM_DATA_x; -- CXType_Elaborated
   type PWIN32_FIND_STREAM_DATA is access WIN32_FIND_STREAM_DATA_x; -- CXType_Pointer - CXType_Elaborated
   function FindFirstStreamW(
      lpFileName : LPCWSTR;
      InfoLevel : STREAM_INFO_LEVELS;
      lpFindStreamData : LPVOID;
      dwFlags : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstStreamW,"FindFirstStreamW");
   function FindNextStreamW(
      hFindStream : HANDLE;
      lpFindStreamData : LPVOID
   ) return BOOL;
   pragma import (C,FindNextStreamW,"FindNextStreamW");
   function AreFileApisANSI return BOOL;
   pragma import (C,AreFileApisANSI,"AreFileApisANSI");
   function GetTempPathA(
      nBufferLength : DWORD;
      lpBuffer : LPSTR
   ) return DWORD;
   pragma import (C,GetTempPathA,"GetTempPathA");
   function FindFirstFileNameW(
      lpFileName : LPCWSTR;
      dwFlags : DWORD;
      StringLength : LPDWORD;
      LinkName : PWSTR
   ) return HANDLE;
   pragma import (C,FindFirstFileNameW,"FindFirstFileNameW");
   function FindNextFileNameW(
      hFindStream : HANDLE;
      StringLength : LPDWORD;
      LinkName : PWSTR
   ) return BOOL;
   pragma import (C,FindNextFileNameW,"FindNextFileNameW");
   function GetVolumeInformationA(
      lpRootPathName : LPCSTR;
      lpVolumeNameBuffer : LPSTR;
      nVolumeNameSize : DWORD;
      lpVolumeSerialNumber : LPDWORD;
      lpMaximumComponentLength : LPDWORD;
      lpFileSystemFlags : LPDWORD;
      lpFileSystemNameBuffer : LPSTR;
      nFileSystemNameSize : DWORD
   ) return BOOL;
   pragma import (C,GetVolumeInformationA,"GetVolumeInformationA");
   function GetTempFileNameA(
      lpPathName : LPCSTR;
      lpPrefixString : LPCSTR;
      uUnique : UINT;
      lpTempFileName : LPSTR
   ) return UINT;
   pragma import (C,GetTempFileNameA,"GetTempFileNameA");
   procedure SetFileApisToOEM;
   pragma import (C,SetFileApisToOEM,"SetFileApisToOEM");
   procedure SetFileApisToANSI;
   pragma import (C,SetFileApisToANSI,"SetFileApisToANSI");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\debugapi.h>
   function IsDebuggerPresent return BOOL;
   pragma import (C,IsDebuggerPresent,"IsDebuggerPresent");
   procedure DebugBreak;
   pragma import (C,DebugBreak,"DebugBreak");
   procedure OutputDebugStringA(
      lpOutputString : LPCSTR
   );
   pragma import (C,OutputDebugStringA,"OutputDebugStringA");
   procedure OutputDebugStringW(
      lpOutputString : LPCWSTR
   );
   pragma import (C,OutputDebugStringW,"OutputDebugStringW");
   function ContinueDebugEvent(
      dwProcessId : DWORD;
      dwThreadId : DWORD;
      dwContinueStatus : DWORD
   ) return BOOL;
   pragma import (C,ContinueDebugEvent,"ContinueDebugEvent");
   function WaitForDebugEvent(
      lpDebugEvent : LPDEBUG_EVENT;
      dwMilliseconds : DWORD
   ) return BOOL;
   pragma import (C,WaitForDebugEvent,"WaitForDebugEvent");
   function DebugActiveProcess(
      dwProcessId : DWORD
   ) return BOOL;
   pragma import (C,DebugActiveProcess,"DebugActiveProcess");
   function DebugActiveProcessStop(
      dwProcessId : DWORD
   ) return BOOL;
   pragma import (C,DebugActiveProcessStop,"DebugActiveProcessStop");
   function CheckRemoteDebuggerPresent(
      hProcess : HANDLE;
      pbDebuggerPresent : PBOOL
   ) return BOOL;
   pragma import (C,CheckRemoteDebuggerPresent,"CheckRemoteDebuggerPresent");
   function WaitForDebugEventEx(
      lpDebugEvent : LPDEBUG_EVENT;
      dwMilliseconds : DWORD
   ) return BOOL;
   pragma import (C,WaitForDebugEventEx,"WaitForDebugEventEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\utilapiset.h>
   procedure EncodePointer(
      Ptr : PVOID
   );
   pragma import (C,EncodePointer,"EncodePointer");
   procedure DecodePointer(
      Ptr : PVOID
   );
   pragma import (C,DecodePointer,"DecodePointer");
   procedure EncodeSystemPointer(
      Ptr : PVOID
   );
   pragma import (C,EncodeSystemPointer,"EncodeSystemPointer");
   procedure DecodeSystemPointer(
      Ptr : PVOID
   );
   pragma import (C,DecodeSystemPointer,"DecodeSystemPointer");
   function EncodeRemotePointer(
      ProcessHandle : HANDLE;
      Ptr : PVOID;
      EncodedPtr : access PVOID
   ) return HRESULT;
   pragma import (C,EncodeRemotePointer,"EncodeRemotePointer");
   function DecodeRemotePointer(
      ProcessHandle : HANDLE;
      Ptr : PVOID;
      DecodedPtr : access PVOID
   ) return HRESULT;
   pragma import (C,DecodeRemotePointer,"DecodeRemotePointer");
   function Beep(
      dwFreq : DWORD;
      dwDuration : DWORD
   ) return BOOL;
   pragma import (C,Beep,"Beep");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\handleapi.h>
   function CloseHandle(
      hObject : HANDLE
   ) return BOOL;
   pragma import (C,CloseHandle,"CloseHandle");
   function DuplicateHandle(
      hSourceProcessHandle : HANDLE;
      hSourceHandle : HANDLE;
      hTargetProcessHandle : HANDLE;
      lpTargetHandle : LPHANDLE;
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      dwOptions : DWORD
   ) return BOOL;
   pragma import (C,DuplicateHandle,"DuplicateHandle");
   function CompareObjectHandles(
      hFirstObjectHandle : HANDLE;
      hSecondObjectHandle : HANDLE
   ) return BOOL;
   pragma import (C,CompareObjectHandles,"CompareObjectHandles");
   function GetHandleInformation(
      hObject : HANDLE;
      lpdwFlags : LPDWORD
   ) return BOOL;
   pragma import (C,GetHandleInformation,"GetHandleInformation");
   function SetHandleInformation(
      hObject : HANDLE;
      dwMask : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,SetHandleInformation,"SetHandleInformation");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\errhandlingapi.h>
   subtype PTOP_LEVEL_EXCEPTION_FILTER is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LONG (struct _EXCEPTION_POINTERS *)
   subtype LPTOP_LEVEL_EXCEPTION_FILTER is PTOP_LEVEL_EXCEPTION_FILTER; -- CXType_Typedef
   procedure RaiseException(
      dwExceptionCode : DWORD;
      dwExceptionFlags : DWORD;
      nNumberOfArguments : DWORD;
      lpArguments : access constant ULONG_PTR
   );
   pragma import (C,RaiseException,"RaiseException");
   function UnhandledExceptionFilter(
      ExceptionInfo : access Void
   ) return LONG;
   pragma import (C,UnhandledExceptionFilter,"UnhandledExceptionFilter");
   function SetUnhandledExceptionFilter(
      lpTopLevelExceptionFilter : LPTOP_LEVEL_EXCEPTION_FILTER
   ) return LPTOP_LEVEL_EXCEPTION_FILTER;
   pragma import (C,SetUnhandledExceptionFilter,"SetUnhandledExceptionFilter");
   function GetLastError return DWORD;
   pragma import (C,GetLastError,"GetLastError");
   procedure SetLastError(
      dwErrCode : DWORD
   );
   pragma import (C,SetLastError,"SetLastError");
   function GetErrorMode return UINT;
   pragma import (C,GetErrorMode,"GetErrorMode");
   function SetErrorMode(
      uMode : UINT
   ) return UINT;
   pragma import (C,SetErrorMode,"SetErrorMode");
   procedure AddVectoredExceptionHandler(
      First : ULONG;
      Handler : PVECTORED_EXCEPTION_HANDLER
   );
   pragma import (C,AddVectoredExceptionHandler,"AddVectoredExceptionHandler");
   function RemoveVectoredExceptionHandler(
      Handle_x : PVOID
   ) return ULONG;
   pragma import (C,RemoveVectoredExceptionHandler,"RemoveVectoredExceptionHandler");
   procedure AddVectoredContinueHandler(
      First : ULONG;
      Handler : PVECTORED_EXCEPTION_HANDLER
   );
   pragma import (C,AddVectoredContinueHandler,"AddVectoredContinueHandler");
   function RemoveVectoredContinueHandler(
      Handle_x : PVOID
   ) return ULONG;
   pragma import (C,RemoveVectoredContinueHandler,"RemoveVectoredContinueHandler");
   procedure RaiseFailFastException(
      pExceptionRecord : PEXCEPTION_RECORD;
      pContextRecord : PCONTEXT;
      dwFlags : DWORD
   );
   pragma import (C,RaiseFailFastException,"RaiseFailFastException");
   procedure FatalAppExitA(
      uAction : UINT;
      lpMessageText : LPCSTR
   );
   pragma import (C,FatalAppExitA,"FatalAppExitA");
   procedure FatalAppExitW(
      uAction : UINT;
      lpMessageText : LPCWSTR
   );
   pragma import (C,FatalAppExitW,"FatalAppExitW");
   function GetThreadErrorMode return DWORD;
   pragma import (C,GetThreadErrorMode,"GetThreadErrorMode");
   function SetThreadErrorMode(
      dwNewMode : DWORD;
      lpOldMode : LPDWORD
   ) return BOOL;
   pragma import (C,SetThreadErrorMode,"SetThreadErrorMode");
   procedure TerminateProcessOnMemoryExhaustion(
      FailedAllocationSize : SIZE_T
   );
   pragma import (C,TerminateProcessOnMemoryExhaustion,"TerminateProcessOnMemoryExhaustion");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\fibersapi.h>
   function FlsAlloc(
      lpCallback : PFLS_CALLBACK_FUNCTION
   ) return DWORD;
   pragma import (C,FlsAlloc,"FlsAlloc");
   procedure FlsGetValue(
      dwFlsIndex : DWORD
   );
   pragma import (C,FlsGetValue,"FlsGetValue");
   function FlsSetValue(
      dwFlsIndex : DWORD;
      lpFlsData : PVOID
   ) return BOOL;
   pragma import (C,FlsSetValue,"FlsSetValue");
   function FlsFree(
      dwFlsIndex : DWORD
   ) return BOOL;
   pragma import (C,FlsFree,"FlsFree");
   function IsThreadAFiber return BOOL;
   pragma import (C,IsThreadAFiber,"IsThreadAFiber");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\namedpipeapi.h>
   function CreatePipe(
      hReadPipe : PHANDLE;
      hWritePipe : PHANDLE;
      lpPipeAttributes : LPSECURITY_ATTRIBUTES;
      nSize : DWORD
   ) return BOOL;
   pragma import (C,CreatePipe,"CreatePipe");
   function ConnectNamedPipe(
      hNamedPipe : HANDLE;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,ConnectNamedPipe,"ConnectNamedPipe");
   function DisconnectNamedPipe(
      hNamedPipe : HANDLE
   ) return BOOL;
   pragma import (C,DisconnectNamedPipe,"DisconnectNamedPipe");
   function SetNamedPipeHandleState(
      hNamedPipe : HANDLE;
      lpMode : LPDWORD;
      lpMaxCollectionCount : LPDWORD;
      lpCollectDataTimeout : LPDWORD
   ) return BOOL;
   pragma import (C,SetNamedPipeHandleState,"SetNamedPipeHandleState");
   function PeekNamedPipe(
      hNamedPipe : HANDLE;
      lpBuffer : LPVOID;
      nBufferSize : DWORD;
      lpBytesRead : LPDWORD;
      lpTotalBytesAvail : LPDWORD;
      lpBytesLeftThisMessage : LPDWORD
   ) return BOOL;
   pragma import (C,PeekNamedPipe,"PeekNamedPipe");
   function TransactNamedPipe(
      hNamedPipe : HANDLE;
      lpInBuffer : LPVOID;
      nInBufferSize : DWORD;
      lpOutBuffer : LPVOID;
      nOutBufferSize : DWORD;
      lpBytesRead : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,TransactNamedPipe,"TransactNamedPipe");
   function CreateNamedPipeW(
      lpName : LPCWSTR;
      dwOpenMode : DWORD;
      dwPipeMode : DWORD;
      nMaxInstances : DWORD;
      nOutBufferSize : DWORD;
      nInBufferSize : DWORD;
      nDefaultTimeOut : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return HANDLE;
   pragma import (C,CreateNamedPipeW,"CreateNamedPipeW");
   function WaitNamedPipeW(
      lpNamedPipeName : LPCWSTR;
      nTimeOut : DWORD
   ) return BOOL;
   pragma import (C,WaitNamedPipeW,"WaitNamedPipeW");
   function GetNamedPipeClientComputerNameW(
      Pipe : HANDLE;
      ClientComputerName : LPWSTR;
      ClientComputerNameLength : ULONG
   ) return BOOL;
   pragma import (C,GetNamedPipeClientComputerNameW,"GetNamedPipeClientComputerNameW");
   function ImpersonateNamedPipeClient(
      hNamedPipe : HANDLE
   ) return BOOL;
   pragma import (C,ImpersonateNamedPipeClient,"ImpersonateNamedPipeClient");
   function GetNamedPipeInfo(
      hNamedPipe : HANDLE;
      lpFlags : LPDWORD;
      lpOutBufferSize : LPDWORD;
      lpInBufferSize : LPDWORD;
      lpMaxInstances : LPDWORD
   ) return BOOL;
   pragma import (C,GetNamedPipeInfo,"GetNamedPipeInfo");
   function GetNamedPipeHandleStateW(
      hNamedPipe : HANDLE;
      lpState : LPDWORD;
      lpCurInstances : LPDWORD;
      lpMaxCollectionCount : LPDWORD;
      lpCollectDataTimeout : LPDWORD;
      lpUserName : LPWSTR;
      nMaxUserNameSize : DWORD
   ) return BOOL;
   pragma import (C,GetNamedPipeHandleStateW,"GetNamedPipeHandleStateW");
   function CallNamedPipeW(
      lpNamedPipeName : LPCWSTR;
      lpInBuffer : LPVOID;
      nInBufferSize : DWORD;
      lpOutBuffer : LPVOID;
      nOutBufferSize : DWORD;
      lpBytesRead : LPDWORD;
      nTimeOut : DWORD
   ) return BOOL;
   pragma import (C,CallNamedPipeW,"CallNamedPipeW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\profileapi.h>
   function QueryPerformanceCounter(
      lpPerformanceCount : access LARGE_INTEGER
   ) return BOOL;
   pragma import (C,QueryPerformanceCounter,"QueryPerformanceCounter");
   function QueryPerformanceFrequency(
      lpFrequency : access LARGE_INTEGER
   ) return BOOL;
   pragma import (C,QueryPerformanceFrequency,"QueryPerformanceFrequency");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\heapapi.h>
   type HEAP_SUMMARY_x is record
      cb : DWORD;
      cbAllocated : SIZE_T;
      cbCommitted : SIZE_T;
      cbReserved : SIZE_T;
      cbMaxReserve : SIZE_T;
   end record;
   subtype HEAP_SUMMARY is HEAP_SUMMARY_x; -- CXType_Elaborated
   type PHEAP_SUMMARY is access HEAP_SUMMARY_x; -- CXType_Pointer - CXType_Elaborated
   subtype LPHEAP_SUMMARY is PHEAP_SUMMARY; -- CXType_Typedef
   function HeapCreate(
      flOptions : DWORD;
      dwInitialSize : SIZE_T;
      dwMaximumSize : SIZE_T
   ) return HANDLE;
   pragma import (C,HeapCreate,"HeapCreate");
   function HeapDestroy(
      hHeap : HANDLE
   ) return BOOL;
   pragma import (C,HeapDestroy,"HeapDestroy");
   procedure HeapAlloc(
      hHeap : HANDLE;
      dwFlags : DWORD;
      dwBytes : SIZE_T
   );
   pragma import (C,HeapAlloc,"HeapAlloc");
   procedure HeapReAlloc(
      hHeap : HANDLE;
      dwFlags : DWORD;
      lpMem : LPVOID;
      dwBytes : SIZE_T
   );
   pragma import (C,HeapReAlloc,"HeapReAlloc");
   function HeapFree(
      hHeap : HANDLE;
      dwFlags : DWORD;
      lpMem : LPVOID
   ) return BOOL;
   pragma import (C,HeapFree,"HeapFree");
   function HeapSize(
      hHeap : HANDLE;
      dwFlags : DWORD;
      lpMem : LPCVOID
   ) return SIZE_T;
   pragma import (C,HeapSize,"HeapSize");
   function GetProcessHeap return HANDLE;
   pragma import (C,GetProcessHeap,"GetProcessHeap");
   function HeapCompact(
      hHeap : HANDLE;
      dwFlags : DWORD
   ) return SIZE_T;
   pragma import (C,HeapCompact,"HeapCompact");
   function HeapSetInformation(
      HeapHandle : HANDLE;
      HeapInformationClass : HEAP_INFORMATION_CLASS;
      HeapInformation : PVOID;
      HeapInformationLength : SIZE_T
   ) return BOOL;
   pragma import (C,HeapSetInformation,"HeapSetInformation");
   function HeapValidate(
      hHeap : HANDLE;
      dwFlags : DWORD;
      lpMem : LPCVOID
   ) return BOOL;
   pragma import (C,HeapValidate,"HeapValidate");
   function HeapSummary(
      hHeap : HANDLE;
      dwFlags : DWORD;
      lpSummary : LPHEAP_SUMMARY
   ) return BOOL;
   pragma import (C,HeapSummary,"HeapSummary");
   function GetProcessHeaps(
      NumberOfHeaps : DWORD;
      ProcessHeaps : PHANDLE
   ) return DWORD;
   pragma import (C,GetProcessHeaps,"GetProcessHeaps");
   function HeapLock(
      hHeap : HANDLE
   ) return BOOL;
   pragma import (C,HeapLock,"HeapLock");
   function HeapUnlock(
      hHeap : HANDLE
   ) return BOOL;
   pragma import (C,HeapUnlock,"HeapUnlock");
   function HeapWalk(
      hHeap : HANDLE;
      lpEntry : LPPROCESS_HEAP_ENTRY
   ) return BOOL;
   pragma import (C,HeapWalk,"HeapWalk");
   function HeapQueryInformation(
      HeapHandle : HANDLE;
      HeapInformationClass : HEAP_INFORMATION_CLASS;
      HeapInformation : PVOID;
      HeapInformationLength : SIZE_T;
      ReturnLength : PSIZE_T
   ) return BOOL;
   pragma import (C,HeapQueryInformation,"HeapQueryInformation");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\ioapiset.h>
   function CreateIoCompletionPort(
      FileHandle : HANDLE;
      ExistingCompletionPort : HANDLE;
      CompletionKey : ULONG_PTR;
      NumberOfConcurrentThreads : DWORD
   ) return HANDLE;
   pragma import (C,CreateIoCompletionPort,"CreateIoCompletionPort");
   function GetQueuedCompletionStatus(
      CompletionPort : HANDLE;
      lpNumberOfBytesTransferred : LPDWORD;
      lpCompletionKey : PULONG_PTR;
      lpOverlapped_x : access LPOVERLAPPED;
      dwMilliseconds : DWORD
   ) return BOOL;
   pragma import (C,GetQueuedCompletionStatus,"GetQueuedCompletionStatus");
   function GetQueuedCompletionStatusEx(
      CompletionPort : HANDLE;
      lpCompletionPortEntries : LPOVERLAPPED_ENTRY;
      ulCount : ULONG;
      ulNumEntriesRemoved : PULONG;
      dwMilliseconds : DWORD;
      fAlertable : BOOL
   ) return BOOL;
   pragma import (C,GetQueuedCompletionStatusEx,"GetQueuedCompletionStatusEx");
   function PostQueuedCompletionStatus(
      CompletionPort : HANDLE;
      dwNumberOfBytesTransferred : DWORD;
      dwCompletionKey : ULONG_PTR;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,PostQueuedCompletionStatus,"PostQueuedCompletionStatus");
   function DeviceIoControl(
      hDevice : HANDLE;
      dwIoControlCode : DWORD;
      lpInBuffer : LPVOID;
      nInBufferSize : DWORD;
      lpOutBuffer : LPVOID;
      nOutBufferSize : DWORD;
      lpBytesReturned : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,DeviceIoControl,"DeviceIoControl");
   function GetOverlappedResult(
      hFile_x : HANDLE;
      lpOverlapped_x : LPOVERLAPPED;
      lpNumberOfBytesTransferred : LPDWORD;
      bWait : BOOL
   ) return BOOL;
   pragma import (C,GetOverlappedResult,"GetOverlappedResult");
   function CancelIoEx(
      hFile_x : HANDLE;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,CancelIoEx,"CancelIoEx");
   function CancelIo(
      hFile_x : HANDLE
   ) return BOOL;
   pragma import (C,CancelIo,"CancelIo");
   function GetOverlappedResultEx(
      hFile_x : HANDLE;
      lpOverlapped_x : LPOVERLAPPED;
      lpNumberOfBytesTransferred : LPDWORD;
      dwMilliseconds : DWORD;
      bAlertable : BOOL
   ) return BOOL;
   pragma import (C,GetOverlappedResultEx,"GetOverlappedResultEx");
   function CancelSynchronousIo(
      hThread : HANDLE
   ) return BOOL;
   pragma import (C,CancelSynchronousIo,"CancelSynchronousIo");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\synchapi.h>
   subtype SRWLOCK is RTL_SRWLOCK; -- CXType_Typedef
   type PSRWLOCK is access RTL_SRWLOCK; -- CXType_Pointer - CXType_Typedef
   procedure InitializeSRWLock(
      SRWLock_x : PSRWLOCK
   );
   pragma import (C,InitializeSRWLock,"InitializeSRWLock");
   procedure ReleaseSRWLockExclusive(
      SRWLock_x : PSRWLOCK
   );
   pragma import (C,ReleaseSRWLockExclusive,"ReleaseSRWLockExclusive");
   procedure ReleaseSRWLockShared(
      SRWLock_x : PSRWLOCK
   );
   pragma import (C,ReleaseSRWLockShared,"ReleaseSRWLockShared");
   procedure AcquireSRWLockExclusive(
      SRWLock_x : PSRWLOCK
   );
   pragma import (C,AcquireSRWLockExclusive,"AcquireSRWLockExclusive");
   procedure AcquireSRWLockShared(
      SRWLock_x : PSRWLOCK
   );
   pragma import (C,AcquireSRWLockShared,"AcquireSRWLockShared");
   function TryAcquireSRWLockExclusive(
      SRWLock_x : PSRWLOCK
   ) return BOOLEAN;
   pragma import (C,TryAcquireSRWLockExclusive,"TryAcquireSRWLockExclusive");
   function TryAcquireSRWLockShared(
      SRWLock_x : PSRWLOCK
   ) return BOOLEAN;
   pragma import (C,TryAcquireSRWLockShared,"TryAcquireSRWLockShared");
   procedure InitializeCriticalSection(
      lpCriticalSection : LPCRITICAL_SECTION
   );
   pragma import (C,InitializeCriticalSection,"InitializeCriticalSection");
   procedure EnterCriticalSection(
      lpCriticalSection : LPCRITICAL_SECTION
   );
   pragma import (C,EnterCriticalSection,"EnterCriticalSection");
   procedure LeaveCriticalSection(
      lpCriticalSection : LPCRITICAL_SECTION
   );
   pragma import (C,LeaveCriticalSection,"LeaveCriticalSection");
   function InitializeCriticalSectionAndSpinCount(
      lpCriticalSection : LPCRITICAL_SECTION;
      dwSpinCount : DWORD
   ) return BOOL;
   pragma import (C,InitializeCriticalSectionAndSpinCount,"InitializeCriticalSectionAndSpinCount");
   function InitializeCriticalSectionEx(
      lpCriticalSection : LPCRITICAL_SECTION;
      dwSpinCount : DWORD;
      Flags : DWORD
   ) return BOOL;
   pragma import (C,InitializeCriticalSectionEx,"InitializeCriticalSectionEx");
   function SetCriticalSectionSpinCount(
      lpCriticalSection : LPCRITICAL_SECTION;
      dwSpinCount : DWORD
   ) return DWORD;
   pragma import (C,SetCriticalSectionSpinCount,"SetCriticalSectionSpinCount");
   function TryEnterCriticalSection(
      lpCriticalSection : LPCRITICAL_SECTION
   ) return BOOL;
   pragma import (C,TryEnterCriticalSection,"TryEnterCriticalSection");
   procedure DeleteCriticalSection(
      lpCriticalSection : LPCRITICAL_SECTION
   );
   pragma import (C,DeleteCriticalSection,"DeleteCriticalSection");
   subtype INIT_ONCE is RTL_RUN_ONCE; -- CXType_Typedef
   subtype PINIT_ONCE is PRTL_RUN_ONCE; -- CXType_Typedef
   subtype LPINIT_ONCE is PRTL_RUN_ONCE; -- CXType_Typedef
   subtype PINIT_ONCE_FN is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PINIT_ONCE, PVOID, PVOID *)
   procedure InitOnceInitialize(
      InitOnce : PINIT_ONCE
   );
   pragma import (C,InitOnceInitialize,"InitOnceInitialize");
   function InitOnceExecuteOnce(
      InitOnce : PINIT_ONCE;
      InitFn : PINIT_ONCE_FN;
      Parameter : PVOID;
      Context_x : access LPVOID
   ) return BOOL;
   pragma import (C,InitOnceExecuteOnce,"InitOnceExecuteOnce");
   function InitOnceBeginInitialize(
      lpInitOnce : LPINIT_ONCE;
      dwFlags : DWORD;
      fPending : PBOOL;
      lpContext_x : access LPVOID
   ) return BOOL;
   pragma import (C,InitOnceBeginInitialize,"InitOnceBeginInitialize");
   function InitOnceComplete(
      lpInitOnce : LPINIT_ONCE;
      dwFlags : DWORD;
      lpContext_x : LPVOID
   ) return BOOL;
   pragma import (C,InitOnceComplete,"InitOnceComplete");
   subtype CONDITION_VARIABLE is RTL_CONDITION_VARIABLE; -- CXType_Typedef
   type PCONDITION_VARIABLE is access RTL_CONDITION_VARIABLE; -- CXType_Pointer - CXType_Typedef
   procedure InitializeConditionVariable(
      ConditionVariable : PCONDITION_VARIABLE
   );
   pragma import (C,InitializeConditionVariable,"InitializeConditionVariable");
   procedure WakeConditionVariable(
      ConditionVariable : PCONDITION_VARIABLE
   );
   pragma import (C,WakeConditionVariable,"WakeConditionVariable");
   procedure WakeAllConditionVariable(
      ConditionVariable : PCONDITION_VARIABLE
   );
   pragma import (C,WakeAllConditionVariable,"WakeAllConditionVariable");
   function SleepConditionVariableCS(
      ConditionVariable : PCONDITION_VARIABLE;
      CriticalSection : PCRITICAL_SECTION;
      dwMilliseconds : DWORD
   ) return BOOL;
   pragma import (C,SleepConditionVariableCS,"SleepConditionVariableCS");
   function SleepConditionVariableSRW(
      ConditionVariable : PCONDITION_VARIABLE;
      SRWLock_x : PSRWLOCK;
      dwMilliseconds : DWORD;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,SleepConditionVariableSRW,"SleepConditionVariableSRW");
   function SetEvent(
      hEvent : HANDLE
   ) return BOOL;
   pragma import (C,SetEvent,"SetEvent");
   function ResetEvent(
      hEvent : HANDLE
   ) return BOOL;
   pragma import (C,ResetEvent,"ResetEvent");
   function ReleaseSemaphore(
      hSemaphore : HANDLE;
      lReleaseCount : LONG;
      lpPreviousCount : LPLONG
   ) return BOOL;
   pragma import (C,ReleaseSemaphore,"ReleaseSemaphore");
   function ReleaseMutex(
      hMutex : HANDLE
   ) return BOOL;
   pragma import (C,ReleaseMutex,"ReleaseMutex");
   function WaitForSingleObject(
      hHandle : HANDLE;
      dwMilliseconds : DWORD
   ) return DWORD;
   pragma import (C,WaitForSingleObject,"WaitForSingleObject");
   function SleepEx(
      dwMilliseconds : DWORD;
      bAlertable : BOOL
   ) return DWORD;
   pragma import (C,SleepEx,"SleepEx");
   function WaitForSingleObjectEx(
      hHandle : HANDLE;
      dwMilliseconds : DWORD;
      bAlertable : BOOL
   ) return DWORD;
   pragma import (C,WaitForSingleObjectEx,"WaitForSingleObjectEx");
   function WaitForMultipleObjectsEx(
      nCount : DWORD;
      lpHandles : access constant HANDLE;
      bWaitAll : BOOL;
      dwMilliseconds : DWORD;
      bAlertable : BOOL
   ) return DWORD;
   pragma import (C,WaitForMultipleObjectsEx,"WaitForMultipleObjectsEx");
   function CreateMutexA(
      lpMutexAttributes : LPSECURITY_ATTRIBUTES;
      bInitialOwner : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,CreateMutexA,"CreateMutexA");
   function CreateMutexW(
      lpMutexAttributes : LPSECURITY_ATTRIBUTES;
      bInitialOwner : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreateMutexW,"CreateMutexW");
   function OpenMutexW(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenMutexW,"OpenMutexW");
   function CreateEventA(
      lpEventAttributes : LPSECURITY_ATTRIBUTES;
      bManualReset : BOOL;
      bInitialState : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,CreateEventA,"CreateEventA");
   function CreateEventW(
      lpEventAttributes : LPSECURITY_ATTRIBUTES;
      bManualReset : BOOL;
      bInitialState : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreateEventW,"CreateEventW");
   function OpenEventA(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenEventA,"OpenEventA");
   function OpenEventW(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenEventW,"OpenEventW");
   function OpenSemaphoreW(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenSemaphoreW,"OpenSemaphoreW");
   subtype PTIMERAPCROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID, DWORD, DWORD)
   function OpenWaitableTimerW(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpTimerName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenWaitableTimerW,"OpenWaitableTimerW");
   function SetWaitableTimerEx(
      hTimer : HANDLE;
      lpDueTime : access constant LARGE_INTEGER;
      lPeriod : LONG;
      pfnCompletionRoutine : PTIMERAPCROUTINE;
      lpArgToCompletionRoutine : LPVOID;
      WakeContext : PREASON_CONTEXT;
      TolerableDelay : ULONG
   ) return BOOL;
   pragma import (C,SetWaitableTimerEx,"SetWaitableTimerEx");
   function SetWaitableTimer(
      hTimer : HANDLE;
      lpDueTime : access constant LARGE_INTEGER;
      lPeriod : LONG;
      pfnCompletionRoutine : PTIMERAPCROUTINE;
      lpArgToCompletionRoutine : LPVOID;
      fResume : BOOL
   ) return BOOL;
   pragma import (C,SetWaitableTimer,"SetWaitableTimer");
   function CancelWaitableTimer(
      hTimer : HANDLE
   ) return BOOL;
   pragma import (C,CancelWaitableTimer,"CancelWaitableTimer");
   function CreateMutexExA(
      lpMutexAttributes : LPSECURITY_ATTRIBUTES;
      lpName : LPCSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateMutexExA,"CreateMutexExA");
   function CreateMutexExW(
      lpMutexAttributes : LPSECURITY_ATTRIBUTES;
      lpName : LPCWSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateMutexExW,"CreateMutexExW");
   function CreateEventExA(
      lpEventAttributes : LPSECURITY_ATTRIBUTES;
      lpName : LPCSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateEventExA,"CreateEventExA");
   function CreateEventExW(
      lpEventAttributes : LPSECURITY_ATTRIBUTES;
      lpName : LPCWSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateEventExW,"CreateEventExW");
   function CreateSemaphoreExW(
      lpSemaphoreAttributes : LPSECURITY_ATTRIBUTES;
      lInitialCount : LONG;
      lMaximumCount : LONG;
      lpName : LPCWSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateSemaphoreExW,"CreateSemaphoreExW");
   function CreateWaitableTimerExW(
      lpTimerAttributes : LPSECURITY_ATTRIBUTES;
      lpTimerName : LPCWSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateWaitableTimerExW,"CreateWaitableTimerExW");
   subtype SYNCHRONIZATION_BARRIER is RTL_BARRIER; -- CXType_Typedef
   subtype PSYNCHRONIZATION_BARRIER is PRTL_BARRIER; -- CXType_Typedef
   subtype LPSYNCHRONIZATION_BARRIER is PRTL_BARRIER; -- CXType_Typedef
   function EnterSynchronizationBarrier(
      lpBarrier : LPSYNCHRONIZATION_BARRIER;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnterSynchronizationBarrier,"EnterSynchronizationBarrier");
   function InitializeSynchronizationBarrier(
      lpBarrier : LPSYNCHRONIZATION_BARRIER;
      lTotalThreads : LONG;
      lSpinCount : LONG
   ) return BOOL;
   pragma import (C,InitializeSynchronizationBarrier,"InitializeSynchronizationBarrier");
   function DeleteSynchronizationBarrier(
      lpBarrier : LPSYNCHRONIZATION_BARRIER
   ) return BOOL;
   pragma import (C,DeleteSynchronizationBarrier,"DeleteSynchronizationBarrier");
   procedure Sleep(
      dwMilliseconds : DWORD
   );
   pragma import (C,Sleep,"Sleep");
   function WaitOnAddress(
      Address : access Void;
      CompareAddress : PVOID;
      AddressSize : SIZE_T;
      dwMilliseconds : DWORD
   ) return BOOL;
   pragma import (C,WaitOnAddress,"WaitOnAddress");
   procedure WakeByAddressSingle(
      Address : PVOID
   );
   pragma import (C,WakeByAddressSingle,"WakeByAddressSingle");
   procedure WakeByAddressAll(
      Address : PVOID
   );
   pragma import (C,WakeByAddressAll,"WakeByAddressAll");
   function SignalObjectAndWait(
      hObjectToSignal : HANDLE;
      hObjectToWaitOn : HANDLE;
      dwMilliseconds : DWORD;
      bAlertable : BOOL
   ) return DWORD;
   pragma import (C,SignalObjectAndWait,"SignalObjectAndWait");
   function WaitForMultipleObjects(
      nCount : DWORD;
      lpHandles : access constant HANDLE;
      bWaitAll : BOOL;
      dwMilliseconds : DWORD
   ) return DWORD;
   pragma import (C,WaitForMultipleObjects,"WaitForMultipleObjects");
   function CreateSemaphoreW(
      lpSemaphoreAttributes : LPSECURITY_ATTRIBUTES;
      lInitialCount : LONG;
      lMaximumCount : LONG;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreateSemaphoreW,"CreateSemaphoreW");
   function CreateWaitableTimerW(
      lpTimerAttributes : LPSECURITY_ATTRIBUTES;
      bManualReset : BOOL;
      lpTimerName : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreateWaitableTimerW,"CreateWaitableTimerW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\interlockedapi.h>
   procedure InitializeSListHead(
      ListHead : PSLIST_HEADER
   );
   pragma import (C,InitializeSListHead,"InitializeSListHead");
   function InterlockedPopEntrySList(
      ListHead : PSLIST_HEADER
   ) return PSLIST_ENTRY;
   pragma import (C,InterlockedPopEntrySList,"InterlockedPopEntrySList");
   function InterlockedPushEntrySList(
      ListHead : PSLIST_HEADER;
      ListEntry : PSLIST_ENTRY
   ) return PSLIST_ENTRY;
   pragma import (C,InterlockedPushEntrySList,"InterlockedPushEntrySList");
   function InterlockedPushListSListEx(
      ListHead : PSLIST_HEADER;
      List : PSLIST_ENTRY;
      ListEnd : PSLIST_ENTRY;
      Count : ULONG
   ) return PSLIST_ENTRY;
   pragma import (C,InterlockedPushListSListEx,"InterlockedPushListSListEx");
   function InterlockedFlushSList(
      ListHead : PSLIST_HEADER
   ) return PSLIST_ENTRY;
   pragma import (C,InterlockedFlushSList,"InterlockedFlushSList");
   function QueryDepthSList(
      ListHead : PSLIST_HEADER
   ) return USHORT;
   pragma import (C,QueryDepthSList,"QueryDepthSList");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\processthreadsapi.h>
   type PROCESS_INFORMATION_x is record
      hProcess : HANDLE;
      hThread : HANDLE;
      dwProcessId : DWORD;
      dwThreadId : DWORD;
   end record;
   subtype PROCESS_INFORMATION is PROCESS_INFORMATION_x; -- CXType_Elaborated
   type PPROCESS_INFORMATION is access PROCESS_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type LPPROCESS_INFORMATION is access PROCESS_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type STARTUPINFOA_x is record
      cb : DWORD;
      lpReserved : LPSTR;
      lpDesktop : LPSTR;
      lpTitle : LPSTR;
      dwX : DWORD;
      dwY : DWORD;
      dwXSize : DWORD;
      dwYSize : DWORD;
      dwXCountChars : DWORD;
      dwYCountChars : DWORD;
      dwFillAttribute : DWORD;
      dwFlags : DWORD;
      wShowWindow : WORD;
      cbReserved2 : WORD;
      lpReserved2 : LPBYTE;
      hStdInput : HANDLE;
      hStdOutput : HANDLE;
      hStdError : HANDLE;
   end record;
   subtype STARTUPINFOA is STARTUPINFOA_x; -- CXType_Elaborated
   type LPSTARTUPINFOA is access STARTUPINFOA_x; -- CXType_Pointer - CXType_Elaborated
   type STARTUPINFOW_x is record
      cb : DWORD;
      lpReserved : LPWSTR;
      lpDesktop : LPWSTR;
      lpTitle : LPWSTR;
      dwX : DWORD;
      dwY : DWORD;
      dwXSize : DWORD;
      dwYSize : DWORD;
      dwXCountChars : DWORD;
      dwYCountChars : DWORD;
      dwFillAttribute : DWORD;
      dwFlags : DWORD;
      wShowWindow : WORD;
      cbReserved2 : WORD;
      lpReserved2 : LPBYTE;
      hStdInput : HANDLE;
      hStdOutput : HANDLE;
      hStdError : HANDLE;
   end record;
   subtype STARTUPINFOW is STARTUPINFOW_x; -- CXType_Elaborated
   type LPSTARTUPINFOW is access STARTUPINFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype STARTUPINFO is STARTUPINFOA; -- CXType_Typedef
   subtype LPSTARTUPINFO is LPSTARTUPINFOA; -- CXType_Typedef
   function QueueUserAPC(
      pfnAPC : PAPCFUNC;
      hThread : HANDLE;
      dwData : ULONG_PTR
   ) return DWORD;
   pragma import (C,QueueUserAPC,"QueueUserAPC");
   function GetProcessTimes(
      hProcess : HANDLE;
      lpCreationTime : LPFILETIME;
      lpExitTime : LPFILETIME;
      lpKernelTime : LPFILETIME;
      lpUserTime : LPFILETIME
   ) return BOOL;
   pragma import (C,GetProcessTimes,"GetProcessTimes");
   function GetCurrentProcess return HANDLE;
   pragma import (C,GetCurrentProcess,"GetCurrentProcess");
   function GetCurrentProcessId return DWORD;
   pragma import (C,GetCurrentProcessId,"GetCurrentProcessId");
   procedure ExitProcess(
      uExitCode : UINT
   );
   pragma import (C,ExitProcess,"ExitProcess");
   function TerminateProcess(
      hProcess : HANDLE;
      uExitCode : UINT
   ) return BOOL;
   pragma import (C,TerminateProcess,"TerminateProcess");
   function GetExitCodeProcess(
      hProcess : HANDLE;
      lpExitCode : LPDWORD
   ) return BOOL;
   pragma import (C,GetExitCodeProcess,"GetExitCodeProcess");
   function SwitchToThread return BOOL;
   pragma import (C,SwitchToThread,"SwitchToThread");
   function CreateThread(
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      dwStackSize : SIZE_T;
      lpStartAddress : LPTHREAD_START_ROUTINE;
      lpParameter : LPVOID;
      dwCreationFlags : DWORD;
      lpThreadId : LPDWORD
   ) return HANDLE;
   pragma import (C,CreateThread,"CreateThread");
   function CreateRemoteThread(
      hProcess : HANDLE;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      dwStackSize : SIZE_T;
      lpStartAddress : LPTHREAD_START_ROUTINE;
      lpParameter : LPVOID;
      dwCreationFlags : DWORD;
      lpThreadId : LPDWORD
   ) return HANDLE;
   pragma import (C,CreateRemoteThread,"CreateRemoteThread");
   function GetCurrentThread return HANDLE;
   pragma import (C,GetCurrentThread,"GetCurrentThread");
   function GetCurrentThreadId return DWORD;
   pragma import (C,GetCurrentThreadId,"GetCurrentThreadId");
   function OpenThread(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      dwThreadId : DWORD
   ) return HANDLE;
   pragma import (C,OpenThread,"OpenThread");
   function SetThreadPriority(
      hThread : HANDLE;
      nPriority : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetThreadPriority,"SetThreadPriority");
   function SetThreadPriorityBoost(
      hThread : HANDLE;
      bDisablePriorityBoost : BOOL
   ) return BOOL;
   pragma import (C,SetThreadPriorityBoost,"SetThreadPriorityBoost");
   function GetThreadPriorityBoost(
      hThread : HANDLE;
      pDisablePriorityBoost : PBOOL
   ) return BOOL;
   pragma import (C,GetThreadPriorityBoost,"GetThreadPriorityBoost");
   function GetThreadPriority(
      hThread : HANDLE
   ) return Interfaces.C.Int;
   pragma import (C,GetThreadPriority,"GetThreadPriority");
   procedure ExitThread(
      dwExitCode : DWORD
   );
   pragma import (C,ExitThread,"ExitThread");
   function TerminateThread(
      hThread : HANDLE;
      dwExitCode : DWORD
   ) return BOOL;
   pragma import (C,TerminateThread,"TerminateThread");
   function GetExitCodeThread(
      hThread : HANDLE;
      lpExitCode : LPDWORD
   ) return BOOL;
   pragma import (C,GetExitCodeThread,"GetExitCodeThread");
   function SuspendThread(
      hThread : HANDLE
   ) return DWORD;
   pragma import (C,SuspendThread,"SuspendThread");
   function ResumeThread(
      hThread : HANDLE
   ) return DWORD;
   pragma import (C,ResumeThread,"ResumeThread");
   function TlsAlloc return DWORD;
   pragma import (C,TlsAlloc,"TlsAlloc");
   procedure TlsGetValue(
      dwTlsIndex : DWORD
   );
   pragma import (C,TlsGetValue,"TlsGetValue");
   function TlsSetValue(
      dwTlsIndex : DWORD;
      lpTlsValue : LPVOID
   ) return BOOL;
   pragma import (C,TlsSetValue,"TlsSetValue");
   function TlsFree(
      dwTlsIndex : DWORD
   ) return BOOL;
   pragma import (C,TlsFree,"TlsFree");
   function CreateProcessA(
      lpApplicationName : LPCSTR;
      lpCommandLine : LPSTR;
      lpProcessAttributes : LPSECURITY_ATTRIBUTES;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      bInheritHandles : BOOL;
      dwCreationFlags : DWORD;
      lpEnvironment : LPVOID;
      lpCurrentDirectory : LPCSTR;
      lpStartupInfo_x : LPSTARTUPINFOA;
      lpProcessInformation : LPPROCESS_INFORMATION
   ) return BOOL;
   pragma import (C,CreateProcessA,"CreateProcessA");
   function CreateProcessW(
      lpApplicationName : LPCWSTR;
      lpCommandLine : LPWSTR;
      lpProcessAttributes : LPSECURITY_ATTRIBUTES;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      bInheritHandles : BOOL;
      dwCreationFlags : DWORD;
      lpEnvironment : LPVOID;
      lpCurrentDirectory : LPCWSTR;
      lpStartupInfo_x : LPSTARTUPINFOW;
      lpProcessInformation : LPPROCESS_INFORMATION
   ) return BOOL;
   pragma import (C,CreateProcessW,"CreateProcessW");
   function SetProcessShutdownParameters(
      dwLevel : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,SetProcessShutdownParameters,"SetProcessShutdownParameters");
   function GetProcessVersion(
      ProcessId : DWORD
   ) return DWORD;
   pragma import (C,GetProcessVersion,"GetProcessVersion");
   procedure GetStartupInfoW(
      lpStartupInfo_x : LPSTARTUPINFOW
   );
   pragma import (C,GetStartupInfoW,"GetStartupInfoW");
   function CreateProcessAsUserW(
      hToken : HANDLE;
      lpApplicationName : LPCWSTR;
      lpCommandLine : LPWSTR;
      lpProcessAttributes : LPSECURITY_ATTRIBUTES;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      bInheritHandles : BOOL;
      dwCreationFlags : DWORD;
      lpEnvironment : LPVOID;
      lpCurrentDirectory : LPCWSTR;
      lpStartupInfo_x : LPSTARTUPINFOW;
      lpProcessInformation : LPPROCESS_INFORMATION
   ) return BOOL;
   pragma import (C,CreateProcessAsUserW,"CreateProcessAsUserW");
   -- GetCurrentProcessToken(); -- inlined function not supported
   -- GetCurrentThreadToken(); -- inlined function not supported
   -- GetCurrentThreadEffectiveToken(); -- inlined function not supported
   function SetThreadToken(
      Thread : PHANDLE;
      Token : HANDLE
   ) return BOOL;
   pragma import (C,SetThreadToken,"SetThreadToken");
   function OpenProcessToken(
      ProcessHandle : HANDLE;
      DesiredAccess : DWORD;
      TokenHandle : PHANDLE
   ) return BOOL;
   pragma import (C,OpenProcessToken,"OpenProcessToken");
   function OpenThreadToken(
      ThreadHandle : HANDLE;
      DesiredAccess : DWORD;
      OpenAsSelf : BOOL;
      TokenHandle : PHANDLE
   ) return BOOL;
   pragma import (C,OpenThreadToken,"OpenThreadToken");
   function SetPriorityClass(
      hProcess : HANDLE;
      dwPriorityClass : DWORD
   ) return BOOL;
   pragma import (C,SetPriorityClass,"SetPriorityClass");
   function GetPriorityClass(
      hProcess : HANDLE
   ) return DWORD;
   pragma import (C,GetPriorityClass,"GetPriorityClass");
   function SetThreadStackGuarantee(
      StackSizeInBytes : PULONG
   ) return BOOL;
   pragma import (C,SetThreadStackGuarantee,"SetThreadStackGuarantee");
   function ProcessIdToSessionId(
      dwProcessId : DWORD;
      pSessionId : access DWORD
   ) return BOOL;
   pragma import (C,ProcessIdToSessionId,"ProcessIdToSessionId");
   type PROC_THREAD_ATTRIBUTE_LIST_x; -- Forward Declaration
   type PPROC_THREAD_ATTRIBUTE_LIST is access PROC_THREAD_ATTRIBUTE_LIST_x; -- CXType_Pointer - CXType_Elaborated
   type LPPROC_THREAD_ATTRIBUTE_LIST is access PROC_THREAD_ATTRIBUTE_LIST_x; -- CXType_Pointer - CXType_Elaborated
   function GetProcessId(
      Process : HANDLE
   ) return DWORD;
   pragma import (C,GetProcessId,"GetProcessId");
   function GetThreadId(
      Thread : HANDLE
   ) return DWORD;
   pragma import (C,GetThreadId,"GetThreadId");
   procedure FlushProcessWriteBuffers;
   pragma import (C,FlushProcessWriteBuffers,"FlushProcessWriteBuffers");
   function GetProcessIdOfThread(
      Thread : HANDLE
   ) return DWORD;
   pragma import (C,GetProcessIdOfThread,"GetProcessIdOfThread");
   function InitializeProcThreadAttributeList(
      lpAttributeList : LPPROC_THREAD_ATTRIBUTE_LIST;
      dwAttributeCount : DWORD;
      dwFlags : DWORD;
      lpSize_x : PSIZE_T
   ) return BOOL;
   pragma import (C,InitializeProcThreadAttributeList,"InitializeProcThreadAttributeList");
   procedure DeleteProcThreadAttributeList(
      lpAttributeList : LPPROC_THREAD_ATTRIBUTE_LIST
   );
   pragma import (C,DeleteProcThreadAttributeList,"DeleteProcThreadAttributeList");
   function SetProcessAffinityUpdateMode(
      hProcess : HANDLE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,SetProcessAffinityUpdateMode,"SetProcessAffinityUpdateMode");
   function QueryProcessAffinityUpdateMode(
      hProcess : HANDLE;
      lpdwFlags : LPDWORD
   ) return BOOL;
   pragma import (C,QueryProcessAffinityUpdateMode,"QueryProcessAffinityUpdateMode");
   function UpdateProcThreadAttribute(
      lpAttributeList : LPPROC_THREAD_ATTRIBUTE_LIST;
      dwFlags : DWORD;
      Attribute : DWORD_PTR;
      lpValue : PVOID;
      cbSize : SIZE_T;
      lpPreviousValue : PVOID;
      lpReturnSize : PSIZE_T
   ) return BOOL;
   pragma import (C,UpdateProcThreadAttribute,"UpdateProcThreadAttribute");
   function CreateRemoteThreadEx(
      hProcess : HANDLE;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      dwStackSize : SIZE_T;
      lpStartAddress : LPTHREAD_START_ROUTINE;
      lpParameter : LPVOID;
      dwCreationFlags : DWORD;
      lpAttributeList : LPPROC_THREAD_ATTRIBUTE_LIST;
      lpThreadId : LPDWORD
   ) return HANDLE;
   pragma import (C,CreateRemoteThreadEx,"CreateRemoteThreadEx");
   procedure GetCurrentThreadStackLimits(
      LowLimit : PULONG_PTR;
      HighLimit : PULONG_PTR
   );
   pragma import (C,GetCurrentThreadStackLimits,"GetCurrentThreadStackLimits");
   function GetThreadContext(
      hThread : HANDLE;
      lpContext_x : LPCONTEXT
   ) return BOOL;
   pragma import (C,GetThreadContext,"GetThreadContext");
   function GetProcessMitigationPolicy(
      hProcess : HANDLE;
      MitigationPolicy : PROCESS_MITIGATION_POLICY;
      lpBuffer : PVOID;
      dwLength : SIZE_T
   ) return BOOL;
   pragma import (C,GetProcessMitigationPolicy,"GetProcessMitigationPolicy");
   function SetThreadContext(
      hThread : HANDLE;
      lpContext_x : access constant CONTEXT
   ) return BOOL;
   pragma import (C,SetThreadContext,"SetThreadContext");
   function SetProcessMitigationPolicy(
      MitigationPolicy : PROCESS_MITIGATION_POLICY;
      lpBuffer : PVOID;
      dwLength : SIZE_T
   ) return BOOL;
   pragma import (C,SetProcessMitigationPolicy,"SetProcessMitigationPolicy");
   function FlushInstructionCache(
      hProcess : HANDLE;
      lpBaseAddress : LPCVOID;
      dwSize : SIZE_T
   ) return BOOL;
   pragma import (C,FlushInstructionCache,"FlushInstructionCache");
   function GetThreadTimes(
      hThread : HANDLE;
      lpCreationTime : LPFILETIME;
      lpExitTime : LPFILETIME;
      lpKernelTime : LPFILETIME;
      lpUserTime : LPFILETIME
   ) return BOOL;
   pragma import (C,GetThreadTimes,"GetThreadTimes");
   function OpenProcess(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      dwProcessId : DWORD
   ) return HANDLE;
   pragma import (C,OpenProcess,"OpenProcess");
   function IsProcessorFeaturePresent(
      ProcessorFeature : DWORD
   ) return BOOL;
   pragma import (C,IsProcessorFeaturePresent,"IsProcessorFeaturePresent");
   function GetProcessHandleCount(
      hProcess : HANDLE;
      pdwHandleCount : PDWORD
   ) return BOOL;
   pragma import (C,GetProcessHandleCount,"GetProcessHandleCount");
   function GetCurrentProcessorNumber return DWORD;
   pragma import (C,GetCurrentProcessorNumber,"GetCurrentProcessorNumber");
   function SetThreadIdealProcessorEx(
      hThread : HANDLE;
      lpIdealProcessor : PPROCESSOR_NUMBER;
      lpPreviousIdealProcessor : PPROCESSOR_NUMBER
   ) return BOOL;
   pragma import (C,SetThreadIdealProcessorEx,"SetThreadIdealProcessorEx");
   function GetThreadIdealProcessorEx(
      hThread : HANDLE;
      lpIdealProcessor : PPROCESSOR_NUMBER
   ) return BOOL;
   pragma import (C,GetThreadIdealProcessorEx,"GetThreadIdealProcessorEx");
   procedure GetCurrentProcessorNumberEx(
      ProcNumber : PPROCESSOR_NUMBER
   );
   pragma import (C,GetCurrentProcessorNumberEx,"GetCurrentProcessorNumberEx");
   function GetProcessPriorityBoost(
      hProcess : HANDLE;
      pDisablePriorityBoost : PBOOL
   ) return BOOL;
   pragma import (C,GetProcessPriorityBoost,"GetProcessPriorityBoost");
   function SetProcessPriorityBoost(
      hProcess : HANDLE;
      bDisablePriorityBoost : BOOL
   ) return BOOL;
   pragma import (C,SetProcessPriorityBoost,"SetProcessPriorityBoost");
   function GetThreadIOPendingFlag(
      hThread : HANDLE;
      lpIOIsPending : PBOOL
   ) return BOOL;
   pragma import (C,GetThreadIOPendingFlag,"GetThreadIOPendingFlag");
   function GetSystemTimes(
      lpIdleTime : PFILETIME;
      lpKernelTime : PFILETIME;
      lpUserTime : PFILETIME
   ) return BOOL;
   pragma import (C,GetSystemTimes,"GetSystemTimes");
   type THREAD_INFORMATION_CLASS_x is (
      ThreadMemoryPriority,
      ThreadAbsoluteCpuPriority,
      ThreadDynamicCodePolicy,
      ThreadPowerThrottling,
      ThreadInformationClassMax
   );
   for THREAD_INFORMATION_CLASS_x use (
      ThreadMemoryPriority => 0,
      ThreadAbsoluteCpuPriority => 1,
      ThreadDynamicCodePolicy => 2,
      ThreadPowerThrottling => 3,
      ThreadInformationClassMax => 4
   );
   for THREAD_INFORMATION_CLASS_x'Size use 32;
   subtype THREAD_INFORMATION_CLASS is THREAD_INFORMATION_CLASS_x; -- CXType_Elaborated
   type MEMORY_PRIORITY_INFORMATION_x is record
      MemoryPriority : ULONG;
   end record;
   subtype MEMORY_PRIORITY_INFORMATION is MEMORY_PRIORITY_INFORMATION_x; -- CXType_Elaborated
   type PMEMORY_PRIORITY_INFORMATION is access MEMORY_PRIORITY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   function GetThreadInformation(
      hThread : HANDLE;
      ThreadInformationClass : THREAD_INFORMATION_CLASS;
      ThreadInformation : LPVOID;
      ThreadInformationSize : DWORD
   ) return BOOL;
   pragma import (C,GetThreadInformation,"GetThreadInformation");
   function SetThreadInformation(
      hThread : HANDLE;
      ThreadInformationClass : THREAD_INFORMATION_CLASS;
      ThreadInformation : LPVOID;
      ThreadInformationSize : DWORD
   ) return BOOL;
   pragma import (C,SetThreadInformation,"SetThreadInformation");
   type THREAD_POWER_THROTTLING_STATE_x is record
      Version : ULONG;
      ControlMask : ULONG;
      StateMask : ULONG;
   end record;
   subtype THREAD_POWER_THROTTLING_STATE is THREAD_POWER_THROTTLING_STATE_x; -- CXType_Elaborated
   function IsProcessCritical(
      hProcess : HANDLE;
      Critical : PBOOL
   ) return BOOL;
   pragma import (C,IsProcessCritical,"IsProcessCritical");
   function SetProtectedPolicy(
      PolicyGuid : LPCGUID;
      PolicyValue : ULONG_PTR;
      OldPolicyValue : PULONG_PTR
   ) return BOOL;
   pragma import (C,SetProtectedPolicy,"SetProtectedPolicy");
   function QueryProtectedPolicy(
      PolicyGuid : LPCGUID;
      PolicyValue : PULONG_PTR
   ) return BOOL;
   pragma import (C,QueryProtectedPolicy,"QueryProtectedPolicy");
   function SetThreadIdealProcessor(
      hThread : HANDLE;
      dwIdealProcessor : DWORD
   ) return DWORD;
   pragma import (C,SetThreadIdealProcessor,"SetThreadIdealProcessor");
   type PROCESS_INFORMATION_CLASS_x is (
      ProcessMemoryPriority,
      ProcessMemoryExhaustionInfo,
      ProcessAppMemoryInfo,
      ProcessInPrivateInfo,
      ProcessPowerThrottling,
      ProcessReservedValue1,
      ProcessTelemetryCoverageInfo,
      ProcessProtectionLevelInfo,
      ProcessInformationClassMax
   );
   for PROCESS_INFORMATION_CLASS_x use (
      ProcessMemoryPriority => 0,
      ProcessMemoryExhaustionInfo => 1,
      ProcessAppMemoryInfo => 2,
      ProcessInPrivateInfo => 3,
      ProcessPowerThrottling => 4,
      ProcessReservedValue1 => 5,
      ProcessTelemetryCoverageInfo => 6,
      ProcessProtectionLevelInfo => 7,
      ProcessInformationClassMax => 8
   );
   for PROCESS_INFORMATION_CLASS_x'Size use 32;
   subtype PROCESS_INFORMATION_CLASS is PROCESS_INFORMATION_CLASS_x; -- CXType_Elaborated
   type APP_MEMORY_INFORMATION_x is record
      AvailableCommit : ULONG64;
      PrivateCommitUsage : ULONG64;
      PeakPrivateCommitUsage : ULONG64;
      TotalCommitUsage : ULONG64;
   end record;
   subtype APP_MEMORY_INFORMATION is APP_MEMORY_INFORMATION_x; -- CXType_Elaborated
   type PAPP_MEMORY_INFORMATION is access APP_MEMORY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MEMORY_EXHAUSTION_TYPE_x is (
      PMETypeFailFastOnCommitFailure,
      PMETypeMax
   );
   for PROCESS_MEMORY_EXHAUSTION_TYPE_x use (
      PMETypeFailFastOnCommitFailure => 0,
      PMETypeMax => 1
   );
   for PROCESS_MEMORY_EXHAUSTION_TYPE_x'Size use 32;
   subtype PROCESS_MEMORY_EXHAUSTION_TYPE is PROCESS_MEMORY_EXHAUSTION_TYPE_x; -- CXType_Elaborated
   type PPROCESS_MEMORY_EXHAUSTION_TYPE is access PROCESS_MEMORY_EXHAUSTION_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_MEMORY_EXHAUSTION_INFO_x is record
      Version : USHORT;
      Reserved : USHORT;
      type_x : PROCESS_MEMORY_EXHAUSTION_TYPE;
      Value : ULONG_PTR;
   end record;
   subtype PROCESS_MEMORY_EXHAUSTION_INFO is PROCESS_MEMORY_EXHAUSTION_INFO_x; -- CXType_Elaborated
   type PPROCESS_MEMORY_EXHAUSTION_INFO is access PROCESS_MEMORY_EXHAUSTION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_POWER_THROTTLING_STATE_x is record
      Version : ULONG;
      ControlMask : ULONG;
      StateMask : ULONG;
   end record;
   subtype PROCESS_POWER_THROTTLING_STATE is PROCESS_POWER_THROTTLING_STATE_x; -- CXType_Elaborated
   type PPROCESS_POWER_THROTTLING_STATE is access PROCESS_POWER_THROTTLING_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type PROCESS_PROTECTION_LEVEL_INFORMATION is record
      ProtectionLevel : DWORD;
   end record;
   function SetProcessInformation(
      hProcess : HANDLE;
      ProcessInformationClass : PROCESS_INFORMATION_CLASS;
      ProcessInformation : LPVOID;
      ProcessInformationSize : DWORD
   ) return BOOL;
   pragma import (C,SetProcessInformation,"SetProcessInformation");
   function GetProcessInformation(
      hProcess : HANDLE;
      ProcessInformationClass : PROCESS_INFORMATION_CLASS;
      ProcessInformation : LPVOID;
      ProcessInformationSize : DWORD
   ) return BOOL;
   pragma import (C,GetProcessInformation,"GetProcessInformation");
   function GetSystemCpuSetInformation(
      Information : PSYSTEM_CPU_SET_INFORMATION;
      BufferLength : ULONG;
      ReturnedLength : PULONG;
      Process : HANDLE;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,GetSystemCpuSetInformation,"GetSystemCpuSetInformation");
   function GetProcessDefaultCpuSets(
      Process : HANDLE;
      CpuSetIds : PULONG;
      CpuSetIdCount : ULONG;
      RequiredIdCount : PULONG
   ) return BOOL;
   pragma import (C,GetProcessDefaultCpuSets,"GetProcessDefaultCpuSets");
   function SetProcessDefaultCpuSets(
      Process : HANDLE;
      CpuSetIds : access constant ULONG;
      CpuSetIdCount : ULONG
   ) return BOOL;
   pragma import (C,SetProcessDefaultCpuSets,"SetProcessDefaultCpuSets");
   function GetThreadSelectedCpuSets(
      Thread : HANDLE;
      CpuSetIds : PULONG;
      CpuSetIdCount : ULONG;
      RequiredIdCount : PULONG
   ) return BOOL;
   pragma import (C,GetThreadSelectedCpuSets,"GetThreadSelectedCpuSets");
   function SetThreadSelectedCpuSets(
      Thread : HANDLE;
      CpuSetIds : access constant ULONG;
      CpuSetIdCount : ULONG
   ) return BOOL;
   pragma import (C,SetThreadSelectedCpuSets,"SetThreadSelectedCpuSets");
   function CreateProcessAsUserA(
      hToken : HANDLE;
      lpApplicationName : LPCSTR;
      lpCommandLine : LPSTR;
      lpProcessAttributes : LPSECURITY_ATTRIBUTES;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      bInheritHandles : BOOL;
      dwCreationFlags : DWORD;
      lpEnvironment : LPVOID;
      lpCurrentDirectory : LPCSTR;
      lpStartupInfo_x : LPSTARTUPINFOA;
      lpProcessInformation : LPPROCESS_INFORMATION
   ) return BOOL;
   pragma import (C,CreateProcessAsUserA,"CreateProcessAsUserA");
   function GetProcessShutdownParameters(
      lpdwLevel : LPDWORD;
      lpdwFlags : LPDWORD
   ) return BOOL;
   pragma import (C,GetProcessShutdownParameters,"GetProcessShutdownParameters");
   function SetThreadDescription(
      hThread : HANDLE;
      lpThreadDescription : PCWSTR
   ) return HRESULT;
   pragma import (C,SetThreadDescription,"SetThreadDescription");
   function GetThreadDescription(
      hThread : HANDLE;
      ppszThreadDescription : access PWSTR
   ) return HRESULT;
   pragma import (C,GetThreadDescription,"GetThreadDescription");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\sysinfoapi.h>
   type SYSTEM_INFO_x is record
      dwPageSize : DWORD;
      lpMinimumApplicationAddress : LPVOID;
      lpMaximumApplicationAddress : LPVOID;
      dwActiveProcessorMask : DWORD_PTR;
      dwNumberOfProcessors : DWORD;
      dwProcessorType : DWORD;
      dwAllocationGranularity : DWORD;
      wProcessorLevel : WORD;
      wProcessorRevision : WORD;
   end record;
   subtype SYSTEM_INFO is SYSTEM_INFO_x; -- CXType_Elaborated
   type LPSYSTEM_INFO is access SYSTEM_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type MEMORYSTATUSEX_x is record
      dwLength : DWORD;
      dwMemoryLoad : DWORD;
      ullTotalPhys : DWORDLONG;
      ullAvailPhys : DWORDLONG;
      ullTotalPageFile : DWORDLONG;
      ullAvailPageFile : DWORDLONG;
      ullTotalVirtual : DWORDLONG;
      ullAvailVirtual : DWORDLONG;
      ullAvailExtendedVirtual : DWORDLONG;
   end record;
   subtype MEMORYSTATUSEX is MEMORYSTATUSEX_x; -- CXType_Elaborated
   type LPMEMORYSTATUSEX is access MEMORYSTATUSEX_x; -- CXType_Pointer - CXType_Elaborated
   function GlobalMemoryStatusEx(
      lpBuffer : LPMEMORYSTATUSEX
   ) return BOOL;
   pragma import (C,GlobalMemoryStatusEx,"GlobalMemoryStatusEx");
   procedure GetSystemInfo(
      lpSystemInfo : LPSYSTEM_INFO
   );
   pragma import (C,GetSystemInfo,"GetSystemInfo");
   procedure GetSystemTime(
      lpSystemTime_x : LPSYSTEMTIME
   );
   pragma import (C,GetSystemTime,"GetSystemTime");
   procedure GetSystemTimeAsFileTime(
      lpSystemTimeAsFileTime : LPFILETIME
   );
   pragma import (C,GetSystemTimeAsFileTime,"GetSystemTimeAsFileTime");
   procedure GetLocalTime(
      lpSystemTime_x : LPSYSTEMTIME
   );
   pragma import (C,GetLocalTime,"GetLocalTime");
   function GetVersion return DWORD;
   pragma import (C,GetVersion,"GetVersion");
   function SetLocalTime(
      lpSystemTime_x : access constant SYSTEMTIME
   ) return BOOL;
   pragma import (C,SetLocalTime,"SetLocalTime");
   function GetTickCount return DWORD;
   pragma import (C,GetTickCount,"GetTickCount");
   function GetTickCount64 return ULONGLONG;
   pragma import (C,GetTickCount64,"GetTickCount64");
   function GetSystemTimeAdjustment(
      lpTimeAdjustment : PDWORD;
      lpTimeIncrement : PDWORD;
      lpTimeAdjustmentDisabled : PBOOL
   ) return BOOL;
   pragma import (C,GetSystemTimeAdjustment,"GetSystemTimeAdjustment");
   function GetSystemTimeAdjustmentPrecise(
      lpTimeAdjustment : PDWORD64;
      lpTimeIncrement : PDWORD64;
      lpTimeAdjustmentDisabled : PBOOL
   ) return BOOL;
   pragma import (C,GetSystemTimeAdjustmentPrecise,"GetSystemTimeAdjustmentPrecise");
   function GetSystemDirectoryA(
      lpBuffer : LPSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetSystemDirectoryA,"GetSystemDirectoryA");
   function GetSystemDirectoryW(
      lpBuffer : LPWSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetSystemDirectoryW,"GetSystemDirectoryW");
   function GetWindowsDirectoryA(
      lpBuffer : LPSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetWindowsDirectoryA,"GetWindowsDirectoryA");
   function GetWindowsDirectoryW(
      lpBuffer : LPWSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetWindowsDirectoryW,"GetWindowsDirectoryW");
   function GetSystemWindowsDirectoryA(
      lpBuffer : LPSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetSystemWindowsDirectoryA,"GetSystemWindowsDirectoryA");
   function GetSystemWindowsDirectoryW(
      lpBuffer : LPWSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetSystemWindowsDirectoryW,"GetSystemWindowsDirectoryW");
   type COMPUTER_NAME_FORMAT_x is (
      ComputerNameNetBIOS,
      ComputerNameDnsHostname,
      ComputerNameDnsDomain,
      ComputerNameDnsFullyQualified,
      ComputerNamePhysicalNetBIOS,
      ComputerNamePhysicalDnsHostname,
      ComputerNamePhysicalDnsDomain,
      ComputerNamePhysicalDnsFullyQualified,
      ComputerNameMax
   );
   for COMPUTER_NAME_FORMAT_x use (
      ComputerNameNetBIOS => 0,
      ComputerNameDnsHostname => 1,
      ComputerNameDnsDomain => 2,
      ComputerNameDnsFullyQualified => 3,
      ComputerNamePhysicalNetBIOS => 4,
      ComputerNamePhysicalDnsHostname => 5,
      ComputerNamePhysicalDnsDomain => 6,
      ComputerNamePhysicalDnsFullyQualified => 7,
      ComputerNameMax => 8
   );
   for COMPUTER_NAME_FORMAT_x'Size use 32;
   subtype COMPUTER_NAME_FORMAT is COMPUTER_NAME_FORMAT_x; -- CXType_Elaborated
   function GetComputerNameExA(
      NameType : COMPUTER_NAME_FORMAT;
      lpBuffer : LPSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetComputerNameExA,"GetComputerNameExA");
   function GetComputerNameExW(
      NameType : COMPUTER_NAME_FORMAT;
      lpBuffer : LPWSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetComputerNameExW,"GetComputerNameExW");
   function SetComputerNameExW(
      NameType : COMPUTER_NAME_FORMAT;
      lpBuffer : LPCWSTR
   ) return BOOL;
   pragma import (C,SetComputerNameExW,"SetComputerNameExW");
   function SetSystemTime(
      lpSystemTime_x : access constant SYSTEMTIME
   ) return BOOL;
   pragma import (C,SetSystemTime,"SetSystemTime");
   function GetVersionExA(
      lpVersionInformation : LPOSVERSIONINFOA
   ) return BOOL;
   pragma import (C,GetVersionExA,"GetVersionExA");
   function GetVersionExW(
      lpVersionInformation : LPOSVERSIONINFOW
   ) return BOOL;
   pragma import (C,GetVersionExW,"GetVersionExW");
   function GetLogicalProcessorInformation(
      Buffer : PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
      ReturnedLength : PDWORD
   ) return BOOL;
   pragma import (C,GetLogicalProcessorInformation,"GetLogicalProcessorInformation");
   function GetLogicalProcessorInformationEx(
      RelationshipType : LOGICAL_PROCESSOR_RELATIONSHIP;
      Buffer : PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
      ReturnedLength : PDWORD
   ) return BOOL;
   pragma import (C,GetLogicalProcessorInformationEx,"GetLogicalProcessorInformationEx");
   procedure GetNativeSystemInfo(
      lpSystemInfo : LPSYSTEM_INFO
   );
   pragma import (C,GetNativeSystemInfo,"GetNativeSystemInfo");
   procedure GetSystemTimePreciseAsFileTime(
      lpSystemTimeAsFileTime : LPFILETIME
   );
   pragma import (C,GetSystemTimePreciseAsFileTime,"GetSystemTimePreciseAsFileTime");
   function GetProductInfo(
      dwOSMajorVersion : DWORD;
      dwOSMinorVersion : DWORD;
      dwSpMajorVersion : DWORD;
      dwSpMinorVersion : DWORD;
      pdwReturnedProductType : PDWORD
   ) return BOOL;
   pragma import (C,GetProductInfo,"GetProductInfo");
   function GetOsSafeBootMode(
      Flags : PDWORD
   ) return BOOL;
   pragma import (C,GetOsSafeBootMode,"GetOsSafeBootMode");
   function EnumSystemFirmwareTables(
      FirmwareTableProviderSignature : DWORD;
      pFirmwareTableEnumBuffer : PVOID;
      BufferSize : DWORD
   ) return UINT;
   pragma import (C,EnumSystemFirmwareTables,"EnumSystemFirmwareTables");
   function GetSystemFirmwareTable(
      FirmwareTableProviderSignature : DWORD;
      FirmwareTableID : DWORD;
      pFirmwareTableBuffer : PVOID;
      BufferSize : DWORD
   ) return UINT;
   pragma import (C,GetSystemFirmwareTable,"GetSystemFirmwareTable");
   function DnsHostnameToComputerNameExW(
      Hostname : LPCWSTR;
      ComputerName : LPWSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,DnsHostnameToComputerNameExW,"DnsHostnameToComputerNameExW");
   function GetPhysicallyInstalledSystemMemory(
      TotalMemoryInKilobytes : PULONGLONG
   ) return BOOL;
   pragma import (C,GetPhysicallyInstalledSystemMemory,"GetPhysicallyInstalledSystemMemory");
   function SetComputerNameEx2W(
      NameType : COMPUTER_NAME_FORMAT;
      Flags : DWORD;
      lpBuffer : LPCWSTR
   ) return BOOL;
   pragma import (C,SetComputerNameEx2W,"SetComputerNameEx2W");
   function SetSystemTimeAdjustment(
      dwTimeAdjustment : DWORD;
      bTimeAdjustmentDisabled : BOOL
   ) return BOOL;
   pragma import (C,SetSystemTimeAdjustment,"SetSystemTimeAdjustment");
   function SetSystemTimeAdjustmentPrecise(
      dwTimeAdjustment : DWORD64;
      bTimeAdjustmentDisabled : BOOL
   ) return BOOL;
   pragma import (C,SetSystemTimeAdjustmentPrecise,"SetSystemTimeAdjustmentPrecise");
   function InstallELAMCertificateInfo(
      ELAMFile : HANDLE
   ) return BOOL;
   pragma import (C,InstallELAMCertificateInfo,"InstallELAMCertificateInfo");
   function GetProcessorSystemCycleTime(
      Group : USHORT;
      Buffer : PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
      ReturnedLength : PDWORD
   ) return BOOL;
   pragma import (C,GetProcessorSystemCycleTime,"GetProcessorSystemCycleTime");
   function GetOsManufacturingMode(
      pbEnabled : PBOOL
   ) return BOOL;
   pragma import (C,GetOsManufacturingMode,"GetOsManufacturingMode");
   function GetIntegratedDisplaySize(
      sizeInInches : access Long_Float
   ) return HRESULT;
   pragma import (C,GetIntegratedDisplaySize,"GetIntegratedDisplaySize");
   function SetComputerNameA(
      lpComputerName : LPCSTR
   ) return BOOL;
   pragma import (C,SetComputerNameA,"SetComputerNameA");
   function SetComputerNameW(
      lpComputerName : LPCWSTR
   ) return BOOL;
   pragma import (C,SetComputerNameW,"SetComputerNameW");
   function SetComputerNameExA(
      NameType : COMPUTER_NAME_FORMAT;
      lpBuffer : LPCSTR
   ) return BOOL;
   pragma import (C,SetComputerNameExA,"SetComputerNameExA");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\memoryapi.h>
   procedure VirtualAlloc(
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      flAllocationType : DWORD;
      flProtect : DWORD
   );
   pragma import (C,VirtualAlloc,"VirtualAlloc");
   function VirtualProtect(
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      flNewProtect : DWORD;
      lpflOldProtect : PDWORD
   ) return BOOL;
   pragma import (C,VirtualProtect,"VirtualProtect");
   function VirtualFree(
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      dwFreeType : DWORD
   ) return BOOL;
   pragma import (C,VirtualFree,"VirtualFree");
   function VirtualQuery(
      lpAddress : LPCVOID;
      lpBuffer : PMEMORY_BASIC_INFORMATION;
      dwLength : SIZE_T
   ) return SIZE_T;
   pragma import (C,VirtualQuery,"VirtualQuery");
   procedure VirtualAllocEx(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      flAllocationType : DWORD;
      flProtect : DWORD
   );
   pragma import (C,VirtualAllocEx,"VirtualAllocEx");
   function VirtualProtectEx(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      flNewProtect : DWORD;
      lpflOldProtect : PDWORD
   ) return BOOL;
   pragma import (C,VirtualProtectEx,"VirtualProtectEx");
   function VirtualQueryEx(
      hProcess : HANDLE;
      lpAddress : LPCVOID;
      lpBuffer : PMEMORY_BASIC_INFORMATION;
      dwLength : SIZE_T
   ) return SIZE_T;
   pragma import (C,VirtualQueryEx,"VirtualQueryEx");
   function ReadProcessMemory(
      hProcess : HANDLE;
      lpBaseAddress : LPCVOID;
      lpBuffer : LPVOID;
      nSize : SIZE_T;
      lpNumberOfBytesRead : access SIZE_T
   ) return BOOL;
   pragma import (C,ReadProcessMemory,"ReadProcessMemory");
   function WriteProcessMemory(
      hProcess : HANDLE;
      lpBaseAddress : LPVOID;
      lpBuffer : LPCVOID;
      nSize : SIZE_T;
      lpNumberOfBytesWritten : access SIZE_T
   ) return BOOL;
   pragma import (C,WriteProcessMemory,"WriteProcessMemory");
   function CreateFileMappingW(
      hFile_x : HANDLE;
      lpFileMappingAttributes : LPSECURITY_ATTRIBUTES;
      flProtect : DWORD;
      dwMaximumSizeHigh : DWORD;
      dwMaximumSizeLow : DWORD;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreateFileMappingW,"CreateFileMappingW");
   function OpenFileMappingW(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenFileMappingW,"OpenFileMappingW");
   procedure MapViewOfFile(
      hFileMappingObject : HANDLE;
      dwDesiredAccess : DWORD;
      dwFileOffsetHigh : DWORD;
      dwFileOffsetLow : DWORD;
      dwNumberOfBytesToMap : SIZE_T
   );
   pragma import (C,MapViewOfFile,"MapViewOfFile");
   procedure MapViewOfFileEx(
      hFileMappingObject : HANDLE;
      dwDesiredAccess : DWORD;
      dwFileOffsetHigh : DWORD;
      dwFileOffsetLow : DWORD;
      dwNumberOfBytesToMap : SIZE_T;
      lpBaseAddress : LPVOID
   );
   pragma import (C,MapViewOfFileEx,"MapViewOfFileEx");
   function VirtualFreeEx(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      dwFreeType : DWORD
   ) return BOOL;
   pragma import (C,VirtualFreeEx,"VirtualFreeEx");
   function FlushViewOfFile(
      lpBaseAddress : LPCVOID;
      dwNumberOfBytesToFlush : SIZE_T
   ) return BOOL;
   pragma import (C,FlushViewOfFile,"FlushViewOfFile");
   function UnmapViewOfFile(
      lpBaseAddress : LPCVOID
   ) return BOOL;
   pragma import (C,UnmapViewOfFile,"UnmapViewOfFile");
   function GetLargePageMinimum return SIZE_T;
   pragma import (C,GetLargePageMinimum,"GetLargePageMinimum");
   function GetProcessWorkingSetSizeEx(
      hProcess : HANDLE;
      lpMinimumWorkingSetSize : PSIZE_T;
      lpMaximumWorkingSetSize : PSIZE_T;
      Flags : PDWORD
   ) return BOOL;
   pragma import (C,GetProcessWorkingSetSizeEx,"GetProcessWorkingSetSizeEx");
   function SetProcessWorkingSetSizeEx(
      hProcess : HANDLE;
      dwMinimumWorkingSetSize : SIZE_T;
      dwMaximumWorkingSetSize : SIZE_T;
      Flags : DWORD
   ) return BOOL;
   pragma import (C,SetProcessWorkingSetSizeEx,"SetProcessWorkingSetSizeEx");
   function VirtualLock(
      lpAddress : LPVOID;
      dwSize : SIZE_T
   ) return BOOL;
   pragma import (C,VirtualLock,"VirtualLock");
   function VirtualUnlock(
      lpAddress : LPVOID;
      dwSize : SIZE_T
   ) return BOOL;
   pragma import (C,VirtualUnlock,"VirtualUnlock");
   function GetWriteWatch(
      dwFlags : DWORD;
      lpBaseAddress : PVOID;
      dwRegionSize : SIZE_T;
      lpAddresses : access PVOID;
      lpdwCount : access ULONG_PTR;
      lpdwGranularity : LPDWORD
   ) return UINT;
   pragma import (C,GetWriteWatch,"GetWriteWatch");
   function ResetWriteWatch(
      lpBaseAddress : LPVOID;
      dwRegionSize : SIZE_T
   ) return UINT;
   pragma import (C,ResetWriteWatch,"ResetWriteWatch");
   type MEMORY_RESOURCE_NOTIFICATION_TYPE_x is (
      LowMemoryResourceNotification,
      HighMemoryResourceNotification
   );
   for MEMORY_RESOURCE_NOTIFICATION_TYPE_x use (
      LowMemoryResourceNotification => 0,
      HighMemoryResourceNotification => 1
   );
   for MEMORY_RESOURCE_NOTIFICATION_TYPE_x'Size use 32;
   subtype MEMORY_RESOURCE_NOTIFICATION_TYPE is MEMORY_RESOURCE_NOTIFICATION_TYPE_x; -- CXType_Elaborated
   function CreateMemoryResourceNotification(
      NotificationType : MEMORY_RESOURCE_NOTIFICATION_TYPE
   ) return HANDLE;
   pragma import (C,CreateMemoryResourceNotification,"CreateMemoryResourceNotification");
   function QueryMemoryResourceNotification(
      ResourceNotificationHandle : HANDLE;
      ResourceState : PBOOL
   ) return BOOL;
   pragma import (C,QueryMemoryResourceNotification,"QueryMemoryResourceNotification");
   function GetSystemFileCacheSize(
      lpMinimumFileCacheSize : PSIZE_T;
      lpMaximumFileCacheSize : PSIZE_T;
      lpFlags : PDWORD
   ) return BOOL;
   pragma import (C,GetSystemFileCacheSize,"GetSystemFileCacheSize");
   function SetSystemFileCacheSize(
      MinimumFileCacheSize : SIZE_T;
      MaximumFileCacheSize : SIZE_T;
      Flags : DWORD
   ) return BOOL;
   pragma import (C,SetSystemFileCacheSize,"SetSystemFileCacheSize");
   function CreateFileMappingNumaW(
      hFile_x : HANDLE;
      lpFileMappingAttributes : LPSECURITY_ATTRIBUTES;
      flProtect : DWORD;
      dwMaximumSizeHigh : DWORD;
      dwMaximumSizeLow : DWORD;
      lpName : LPCWSTR;
      nndPreferred : DWORD
   ) return HANDLE;
   pragma import (C,CreateFileMappingNumaW,"CreateFileMappingNumaW");
   type WIN32_MEMORY_RANGE_ENTRY_x is record
      VirtualAddress : PVOID;
      NumberOfBytes : SIZE_T;
   end record;
   subtype WIN32_MEMORY_RANGE_ENTRY is WIN32_MEMORY_RANGE_ENTRY_x; -- CXType_Elaborated
   type PWIN32_MEMORY_RANGE_ENTRY is access WIN32_MEMORY_RANGE_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   function PrefetchVirtualMemory(
      hProcess : HANDLE;
      NumberOfEntries : ULONG_PTR;
      VirtualAddresses : PWIN32_MEMORY_RANGE_ENTRY;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,PrefetchVirtualMemory,"PrefetchVirtualMemory");
   function CreateFileMappingFromApp(
      hFile_x : HANDLE;
      SecurityAttributes : PSECURITY_ATTRIBUTES;
      PageProtection : ULONG;
      MaximumSize : ULONG64;
      Name : PCWSTR
   ) return HANDLE;
   pragma import (C,CreateFileMappingFromApp,"CreateFileMappingFromApp");
   procedure MapViewOfFileFromApp(
      hFileMappingObject : HANDLE;
      DesiredAccess : ULONG;
      FileOffset : ULONG64;
      NumberOfBytesToMap : SIZE_T
   );
   pragma import (C,MapViewOfFileFromApp,"MapViewOfFileFromApp");
   function UnmapViewOfFileEx(
      BaseAddress : PVOID;
      UnmapFlags : ULONG
   ) return BOOL;
   pragma import (C,UnmapViewOfFileEx,"UnmapViewOfFileEx");
   function AllocateUserPhysicalPages(
      hProcess : HANDLE;
      NumberOfPages : PULONG_PTR;
      PageArray : PULONG_PTR
   ) return BOOL;
   pragma import (C,AllocateUserPhysicalPages,"AllocateUserPhysicalPages");
   function FreeUserPhysicalPages(
      hProcess : HANDLE;
      NumberOfPages : PULONG_PTR;
      PageArray : PULONG_PTR
   ) return BOOL;
   pragma import (C,FreeUserPhysicalPages,"FreeUserPhysicalPages");
   function MapUserPhysicalPages(
      VirtualAddress : PVOID;
      NumberOfPages : ULONG_PTR;
      PageArray : PULONG_PTR
   ) return BOOL;
   pragma import (C,MapUserPhysicalPages,"MapUserPhysicalPages");
   function AllocateUserPhysicalPagesNuma(
      hProcess : HANDLE;
      NumberOfPages : PULONG_PTR;
      PageArray : PULONG_PTR;
      nndPreferred : DWORD
   ) return BOOL;
   pragma import (C,AllocateUserPhysicalPagesNuma,"AllocateUserPhysicalPagesNuma");
   procedure VirtualAllocExNuma(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      flAllocationType : DWORD;
      flProtect : DWORD;
      nndPreferred : DWORD
   );
   pragma import (C,VirtualAllocExNuma,"VirtualAllocExNuma");
   function GetMemoryErrorHandlingCapabilities(
      Capabilities : PULONG
   ) return BOOL;
   pragma import (C,GetMemoryErrorHandlingCapabilities,"GetMemoryErrorHandlingCapabilities");
   subtype BAD_MEMORY_CALLBACK_ROUTINE is System.Address; -- [FIXME - CXType_FunctionProto] void ()
   subtype PBAD_MEMORY_CALLBACK_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_FunctionProto] void ()
   procedure RegisterBadMemoryNotification(
      Callback : PBAD_MEMORY_CALLBACK_ROUTINE
   );
   pragma import (C,RegisterBadMemoryNotification,"RegisterBadMemoryNotification");
   function UnregisterBadMemoryNotification(
      RegistrationHandle : PVOID
   ) return BOOL;
   pragma import (C,UnregisterBadMemoryNotification,"UnregisterBadMemoryNotification");
   type OFFER_PRIORITY is (
      VmOfferPriorityVeryLow,
      VmOfferPriorityLow,
      VmOfferPriorityBelowNormal,
      VmOfferPriorityNormal
   );
   for OFFER_PRIORITY use (
      VmOfferPriorityVeryLow => 1,
      VmOfferPriorityLow => 2,
      VmOfferPriorityBelowNormal => 3,
      VmOfferPriorityNormal => 4
   );
   for OFFER_PRIORITY'Size use 32;
   function OfferVirtualMemory(
      VirtualAddress : PVOID;
      Size_x : SIZE_T;
      Priority : OFFER_PRIORITY
   ) return DWORD;
   pragma import (C,OfferVirtualMemory,"OfferVirtualMemory");
   function ReclaimVirtualMemory(
      VirtualAddress : access Void;
      Size_x : SIZE_T
   ) return DWORD;
   pragma import (C,ReclaimVirtualMemory,"ReclaimVirtualMemory");
   function DiscardVirtualMemory(
      VirtualAddress : PVOID;
      Size_x : SIZE_T
   ) return DWORD;
   pragma import (C,DiscardVirtualMemory,"DiscardVirtualMemory");
   function SetProcessValidCallTargets(
      hProcess : HANDLE;
      VirtualAddress : PVOID;
      RegionSize : SIZE_T;
      NumberOfOffsets : ULONG;
      OffsetInformation : PCFG_CALL_TARGET_INFO
   ) return BOOL;
   pragma import (C,SetProcessValidCallTargets,"SetProcessValidCallTargets");
   procedure VirtualAllocFromApp(
      BaseAddress : PVOID;
      Size_x : SIZE_T;
      AllocationType : ULONG;
      Protection : ULONG
   );
   pragma import (C,VirtualAllocFromApp,"VirtualAllocFromApp");
   function VirtualProtectFromApp(
      Address : PVOID;
      Size_x : SIZE_T;
      NewProtection : ULONG;
      OldProtection : PULONG
   ) return BOOL;
   pragma import (C,VirtualProtectFromApp,"VirtualProtectFromApp");
   function OpenFileMappingFromApp(
      DesiredAccess : ULONG;
      InheritHandle : BOOL;
      Name : PCWSTR
   ) return HANDLE;
   pragma import (C,OpenFileMappingFromApp,"OpenFileMappingFromApp");
   type WIN32_MEMORY_INFORMATION_CLASS is (
      MemoryRegionInfo
   );
   for WIN32_MEMORY_INFORMATION_CLASS use (
      MemoryRegionInfo => 0
   );
   for WIN32_MEMORY_INFORMATION_CLASS'Size use 32;
   type WIN32_MEMORY_REGION_INFORMATION is record
      AllocationBase : PVOID;
      AllocationProtect : ULONG;
      RegionSize : SIZE_T;
      CommitSize : SIZE_T;
   end record;
   function QueryVirtualMemoryInformation(
      Process : HANDLE;
      VirtualAddress : access Void;
      MemoryInformationClass : WIN32_MEMORY_INFORMATION_CLASS;
      MemoryInformation : PVOID;
      MemoryInformationSize : SIZE_T;
      ReturnSize : PSIZE_T
   ) return BOOL;
   pragma import (C,QueryVirtualMemoryInformation,"QueryVirtualMemoryInformation");
   procedure MapViewOfFileNuma2(
      FileMappingHandle : HANDLE;
      ProcessHandle : HANDLE;
      Offset : ULONG64;
      BaseAddress : PVOID;
      ViewSize : SIZE_T;
      AllocationType : ULONG;
      PageProtection : ULONG;
      PreferredNode : ULONG
   );
   pragma import (C,MapViewOfFileNuma2,"MapViewOfFileNuma2");
   -- MapViewOfFile2(); -- inlined function not supported
   function UnmapViewOfFile2(
      Process : HANDLE;
      BaseAddress : PVOID;
      UnmapFlags : ULONG
   ) return BOOL;
   pragma import (C,UnmapViewOfFile2,"UnmapViewOfFile2");
   function VirtualUnlockEx(
      Process : HANDLE;
      Address : LPVOID;
      Size_x : SIZE_T
   ) return BOOL;
   pragma import (C,VirtualUnlockEx,"VirtualUnlockEx");
   procedure VirtualAlloc2(
      Process : HANDLE;
      BaseAddress : PVOID;
      Size_x : SIZE_T;
      AllocationType : ULONG;
      PageProtection : ULONG;
      ExtendedParameters : access MEM_EXTENDED_PARAMETER;
      ParameterCount : ULONG
   );
   pragma import (C,VirtualAlloc2,"VirtualAlloc2");
   procedure MapViewOfFile3(
      FileMapping : HANDLE;
      Process : HANDLE;
      BaseAddress : PVOID;
      Offset : ULONG64;
      ViewSize : SIZE_T;
      AllocationType : ULONG;
      PageProtection : ULONG;
      ExtendedParameters : access MEM_EXTENDED_PARAMETER;
      ParameterCount : ULONG
   );
   pragma import (C,MapViewOfFile3,"MapViewOfFile3");
   procedure VirtualAlloc2FromApp(
      Process : HANDLE;
      BaseAddress : PVOID;
      Size_x : SIZE_T;
      AllocationType : ULONG;
      PageProtection : ULONG;
      ExtendedParameters : access MEM_EXTENDED_PARAMETER;
      ParameterCount : ULONG
   );
   pragma import (C,VirtualAlloc2FromApp,"VirtualAlloc2FromApp");
   procedure MapViewOfFile3FromApp(
      FileMapping : HANDLE;
      Process : HANDLE;
      BaseAddress : PVOID;
      Offset : ULONG64;
      ViewSize : SIZE_T;
      AllocationType : ULONG;
      PageProtection : ULONG;
      ExtendedParameters : access MEM_EXTENDED_PARAMETER;
      ParameterCount : ULONG
   );
   pragma import (C,MapViewOfFile3FromApp,"MapViewOfFile3FromApp");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\enclaveapi.h>
   function IsEnclaveTypeSupported(
      flEnclaveType : DWORD
   ) return BOOL;
   pragma import (C,IsEnclaveTypeSupported,"IsEnclaveTypeSupported");
   procedure CreateEnclave(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      dwSize : SIZE_T;
      dwInitialCommitment : SIZE_T;
      flEnclaveType : DWORD;
      lpEnclaveInformation : LPCVOID;
      dwInfoLength : DWORD;
      lpEnclaveError : LPDWORD
   );
   pragma import (C,CreateEnclave,"CreateEnclave");
   function LoadEnclaveData(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      lpBuffer : LPCVOID;
      nSize : SIZE_T;
      flProtect : DWORD;
      lpPageInformation : LPCVOID;
      dwInfoLength : DWORD;
      lpNumberOfBytesWritten : PSIZE_T;
      lpEnclaveError : LPDWORD
   ) return BOOL;
   pragma import (C,LoadEnclaveData,"LoadEnclaveData");
   function InitializeEnclave(
      hProcess : HANDLE;
      lpAddress : LPVOID;
      lpEnclaveInformation : LPCVOID;
      dwInfoLength : DWORD;
      lpEnclaveError : LPDWORD
   ) return BOOL;
   pragma import (C,InitializeEnclave,"InitializeEnclave");
   function LoadEnclaveImageA(
      lpEnclaveAddress : LPVOID;
      lpImageName : LPCSTR
   ) return BOOL;
   pragma import (C,LoadEnclaveImageA,"LoadEnclaveImageA");
   function LoadEnclaveImageW(
      lpEnclaveAddress : LPVOID;
      lpImageName : LPCWSTR
   ) return BOOL;
   pragma import (C,LoadEnclaveImageW,"LoadEnclaveImageW");
   function CallEnclave(
      lpRoutine : LPENCLAVE_ROUTINE;
      lpParameter : LPVOID;
      fWaitForThread : BOOL;
      lpReturnValue : access LPVOID
   ) return BOOL;
   pragma import (C,CallEnclave,"CallEnclave");
   function TerminateEnclave(
      lpAddress : LPVOID;
      fWait : BOOL
   ) return BOOL;
   pragma import (C,TerminateEnclave,"TerminateEnclave");
   function DeleteEnclave(
      lpAddress : LPVOID
   ) return BOOL;
   pragma import (C,DeleteEnclave,"DeleteEnclave");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\threadpoollegacyapiset.h>
   function QueueUserWorkItem(
      function_x : LPTHREAD_START_ROUTINE;
      Context_x : PVOID;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,QueueUserWorkItem,"QueueUserWorkItem");
   function UnregisterWaitEx(
      WaitHandle : HANDLE;
      CompletionEvent : HANDLE
   ) return BOOL;
   pragma import (C,UnregisterWaitEx,"UnregisterWaitEx");
   function CreateTimerQueue return HANDLE;
   pragma import (C,CreateTimerQueue,"CreateTimerQueue");
   function CreateTimerQueueTimer(
      phNewTimer : PHANDLE;
      TimerQueue : HANDLE;
      Callback : WAITORTIMERCALLBACK;
      Parameter : PVOID;
      DueTime : DWORD;
      Period : DWORD;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,CreateTimerQueueTimer,"CreateTimerQueueTimer");
   function ChangeTimerQueueTimer(
      TimerQueue : HANDLE;
      Timer : HANDLE;
      DueTime : ULONG;
      Period : ULONG
   ) return BOOL;
   pragma import (C,ChangeTimerQueueTimer,"ChangeTimerQueueTimer");
   function DeleteTimerQueueTimer(
      TimerQueue : HANDLE;
      Timer : HANDLE;
      CompletionEvent : HANDLE
   ) return BOOL;
   pragma import (C,DeleteTimerQueueTimer,"DeleteTimerQueueTimer");
   function DeleteTimerQueueEx(
      TimerQueue : HANDLE;
      CompletionEvent : HANDLE
   ) return BOOL;
   pragma import (C,DeleteTimerQueueEx,"DeleteTimerQueueEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\threadpoolapiset.h>
   subtype PTP_WIN32_IO_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PTP_CALLBACK_INSTANCE, PVOID, PVOID, ULONG, ULONG_PTR, PTP_IO)
   function CreateThreadpool(
      reserved : PVOID
   ) return PTP_POOL;
   pragma import (C,CreateThreadpool,"CreateThreadpool");
   procedure SetThreadpoolThreadMaximum(
      ptpp : PTP_POOL;
      cthrdMost : DWORD
   );
   pragma import (C,SetThreadpoolThreadMaximum,"SetThreadpoolThreadMaximum");
   function SetThreadpoolThreadMinimum(
      ptpp : PTP_POOL;
      cthrdMic : DWORD
   ) return BOOL;
   pragma import (C,SetThreadpoolThreadMinimum,"SetThreadpoolThreadMinimum");
   function SetThreadpoolStackInformation(
      ptpp : PTP_POOL;
      ptpsi : PTP_POOL_STACK_INFORMATION
   ) return BOOL;
   pragma import (C,SetThreadpoolStackInformation,"SetThreadpoolStackInformation");
   function QueryThreadpoolStackInformation(
      ptpp : PTP_POOL;
      ptpsi : PTP_POOL_STACK_INFORMATION
   ) return BOOL;
   pragma import (C,QueryThreadpoolStackInformation,"QueryThreadpoolStackInformation");
   procedure CloseThreadpool(
      ptpp : PTP_POOL
   );
   pragma import (C,CloseThreadpool,"CloseThreadpool");
   function CreateThreadpoolCleanupGroup return PTP_CLEANUP_GROUP;
   pragma import (C,CreateThreadpoolCleanupGroup,"CreateThreadpoolCleanupGroup");
   procedure CloseThreadpoolCleanupGroupMembers(
      ptpcg : PTP_CLEANUP_GROUP;
      fCancelPendingCallbacks : BOOL;
      pvCleanupContext : PVOID
   );
   pragma import (C,CloseThreadpoolCleanupGroupMembers,"CloseThreadpoolCleanupGroupMembers");
   procedure CloseThreadpoolCleanupGroup(
      ptpcg : PTP_CLEANUP_GROUP
   );
   pragma import (C,CloseThreadpoolCleanupGroup,"CloseThreadpoolCleanupGroup");
   procedure SetEventWhenCallbackReturns(
      pci : PTP_CALLBACK_INSTANCE;
      evt : HANDLE
   );
   pragma import (C,SetEventWhenCallbackReturns,"SetEventWhenCallbackReturns");
   procedure ReleaseSemaphoreWhenCallbackReturns(
      pci : PTP_CALLBACK_INSTANCE;
      sem : HANDLE;
      crel : DWORD
   );
   pragma import (C,ReleaseSemaphoreWhenCallbackReturns,"ReleaseSemaphoreWhenCallbackReturns");
   procedure ReleaseMutexWhenCallbackReturns(
      pci : PTP_CALLBACK_INSTANCE;
      mut : HANDLE
   );
   pragma import (C,ReleaseMutexWhenCallbackReturns,"ReleaseMutexWhenCallbackReturns");
   procedure LeaveCriticalSectionWhenCallbackReturns(
      pci : PTP_CALLBACK_INSTANCE;
      pcs : PCRITICAL_SECTION
   );
   pragma import (C,LeaveCriticalSectionWhenCallbackReturns,"LeaveCriticalSectionWhenCallbackReturns");
   procedure FreeLibraryWhenCallbackReturns(
      pci : PTP_CALLBACK_INSTANCE;
      mod_x : HMODULE
   );
   pragma import (C,FreeLibraryWhenCallbackReturns,"FreeLibraryWhenCallbackReturns");
   function CallbackMayRunLong(
      pci : PTP_CALLBACK_INSTANCE
   ) return BOOL;
   pragma import (C,CallbackMayRunLong,"CallbackMayRunLong");
   procedure DisassociateCurrentThreadFromCallback(
      pci : PTP_CALLBACK_INSTANCE
   );
   pragma import (C,DisassociateCurrentThreadFromCallback,"DisassociateCurrentThreadFromCallback");
   function TrySubmitThreadpoolCallback(
      pfns : PTP_SIMPLE_CALLBACK;
      pv : PVOID;
      pcbe : PTP_CALLBACK_ENVIRON
   ) return BOOL;
   pragma import (C,TrySubmitThreadpoolCallback,"TrySubmitThreadpoolCallback");
   function CreateThreadpoolWork(
      pfnwk : PTP_WORK_CALLBACK;
      pv : PVOID;
      pcbe : PTP_CALLBACK_ENVIRON
   ) return PTP_WORK;
   pragma import (C,CreateThreadpoolWork,"CreateThreadpoolWork");
   procedure SubmitThreadpoolWork(
      pwk : PTP_WORK
   );
   pragma import (C,SubmitThreadpoolWork,"SubmitThreadpoolWork");
   procedure WaitForThreadpoolWorkCallbacks(
      pwk : PTP_WORK;
      fCancelPendingCallbacks : BOOL
   );
   pragma import (C,WaitForThreadpoolWorkCallbacks,"WaitForThreadpoolWorkCallbacks");
   procedure CloseThreadpoolWork(
      pwk : PTP_WORK
   );
   pragma import (C,CloseThreadpoolWork,"CloseThreadpoolWork");
   function CreateThreadpoolTimer(
      pfnti : PTP_TIMER_CALLBACK;
      pv : PVOID;
      pcbe : PTP_CALLBACK_ENVIRON
   ) return PTP_TIMER;
   pragma import (C,CreateThreadpoolTimer,"CreateThreadpoolTimer");
   procedure SetThreadpoolTimer(
      pti : PTP_TIMER;
      pftDueTime : PFILETIME;
      msPeriod : DWORD;
      msWindowLength : DWORD
   );
   pragma import (C,SetThreadpoolTimer,"SetThreadpoolTimer");
   function IsThreadpoolTimerSet(
      pti : PTP_TIMER
   ) return BOOL;
   pragma import (C,IsThreadpoolTimerSet,"IsThreadpoolTimerSet");
   procedure WaitForThreadpoolTimerCallbacks(
      pti : PTP_TIMER;
      fCancelPendingCallbacks : BOOL
   );
   pragma import (C,WaitForThreadpoolTimerCallbacks,"WaitForThreadpoolTimerCallbacks");
   procedure CloseThreadpoolTimer(
      pti : PTP_TIMER
   );
   pragma import (C,CloseThreadpoolTimer,"CloseThreadpoolTimer");
   function CreateThreadpoolWait(
      pfnwa : PTP_WAIT_CALLBACK;
      pv : PVOID;
      pcbe : PTP_CALLBACK_ENVIRON
   ) return PTP_WAIT;
   pragma import (C,CreateThreadpoolWait,"CreateThreadpoolWait");
   procedure SetThreadpoolWait(
      pwa : PTP_WAIT;
      h : HANDLE;
      pftTimeout : PFILETIME
   );
   pragma import (C,SetThreadpoolWait,"SetThreadpoolWait");
   procedure WaitForThreadpoolWaitCallbacks(
      pwa : PTP_WAIT;
      fCancelPendingCallbacks : BOOL
   );
   pragma import (C,WaitForThreadpoolWaitCallbacks,"WaitForThreadpoolWaitCallbacks");
   procedure CloseThreadpoolWait(
      pwa : PTP_WAIT
   );
   pragma import (C,CloseThreadpoolWait,"CloseThreadpoolWait");
   function CreateThreadpoolIo(
      fl : HANDLE;
      pfnio : PTP_WIN32_IO_CALLBACK;
      pv : PVOID;
      pcbe : PTP_CALLBACK_ENVIRON
   ) return PTP_IO;
   pragma import (C,CreateThreadpoolIo,"CreateThreadpoolIo");
   procedure StartThreadpoolIo(
      pio : PTP_IO
   );
   pragma import (C,StartThreadpoolIo,"StartThreadpoolIo");
   procedure CancelThreadpoolIo(
      pio : PTP_IO
   );
   pragma import (C,CancelThreadpoolIo,"CancelThreadpoolIo");
   procedure WaitForThreadpoolIoCallbacks(
      pio : PTP_IO;
      fCancelPendingCallbacks : BOOL
   );
   pragma import (C,WaitForThreadpoolIoCallbacks,"WaitForThreadpoolIoCallbacks");
   procedure CloseThreadpoolIo(
      pio : PTP_IO
   );
   pragma import (C,CloseThreadpoolIo,"CloseThreadpoolIo");
   function SetThreadpoolTimerEx(
      pti : PTP_TIMER;
      pftDueTime : PFILETIME;
      msPeriod : DWORD;
      msWindowLength : DWORD
   ) return BOOL;
   pragma import (C,SetThreadpoolTimerEx,"SetThreadpoolTimerEx");
   function SetThreadpoolWaitEx(
      pwa : PTP_WAIT;
      h : HANDLE;
      pftTimeout : PFILETIME;
      Reserved : PVOID
   ) return BOOL;
   pragma import (C,SetThreadpoolWaitEx,"SetThreadpoolWaitEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\jobapi.h>
   function IsProcessInJob(
      ProcessHandle : HANDLE;
      JobHandle : HANDLE;
      Result : PBOOL
   ) return BOOL;
   pragma import (C,IsProcessInJob,"IsProcessInJob");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\jobapi2.h>
   type JOBOBJECT_IO_RATE_CONTROL_INFORMATION is record
      MaxIops : LONG64;
      MaxBandwidth : LONG64;
      ReservationIops : LONG64;
      VolumeName : PCWSTR;
      BaseIoSize : ULONG;
      ControlFlags : ULONG;
   end record;
   function CreateJobObjectW(
      lpJobAttributes : LPSECURITY_ATTRIBUTES;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreateJobObjectW,"CreateJobObjectW");
   procedure FreeMemoryJobObject(
      Buffer : access Void
   );
   pragma import (C,FreeMemoryJobObject,"FreeMemoryJobObject");
   function OpenJobObjectW(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenJobObjectW,"OpenJobObjectW");
   function AssignProcessToJobObject(
      hJob : HANDLE;
      hProcess : HANDLE
   ) return BOOL;
   pragma import (C,AssignProcessToJobObject,"AssignProcessToJobObject");
   function TerminateJobObject(
      hJob : HANDLE;
      uExitCode : UINT
   ) return BOOL;
   pragma import (C,TerminateJobObject,"TerminateJobObject");
   function SetInformationJobObject(
      hJob : HANDLE;
      JobObjectInformationClass : JOBOBJECTINFOCLASS;
      lpJobObjectInformation : LPVOID;
      cbJobObjectInformationLength : DWORD
   ) return BOOL;
   pragma import (C,SetInformationJobObject,"SetInformationJobObject");
   function SetIoRateControlInformationJobObject(
      hJob : HANDLE;
      IoRateControlInfo : access JOBOBJECT_IO_RATE_CONTROL_INFORMATION
   ) return DWORD;
   pragma import (C,SetIoRateControlInformationJobObject,"SetIoRateControlInformationJobObject");
   function QueryInformationJobObject(
      hJob : HANDLE;
      JobObjectInformationClass : JOBOBJECTINFOCLASS;
      lpJobObjectInformation : LPVOID;
      cbJobObjectInformationLength : DWORD;
      lpReturnLength : LPDWORD
   ) return BOOL;
   pragma import (C,QueryInformationJobObject,"QueryInformationJobObject");
   type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_Ptr is access all JOBOBJECT_IO_RATE_CONTROL_INFORMATION; -- Auto Generated Dependancy
   function QueryIoRateControlInformationJobObject(
      hJob : HANDLE;
      VolumeName : PCWSTR;
      InfoBlocks : access JOBOBJECT_IO_RATE_CONTROL_INFORMATION_Ptr;
      InfoBlockCount : access ULONG
   ) return DWORD;
   pragma import (C,QueryIoRateControlInformationJobObject,"QueryIoRateControlInformationJobObject");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\wow64apiset.h>
   function Wow64DisableWow64FsRedirection(
      OldValue : access PVOID
   ) return BOOL;
   pragma import (C,Wow64DisableWow64FsRedirection,"Wow64DisableWow64FsRedirection");
   function Wow64RevertWow64FsRedirection(
      OlValue : PVOID
   ) return BOOL;
   pragma import (C,Wow64RevertWow64FsRedirection,"Wow64RevertWow64FsRedirection");
   function IsWow64Process(
      hProcess : HANDLE;
      Wow64Process : PBOOL
   ) return BOOL;
   pragma import (C,IsWow64Process,"IsWow64Process");
   function GetSystemWow64DirectoryA(
      lpBuffer : LPSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetSystemWow64DirectoryA,"GetSystemWow64DirectoryA");
   function GetSystemWow64DirectoryW(
      lpBuffer : LPWSTR;
      uSize : UINT
   ) return UINT;
   pragma import (C,GetSystemWow64DirectoryW,"GetSystemWow64DirectoryW");
   function Wow64SetThreadDefaultGuestMachine(
      Machine : USHORT
   ) return USHORT;
   pragma import (C,Wow64SetThreadDefaultGuestMachine,"Wow64SetThreadDefaultGuestMachine");
   function IsWow64Process2(
      hProcess : HANDLE;
      pProcessMachine : access USHORT;
      pNativeMachine : access USHORT
   ) return BOOL;
   pragma import (C,IsWow64Process2,"IsWow64Process2");
   function GetSystemWow64Directory2A(
      lpBuffer : LPSTR;
      uSize : UINT;
      ImageFileMachineType : WORD
   ) return UINT;
   pragma import (C,GetSystemWow64Directory2A,"GetSystemWow64Directory2A");
   function GetSystemWow64Directory2W(
      lpBuffer : LPWSTR;
      uSize : UINT;
      ImageFileMachineType : WORD
   ) return UINT;
   pragma import (C,GetSystemWow64Directory2W,"GetSystemWow64Directory2W");
   function IsWow64GuestMachineSupported(
      WowGuestMachine : USHORT;
      MachineIsSupported : access BOOL
   ) return HRESULT;
   pragma import (C,IsWow64GuestMachineSupported,"IsWow64GuestMachineSupported");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\libloaderapi.h>
   type tagENUMUILANG is record
      NumOfEnumUILang : ULONG;
      SizeOfEnumUIBuffer : ULONG;
      pEnumUIBuffer : access LANGID;
   end record;
   subtype ENUMUILANG is tagENUMUILANG; -- CXType_Elaborated
   type PENUMUILANG is access tagENUMUILANG; -- CXType_Pointer - CXType_Elaborated
   subtype ENUMRESLANGPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMODULE, LPCSTR, LPCSTR, WORD, LONG_PTR)
   subtype ENUMRESLANGPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMODULE, LPCWSTR, LPCWSTR, WORD, LONG_PTR)
   subtype ENUMRESNAMEPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMODULE, LPCSTR, LPSTR, LONG_PTR)
   subtype ENUMRESNAMEPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMODULE, LPCWSTR, LPWSTR, LONG_PTR)
   subtype ENUMRESTYPEPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMODULE, LPSTR, LONG_PTR)
   subtype ENUMRESTYPEPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMODULE, LPWSTR, LONG_PTR)
   function DisableThreadLibraryCalls(
      hLibModule : HMODULE
   ) return BOOL;
   pragma import (C,DisableThreadLibraryCalls,"DisableThreadLibraryCalls");
   function FindResourceExW(
      hModule_x : HMODULE;
      lpType : LPCWSTR;
      lpName : LPCWSTR;
      wLanguage : WORD
   ) return HRSRC;
   pragma import (C,FindResourceExW,"FindResourceExW");
   function FindStringOrdinal(
      dwFindStringOrdinalFlags : DWORD;
      lpStringSource : LPCWSTR;
      cchSource : Interfaces.C.Int;
      lpStringValue : LPCWSTR;
      cchValue : Interfaces.C.Int;
      bIgnoreCase : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,FindStringOrdinal,"FindStringOrdinal");
   function FreeLibrary(
      hLibModule : HMODULE
   ) return BOOL;
   pragma import (C,FreeLibrary,"FreeLibrary");
   procedure FreeLibraryAndExitThread(
      hLibModule : HMODULE;
      dwExitCode : DWORD
   );
   pragma import (C,FreeLibraryAndExitThread,"FreeLibraryAndExitThread");
   function FreeResource(
      hResData : HGLOBAL
   ) return BOOL;
   pragma import (C,FreeResource,"FreeResource");
   function GetModuleFileNameA(
      hModule_x : HMODULE;
      lpFilename : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetModuleFileNameA,"GetModuleFileNameA");
   function GetModuleFileNameW(
      hModule_x : HMODULE;
      lpFilename : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetModuleFileNameW,"GetModuleFileNameW");
   function GetModuleHandleA(
      lpModuleName : LPCSTR
   ) return HMODULE;
   pragma import (C,GetModuleHandleA,"GetModuleHandleA");
   function GetModuleHandleW(
      lpModuleName : LPCWSTR
   ) return HMODULE;
   pragma import (C,GetModuleHandleW,"GetModuleHandleW");
   subtype PGET_MODULE_HANDLE_EXA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, LPCSTR, HMODULE *)
   subtype PGET_MODULE_HANDLE_EXW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, LPCWSTR, HMODULE *)
   function GetModuleHandleExA(
      dwFlags : DWORD;
      lpModuleName : LPCSTR;
      phModule : access HMODULE
   ) return BOOL;
   pragma import (C,GetModuleHandleExA,"GetModuleHandleExA");
   function GetModuleHandleExW(
      dwFlags : DWORD;
      lpModuleName : LPCWSTR;
      phModule : access HMODULE
   ) return BOOL;
   pragma import (C,GetModuleHandleExW,"GetModuleHandleExW");
   function GetProcAddress(
      hModule_x : HMODULE;
      lpProcName : LPCSTR
   ) return FARPROC;
   pragma import (C,GetProcAddress,"GetProcAddress");
   function LoadLibraryExA(
      lpLibFileName : LPCSTR;
      hFile_x : HANDLE;
      dwFlags : DWORD
   ) return HMODULE;
   pragma import (C,LoadLibraryExA,"LoadLibraryExA");
   function LoadLibraryExW(
      lpLibFileName : LPCWSTR;
      hFile_x : HANDLE;
      dwFlags : DWORD
   ) return HMODULE;
   pragma import (C,LoadLibraryExW,"LoadLibraryExW");
   function LoadResource(
      hModule_x : HMODULE;
      hResInfo : HRSRC
   ) return HGLOBAL;
   pragma import (C,LoadResource,"LoadResource");
   function LoadStringA(
      hInstance_x : HINSTANCE;
      uID : UINT;
      lpBuffer : LPSTR;
      cchBufferMax : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,LoadStringA,"LoadStringA");
   function LoadStringW(
      hInstance_x : HINSTANCE;
      uID : UINT;
      lpBuffer : LPWSTR;
      cchBufferMax : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,LoadStringW,"LoadStringW");
   procedure LockResource(
      hResData : HGLOBAL
   );
   pragma import (C,LockResource,"LockResource");
   function SizeofResource(
      hModule_x : HMODULE;
      hResInfo : HRSRC
   ) return DWORD;
   pragma import (C,SizeofResource,"SizeofResource");
   subtype DLL_DIRECTORY_COOKIE is PVOID; -- CXType_Typedef
   type PDLL_DIRECTORY_COOKIE is access PVOID; -- CXType_Pointer - CXType_Typedef
   function AddDllDirectory(
      NewDirectory : PCWSTR
   ) return DLL_DIRECTORY_COOKIE;
   pragma import (C,AddDllDirectory,"AddDllDirectory");
   function RemoveDllDirectory(
      Cookie : DLL_DIRECTORY_COOKIE
   ) return BOOL;
   pragma import (C,RemoveDllDirectory,"RemoveDllDirectory");
   function SetDefaultDllDirectories(
      DirectoryFlags : DWORD
   ) return BOOL;
   pragma import (C,SetDefaultDllDirectories,"SetDefaultDllDirectories");
   function EnumResourceLanguagesExA(
      hModule_x : HMODULE;
      lpType : LPCSTR;
      lpName : LPCSTR;
      lpEnumFunc : ENUMRESLANGPROCA;
      lParam_x : LONG_PTR;
      dwFlags : DWORD;
      LangId_x : LANGID
   ) return BOOL;
   pragma import (C,EnumResourceLanguagesExA,"EnumResourceLanguagesExA");
   function EnumResourceLanguagesExW(
      hModule_x : HMODULE;
      lpType : LPCWSTR;
      lpName : LPCWSTR;
      lpEnumFunc : ENUMRESLANGPROCW;
      lParam_x : LONG_PTR;
      dwFlags : DWORD;
      LangId_x : LANGID
   ) return BOOL;
   pragma import (C,EnumResourceLanguagesExW,"EnumResourceLanguagesExW");
   function EnumResourceNamesExA(
      hModule_x : HMODULE;
      lpType : LPCSTR;
      lpEnumFunc : ENUMRESNAMEPROCA;
      lParam_x : LONG_PTR;
      dwFlags : DWORD;
      LangId_x : LANGID
   ) return BOOL;
   pragma import (C,EnumResourceNamesExA,"EnumResourceNamesExA");
   function EnumResourceNamesExW(
      hModule_x : HMODULE;
      lpType : LPCWSTR;
      lpEnumFunc : ENUMRESNAMEPROCW;
      lParam_x : LONG_PTR;
      dwFlags : DWORD;
      LangId_x : LANGID
   ) return BOOL;
   pragma import (C,EnumResourceNamesExW,"EnumResourceNamesExW");
   function EnumResourceTypesExA(
      hModule_x : HMODULE;
      lpEnumFunc : ENUMRESTYPEPROCA;
      lParam_x : LONG_PTR;
      dwFlags : DWORD;
      LangId_x : LANGID
   ) return BOOL;
   pragma import (C,EnumResourceTypesExA,"EnumResourceTypesExA");
   function EnumResourceTypesExW(
      hModule_x : HMODULE;
      lpEnumFunc : ENUMRESTYPEPROCW;
      lParam_x : LONG_PTR;
      dwFlags : DWORD;
      LangId_x : LANGID
   ) return BOOL;
   pragma import (C,EnumResourceTypesExW,"EnumResourceTypesExW");
   function FindResourceW(
      hModule_x : HMODULE;
      lpName : LPCWSTR;
      lpType : LPCWSTR
   ) return HRSRC;
   pragma import (C,FindResourceW,"FindResourceW");
   function LoadLibraryA(
      lpLibFileName : LPCSTR
   ) return HMODULE;
   pragma import (C,LoadLibraryA,"LoadLibraryA");
   function LoadLibraryW(
      lpLibFileName : LPCWSTR
   ) return HMODULE;
   pragma import (C,LoadLibraryW,"LoadLibraryW");
   function EnumResourceNamesW(
      hModule_x : HMODULE;
      lpType : LPCWSTR;
      lpEnumFunc : ENUMRESNAMEPROCW;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumResourceNamesW,"EnumResourceNamesW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\securitybaseapi.h>
   function AccessCheck(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      PrivilegeSet : PPRIVILEGE_SET;
      PrivilegeSetLength : LPDWORD;
      GrantedAccess : LPDWORD;
      AccessStatus : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheck,"AccessCheck");
   function AccessCheckAndAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPWSTR;
      ObjectName : LPWSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      DesiredAccess : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccess : LPDWORD;
      AccessStatus : LPBOOL;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckAndAuditAlarmW,"AccessCheckAndAuditAlarmW");
   function AccessCheckByType(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      PrivilegeSet : PPRIVILEGE_SET;
      PrivilegeSetLength : LPDWORD;
      GrantedAccess : LPDWORD;
      AccessStatus : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByType,"AccessCheckByType");
   function AccessCheckByTypeResultList(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      PrivilegeSet : PPRIVILEGE_SET;
      PrivilegeSetLength : LPDWORD;
      GrantedAccessList : LPDWORD;
      AccessStatusList : LPDWORD
   ) return BOOL;
   pragma import (C,AccessCheckByTypeResultList,"AccessCheckByTypeResultList");
   function AccessCheckByTypeAndAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPCWSTR;
      ObjectName : LPCWSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      DesiredAccess : DWORD;
      AuditType : AUDIT_EVENT_TYPE;
      Flags : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccess : LPDWORD;
      AccessStatus : LPBOOL;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByTypeAndAuditAlarmW,"AccessCheckByTypeAndAuditAlarmW");
   function AccessCheckByTypeResultListAndAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPCWSTR;
      ObjectName : LPCWSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      DesiredAccess : DWORD;
      AuditType : AUDIT_EVENT_TYPE;
      Flags : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccessList : LPDWORD;
      AccessStatusList : LPDWORD;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByTypeResultListAndAuditAlarmW,"AccessCheckByTypeResultListAndAuditAlarmW");
   function AccessCheckByTypeResultListAndAuditAlarmByHandleW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      ClientToken : HANDLE;
      ObjectTypeName : LPCWSTR;
      ObjectName : LPCWSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      DesiredAccess : DWORD;
      AuditType : AUDIT_EVENT_TYPE;
      Flags : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccessList : LPDWORD;
      AccessStatusList : LPDWORD;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByTypeResultListAndAuditAlarmByHandleW,"AccessCheckByTypeResultListAndAuditAlarmByHandleW");
   function AddAccessAllowedAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AccessMask : DWORD;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddAccessAllowedAce,"AddAccessAllowedAce");
   function AddAccessAllowedAceEx(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddAccessAllowedAceEx,"AddAccessAllowedAceEx");
   function AddAccessAllowedObjectAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      ObjectTypeGuid : access GUID;
      InheritedObjectTypeGuid : access GUID;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddAccessAllowedObjectAce,"AddAccessAllowedObjectAce");
   function AddAccessDeniedAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AccessMask : DWORD;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddAccessDeniedAce,"AddAccessDeniedAce");
   function AddAccessDeniedAceEx(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddAccessDeniedAceEx,"AddAccessDeniedAceEx");
   function AddAccessDeniedObjectAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      ObjectTypeGuid : access GUID;
      InheritedObjectTypeGuid : access GUID;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddAccessDeniedObjectAce,"AddAccessDeniedObjectAce");
   function AddAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      dwStartingAceIndex : DWORD;
      pAceList : LPVOID;
      nAceListLength : DWORD
   ) return BOOL;
   pragma import (C,AddAce,"AddAce");
   function AddAuditAccessAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      dwAccessMask : DWORD;
      pSid_x : PSID;
      bAuditSuccess : BOOL;
      bAuditFailure : BOOL
   ) return BOOL;
   pragma import (C,AddAuditAccessAce,"AddAuditAccessAce");
   function AddAuditAccessAceEx(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      dwAccessMask : DWORD;
      pSid_x : PSID;
      bAuditSuccess : BOOL;
      bAuditFailure : BOOL
   ) return BOOL;
   pragma import (C,AddAuditAccessAceEx,"AddAuditAccessAceEx");
   function AddAuditAccessObjectAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      ObjectTypeGuid : access GUID;
      InheritedObjectTypeGuid : access GUID;
      pSid_x : PSID;
      bAuditSuccess : BOOL;
      bAuditFailure : BOOL
   ) return BOOL;
   pragma import (C,AddAuditAccessObjectAce,"AddAuditAccessObjectAce");
   function AddMandatoryAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      MandatoryPolicy : DWORD;
      pLabelSid : PSID
   ) return BOOL;
   pragma import (C,AddMandatoryAce,"AddMandatoryAce");
   function AddResourceAttributeAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      pSid_x : PSID;
      pAttributeInfo : PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
      pReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,AddResourceAttributeAce,"AddResourceAttributeAce");
   function AddScopedPolicyIDAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AccessMask : DWORD;
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,AddScopedPolicyIDAce,"AddScopedPolicyIDAce");
   function AdjustTokenGroups(
      TokenHandle : HANDLE;
      ResetToDefault : BOOL;
      NewState : PTOKEN_GROUPS;
      BufferLength : DWORD;
      PreviousState : PTOKEN_GROUPS;
      ReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,AdjustTokenGroups,"AdjustTokenGroups");
   function AdjustTokenPrivileges(
      TokenHandle : HANDLE;
      DisableAllPrivileges : BOOL;
      NewState : PTOKEN_PRIVILEGES;
      BufferLength : DWORD;
      PreviousState : PTOKEN_PRIVILEGES;
      ReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,AdjustTokenPrivileges,"AdjustTokenPrivileges");
   function AllocateAndInitializeSid(
      pIdentifierAuthority : PSID_IDENTIFIER_AUTHORITY;
      nSubAuthorityCount : BYTE;
      nSubAuthority0 : DWORD;
      nSubAuthority1 : DWORD;
      nSubAuthority2 : DWORD;
      nSubAuthority3 : DWORD;
      nSubAuthority4 : DWORD;
      nSubAuthority5 : DWORD;
      nSubAuthority6 : DWORD;
      nSubAuthority7 : DWORD;
      pSid_x : access PSID
   ) return BOOL;
   pragma import (C,AllocateAndInitializeSid,"AllocateAndInitializeSid");
   function AllocateLocallyUniqueId(
      Luid_x : PLUID
   ) return BOOL;
   pragma import (C,AllocateLocallyUniqueId,"AllocateLocallyUniqueId");
   function AreAllAccessesGranted(
      GrantedAccess : DWORD;
      DesiredAccess : DWORD
   ) return BOOL;
   pragma import (C,AreAllAccessesGranted,"AreAllAccessesGranted");
   function AreAnyAccessesGranted(
      GrantedAccess : DWORD;
      DesiredAccess : DWORD
   ) return BOOL;
   pragma import (C,AreAnyAccessesGranted,"AreAnyAccessesGranted");
   function CheckTokenMembership(
      TokenHandle : HANDLE;
      SidToCheck : PSID;
      IsMember : PBOOL
   ) return BOOL;
   pragma import (C,CheckTokenMembership,"CheckTokenMembership");
   function CheckTokenCapability(
      TokenHandle : HANDLE;
      CapabilitySidToCheck : PSID;
      HasCapability : PBOOL
   ) return BOOL;
   pragma import (C,CheckTokenCapability,"CheckTokenCapability");
   function GetAppContainerAce(
      Acl_x : PACL;
      StartingAceIndex : DWORD;
      AppContainerAce : access PVOID;
      AppContainerAceIndex : access DWORD
   ) return BOOL;
   pragma import (C,GetAppContainerAce,"GetAppContainerAce");
   function CheckTokenMembershipEx(
      TokenHandle : HANDLE;
      SidToCheck : PSID;
      Flags : DWORD;
      IsMember : PBOOL
   ) return BOOL;
   pragma import (C,CheckTokenMembershipEx,"CheckTokenMembershipEx");
   function ConvertToAutoInheritPrivateObjectSecurity(
      ParentDescriptor : PSECURITY_DESCRIPTOR;
      CurrentSecurityDescriptor : PSECURITY_DESCRIPTOR;
      NewSecurityDescriptor : access PSECURITY_DESCRIPTOR;
      ObjectType : access GUID;
      IsDirectoryObject : BOOLEAN;
      GenericMapping : PGENERIC_MAPPING
   ) return BOOL;
   pragma import (C,ConvertToAutoInheritPrivateObjectSecurity,"ConvertToAutoInheritPrivateObjectSecurity");
   function CopySid(
      nDestinationSidLength : DWORD;
      pDestinationSid : PSID;
      pSourceSid : PSID
   ) return BOOL;
   pragma import (C,CopySid,"CopySid");
   function CreatePrivateObjectSecurity(
      ParentDescriptor : PSECURITY_DESCRIPTOR;
      CreatorDescriptor : PSECURITY_DESCRIPTOR;
      NewDescriptor : access PSECURITY_DESCRIPTOR;
      IsDirectoryObject : BOOL;
      Token : HANDLE;
      GenericMapping : PGENERIC_MAPPING
   ) return BOOL;
   pragma import (C,CreatePrivateObjectSecurity,"CreatePrivateObjectSecurity");
   function CreatePrivateObjectSecurityEx(
      ParentDescriptor : PSECURITY_DESCRIPTOR;
      CreatorDescriptor : PSECURITY_DESCRIPTOR;
      NewDescriptor : access PSECURITY_DESCRIPTOR;
      ObjectType : access GUID;
      IsContainerObject : BOOL;
      AutoInheritFlags : ULONG;
      Token : HANDLE;
      GenericMapping : PGENERIC_MAPPING
   ) return BOOL;
   pragma import (C,CreatePrivateObjectSecurityEx,"CreatePrivateObjectSecurityEx");
   function CreatePrivateObjectSecurityWithMultipleInheritance(
      ParentDescriptor : PSECURITY_DESCRIPTOR;
      CreatorDescriptor : PSECURITY_DESCRIPTOR;
      NewDescriptor : access PSECURITY_DESCRIPTOR;
      ObjectTypes : access LPGUID;
      GuidCount : ULONG;
      IsContainerObject : BOOL;
      AutoInheritFlags : ULONG;
      Token : HANDLE;
      GenericMapping : PGENERIC_MAPPING
   ) return BOOL;
   pragma import (C,CreatePrivateObjectSecurityWithMultipleInheritance,"CreatePrivateObjectSecurityWithMultipleInheritance");
   function CreateRestrictedToken(
      ExistingTokenHandle : HANDLE;
      Flags : DWORD;
      DisableSidCount : DWORD;
      SidsToDisable : PSID_AND_ATTRIBUTES;
      DeletePrivilegeCount : DWORD;
      PrivilegesToDelete : PLUID_AND_ATTRIBUTES;
      RestrictedSidCount : DWORD;
      SidsToRestrict : PSID_AND_ATTRIBUTES;
      NewTokenHandle : PHANDLE
   ) return BOOL;
   pragma import (C,CreateRestrictedToken,"CreateRestrictedToken");
   function CreateWellKnownSid(
      WellKnownSidType : WELL_KNOWN_SID_TYPE;
      DomainSid : PSID;
      pSid_x : PSID;
      cbSid : access DWORD
   ) return BOOL;
   pragma import (C,CreateWellKnownSid,"CreateWellKnownSid");
   function EqualDomainSid(
      pSid1 : PSID;
      pSid2 : PSID;
      pfEqual : access BOOL
   ) return BOOL;
   pragma import (C,EqualDomainSid,"EqualDomainSid");
   function DeleteAce(
      pAcl_x : PACL;
      dwAceIndex : DWORD
   ) return BOOL;
   pragma import (C,DeleteAce,"DeleteAce");
   function DestroyPrivateObjectSecurity(
      ObjectDescriptor : access PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,DestroyPrivateObjectSecurity,"DestroyPrivateObjectSecurity");
   function DuplicateToken(
      ExistingTokenHandle : HANDLE;
      ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
      DuplicateTokenHandle : PHANDLE
   ) return BOOL;
   pragma import (C,DuplicateToken,"DuplicateToken");
   function DuplicateTokenEx(
      hExistingToken : HANDLE;
      dwDesiredAccess : DWORD;
      lpTokenAttributes : LPSECURITY_ATTRIBUTES;
      ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
      TokenType : TOKEN_TYPE;
      phNewToken : PHANDLE
   ) return BOOL;
   pragma import (C,DuplicateTokenEx,"DuplicateTokenEx");
   function EqualPrefixSid(
      pSid1 : PSID;
      pSid2 : PSID
   ) return BOOL;
   pragma import (C,EqualPrefixSid,"EqualPrefixSid");
   function EqualSid(
      pSid1 : PSID;
      pSid2 : PSID
   ) return BOOL;
   pragma import (C,EqualSid,"EqualSid");
   function FindFirstFreeAce(
      pAcl_x : PACL;
      pAce : access LPVOID
   ) return BOOL;
   pragma import (C,FindFirstFreeAce,"FindFirstFreeAce");
   procedure FreeSid(
      pSid_x : PSID
   );
   pragma import (C,FreeSid,"FreeSid");
   function GetAce(
      pAcl_x : PACL;
      dwAceIndex : DWORD;
      pAce : access LPVOID
   ) return BOOL;
   pragma import (C,GetAce,"GetAce");
   function GetAclInformation(
      pAcl_x : PACL;
      pAclInformation : LPVOID;
      nAclInformationLength : DWORD;
      dwAclInformationClass : ACL_INFORMATION_CLASS
   ) return BOOL;
   pragma import (C,GetAclInformation,"GetAclInformation");
   function GetFileSecurityW(
      lpFileName : LPCWSTR;
      RequestedInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      nLength : DWORD;
      lpnLengthNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetFileSecurityW,"GetFileSecurityW");
   function GetKernelObjectSecurity(
      Handle_x : HANDLE;
      RequestedInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      nLength : DWORD;
      lpnLengthNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetKernelObjectSecurity,"GetKernelObjectSecurity");
   function GetLengthSid(
      pSid_x : PSID
   ) return DWORD;
   pragma import (C,GetLengthSid,"GetLengthSid");
   function GetPrivateObjectSecurity(
      ObjectDescriptor : PSECURITY_DESCRIPTOR;
      SecurityInformation : SECURITY_INFORMATION;
      ResultantDescriptor : PSECURITY_DESCRIPTOR;
      DescriptorLength : DWORD;
      ReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,GetPrivateObjectSecurity,"GetPrivateObjectSecurity");
   function GetSecurityDescriptorControl(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pControl : PSECURITY_DESCRIPTOR_CONTROL;
      lpdwRevision : LPDWORD
   ) return BOOL;
   pragma import (C,GetSecurityDescriptorControl,"GetSecurityDescriptorControl");
   function GetSecurityDescriptorDacl(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      lpbDaclPresent : LPBOOL;
      pDacl : access PACL;
      lpbDaclDefaulted : LPBOOL
   ) return BOOL;
   pragma import (C,GetSecurityDescriptorDacl,"GetSecurityDescriptorDacl");
   function GetSecurityDescriptorGroup(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pGroup : access PSID;
      lpbGroupDefaulted : LPBOOL
   ) return BOOL;
   pragma import (C,GetSecurityDescriptorGroup,"GetSecurityDescriptorGroup");
   function GetSecurityDescriptorLength(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return DWORD;
   pragma import (C,GetSecurityDescriptorLength,"GetSecurityDescriptorLength");
   function GetSecurityDescriptorOwner(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pOwner : access PSID;
      lpbOwnerDefaulted : LPBOOL
   ) return BOOL;
   pragma import (C,GetSecurityDescriptorOwner,"GetSecurityDescriptorOwner");
   function GetSecurityDescriptorRMControl(
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      RMControl : PUCHAR
   ) return DWORD;
   pragma import (C,GetSecurityDescriptorRMControl,"GetSecurityDescriptorRMControl");
   function GetSecurityDescriptorSacl(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      lpbSaclPresent : LPBOOL;
      pSacl : access PACL;
      lpbSaclDefaulted : LPBOOL
   ) return BOOL;
   pragma import (C,GetSecurityDescriptorSacl,"GetSecurityDescriptorSacl");
   function GetSidIdentifierAuthority(
      pSid_x : PSID
   ) return PSID_IDENTIFIER_AUTHORITY;
   pragma import (C,GetSidIdentifierAuthority,"GetSidIdentifierAuthority");
   function GetSidLengthRequired(
      nSubAuthorityCount : UCHAR
   ) return DWORD;
   pragma import (C,GetSidLengthRequired,"GetSidLengthRequired");
   function GetSidSubAuthority(
      pSid_x : PSID;
      nSubAuthority : DWORD
   ) return PDWORD;
   pragma import (C,GetSidSubAuthority,"GetSidSubAuthority");
   function GetSidSubAuthorityCount(
      pSid_x : PSID
   ) return PUCHAR;
   pragma import (C,GetSidSubAuthorityCount,"GetSidSubAuthorityCount");
   function GetTokenInformation(
      TokenHandle : HANDLE;
      TokenInformationClass : TOKEN_INFORMATION_CLASS;
      TokenInformation : LPVOID;
      TokenInformationLength : DWORD;
      ReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,GetTokenInformation,"GetTokenInformation");
   function GetWindowsAccountDomainSid(
      pSid_x : PSID;
      pDomainSid : PSID;
      cbDomainSid : access DWORD
   ) return BOOL;
   pragma import (C,GetWindowsAccountDomainSid,"GetWindowsAccountDomainSid");
   function ImpersonateAnonymousToken(
      ThreadHandle : HANDLE
   ) return BOOL;
   pragma import (C,ImpersonateAnonymousToken,"ImpersonateAnonymousToken");
   function ImpersonateLoggedOnUser(
      hToken : HANDLE
   ) return BOOL;
   pragma import (C,ImpersonateLoggedOnUser,"ImpersonateLoggedOnUser");
   function ImpersonateSelf(
      ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL
   ) return BOOL;
   pragma import (C,ImpersonateSelf,"ImpersonateSelf");
   function InitializeAcl(
      pAcl_x : PACL;
      nAclLength : DWORD;
      dwAclRevision : DWORD
   ) return BOOL;
   pragma import (C,InitializeAcl,"InitializeAcl");
   function InitializeSecurityDescriptor(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      dwRevision : DWORD
   ) return BOOL;
   pragma import (C,InitializeSecurityDescriptor,"InitializeSecurityDescriptor");
   function InitializeSid(
      Sid_x : PSID;
      pIdentifierAuthority : PSID_IDENTIFIER_AUTHORITY;
      nSubAuthorityCount : BYTE
   ) return BOOL;
   pragma import (C,InitializeSid,"InitializeSid");
   function IsTokenRestricted(
      TokenHandle : HANDLE
   ) return BOOL;
   pragma import (C,IsTokenRestricted,"IsTokenRestricted");
   function IsValidAcl(
      pAcl_x : PACL
   ) return BOOL;
   pragma import (C,IsValidAcl,"IsValidAcl");
   function IsValidSecurityDescriptor(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,IsValidSecurityDescriptor,"IsValidSecurityDescriptor");
   function IsValidSid(
      pSid_x : PSID
   ) return BOOL;
   pragma import (C,IsValidSid,"IsValidSid");
   function IsWellKnownSid(
      pSid_x : PSID;
      WellKnownSidType : WELL_KNOWN_SID_TYPE
   ) return BOOL;
   pragma import (C,IsWellKnownSid,"IsWellKnownSid");
   function MakeAbsoluteSD(
      pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pAbsoluteSecurityDescriptor : PSECURITY_DESCRIPTOR;
      lpdwAbsoluteSecurityDescriptorSize : LPDWORD;
      pDacl : PACL;
      lpdwDaclSize : LPDWORD;
      pSacl : PACL;
      lpdwSaclSize : LPDWORD;
      pOwner : PSID;
      lpdwOwnerSize : LPDWORD;
      pPrimaryGroup : PSID;
      lpdwPrimaryGroupSize : LPDWORD
   ) return BOOL;
   pragma import (C,MakeAbsoluteSD,"MakeAbsoluteSD");
   function MakeSelfRelativeSD(
      pAbsoluteSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR;
      lpdwBufferLength : LPDWORD
   ) return BOOL;
   pragma import (C,MakeSelfRelativeSD,"MakeSelfRelativeSD");
   procedure MapGenericMask(
      AccessMask : PDWORD;
      GenericMapping : PGENERIC_MAPPING
   );
   pragma import (C,MapGenericMask,"MapGenericMask");
   function ObjectCloseAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      GenerateOnClose : BOOL
   ) return BOOL;
   pragma import (C,ObjectCloseAuditAlarmW,"ObjectCloseAuditAlarmW");
   function ObjectDeleteAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      GenerateOnClose : BOOL
   ) return BOOL;
   pragma import (C,ObjectDeleteAuditAlarmW,"ObjectDeleteAuditAlarmW");
   function ObjectOpenAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPWSTR;
      ObjectName : LPWSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      GrantedAccess : DWORD;
      Privileges : PPRIVILEGE_SET;
      ObjectCreation : BOOL;
      AccessGranted : BOOL;
      GenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,ObjectOpenAuditAlarmW,"ObjectOpenAuditAlarmW");
   function ObjectPrivilegeAuditAlarmW(
      SubsystemName : LPCWSTR;
      HandleId : LPVOID;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      Privileges : PPRIVILEGE_SET;
      AccessGranted : BOOL
   ) return BOOL;
   pragma import (C,ObjectPrivilegeAuditAlarmW,"ObjectPrivilegeAuditAlarmW");
   function PrivilegeCheck(
      ClientToken : HANDLE;
      RequiredPrivileges : PPRIVILEGE_SET;
      pfResult : LPBOOL
   ) return BOOL;
   pragma import (C,PrivilegeCheck,"PrivilegeCheck");
   function PrivilegedServiceAuditAlarmW(
      SubsystemName : LPCWSTR;
      ServiceName : LPCWSTR;
      ClientToken : HANDLE;
      Privileges : PPRIVILEGE_SET;
      AccessGranted : BOOL
   ) return BOOL;
   pragma import (C,PrivilegedServiceAuditAlarmW,"PrivilegedServiceAuditAlarmW");
   procedure QuerySecurityAccessMask(
      SecurityInformation : SECURITY_INFORMATION;
      DesiredAccess : LPDWORD
   );
   pragma import (C,QuerySecurityAccessMask,"QuerySecurityAccessMask");
   function RevertToSelf return BOOL;
   pragma import (C,RevertToSelf,"RevertToSelf");
   function SetAclInformation(
      pAcl_x : PACL;
      pAclInformation : LPVOID;
      nAclInformationLength : DWORD;
      dwAclInformationClass : ACL_INFORMATION_CLASS
   ) return BOOL;
   pragma import (C,SetAclInformation,"SetAclInformation");
   function SetFileSecurityW(
      lpFileName : LPCWSTR;
      SecurityInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,SetFileSecurityW,"SetFileSecurityW");
   function SetKernelObjectSecurity(
      Handle_x : HANDLE;
      SecurityInformation : SECURITY_INFORMATION;
      SecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,SetKernelObjectSecurity,"SetKernelObjectSecurity");
   function SetPrivateObjectSecurity(
      SecurityInformation : SECURITY_INFORMATION;
      ModificationDescriptor : PSECURITY_DESCRIPTOR;
      ObjectsSecurityDescriptor : access PSECURITY_DESCRIPTOR;
      GenericMapping : PGENERIC_MAPPING;
      Token : HANDLE
   ) return BOOL;
   pragma import (C,SetPrivateObjectSecurity,"SetPrivateObjectSecurity");
   function SetPrivateObjectSecurityEx(
      SecurityInformation : SECURITY_INFORMATION;
      ModificationDescriptor : PSECURITY_DESCRIPTOR;
      ObjectsSecurityDescriptor : access PSECURITY_DESCRIPTOR;
      AutoInheritFlags : ULONG;
      GenericMapping : PGENERIC_MAPPING;
      Token : HANDLE
   ) return BOOL;
   pragma import (C,SetPrivateObjectSecurityEx,"SetPrivateObjectSecurityEx");
   procedure SetSecurityAccessMask(
      SecurityInformation : SECURITY_INFORMATION;
      DesiredAccess : LPDWORD
   );
   pragma import (C,SetSecurityAccessMask,"SetSecurityAccessMask");
   function SetSecurityDescriptorControl(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      ControlBitsOfInterest : SECURITY_DESCRIPTOR_CONTROL;
      ControlBitsToSet : SECURITY_DESCRIPTOR_CONTROL
   ) return BOOL;
   pragma import (C,SetSecurityDescriptorControl,"SetSecurityDescriptorControl");
   function SetSecurityDescriptorDacl(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      bDaclPresent : BOOL;
      pDacl : PACL;
      bDaclDefaulted : BOOL
   ) return BOOL;
   pragma import (C,SetSecurityDescriptorDacl,"SetSecurityDescriptorDacl");
   function SetSecurityDescriptorGroup(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pGroup : PSID;
      bGroupDefaulted : BOOL
   ) return BOOL;
   pragma import (C,SetSecurityDescriptorGroup,"SetSecurityDescriptorGroup");
   function SetSecurityDescriptorOwner(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      pOwner : PSID;
      bOwnerDefaulted : BOOL
   ) return BOOL;
   pragma import (C,SetSecurityDescriptorOwner,"SetSecurityDescriptorOwner");
   function SetSecurityDescriptorRMControl(
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      RMControl : PUCHAR
   ) return DWORD;
   pragma import (C,SetSecurityDescriptorRMControl,"SetSecurityDescriptorRMControl");
   function SetSecurityDescriptorSacl(
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      bSaclPresent : BOOL;
      pSacl : PACL;
      bSaclDefaulted : BOOL
   ) return BOOL;
   pragma import (C,SetSecurityDescriptorSacl,"SetSecurityDescriptorSacl");
   function SetTokenInformation(
      TokenHandle : HANDLE;
      TokenInformationClass : TOKEN_INFORMATION_CLASS;
      TokenInformation : LPVOID;
      TokenInformationLength : DWORD
   ) return BOOL;
   pragma import (C,SetTokenInformation,"SetTokenInformation");
   function SetCachedSigningLevel(
      SourceFiles : PHANDLE;
      SourceFileCount : ULONG;
      Flags : ULONG;
      TargetFile : HANDLE
   ) return BOOL;
   pragma import (C,SetCachedSigningLevel,"SetCachedSigningLevel");
   function GetCachedSigningLevel(
      File : HANDLE;
      Flags : PULONG;
      SigningLevel : PULONG;
      Thumbprint : PUCHAR;
      ThumbprintSize : PULONG;
      ThumbprintAlgorithm : PULONG
   ) return BOOL;
   pragma import (C,GetCachedSigningLevel,"GetCachedSigningLevel");
   function CveEventWrite(
      CveId : PCWSTR;
      AdditionalDetails : PCWSTR
   ) return LONG;
   pragma import (C,CveEventWrite,"CveEventWrite");
   type PSID_Ptr is access all PSID; -- Auto Generated Dependancy
   function DeriveCapabilitySidsFromName(
      CapName : LPCWSTR;
      CapabilityGroupSids : access PSID_Ptr;
      CapabilityGroupSidCount : access DWORD;
      CapabilitySids : access PSID_Ptr;
      CapabilitySidCount : access DWORD
   ) return BOOL;
   pragma import (C,DeriveCapabilitySidsFromName,"DeriveCapabilitySidsFromName");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\namespaceapi.h>
   function CreatePrivateNamespaceW(
      lpPrivateNamespaceAttributes : LPSECURITY_ATTRIBUTES;
      lpBoundaryDescriptor : LPVOID;
      lpAliasPrefix : LPCWSTR
   ) return HANDLE;
   pragma import (C,CreatePrivateNamespaceW,"CreatePrivateNamespaceW");
   function OpenPrivateNamespaceW(
      lpBoundaryDescriptor : LPVOID;
      lpAliasPrefix : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenPrivateNamespaceW,"OpenPrivateNamespaceW");
   function ClosePrivateNamespace(
      Handle_x : HANDLE;
      Flags : ULONG
   ) return BOOLEAN;
   pragma import (C,ClosePrivateNamespace,"ClosePrivateNamespace");
   function CreateBoundaryDescriptorW(
      Name : LPCWSTR;
      Flags : ULONG
   ) return HANDLE;
   pragma import (C,CreateBoundaryDescriptorW,"CreateBoundaryDescriptorW");
   function AddSIDToBoundaryDescriptor(
      BoundaryDescriptor : access HANDLE;
      RequiredSid : PSID
   ) return BOOL;
   pragma import (C,AddSIDToBoundaryDescriptor,"AddSIDToBoundaryDescriptor");
   procedure DeleteBoundaryDescriptor(
      BoundaryDescriptor : HANDLE
   );
   pragma import (C,DeleteBoundaryDescriptor,"DeleteBoundaryDescriptor");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\systemtopologyapi.h>
   function GetNumaHighestNodeNumber(
      HighestNodeNumber : PULONG
   ) return BOOL;
   pragma import (C,GetNumaHighestNodeNumber,"GetNumaHighestNodeNumber");
   function GetNumaNodeProcessorMaskEx(
      Node : USHORT;
      ProcessorMask : PGROUP_AFFINITY
   ) return BOOL;
   pragma import (C,GetNumaNodeProcessorMaskEx,"GetNumaNodeProcessorMaskEx");
   function GetNumaProximityNodeEx(
      ProximityId : ULONG;
      NodeNumber : PUSHORT
   ) return BOOL;
   pragma import (C,GetNumaProximityNodeEx,"GetNumaProximityNodeEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\processtopologyapi.h>
   function GetProcessGroupAffinity(
      hProcess : HANDLE;
      GroupCount : PUSHORT;
      GroupArray : PUSHORT
   ) return BOOL;
   pragma import (C,GetProcessGroupAffinity,"GetProcessGroupAffinity");
   function GetThreadGroupAffinity(
      hThread : HANDLE;
      GroupAffinity : PGROUP_AFFINITY
   ) return BOOL;
   pragma import (C,GetThreadGroupAffinity,"GetThreadGroupAffinity");
   function SetThreadGroupAffinity(
      hThread : HANDLE;
      GroupAffinity : access constant GROUP_AFFINITY;
      PreviousGroupAffinity : PGROUP_AFFINITY
   ) return BOOL;
   pragma import (C,SetThreadGroupAffinity,"SetThreadGroupAffinity");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\securityappcontainer.h>
   function GetAppContainerNamedObjectPath(
      Token : HANDLE;
      AppContainerSid : PSID;
      ObjectPathLength : ULONG;
      ObjectPath : LPWSTR;
      ReturnLength : PULONG
   ) return BOOL;
   pragma import (C,GetAppContainerNamedObjectPath,"GetAppContainerNamedObjectPath");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\realtimeapiset.h>
   function QueryThreadCycleTime(
      ThreadHandle : HANDLE;
      CycleTime : PULONG64
   ) return BOOL;
   pragma import (C,QueryThreadCycleTime,"QueryThreadCycleTime");
   function QueryProcessCycleTime(
      ProcessHandle : HANDLE;
      CycleTime : PULONG64
   ) return BOOL;
   pragma import (C,QueryProcessCycleTime,"QueryProcessCycleTime");
   function QueryIdleProcessorCycleTime(
      BufferLength : PULONG;
      ProcessorIdleCycleTime : PULONG64
   ) return BOOL;
   pragma import (C,QueryIdleProcessorCycleTime,"QueryIdleProcessorCycleTime");
   function QueryIdleProcessorCycleTimeEx(
      Group : USHORT;
      BufferLength : PULONG;
      ProcessorIdleCycleTime : PULONG64
   ) return BOOL;
   pragma import (C,QueryIdleProcessorCycleTimeEx,"QueryIdleProcessorCycleTimeEx");
   procedure QueryInterruptTimePrecise(
      lpInterruptTimePrecise : PULONGLONG
   );
   pragma import (C,QueryInterruptTimePrecise,"QueryInterruptTimePrecise");
   procedure QueryUnbiasedInterruptTimePrecise(
      lpUnbiasedInterruptTimePrecise : PULONGLONG
   );
   pragma import (C,QueryUnbiasedInterruptTimePrecise,"QueryUnbiasedInterruptTimePrecise");
   procedure QueryInterruptTime(
      lpInterruptTime : PULONGLONG
   );
   pragma import (C,QueryInterruptTime,"QueryInterruptTime");
   function QueryUnbiasedInterruptTime(
      UnbiasedTime : PULONGLONG
   ) return BOOL;
   pragma import (C,QueryUnbiasedInterruptTime,"QueryUnbiasedInterruptTime");
   function QueryAuxiliaryCounterFrequency(
      lpAuxiliaryCounterFrequency : PULONGLONG
   ) return HRESULT;
   pragma import (C,QueryAuxiliaryCounterFrequency,"QueryAuxiliaryCounterFrequency");
   function ConvertAuxiliaryCounterToPerformanceCounter(
      ullAuxiliaryCounterValue : ULONGLONG;
      lpPerformanceCounterValue : PULONGLONG;
      lpConversionError : PULONGLONG
   ) return HRESULT;
   pragma import (C,ConvertAuxiliaryCounterToPerformanceCounter,"ConvertAuxiliaryCounterToPerformanceCounter");
   function ConvertPerformanceCounterToAuxiliaryCounter(
      ullPerformanceCounterValue : ULONGLONG;
      lpAuxiliaryCounterValue : PULONGLONG;
      lpConversionError : PULONGLONG
   ) return HRESULT;
   pragma import (C,ConvertPerformanceCounterToAuxiliaryCounter,"ConvertPerformanceCounterToAuxiliaryCounter");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winbase.h>
   subtype PFIBER_START_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID)
   subtype LPFIBER_START_ROUTINE is PFIBER_START_ROUTINE; -- CXType_Typedef
   subtype PFIBER_CALLOUT_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LPVOID (LPVOID)
   subtype LPLDT_ENTRY is LPVOID; -- CXType_Typedef
   type COMMPROP_x is record
      wPacketLength : WORD;
      wPacketVersion : WORD;
      dwServiceMask : DWORD;
      dwReserved1 : DWORD;
      dwMaxTxQueue : DWORD;
      dwMaxRxQueue : DWORD;
      dwMaxBaud : DWORD;
      dwProvSubType : DWORD;
      dwProvCapabilities : DWORD;
      dwSettableParams : DWORD;
      dwSettableBaud : DWORD;
      wSettableData : WORD;
      wSettableStopParity : WORD;
      dwCurrentTxQueue : DWORD;
      dwCurrentRxQueue : DWORD;
      dwProvSpec1 : DWORD;
      dwProvSpec2 : DWORD;
      wcProvChar : Void;
   end record;
   subtype COMMPROP is COMMPROP_x; -- CXType_Elaborated
   type LPCOMMPROP is access COMMPROP_x; -- CXType_Pointer - CXType_Elaborated
   type COMSTAT_x is record
      fCtsHold : DWORD;
      fDsrHold : DWORD;
      fRlsdHold : DWORD;
      fXoffHold : DWORD;
      fXoffSent : DWORD;
      fEof : DWORD;
      fTxim : DWORD;
      fReserved : DWORD;
      cbInQue : DWORD;
      cbOutQue : DWORD;
   end record;
   subtype COMSTAT is COMSTAT_x; -- CXType_Elaborated
   type LPCOMSTAT is access COMSTAT_x; -- CXType_Pointer - CXType_Elaborated
   type DCB_x is record
      DCBlength : DWORD;
      BaudRate : DWORD;
      fBinary : DWORD;
      fParity : DWORD;
      fOutxCtsFlow : DWORD;
      fOutxDsrFlow : DWORD;
      fDtrControl : DWORD;
      fDsrSensitivity : DWORD;
      fTXContinueOnXoff : DWORD;
      fOutX : DWORD;
      fInX : DWORD;
      fErrorChar : DWORD;
      fNull : DWORD;
      fRtsControl : DWORD;
      fAbortOnError : DWORD;
      fDummy2 : DWORD;
      wReserved : WORD;
      XonLim : WORD;
      XoffLim : WORD;
      ByteSize : BYTE;
      Parity : BYTE;
      StopBits : BYTE;
      XonChar : Character;
      XoffChar : Character;
      ErrorChar : Character;
      EofChar : Character;
      EvtChar : Character;
      wReserved1 : WORD;
   end record;
   subtype DCB is DCB_x; -- CXType_Elaborated
   type LPDCB is access DCB_x; -- CXType_Pointer - CXType_Elaborated
   type COMMTIMEOUTS_x is record
      ReadIntervalTimeout : DWORD;
      ReadTotalTimeoutMultiplier : DWORD;
      ReadTotalTimeoutConstant : DWORD;
      WriteTotalTimeoutMultiplier : DWORD;
      WriteTotalTimeoutConstant : DWORD;
   end record;
   subtype COMMTIMEOUTS is COMMTIMEOUTS_x; -- CXType_Elaborated
   type LPCOMMTIMEOUTS is access COMMTIMEOUTS_x; -- CXType_Pointer - CXType_Elaborated
   type COMMCONFIG_x is record
      dwSize : DWORD;
      wVersion : WORD;
      wReserved : WORD;
      dcb_x : DCB;
      dwProviderSubType : DWORD;
      dwProviderOffset : DWORD;
      dwProviderSize : DWORD;
      wcProviderData : Void;
   end record;
   subtype COMMCONFIG is COMMCONFIG_x; -- CXType_Elaborated
   type LPCOMMCONFIG is access COMMCONFIG_x; -- CXType_Pointer - CXType_Elaborated
   type MEMORYSTATUS_x is record
      dwLength : DWORD;
      dwMemoryLoad : DWORD;
      dwTotalPhys : SIZE_T;
      dwAvailPhys : SIZE_T;
      dwTotalPageFile : SIZE_T;
      dwAvailPageFile : SIZE_T;
      dwTotalVirtual : SIZE_T;
      dwAvailVirtual : SIZE_T;
   end record;
   subtype MEMORYSTATUS is MEMORYSTATUS_x; -- CXType_Elaborated
   type LPMEMORYSTATUS is access MEMORYSTATUS_x; -- CXType_Pointer - CXType_Elaborated
   type JIT_DEBUG_INFO_x is record
      dwSize : DWORD;
      dwProcessorArchitecture : DWORD;
      dwThreadID : DWORD;
      dwReserved0 : DWORD;
      lpExceptionAddress : ULONG64;
      lpExceptionRecord : ULONG64;
      lpContextRecord : ULONG64;
   end record;
   subtype JIT_DEBUG_INFO is JIT_DEBUG_INFO_x; -- CXType_Elaborated
   type LPJIT_DEBUG_INFO is access JIT_DEBUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype JIT_DEBUG_INFO32 is JIT_DEBUG_INFO; -- CXType_Typedef
   type LPJIT_DEBUG_INFO32 is access JIT_DEBUG_INFO; -- CXType_Pointer - CXType_Typedef
   subtype JIT_DEBUG_INFO64 is JIT_DEBUG_INFO; -- CXType_Typedef
   type LPJIT_DEBUG_INFO64 is access JIT_DEBUG_INFO; -- CXType_Pointer - CXType_Typedef
   subtype LPEXCEPTION_RECORD is PEXCEPTION_RECORD; -- CXType_Typedef
   subtype LPEXCEPTION_POINTERS is PEXCEPTION_POINTERS; -- CXType_Typedef
   type OFSTRUCT_x is record
      cBytes : BYTE;
      fFixedDisk : BYTE;
      nErrCode : WORD;
      Reserved1 : WORD;
      Reserved2 : WORD;
      szPathName : Void;
   end record;
   subtype OFSTRUCT is OFSTRUCT_x; -- CXType_Elaborated
   type LPOFSTRUCT is access OFSTRUCT_x; -- CXType_Pointer - CXType_Elaborated
   type POFSTRUCT is access OFSTRUCT_x; -- CXType_Pointer - CXType_Elaborated
   function WinMain(
      hInstance_x : HINSTANCE;
      hPrevInstance : HINSTANCE;
      lpCmdLine : LPSTR;
      nShowCmd : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,WinMain,"WinMain");
   function wWinMain(
      hInstance_x : HINSTANCE;
      hPrevInstance : HINSTANCE;
      lpCmdLine : LPWSTR;
      nShowCmd : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,wWinMain,"wWinMain");
   function GlobalAlloc(
      uFlags : UINT;
      dwBytes : SIZE_T
   ) return HGLOBAL;
   pragma import (C,GlobalAlloc,"GlobalAlloc");
   function GlobalReAlloc(
      hMem : HGLOBAL;
      dwBytes : SIZE_T;
      uFlags : UINT
   ) return HGLOBAL;
   pragma import (C,GlobalReAlloc,"GlobalReAlloc");
   function GlobalSize(
      hMem : HGLOBAL
   ) return SIZE_T;
   pragma import (C,GlobalSize,"GlobalSize");
   function GlobalUnlock(
      hMem : HGLOBAL
   ) return BOOL;
   pragma import (C,GlobalUnlock,"GlobalUnlock");
   procedure GlobalLock(
      hMem : HGLOBAL
   );
   pragma import (C,GlobalLock,"GlobalLock");
   function GlobalFlags(
      hMem : HGLOBAL
   ) return UINT;
   pragma import (C,GlobalFlags,"GlobalFlags");
   function GlobalHandle_x(
      pMem : LPCVOID
   ) return HGLOBAL;
   pragma import (C,GlobalHandle_x,"GlobalHandle");
   function GlobalFree(
      hMem : HGLOBAL
   ) return HGLOBAL;
   pragma import (C,GlobalFree,"GlobalFree");
   function GlobalCompact(
      dwMinFree : DWORD
   ) return SIZE_T;
   pragma import (C,GlobalCompact,"GlobalCompact");
   procedure GlobalFix(
      hMem : HGLOBAL
   );
   pragma import (C,GlobalFix,"GlobalFix");
   procedure GlobalUnfix(
      hMem : HGLOBAL
   );
   pragma import (C,GlobalUnfix,"GlobalUnfix");
   procedure GlobalWire(
      hMem : HGLOBAL
   );
   pragma import (C,GlobalWire,"GlobalWire");
   function GlobalUnWire(
      hMem : HGLOBAL
   ) return BOOL;
   pragma import (C,GlobalUnWire,"GlobalUnWire");
   procedure GlobalMemoryStatus(
      lpBuffer : LPMEMORYSTATUS
   );
   pragma import (C,GlobalMemoryStatus,"GlobalMemoryStatus");
   function LocalAlloc(
      uFlags : UINT;
      uBytes : SIZE_T
   ) return HLOCAL;
   pragma import (C,LocalAlloc,"LocalAlloc");
   function LocalReAlloc(
      hMem : HLOCAL;
      uBytes : SIZE_T;
      uFlags : UINT
   ) return HLOCAL;
   pragma import (C,LocalReAlloc,"LocalReAlloc");
   procedure LocalLock(
      hMem : HLOCAL
   );
   pragma import (C,LocalLock,"LocalLock");
   function LocalHandle_x(
      pMem : LPCVOID
   ) return HLOCAL;
   pragma import (C,LocalHandle_x,"LocalHandle");
   function LocalUnlock(
      hMem : HLOCAL
   ) return BOOL;
   pragma import (C,LocalUnlock,"LocalUnlock");
   function LocalSize(
      hMem : HLOCAL
   ) return SIZE_T;
   pragma import (C,LocalSize,"LocalSize");
   function LocalFlags(
      hMem : HLOCAL
   ) return UINT;
   pragma import (C,LocalFlags,"LocalFlags");
   function LocalFree(
      hMem : HLOCAL
   ) return HLOCAL;
   pragma import (C,LocalFree,"LocalFree");
   function LocalShrink(
      hMem : HLOCAL;
      cbNewSize : UINT
   ) return SIZE_T;
   pragma import (C,LocalShrink,"LocalShrink");
   function LocalCompact(
      uMinFree : UINT
   ) return SIZE_T;
   pragma import (C,LocalCompact,"LocalCompact");
   function GetBinaryTypeA(
      lpApplicationName : LPCSTR;
      lpBinaryType : LPDWORD
   ) return BOOL;
   pragma import (C,GetBinaryTypeA,"GetBinaryTypeA");
   function GetBinaryTypeW(
      lpApplicationName : LPCWSTR;
      lpBinaryType : LPDWORD
   ) return BOOL;
   pragma import (C,GetBinaryTypeW,"GetBinaryTypeW");
   function GetShortPathNameA(
      lpszLongPath : LPCSTR;
      lpszShortPath : LPSTR;
      cchBuffer : DWORD
   ) return DWORD;
   pragma import (C,GetShortPathNameA,"GetShortPathNameA");
   function GetLongPathNameTransactedA(
      lpszShortPath : LPCSTR;
      lpszLongPath : LPSTR;
      cchBuffer : DWORD;
      hTransaction : HANDLE
   ) return DWORD;
   pragma import (C,GetLongPathNameTransactedA,"GetLongPathNameTransactedA");
   function GetLongPathNameTransactedW(
      lpszShortPath : LPCWSTR;
      lpszLongPath : LPWSTR;
      cchBuffer : DWORD;
      hTransaction : HANDLE
   ) return DWORD;
   pragma import (C,GetLongPathNameTransactedW,"GetLongPathNameTransactedW");
   function GetProcessAffinityMask(
      hProcess : HANDLE;
      lpProcessAffinityMask : PDWORD_PTR;
      lpSystemAffinityMask : PDWORD_PTR
   ) return BOOL;
   pragma import (C,GetProcessAffinityMask,"GetProcessAffinityMask");
   function SetProcessAffinityMask(
      hProcess : HANDLE;
      dwProcessAffinityMask : DWORD_PTR
   ) return BOOL;
   pragma import (C,SetProcessAffinityMask,"SetProcessAffinityMask");
   function GetProcessIoCounters(
      hProcess : HANDLE;
      lpIoCounters : PIO_COUNTERS
   ) return BOOL;
   pragma import (C,GetProcessIoCounters,"GetProcessIoCounters");
   function GetProcessWorkingSetSize(
      hProcess : HANDLE;
      lpMinimumWorkingSetSize : PSIZE_T;
      lpMaximumWorkingSetSize : PSIZE_T
   ) return BOOL;
   pragma import (C,GetProcessWorkingSetSize,"GetProcessWorkingSetSize");
   function SetProcessWorkingSetSize(
      hProcess : HANDLE;
      dwMinimumWorkingSetSize : SIZE_T;
      dwMaximumWorkingSetSize : SIZE_T
   ) return BOOL;
   pragma import (C,SetProcessWorkingSetSize,"SetProcessWorkingSetSize");
   procedure FatalExit(
      ExitCode : Interfaces.C.Int
   );
   pragma import (C,FatalExit,"FatalExit");
   function SetEnvironmentStringsA(
      NewEnvironment : LPCH
   ) return BOOL;
   pragma import (C,SetEnvironmentStringsA,"SetEnvironmentStringsA");
   procedure SwitchToFiber(
      lpFiber : LPVOID
   );
   pragma import (C,SwitchToFiber,"SwitchToFiber");
   procedure DeleteFiber(
      lpFiber : LPVOID
   );
   pragma import (C,DeleteFiber,"DeleteFiber");
   function ConvertFiberToThread return BOOL;
   pragma import (C,ConvertFiberToThread,"ConvertFiberToThread");
   procedure CreateFiberEx(
      dwStackCommitSize : SIZE_T;
      dwStackReserveSize : SIZE_T;
      dwFlags : DWORD;
      lpStartAddress : LPFIBER_START_ROUTINE;
      lpParameter : LPVOID
   );
   pragma import (C,CreateFiberEx,"CreateFiberEx");
   procedure ConvertThreadToFiberEx(
      lpParameter : LPVOID;
      dwFlags : DWORD
   );
   pragma import (C,ConvertThreadToFiberEx,"ConvertThreadToFiberEx");
   procedure CreateFiber(
      dwStackSize : SIZE_T;
      lpStartAddress : LPFIBER_START_ROUTINE;
      lpParameter : LPVOID
   );
   pragma import (C,CreateFiber,"CreateFiber");
   procedure ConvertThreadToFiber(
      lpParameter : LPVOID
   );
   pragma import (C,ConvertThreadToFiber,"ConvertThreadToFiber");
   type PUMS_CONTEXT is access Void; -- CXType_Pointer - CXType_Void
   type PUMS_COMPLETION_LIST is access Void; -- CXType_Pointer - CXType_Void
   subtype UMS_THREAD_INFO_CLASS is RTL_UMS_THREAD_INFO_CLASS_x; -- CXType_Elaborated
   type PUMS_THREAD_INFO_CLASS is access RTL_UMS_THREAD_INFO_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   subtype UMS_SCHEDULER_REASON is RTL_UMS_SCHEDULER_REASON_x; -- CXType_Elaborated
   subtype PUMS_SCHEDULER_ENTRY_POINT is PRTL_UMS_SCHEDULER_ENTRY_POINT; -- CXType_Typedef
   type UMS_SCHEDULER_STARTUP_INFO_x is record
      UmsVersion : ULONG;
      CompletionList : PUMS_COMPLETION_LIST;
      SchedulerProc : PUMS_SCHEDULER_ENTRY_POINT;
      SchedulerParam : PVOID;
   end record;
   subtype UMS_SCHEDULER_STARTUP_INFO is UMS_SCHEDULER_STARTUP_INFO_x; -- CXType_Elaborated
   type PUMS_SCHEDULER_STARTUP_INFO is access UMS_SCHEDULER_STARTUP_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type UMS_SYSTEM_THREAD_INFORMATION_x is record
      UmsVersion : ULONG;
   end record;
   subtype UMS_SYSTEM_THREAD_INFORMATION is UMS_SYSTEM_THREAD_INFORMATION_x; -- CXType_Elaborated
   type PUMS_SYSTEM_THREAD_INFORMATION is access UMS_SYSTEM_THREAD_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   function CreateUmsCompletionList(
      UmsCompletionList : access PUMS_COMPLETION_LIST
   ) return BOOL;
   pragma import (C,CreateUmsCompletionList,"CreateUmsCompletionList");
   function DequeueUmsCompletionListItems(
      UmsCompletionList : PUMS_COMPLETION_LIST;
      WaitTimeOut : DWORD;
      UmsThreadList : access PUMS_CONTEXT
   ) return BOOL;
   pragma import (C,DequeueUmsCompletionListItems,"DequeueUmsCompletionListItems");
   function GetUmsCompletionListEvent(
      UmsCompletionList : PUMS_COMPLETION_LIST;
      UmsCompletionEvent : PHANDLE
   ) return BOOL;
   pragma import (C,GetUmsCompletionListEvent,"GetUmsCompletionListEvent");
   function ExecuteUmsThread(
      UmsThread : PUMS_CONTEXT
   ) return BOOL;
   pragma import (C,ExecuteUmsThread,"ExecuteUmsThread");
   function UmsThreadYield(
      SchedulerParam : PVOID
   ) return BOOL;
   pragma import (C,UmsThreadYield,"UmsThreadYield");
   function DeleteUmsCompletionList(
      UmsCompletionList : PUMS_COMPLETION_LIST
   ) return BOOL;
   pragma import (C,DeleteUmsCompletionList,"DeleteUmsCompletionList");
   function GetCurrentUmsThread return PUMS_CONTEXT;
   pragma import (C,GetCurrentUmsThread,"GetCurrentUmsThread");
   function GetNextUmsListItem(
      UmsContext : PUMS_CONTEXT
   ) return PUMS_CONTEXT;
   pragma import (C,GetNextUmsListItem,"GetNextUmsListItem");
   function QueryUmsThreadInformation(
      UmsThread : PUMS_CONTEXT;
      UmsThreadInfoClass : UMS_THREAD_INFO_CLASS;
      UmsThreadInformation : PVOID;
      UmsThreadInformationLength : ULONG;
      ReturnLength : PULONG
   ) return BOOL;
   pragma import (C,QueryUmsThreadInformation,"QueryUmsThreadInformation");
   function SetUmsThreadInformation(
      UmsThread : PUMS_CONTEXT;
      UmsThreadInfoClass : UMS_THREAD_INFO_CLASS;
      UmsThreadInformation : PVOID;
      UmsThreadInformationLength : ULONG
   ) return BOOL;
   pragma import (C,SetUmsThreadInformation,"SetUmsThreadInformation");
   function DeleteUmsThreadContext(
      UmsThread : PUMS_CONTEXT
   ) return BOOL;
   pragma import (C,DeleteUmsThreadContext,"DeleteUmsThreadContext");
   function CreateUmsThreadContext(
      lpUmsThread : access PUMS_CONTEXT
   ) return BOOL;
   pragma import (C,CreateUmsThreadContext,"CreateUmsThreadContext");
   function EnterUmsSchedulingMode(
      SchedulerStartupInfo : PUMS_SCHEDULER_STARTUP_INFO
   ) return BOOL;
   pragma import (C,EnterUmsSchedulingMode,"EnterUmsSchedulingMode");
   function GetUmsSystemThreadInformation(
      ThreadHandle : HANDLE;
      SystemThreadInfo : PUMS_SYSTEM_THREAD_INFORMATION
   ) return BOOL;
   pragma import (C,GetUmsSystemThreadInformation,"GetUmsSystemThreadInformation");
   function SetThreadAffinityMask(
      hThread : HANDLE;
      dwThreadAffinityMask : DWORD_PTR
   ) return DWORD_PTR;
   pragma import (C,SetThreadAffinityMask,"SetThreadAffinityMask");
   function SetProcessDEPPolicy(
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,SetProcessDEPPolicy,"SetProcessDEPPolicy");
   function GetProcessDEPPolicy(
      hProcess : HANDLE;
      lpFlags : LPDWORD;
      lpPermanent : PBOOL
   ) return BOOL;
   pragma import (C,GetProcessDEPPolicy,"GetProcessDEPPolicy");
   function RequestWakeupLatency(
      latency : LATENCY_TIME
   ) return BOOL;
   pragma import (C,RequestWakeupLatency,"RequestWakeupLatency");
   function IsSystemResumeAutomatic return BOOL;
   pragma import (C,IsSystemResumeAutomatic,"IsSystemResumeAutomatic");
   function GetThreadSelectorEntry(
      hThread : HANDLE;
      dwSelector : DWORD;
      lpSelectorEntry : LPLDT_ENTRY
   ) return BOOL;
   pragma import (C,GetThreadSelectorEntry,"GetThreadSelectorEntry");
   function SetThreadExecutionState(
      esFlags : EXECUTION_STATE
   ) return EXECUTION_STATE;
   pragma import (C,SetThreadExecutionState,"SetThreadExecutionState");
   subtype POWER_REQUEST_CONTEXT is REASON_CONTEXT; -- CXType_Typedef
   type PPOWER_REQUEST_CONTEXT is access REASON_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type LPPOWER_REQUEST_CONTEXT is access REASON_CONTEXT; -- CXType_Pointer - CXType_Typedef
   function PowerCreateRequest(
      Context_x : PREASON_CONTEXT
   ) return HANDLE;
   pragma import (C,PowerCreateRequest,"PowerCreateRequest");
   function PowerSetRequest(
      PowerRequest : HANDLE;
      RequestType : POWER_REQUEST_TYPE
   ) return BOOL;
   pragma import (C,PowerSetRequest,"PowerSetRequest");
   function PowerClearRequest(
      PowerRequest : HANDLE;
      RequestType : POWER_REQUEST_TYPE
   ) return BOOL;
   pragma import (C,PowerClearRequest,"PowerClearRequest");
   function SetFileCompletionNotificationModes(
      FileHandle : HANDLE;
      Flags : UCHAR
   ) return BOOL;
   pragma import (C,SetFileCompletionNotificationModes,"SetFileCompletionNotificationModes");
   function Wow64GetThreadContext(
      hThread : HANDLE;
      lpContext_x : PWOW64_CONTEXT
   ) return BOOL;
   pragma import (C,Wow64GetThreadContext,"Wow64GetThreadContext");
   function Wow64SetThreadContext(
      hThread : HANDLE;
      lpContext_x : access constant WOW64_CONTEXT
   ) return BOOL;
   pragma import (C,Wow64SetThreadContext,"Wow64SetThreadContext");
   function Wow64GetThreadSelectorEntry(
      hThread : HANDLE;
      dwSelector : DWORD;
      lpSelectorEntry : PWOW64_LDT_ENTRY
   ) return BOOL;
   pragma import (C,Wow64GetThreadSelectorEntry,"Wow64GetThreadSelectorEntry");
   function Wow64SuspendThread(
      hThread : HANDLE
   ) return DWORD;
   pragma import (C,Wow64SuspendThread,"Wow64SuspendThread");
   function DebugSetProcessKillOnExit(
      KillOnExit : BOOL
   ) return BOOL;
   pragma import (C,DebugSetProcessKillOnExit,"DebugSetProcessKillOnExit");
   function DebugBreakProcess(
      Process : HANDLE
   ) return BOOL;
   pragma import (C,DebugBreakProcess,"DebugBreakProcess");
   function PulseEvent(
      hEvent : HANDLE
   ) return BOOL;
   pragma import (C,PulseEvent,"PulseEvent");
   function GlobalDeleteAtom(
      nAtom : ATOM
   ) return ATOM;
   pragma import (C,GlobalDeleteAtom,"GlobalDeleteAtom");
   function InitAtomTable(
      nSize : DWORD
   ) return BOOL;
   pragma import (C,InitAtomTable,"InitAtomTable");
   function DeleteAtom(
      nAtom : ATOM
   ) return ATOM;
   pragma import (C,DeleteAtom,"DeleteAtom");
   function SetHandleCount(
      uNumber : UINT
   ) return UINT;
   pragma import (C,SetHandleCount,"SetHandleCount");
   function RequestDeviceWakeup(
      hDevice : HANDLE
   ) return BOOL;
   pragma import (C,RequestDeviceWakeup,"RequestDeviceWakeup");
   function CancelDeviceWakeupRequest(
      hDevice : HANDLE
   ) return BOOL;
   pragma import (C,CancelDeviceWakeupRequest,"CancelDeviceWakeupRequest");
   function GetDevicePowerState(
      hDevice : HANDLE;
      pfOn : access BOOL
   ) return BOOL;
   pragma import (C,GetDevicePowerState,"GetDevicePowerState");
   function SetMessageWaitingIndicator(
      hMsgIndicator : HANDLE;
      ulMsgCount : ULONG
   ) return BOOL;
   pragma import (C,SetMessageWaitingIndicator,"SetMessageWaitingIndicator");
   function SetFileShortNameA(
      hFile_x : HANDLE;
      lpShortName : LPCSTR
   ) return BOOL;
   pragma import (C,SetFileShortNameA,"SetFileShortNameA");
   function SetFileShortNameW(
      hFile_x : HANDLE;
      lpShortName : LPCWSTR
   ) return BOOL;
   pragma import (C,SetFileShortNameW,"SetFileShortNameW");
   function LoadModule(
      lpModuleName : LPCSTR;
      lpParameterBlock : LPVOID
   ) return DWORD;
   pragma import (C,LoadModule,"LoadModule");
   function WinExec(
      lpCmdLine : LPCSTR;
      uCmdShow : UINT
   ) return UINT;
   pragma import (C,WinExec,"WinExec");
   function ClearCommBreak(
      hFile_x : HANDLE
   ) return BOOL;
   pragma import (C,ClearCommBreak,"ClearCommBreak");
   function ClearCommError(
      hFile_x : HANDLE;
      lpErrors : LPDWORD;
      lpStat : LPCOMSTAT
   ) return BOOL;
   pragma import (C,ClearCommError,"ClearCommError");
   function SetupComm(
      hFile_x : HANDLE;
      dwInQueue : DWORD;
      dwOutQueue : DWORD
   ) return BOOL;
   pragma import (C,SetupComm,"SetupComm");
   function EscapeCommFunction(
      hFile_x : HANDLE;
      dwFunc : DWORD
   ) return BOOL;
   pragma import (C,EscapeCommFunction,"EscapeCommFunction");
   function GetCommConfig(
      hCommDev : HANDLE;
      lpCC : LPCOMMCONFIG;
      lpdwSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetCommConfig,"GetCommConfig");
   function GetCommMask(
      hFile_x : HANDLE;
      lpEvtMask : LPDWORD
   ) return BOOL;
   pragma import (C,GetCommMask,"GetCommMask");
   function GetCommProperties(
      hFile_x : HANDLE;
      lpCommProp_x : LPCOMMPROP
   ) return BOOL;
   pragma import (C,GetCommProperties,"GetCommProperties");
   function GetCommModemStatus(
      hFile_x : HANDLE;
      lpModemStat : LPDWORD
   ) return BOOL;
   pragma import (C,GetCommModemStatus,"GetCommModemStatus");
   function GetCommState(
      hFile_x : HANDLE;
      lpDCB_x : LPDCB
   ) return BOOL;
   pragma import (C,GetCommState,"GetCommState");
   function GetCommTimeouts(
      hFile_x : HANDLE;
      lpCommTimeouts_x : LPCOMMTIMEOUTS
   ) return BOOL;
   pragma import (C,GetCommTimeouts,"GetCommTimeouts");
   function PurgeComm(
      hFile_x : HANDLE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,PurgeComm,"PurgeComm");
   function SetCommBreak(
      hFile_x : HANDLE
   ) return BOOL;
   pragma import (C,SetCommBreak,"SetCommBreak");
   function SetCommConfig(
      hCommDev : HANDLE;
      lpCC : LPCOMMCONFIG;
      dwSize : DWORD
   ) return BOOL;
   pragma import (C,SetCommConfig,"SetCommConfig");
   function SetCommMask(
      hFile_x : HANDLE;
      dwEvtMask : DWORD
   ) return BOOL;
   pragma import (C,SetCommMask,"SetCommMask");
   function SetCommState(
      hFile_x : HANDLE;
      lpDCB_x : LPDCB
   ) return BOOL;
   pragma import (C,SetCommState,"SetCommState");
   function SetCommTimeouts(
      hFile_x : HANDLE;
      lpCommTimeouts_x : LPCOMMTIMEOUTS
   ) return BOOL;
   pragma import (C,SetCommTimeouts,"SetCommTimeouts");
   function TransmitCommChar(
      hFile_x : HANDLE;
      cChar_x : Character
   ) return BOOL;
   pragma import (C,TransmitCommChar,"TransmitCommChar");
   function WaitCommEvent(
      hFile_x : HANDLE;
      lpEvtMask : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,WaitCommEvent,"WaitCommEvent");
   function OpenCommPort(
      uPortNumber : ULONG;
      dwDesiredAccess : DWORD;
      dwFlagsAndAttributes : DWORD
   ) return HANDLE;
   pragma import (C,OpenCommPort,"OpenCommPort");
   function GetCommPorts(
      lpPortNumbers : PULONG;
      uPortNumbersCount : ULONG;
      puPortNumbersFound : PULONG
   ) return ULONG;
   pragma import (C,GetCommPorts,"GetCommPorts");
   function SetTapePosition(
      hDevice : HANDLE;
      dwPositionMethod : DWORD;
      dwPartition : DWORD;
      dwOffsetLow : DWORD;
      dwOffsetHigh : DWORD;
      bImmediate : BOOL
   ) return DWORD;
   pragma import (C,SetTapePosition,"SetTapePosition");
   function GetTapePosition(
      hDevice : HANDLE;
      dwPositionType : DWORD;
      lpdwPartition : LPDWORD;
      lpdwOffsetLow : LPDWORD;
      lpdwOffsetHigh : LPDWORD
   ) return DWORD;
   pragma import (C,GetTapePosition,"GetTapePosition");
   function PrepareTape(
      hDevice : HANDLE;
      dwOperation : DWORD;
      bImmediate : BOOL
   ) return DWORD;
   pragma import (C,PrepareTape,"PrepareTape");
   function EraseTape(
      hDevice : HANDLE;
      dwEraseType : DWORD;
      bImmediate : BOOL
   ) return DWORD;
   pragma import (C,EraseTape,"EraseTape");
   function CreateTapePartition(
      hDevice : HANDLE;
      dwPartitionMethod : DWORD;
      dwCount : DWORD;
      dwSize : DWORD
   ) return DWORD;
   pragma import (C,CreateTapePartition,"CreateTapePartition");
   function WriteTapemark(
      hDevice : HANDLE;
      dwTapemarkType : DWORD;
      dwTapemarkCount : DWORD;
      bImmediate : BOOL
   ) return DWORD;
   pragma import (C,WriteTapemark,"WriteTapemark");
   function GetTapeStatus(
      hDevice : HANDLE
   ) return DWORD;
   pragma import (C,GetTapeStatus,"GetTapeStatus");
   function GetTapeParameters(
      hDevice : HANDLE;
      dwOperation : DWORD;
      lpdwSize : LPDWORD;
      lpTapeInformation : LPVOID
   ) return DWORD;
   pragma import (C,GetTapeParameters,"GetTapeParameters");
   function SetTapeParameters(
      hDevice : HANDLE;
      dwOperation : DWORD;
      lpTapeInformation : LPVOID
   ) return DWORD;
   pragma import (C,SetTapeParameters,"SetTapeParameters");
   function MulDiv(
      nNumber : Interfaces.C.Int;
      nNumerator : Interfaces.C.Int;
      nDenominator : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,MulDiv,"MulDiv");
   type DEP_SYSTEM_POLICY_TYPE_x is (
      DEPPolicyAlwaysOff,
      DEPPolicyAlwaysOn,
      DEPPolicyOptIn,
      DEPPolicyOptOut,
      DEPTotalPolicyCount
   );
   for DEP_SYSTEM_POLICY_TYPE_x use (
      DEPPolicyAlwaysOff => 0,
      DEPPolicyAlwaysOn => 1,
      DEPPolicyOptIn => 2,
      DEPPolicyOptOut => 3,
      DEPTotalPolicyCount => 4
   );
   for DEP_SYSTEM_POLICY_TYPE_x'Size use 32;
   subtype DEP_SYSTEM_POLICY_TYPE is DEP_SYSTEM_POLICY_TYPE_x; -- CXType_Elaborated
   function GetSystemDEPPolicy return DEP_SYSTEM_POLICY_TYPE;
   pragma import (C,GetSystemDEPPolicy,"GetSystemDEPPolicy");
   function GetSystemRegistryQuota(
      pdwQuotaAllowed : PDWORD;
      pdwQuotaUsed : PDWORD
   ) return BOOL;
   pragma import (C,GetSystemRegistryQuota,"GetSystemRegistryQuota");
   function FileTimeToDosDateTime(
      lpFileTime_x : access constant FILETIME;
      lpFatDate : LPWORD;
      lpFatTime : LPWORD
   ) return BOOL;
   pragma import (C,FileTimeToDosDateTime,"FileTimeToDosDateTime");
   function DosDateTimeToFileTime(
      wFatDate : WORD;
      wFatTime : WORD;
      lpFileTime_x : LPFILETIME
   ) return BOOL;
   pragma import (C,DosDateTimeToFileTime,"DosDateTimeToFileTime");
   function FormatMessageA(
      dwFlags : DWORD;
      lpSource : LPCVOID;
      dwMessageId : DWORD;
      dwLanguageId : DWORD;
      lpBuffer : LPSTR;
      nSize : DWORD;
      Arguments : access va_list
   ) return DWORD;
   pragma import (C,FormatMessageA,"FormatMessageA");
   function FormatMessageW(
      dwFlags : DWORD;
      lpSource : LPCVOID;
      dwMessageId : DWORD;
      dwLanguageId : DWORD;
      lpBuffer : LPWSTR;
      nSize : DWORD;
      Arguments : access va_list
   ) return DWORD;
   pragma import (C,FormatMessageW,"FormatMessageW");
   function CreateMailslotA(
      lpName : LPCSTR;
      nMaxMessageSize : DWORD;
      lReadTimeout : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return HANDLE;
   pragma import (C,CreateMailslotA,"CreateMailslotA");
   function CreateMailslotW(
      lpName : LPCWSTR;
      nMaxMessageSize : DWORD;
      lReadTimeout : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return HANDLE;
   pragma import (C,CreateMailslotW,"CreateMailslotW");
   function GetMailslotInfo(
      hMailslot : HANDLE;
      lpMaxMessageSize : LPDWORD;
      lpNextSize : LPDWORD;
      lpMessageCount : LPDWORD;
      lpReadTimeout : LPDWORD
   ) return BOOL;
   pragma import (C,GetMailslotInfo,"GetMailslotInfo");
   function SetMailslotInfo(
      hMailslot : HANDLE;
      lReadTimeout : DWORD
   ) return BOOL;
   pragma import (C,SetMailslotInfo,"SetMailslotInfo");
   function EncryptFileA(
      lpFileName : LPCSTR
   ) return BOOL;
   pragma import (C,EncryptFileA,"EncryptFileA");
   function EncryptFileW(
      lpFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,EncryptFileW,"EncryptFileW");
   function DecryptFileA(
      lpFileName : LPCSTR;
      dwReserved : DWORD
   ) return BOOL;
   pragma import (C,DecryptFileA,"DecryptFileA");
   function DecryptFileW(
      lpFileName : LPCWSTR;
      dwReserved : DWORD
   ) return BOOL;
   pragma import (C,DecryptFileW,"DecryptFileW");
   function FileEncryptionStatusA(
      lpFileName : LPCSTR;
      lpStatus : LPDWORD
   ) return BOOL;
   pragma import (C,FileEncryptionStatusA,"FileEncryptionStatusA");
   function FileEncryptionStatusW(
      lpFileName : LPCWSTR;
      lpStatus : LPDWORD
   ) return BOOL;
   pragma import (C,FileEncryptionStatusW,"FileEncryptionStatusW");
   subtype PFE_EXPORT_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (PBYTE, PVOID, ULONG)
   subtype PFE_IMPORT_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (PBYTE, PVOID, PULONG)
   function OpenEncryptedFileRawA(
      lpFileName : LPCSTR;
      ulFlags : ULONG;
      pvContext : access PVOID
   ) return DWORD;
   pragma import (C,OpenEncryptedFileRawA,"OpenEncryptedFileRawA");
   function OpenEncryptedFileRawW(
      lpFileName : LPCWSTR;
      ulFlags : ULONG;
      pvContext : access PVOID
   ) return DWORD;
   pragma import (C,OpenEncryptedFileRawW,"OpenEncryptedFileRawW");
   function ReadEncryptedFileRaw(
      pfExportCallback : PFE_EXPORT_FUNC;
      pvCallbackContext : PVOID;
      pvContext : PVOID
   ) return DWORD;
   pragma import (C,ReadEncryptedFileRaw,"ReadEncryptedFileRaw");
   function WriteEncryptedFileRaw(
      pfImportCallback : PFE_IMPORT_FUNC;
      pvCallbackContext : PVOID;
      pvContext : PVOID
   ) return DWORD;
   pragma import (C,WriteEncryptedFileRaw,"WriteEncryptedFileRaw");
   procedure CloseEncryptedFileRaw(
      pvContext : PVOID
   );
   pragma import (C,CloseEncryptedFileRaw,"CloseEncryptedFileRaw");
   function lstrcmpA(
      lpString1 : LPCSTR;
      lpString2 : LPCSTR
   ) return Interfaces.C.Int;
   pragma import (C,lstrcmpA,"lstrcmpA");
   function lstrcmpW(
      lpString1 : LPCWSTR;
      lpString2 : LPCWSTR
   ) return Interfaces.C.Int;
   pragma import (C,lstrcmpW,"lstrcmpW");
   function lstrcmpiA(
      lpString1 : LPCSTR;
      lpString2 : LPCSTR
   ) return Interfaces.C.Int;
   pragma import (C,lstrcmpiA,"lstrcmpiA");
   function lstrcmpiW(
      lpString1 : LPCWSTR;
      lpString2 : LPCWSTR
   ) return Interfaces.C.Int;
   pragma import (C,lstrcmpiW,"lstrcmpiW");
   function lstrcpynA(
      lpString1 : LPSTR;
      lpString2 : LPCSTR;
      iMaxLength : Interfaces.C.Int
   ) return LPSTR;
   pragma import (C,lstrcpynA,"lstrcpynA");
   function lstrcpynW(
      lpString1 : LPWSTR;
      lpString2 : LPCWSTR;
      iMaxLength : Interfaces.C.Int
   ) return LPWSTR;
   pragma import (C,lstrcpynW,"lstrcpynW");
   function lstrcpyA(
      lpString1 : LPSTR;
      lpString2 : LPCSTR
   ) return LPSTR;
   pragma import (C,lstrcpyA,"lstrcpyA");
   function lstrcpyW(
      lpString1 : LPWSTR;
      lpString2 : LPCWSTR
   ) return LPWSTR;
   pragma import (C,lstrcpyW,"lstrcpyW");
   function lstrcatA(
      lpString1 : LPSTR;
      lpString2 : LPCSTR
   ) return LPSTR;
   pragma import (C,lstrcatA,"lstrcatA");
   function lstrcatW(
      lpString1 : LPWSTR;
      lpString2 : LPCWSTR
   ) return LPWSTR;
   pragma import (C,lstrcatW,"lstrcatW");
   function lstrlenA(
      lpString : LPCSTR
   ) return Interfaces.C.Int;
   pragma import (C,lstrlenA,"lstrlenA");
   function lstrlenW(
      lpString : LPCWSTR
   ) return Interfaces.C.Int;
   pragma import (C,lstrlenW,"lstrlenW");
   function OpenFile(
      lpFileName : LPCSTR;
      lpReOpenBuff : LPOFSTRUCT;
      uStyle : UINT
   ) return HFILE;
   pragma import (C,OpenFile,"OpenFile");
   function lopen(
      lpPathName : LPCSTR;
      iReadWrite : Interfaces.C.Int
   ) return HFILE;
   pragma import (C,lopen,"_lopen");
   function lcreat(
      lpPathName : LPCSTR;
      iAttribute : Interfaces.C.Int
   ) return HFILE;
   pragma import (C,lcreat,"_lcreat");
   function lread(
      hFile_x : HFILE;
      lpBuffer : LPVOID;
      uBytes : UINT
   ) return UINT;
   pragma import (C,lread,"_lread");
   function lwrite(
      hFile_x : HFILE;
      lpBuffer : LPCCH;
      uBytes : UINT
   ) return UINT;
   pragma import (C,lwrite,"_lwrite");
   function hread(
      hFile_x : HFILE;
      lpBuffer : LPVOID;
      lBytes : Interfaces.C.Long
   ) return Interfaces.C.Long;
   pragma import (C,hread,"_hread");
   function hwrite(
      hFile_x : HFILE;
      lpBuffer : LPCCH;
      lBytes : Interfaces.C.Long
   ) return Interfaces.C.Long;
   pragma import (C,hwrite,"_hwrite");
   function lclose(
      hFile_x : HFILE
   ) return HFILE;
   pragma import (C,lclose,"_lclose");
   function llseek(
      hFile_x : HFILE;
      lOffset : LONG;
      iOrigin : Interfaces.C.Int
   ) return LONG;
   pragma import (C,llseek,"_llseek");
   function IsTextUnicode(
      lpv : access Void;
      iSize : Interfaces.C.Int;
      lpiResult : LPINT
   ) return BOOL;
   pragma import (C,IsTextUnicode,"IsTextUnicode");
   function BackupRead(
      hFile_x : HANDLE;
      lpBuffer : LPBYTE;
      nNumberOfBytesToRead : DWORD;
      lpNumberOfBytesRead : LPDWORD;
      bAbort : BOOL;
      bProcessSecurity : BOOL;
      lpContext_x : access LPVOID
   ) return BOOL;
   pragma import (C,BackupRead,"BackupRead");
   function BackupSeek(
      hFile_x : HANDLE;
      dwLowBytesToSeek : DWORD;
      dwHighBytesToSeek : DWORD;
      lpdwLowByteSeeked : LPDWORD;
      lpdwHighByteSeeked : LPDWORD;
      lpContext_x : access LPVOID
   ) return BOOL;
   pragma import (C,BackupSeek,"BackupSeek");
   function BackupWrite(
      hFile_x : HANDLE;
      lpBuffer : LPBYTE;
      nNumberOfBytesToWrite : DWORD;
      lpNumberOfBytesWritten : LPDWORD;
      bAbort : BOOL;
      bProcessSecurity : BOOL;
      lpContext_x : access LPVOID
   ) return BOOL;
   pragma import (C,BackupWrite,"BackupWrite");
   type WIN32_STREAM_ID_x is record
      dwStreamId : DWORD;
      dwStreamAttributes : DWORD;
      Size_x : LARGE_INTEGER;
      dwStreamNameSize : DWORD;
      cStreamName : Void;
   end record;
   subtype WIN32_STREAM_ID is WIN32_STREAM_ID_x; -- CXType_Elaborated
   type LPWIN32_STREAM_ID is access WIN32_STREAM_ID_x; -- CXType_Pointer - CXType_Elaborated
   type STARTUPINFOEXA_x is record
      StartupInfo_x : STARTUPINFOA;
      lpAttributeList : LPPROC_THREAD_ATTRIBUTE_LIST;
   end record;
   subtype STARTUPINFOEXA is STARTUPINFOEXA_x; -- CXType_Elaborated
   type LPSTARTUPINFOEXA is access STARTUPINFOEXA_x; -- CXType_Pointer - CXType_Elaborated
   type STARTUPINFOEXW_x is record
      StartupInfo_x : STARTUPINFOW;
      lpAttributeList : LPPROC_THREAD_ATTRIBUTE_LIST;
   end record;
   subtype STARTUPINFOEXW is STARTUPINFOEXW_x; -- CXType_Elaborated
   type LPSTARTUPINFOEXW is access STARTUPINFOEXW_x; -- CXType_Pointer - CXType_Elaborated
   subtype STARTUPINFOEX is STARTUPINFOEXA; -- CXType_Typedef
   subtype LPSTARTUPINFOEX is LPSTARTUPINFOEXA; -- CXType_Typedef
   function OpenMutexA(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenMutexA,"OpenMutexA");
   function CreateSemaphoreA(
      lpSemaphoreAttributes : LPSECURITY_ATTRIBUTES;
      lInitialCount : LONG;
      lMaximumCount : LONG;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,CreateSemaphoreA,"CreateSemaphoreA");
   function OpenSemaphoreA(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenSemaphoreA,"OpenSemaphoreA");
   function CreateWaitableTimerA(
      lpTimerAttributes : LPSECURITY_ATTRIBUTES;
      bManualReset : BOOL;
      lpTimerName : LPCSTR
   ) return HANDLE;
   pragma import (C,CreateWaitableTimerA,"CreateWaitableTimerA");
   function OpenWaitableTimerA(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpTimerName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenWaitableTimerA,"OpenWaitableTimerA");
   function CreateSemaphoreExA(
      lpSemaphoreAttributes : LPSECURITY_ATTRIBUTES;
      lInitialCount : LONG;
      lMaximumCount : LONG;
      lpName : LPCSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateSemaphoreExA,"CreateSemaphoreExA");
   function CreateWaitableTimerExA(
      lpTimerAttributes : LPSECURITY_ATTRIBUTES;
      lpTimerName : LPCSTR;
      dwFlags : DWORD;
      dwDesiredAccess : DWORD
   ) return HANDLE;
   pragma import (C,CreateWaitableTimerExA,"CreateWaitableTimerExA");
   function CreateFileMappingA(
      hFile_x : HANDLE;
      lpFileMappingAttributes : LPSECURITY_ATTRIBUTES;
      flProtect : DWORD;
      dwMaximumSizeHigh : DWORD;
      dwMaximumSizeLow : DWORD;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,CreateFileMappingA,"CreateFileMappingA");
   function CreateFileMappingNumaA(
      hFile_x : HANDLE;
      lpFileMappingAttributes : LPSECURITY_ATTRIBUTES;
      flProtect : DWORD;
      dwMaximumSizeHigh : DWORD;
      dwMaximumSizeLow : DWORD;
      lpName : LPCSTR;
      nndPreferred : DWORD
   ) return HANDLE;
   pragma import (C,CreateFileMappingNumaA,"CreateFileMappingNumaA");
   function OpenFileMappingA(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenFileMappingA,"OpenFileMappingA");
   function GetLogicalDriveStringsA(
      nBufferLength : DWORD;
      lpBuffer : LPSTR
   ) return DWORD;
   pragma import (C,GetLogicalDriveStringsA,"GetLogicalDriveStringsA");
   function LoadPackagedLibrary(
      lpwLibFileName : LPCWSTR;
      Reserved : DWORD
   ) return HMODULE;
   pragma import (C,LoadPackagedLibrary,"LoadPackagedLibrary");
   function QueryFullProcessImageNameA(
      hProcess : HANDLE;
      dwFlags : DWORD;
      lpExeName : LPSTR;
      lpdwSize : PDWORD
   ) return BOOL;
   pragma import (C,QueryFullProcessImageNameA,"QueryFullProcessImageNameA");
   function QueryFullProcessImageNameW(
      hProcess : HANDLE;
      dwFlags : DWORD;
      lpExeName : LPWSTR;
      lpdwSize : PDWORD
   ) return BOOL;
   pragma import (C,QueryFullProcessImageNameW,"QueryFullProcessImageNameW");
   type PROC_THREAD_ATTRIBUTE_NUM_x is (
      ProcThreadAttributeParentProcess,
      ProcThreadAttributeHandleList,
      ProcThreadAttributeGroupAffinity,
      ProcThreadAttributePreferredNode,
      ProcThreadAttributeIdealProcessor,
      ProcThreadAttributeUmsThread,
      ProcThreadAttributeMitigationPolicy,
      ProcThreadAttributeSecurityCapabilities,
      ProcThreadAttributeProtectionLevel,
      ProcThreadAttributeJobList,
      ProcThreadAttributeChildProcessPolicy,
      ProcThreadAttributeAllApplicationPackagesPolicy,
      ProcThreadAttributeWin32kFilter,
      ProcThreadAttributeSafeOpenPromptOriginClaim,
      ProcThreadAttributeDesktopAppPolicy
   );
   for PROC_THREAD_ATTRIBUTE_NUM_x use (
      ProcThreadAttributeParentProcess => 0,
      ProcThreadAttributeHandleList => 2,
      ProcThreadAttributeGroupAffinity => 3,
      ProcThreadAttributePreferredNode => 4,
      ProcThreadAttributeIdealProcessor => 5,
      ProcThreadAttributeUmsThread => 6,
      ProcThreadAttributeMitigationPolicy => 7,
      ProcThreadAttributeSecurityCapabilities => 9,
      ProcThreadAttributeProtectionLevel => 11,
      ProcThreadAttributeJobList => 13,
      ProcThreadAttributeChildProcessPolicy => 14,
      ProcThreadAttributeAllApplicationPackagesPolicy => 15,
      ProcThreadAttributeWin32kFilter => 16,
      ProcThreadAttributeSafeOpenPromptOriginClaim => 17,
      ProcThreadAttributeDesktopAppPolicy => 18
   );
   for PROC_THREAD_ATTRIBUTE_NUM_x'Size use 32;
   subtype PROC_THREAD_ATTRIBUTE_NUM is PROC_THREAD_ATTRIBUTE_NUM_x; -- CXType_Elaborated
   procedure GetStartupInfoA(
      lpStartupInfo_x : LPSTARTUPINFOA
   );
   pragma import (C,GetStartupInfoA,"GetStartupInfoA");
   function GetFirmwareEnvironmentVariableA(
      lpName : LPCSTR;
      lpGuid_x : LPCSTR;
      pBuffer : PVOID;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetFirmwareEnvironmentVariableA,"GetFirmwareEnvironmentVariableA");
   function GetFirmwareEnvironmentVariableW(
      lpName : LPCWSTR;
      lpGuid_x : LPCWSTR;
      pBuffer : PVOID;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetFirmwareEnvironmentVariableW,"GetFirmwareEnvironmentVariableW");
   function GetFirmwareEnvironmentVariableExA(
      lpName : LPCSTR;
      lpGuid_x : LPCSTR;
      pBuffer : PVOID;
      nSize : DWORD;
      pdwAttribubutes : PDWORD
   ) return DWORD;
   pragma import (C,GetFirmwareEnvironmentVariableExA,"GetFirmwareEnvironmentVariableExA");
   function GetFirmwareEnvironmentVariableExW(
      lpName : LPCWSTR;
      lpGuid_x : LPCWSTR;
      pBuffer : PVOID;
      nSize : DWORD;
      pdwAttribubutes : PDWORD
   ) return DWORD;
   pragma import (C,GetFirmwareEnvironmentVariableExW,"GetFirmwareEnvironmentVariableExW");
   function SetFirmwareEnvironmentVariableA(
      lpName : LPCSTR;
      lpGuid_x : LPCSTR;
      pValue : PVOID;
      nSize : DWORD
   ) return BOOL;
   pragma import (C,SetFirmwareEnvironmentVariableA,"SetFirmwareEnvironmentVariableA");
   function SetFirmwareEnvironmentVariableW(
      lpName : LPCWSTR;
      lpGuid_x : LPCWSTR;
      pValue : PVOID;
      nSize : DWORD
   ) return BOOL;
   pragma import (C,SetFirmwareEnvironmentVariableW,"SetFirmwareEnvironmentVariableW");
   function SetFirmwareEnvironmentVariableExA(
      lpName : LPCSTR;
      lpGuid_x : LPCSTR;
      pValue : PVOID;
      nSize : DWORD;
      dwAttributes : DWORD
   ) return BOOL;
   pragma import (C,SetFirmwareEnvironmentVariableExA,"SetFirmwareEnvironmentVariableExA");
   function SetFirmwareEnvironmentVariableExW(
      lpName : LPCWSTR;
      lpGuid_x : LPCWSTR;
      pValue : PVOID;
      nSize : DWORD;
      dwAttributes : DWORD
   ) return BOOL;
   pragma import (C,SetFirmwareEnvironmentVariableExW,"SetFirmwareEnvironmentVariableExW");
   function GetFirmwareType(
      FirmwareType : PFIRMWARE_TYPE
   ) return BOOL;
   pragma import (C,GetFirmwareType,"GetFirmwareType");
   function IsNativeVhdBoot(
      NativeVhdBoot : PBOOL
   ) return BOOL;
   pragma import (C,IsNativeVhdBoot,"IsNativeVhdBoot");
   function FindResourceA(
      hModule_x : HMODULE;
      lpName : LPCSTR;
      lpType : LPCSTR
   ) return HRSRC;
   pragma import (C,FindResourceA,"FindResourceA");
   function FindResourceExA(
      hModule_x : HMODULE;
      lpType : LPCSTR;
      lpName : LPCSTR;
      wLanguage : WORD
   ) return HRSRC;
   pragma import (C,FindResourceExA,"FindResourceExA");
   function EnumResourceTypesA(
      hModule_x : HMODULE;
      lpEnumFunc : ENUMRESTYPEPROCA;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumResourceTypesA,"EnumResourceTypesA");
   function EnumResourceTypesW(
      hModule_x : HMODULE;
      lpEnumFunc : ENUMRESTYPEPROCW;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumResourceTypesW,"EnumResourceTypesW");
   function EnumResourceNamesA(
      hModule_x : HMODULE;
      lpType : LPCSTR;
      lpEnumFunc : ENUMRESNAMEPROCA;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumResourceNamesA,"EnumResourceNamesA");
   function EnumResourceLanguagesA(
      hModule_x : HMODULE;
      lpType : LPCSTR;
      lpName : LPCSTR;
      lpEnumFunc : ENUMRESLANGPROCA;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumResourceLanguagesA,"EnumResourceLanguagesA");
   function EnumResourceLanguagesW(
      hModule_x : HMODULE;
      lpType : LPCWSTR;
      lpName : LPCWSTR;
      lpEnumFunc : ENUMRESLANGPROCW;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumResourceLanguagesW,"EnumResourceLanguagesW");
   function BeginUpdateResourceA(
      pFileName : LPCSTR;
      bDeleteExistingResources : BOOL
   ) return HANDLE;
   pragma import (C,BeginUpdateResourceA,"BeginUpdateResourceA");
   function BeginUpdateResourceW(
      pFileName : LPCWSTR;
      bDeleteExistingResources : BOOL
   ) return HANDLE;
   pragma import (C,BeginUpdateResourceW,"BeginUpdateResourceW");
   function UpdateResourceA(
      hUpdate : HANDLE;
      lpType : LPCSTR;
      lpName : LPCSTR;
      wLanguage : WORD;
      lpData : LPVOID;
      cb : DWORD
   ) return BOOL;
   pragma import (C,UpdateResourceA,"UpdateResourceA");
   function UpdateResourceW(
      hUpdate : HANDLE;
      lpType : LPCWSTR;
      lpName : LPCWSTR;
      wLanguage : WORD;
      lpData : LPVOID;
      cb : DWORD
   ) return BOOL;
   pragma import (C,UpdateResourceW,"UpdateResourceW");
   function EndUpdateResourceA(
      hUpdate : HANDLE;
      fDiscard : BOOL
   ) return BOOL;
   pragma import (C,EndUpdateResourceA,"EndUpdateResourceA");
   function EndUpdateResourceW(
      hUpdate : HANDLE;
      fDiscard : BOOL
   ) return BOOL;
   pragma import (C,EndUpdateResourceW,"EndUpdateResourceW");
   function GlobalAddAtomA(
      lpString : LPCSTR
   ) return ATOM;
   pragma import (C,GlobalAddAtomA,"GlobalAddAtomA");
   function GlobalAddAtomW(
      lpString : LPCWSTR
   ) return ATOM;
   pragma import (C,GlobalAddAtomW,"GlobalAddAtomW");
   function GlobalAddAtomExA(
      lpString : LPCSTR;
      Flags : DWORD
   ) return ATOM;
   pragma import (C,GlobalAddAtomExA,"GlobalAddAtomExA");
   function GlobalAddAtomExW(
      lpString : LPCWSTR;
      Flags : DWORD
   ) return ATOM;
   pragma import (C,GlobalAddAtomExW,"GlobalAddAtomExW");
   function GlobalFindAtomA(
      lpString : LPCSTR
   ) return ATOM;
   pragma import (C,GlobalFindAtomA,"GlobalFindAtomA");
   function GlobalFindAtomW(
      lpString : LPCWSTR
   ) return ATOM;
   pragma import (C,GlobalFindAtomW,"GlobalFindAtomW");
   function GlobalGetAtomNameA(
      nAtom : ATOM;
      lpBuffer : LPSTR;
      nSize : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GlobalGetAtomNameA,"GlobalGetAtomNameA");
   function GlobalGetAtomNameW(
      nAtom : ATOM;
      lpBuffer : LPWSTR;
      nSize : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GlobalGetAtomNameW,"GlobalGetAtomNameW");
   function AddAtomA(
      lpString : LPCSTR
   ) return ATOM;
   pragma import (C,AddAtomA,"AddAtomA");
   function AddAtomW(
      lpString : LPCWSTR
   ) return ATOM;
   pragma import (C,AddAtomW,"AddAtomW");
   function FindAtomA(
      lpString : LPCSTR
   ) return ATOM;
   pragma import (C,FindAtomA,"FindAtomA");
   function FindAtomW(
      lpString : LPCWSTR
   ) return ATOM;
   pragma import (C,FindAtomW,"FindAtomW");
   function GetAtomNameA(
      nAtom : ATOM;
      lpBuffer : LPSTR;
      nSize : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GetAtomNameA,"GetAtomNameA");
   function GetAtomNameW(
      nAtom : ATOM;
      lpBuffer : LPWSTR;
      nSize : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GetAtomNameW,"GetAtomNameW");
   function GetProfileIntA(
      lpAppName : LPCSTR;
      lpKeyName : LPCSTR;
      nDefault : INT
   ) return UINT;
   pragma import (C,GetProfileIntA,"GetProfileIntA");
   function GetProfileIntW(
      lpAppName : LPCWSTR;
      lpKeyName : LPCWSTR;
      nDefault : INT
   ) return UINT;
   pragma import (C,GetProfileIntW,"GetProfileIntW");
   function GetProfileStringA(
      lpAppName : LPCSTR;
      lpKeyName : LPCSTR;
      lpDefault : LPCSTR;
      lpReturnedString : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetProfileStringA,"GetProfileStringA");
   function GetProfileStringW(
      lpAppName : LPCWSTR;
      lpKeyName : LPCWSTR;
      lpDefault : LPCWSTR;
      lpReturnedString : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetProfileStringW,"GetProfileStringW");
   function WriteProfileStringA(
      lpAppName : LPCSTR;
      lpKeyName : LPCSTR;
      lpString : LPCSTR
   ) return BOOL;
   pragma import (C,WriteProfileStringA,"WriteProfileStringA");
   function WriteProfileStringW(
      lpAppName : LPCWSTR;
      lpKeyName : LPCWSTR;
      lpString : LPCWSTR
   ) return BOOL;
   pragma import (C,WriteProfileStringW,"WriteProfileStringW");
   function GetProfileSectionA(
      lpAppName : LPCSTR;
      lpReturnedString : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetProfileSectionA,"GetProfileSectionA");
   function GetProfileSectionW(
      lpAppName : LPCWSTR;
      lpReturnedString : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetProfileSectionW,"GetProfileSectionW");
   function WriteProfileSectionA(
      lpAppName : LPCSTR;
      lpString : LPCSTR
   ) return BOOL;
   pragma import (C,WriteProfileSectionA,"WriteProfileSectionA");
   function WriteProfileSectionW(
      lpAppName : LPCWSTR;
      lpString : LPCWSTR
   ) return BOOL;
   pragma import (C,WriteProfileSectionW,"WriteProfileSectionW");
   function GetPrivateProfileIntA(
      lpAppName : LPCSTR;
      lpKeyName : LPCSTR;
      nDefault : INT;
      lpFileName : LPCSTR
   ) return UINT;
   pragma import (C,GetPrivateProfileIntA,"GetPrivateProfileIntA");
   function GetPrivateProfileIntW(
      lpAppName : LPCWSTR;
      lpKeyName : LPCWSTR;
      nDefault : INT;
      lpFileName : LPCWSTR
   ) return UINT;
   pragma import (C,GetPrivateProfileIntW,"GetPrivateProfileIntW");
   function GetPrivateProfileStringA(
      lpAppName : LPCSTR;
      lpKeyName : LPCSTR;
      lpDefault : LPCSTR;
      lpReturnedString : LPSTR;
      nSize : DWORD;
      lpFileName : LPCSTR
   ) return DWORD;
   pragma import (C,GetPrivateProfileStringA,"GetPrivateProfileStringA");
   function GetPrivateProfileStringW(
      lpAppName : LPCWSTR;
      lpKeyName : LPCWSTR;
      lpDefault : LPCWSTR;
      lpReturnedString : LPWSTR;
      nSize : DWORD;
      lpFileName : LPCWSTR
   ) return DWORD;
   pragma import (C,GetPrivateProfileStringW,"GetPrivateProfileStringW");
   function WritePrivateProfileStringA(
      lpAppName : LPCSTR;
      lpKeyName : LPCSTR;
      lpString : LPCSTR;
      lpFileName : LPCSTR
   ) return BOOL;
   pragma import (C,WritePrivateProfileStringA,"WritePrivateProfileStringA");
   function WritePrivateProfileStringW(
      lpAppName : LPCWSTR;
      lpKeyName : LPCWSTR;
      lpString : LPCWSTR;
      lpFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,WritePrivateProfileStringW,"WritePrivateProfileStringW");
   function GetPrivateProfileSectionA(
      lpAppName : LPCSTR;
      lpReturnedString : LPSTR;
      nSize : DWORD;
      lpFileName : LPCSTR
   ) return DWORD;
   pragma import (C,GetPrivateProfileSectionA,"GetPrivateProfileSectionA");
   function GetPrivateProfileSectionW(
      lpAppName : LPCWSTR;
      lpReturnedString : LPWSTR;
      nSize : DWORD;
      lpFileName : LPCWSTR
   ) return DWORD;
   pragma import (C,GetPrivateProfileSectionW,"GetPrivateProfileSectionW");
   function WritePrivateProfileSectionA(
      lpAppName : LPCSTR;
      lpString : LPCSTR;
      lpFileName : LPCSTR
   ) return BOOL;
   pragma import (C,WritePrivateProfileSectionA,"WritePrivateProfileSectionA");
   function WritePrivateProfileSectionW(
      lpAppName : LPCWSTR;
      lpString : LPCWSTR;
      lpFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,WritePrivateProfileSectionW,"WritePrivateProfileSectionW");
   function GetPrivateProfileSectionNamesA(
      lpszReturnBuffer : LPSTR;
      nSize : DWORD;
      lpFileName : LPCSTR
   ) return DWORD;
   pragma import (C,GetPrivateProfileSectionNamesA,"GetPrivateProfileSectionNamesA");
   function GetPrivateProfileSectionNamesW(
      lpszReturnBuffer : LPWSTR;
      nSize : DWORD;
      lpFileName : LPCWSTR
   ) return DWORD;
   pragma import (C,GetPrivateProfileSectionNamesW,"GetPrivateProfileSectionNamesW");
   function GetPrivateProfileStructA(
      lpszSection : LPCSTR;
      lpszKey : LPCSTR;
      lpStruct : LPVOID;
      uSizeStruct : UINT;
      szFile : LPCSTR
   ) return BOOL;
   pragma import (C,GetPrivateProfileStructA,"GetPrivateProfileStructA");
   function GetPrivateProfileStructW(
      lpszSection : LPCWSTR;
      lpszKey : LPCWSTR;
      lpStruct : LPVOID;
      uSizeStruct : UINT;
      szFile : LPCWSTR
   ) return BOOL;
   pragma import (C,GetPrivateProfileStructW,"GetPrivateProfileStructW");
   function WritePrivateProfileStructA(
      lpszSection : LPCSTR;
      lpszKey : LPCSTR;
      lpStruct : LPVOID;
      uSizeStruct : UINT;
      szFile : LPCSTR
   ) return BOOL;
   pragma import (C,WritePrivateProfileStructA,"WritePrivateProfileStructA");
   function WritePrivateProfileStructW(
      lpszSection : LPCWSTR;
      lpszKey : LPCWSTR;
      lpStruct : LPVOID;
      uSizeStruct : UINT;
      szFile : LPCWSTR
   ) return BOOL;
   pragma import (C,WritePrivateProfileStructW,"WritePrivateProfileStructW");
   function Wow64EnableWow64FsRedirection(
      Wow64FsEnableRedirection : BOOLEAN
   ) return BOOLEAN;
   pragma import (C,Wow64EnableWow64FsRedirection,"Wow64EnableWow64FsRedirection");
   subtype PGET_SYSTEM_WOW64_DIRECTORY_A is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT (LPSTR, UINT)
   subtype PGET_SYSTEM_WOW64_DIRECTORY_W is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT (LPWSTR, UINT)
   function SetDllDirectoryA(
      lpPathName : LPCSTR
   ) return BOOL;
   pragma import (C,SetDllDirectoryA,"SetDllDirectoryA");
   function SetDllDirectoryW(
      lpPathName : LPCWSTR
   ) return BOOL;
   pragma import (C,SetDllDirectoryW,"SetDllDirectoryW");
   function GetDllDirectoryA(
      nBufferLength : DWORD;
      lpBuffer : LPSTR
   ) return DWORD;
   pragma import (C,GetDllDirectoryA,"GetDllDirectoryA");
   function GetDllDirectoryW(
      nBufferLength : DWORD;
      lpBuffer : LPWSTR
   ) return DWORD;
   pragma import (C,GetDllDirectoryW,"GetDllDirectoryW");
   function SetSearchPathMode(
      Flags : DWORD
   ) return BOOL;
   pragma import (C,SetSearchPathMode,"SetSearchPathMode");
   function CreateDirectoryExA(
      lpTemplateDirectory : LPCSTR;
      lpNewDirectory : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return BOOL;
   pragma import (C,CreateDirectoryExA,"CreateDirectoryExA");
   function CreateDirectoryExW(
      lpTemplateDirectory : LPCWSTR;
      lpNewDirectory : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return BOOL;
   pragma import (C,CreateDirectoryExW,"CreateDirectoryExW");
   function CreateDirectoryTransactedA(
      lpTemplateDirectory : LPCSTR;
      lpNewDirectory : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,CreateDirectoryTransactedA,"CreateDirectoryTransactedA");
   function CreateDirectoryTransactedW(
      lpTemplateDirectory : LPCWSTR;
      lpNewDirectory : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,CreateDirectoryTransactedW,"CreateDirectoryTransactedW");
   function RemoveDirectoryTransactedA(
      lpPathName : LPCSTR;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,RemoveDirectoryTransactedA,"RemoveDirectoryTransactedA");
   function RemoveDirectoryTransactedW(
      lpPathName : LPCWSTR;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,RemoveDirectoryTransactedW,"RemoveDirectoryTransactedW");
   function GetFullPathNameTransactedA(
      lpFileName : LPCSTR;
      nBufferLength : DWORD;
      lpBuffer : LPSTR;
      lpFilePart : access LPSTR;
      hTransaction : HANDLE
   ) return DWORD;
   pragma import (C,GetFullPathNameTransactedA,"GetFullPathNameTransactedA");
   function GetFullPathNameTransactedW(
      lpFileName : LPCWSTR;
      nBufferLength : DWORD;
      lpBuffer : LPWSTR;
      lpFilePart : access LPWSTR;
      hTransaction : HANDLE
   ) return DWORD;
   pragma import (C,GetFullPathNameTransactedW,"GetFullPathNameTransactedW");
   function DefineDosDeviceA(
      dwFlags : DWORD;
      lpDeviceName : LPCSTR;
      lpTargetPath : LPCSTR
   ) return BOOL;
   pragma import (C,DefineDosDeviceA,"DefineDosDeviceA");
   function QueryDosDeviceA(
      lpDeviceName : LPCSTR;
      lpTargetPath : LPSTR;
      ucchMax : DWORD
   ) return DWORD;
   pragma import (C,QueryDosDeviceA,"QueryDosDeviceA");
   function CreateFileTransactedA(
      lpFileName : LPCSTR;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      dwCreationDisposition : DWORD;
      dwFlagsAndAttributes : DWORD;
      hTemplateFile : HANDLE;
      hTransaction : HANDLE;
      pusMiniVersion : PUSHORT;
      lpExtendedParameter : PVOID
   ) return HANDLE;
   pragma import (C,CreateFileTransactedA,"CreateFileTransactedA");
   function CreateFileTransactedW(
      lpFileName : LPCWSTR;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      dwCreationDisposition : DWORD;
      dwFlagsAndAttributes : DWORD;
      hTemplateFile : HANDLE;
      hTransaction : HANDLE;
      pusMiniVersion : PUSHORT;
      lpExtendedParameter : PVOID
   ) return HANDLE;
   pragma import (C,CreateFileTransactedW,"CreateFileTransactedW");
   function ReOpenFile(
      hOriginalFile : HANDLE;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      dwFlagsAndAttributes : DWORD
   ) return HANDLE;
   pragma import (C,ReOpenFile,"ReOpenFile");
   function SetFileAttributesTransactedA(
      lpFileName : LPCSTR;
      dwFileAttributes : DWORD;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,SetFileAttributesTransactedA,"SetFileAttributesTransactedA");
   function SetFileAttributesTransactedW(
      lpFileName : LPCWSTR;
      dwFileAttributes : DWORD;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,SetFileAttributesTransactedW,"SetFileAttributesTransactedW");
   function GetFileAttributesTransactedA(
      lpFileName : LPCSTR;
      fInfoLevelId : GET_FILEEX_INFO_LEVELS;
      lpFileInformation : LPVOID;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,GetFileAttributesTransactedA,"GetFileAttributesTransactedA");
   function GetFileAttributesTransactedW(
      lpFileName : LPCWSTR;
      fInfoLevelId : GET_FILEEX_INFO_LEVELS;
      lpFileInformation : LPVOID;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,GetFileAttributesTransactedW,"GetFileAttributesTransactedW");
   function GetCompressedFileSizeTransactedA(
      lpFileName : LPCSTR;
      lpFileSizeHigh : LPDWORD;
      hTransaction : HANDLE
   ) return DWORD;
   pragma import (C,GetCompressedFileSizeTransactedA,"GetCompressedFileSizeTransactedA");
   function GetCompressedFileSizeTransactedW(
      lpFileName : LPCWSTR;
      lpFileSizeHigh : LPDWORD;
      hTransaction : HANDLE
   ) return DWORD;
   pragma import (C,GetCompressedFileSizeTransactedW,"GetCompressedFileSizeTransactedW");
   function DeleteFileTransactedA(
      lpFileName : LPCSTR;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,DeleteFileTransactedA,"DeleteFileTransactedA");
   function DeleteFileTransactedW(
      lpFileName : LPCWSTR;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,DeleteFileTransactedW,"DeleteFileTransactedW");
   function CheckNameLegalDOS8Dot3A(
      lpName : LPCSTR;
      lpOemName : LPSTR;
      OemNameSize : DWORD;
      pbNameContainsSpaces : PBOOL;
      pbNameLegal : PBOOL
   ) return BOOL;
   pragma import (C,CheckNameLegalDOS8Dot3A,"CheckNameLegalDOS8Dot3A");
   function CheckNameLegalDOS8Dot3W(
      lpName : LPCWSTR;
      lpOemName : LPSTR;
      OemNameSize : DWORD;
      pbNameContainsSpaces : PBOOL;
      pbNameLegal : PBOOL
   ) return BOOL;
   pragma import (C,CheckNameLegalDOS8Dot3W,"CheckNameLegalDOS8Dot3W");
   function FindFirstFileTransactedA(
      lpFileName : LPCSTR;
      fInfoLevelId : FINDEX_INFO_LEVELS;
      lpFindFileData : LPVOID;
      fSearchOp : FINDEX_SEARCH_OPS;
      lpSearchFilter : LPVOID;
      dwAdditionalFlags : DWORD;
      hTransaction : HANDLE
   ) return HANDLE;
   pragma import (C,FindFirstFileTransactedA,"FindFirstFileTransactedA");
   function FindFirstFileTransactedW(
      lpFileName : LPCWSTR;
      fInfoLevelId : FINDEX_INFO_LEVELS;
      lpFindFileData : LPVOID;
      fSearchOp : FINDEX_SEARCH_OPS;
      lpSearchFilter : LPVOID;
      dwAdditionalFlags : DWORD;
      hTransaction : HANDLE
   ) return HANDLE;
   pragma import (C,FindFirstFileTransactedW,"FindFirstFileTransactedW");
   function CopyFileA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR;
      bFailIfExists : BOOL
   ) return BOOL;
   pragma import (C,CopyFileA,"CopyFileA");
   function CopyFileW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR;
      bFailIfExists : BOOL
   ) return BOOL;
   pragma import (C,CopyFileW,"CopyFileW");
   subtype LPPROGRESS_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, DWORD, DWORD, HANDLE, HANDLE, LPVOID)
   function CopyFileExA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      pbCancel : LPBOOL;
      dwCopyFlags : DWORD
   ) return BOOL;
   pragma import (C,CopyFileExA,"CopyFileExA");
   function CopyFileExW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      pbCancel : LPBOOL;
      dwCopyFlags : DWORD
   ) return BOOL;
   pragma import (C,CopyFileExW,"CopyFileExW");
   function CopyFileTransactedA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      pbCancel : LPBOOL;
      dwCopyFlags : DWORD;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,CopyFileTransactedA,"CopyFileTransactedA");
   function CopyFileTransactedW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      pbCancel : LPBOOL;
      dwCopyFlags : DWORD;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,CopyFileTransactedW,"CopyFileTransactedW");
   type COPYFILE2_MESSAGE_TYPE_x is (
      COPYFILE2_CALLBACK_NONE,
      COPYFILE2_CALLBACK_CHUNK_STARTED,
      COPYFILE2_CALLBACK_CHUNK_FINISHED,
      COPYFILE2_CALLBACK_STREAM_STARTED,
      COPYFILE2_CALLBACK_STREAM_FINISHED,
      COPYFILE2_CALLBACK_POLL_CONTINUE,
      COPYFILE2_CALLBACK_ERROR,
      COPYFILE2_CALLBACK_MAX
   );
   for COPYFILE2_MESSAGE_TYPE_x use (
      COPYFILE2_CALLBACK_NONE => 0,
      COPYFILE2_CALLBACK_CHUNK_STARTED => 1,
      COPYFILE2_CALLBACK_CHUNK_FINISHED => 2,
      COPYFILE2_CALLBACK_STREAM_STARTED => 3,
      COPYFILE2_CALLBACK_STREAM_FINISHED => 4,
      COPYFILE2_CALLBACK_POLL_CONTINUE => 5,
      COPYFILE2_CALLBACK_ERROR => 6,
      COPYFILE2_CALLBACK_MAX => 7
   );
   for COPYFILE2_MESSAGE_TYPE_x'Size use 32;
   subtype COPYFILE2_MESSAGE_TYPE is COPYFILE2_MESSAGE_TYPE_x; -- CXType_Elaborated
   type COPYFILE2_MESSAGE_ACTION_x is (
      COPYFILE2_PROGRESS_CONTINUE,
      COPYFILE2_PROGRESS_CANCEL,
      COPYFILE2_PROGRESS_STOP,
      COPYFILE2_PROGRESS_QUIET,
      COPYFILE2_PROGRESS_PAUSE
   );
   for COPYFILE2_MESSAGE_ACTION_x use (
      COPYFILE2_PROGRESS_CONTINUE => 0,
      COPYFILE2_PROGRESS_CANCEL => 1,
      COPYFILE2_PROGRESS_STOP => 2,
      COPYFILE2_PROGRESS_QUIET => 3,
      COPYFILE2_PROGRESS_PAUSE => 4
   );
   for COPYFILE2_MESSAGE_ACTION_x'Size use 32;
   subtype COPYFILE2_MESSAGE_ACTION is COPYFILE2_MESSAGE_ACTION_x; -- CXType_Elaborated
   type COPYFILE2_COPY_PHASE_x is (
      COPYFILE2_PHASE_NONE,
      COPYFILE2_PHASE_PREPARE_SOURCE,
      COPYFILE2_PHASE_PREPARE_DEST,
      COPYFILE2_PHASE_READ_SOURCE,
      COPYFILE2_PHASE_WRITE_DESTINATION,
      COPYFILE2_PHASE_SERVER_COPY,
      COPYFILE2_PHASE_NAMEGRAFT_COPY,
      COPYFILE2_PHASE_MAX
   );
   for COPYFILE2_COPY_PHASE_x use (
      COPYFILE2_PHASE_NONE => 0,
      COPYFILE2_PHASE_PREPARE_SOURCE => 1,
      COPYFILE2_PHASE_PREPARE_DEST => 2,
      COPYFILE2_PHASE_READ_SOURCE => 3,
      COPYFILE2_PHASE_WRITE_DESTINATION => 4,
      COPYFILE2_PHASE_SERVER_COPY => 5,
      COPYFILE2_PHASE_NAMEGRAFT_COPY => 6,
      COPYFILE2_PHASE_MAX => 7
   );
   for COPYFILE2_COPY_PHASE_x'Size use 32;
   subtype COPYFILE2_COPY_PHASE is COPYFILE2_COPY_PHASE_x; -- CXType_Elaborated
   type COPYFILE2_MESSAGE is record
      type_x : COPYFILE2_MESSAGE_TYPE;
      dwPadding : DWORD;
      Info : Void;
   end record;
   subtype PCOPYFILE2_PROGRESS_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] COPYFILE2_MESSAGE_ACTION (const COPYFILE2_MESSAGE *, PVOID)
   type COPYFILE2_EXTENDED_PARAMETERS is record
      dwSize : DWORD;
      dwCopyFlags : DWORD;
      pfCancel : access BOOL;
      pProgressRoutine : PCOPYFILE2_PROGRESS_ROUTINE;
      pvCallbackContext : PVOID;
   end record;
   function CopyFile2(
      pwszExistingFileName : PCWSTR;
      pwszNewFileName : PCWSTR;
      pExtendedParameters : access COPYFILE2_EXTENDED_PARAMETERS
   ) return HRESULT;
   pragma import (C,CopyFile2,"CopyFile2");
   function MoveFileA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR
   ) return BOOL;
   pragma import (C,MoveFileA,"MoveFileA");
   function MoveFileW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,MoveFileW,"MoveFileW");
   function MoveFileExA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,MoveFileExA,"MoveFileExA");
   function MoveFileExW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,MoveFileExW,"MoveFileExW");
   function MoveFileWithProgressA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,MoveFileWithProgressA,"MoveFileWithProgressA");
   function MoveFileWithProgressW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,MoveFileWithProgressW,"MoveFileWithProgressW");
   function MoveFileTransactedA(
      lpExistingFileName : LPCSTR;
      lpNewFileName : LPCSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      dwFlags : DWORD;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,MoveFileTransactedA,"MoveFileTransactedA");
   function MoveFileTransactedW(
      lpExistingFileName : LPCWSTR;
      lpNewFileName : LPCWSTR;
      lpProgressRoutine : LPPROGRESS_ROUTINE;
      lpData : LPVOID;
      dwFlags : DWORD;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,MoveFileTransactedW,"MoveFileTransactedW");
   function ReplaceFileA(
      lpReplacedFileName : LPCSTR;
      lpReplacementFileName : LPCSTR;
      lpBackupFileName : LPCSTR;
      dwReplaceFlags : DWORD;
      lpExclude : LPVOID;
      lpReserved : LPVOID
   ) return BOOL;
   pragma import (C,ReplaceFileA,"ReplaceFileA");
   function ReplaceFileW(
      lpReplacedFileName : LPCWSTR;
      lpReplacementFileName : LPCWSTR;
      lpBackupFileName : LPCWSTR;
      dwReplaceFlags : DWORD;
      lpExclude : LPVOID;
      lpReserved : LPVOID
   ) return BOOL;
   pragma import (C,ReplaceFileW,"ReplaceFileW");
   function CreateHardLinkA(
      lpFileName : LPCSTR;
      lpExistingFileName : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return BOOL;
   pragma import (C,CreateHardLinkA,"CreateHardLinkA");
   function CreateHardLinkW(
      lpFileName : LPCWSTR;
      lpExistingFileName : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return BOOL;
   pragma import (C,CreateHardLinkW,"CreateHardLinkW");
   function CreateHardLinkTransactedA(
      lpFileName : LPCSTR;
      lpExistingFileName : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,CreateHardLinkTransactedA,"CreateHardLinkTransactedA");
   function CreateHardLinkTransactedW(
      lpFileName : LPCWSTR;
      lpExistingFileName : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      hTransaction : HANDLE
   ) return BOOL;
   pragma import (C,CreateHardLinkTransactedW,"CreateHardLinkTransactedW");
   function FindFirstStreamTransactedW(
      lpFileName : LPCWSTR;
      InfoLevel : STREAM_INFO_LEVELS;
      lpFindStreamData : LPVOID;
      dwFlags : DWORD;
      hTransaction : HANDLE
   ) return HANDLE;
   pragma import (C,FindFirstStreamTransactedW,"FindFirstStreamTransactedW");
   function FindFirstFileNameTransactedW(
      lpFileName : LPCWSTR;
      dwFlags : DWORD;
      StringLength : LPDWORD;
      LinkName : PWSTR;
      hTransaction : HANDLE
   ) return HANDLE;
   pragma import (C,FindFirstFileNameTransactedW,"FindFirstFileNameTransactedW");
   function CreateNamedPipeA(
      lpName : LPCSTR;
      dwOpenMode : DWORD;
      dwPipeMode : DWORD;
      nMaxInstances : DWORD;
      nOutBufferSize : DWORD;
      nInBufferSize : DWORD;
      nDefaultTimeOut : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return HANDLE;
   pragma import (C,CreateNamedPipeA,"CreateNamedPipeA");
   function GetNamedPipeHandleStateA(
      hNamedPipe : HANDLE;
      lpState : LPDWORD;
      lpCurInstances : LPDWORD;
      lpMaxCollectionCount : LPDWORD;
      lpCollectDataTimeout : LPDWORD;
      lpUserName : LPSTR;
      nMaxUserNameSize : DWORD
   ) return BOOL;
   pragma import (C,GetNamedPipeHandleStateA,"GetNamedPipeHandleStateA");
   function CallNamedPipeA(
      lpNamedPipeName : LPCSTR;
      lpInBuffer : LPVOID;
      nInBufferSize : DWORD;
      lpOutBuffer : LPVOID;
      nOutBufferSize : DWORD;
      lpBytesRead : LPDWORD;
      nTimeOut : DWORD
   ) return BOOL;
   pragma import (C,CallNamedPipeA,"CallNamedPipeA");
   function WaitNamedPipeA(
      lpNamedPipeName : LPCSTR;
      nTimeOut : DWORD
   ) return BOOL;
   pragma import (C,WaitNamedPipeA,"WaitNamedPipeA");
   function GetNamedPipeClientComputerNameA(
      Pipe : HANDLE;
      ClientComputerName : LPSTR;
      ClientComputerNameLength : ULONG
   ) return BOOL;
   pragma import (C,GetNamedPipeClientComputerNameA,"GetNamedPipeClientComputerNameA");
   function GetNamedPipeClientProcessId(
      Pipe : HANDLE;
      ClientProcessId : PULONG
   ) return BOOL;
   pragma import (C,GetNamedPipeClientProcessId,"GetNamedPipeClientProcessId");
   function GetNamedPipeClientSessionId(
      Pipe : HANDLE;
      ClientSessionId : PULONG
   ) return BOOL;
   pragma import (C,GetNamedPipeClientSessionId,"GetNamedPipeClientSessionId");
   function GetNamedPipeServerProcessId(
      Pipe : HANDLE;
      ServerProcessId : PULONG
   ) return BOOL;
   pragma import (C,GetNamedPipeServerProcessId,"GetNamedPipeServerProcessId");
   function GetNamedPipeServerSessionId(
      Pipe : HANDLE;
      ServerSessionId : PULONG
   ) return BOOL;
   pragma import (C,GetNamedPipeServerSessionId,"GetNamedPipeServerSessionId");
   function SetVolumeLabelA(
      lpRootPathName : LPCSTR;
      lpVolumeName : LPCSTR
   ) return BOOL;
   pragma import (C,SetVolumeLabelA,"SetVolumeLabelA");
   function SetVolumeLabelW(
      lpRootPathName : LPCWSTR;
      lpVolumeName : LPCWSTR
   ) return BOOL;
   pragma import (C,SetVolumeLabelW,"SetVolumeLabelW");
   function SetFileBandwidthReservation(
      hFile_x : HANDLE;
      nPeriodMilliseconds : DWORD;
      nBytesPerPeriod : DWORD;
      bDiscardable : BOOL;
      lpTransferSize : LPDWORD;
      lpNumOutstandingRequests : LPDWORD
   ) return BOOL;
   pragma import (C,SetFileBandwidthReservation,"SetFileBandwidthReservation");
   function GetFileBandwidthReservation(
      hFile_x : HANDLE;
      lpPeriodMilliseconds : LPDWORD;
      lpBytesPerPeriod : LPDWORD;
      pDiscardable : LPBOOL;
      lpTransferSize : LPDWORD;
      lpNumOutstandingRequests : LPDWORD
   ) return BOOL;
   pragma import (C,GetFileBandwidthReservation,"GetFileBandwidthReservation");
   function ClearEventLogA(
      hEventLog : HANDLE;
      lpBackupFileName : LPCSTR
   ) return BOOL;
   pragma import (C,ClearEventLogA,"ClearEventLogA");
   function ClearEventLogW(
      hEventLog : HANDLE;
      lpBackupFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,ClearEventLogW,"ClearEventLogW");
   function BackupEventLogA(
      hEventLog : HANDLE;
      lpBackupFileName : LPCSTR
   ) return BOOL;
   pragma import (C,BackupEventLogA,"BackupEventLogA");
   function BackupEventLogW(
      hEventLog : HANDLE;
      lpBackupFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,BackupEventLogW,"BackupEventLogW");
   function CloseEventLog(
      hEventLog : HANDLE
   ) return BOOL;
   pragma import (C,CloseEventLog,"CloseEventLog");
   function DeregisterEventSource(
      hEventLog : HANDLE
   ) return BOOL;
   pragma import (C,DeregisterEventSource,"DeregisterEventSource");
   function NotifyChangeEventLog(
      hEventLog : HANDLE;
      hEvent : HANDLE
   ) return BOOL;
   pragma import (C,NotifyChangeEventLog,"NotifyChangeEventLog");
   function GetNumberOfEventLogRecords(
      hEventLog : HANDLE;
      NumberOfRecords : PDWORD
   ) return BOOL;
   pragma import (C,GetNumberOfEventLogRecords,"GetNumberOfEventLogRecords");
   function GetOldestEventLogRecord(
      hEventLog : HANDLE;
      OldestRecord : PDWORD
   ) return BOOL;
   pragma import (C,GetOldestEventLogRecord,"GetOldestEventLogRecord");
   function OpenEventLogA(
      lpUNCServerName : LPCSTR;
      lpSourceName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenEventLogA,"OpenEventLogA");
   function OpenEventLogW(
      lpUNCServerName : LPCWSTR;
      lpSourceName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenEventLogW,"OpenEventLogW");
   function RegisterEventSourceA(
      lpUNCServerName : LPCSTR;
      lpSourceName : LPCSTR
   ) return HANDLE;
   pragma import (C,RegisterEventSourceA,"RegisterEventSourceA");
   function RegisterEventSourceW(
      lpUNCServerName : LPCWSTR;
      lpSourceName : LPCWSTR
   ) return HANDLE;
   pragma import (C,RegisterEventSourceW,"RegisterEventSourceW");
   function OpenBackupEventLogA(
      lpUNCServerName : LPCSTR;
      lpFileName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenBackupEventLogA,"OpenBackupEventLogA");
   function OpenBackupEventLogW(
      lpUNCServerName : LPCWSTR;
      lpFileName : LPCWSTR
   ) return HANDLE;
   pragma import (C,OpenBackupEventLogW,"OpenBackupEventLogW");
   function ReadEventLogA(
      hEventLog : HANDLE;
      dwReadFlags : DWORD;
      dwRecordOffset : DWORD;
      lpBuffer : LPVOID;
      nNumberOfBytesToRead : DWORD;
      pnBytesRead : access DWORD;
      pnMinNumberOfBytesNeeded : access DWORD
   ) return BOOL;
   pragma import (C,ReadEventLogA,"ReadEventLogA");
   function ReadEventLogW(
      hEventLog : HANDLE;
      dwReadFlags : DWORD;
      dwRecordOffset : DWORD;
      lpBuffer : LPVOID;
      nNumberOfBytesToRead : DWORD;
      pnBytesRead : access DWORD;
      pnMinNumberOfBytesNeeded : access DWORD
   ) return BOOL;
   pragma import (C,ReadEventLogW,"ReadEventLogW");
   function ReportEventA(
      hEventLog : HANDLE;
      wType : WORD;
      wCategory : WORD;
      dwEventID : DWORD;
      lpUserSid : PSID;
      wNumStrings : WORD;
      dwDataSize : DWORD;
      lpStrings : access LPCSTR;
      lpRawData : LPVOID
   ) return BOOL;
   pragma import (C,ReportEventA,"ReportEventA");
   function ReportEventW(
      hEventLog : HANDLE;
      wType : WORD;
      wCategory : WORD;
      dwEventID : DWORD;
      lpUserSid : PSID;
      wNumStrings : WORD;
      dwDataSize : DWORD;
      lpStrings : access LPCWSTR;
      lpRawData : LPVOID
   ) return BOOL;
   pragma import (C,ReportEventW,"ReportEventW");
   type EVENTLOG_FULL_INFORMATION_x is record
      dwFull : DWORD;
   end record;
   subtype EVENTLOG_FULL_INFORMATION is EVENTLOG_FULL_INFORMATION_x; -- CXType_Elaborated
   type LPEVENTLOG_FULL_INFORMATION is access EVENTLOG_FULL_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   function GetEventLogInformation(
      hEventLog : HANDLE;
      dwInfoLevel : DWORD;
      lpBuffer : LPVOID;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetEventLogInformation,"GetEventLogInformation");
   subtype OPERATION_ID is ULONG; -- CXType_Typedef
   type OPERATION_START_PARAMETERS_x is record
      Version : ULONG;
      OperationId : OPERATION_ID;
      Flags : ULONG;
   end record;
   subtype OPERATION_START_PARAMETERS is OPERATION_START_PARAMETERS_x; -- CXType_Elaborated
   type POPERATION_START_PARAMETERS is access OPERATION_START_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type OPERATION_END_PARAMETERS_x is record
      Version : ULONG;
      OperationId : OPERATION_ID;
      Flags : ULONG;
   end record;
   subtype OPERATION_END_PARAMETERS is OPERATION_END_PARAMETERS_x; -- CXType_Elaborated
   type POPERATION_END_PARAMETERS is access OPERATION_END_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   function OperationStart(
      OperationStartParams : access OPERATION_START_PARAMETERS
   ) return BOOL;
   pragma import (C,OperationStart,"OperationStart");
   function OperationEnd(
      OperationEndParams : access OPERATION_END_PARAMETERS
   ) return BOOL;
   pragma import (C,OperationEnd,"OperationEnd");
   function AccessCheckAndAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPSTR;
      ObjectName : LPSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      DesiredAccess : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccess : LPDWORD;
      AccessStatus : LPBOOL;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckAndAuditAlarmA,"AccessCheckAndAuditAlarmA");
   function AccessCheckByTypeAndAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPCSTR;
      ObjectName : LPCSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      DesiredAccess : DWORD;
      AuditType : AUDIT_EVENT_TYPE;
      Flags : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccess : LPDWORD;
      AccessStatus : LPBOOL;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByTypeAndAuditAlarmA,"AccessCheckByTypeAndAuditAlarmA");
   function AccessCheckByTypeResultListAndAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPCSTR;
      ObjectName : LPCSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      DesiredAccess : DWORD;
      AuditType : AUDIT_EVENT_TYPE;
      Flags : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccess : LPDWORD;
      AccessStatusList : LPDWORD;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByTypeResultListAndAuditAlarmA,"AccessCheckByTypeResultListAndAuditAlarmA");
   function AccessCheckByTypeResultListAndAuditAlarmByHandleA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      ClientToken : HANDLE;
      ObjectTypeName : LPCSTR;
      ObjectName : LPCSTR;
      SecurityDescriptor : PSECURITY_DESCRIPTOR;
      PrincipalSelfSid : PSID;
      DesiredAccess : DWORD;
      AuditType : AUDIT_EVENT_TYPE;
      Flags : DWORD;
      ObjectTypeList : POBJECT_TYPE_LIST;
      ObjectTypeListLength : DWORD;
      GenericMapping : PGENERIC_MAPPING;
      ObjectCreation : BOOL;
      GrantedAccess : LPDWORD;
      AccessStatusList : LPDWORD;
      pfGenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,AccessCheckByTypeResultListAndAuditAlarmByHandleA,"AccessCheckByTypeResultListAndAuditAlarmByHandleA");
   function ObjectOpenAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      ObjectTypeName : LPSTR;
      ObjectName : LPSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      GrantedAccess : DWORD;
      Privileges : PPRIVILEGE_SET;
      ObjectCreation : BOOL;
      AccessGranted : BOOL;
      GenerateOnClose : LPBOOL
   ) return BOOL;
   pragma import (C,ObjectOpenAuditAlarmA,"ObjectOpenAuditAlarmA");
   function ObjectPrivilegeAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      ClientToken : HANDLE;
      DesiredAccess : DWORD;
      Privileges : PPRIVILEGE_SET;
      AccessGranted : BOOL
   ) return BOOL;
   pragma import (C,ObjectPrivilegeAuditAlarmA,"ObjectPrivilegeAuditAlarmA");
   function ObjectCloseAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      GenerateOnClose : BOOL
   ) return BOOL;
   pragma import (C,ObjectCloseAuditAlarmA,"ObjectCloseAuditAlarmA");
   function ObjectDeleteAuditAlarmA(
      SubsystemName : LPCSTR;
      HandleId : LPVOID;
      GenerateOnClose : BOOL
   ) return BOOL;
   pragma import (C,ObjectDeleteAuditAlarmA,"ObjectDeleteAuditAlarmA");
   function PrivilegedServiceAuditAlarmA(
      SubsystemName : LPCSTR;
      ServiceName : LPCSTR;
      ClientToken : HANDLE;
      Privileges : PPRIVILEGE_SET;
      AccessGranted : BOOL
   ) return BOOL;
   pragma import (C,PrivilegedServiceAuditAlarmA,"PrivilegedServiceAuditAlarmA");
   function AddConditionalAce(
      pAcl_x : PACL;
      dwAceRevision : DWORD;
      AceFlags : DWORD;
      AceType : UCHAR;
      AccessMask : DWORD;
      pSid_x : PSID;
      ConditionStr : PWCHAR;
      ReturnLength : access DWORD
   ) return BOOL;
   pragma import (C,AddConditionalAce,"AddConditionalAce");
   function SetFileSecurityA(
      lpFileName : LPCSTR;
      SecurityInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,SetFileSecurityA,"SetFileSecurityA");
   function GetFileSecurityA(
      lpFileName : LPCSTR;
      RequestedInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      nLength : DWORD;
      lpnLengthNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetFileSecurityA,"GetFileSecurityA");
   function ReadDirectoryChangesW(
      hDirectory : HANDLE;
      lpBuffer : LPVOID;
      nBufferLength : DWORD;
      bWatchSubtree : BOOL;
      dwNotifyFilter : DWORD;
      lpBytesReturned : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED;
      lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE
   ) return BOOL;
   pragma import (C,ReadDirectoryChangesW,"ReadDirectoryChangesW");
   function ReadDirectoryChangesExW(
      hDirectory : HANDLE;
      lpBuffer : LPVOID;
      nBufferLength : DWORD;
      bWatchSubtree : BOOL;
      dwNotifyFilter : DWORD;
      lpBytesReturned : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED;
      lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE;
      ReadDirectoryNotifyInformationClass : READ_DIRECTORY_NOTIFY_INFORMATION_CLASS
   ) return BOOL;
   pragma import (C,ReadDirectoryChangesExW,"ReadDirectoryChangesExW");
   procedure MapViewOfFileExNuma(
      hFileMappingObject : HANDLE;
      dwDesiredAccess : DWORD;
      dwFileOffsetHigh : DWORD;
      dwFileOffsetLow : DWORD;
      dwNumberOfBytesToMap : SIZE_T;
      lpBaseAddress : LPVOID;
      nndPreferred : DWORD
   );
   pragma import (C,MapViewOfFileExNuma,"MapViewOfFileExNuma");
   function IsBadReadPtr(
      lp : access Void;
      ucb : UINT_PTR
   ) return BOOL;
   pragma import (C,IsBadReadPtr,"IsBadReadPtr");
   function IsBadWritePtr(
      lp : LPVOID;
      ucb : UINT_PTR
   ) return BOOL;
   pragma import (C,IsBadWritePtr,"IsBadWritePtr");
   function IsBadHugeReadPtr(
      lp : access Void;
      ucb : UINT_PTR
   ) return BOOL;
   pragma import (C,IsBadHugeReadPtr,"IsBadHugeReadPtr");
   function IsBadHugeWritePtr(
      lp : LPVOID;
      ucb : UINT_PTR
   ) return BOOL;
   pragma import (C,IsBadHugeWritePtr,"IsBadHugeWritePtr");
   function IsBadCodePtr(
      lpfn : FARPROC
   ) return BOOL;
   pragma import (C,IsBadCodePtr,"IsBadCodePtr");
   function IsBadStringPtrA(
      lpsz : LPCSTR;
      ucchMax : UINT_PTR
   ) return BOOL;
   pragma import (C,IsBadStringPtrA,"IsBadStringPtrA");
   function IsBadStringPtrW(
      lpsz : LPCWSTR;
      ucchMax : UINT_PTR
   ) return BOOL;
   pragma import (C,IsBadStringPtrW,"IsBadStringPtrW");
   function LookupAccountSidA(
      lpSystemName : LPCSTR;
      Sid_x : PSID;
      Name : LPSTR;
      cchName : LPDWORD;
      ReferencedDomainName : LPSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountSidA,"LookupAccountSidA");
   function LookupAccountSidW(
      lpSystemName : LPCWSTR;
      Sid_x : PSID;
      Name : LPWSTR;
      cchName : LPDWORD;
      ReferencedDomainName : LPWSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountSidW,"LookupAccountSidW");
   function LookupAccountNameA(
      lpSystemName : LPCSTR;
      lpAccountName : LPCSTR;
      Sid_x : PSID;
      cbSid : LPDWORD;
      ReferencedDomainName : LPSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountNameA,"LookupAccountNameA");
   function LookupAccountNameW(
      lpSystemName : LPCWSTR;
      lpAccountName : LPCWSTR;
      Sid_x : PSID;
      cbSid : LPDWORD;
      ReferencedDomainName : LPWSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountNameW,"LookupAccountNameW");
   function LookupAccountNameLocalA(
      lpAccountName : LPCSTR;
      Sid_x : PSID;
      cbSid : LPDWORD;
      ReferencedDomainName : LPSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountNameLocalA,"LookupAccountNameLocalA");
   function LookupAccountNameLocalW(
      lpAccountName : LPCWSTR;
      Sid_x : PSID;
      cbSid : LPDWORD;
      ReferencedDomainName : LPWSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountNameLocalW,"LookupAccountNameLocalW");
   function LookupAccountSidLocalA(
      Sid_x : PSID;
      Name : LPSTR;
      cchName : LPDWORD;
      ReferencedDomainName : LPSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountSidLocalA,"LookupAccountSidLocalA");
   function LookupAccountSidLocalW(
      Sid_x : PSID;
      Name : LPWSTR;
      cchName : LPDWORD;
      ReferencedDomainName : LPWSTR;
      cchReferencedDomainName : LPDWORD;
      peUse : PSID_NAME_USE
   ) return BOOL;
   pragma import (C,LookupAccountSidLocalW,"LookupAccountSidLocalW");
   function LookupPrivilegeValueA(
      lpSystemName : LPCSTR;
      lpName : LPCSTR;
      lpLuid : PLUID
   ) return BOOL;
   pragma import (C,LookupPrivilegeValueA,"LookupPrivilegeValueA");
   function LookupPrivilegeValueW(
      lpSystemName : LPCWSTR;
      lpName : LPCWSTR;
      lpLuid : PLUID
   ) return BOOL;
   pragma import (C,LookupPrivilegeValueW,"LookupPrivilegeValueW");
   function LookupPrivilegeNameA(
      lpSystemName : LPCSTR;
      lpLuid : PLUID;
      lpName : LPSTR;
      cchName : LPDWORD
   ) return BOOL;
   pragma import (C,LookupPrivilegeNameA,"LookupPrivilegeNameA");
   function LookupPrivilegeNameW(
      lpSystemName : LPCWSTR;
      lpLuid : PLUID;
      lpName : LPWSTR;
      cchName : LPDWORD
   ) return BOOL;
   pragma import (C,LookupPrivilegeNameW,"LookupPrivilegeNameW");
   function LookupPrivilegeDisplayNameA(
      lpSystemName : LPCSTR;
      lpName : LPCSTR;
      lpDisplayName : LPSTR;
      cchDisplayName : LPDWORD;
      lpLanguageId : LPDWORD
   ) return BOOL;
   pragma import (C,LookupPrivilegeDisplayNameA,"LookupPrivilegeDisplayNameA");
   function LookupPrivilegeDisplayNameW(
      lpSystemName : LPCWSTR;
      lpName : LPCWSTR;
      lpDisplayName : LPWSTR;
      cchDisplayName : LPDWORD;
      lpLanguageId : LPDWORD
   ) return BOOL;
   pragma import (C,LookupPrivilegeDisplayNameW,"LookupPrivilegeDisplayNameW");
   function BuildCommDCBA(
      lpDef : LPCSTR;
      lpDCB_x : LPDCB
   ) return BOOL;
   pragma import (C,BuildCommDCBA,"BuildCommDCBA");
   function BuildCommDCBW(
      lpDef : LPCWSTR;
      lpDCB_x : LPDCB
   ) return BOOL;
   pragma import (C,BuildCommDCBW,"BuildCommDCBW");
   function BuildCommDCBAndTimeoutsA(
      lpDef : LPCSTR;
      lpDCB_x : LPDCB;
      lpCommTimeouts_x : LPCOMMTIMEOUTS
   ) return BOOL;
   pragma import (C,BuildCommDCBAndTimeoutsA,"BuildCommDCBAndTimeoutsA");
   function BuildCommDCBAndTimeoutsW(
      lpDef : LPCWSTR;
      lpDCB_x : LPDCB;
      lpCommTimeouts_x : LPCOMMTIMEOUTS
   ) return BOOL;
   pragma import (C,BuildCommDCBAndTimeoutsW,"BuildCommDCBAndTimeoutsW");
   function CommConfigDialogA(
      lpszName : LPCSTR;
      hWnd_x : HWND;
      lpCC : LPCOMMCONFIG
   ) return BOOL;
   pragma import (C,CommConfigDialogA,"CommConfigDialogA");
   function CommConfigDialogW(
      lpszName : LPCWSTR;
      hWnd_x : HWND;
      lpCC : LPCOMMCONFIG
   ) return BOOL;
   pragma import (C,CommConfigDialogW,"CommConfigDialogW");
   function GetDefaultCommConfigA(
      lpszName : LPCSTR;
      lpCC : LPCOMMCONFIG;
      lpdwSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetDefaultCommConfigA,"GetDefaultCommConfigA");
   function GetDefaultCommConfigW(
      lpszName : LPCWSTR;
      lpCC : LPCOMMCONFIG;
      lpdwSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetDefaultCommConfigW,"GetDefaultCommConfigW");
   function SetDefaultCommConfigA(
      lpszName : LPCSTR;
      lpCC : LPCOMMCONFIG;
      dwSize : DWORD
   ) return BOOL;
   pragma import (C,SetDefaultCommConfigA,"SetDefaultCommConfigA");
   function SetDefaultCommConfigW(
      lpszName : LPCWSTR;
      lpCC : LPCOMMCONFIG;
      dwSize : DWORD
   ) return BOOL;
   pragma import (C,SetDefaultCommConfigW,"SetDefaultCommConfigW");
   function GetComputerNameA(
      lpBuffer : LPSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetComputerNameA,"GetComputerNameA");
   function GetComputerNameW(
      lpBuffer : LPWSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,GetComputerNameW,"GetComputerNameW");
   function DnsHostnameToComputerNameA(
      Hostname : LPCSTR;
      ComputerName : LPSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,DnsHostnameToComputerNameA,"DnsHostnameToComputerNameA");
   function DnsHostnameToComputerNameW(
      Hostname : LPCWSTR;
      ComputerName : LPWSTR;
      nSize : LPDWORD
   ) return BOOL;
   pragma import (C,DnsHostnameToComputerNameW,"DnsHostnameToComputerNameW");
   function GetUserNameA(
      lpBuffer : LPSTR;
      pcbBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetUserNameA,"GetUserNameA");
   function GetUserNameW(
      lpBuffer : LPWSTR;
      pcbBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetUserNameW,"GetUserNameW");
   function LogonUserA(
      lpszUsername : LPCSTR;
      lpszDomain : LPCSTR;
      lpszPassword : LPCSTR;
      dwLogonType : DWORD;
      dwLogonProvider : DWORD;
      phToken : PHANDLE
   ) return BOOL;
   pragma import (C,LogonUserA,"LogonUserA");
   function LogonUserW(
      lpszUsername : LPCWSTR;
      lpszDomain : LPCWSTR;
      lpszPassword : LPCWSTR;
      dwLogonType : DWORD;
      dwLogonProvider : DWORD;
      phToken : PHANDLE
   ) return BOOL;
   pragma import (C,LogonUserW,"LogonUserW");
   function LogonUserExA(
      lpszUsername : LPCSTR;
      lpszDomain : LPCSTR;
      lpszPassword : LPCSTR;
      dwLogonType : DWORD;
      dwLogonProvider : DWORD;
      phToken : PHANDLE;
      ppLogonSid : access PSID;
      ppProfileBuffer : access PVOID;
      pdwProfileLength : LPDWORD;
      pQuotaLimits : PQUOTA_LIMITS
   ) return BOOL;
   pragma import (C,LogonUserExA,"LogonUserExA");
   function LogonUserExW(
      lpszUsername : LPCWSTR;
      lpszDomain : LPCWSTR;
      lpszPassword : LPCWSTR;
      dwLogonType : DWORD;
      dwLogonProvider : DWORD;
      phToken : PHANDLE;
      ppLogonSid : access PSID;
      ppProfileBuffer : access PVOID;
      pdwProfileLength : LPDWORD;
      pQuotaLimits : PQUOTA_LIMITS
   ) return BOOL;
   pragma import (C,LogonUserExW,"LogonUserExW");
   function CreateProcessWithLogonW(
      lpUsername : LPCWSTR;
      lpDomain : LPCWSTR;
      lpPassword : LPCWSTR;
      dwLogonFlags : DWORD;
      lpApplicationName : LPCWSTR;
      lpCommandLine : LPWSTR;
      dwCreationFlags : DWORD;
      lpEnvironment : LPVOID;
      lpCurrentDirectory : LPCWSTR;
      lpStartupInfo_x : LPSTARTUPINFOW;
      lpProcessInformation : LPPROCESS_INFORMATION
   ) return BOOL;
   pragma import (C,CreateProcessWithLogonW,"CreateProcessWithLogonW");
   function CreateProcessWithTokenW(
      hToken : HANDLE;
      dwLogonFlags : DWORD;
      lpApplicationName : LPCWSTR;
      lpCommandLine : LPWSTR;
      dwCreationFlags : DWORD;
      lpEnvironment : LPVOID;
      lpCurrentDirectory : LPCWSTR;
      lpStartupInfo_x : LPSTARTUPINFOW;
      lpProcessInformation : LPPROCESS_INFORMATION
   ) return BOOL;
   pragma import (C,CreateProcessWithTokenW,"CreateProcessWithTokenW");
   function IsTokenUntrusted(
      TokenHandle : HANDLE
   ) return BOOL;
   pragma import (C,IsTokenUntrusted,"IsTokenUntrusted");
   function RegisterWaitForSingleObject(
      phNewWaitObject : PHANDLE;
      hObject : HANDLE;
      Callback : WAITORTIMERCALLBACK;
      Context_x : PVOID;
      dwMilliseconds : ULONG;
      dwFlags : ULONG
   ) return BOOL;
   pragma import (C,RegisterWaitForSingleObject,"RegisterWaitForSingleObject");
   function UnregisterWait(
      WaitHandle : HANDLE
   ) return BOOL;
   pragma import (C,UnregisterWait,"UnregisterWait");
   function BindIoCompletionCallback(
      FileHandle : HANDLE;
      function_x : LPOVERLAPPED_COMPLETION_ROUTINE;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,BindIoCompletionCallback,"BindIoCompletionCallback");
   function SetTimerQueueTimer(
      TimerQueue : HANDLE;
      Callback : WAITORTIMERCALLBACK;
      Parameter : PVOID;
      DueTime : DWORD;
      Period : DWORD;
      PreferIo : BOOL
   ) return HANDLE;
   pragma import (C,SetTimerQueueTimer,"SetTimerQueueTimer");
   function CancelTimerQueueTimer(
      TimerQueue : HANDLE;
      Timer : HANDLE
   ) return BOOL;
   pragma import (C,CancelTimerQueueTimer,"CancelTimerQueueTimer");
   function DeleteTimerQueue(
      TimerQueue : HANDLE
   ) return BOOL;
   pragma import (C,DeleteTimerQueue,"DeleteTimerQueue");
   -- InitializeThreadpoolEnvironment(); -- inlined function not supported
   -- SetThreadpoolCallbackPool(); -- inlined function not supported
   -- SetThreadpoolCallbackCleanupGroup(); -- inlined function not supported
   -- SetThreadpoolCallbackRunsLong(); -- inlined function not supported
   -- SetThreadpoolCallbackLibrary(); -- inlined function not supported
   -- SetThreadpoolCallbackPriority(); -- inlined function not supported
   -- DestroyThreadpoolEnvironment(); -- inlined function not supported
   -- SetThreadpoolCallbackPersistent(); -- inlined function not supported
   function CreatePrivateNamespaceA(
      lpPrivateNamespaceAttributes : LPSECURITY_ATTRIBUTES;
      lpBoundaryDescriptor : LPVOID;
      lpAliasPrefix : LPCSTR
   ) return HANDLE;
   pragma import (C,CreatePrivateNamespaceA,"CreatePrivateNamespaceA");
   function OpenPrivateNamespaceA(
      lpBoundaryDescriptor : LPVOID;
      lpAliasPrefix : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenPrivateNamespaceA,"OpenPrivateNamespaceA");
   function CreateBoundaryDescriptorA(
      Name : LPCSTR;
      Flags : ULONG
   ) return HANDLE;
   pragma import (C,CreateBoundaryDescriptorA,"CreateBoundaryDescriptorA");
   function AddIntegrityLabelToBoundaryDescriptor(
      BoundaryDescriptor : access HANDLE;
      IntegrityLabel : PSID
   ) return BOOL;
   pragma import (C,AddIntegrityLabelToBoundaryDescriptor,"AddIntegrityLabelToBoundaryDescriptor");
   type tagHW_PROFILE_INFOA is record
      dwDockInfo : DWORD;
      szHwProfileGuid : Void;
      szHwProfileName : Void;
   end record;
   subtype HW_PROFILE_INFOA is tagHW_PROFILE_INFOA; -- CXType_Elaborated
   type LPHW_PROFILE_INFOA is access tagHW_PROFILE_INFOA; -- CXType_Pointer - CXType_Elaborated
   type tagHW_PROFILE_INFOW is record
      dwDockInfo : DWORD;
      szHwProfileGuid : Void;
      szHwProfileName : Void;
   end record;
   subtype HW_PROFILE_INFOW is tagHW_PROFILE_INFOW; -- CXType_Elaborated
   type LPHW_PROFILE_INFOW is access tagHW_PROFILE_INFOW; -- CXType_Pointer - CXType_Elaborated
   subtype HW_PROFILE_INFO is HW_PROFILE_INFOA; -- CXType_Typedef
   subtype LPHW_PROFILE_INFO is LPHW_PROFILE_INFOA; -- CXType_Typedef
   function GetCurrentHwProfileA(
      lpHwProfileInfo : LPHW_PROFILE_INFOA
   ) return BOOL;
   pragma import (C,GetCurrentHwProfileA,"GetCurrentHwProfileA");
   function GetCurrentHwProfileW(
      lpHwProfileInfo : LPHW_PROFILE_INFOW
   ) return BOOL;
   pragma import (C,GetCurrentHwProfileW,"GetCurrentHwProfileW");
   function VerifyVersionInfoA(
      lpVersionInformation : LPOSVERSIONINFOEXA;
      dwTypeMask : DWORD;
      dwlConditionMask : DWORDLONG
   ) return BOOL;
   pragma import (C,VerifyVersionInfoA,"VerifyVersionInfoA");
   function VerifyVersionInfoW(
      lpVersionInformation : LPOSVERSIONINFOEXW;
      dwTypeMask : DWORD;
      dwlConditionMask : DWORDLONG
   ) return BOOL;
   pragma import (C,VerifyVersionInfoW,"VerifyVersionInfoW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\winerror.h>
   -- HRESULT_FROM_WIN32(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\timezoneapi.h>
   type TIME_ZONE_INFORMATION_x is record
      Bias : LONG;
      StandardName : Void;
      StandardDate : SYSTEMTIME;
      StandardBias : LONG;
      DaylightName : Void;
      DaylightDate : SYSTEMTIME;
      DaylightBias : LONG;
   end record;
   subtype TIME_ZONE_INFORMATION is TIME_ZONE_INFORMATION_x; -- CXType_Elaborated
   type PTIME_ZONE_INFORMATION is access TIME_ZONE_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type LPTIME_ZONE_INFORMATION is access TIME_ZONE_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TIME_DYNAMIC_ZONE_INFORMATION_x is record
      Bias : LONG;
      StandardName : Void;
      StandardDate : SYSTEMTIME;
      StandardBias : LONG;
      DaylightName : Void;
      DaylightDate : SYSTEMTIME;
      DaylightBias : LONG;
      TimeZoneKeyName : Void;
      DynamicDaylightTimeDisabled : BOOLEAN;
   end record;
   subtype DYNAMIC_TIME_ZONE_INFORMATION is TIME_DYNAMIC_ZONE_INFORMATION_x; -- CXType_Elaborated
   type PDYNAMIC_TIME_ZONE_INFORMATION is access TIME_DYNAMIC_ZONE_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   function SystemTimeToTzSpecificLocalTime(
      lpTimeZoneInformation : access constant TIME_ZONE_INFORMATION;
      lpUniversalTime : access constant SYSTEMTIME;
      lpLocalTime : LPSYSTEMTIME
   ) return BOOL;
   pragma import (C,SystemTimeToTzSpecificLocalTime,"SystemTimeToTzSpecificLocalTime");
   function TzSpecificLocalTimeToSystemTime(
      lpTimeZoneInformation : access constant TIME_ZONE_INFORMATION;
      lpLocalTime : access constant SYSTEMTIME;
      lpUniversalTime : LPSYSTEMTIME
   ) return BOOL;
   pragma import (C,TzSpecificLocalTimeToSystemTime,"TzSpecificLocalTimeToSystemTime");
   function FileTimeToSystemTime(
      lpFileTime_x : access constant FILETIME;
      lpSystemTime_x : LPSYSTEMTIME
   ) return BOOL;
   pragma import (C,FileTimeToSystemTime,"FileTimeToSystemTime");
   function SystemTimeToFileTime(
      lpSystemTime_x : access constant SYSTEMTIME;
      lpFileTime_x : LPFILETIME
   ) return BOOL;
   pragma import (C,SystemTimeToFileTime,"SystemTimeToFileTime");
   function GetTimeZoneInformation(
      lpTimeZoneInformation : LPTIME_ZONE_INFORMATION
   ) return DWORD;
   pragma import (C,GetTimeZoneInformation,"GetTimeZoneInformation");
   function SetTimeZoneInformation(
      lpTimeZoneInformation : access constant TIME_ZONE_INFORMATION
   ) return BOOL;
   pragma import (C,SetTimeZoneInformation,"SetTimeZoneInformation");
   function SetDynamicTimeZoneInformation(
      lpTimeZoneInformation : access constant DYNAMIC_TIME_ZONE_INFORMATION
   ) return BOOL;
   pragma import (C,SetDynamicTimeZoneInformation,"SetDynamicTimeZoneInformation");
   function GetDynamicTimeZoneInformation(
      pTimeZoneInformation : PDYNAMIC_TIME_ZONE_INFORMATION
   ) return DWORD;
   pragma import (C,GetDynamicTimeZoneInformation,"GetDynamicTimeZoneInformation");
   function GetTimeZoneInformationForYear(
      wYear : USHORT;
      pdtzi : PDYNAMIC_TIME_ZONE_INFORMATION;
      ptzi : LPTIME_ZONE_INFORMATION
   ) return BOOL;
   pragma import (C,GetTimeZoneInformationForYear,"GetTimeZoneInformationForYear");
   function EnumDynamicTimeZoneInformation(
      dwIndex : DWORD;
      lpTimeZoneInformation : PDYNAMIC_TIME_ZONE_INFORMATION
   ) return DWORD;
   pragma import (C,EnumDynamicTimeZoneInformation,"EnumDynamicTimeZoneInformation");
   function GetDynamicTimeZoneInformationEffectiveYears(
      lpTimeZoneInformation : PDYNAMIC_TIME_ZONE_INFORMATION;
      FirstYear : LPDWORD;
      LastYear : LPDWORD
   ) return DWORD;
   pragma import (C,GetDynamicTimeZoneInformationEffectiveYears,"GetDynamicTimeZoneInformationEffectiveYears");
   function SystemTimeToTzSpecificLocalTimeEx(
      lpTimeZoneInformation : access constant DYNAMIC_TIME_ZONE_INFORMATION;
      lpUniversalTime : access constant SYSTEMTIME;
      lpLocalTime : LPSYSTEMTIME
   ) return BOOL;
   pragma import (C,SystemTimeToTzSpecificLocalTimeEx,"SystemTimeToTzSpecificLocalTimeEx");
   function TzSpecificLocalTimeToSystemTimeEx(
      lpTimeZoneInformation : access constant DYNAMIC_TIME_ZONE_INFORMATION;
      lpLocalTime : access constant SYSTEMTIME;
      lpUniversalTime : LPSYSTEMTIME
   ) return BOOL;
   pragma import (C,TzSpecificLocalTimeToSystemTimeEx,"TzSpecificLocalTimeToSystemTimeEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winbase.h>
   function SetSystemPowerState(
      fSuspend : BOOL;
      fForce : BOOL
   ) return BOOL;
   pragma import (C,SetSystemPowerState,"SetSystemPowerState");
   type SYSTEM_POWER_STATUS_x is record
      ACLineStatus : BYTE;
      BatteryFlag : BYTE;
      BatteryLifePercent : BYTE;
      SystemStatusFlag : BYTE;
      BatteryLifeTime : DWORD;
      BatteryFullLifeTime : DWORD;
   end record;
   subtype SYSTEM_POWER_STATUS is SYSTEM_POWER_STATUS_x; -- CXType_Elaborated
   type LPSYSTEM_POWER_STATUS is access SYSTEM_POWER_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   function GetSystemPowerStatus(
      lpSystemPowerStatus : LPSYSTEM_POWER_STATUS
   ) return BOOL;
   pragma import (C,GetSystemPowerStatus,"GetSystemPowerStatus");
   function MapUserPhysicalPagesScatter(
      VirtualAddresses : access PVOID;
      NumberOfPages : ULONG_PTR;
      PageArray : PULONG_PTR
   ) return BOOL;
   pragma import (C,MapUserPhysicalPagesScatter,"MapUserPhysicalPagesScatter");
   function CreateJobObjectA(
      lpJobAttributes : LPSECURITY_ATTRIBUTES;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,CreateJobObjectA,"CreateJobObjectA");
   function OpenJobObjectA(
      dwDesiredAccess : DWORD;
      bInheritHandle : BOOL;
      lpName : LPCSTR
   ) return HANDLE;
   pragma import (C,OpenJobObjectA,"OpenJobObjectA");
   function CreateJobSet(
      NumJob : ULONG;
      UserJobSet : PJOB_SET_ARRAY;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,CreateJobSet,"CreateJobSet");
   function FindFirstVolumeA(
      lpszVolumeName : LPSTR;
      cchBufferLength : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstVolumeA,"FindFirstVolumeA");
   function FindNextVolumeA(
      hFindVolume : HANDLE;
      lpszVolumeName : LPSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,FindNextVolumeA,"FindNextVolumeA");
   function FindFirstVolumeMountPointA(
      lpszRootPathName : LPCSTR;
      lpszVolumeMountPoint : LPSTR;
      cchBufferLength : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstVolumeMountPointA,"FindFirstVolumeMountPointA");
   function FindFirstVolumeMountPointW(
      lpszRootPathName : LPCWSTR;
      lpszVolumeMountPoint : LPWSTR;
      cchBufferLength : DWORD
   ) return HANDLE;
   pragma import (C,FindFirstVolumeMountPointW,"FindFirstVolumeMountPointW");
   function FindNextVolumeMountPointA(
      hFindVolumeMountPoint : HANDLE;
      lpszVolumeMountPoint : LPSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,FindNextVolumeMountPointA,"FindNextVolumeMountPointA");
   function FindNextVolumeMountPointW(
      hFindVolumeMountPoint : HANDLE;
      lpszVolumeMountPoint : LPWSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,FindNextVolumeMountPointW,"FindNextVolumeMountPointW");
   function FindVolumeMountPointClose(
      hFindVolumeMountPoint : HANDLE
   ) return BOOL;
   pragma import (C,FindVolumeMountPointClose,"FindVolumeMountPointClose");
   function SetVolumeMountPointA(
      lpszVolumeMountPoint : LPCSTR;
      lpszVolumeName : LPCSTR
   ) return BOOL;
   pragma import (C,SetVolumeMountPointA,"SetVolumeMountPointA");
   function SetVolumeMountPointW(
      lpszVolumeMountPoint : LPCWSTR;
      lpszVolumeName : LPCWSTR
   ) return BOOL;
   pragma import (C,SetVolumeMountPointW,"SetVolumeMountPointW");
   function DeleteVolumeMountPointA(
      lpszVolumeMountPoint : LPCSTR
   ) return BOOL;
   pragma import (C,DeleteVolumeMountPointA,"DeleteVolumeMountPointA");
   function GetVolumeNameForVolumeMountPointA(
      lpszVolumeMountPoint : LPCSTR;
      lpszVolumeName : LPSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,GetVolumeNameForVolumeMountPointA,"GetVolumeNameForVolumeMountPointA");
   function GetVolumePathNameA(
      lpszFileName : LPCSTR;
      lpszVolumePathName : LPSTR;
      cchBufferLength : DWORD
   ) return BOOL;
   pragma import (C,GetVolumePathNameA,"GetVolumePathNameA");
   function GetVolumePathNamesForVolumeNameA(
      lpszVolumeName : LPCSTR;
      lpszVolumePathNames : LPCH;
      cchBufferLength : DWORD;
      lpcchReturnLength : PDWORD
   ) return BOOL;
   pragma import (C,GetVolumePathNamesForVolumeNameA,"GetVolumePathNamesForVolumeNameA");
   type tagACTCTXA is record
      cbSize : ULONG;
      dwFlags : DWORD;
      lpSource : LPCSTR;
      wProcessorArchitecture : USHORT;
      wLangId : LANGID;
      lpAssemblyDirectory : LPCSTR;
      lpResourceName : LPCSTR;
      lpApplicationName : LPCSTR;
      hModule_x : HMODULE;
   end record;
   subtype ACTCTXA is tagACTCTXA; -- CXType_Elaborated
   type PACTCTXA is access tagACTCTXA; -- CXType_Pointer - CXType_Elaborated
   type tagACTCTXW is record
      cbSize : ULONG;
      dwFlags : DWORD;
      lpSource : LPCWSTR;
      wProcessorArchitecture : USHORT;
      wLangId : LANGID;
      lpAssemblyDirectory : LPCWSTR;
      lpResourceName : LPCWSTR;
      lpApplicationName : LPCWSTR;
      hModule_x : HMODULE;
   end record;
   subtype ACTCTXW is tagACTCTXW; -- CXType_Elaborated
   type PACTCTXW is access tagACTCTXW; -- CXType_Pointer - CXType_Elaborated
   subtype ACTCTX is ACTCTXA; -- CXType_Typedef
   subtype PACTCTX is PACTCTXA; -- CXType_Typedef
   type PCACTCTXA is access constant ACTCTXA; -- CXType_Pointer - CXType_Typedef
   type PCACTCTXW is access constant ACTCTXW; -- CXType_Pointer - CXType_Typedef
   subtype PCACTCTX is PCACTCTXA; -- CXType_Typedef
   function CreateActCtxA(
      pActCtx_x : PCACTCTXA
   ) return HANDLE;
   pragma import (C,CreateActCtxA,"CreateActCtxA");
   function CreateActCtxW(
      pActCtx_x : PCACTCTXW
   ) return HANDLE;
   pragma import (C,CreateActCtxW,"CreateActCtxW");
   procedure AddRefActCtx(
      hActCtx : HANDLE
   );
   pragma import (C,AddRefActCtx,"AddRefActCtx");
   procedure ReleaseActCtx(
      hActCtx : HANDLE
   );
   pragma import (C,ReleaseActCtx,"ReleaseActCtx");
   function ZombifyActCtx(
      hActCtx : HANDLE
   ) return BOOL;
   pragma import (C,ZombifyActCtx,"ZombifyActCtx");
   function ActivateActCtx(
      hActCtx : HANDLE;
      lpCookie : access ULONG_PTR
   ) return BOOL;
   pragma import (C,ActivateActCtx,"ActivateActCtx");
   function DeactivateActCtx(
      dwFlags : DWORD;
      ulCookie : ULONG_PTR
   ) return BOOL;
   pragma import (C,DeactivateActCtx,"DeactivateActCtx");
   function GetCurrentActCtx(
      lphActCtx : access HANDLE
   ) return BOOL;
   pragma import (C,GetCurrentActCtx,"GetCurrentActCtx");
   type tagACTCTX_SECTION_KEYED_DATA_2600 is record
      cbSize : ULONG;
      ulDataFormatVersion : ULONG;
      lpData : PVOID;
      ulLength : ULONG;
      lpSectionGlobalData : PVOID;
      ulSectionGlobalDataLength : ULONG;
      lpSectionBase : PVOID;
      ulSectionTotalLength : ULONG;
      hActCtx : HANDLE;
      ulAssemblyRosterIndex : ULONG;
   end record;
   subtype ACTCTX_SECTION_KEYED_DATA_2600 is tagACTCTX_SECTION_KEYED_DATA_2600; -- CXType_Elaborated
   type PACTCTX_SECTION_KEYED_DATA_2600 is access tagACTCTX_SECTION_KEYED_DATA_2600; -- CXType_Pointer - CXType_Elaborated
   type PCACTCTX_SECTION_KEYED_DATA_2600 is access constant ACTCTX_SECTION_KEYED_DATA_2600; -- CXType_Pointer - CXType_Typedef
   type tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA is record
      lpInformation : PVOID;
      lpSectionBase : PVOID;
      ulSectionLength : ULONG;
      lpSectionGlobalDataBase : PVOID;
      ulSectionGlobalDataLength : ULONG;
   end record;
   subtype ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA is tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; -- CXType_Elaborated
   type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA is access tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; -- CXType_Pointer - CXType_Elaborated
   type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA is access constant ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; -- CXType_Pointer - CXType_Typedef
   type tagACTCTX_SECTION_KEYED_DATA is record
      cbSize : ULONG;
      ulDataFormatVersion : ULONG;
      lpData : PVOID;
      ulLength : ULONG;
      lpSectionGlobalData : PVOID;
      ulSectionGlobalDataLength : ULONG;
      lpSectionBase : PVOID;
      ulSectionTotalLength : ULONG;
      hActCtx : HANDLE;
      ulAssemblyRosterIndex : ULONG;
      ulFlags : ULONG;
      AssemblyMetadata : ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
   end record;
   subtype ACTCTX_SECTION_KEYED_DATA is tagACTCTX_SECTION_KEYED_DATA; -- CXType_Elaborated
   type PACTCTX_SECTION_KEYED_DATA is access tagACTCTX_SECTION_KEYED_DATA; -- CXType_Pointer - CXType_Elaborated
   type PCACTCTX_SECTION_KEYED_DATA is access constant ACTCTX_SECTION_KEYED_DATA; -- CXType_Pointer - CXType_Typedef
   function FindActCtxSectionStringA(
      dwFlags : DWORD;
      lpExtensionGuid : access constant GUID;
      ulSectionId : ULONG;
      lpStringToFind : LPCSTR;
      ReturnedData : PACTCTX_SECTION_KEYED_DATA
   ) return BOOL;
   pragma import (C,FindActCtxSectionStringA,"FindActCtxSectionStringA");
   function FindActCtxSectionStringW(
      dwFlags : DWORD;
      lpExtensionGuid : access constant GUID;
      ulSectionId : ULONG;
      lpStringToFind : LPCWSTR;
      ReturnedData : PACTCTX_SECTION_KEYED_DATA
   ) return BOOL;
   pragma import (C,FindActCtxSectionStringW,"FindActCtxSectionStringW");
   function FindActCtxSectionGuid(
      dwFlags : DWORD;
      lpExtensionGuid : access constant GUID;
      ulSectionId : ULONG;
      lpGuidToFind : access constant GUID;
      ReturnedData : PACTCTX_SECTION_KEYED_DATA
   ) return BOOL;
   pragma import (C,FindActCtxSectionGuid,"FindActCtxSectionGuid");
   type ACTIVATION_CONTEXT_BASIC_INFORMATION_x is record
      hActCtx : HANDLE;
      dwFlags : DWORD;
   end record;
   subtype ACTIVATION_CONTEXT_BASIC_INFORMATION is ACTIVATION_CONTEXT_BASIC_INFORMATION_x; -- CXType_Elaborated
   type PACTIVATION_CONTEXT_BASIC_INFORMATION is access ACTIVATION_CONTEXT_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PCACTIVATION_CONTEXT_BASIC_INFORMATION is access constant ACTIVATION_CONTEXT_BASIC_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   function QueryActCtxW(
      dwFlags : DWORD;
      hActCtx : HANDLE;
      pvSubInstance : PVOID;
      ulInfoClass : ULONG;
      pvBuffer : PVOID;
      cbBuffer : SIZE_T;
      pcbWrittenOrRequired : access SIZE_T
   ) return BOOL;
   pragma import (C,QueryActCtxW,"QueryActCtxW");
   subtype PQUERYACTCTXW_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T *)
   function WTSGetActiveConsoleSessionId return DWORD;
   pragma import (C,WTSGetActiveConsoleSessionId,"WTSGetActiveConsoleSessionId");
   function WTSGetServiceSessionId return DWORD;
   pragma import (C,WTSGetServiceSessionId,"WTSGetServiceSessionId");
   function WTSIsServerContainer return BOOLEAN;
   pragma import (C,WTSIsServerContainer,"WTSIsServerContainer");
   function GetActiveProcessorGroupCount return WORD;
   pragma import (C,GetActiveProcessorGroupCount,"GetActiveProcessorGroupCount");
   function GetMaximumProcessorGroupCount return WORD;
   pragma import (C,GetMaximumProcessorGroupCount,"GetMaximumProcessorGroupCount");
   function GetActiveProcessorCount(
      GroupNumber : WORD
   ) return DWORD;
   pragma import (C,GetActiveProcessorCount,"GetActiveProcessorCount");
   function GetMaximumProcessorCount(
      GroupNumber : WORD
   ) return DWORD;
   pragma import (C,GetMaximumProcessorCount,"GetMaximumProcessorCount");
   function GetNumaProcessorNode(
      Processor : UCHAR;
      NodeNumber : PUCHAR
   ) return BOOL;
   pragma import (C,GetNumaProcessorNode,"GetNumaProcessorNode");
   function GetNumaNodeNumberFromHandle(
      hFile_x : HANDLE;
      NodeNumber : PUSHORT
   ) return BOOL;
   pragma import (C,GetNumaNodeNumberFromHandle,"GetNumaNodeNumberFromHandle");
   function GetNumaProcessorNodeEx(
      Processor : PPROCESSOR_NUMBER;
      NodeNumber : PUSHORT
   ) return BOOL;
   pragma import (C,GetNumaProcessorNodeEx,"GetNumaProcessorNodeEx");
   function GetNumaNodeProcessorMask(
      Node : UCHAR;
      ProcessorMask : PULONGLONG
   ) return BOOL;
   pragma import (C,GetNumaNodeProcessorMask,"GetNumaNodeProcessorMask");
   function GetNumaAvailableMemoryNode(
      Node : UCHAR;
      AvailableBytes : PULONGLONG
   ) return BOOL;
   pragma import (C,GetNumaAvailableMemoryNode,"GetNumaAvailableMemoryNode");
   function GetNumaAvailableMemoryNodeEx(
      Node : USHORT;
      AvailableBytes : PULONGLONG
   ) return BOOL;
   pragma import (C,GetNumaAvailableMemoryNodeEx,"GetNumaAvailableMemoryNodeEx");
   function GetNumaProximityNode(
      ProximityId : ULONG;
      NodeNumber : PUCHAR
   ) return BOOL;
   pragma import (C,GetNumaProximityNode,"GetNumaProximityNode");
   subtype APPLICATION_RECOVERY_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (PVOID)
   function RegisterApplicationRecoveryCallback(
      pRecoveyCallback : APPLICATION_RECOVERY_CALLBACK;
      pvParameter : PVOID;
      dwPingInterval : DWORD;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,RegisterApplicationRecoveryCallback,"RegisterApplicationRecoveryCallback");
   function UnregisterApplicationRecoveryCallback return HRESULT;
   pragma import (C,UnregisterApplicationRecoveryCallback,"UnregisterApplicationRecoveryCallback");
   function RegisterApplicationRestart(
      pwzCommandline : PCWSTR;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,RegisterApplicationRestart,"RegisterApplicationRestart");
   function UnregisterApplicationRestart return HRESULT;
   pragma import (C,UnregisterApplicationRestart,"UnregisterApplicationRestart");
   function GetApplicationRecoveryCallback(
      hProcess : HANDLE;
      pRecoveryCallback : access APPLICATION_RECOVERY_CALLBACK;
      ppvParameter : access PVOID;
      pdwPingInterval : PDWORD;
      pdwFlags : PDWORD
   ) return HRESULT;
   pragma import (C,GetApplicationRecoveryCallback,"GetApplicationRecoveryCallback");
   function GetApplicationRestartSettings(
      hProcess : HANDLE;
      pwzCommandline : PWSTR;
      pcchSize : PDWORD;
      pdwFlags : PDWORD
   ) return HRESULT;
   pragma import (C,GetApplicationRestartSettings,"GetApplicationRestartSettings");
   function ApplicationRecoveryInProgress(
      pbCancelled : PBOOL
   ) return HRESULT;
   pragma import (C,ApplicationRecoveryInProgress,"ApplicationRecoveryInProgress");
   procedure ApplicationRecoveryFinished(
      bSuccess : BOOL
   );
   pragma import (C,ApplicationRecoveryFinished,"ApplicationRecoveryFinished");
   type FILE_BASIC_INFO_x is record
      CreationTime : LARGE_INTEGER;
      LastAccessTime : LARGE_INTEGER;
      LastWriteTime : LARGE_INTEGER;
      ChangeTime : LARGE_INTEGER;
      FileAttributes : DWORD;
   end record;
   subtype FILE_BASIC_INFO is FILE_BASIC_INFO_x; -- CXType_Elaborated
   type PFILE_BASIC_INFO is access FILE_BASIC_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STANDARD_INFO_x is record
      AllocationSize : LARGE_INTEGER;
      EndOfFile : LARGE_INTEGER;
      NumberOfLinks : DWORD;
      DeletePending : BOOLEAN;
      Directory : BOOLEAN;
   end record;
   subtype FILE_STANDARD_INFO is FILE_STANDARD_INFO_x; -- CXType_Elaborated
   type PFILE_STANDARD_INFO is access FILE_STANDARD_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_NAME_INFO_x is record
      FileNameLength : DWORD;
      FileName : Void;
   end record;
   subtype FILE_NAME_INFO is FILE_NAME_INFO_x; -- CXType_Elaborated
   type PFILE_NAME_INFO is access FILE_NAME_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_RENAME_INFO_x is record
      RootDirectory : HANDLE;
      FileNameLength : DWORD;
      FileName : Void;
   end record;
   subtype FILE_RENAME_INFO is FILE_RENAME_INFO_x; -- CXType_Elaborated
   type PFILE_RENAME_INFO is access FILE_RENAME_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ALLOCATION_INFO_x is record
      AllocationSize : LARGE_INTEGER;
   end record;
   subtype FILE_ALLOCATION_INFO is FILE_ALLOCATION_INFO_x; -- CXType_Elaborated
   type PFILE_ALLOCATION_INFO is access FILE_ALLOCATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_END_OF_FILE_INFO_x is record
      EndOfFile : LARGE_INTEGER;
   end record;
   subtype FILE_END_OF_FILE_INFO is FILE_END_OF_FILE_INFO_x; -- CXType_Elaborated
   type PFILE_END_OF_FILE_INFO is access FILE_END_OF_FILE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STREAM_INFO_x is record
      NextEntryOffset : DWORD;
      StreamNameLength : DWORD;
      StreamSize : LARGE_INTEGER;
      StreamAllocationSize : LARGE_INTEGER;
      StreamName : Void;
   end record;
   subtype FILE_STREAM_INFO is FILE_STREAM_INFO_x; -- CXType_Elaborated
   type PFILE_STREAM_INFO is access FILE_STREAM_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_COMPRESSION_INFO_x is record
      CompressedFileSize : LARGE_INTEGER;
      CompressionFormat : WORD;
      CompressionUnitShift : UCHAR;
      ChunkShift : UCHAR;
      ClusterShift : UCHAR;
      Reserved : Void;
   end record;
   subtype FILE_COMPRESSION_INFO is FILE_COMPRESSION_INFO_x; -- CXType_Elaborated
   type PFILE_COMPRESSION_INFO is access FILE_COMPRESSION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ATTRIBUTE_TAG_INFO_x is record
      FileAttributes : DWORD;
      ReparseTag : DWORD;
   end record;
   subtype FILE_ATTRIBUTE_TAG_INFO is FILE_ATTRIBUTE_TAG_INFO_x; -- CXType_Elaborated
   type PFILE_ATTRIBUTE_TAG_INFO is access FILE_ATTRIBUTE_TAG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_DISPOSITION_INFO_x is record
      DeleteFileA : BOOLEAN;
   end record;
   subtype FILE_DISPOSITION_INFO is FILE_DISPOSITION_INFO_x; -- CXType_Elaborated
   type PFILE_DISPOSITION_INFO is access FILE_DISPOSITION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_DISPOSITION_INFO_EX_x is record
      Flags : DWORD;
   end record;
   subtype FILE_DISPOSITION_INFO_EX is FILE_DISPOSITION_INFO_EX_x; -- CXType_Elaborated
   type PFILE_DISPOSITION_INFO_EX is access FILE_DISPOSITION_INFO_EX_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ID_BOTH_DIR_INFO_x is record
      NextEntryOffset : DWORD;
      FileIndex : DWORD;
      CreationTime : LARGE_INTEGER;
      LastAccessTime : LARGE_INTEGER;
      LastWriteTime : LARGE_INTEGER;
      ChangeTime : LARGE_INTEGER;
      EndOfFile : LARGE_INTEGER;
      AllocationSize : LARGE_INTEGER;
      FileAttributes : DWORD;
      FileNameLength : DWORD;
      EaSize : DWORD;
      ShortNameLength : CCHAR;
      ShortName : Void;
      FileId : LARGE_INTEGER;
      FileName : Void;
   end record;
   subtype FILE_ID_BOTH_DIR_INFO is FILE_ID_BOTH_DIR_INFO_x; -- CXType_Elaborated
   type PFILE_ID_BOTH_DIR_INFO is access FILE_ID_BOTH_DIR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_FULL_DIR_INFO_x is record
      NextEntryOffset : ULONG;
      FileIndex : ULONG;
      CreationTime : LARGE_INTEGER;
      LastAccessTime : LARGE_INTEGER;
      LastWriteTime : LARGE_INTEGER;
      ChangeTime : LARGE_INTEGER;
      EndOfFile : LARGE_INTEGER;
      AllocationSize : LARGE_INTEGER;
      FileAttributes : ULONG;
      FileNameLength : ULONG;
      EaSize : ULONG;
      FileName : Void;
   end record;
   subtype FILE_FULL_DIR_INFO is FILE_FULL_DIR_INFO_x; -- CXType_Elaborated
   type PFILE_FULL_DIR_INFO is access FILE_FULL_DIR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type PRIORITY_HINT_x is (
      IoPriorityHintVeryLow,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
   );
   for PRIORITY_HINT_x use (
      IoPriorityHintVeryLow => 0,
      IoPriorityHintLow => 1,
      IoPriorityHintNormal => 2,
      MaximumIoPriorityHintType => 3
   );
   for PRIORITY_HINT_x'Size use 32;
   subtype PRIORITY_HINT is PRIORITY_HINT_x; -- CXType_Elaborated
   type FILE_IO_PRIORITY_HINT_INFO_x is record
      PriorityHint : PRIORITY_HINT;
   end record;
   subtype FILE_IO_PRIORITY_HINT_INFO is FILE_IO_PRIORITY_HINT_INFO_x; -- CXType_Elaborated
   type PFILE_IO_PRIORITY_HINT_INFO is access FILE_IO_PRIORITY_HINT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ALIGNMENT_INFO_x is record
      AlignmentRequirement : ULONG;
   end record;
   subtype FILE_ALIGNMENT_INFO is FILE_ALIGNMENT_INFO_x; -- CXType_Elaborated
   type PFILE_ALIGNMENT_INFO is access FILE_ALIGNMENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STORAGE_INFO_x is record
      LogicalBytesPerSector : ULONG;
      PhysicalBytesPerSectorForAtomicity : ULONG;
      PhysicalBytesPerSectorForPerformance : ULONG;
      FileSystemEffectivePhysicalBytesPerSectorForAtomicity : ULONG;
      Flags : ULONG;
      ByteOffsetForSectorAlignment : ULONG;
      ByteOffsetForPartitionAlignment : ULONG;
   end record;
   subtype FILE_STORAGE_INFO is FILE_STORAGE_INFO_x; -- CXType_Elaborated
   type PFILE_STORAGE_INFO is access FILE_STORAGE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ID_INFO_x is record
      VolumeSerialNumber : ULONGLONG;
      FileId : FILE_ID_128;
   end record;
   subtype FILE_ID_INFO is FILE_ID_INFO_x; -- CXType_Elaborated
   type PFILE_ID_INFO is access FILE_ID_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ID_EXTD_DIR_INFO_x is record
      NextEntryOffset : ULONG;
      FileIndex : ULONG;
      CreationTime : LARGE_INTEGER;
      LastAccessTime : LARGE_INTEGER;
      LastWriteTime : LARGE_INTEGER;
      ChangeTime : LARGE_INTEGER;
      EndOfFile : LARGE_INTEGER;
      AllocationSize : LARGE_INTEGER;
      FileAttributes : ULONG;
      FileNameLength : ULONG;
      EaSize : ULONG;
      ReparsePointTag : ULONG;
      FileId : FILE_ID_128;
      FileName : Void;
   end record;
   subtype FILE_ID_EXTD_DIR_INFO is FILE_ID_EXTD_DIR_INFO_x; -- CXType_Elaborated
   type PFILE_ID_EXTD_DIR_INFO is access FILE_ID_EXTD_DIR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_REMOTE_PROTOCOL_INFO_x is record
      StructureVersion : USHORT;
      StructureSize : USHORT;
      Protocol : ULONG;
      ProtocolMajorVersion : USHORT;
      ProtocolMinorVersion : USHORT;
      ProtocolRevision : USHORT;
      Reserved : USHORT;
      Flags : ULONG;
      GenericReserved : Void;
      ProtocolSpecific : Void;
   end record;
   subtype FILE_REMOTE_PROTOCOL_INFO is FILE_REMOTE_PROTOCOL_INFO_x; -- CXType_Elaborated
   type PFILE_REMOTE_PROTOCOL_INFO is access FILE_REMOTE_PROTOCOL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function GetFileInformationByHandleEx(
      hFile_x : HANDLE;
      FileInformationClass : FILE_INFO_BY_HANDLE_CLASS;
      lpFileInformation : LPVOID;
      dwBufferSize : DWORD
   ) return BOOL;
   pragma import (C,GetFileInformationByHandleEx,"GetFileInformationByHandleEx");
   type FILE_ID_TYPE_x is (
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
   );
   for FILE_ID_TYPE_x use (
      FileIdType => 0,
      ObjectIdType => 1,
      ExtendedFileIdType => 2,
      MaximumFileIdType => 3
   );
   for FILE_ID_TYPE_x'Size use 32;
   subtype FILE_ID_TYPE is FILE_ID_TYPE_x; -- CXType_Elaborated
   type PFILE_ID_TYPE is access FILE_ID_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ID_DESCRIPTOR is record
      dwSize : DWORD;
      type_x : FILE_ID_TYPE;
   end record;
   type LPFILE_ID_DESCRIPTOR is access FILE_ID_DESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   function OpenFileById(
      hVolumeHint : HANDLE;
      lpFileId : LPFILE_ID_DESCRIPTOR;
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      dwFlagsAndAttributes : DWORD
   ) return HANDLE;
   pragma import (C,OpenFileById,"OpenFileById");
   function CreateSymbolicLinkA(
      lpSymlinkFileName : LPCSTR;
      lpTargetFileName : LPCSTR;
      dwFlags : DWORD
   ) return BOOLEAN;
   pragma import (C,CreateSymbolicLinkA,"CreateSymbolicLinkA");
   function CreateSymbolicLinkW(
      lpSymlinkFileName : LPCWSTR;
      lpTargetFileName : LPCWSTR;
      dwFlags : DWORD
   ) return BOOLEAN;
   pragma import (C,CreateSymbolicLinkW,"CreateSymbolicLinkW");
   function QueryActCtxSettingsW(
      dwFlags : DWORD;
      hActCtx : HANDLE;
      settingsNameSpace : PCWSTR;
      settingName : PCWSTR;
      pvBuffer : PWSTR;
      dwBuffer : SIZE_T;
      pdwWrittenOrRequired : access SIZE_T
   ) return BOOL;
   pragma import (C,QueryActCtxSettingsW,"QueryActCtxSettingsW");
   function CreateSymbolicLinkTransactedA(
      lpSymlinkFileName : LPCSTR;
      lpTargetFileName : LPCSTR;
      dwFlags : DWORD;
      hTransaction : HANDLE
   ) return BOOLEAN;
   pragma import (C,CreateSymbolicLinkTransactedA,"CreateSymbolicLinkTransactedA");
   function CreateSymbolicLinkTransactedW(
      lpSymlinkFileName : LPCWSTR;
      lpTargetFileName : LPCWSTR;
      dwFlags : DWORD;
      hTransaction : HANDLE
   ) return BOOLEAN;
   pragma import (C,CreateSymbolicLinkTransactedW,"CreateSymbolicLinkTransactedW");
   function ReplacePartitionUnit(
      TargetPartition : PWSTR;
      SparePartition : PWSTR;
      Flags : ULONG
   ) return BOOL;
   pragma import (C,ReplacePartitionUnit,"ReplacePartitionUnit");
   function AddSecureMemoryCacheCallback(
      pfnCallBack : PSECURE_MEMORY_CACHE_CALLBACK
   ) return BOOL;
   pragma import (C,AddSecureMemoryCacheCallback,"AddSecureMemoryCacheCallback");
   function RemoveSecureMemoryCacheCallback(
      pfnCallBack : PSECURE_MEMORY_CACHE_CALLBACK
   ) return BOOL;
   pragma import (C,RemoveSecureMemoryCacheCallback,"RemoveSecureMemoryCacheCallback");
   function CopyContext(
      Destination : PCONTEXT;
      ContextFlags : DWORD;
      Source : PCONTEXT
   ) return BOOL;
   pragma import (C,CopyContext,"CopyContext");
   function InitializeContext(
      Buffer : PVOID;
      ContextFlags : DWORD;
      Context_x : access PCONTEXT;
      ContextLength : PDWORD
   ) return BOOL;
   pragma import (C,InitializeContext,"InitializeContext");
   function GetEnabledXStateFeatures return DWORD64;
   pragma import (C,GetEnabledXStateFeatures,"GetEnabledXStateFeatures");
   function GetXStateFeaturesMask(
      Context_x : PCONTEXT;
      FeatureMask : PDWORD64
   ) return BOOL;
   pragma import (C,GetXStateFeaturesMask,"GetXStateFeaturesMask");
   procedure LocateXStateFeature(
      Context_x : PCONTEXT;
      FeatureId : DWORD;
      Length : PDWORD
   );
   pragma import (C,LocateXStateFeature,"LocateXStateFeature");
   function SetXStateFeaturesMask(
      Context_x : PCONTEXT;
      FeatureMask : DWORD64
   ) return BOOL;
   pragma import (C,SetXStateFeaturesMask,"SetXStateFeaturesMask");
   function EnableThreadProfiling(
      ThreadHandle : HANDLE;
      Flags : DWORD;
      HardwareCounters : DWORD64;
      PerformanceDataHandle : access HANDLE
   ) return DWORD;
   pragma import (C,EnableThreadProfiling,"EnableThreadProfiling");
   function DisableThreadProfiling(
      PerformanceDataHandle : HANDLE
   ) return DWORD;
   pragma import (C,DisableThreadProfiling,"DisableThreadProfiling");
   function QueryThreadProfiling(
      ThreadHandle : HANDLE;
      Enabled : PBOOLEAN
   ) return DWORD;
   pragma import (C,QueryThreadProfiling,"QueryThreadProfiling");
   function ReadThreadProfilingData(
      PerformanceDataHandle : HANDLE;
      Flags : DWORD;
      PerformanceData : PPERFORMANCE_DATA
   ) return DWORD;
   pragma import (C,ReadThreadProfilingData,"ReadThreadProfilingData");
   function RaiseCustomSystemEventTrigger(
      CustomSystemEventTriggerConfig : PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
   ) return DWORD;
   pragma import (C,RaiseCustomSystemEventTrigger,"RaiseCustomSystemEventTrigger");
   -- InterlockedExchangeSubtract(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\wingdi.h>
   type DRAWPATRECT_x is record
      ptPosition : POINT;
      ptSize : POINT;
      wStyle : WORD;
      wPattern : WORD;
   end record;
   subtype DRAWPATRECT is DRAWPATRECT_x; -- CXType_Elaborated
   type PDRAWPATRECT is access DRAWPATRECT_x; -- CXType_Pointer - CXType_Elaborated
   type PSINJECTDATA_x is record
      DataBytes : DWORD;
      InjectionPoint : WORD;
      PageNumber : WORD;
   end record;
   subtype PSINJECTDATA is PSINJECTDATA_x; -- CXType_Elaborated
   type PPSINJECTDATA is access PSINJECTDATA_x; -- CXType_Pointer - CXType_Elaborated
   type PSFEATURE_OUTPUT_x is record
      bPageIndependent : BOOL;
      bSetPageDevice : BOOL;
   end record;
   subtype PSFEATURE_OUTPUT is PSFEATURE_OUTPUT_x; -- CXType_Elaborated
   type PPSFEATURE_OUTPUT is access PSFEATURE_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type PSFEATURE_CUSTPAPER_x is record
      lOrientation : LONG;
      lWidth : LONG;
      lHeight : LONG;
      lWidthOffset : LONG;
      lHeightOffset : LONG;
   end record;
   subtype PSFEATURE_CUSTPAPER is PSFEATURE_CUSTPAPER_x; -- CXType_Elaborated
   type PPSFEATURE_CUSTPAPER is access PSFEATURE_CUSTPAPER_x; -- CXType_Pointer - CXType_Elaborated
   type tagXFORM is record
      eM11 : FLOAT;
      eM12 : FLOAT;
      eM21 : FLOAT;
      eM22 : FLOAT;
      eDx : FLOAT;
      eDy : FLOAT;
   end record;
   subtype XFORM is tagXFORM; -- CXType_Elaborated
   type PXFORM is access tagXFORM; -- CXType_Pointer - CXType_Elaborated
   type LPXFORM is access tagXFORM; -- CXType_Pointer - CXType_Elaborated
   type tagBITMAP is record
      bmType : LONG;
      bmWidth : LONG;
      bmHeight : LONG;
      bmWidthBytes : LONG;
      bmPlanes : WORD;
      bmBitsPixel : WORD;
      bmBits : LPVOID;
   end record;
   subtype BITMAP is tagBITMAP; -- CXType_Elaborated
   type PBITMAP is access tagBITMAP; -- CXType_Pointer - CXType_Elaborated
   type NPBITMAP is access tagBITMAP; -- CXType_Pointer - CXType_Elaborated
   type LPBITMAP is access tagBITMAP; -- CXType_Pointer - CXType_Elaborated
   type tagRGBTRIPLE is record
      rgbtBlue : BYTE;
      rgbtGreen : BYTE;
      rgbtRed : BYTE;
   end record;
   subtype RGBTRIPLE is tagRGBTRIPLE; -- CXType_Elaborated
   type PRGBTRIPLE is access tagRGBTRIPLE; -- CXType_Pointer - CXType_Elaborated
   type NPRGBTRIPLE is access tagRGBTRIPLE; -- CXType_Pointer - CXType_Elaborated
   type LPRGBTRIPLE is access tagRGBTRIPLE; -- CXType_Pointer - CXType_Elaborated
   type tagRGBQUAD is record
      rgbBlue : BYTE;
      rgbGreen : BYTE;
      rgbRed : BYTE;
      rgbReserved : BYTE;
   end record;
   subtype RGBQUAD is tagRGBQUAD; -- CXType_Elaborated
   type LPRGBQUAD is access RGBQUAD; -- CXType_Pointer - CXType_Typedef
   subtype LCSCSTYPE is LONG; -- CXType_Typedef
   subtype LCSGAMUTMATCH is LONG; -- CXType_Typedef
   subtype FXPT16DOT16 is Interfaces.C.Long; -- CXType_Long
   type LPFXPT16DOT16 is access Interfaces.C.Long; -- CXType_Pointer - CXType_Long
   subtype FXPT2DOT30 is Interfaces.C.Long; -- CXType_Long
   type LPFXPT2DOT30 is access Interfaces.C.Long; -- CXType_Pointer - CXType_Long
   type tagCIEXYZ is record
      ciexyzX : FXPT2DOT30;
      ciexyzY : FXPT2DOT30;
      ciexyzZ : FXPT2DOT30;
   end record;
   subtype CIEXYZ is tagCIEXYZ; -- CXType_Elaborated
   type LPCIEXYZ is access CIEXYZ; -- CXType_Pointer - CXType_Typedef
   type tagICEXYZTRIPLE is record
      ciexyzRed : CIEXYZ;
      ciexyzGreen : CIEXYZ;
      ciexyzBlue : CIEXYZ;
   end record;
   subtype CIEXYZTRIPLE is tagICEXYZTRIPLE; -- CXType_Elaborated
   type LPCIEXYZTRIPLE is access CIEXYZTRIPLE; -- CXType_Pointer - CXType_Typedef
   type tagLOGCOLORSPACEA is record
      lcsSignature : DWORD;
      lcsVersion : DWORD;
      lcsSize : DWORD;
      lcsCSType_x : LCSCSTYPE;
      lcsIntent : LCSGAMUTMATCH;
      lcsEndpoints : CIEXYZTRIPLE;
      lcsGammaRed : DWORD;
      lcsGammaGreen : DWORD;
      lcsGammaBlue : DWORD;
      lcsFilename : Void;
   end record;
   subtype LOGCOLORSPACEA is tagLOGCOLORSPACEA; -- CXType_Elaborated
   type LPLOGCOLORSPACEA is access tagLOGCOLORSPACEA; -- CXType_Pointer - CXType_Elaborated
   type tagLOGCOLORSPACEW is record
      lcsSignature : DWORD;
      lcsVersion : DWORD;
      lcsSize : DWORD;
      lcsCSType_x : LCSCSTYPE;
      lcsIntent : LCSGAMUTMATCH;
      lcsEndpoints : CIEXYZTRIPLE;
      lcsGammaRed : DWORD;
      lcsGammaGreen : DWORD;
      lcsGammaBlue : DWORD;
      lcsFilename : Void;
   end record;
   subtype LOGCOLORSPACEW is tagLOGCOLORSPACEW; -- CXType_Elaborated
   type LPLOGCOLORSPACEW is access tagLOGCOLORSPACEW; -- CXType_Pointer - CXType_Elaborated
   subtype LOGCOLORSPACE is LOGCOLORSPACEA; -- CXType_Typedef
   subtype LPLOGCOLORSPACE is LPLOGCOLORSPACEA; -- CXType_Typedef
   type tagBITMAPCOREHEADER is record
      bcSize : DWORD;
      bcWidth : WORD;
      bcHeight : WORD;
      bcPlanes : WORD;
      bcBitCount : WORD;
   end record;
   subtype BITMAPCOREHEADER is tagBITMAPCOREHEADER; -- CXType_Elaborated
   type LPBITMAPCOREHEADER is access tagBITMAPCOREHEADER; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPCOREHEADER is access tagBITMAPCOREHEADER; -- CXType_Pointer - CXType_Elaborated
   type tagBITMAPINFOHEADER is record
      biSize : DWORD;
      biWidth : LONG;
      biHeight : LONG;
      biPlanes : WORD;
      biBitCount : WORD;
      biCompression : DWORD;
      biSizeImage : DWORD;
      biXPelsPerMeter : LONG;
      biYPelsPerMeter : LONG;
      biClrUsed : DWORD;
      biClrImportant : DWORD;
   end record;
   subtype BITMAPINFOHEADER is tagBITMAPINFOHEADER; -- CXType_Elaborated
   type LPBITMAPINFOHEADER is access tagBITMAPINFOHEADER; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPINFOHEADER is access tagBITMAPINFOHEADER; -- CXType_Pointer - CXType_Elaborated
   type BITMAPV4HEADER is record
      bV4Size : DWORD;
      bV4Width : LONG;
      bV4Height : LONG;
      bV4Planes : WORD;
      bV4BitCount : WORD;
      bV4V4Compression : DWORD;
      bV4SizeImage : DWORD;
      bV4XPelsPerMeter : LONG;
      bV4YPelsPerMeter : LONG;
      bV4ClrUsed : DWORD;
      bV4ClrImportant : DWORD;
      bV4RedMask : DWORD;
      bV4GreenMask : DWORD;
      bV4BlueMask : DWORD;
      bV4AlphaMask : DWORD;
      bV4CSType : DWORD;
      bV4Endpoints : CIEXYZTRIPLE;
      bV4GammaRed : DWORD;
      bV4GammaGreen : DWORD;
      bV4GammaBlue : DWORD;
   end record;
   type LPBITMAPV4HEADER is access BITMAPV4HEADER; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPV4HEADER is access BITMAPV4HEADER; -- CXType_Pointer - CXType_Elaborated
   type BITMAPV5HEADER is record
      bV5Size : DWORD;
      bV5Width : LONG;
      bV5Height : LONG;
      bV5Planes : WORD;
      bV5BitCount : WORD;
      bV5Compression : DWORD;
      bV5SizeImage : DWORD;
      bV5XPelsPerMeter : LONG;
      bV5YPelsPerMeter : LONG;
      bV5ClrUsed : DWORD;
      bV5ClrImportant : DWORD;
      bV5RedMask : DWORD;
      bV5GreenMask : DWORD;
      bV5BlueMask : DWORD;
      bV5AlphaMask : DWORD;
      bV5CSType : DWORD;
      bV5Endpoints : CIEXYZTRIPLE;
      bV5GammaRed : DWORD;
      bV5GammaGreen : DWORD;
      bV5GammaBlue : DWORD;
      bV5Intent : DWORD;
      bV5ProfileData : DWORD;
      bV5ProfileSize : DWORD;
      bV5Reserved : DWORD;
   end record;
   type LPBITMAPV5HEADER is access BITMAPV5HEADER; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPV5HEADER is access BITMAPV5HEADER; -- CXType_Pointer - CXType_Elaborated
   type tagBITMAPINFO is record
      bmiHeader : BITMAPINFOHEADER;
      bmiColors : Void;
   end record;
   subtype BITMAPINFO is tagBITMAPINFO; -- CXType_Elaborated
   type LPBITMAPINFO is access tagBITMAPINFO; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPINFO is access tagBITMAPINFO; -- CXType_Pointer - CXType_Elaborated
   type tagBITMAPCOREINFO is record
      bmciHeader : BITMAPCOREHEADER;
      bmciColors : Void;
   end record;
   subtype BITMAPCOREINFO is tagBITMAPCOREINFO; -- CXType_Elaborated
   type LPBITMAPCOREINFO is access tagBITMAPCOREINFO; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPCOREINFO is access tagBITMAPCOREINFO; -- CXType_Pointer - CXType_Elaborated
   type tagBITMAPFILEHEADER is record
      bfType : WORD;
      bfSize : DWORD;
      bfReserved1 : WORD;
      bfReserved2 : WORD;
      bfOffBits : DWORD;
   end record;
   subtype BITMAPFILEHEADER is tagBITMAPFILEHEADER; -- CXType_Elaborated
   type LPBITMAPFILEHEADER is access tagBITMAPFILEHEADER; -- CXType_Pointer - CXType_Elaborated
   type PBITMAPFILEHEADER is access tagBITMAPFILEHEADER; -- CXType_Pointer - CXType_Elaborated
   type tagFONTSIGNATURE is record
      fsUsb : Void;
      fsCsb : Void;
   end record;
   subtype FONTSIGNATURE is tagFONTSIGNATURE; -- CXType_Elaborated
   type PFONTSIGNATURE is access tagFONTSIGNATURE; -- CXType_Pointer - CXType_Elaborated
   type LPFONTSIGNATURE is access tagFONTSIGNATURE; -- CXType_Pointer - CXType_Elaborated
   type tagCHARSETINFO is record
      ciCharset : UINT;
      ciACP : UINT;
      fs : FONTSIGNATURE;
   end record;
   subtype CHARSETINFO is tagCHARSETINFO; -- CXType_Elaborated
   type PCHARSETINFO is access tagCHARSETINFO; -- CXType_Pointer - CXType_Elaborated
   type NPCHARSETINFO is access tagCHARSETINFO; -- CXType_Pointer - CXType_Elaborated
   type LPCHARSETINFO is access tagCHARSETINFO; -- CXType_Pointer - CXType_Elaborated
   type tagLOCALESIGNATURE is record
      lsUsb : Void;
      lsCsbDefault : Void;
      lsCsbSupported : Void;
   end record;
   subtype LOCALESIGNATURE is tagLOCALESIGNATURE; -- CXType_Elaborated
   type PLOCALESIGNATURE is access tagLOCALESIGNATURE; -- CXType_Pointer - CXType_Elaborated
   type LPLOCALESIGNATURE is access tagLOCALESIGNATURE; -- CXType_Pointer - CXType_Elaborated
   type tagHANDLETABLE is record
      objectHandle : Void;
   end record;
   subtype HANDLETABLE is tagHANDLETABLE; -- CXType_Elaborated
   type PHANDLETABLE is access tagHANDLETABLE; -- CXType_Pointer - CXType_Elaborated
   type LPHANDLETABLE is access tagHANDLETABLE; -- CXType_Pointer - CXType_Elaborated
   type tagMETARECORD is record
      rdSize : DWORD;
      rdFunction : WORD;
      rdParm : Void;
   end record;
   subtype METARECORD is tagMETARECORD; -- CXType_Elaborated
   type PMETARECORD is access tagMETARECORD; -- CXType_Pointer - CXType_Elaborated
   type LPMETARECORD is access tagMETARECORD; -- CXType_Pointer - CXType_Elaborated
   type tagMETAFILEPICT is record
      mm : LONG;
      xExt : LONG;
      yExt : LONG;
      hMF : HMETAFILE;
   end record;
   subtype METAFILEPICT is tagMETAFILEPICT; -- CXType_Elaborated
   type LPMETAFILEPICT is access tagMETAFILEPICT; -- CXType_Pointer - CXType_Elaborated
   type tagMETAHEADER is record
      mtType : WORD;
      mtHeaderSize : WORD;
      mtVersion : WORD;
      mtSize : DWORD;
      mtNoObjects : WORD;
      mtMaxRecord : DWORD;
      mtNoParameters : WORD;
   end record;
   subtype METAHEADER is tagMETAHEADER; -- CXType_Elaborated
   type PMETAHEADER is access tagMETAHEADER; -- CXType_Pointer - CXType_Elaborated
   type LPMETAHEADER is access tagMETAHEADER; -- CXType_Pointer - CXType_Elaborated
   type tagENHMETARECORD is record
      iType : DWORD;
      nSize : DWORD;
      dParm : Void;
   end record;
   subtype ENHMETARECORD is tagENHMETARECORD; -- CXType_Elaborated
   type PENHMETARECORD is access tagENHMETARECORD; -- CXType_Pointer - CXType_Elaborated
   type LPENHMETARECORD is access tagENHMETARECORD; -- CXType_Pointer - CXType_Elaborated
   type tagENHMETAHEADER is record
      iType : DWORD;
      nSize : DWORD;
      rclBounds : RECTL;
      rclFrame : RECTL;
      dSignature : DWORD;
      nVersion : DWORD;
      nBytes : DWORD;
      nRecords : DWORD;
      nHandles : WORD;
      sReserved : WORD;
      nDescription : DWORD;
      offDescription : DWORD;
      nPalEntries : DWORD;
      szlDevice : SIZEL;
      szlMillimeters : SIZEL;
      cbPixelFormat : DWORD;
      offPixelFormat : DWORD;
      bOpenGL : DWORD;
      szlMicrometers : SIZEL;
   end record;
   subtype ENHMETAHEADER is tagENHMETAHEADER; -- CXType_Elaborated
   type PENHMETAHEADER is access tagENHMETAHEADER; -- CXType_Pointer - CXType_Elaborated
   type LPENHMETAHEADER is access tagENHMETAHEADER; -- CXType_Pointer - CXType_Elaborated
   subtype BCHAR is BYTE; -- CXType_Typedef
   type tagTEXTMETRICA is record
      tmHeight : LONG;
      tmAscent : LONG;
      tmDescent : LONG;
      tmInternalLeading : LONG;
      tmExternalLeading : LONG;
      tmAveCharWidth : LONG;
      tmMaxCharWidth : LONG;
      tmWeight : LONG;
      tmOverhang : LONG;
      tmDigitizedAspectX : LONG;
      tmDigitizedAspectY : LONG;
      tmFirstChar : BYTE;
      tmLastChar : BYTE;
      tmDefaultChar : BYTE;
      tmBreakChar : BYTE;
      tmItalic : BYTE;
      tmUnderlined : BYTE;
      tmStruckOut : BYTE;
      tmPitchAndFamily : BYTE;
      tmCharSet : BYTE;
   end record;
   subtype TEXTMETRICA is tagTEXTMETRICA; -- CXType_Elaborated
   type PTEXTMETRICA is access tagTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type NPTEXTMETRICA is access tagTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type LPTEXTMETRICA is access tagTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type tagTEXTMETRICW is record
      tmHeight : LONG;
      tmAscent : LONG;
      tmDescent : LONG;
      tmInternalLeading : LONG;
      tmExternalLeading : LONG;
      tmAveCharWidth : LONG;
      tmMaxCharWidth : LONG;
      tmWeight : LONG;
      tmOverhang : LONG;
      tmDigitizedAspectX : LONG;
      tmDigitizedAspectY : LONG;
      tmFirstChar : WCHAR;
      tmLastChar : WCHAR;
      tmDefaultChar : WCHAR;
      tmBreakChar : WCHAR;
      tmItalic : BYTE;
      tmUnderlined : BYTE;
      tmStruckOut : BYTE;
      tmPitchAndFamily : BYTE;
      tmCharSet : BYTE;
   end record;
   subtype TEXTMETRICW is tagTEXTMETRICW; -- CXType_Elaborated
   type PTEXTMETRICW is access tagTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   type NPTEXTMETRICW is access tagTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   type LPTEXTMETRICW is access tagTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   subtype TEXTMETRIC is TEXTMETRICA; -- CXType_Typedef
   subtype PTEXTMETRIC is PTEXTMETRICA; -- CXType_Typedef
   subtype NPTEXTMETRIC is NPTEXTMETRICA; -- CXType_Typedef
   subtype LPTEXTMETRIC is LPTEXTMETRICA; -- CXType_Typedef
   type tagNEWTEXTMETRICA is record
      tmHeight : LONG;
      tmAscent : LONG;
      tmDescent : LONG;
      tmInternalLeading : LONG;
      tmExternalLeading : LONG;
      tmAveCharWidth : LONG;
      tmMaxCharWidth : LONG;
      tmWeight : LONG;
      tmOverhang : LONG;
      tmDigitizedAspectX : LONG;
      tmDigitizedAspectY : LONG;
      tmFirstChar : BYTE;
      tmLastChar : BYTE;
      tmDefaultChar : BYTE;
      tmBreakChar : BYTE;
      tmItalic : BYTE;
      tmUnderlined : BYTE;
      tmStruckOut : BYTE;
      tmPitchAndFamily : BYTE;
      tmCharSet : BYTE;
      ntmFlags : DWORD;
      ntmSizeEM : UINT;
      ntmCellHeight : UINT;
      ntmAvgWidth : UINT;
   end record;
   subtype NEWTEXTMETRICA is tagNEWTEXTMETRICA; -- CXType_Elaborated
   type PNEWTEXTMETRICA is access tagNEWTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type NPNEWTEXTMETRICA is access tagNEWTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type LPNEWTEXTMETRICA is access tagNEWTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type tagNEWTEXTMETRICW is record
      tmHeight : LONG;
      tmAscent : LONG;
      tmDescent : LONG;
      tmInternalLeading : LONG;
      tmExternalLeading : LONG;
      tmAveCharWidth : LONG;
      tmMaxCharWidth : LONG;
      tmWeight : LONG;
      tmOverhang : LONG;
      tmDigitizedAspectX : LONG;
      tmDigitizedAspectY : LONG;
      tmFirstChar : WCHAR;
      tmLastChar : WCHAR;
      tmDefaultChar : WCHAR;
      tmBreakChar : WCHAR;
      tmItalic : BYTE;
      tmUnderlined : BYTE;
      tmStruckOut : BYTE;
      tmPitchAndFamily : BYTE;
      tmCharSet : BYTE;
      ntmFlags : DWORD;
      ntmSizeEM : UINT;
      ntmCellHeight : UINT;
      ntmAvgWidth : UINT;
   end record;
   subtype NEWTEXTMETRICW is tagNEWTEXTMETRICW; -- CXType_Elaborated
   type PNEWTEXTMETRICW is access tagNEWTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   type NPNEWTEXTMETRICW is access tagNEWTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   type LPNEWTEXTMETRICW is access tagNEWTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   subtype NEWTEXTMETRIC is NEWTEXTMETRICA; -- CXType_Typedef
   subtype PNEWTEXTMETRIC is PNEWTEXTMETRICA; -- CXType_Typedef
   subtype NPNEWTEXTMETRIC is NPNEWTEXTMETRICA; -- CXType_Typedef
   subtype LPNEWTEXTMETRIC is LPNEWTEXTMETRICA; -- CXType_Typedef
   type tagNEWTEXTMETRICEXA is record
      ntmTm : NEWTEXTMETRICA;
      ntmFontSig : FONTSIGNATURE;
   end record;
   subtype NEWTEXTMETRICEXA is tagNEWTEXTMETRICEXA; -- CXType_Elaborated
   type tagNEWTEXTMETRICEXW is record
      ntmTm : NEWTEXTMETRICW;
      ntmFontSig : FONTSIGNATURE;
   end record;
   subtype NEWTEXTMETRICEXW is tagNEWTEXTMETRICEXW; -- CXType_Elaborated
   subtype NEWTEXTMETRICEX is NEWTEXTMETRICEXA; -- CXType_Typedef
   type tagPELARRAY is record
      paXCount : LONG;
      paYCount : LONG;
      paXExt : LONG;
      paYExt : LONG;
      paRGBs : BYTE;
   end record;
   subtype PELARRAY is tagPELARRAY; -- CXType_Elaborated
   type PPELARRAY is access tagPELARRAY; -- CXType_Pointer - CXType_Elaborated
   type NPPELARRAY is access tagPELARRAY; -- CXType_Pointer - CXType_Elaborated
   type LPPELARRAY is access tagPELARRAY; -- CXType_Pointer - CXType_Elaborated
   type tagLOGBRUSH is record
      lbStyle : UINT;
      lbColor : COLORREF;
      lbHatch : ULONG_PTR;
   end record;
   subtype LOGBRUSH is tagLOGBRUSH; -- CXType_Elaborated
   type PLOGBRUSH is access tagLOGBRUSH; -- CXType_Pointer - CXType_Elaborated
   type NPLOGBRUSH is access tagLOGBRUSH; -- CXType_Pointer - CXType_Elaborated
   type LPLOGBRUSH is access tagLOGBRUSH; -- CXType_Pointer - CXType_Elaborated
   type tagLOGBRUSH32 is record
      lbStyle : UINT;
      lbColor : COLORREF;
      lbHatch : ULONG;
   end record;
   subtype LOGBRUSH32 is tagLOGBRUSH32; -- CXType_Elaborated
   type PLOGBRUSH32 is access tagLOGBRUSH32; -- CXType_Pointer - CXType_Elaborated
   type NPLOGBRUSH32 is access tagLOGBRUSH32; -- CXType_Pointer - CXType_Elaborated
   type LPLOGBRUSH32 is access tagLOGBRUSH32; -- CXType_Pointer - CXType_Elaborated
   subtype PATTERN is LOGBRUSH; -- CXType_Typedef
   type PPATTERN is access PATTERN; -- CXType_Pointer - CXType_Typedef
   type NPPATTERN is access PATTERN; -- CXType_Pointer - CXType_Typedef
   type LPPATTERN is access PATTERN; -- CXType_Pointer - CXType_Typedef
   type tagLOGPEN is record
      lopnStyle : UINT;
      lopnWidth : POINT;
      lopnColor : COLORREF;
   end record;
   subtype LOGPEN is tagLOGPEN; -- CXType_Elaborated
   type PLOGPEN is access tagLOGPEN; -- CXType_Pointer - CXType_Elaborated
   type NPLOGPEN is access tagLOGPEN; -- CXType_Pointer - CXType_Elaborated
   type LPLOGPEN is access tagLOGPEN; -- CXType_Pointer - CXType_Elaborated
   type tagEXTLOGPEN is record
      elpPenStyle : DWORD;
      elpWidth : DWORD;
      elpBrushStyle : UINT;
      elpColor : COLORREF;
      elpHatch : ULONG_PTR;
      elpNumEntries : DWORD;
      elpStyleEntry : Void;
   end record;
   subtype EXTLOGPEN is tagEXTLOGPEN; -- CXType_Elaborated
   type PEXTLOGPEN is access tagEXTLOGPEN; -- CXType_Pointer - CXType_Elaborated
   type NPEXTLOGPEN is access tagEXTLOGPEN; -- CXType_Pointer - CXType_Elaborated
   type LPEXTLOGPEN is access tagEXTLOGPEN; -- CXType_Pointer - CXType_Elaborated
   type tagEXTLOGPEN32 is record
      elpPenStyle : DWORD;
      elpWidth : DWORD;
      elpBrushStyle : UINT;
      elpColor : COLORREF;
      elpHatch : ULONG;
      elpNumEntries : DWORD;
      elpStyleEntry : Void;
   end record;
   subtype EXTLOGPEN32 is tagEXTLOGPEN32; -- CXType_Elaborated
   type PEXTLOGPEN32 is access tagEXTLOGPEN32; -- CXType_Pointer - CXType_Elaborated
   type NPEXTLOGPEN32 is access tagEXTLOGPEN32; -- CXType_Pointer - CXType_Elaborated
   type LPEXTLOGPEN32 is access tagEXTLOGPEN32; -- CXType_Pointer - CXType_Elaborated
   type tagPALETTEENTRY is record
      peRed : BYTE;
      peGreen : BYTE;
      peBlue : BYTE;
      peFlags : BYTE;
   end record;
   subtype PALETTEENTRY is tagPALETTEENTRY; -- CXType_Elaborated
   type PPALETTEENTRY is access tagPALETTEENTRY; -- CXType_Pointer - CXType_Elaborated
   type LPPALETTEENTRY is access tagPALETTEENTRY; -- CXType_Pointer - CXType_Elaborated
   type tagLOGPALETTE is record
      palVersion : WORD;
      palNumEntries : WORD;
      palPalEntry : Void;
   end record;
   subtype LOGPALETTE is tagLOGPALETTE; -- CXType_Elaborated
   type PLOGPALETTE is access tagLOGPALETTE; -- CXType_Pointer - CXType_Elaborated
   type NPLOGPALETTE is access tagLOGPALETTE; -- CXType_Pointer - CXType_Elaborated
   type LPLOGPALETTE is access tagLOGPALETTE; -- CXType_Pointer - CXType_Elaborated
   type tagLOGFONTA is record
      lfHeight : LONG;
      lfWidth : LONG;
      lfEscapement : LONG;
      lfOrientation : LONG;
      lfWeight : LONG;
      lfItalic : BYTE;
      lfUnderline : BYTE;
      lfStrikeOut : BYTE;
      lfCharSet : BYTE;
      lfOutPrecision : BYTE;
      lfClipPrecision : BYTE;
      lfQuality : BYTE;
      lfPitchAndFamily : BYTE;
      lfFaceName : Void;
   end record;
   subtype LOGFONTA is tagLOGFONTA; -- CXType_Elaborated
   type PLOGFONTA is access tagLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type NPLOGFONTA is access tagLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type LPLOGFONTA is access tagLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type tagLOGFONTW is record
      lfHeight : LONG;
      lfWidth : LONG;
      lfEscapement : LONG;
      lfOrientation : LONG;
      lfWeight : LONG;
      lfItalic : BYTE;
      lfUnderline : BYTE;
      lfStrikeOut : BYTE;
      lfCharSet : BYTE;
      lfOutPrecision : BYTE;
      lfClipPrecision : BYTE;
      lfQuality : BYTE;
      lfPitchAndFamily : BYTE;
      lfFaceName : Void;
   end record;
   subtype LOGFONTW is tagLOGFONTW; -- CXType_Elaborated
   type PLOGFONTW is access tagLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   type NPLOGFONTW is access tagLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   type LPLOGFONTW is access tagLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   subtype LOGFONT is LOGFONTA; -- CXType_Typedef
   subtype PLOGFONT is PLOGFONTA; -- CXType_Typedef
   subtype NPLOGFONT is NPLOGFONTA; -- CXType_Typedef
   subtype LPLOGFONT is LPLOGFONTA; -- CXType_Typedef
   type tagENUMLOGFONTA is record
      elfLogFont : LOGFONTA;
      elfFullName : Void;
      elfStyle : Void;
   end record;
   subtype ENUMLOGFONTA is tagENUMLOGFONTA; -- CXType_Elaborated
   type LPENUMLOGFONTA is access tagENUMLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type tagENUMLOGFONTW is record
      elfLogFont : LOGFONTW;
      elfFullName : Void;
      elfStyle : Void;
   end record;
   subtype ENUMLOGFONTW is tagENUMLOGFONTW; -- CXType_Elaborated
   type LPENUMLOGFONTW is access tagENUMLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   subtype ENUMLOGFONT is ENUMLOGFONTA; -- CXType_Typedef
   subtype LPENUMLOGFONT is LPENUMLOGFONTA; -- CXType_Typedef
   type tagENUMLOGFONTEXA is record
      elfLogFont : LOGFONTA;
      elfFullName : Void;
      elfStyle : Void;
      elfScript : Void;
   end record;
   subtype ENUMLOGFONTEXA is tagENUMLOGFONTEXA; -- CXType_Elaborated
   type LPENUMLOGFONTEXA is access tagENUMLOGFONTEXA; -- CXType_Pointer - CXType_Elaborated
   type tagENUMLOGFONTEXW is record
      elfLogFont : LOGFONTW;
      elfFullName : Void;
      elfStyle : Void;
      elfScript : Void;
   end record;
   subtype ENUMLOGFONTEXW is tagENUMLOGFONTEXW; -- CXType_Elaborated
   type LPENUMLOGFONTEXW is access tagENUMLOGFONTEXW; -- CXType_Pointer - CXType_Elaborated
   subtype ENUMLOGFONTEX is ENUMLOGFONTEXA; -- CXType_Typedef
   subtype LPENUMLOGFONTEX is LPENUMLOGFONTEXA; -- CXType_Typedef
   type tagPANOSE is record
      bFamilyType : BYTE;
      bSerifStyle : BYTE;
      bWeight : BYTE;
      bProportion : BYTE;
      bContrast : BYTE;
      bStrokeVariation : BYTE;
      bArmStyle : BYTE;
      bLetterform : BYTE;
      bMidline : BYTE;
      bXHeight : BYTE;
   end record;
   subtype PANOSE is tagPANOSE; -- CXType_Elaborated
   type LPPANOSE is access tagPANOSE; -- CXType_Pointer - CXType_Elaborated
   type tagEXTLOGFONTA is record
      elfLogFont : LOGFONTA;
      elfFullName : Void;
      elfStyle : Void;
      elfVersion : DWORD;
      elfStyleSize : DWORD;
      elfMatch : DWORD;
      elfReserved : DWORD;
      elfVendorId : Void;
      elfCulture : DWORD;
      elfPanose : PANOSE;
   end record;
   subtype EXTLOGFONTA is tagEXTLOGFONTA; -- CXType_Elaborated
   type PEXTLOGFONTA is access tagEXTLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type NPEXTLOGFONTA is access tagEXTLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type LPEXTLOGFONTA is access tagEXTLOGFONTA; -- CXType_Pointer - CXType_Elaborated
   type tagEXTLOGFONTW is record
      elfLogFont : LOGFONTW;
      elfFullName : Void;
      elfStyle : Void;
      elfVersion : DWORD;
      elfStyleSize : DWORD;
      elfMatch : DWORD;
      elfReserved : DWORD;
      elfVendorId : Void;
      elfCulture : DWORD;
      elfPanose : PANOSE;
   end record;
   subtype EXTLOGFONTW is tagEXTLOGFONTW; -- CXType_Elaborated
   type PEXTLOGFONTW is access tagEXTLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   type NPEXTLOGFONTW is access tagEXTLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   type LPEXTLOGFONTW is access tagEXTLOGFONTW; -- CXType_Pointer - CXType_Elaborated
   subtype EXTLOGFONT is EXTLOGFONTA; -- CXType_Typedef
   subtype PEXTLOGFONT is PEXTLOGFONTA; -- CXType_Typedef
   subtype NPEXTLOGFONT is NPEXTLOGFONTA; -- CXType_Typedef
   subtype LPEXTLOGFONT is LPEXTLOGFONTA; -- CXType_Typedef
   type devicemodeA_x is record
      dmDeviceName : Void;
      dmSpecVersion : WORD;
      dmDriverVersion : WORD;
      dmSize : WORD;
      dmDriverExtra : WORD;
      dmFields : DWORD;
      dmColor : Interfaces.C.Short;
      dmDuplex : Interfaces.C.Short;
      dmYResolution : Interfaces.C.Short;
      dmTTOption : Interfaces.C.Short;
      dmCollate : Interfaces.C.Short;
      dmFormName : Void;
      dmLogPixels : WORD;
      dmBitsPerPel : DWORD;
      dmPelsWidth : DWORD;
      dmPelsHeight : DWORD;
      dmDisplayFrequency : DWORD;
      dmICMMethod : DWORD;
      dmICMIntent : DWORD;
      dmMediaType : DWORD;
      dmDitherType : DWORD;
      dmReserved1 : DWORD;
      dmReserved2 : DWORD;
      dmPanningWidth : DWORD;
      dmPanningHeight : DWORD;
   end record;
   subtype DEVMODEA is devicemodeA_x; -- CXType_Elaborated
   type PDEVMODEA is access devicemodeA_x; -- CXType_Pointer - CXType_Elaborated
   type NPDEVMODEA is access devicemodeA_x; -- CXType_Pointer - CXType_Elaborated
   type LPDEVMODEA is access devicemodeA_x; -- CXType_Pointer - CXType_Elaborated
   type devicemodeW_x is record
      dmDeviceName : Void;
      dmSpecVersion : WORD;
      dmDriverVersion : WORD;
      dmSize : WORD;
      dmDriverExtra : WORD;
      dmFields : DWORD;
      dmColor : Interfaces.C.Short;
      dmDuplex : Interfaces.C.Short;
      dmYResolution : Interfaces.C.Short;
      dmTTOption : Interfaces.C.Short;
      dmCollate : Interfaces.C.Short;
      dmFormName : Void;
      dmLogPixels : WORD;
      dmBitsPerPel : DWORD;
      dmPelsWidth : DWORD;
      dmPelsHeight : DWORD;
      dmDisplayFrequency : DWORD;
      dmICMMethod : DWORD;
      dmICMIntent : DWORD;
      dmMediaType : DWORD;
      dmDitherType : DWORD;
      dmReserved1 : DWORD;
      dmReserved2 : DWORD;
      dmPanningWidth : DWORD;
      dmPanningHeight : DWORD;
   end record;
   subtype DEVMODEW is devicemodeW_x; -- CXType_Elaborated
   type PDEVMODEW is access devicemodeW_x; -- CXType_Pointer - CXType_Elaborated
   type NPDEVMODEW is access devicemodeW_x; -- CXType_Pointer - CXType_Elaborated
   type LPDEVMODEW is access devicemodeW_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVMODE is DEVMODEA; -- CXType_Typedef
   subtype PDEVMODE is PDEVMODEA; -- CXType_Typedef
   subtype NPDEVMODE is NPDEVMODEA; -- CXType_Typedef
   subtype LPDEVMODE is LPDEVMODEA; -- CXType_Typedef
   type DISPLAY_DEVICEA_x is record
      cb : DWORD;
      DeviceName : Void;
      DeviceString : Void;
      StateFlags : DWORD;
      DeviceID : Void;
      DeviceKey : Void;
   end record;
   subtype DISPLAY_DEVICEA is DISPLAY_DEVICEA_x; -- CXType_Elaborated
   type PDISPLAY_DEVICEA is access DISPLAY_DEVICEA_x; -- CXType_Pointer - CXType_Elaborated
   type LPDISPLAY_DEVICEA is access DISPLAY_DEVICEA_x; -- CXType_Pointer - CXType_Elaborated
   type DISPLAY_DEVICEW_x is record
      cb : DWORD;
      DeviceName : Void;
      DeviceString : Void;
      StateFlags : DWORD;
      DeviceID : Void;
      DeviceKey : Void;
   end record;
   subtype DISPLAY_DEVICEW is DISPLAY_DEVICEW_x; -- CXType_Elaborated
   type PDISPLAY_DEVICEW is access DISPLAY_DEVICEW_x; -- CXType_Pointer - CXType_Elaborated
   type LPDISPLAY_DEVICEW is access DISPLAY_DEVICEW_x; -- CXType_Pointer - CXType_Elaborated
   subtype DISPLAY_DEVICE is DISPLAY_DEVICEA; -- CXType_Typedef
   subtype PDISPLAY_DEVICE is PDISPLAY_DEVICEA; -- CXType_Typedef
   subtype LPDISPLAY_DEVICE is LPDISPLAY_DEVICEA; -- CXType_Typedef
   type DISPLAYCONFIG_RATIONAL is record
      Numerator : UINT32;
      Denominator : UINT32;
   end record;
   type DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY is (
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED
   );
   for DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY use (
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL => -2147483648,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER => -1,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 => 0,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO => 1,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO => 2,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO => 3,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI => 4,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI => 5,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS => 6,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN => 8,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI => 9,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL => 10,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED => 11,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL => 12,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED => 13,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE => 14,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST => 15,
      DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED => 16
   );
   for DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY'Size use 32;
   type DISPLAYCONFIG_SCANLINE_ORDERING is (
      DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32,
      DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED,
      DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE,
      DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
      DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST
   );
   for DISPLAYCONFIG_SCANLINE_ORDERING use (
      DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 => -1,
      DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED => 0,
      DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE => 1,
      DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED => 2,
      DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST => 3
   );
   for DISPLAYCONFIG_SCANLINE_ORDERING'Size use 32;
   type DISPLAYCONFIG_2DREGION is record
      cx : UINT32;
      cy : UINT32;
   end record;
   type DISPLAYCONFIG_VIDEO_SIGNAL_INFO is record
      pixelRate : UINT64;
      hSyncFreq : DISPLAYCONFIG_RATIONAL;
      vSyncFreq : DISPLAYCONFIG_RATIONAL;
      activeSize : DISPLAYCONFIG_2DREGION;
      totalSize : DISPLAYCONFIG_2DREGION;
      scanLineOrdering : DISPLAYCONFIG_SCANLINE_ORDERING;
   end record;
   type DISPLAYCONFIG_SCALING is (
      DISPLAYCONFIG_SCALING_FORCE_UINT32,
      DISPLAYCONFIG_SCALING_IDENTITY,
      DISPLAYCONFIG_SCALING_CENTERED,
      DISPLAYCONFIG_SCALING_STRETCHED,
      DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX,
      DISPLAYCONFIG_SCALING_CUSTOM,
      DISPLAYCONFIG_SCALING_PREFERRED
   );
   for DISPLAYCONFIG_SCALING use (
      DISPLAYCONFIG_SCALING_FORCE_UINT32 => -1,
      DISPLAYCONFIG_SCALING_IDENTITY => 1,
      DISPLAYCONFIG_SCALING_CENTERED => 2,
      DISPLAYCONFIG_SCALING_STRETCHED => 3,
      DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX => 4,
      DISPLAYCONFIG_SCALING_CUSTOM => 5,
      DISPLAYCONFIG_SCALING_PREFERRED => 128
   );
   for DISPLAYCONFIG_SCALING'Size use 32;
   type DISPLAYCONFIG_ROTATION is (
      DISPLAYCONFIG_ROTATION_FORCE_UINT32,
      DISPLAYCONFIG_ROTATION_IDENTITY,
      DISPLAYCONFIG_ROTATION_ROTATE90,
      DISPLAYCONFIG_ROTATION_ROTATE180,
      DISPLAYCONFIG_ROTATION_ROTATE270
   );
   for DISPLAYCONFIG_ROTATION use (
      DISPLAYCONFIG_ROTATION_FORCE_UINT32 => -1,
      DISPLAYCONFIG_ROTATION_IDENTITY => 1,
      DISPLAYCONFIG_ROTATION_ROTATE90 => 2,
      DISPLAYCONFIG_ROTATION_ROTATE180 => 3,
      DISPLAYCONFIG_ROTATION_ROTATE270 => 4
   );
   for DISPLAYCONFIG_ROTATION'Size use 32;
   type DISPLAYCONFIG_MODE_INFO_TYPE is (
      DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32,
      DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE,
      DISPLAYCONFIG_MODE_INFO_TYPE_TARGET,
      DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE
   );
   for DISPLAYCONFIG_MODE_INFO_TYPE use (
      DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 => -1,
      DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE => 1,
      DISPLAYCONFIG_MODE_INFO_TYPE_TARGET => 2,
      DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE => 3
   );
   for DISPLAYCONFIG_MODE_INFO_TYPE'Size use 32;
   type DISPLAYCONFIG_PIXELFORMAT is (
      DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32,
      DISPLAYCONFIG_PIXELFORMAT_8BPP,
      DISPLAYCONFIG_PIXELFORMAT_16BPP,
      DISPLAYCONFIG_PIXELFORMAT_24BPP,
      DISPLAYCONFIG_PIXELFORMAT_32BPP,
      DISPLAYCONFIG_PIXELFORMAT_NONGDI
   );
   for DISPLAYCONFIG_PIXELFORMAT use (
      DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 => -1,
      DISPLAYCONFIG_PIXELFORMAT_8BPP => 1,
      DISPLAYCONFIG_PIXELFORMAT_16BPP => 2,
      DISPLAYCONFIG_PIXELFORMAT_24BPP => 3,
      DISPLAYCONFIG_PIXELFORMAT_32BPP => 4,
      DISPLAYCONFIG_PIXELFORMAT_NONGDI => 5
   );
   for DISPLAYCONFIG_PIXELFORMAT'Size use 32;
   type DISPLAYCONFIG_SOURCE_MODE is record
      width : UINT32;
      height : UINT32;
      pixelFormat : DISPLAYCONFIG_PIXELFORMAT;
      position : POINTL;
   end record;
   type DISPLAYCONFIG_TARGET_MODE is record
      targetVideoSignalInfo : DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
   end record;
   type DISPLAYCONFIG_DESKTOP_IMAGE_INFO is record
      PathSourceSize : POINTL;
      DesktopImageRegion : RECTL;
      DesktopImageClip : RECTL;
   end record;
   type DISPLAYCONFIG_MODE_INFO is record
      infoType : DISPLAYCONFIG_MODE_INFO_TYPE;
      id : UINT32;
      adapterId : LUID;
   end record;
   type DISPLAYCONFIG_PATH_SOURCE_INFO is record
      adapterId : LUID;
      id : UINT32;
      statusFlags : UINT32;
   end record;
   type DISPLAYCONFIG_PATH_TARGET_INFO is record
      adapterId : LUID;
      id : UINT32;
      outputTechnology : DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
      rotation : DISPLAYCONFIG_ROTATION;
      scaling : DISPLAYCONFIG_SCALING;
      refreshRate : DISPLAYCONFIG_RATIONAL;
      scanLineOrdering : DISPLAYCONFIG_SCANLINE_ORDERING;
      targetAvailable : BOOL;
      statusFlags : UINT32;
   end record;
   type DISPLAYCONFIG_PATH_INFO is record
      sourceInfo : DISPLAYCONFIG_PATH_SOURCE_INFO;
      targetInfo : DISPLAYCONFIG_PATH_TARGET_INFO;
      flags : UINT32;
   end record;
   type DISPLAYCONFIG_TOPOLOGY_ID is (
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32,
      DISPLAYCONFIG_TOPOLOGY_INTERNAL,
      DISPLAYCONFIG_TOPOLOGY_CLONE,
      DISPLAYCONFIG_TOPOLOGY_EXTEND,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL
   );
   for DISPLAYCONFIG_TOPOLOGY_ID use (
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 => -1,
      DISPLAYCONFIG_TOPOLOGY_INTERNAL => 1,
      DISPLAYCONFIG_TOPOLOGY_CLONE => 2,
      DISPLAYCONFIG_TOPOLOGY_EXTEND => 4,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL => 8
   );
   for DISPLAYCONFIG_TOPOLOGY_ID'Size use 32;
   type DISPLAYCONFIG_DEVICE_INFO_TYPE is (
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32,
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE,
      DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION,
      DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO,
      DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE,
      DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL
   );
   for DISPLAYCONFIG_DEVICE_INFO_TYPE use (
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 => -1,
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME => 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME => 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE => 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME => 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE => 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE => 6,
      DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION => 7,
      DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION => 8,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO => 9,
      DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE => 10,
      DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL => 11
   );
   for DISPLAYCONFIG_DEVICE_INFO_TYPE'Size use 32;
   type DISPLAYCONFIG_DEVICE_INFO_HEADER is record
      type_x : DISPLAYCONFIG_DEVICE_INFO_TYPE;
      size_x : UINT32;
      adapterId : LUID;
      id : UINT32;
   end record;
   type DISPLAYCONFIG_SOURCE_DEVICE_NAME is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      viewGdiDeviceName : Void;
   end record;
   type DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS is null record;
   type DISPLAYCONFIG_TARGET_DEVICE_NAME is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      flags : DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
      outputTechnology : DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
      edidManufactureId : UINT16;
      edidProductCodeId : UINT16;
      connectorInstance : UINT32;
      monitorFriendlyDeviceName : Void;
      monitorDevicePath : Void;
   end record;
   type DISPLAYCONFIG_TARGET_PREFERRED_MODE is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      width : UINT32;
      height : UINT32;
      targetMode : DISPLAYCONFIG_TARGET_MODE;
   end record;
   type DISPLAYCONFIG_ADAPTER_NAME is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      adapterDevicePath : Void;
   end record;
   type DISPLAYCONFIG_TARGET_BASE_TYPE is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      baseOutputTechnology : DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
   end record;
   type DISPLAYCONFIG_SET_TARGET_PERSISTENCE is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
   end record;
   type DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
   end record;
   type DISPLAYCONFIG_COLOR_ENCODING_x is (
      DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32,
      DISPLAYCONFIG_COLOR_ENCODING_RGB,
      DISPLAYCONFIG_COLOR_ENCODING_YCBCR444,
      DISPLAYCONFIG_COLOR_ENCODING_YCBCR422,
      DISPLAYCONFIG_COLOR_ENCODING_YCBCR420,
      DISPLAYCONFIG_COLOR_ENCODING_INTENSITY
   );
   for DISPLAYCONFIG_COLOR_ENCODING_x use (
      DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 => -1,
      DISPLAYCONFIG_COLOR_ENCODING_RGB => 0,
      DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 => 1,
      DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 => 2,
      DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 => 3,
      DISPLAYCONFIG_COLOR_ENCODING_INTENSITY => 4
   );
   for DISPLAYCONFIG_COLOR_ENCODING_x'Size use 32;
   subtype DISPLAYCONFIG_COLOR_ENCODING is DISPLAYCONFIG_COLOR_ENCODING_x; -- CXType_Elaborated
   type DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_x is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      colorEncoding : DISPLAYCONFIG_COLOR_ENCODING;
      bitsPerColorChannel : UINT32;
   end record;
   subtype DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO is DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_x; -- CXType_Elaborated
   type DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_x is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
   end record;
   subtype DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE is DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_x; -- CXType_Elaborated
   type DISPLAYCONFIG_SDR_WHITE_LEVEL_x is record
      header : DISPLAYCONFIG_DEVICE_INFO_HEADER;
      SDRWhiteLevel : ULONG;
   end record;
   subtype DISPLAYCONFIG_SDR_WHITE_LEVEL is DISPLAYCONFIG_SDR_WHITE_LEVEL_x; -- CXType_Elaborated
   type RGNDATAHEADER_x is record
      dwSize : DWORD;
      iType : DWORD;
      nCount : DWORD;
      nRgnSize : DWORD;
      rcBound : RECT;
   end record;
   subtype RGNDATAHEADER is RGNDATAHEADER_x; -- CXType_Elaborated
   type PRGNDATAHEADER is access RGNDATAHEADER_x; -- CXType_Pointer - CXType_Elaborated
   type RGNDATA_x is record
      rdh : RGNDATAHEADER;
      Buffer : Void;
   end record;
   subtype RGNDATA is RGNDATA_x; -- CXType_Elaborated
   type PRGNDATA is access RGNDATA_x; -- CXType_Pointer - CXType_Elaborated
   type NPRGNDATA is access RGNDATA_x; -- CXType_Pointer - CXType_Elaborated
   type LPRGNDATA is access RGNDATA_x; -- CXType_Pointer - CXType_Elaborated
   type ABC_x is record
      abcA : Interfaces.C.Int;
      abcB : UINT;
      abcC : Interfaces.C.Int;
   end record;
   subtype ABC is ABC_x; -- CXType_Elaborated
   type PABC is access ABC_x; -- CXType_Pointer - CXType_Elaborated
   type NPABC is access ABC_x; -- CXType_Pointer - CXType_Elaborated
   type LPABC is access ABC_x; -- CXType_Pointer - CXType_Elaborated
   type ABCFLOAT_x is record
      abcfA : FLOAT;
      abcfB : FLOAT;
      abcfC : FLOAT;
   end record;
   subtype ABCFLOAT is ABCFLOAT_x; -- CXType_Elaborated
   type PABCFLOAT is access ABCFLOAT_x; -- CXType_Pointer - CXType_Elaborated
   type NPABCFLOAT is access ABCFLOAT_x; -- CXType_Pointer - CXType_Elaborated
   type LPABCFLOAT is access ABCFLOAT_x; -- CXType_Pointer - CXType_Elaborated
   type OUTLINETEXTMETRICA_x is record
      otmSize : UINT;
      otmTextMetrics : TEXTMETRICA;
      otmFiller : BYTE;
      otmPanoseNumber : PANOSE;
      otmfsSelection : UINT;
      otmfsType : UINT;
      otmsCharSlopeRise : Interfaces.C.Int;
      otmsCharSlopeRun : Interfaces.C.Int;
      otmItalicAngle : Interfaces.C.Int;
      otmEMSquare : UINT;
      otmAscent : Interfaces.C.Int;
      otmDescent : Interfaces.C.Int;
      otmLineGap : UINT;
      otmsCapEmHeight : UINT;
      otmsXHeight : UINT;
      otmrcFontBox : RECT;
      otmMacAscent : Interfaces.C.Int;
      otmMacDescent : Interfaces.C.Int;
      otmMacLineGap : UINT;
      otmusMinimumPPEM : UINT;
      otmptSubscriptSize : POINT;
      otmptSubscriptOffset : POINT;
      otmptSuperscriptSize : POINT;
      otmptSuperscriptOffset : POINT;
      otmsStrikeoutSize : UINT;
      otmsStrikeoutPosition : Interfaces.C.Int;
      otmsUnderscoreSize : Interfaces.C.Int;
      otmsUnderscorePosition : Interfaces.C.Int;
      otmpFamilyName : PSTR;
      otmpFaceName : PSTR;
      otmpStyleName : PSTR;
      otmpFullName : PSTR;
   end record;
   subtype OUTLINETEXTMETRICA is OUTLINETEXTMETRICA_x; -- CXType_Elaborated
   type POUTLINETEXTMETRICA is access OUTLINETEXTMETRICA_x; -- CXType_Pointer - CXType_Elaborated
   type NPOUTLINETEXTMETRICA is access OUTLINETEXTMETRICA_x; -- CXType_Pointer - CXType_Elaborated
   type LPOUTLINETEXTMETRICA is access OUTLINETEXTMETRICA_x; -- CXType_Pointer - CXType_Elaborated
   type OUTLINETEXTMETRICW_x is record
      otmSize : UINT;
      otmTextMetrics : TEXTMETRICW;
      otmFiller : BYTE;
      otmPanoseNumber : PANOSE;
      otmfsSelection : UINT;
      otmfsType : UINT;
      otmsCharSlopeRise : Interfaces.C.Int;
      otmsCharSlopeRun : Interfaces.C.Int;
      otmItalicAngle : Interfaces.C.Int;
      otmEMSquare : UINT;
      otmAscent : Interfaces.C.Int;
      otmDescent : Interfaces.C.Int;
      otmLineGap : UINT;
      otmsCapEmHeight : UINT;
      otmsXHeight : UINT;
      otmrcFontBox : RECT;
      otmMacAscent : Interfaces.C.Int;
      otmMacDescent : Interfaces.C.Int;
      otmMacLineGap : UINT;
      otmusMinimumPPEM : UINT;
      otmptSubscriptSize : POINT;
      otmptSubscriptOffset : POINT;
      otmptSuperscriptSize : POINT;
      otmptSuperscriptOffset : POINT;
      otmsStrikeoutSize : UINT;
      otmsStrikeoutPosition : Interfaces.C.Int;
      otmsUnderscoreSize : Interfaces.C.Int;
      otmsUnderscorePosition : Interfaces.C.Int;
      otmpFamilyName : PSTR;
      otmpFaceName : PSTR;
      otmpStyleName : PSTR;
      otmpFullName : PSTR;
   end record;
   subtype OUTLINETEXTMETRICW is OUTLINETEXTMETRICW_x; -- CXType_Elaborated
   type POUTLINETEXTMETRICW is access OUTLINETEXTMETRICW_x; -- CXType_Pointer - CXType_Elaborated
   type NPOUTLINETEXTMETRICW is access OUTLINETEXTMETRICW_x; -- CXType_Pointer - CXType_Elaborated
   type LPOUTLINETEXTMETRICW is access OUTLINETEXTMETRICW_x; -- CXType_Pointer - CXType_Elaborated
   subtype OUTLINETEXTMETRIC is OUTLINETEXTMETRICA; -- CXType_Typedef
   subtype POUTLINETEXTMETRIC is POUTLINETEXTMETRICA; -- CXType_Typedef
   subtype NPOUTLINETEXTMETRIC is NPOUTLINETEXTMETRICA; -- CXType_Typedef
   subtype LPOUTLINETEXTMETRIC is LPOUTLINETEXTMETRICA; -- CXType_Typedef
   type tagPOLYTEXTA is record
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      n : UINT;
      lpstr_x : LPCSTR;
      uiFlags : UINT;
      rcl : RECT;
      pdx : access Interfaces.C.Int;
   end record;
   subtype POLYTEXTA is tagPOLYTEXTA; -- CXType_Elaborated
   type PPOLYTEXTA is access tagPOLYTEXTA; -- CXType_Pointer - CXType_Elaborated
   type NPPOLYTEXTA is access tagPOLYTEXTA; -- CXType_Pointer - CXType_Elaborated
   type LPPOLYTEXTA is access tagPOLYTEXTA; -- CXType_Pointer - CXType_Elaborated
   type tagPOLYTEXTW is record
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      n : UINT;
      lpstr_x : LPCWSTR;
      uiFlags : UINT;
      rcl : RECT;
      pdx : access Interfaces.C.Int;
   end record;
   subtype POLYTEXTW is tagPOLYTEXTW; -- CXType_Elaborated
   type PPOLYTEXTW is access tagPOLYTEXTW; -- CXType_Pointer - CXType_Elaborated
   type NPPOLYTEXTW is access tagPOLYTEXTW; -- CXType_Pointer - CXType_Elaborated
   type LPPOLYTEXTW is access tagPOLYTEXTW; -- CXType_Pointer - CXType_Elaborated
   subtype POLYTEXT is POLYTEXTA; -- CXType_Typedef
   subtype PPOLYTEXT is PPOLYTEXTA; -- CXType_Typedef
   subtype NPPOLYTEXT is NPPOLYTEXTA; -- CXType_Typedef
   subtype LPPOLYTEXT is LPPOLYTEXTA; -- CXType_Typedef
   type FIXED_x is record
      fract : WORD;
      value : Interfaces.C.Short;
   end record;
   subtype FIXED is FIXED_x; -- CXType_Elaborated
   type MAT2_x is record
      eM11 : FIXED;
      eM12 : FIXED;
      eM21 : FIXED;
      eM22 : FIXED;
   end record;
   subtype MAT2 is MAT2_x; -- CXType_Elaborated
   type LPMAT2 is access MAT2_x; -- CXType_Pointer - CXType_Elaborated
   type GLYPHMETRICS_x is record
      gmBlackBoxX : UINT;
      gmBlackBoxY : UINT;
      gmptGlyphOrigin : POINT;
      gmCellIncX : Interfaces.C.Short;
      gmCellIncY : Interfaces.C.Short;
   end record;
   subtype GLYPHMETRICS is GLYPHMETRICS_x; -- CXType_Elaborated
   type LPGLYPHMETRICS is access GLYPHMETRICS_x; -- CXType_Pointer - CXType_Elaborated
   type tagPOINTFX is record
      x : FIXED;
      y : FIXED;
   end record;
   subtype POINTFX is tagPOINTFX; -- CXType_Elaborated
   type LPPOINTFX is access tagPOINTFX; -- CXType_Pointer - CXType_Elaborated
   type tagTTPOLYCURVE is record
      wType : WORD;
      cpfx : WORD;
      apfx : Void;
   end record;
   subtype TTPOLYCURVE is tagTTPOLYCURVE; -- CXType_Elaborated
   type LPTTPOLYCURVE is access tagTTPOLYCURVE; -- CXType_Pointer - CXType_Elaborated
   type tagTTPOLYGONHEADER is record
      cb : DWORD;
      dwType : DWORD;
      pfxStart : POINTFX;
   end record;
   subtype TTPOLYGONHEADER is tagTTPOLYGONHEADER; -- CXType_Elaborated
   type LPTTPOLYGONHEADER is access tagTTPOLYGONHEADER; -- CXType_Pointer - CXType_Elaborated
   type tagGCP_RESULTSA is record
      lStructSize : DWORD;
      lpOutString : LPSTR;
      lpOrder : access UINT;
      lpDx : access Interfaces.C.Int;
      lpCaretPos : access Interfaces.C.Int;
      lpClass : LPSTR;
      lpGlyphs : LPWSTR;
      nGlyphs : UINT;
      nMaxFit : Interfaces.C.Int;
   end record;
   subtype GCP_RESULTSA is tagGCP_RESULTSA; -- CXType_Elaborated
   type LPGCP_RESULTSA is access tagGCP_RESULTSA; -- CXType_Pointer - CXType_Elaborated
   type tagGCP_RESULTSW is record
      lStructSize : DWORD;
      lpOutString : LPWSTR;
      lpOrder : access UINT;
      lpDx : access Interfaces.C.Int;
      lpCaretPos : access Interfaces.C.Int;
      lpClass : LPSTR;
      lpGlyphs : LPWSTR;
      nGlyphs : UINT;
      nMaxFit : Interfaces.C.Int;
   end record;
   subtype GCP_RESULTSW is tagGCP_RESULTSW; -- CXType_Elaborated
   type LPGCP_RESULTSW is access tagGCP_RESULTSW; -- CXType_Pointer - CXType_Elaborated
   subtype GCP_RESULTS is GCP_RESULTSA; -- CXType_Typedef
   subtype LPGCP_RESULTS is LPGCP_RESULTSA; -- CXType_Typedef
   type RASTERIZER_STATUS_x is record
      nSize : Interfaces.C.Short;
      wFlags : Interfaces.C.Short;
      nLanguageID : Interfaces.C.Short;
   end record;
   subtype RASTERIZER_STATUS is RASTERIZER_STATUS_x; -- CXType_Elaborated
   type LPRASTERIZER_STATUS is access RASTERIZER_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type tagPIXELFORMATDESCRIPTOR is record
      nSize : WORD;
      nVersion : WORD;
      dwFlags : DWORD;
      iPixelType : BYTE;
      cColorBits : BYTE;
      cRedBits : BYTE;
      cRedShift : BYTE;
      cGreenBits : BYTE;
      cGreenShift : BYTE;
      cBlueBits : BYTE;
      cBlueShift : BYTE;
      cAlphaBits : BYTE;
      cAlphaShift : BYTE;
      cAccumBits : BYTE;
      cAccumRedBits : BYTE;
      cAccumGreenBits : BYTE;
      cAccumBlueBits : BYTE;
      cAccumAlphaBits : BYTE;
      cDepthBits : BYTE;
      cStencilBits : BYTE;
      cAuxBuffers : BYTE;
      iLayerType : BYTE;
      bReserved : BYTE;
      dwLayerMask : DWORD;
      dwVisibleMask : DWORD;
      dwDamageMask : DWORD;
   end record;
   subtype PIXELFORMATDESCRIPTOR is tagPIXELFORMATDESCRIPTOR; -- CXType_Elaborated
   type PPIXELFORMATDESCRIPTOR is access tagPIXELFORMATDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   type LPPIXELFORMATDESCRIPTOR is access tagPIXELFORMATDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   subtype OLDFONTENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM)
   subtype OLDFONTENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM)
   subtype FONTENUMPROCA is OLDFONTENUMPROCA; -- CXType_Typedef
   subtype FONTENUMPROCW is OLDFONTENUMPROCW; -- CXType_Typedef
   subtype FONTENUMPROC is FONTENUMPROCA; -- CXType_Typedef
   subtype GOBJENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPVOID, LPARAM)
   subtype LINEDDAPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (int, int, LPARAM)
   function AddFontResourceA(
      param1 : LPCSTR
   ) return Interfaces.C.Int;
   pragma import (C,AddFontResourceA,"AddFontResourceA");
   function AddFontResourceW(
      param1 : LPCWSTR
   ) return Interfaces.C.Int;
   pragma import (C,AddFontResourceW,"AddFontResourceW");
   function AnimatePalette(
      hPal : HPALETTE;
      iStartIndex : UINT;
      cEntries : UINT;
      ppe : access constant PALETTEENTRY
   ) return BOOL;
   pragma import (C,AnimatePalette,"AnimatePalette");
   function Arc(
      hdc_x : HDC;
      x1 : Interfaces.C.Int;
      y1 : Interfaces.C.Int;
      x2 : Interfaces.C.Int;
      y2 : Interfaces.C.Int;
      x3 : Interfaces.C.Int;
      y3 : Interfaces.C.Int;
      x4 : Interfaces.C.Int;
      y4 : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Arc,"Arc");
   function BitBlt(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      hdcSrc : HDC;
      x1 : Interfaces.C.Int;
      y1 : Interfaces.C.Int;
      rop : DWORD
   ) return BOOL;
   pragma import (C,BitBlt,"BitBlt");
   function CancelDC(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,CancelDC,"CancelDC");
   function Chord(
      hdc_x : HDC;
      x1 : Interfaces.C.Int;
      y1 : Interfaces.C.Int;
      x2 : Interfaces.C.Int;
      y2 : Interfaces.C.Int;
      x3 : Interfaces.C.Int;
      y3 : Interfaces.C.Int;
      x4 : Interfaces.C.Int;
      y4 : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Chord,"Chord");
   function ChoosePixelFormat(
      hdc_x : HDC;
      ppfd : access constant PIXELFORMATDESCRIPTOR
   ) return Interfaces.C.Int;
   pragma import (C,ChoosePixelFormat,"ChoosePixelFormat");
   function CloseMetaFile(
      hdc_x : HDC
   ) return HMETAFILE;
   pragma import (C,CloseMetaFile,"CloseMetaFile");
   function CombineRgn(
      hrgnDst : HRGN;
      hrgnSrc1 : HRGN;
      hrgnSrc2 : HRGN;
      iMode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,CombineRgn,"CombineRgn");
   function CopyMetaFileA(
      param1 : HMETAFILE;
      param2 : LPCSTR
   ) return HMETAFILE;
   pragma import (C,CopyMetaFileA,"CopyMetaFileA");
   function CopyMetaFileW(
      param1 : HMETAFILE;
      param2 : LPCWSTR
   ) return HMETAFILE;
   pragma import (C,CopyMetaFileW,"CopyMetaFileW");
   function CreateBitmap(
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      nPlanes : UINT;
      nBitCount : UINT;
      lpBits : access Void
   ) return HBITMAP;
   pragma import (C,CreateBitmap,"CreateBitmap");
   function CreateBitmapIndirect(
      pbm : access constant BITMAP
   ) return HBITMAP;
   pragma import (C,CreateBitmapIndirect,"CreateBitmapIndirect");
   function CreateBrushIndirect(
      plbrush : access constant LOGBRUSH
   ) return HBRUSH;
   pragma import (C,CreateBrushIndirect,"CreateBrushIndirect");
   function CreateCompatibleBitmap(
      hdc_x : HDC;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int
   ) return HBITMAP;
   pragma import (C,CreateCompatibleBitmap,"CreateCompatibleBitmap");
   function CreateDiscardableBitmap(
      hdc_x : HDC;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int
   ) return HBITMAP;
   pragma import (C,CreateDiscardableBitmap,"CreateDiscardableBitmap");
   function CreateCompatibleDC(
      hdc_x : HDC
   ) return HDC;
   pragma import (C,CreateCompatibleDC,"CreateCompatibleDC");
   function CreateDCA(
      pwszDriver : LPCSTR;
      pwszDevice : LPCSTR;
      pszPort : LPCSTR;
      pdm : access constant DEVMODEA
   ) return HDC;
   pragma import (C,CreateDCA,"CreateDCA");
   function CreateDCW(
      pwszDriver : LPCWSTR;
      pwszDevice : LPCWSTR;
      pszPort : LPCWSTR;
      pdm : access constant DEVMODEW
   ) return HDC;
   pragma import (C,CreateDCW,"CreateDCW");
   function CreateDIBitmap(
      hdc_x : HDC;
      pbmih : access constant BITMAPINFOHEADER;
      flInit : DWORD;
      pjBits : access Void;
      pbmi : access constant BITMAPINFO;
      iUsage : UINT
   ) return HBITMAP;
   pragma import (C,CreateDIBitmap,"CreateDIBitmap");
   function CreateDIBPatternBrush(
      h : HGLOBAL;
      iUsage : UINT
   ) return HBRUSH;
   pragma import (C,CreateDIBPatternBrush,"CreateDIBPatternBrush");
   function CreateDIBPatternBrushPt(
      lpPackedDIB : access Void;
      iUsage : UINT
   ) return HBRUSH;
   pragma import (C,CreateDIBPatternBrushPt,"CreateDIBPatternBrushPt");
   function CreateEllipticRgn(
      x1 : Interfaces.C.Int;
      y1 : Interfaces.C.Int;
      x2 : Interfaces.C.Int;
      y2 : Interfaces.C.Int
   ) return HRGN;
   pragma import (C,CreateEllipticRgn,"CreateEllipticRgn");
   function CreateEllipticRgnIndirect(
      lprect_x : access constant RECT
   ) return HRGN;
   pragma import (C,CreateEllipticRgnIndirect,"CreateEllipticRgnIndirect");
   function CreateFontIndirectA(
      lplf : access constant LOGFONTA
   ) return HFONT;
   pragma import (C,CreateFontIndirectA,"CreateFontIndirectA");
   function CreateFontIndirectW(
      lplf : access constant LOGFONTW
   ) return HFONT;
   pragma import (C,CreateFontIndirectW,"CreateFontIndirectW");
   function CreateFontA(
      cHeight : Interfaces.C.Int;
      cWidth : Interfaces.C.Int;
      cEscapement : Interfaces.C.Int;
      cOrientation : Interfaces.C.Int;
      cWeight : Interfaces.C.Int;
      bItalic : DWORD;
      bUnderline : DWORD;
      bStrikeOut : DWORD;
      iCharSet : DWORD;
      iOutPrecision : DWORD;
      iClipPrecision : DWORD;
      iQuality : DWORD;
      iPitchAndFamily : DWORD;
      pszFaceName : LPCSTR
   ) return HFONT;
   pragma import (C,CreateFontA,"CreateFontA");
   function CreateFontW(
      cHeight : Interfaces.C.Int;
      cWidth : Interfaces.C.Int;
      cEscapement : Interfaces.C.Int;
      cOrientation : Interfaces.C.Int;
      cWeight : Interfaces.C.Int;
      bItalic : DWORD;
      bUnderline : DWORD;
      bStrikeOut : DWORD;
      iCharSet : DWORD;
      iOutPrecision : DWORD;
      iClipPrecision : DWORD;
      iQuality : DWORD;
      iPitchAndFamily : DWORD;
      pszFaceName : LPCWSTR
   ) return HFONT;
   pragma import (C,CreateFontW,"CreateFontW");
   function CreateHatchBrush(
      iHatch : Interfaces.C.Int;
      color : COLORREF
   ) return HBRUSH;
   pragma import (C,CreateHatchBrush,"CreateHatchBrush");
   function CreateICA(
      pszDriver : LPCSTR;
      pszDevice : LPCSTR;
      pszPort : LPCSTR;
      pdm : access constant DEVMODEA
   ) return HDC;
   pragma import (C,CreateICA,"CreateICA");
   function CreateICW(
      pszDriver : LPCWSTR;
      pszDevice : LPCWSTR;
      pszPort : LPCWSTR;
      pdm : access constant DEVMODEW
   ) return HDC;
   pragma import (C,CreateICW,"CreateICW");
   function CreateMetaFileA(
      pszFile : LPCSTR
   ) return HDC;
   pragma import (C,CreateMetaFileA,"CreateMetaFileA");
   function CreateMetaFileW(
      pszFile : LPCWSTR
   ) return HDC;
   pragma import (C,CreateMetaFileW,"CreateMetaFileW");
   function CreatePalette(
      plpal : access constant LOGPALETTE
   ) return HPALETTE;
   pragma import (C,CreatePalette,"CreatePalette");
   function CreatePen(
      iStyle : Interfaces.C.Int;
      cWidth : Interfaces.C.Int;
      color : COLORREF
   ) return HPEN;
   pragma import (C,CreatePen,"CreatePen");
   function CreatePenIndirect(
      plpen : access constant LOGPEN
   ) return HPEN;
   pragma import (C,CreatePenIndirect,"CreatePenIndirect");
   function CreatePolyPolygonRgn(
      pptl : access constant POINT;
      pc : access constant INT;
      cPoly : Interfaces.C.Int;
      iMode : Interfaces.C.Int
   ) return HRGN;
   pragma import (C,CreatePolyPolygonRgn,"CreatePolyPolygonRgn");
   function CreatePatternBrush(
      hbm : HBITMAP
   ) return HBRUSH;
   pragma import (C,CreatePatternBrush,"CreatePatternBrush");
   function CreateRectRgn(
      x1 : Interfaces.C.Int;
      y1 : Interfaces.C.Int;
      x2 : Interfaces.C.Int;
      y2 : Interfaces.C.Int
   ) return HRGN;
   pragma import (C,CreateRectRgn,"CreateRectRgn");
   function CreateRectRgnIndirect(
      lprect_x : access constant RECT
   ) return HRGN;
   pragma import (C,CreateRectRgnIndirect,"CreateRectRgnIndirect");
   function CreateRoundRectRgn(
      x1 : Interfaces.C.Int;
      y1 : Interfaces.C.Int;
      x2 : Interfaces.C.Int;
      y2 : Interfaces.C.Int;
      w : Interfaces.C.Int;
      h : Interfaces.C.Int
   ) return HRGN;
   pragma import (C,CreateRoundRectRgn,"CreateRoundRectRgn");
   function CreateScalableFontResourceA(
      fdwHidden : DWORD;
      lpszFont : LPCSTR;
      lpszFile : LPCSTR;
      lpszPath : LPCSTR
   ) return BOOL;
   pragma import (C,CreateScalableFontResourceA,"CreateScalableFontResourceA");
   function CreateScalableFontResourceW(
      fdwHidden : DWORD;
      lpszFont : LPCWSTR;
      lpszFile : LPCWSTR;
      lpszPath : LPCWSTR
   ) return BOOL;
   pragma import (C,CreateScalableFontResourceW,"CreateScalableFontResourceW");
   function CreateSolidBrush(
      color : COLORREF
   ) return HBRUSH;
   pragma import (C,CreateSolidBrush,"CreateSolidBrush");
   function DeleteDC(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,DeleteDC,"DeleteDC");
   function DeleteMetaFile(
      hmf : HMETAFILE
   ) return BOOL;
   pragma import (C,DeleteMetaFile,"DeleteMetaFile");
   function DeleteObject(
      ho : HGDIOBJ
   ) return BOOL;
   pragma import (C,DeleteObject,"DeleteObject");
   function DescribePixelFormat(
      hdc_x : HDC;
      iPixelFormat : Interfaces.C.Int;
      nBytes : UINT;
      ppfd : LPPIXELFORMATDESCRIPTOR
   ) return Interfaces.C.Int;
   pragma import (C,DescribePixelFormat,"DescribePixelFormat");
   subtype LPFNDEVMODE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT (HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT)
   subtype LPFNDEVCAPS is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE)
   function DeviceCapabilitiesA(
      pDevice : LPCSTR;
      pPort : LPCSTR;
      fwCapability : WORD;
      pOutput : LPSTR;
      pDevMode_x : access constant DEVMODEA
   ) return Interfaces.C.Int;
   pragma import (C,DeviceCapabilitiesA,"DeviceCapabilitiesA");
   function DeviceCapabilitiesW(
      pDevice : LPCWSTR;
      pPort : LPCWSTR;
      fwCapability : WORD;
      pOutput : LPWSTR;
      pDevMode_x : access constant DEVMODEW
   ) return Interfaces.C.Int;
   pragma import (C,DeviceCapabilitiesW,"DeviceCapabilitiesW");
   function DrawEscape(
      hdc_x : HDC;
      iEscape : Interfaces.C.Int;
      cjIn : Interfaces.C.Int;
      lpIn : LPCSTR
   ) return Interfaces.C.Int;
   pragma import (C,DrawEscape,"DrawEscape");
   function Ellipse(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Ellipse,"Ellipse");
   function EnumFontFamiliesExA(
      hdc_x : HDC;
      lpLogfont_x : LPLOGFONTA;
      lpProc : FONTENUMPROCA;
      lParam_x : LPARAM;
      dwFlags : DWORD
   ) return Interfaces.C.Int;
   pragma import (C,EnumFontFamiliesExA,"EnumFontFamiliesExA");
   function EnumFontFamiliesExW(
      hdc_x : HDC;
      lpLogfont_x : LPLOGFONTW;
      lpProc : FONTENUMPROCW;
      lParam_x : LPARAM;
      dwFlags : DWORD
   ) return Interfaces.C.Int;
   pragma import (C,EnumFontFamiliesExW,"EnumFontFamiliesExW");
   function EnumFontFamiliesA(
      hdc_x : HDC;
      lpLogfont_x : LPCSTR;
      lpProc : FONTENUMPROCA;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumFontFamiliesA,"EnumFontFamiliesA");
   function EnumFontFamiliesW(
      hdc_x : HDC;
      lpLogfont_x : LPCWSTR;
      lpProc : FONTENUMPROCW;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumFontFamiliesW,"EnumFontFamiliesW");
   function EnumFontsA(
      hdc_x : HDC;
      lpLogfont_x : LPCSTR;
      lpProc : FONTENUMPROCA;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumFontsA,"EnumFontsA");
   function EnumFontsW(
      hdc_x : HDC;
      lpLogfont_x : LPCWSTR;
      lpProc : FONTENUMPROCW;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumFontsW,"EnumFontsW");
   function EnumObjects(
      hdc_x : HDC;
      nType : Interfaces.C.Int;
      lpFunc : GOBJENUMPROC;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumObjects,"EnumObjects");
   function EqualRgn(
      hrgn1 : HRGN;
      hrgn2 : HRGN
   ) return BOOL;
   pragma import (C,EqualRgn,"EqualRgn");
   function Escape(
      hdc_x : HDC;
      iEscape : Interfaces.C.Int;
      cjIn : Interfaces.C.Int;
      pvIn : LPCSTR;
      pvOut : LPVOID
   ) return Interfaces.C.Int;
   pragma import (C,Escape,"Escape");
   function ExtEscape(
      hdc_x : HDC;
      iEscape : Interfaces.C.Int;
      cjInput : Interfaces.C.Int;
      lpInData : LPCSTR;
      cjOutput : Interfaces.C.Int;
      lpOutData : LPSTR
   ) return Interfaces.C.Int;
   pragma import (C,ExtEscape,"ExtEscape");
   function ExcludeClipRect(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,ExcludeClipRect,"ExcludeClipRect");
   function ExtCreateRegion(
      lpx : access constant XFORM;
      nCount : DWORD;
      lpData : access constant RGNDATA
   ) return HRGN;
   pragma import (C,ExtCreateRegion,"ExtCreateRegion");
   function ExtFloodFill(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      color : COLORREF;
      type_x : UINT
   ) return BOOL;
   pragma import (C,ExtFloodFill,"ExtFloodFill");
   function FillRgn(
      hdc_x : HDC;
      hrgn_x : HRGN;
      hbr : HBRUSH
   ) return BOOL;
   pragma import (C,FillRgn,"FillRgn");
   function FloodFill(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      color : COLORREF
   ) return BOOL;
   pragma import (C,FloodFill,"FloodFill");
   function FrameRgn(
      hdc_x : HDC;
      hrgn_x : HRGN;
      hbr : HBRUSH;
      w : Interfaces.C.Int;
      h : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,FrameRgn,"FrameRgn");
   function GetROP2(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetROP2,"GetROP2");
   function GetAspectRatioFilterEx(
      hdc_x : HDC;
      lpsize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetAspectRatioFilterEx,"GetAspectRatioFilterEx");
   function GetBkColor(
      hdc_x : HDC
   ) return COLORREF;
   pragma import (C,GetBkColor,"GetBkColor");
   function GetDCBrushColor(
      hdc_x : HDC
   ) return COLORREF;
   pragma import (C,GetDCBrushColor,"GetDCBrushColor");
   function GetDCPenColor(
      hdc_x : HDC
   ) return COLORREF;
   pragma import (C,GetDCPenColor,"GetDCPenColor");
   function GetBkMode(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetBkMode,"GetBkMode");
   function GetBitmapBits(
      hbit : HBITMAP;
      cb : LONG;
      lpvBits : LPVOID
   ) return LONG;
   pragma import (C,GetBitmapBits,"GetBitmapBits");
   function GetBitmapDimensionEx(
      hbit : HBITMAP;
      lpsize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetBitmapDimensionEx,"GetBitmapDimensionEx");
   function GetBoundsRect(
      hdc_x : HDC;
      lprect_x : LPRECT;
      flags : UINT
   ) return UINT;
   pragma import (C,GetBoundsRect,"GetBoundsRect");
   function GetBrushOrgEx(
      hdc_x : HDC;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,GetBrushOrgEx,"GetBrushOrgEx");
   function GetCharWidthA(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpBuffer : LPINT
   ) return BOOL;
   pragma import (C,GetCharWidthA,"GetCharWidthA");
   function GetCharWidthW(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpBuffer : LPINT
   ) return BOOL;
   pragma import (C,GetCharWidthW,"GetCharWidthW");
   function GetCharWidth32A(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpBuffer : LPINT
   ) return BOOL;
   pragma import (C,GetCharWidth32A,"GetCharWidth32A");
   function GetCharWidth32W(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpBuffer : LPINT
   ) return BOOL;
   pragma import (C,GetCharWidth32W,"GetCharWidth32W");
   function GetCharWidthFloatA(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpBuffer : PFLOAT
   ) return BOOL;
   pragma import (C,GetCharWidthFloatA,"GetCharWidthFloatA");
   function GetCharWidthFloatW(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpBuffer : PFLOAT
   ) return BOOL;
   pragma import (C,GetCharWidthFloatW,"GetCharWidthFloatW");
   function GetCharABCWidthsA(
      hdc_x : HDC;
      wFirst : UINT;
      wLast : UINT;
      lpABC_x : LPABC
   ) return BOOL;
   pragma import (C,GetCharABCWidthsA,"GetCharABCWidthsA");
   function GetCharABCWidthsW(
      hdc_x : HDC;
      wFirst : UINT;
      wLast : UINT;
      lpABC_x : LPABC
   ) return BOOL;
   pragma import (C,GetCharABCWidthsW,"GetCharABCWidthsW");
   function GetCharABCWidthsFloatA(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpABC_x : LPABCFLOAT
   ) return BOOL;
   pragma import (C,GetCharABCWidthsFloatA,"GetCharABCWidthsFloatA");
   function GetCharABCWidthsFloatW(
      hdc_x : HDC;
      iFirst : UINT;
      iLast : UINT;
      lpABC_x : LPABCFLOAT
   ) return BOOL;
   pragma import (C,GetCharABCWidthsFloatW,"GetCharABCWidthsFloatW");
   function GetClipBox(
      hdc_x : HDC;
      lprect_x : LPRECT
   ) return Interfaces.C.Int;
   pragma import (C,GetClipBox,"GetClipBox");
   function GetClipRgn(
      hdc_x : HDC;
      hrgn_x : HRGN
   ) return Interfaces.C.Int;
   pragma import (C,GetClipRgn,"GetClipRgn");
   function GetMetaRgn(
      hdc_x : HDC;
      hrgn_x : HRGN
   ) return Interfaces.C.Int;
   pragma import (C,GetMetaRgn,"GetMetaRgn");
   function GetCurrentObject(
      hdc_x : HDC;
      type_x : UINT
   ) return HGDIOBJ;
   pragma import (C,GetCurrentObject,"GetCurrentObject");
   function GetCurrentPositionEx(
      hdc_x : HDC;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,GetCurrentPositionEx,"GetCurrentPositionEx");
   function GetDeviceCaps(
      hdc_x : HDC;
      index : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetDeviceCaps,"GetDeviceCaps");
   function GetDIBits(
      hdc_x : HDC;
      hbm : HBITMAP;
      start : UINT;
      cLines : UINT;
      lpvBits : LPVOID;
      lpbmi : LPBITMAPINFO;
      usage : UINT
   ) return Interfaces.C.Int;
   pragma import (C,GetDIBits,"GetDIBits");
   function GetFontData(
      hdc_x : HDC;
      dwTable : DWORD;
      dwOffset : DWORD;
      pvBuffer : PVOID;
      cjBuffer : DWORD
   ) return DWORD;
   pragma import (C,GetFontData,"GetFontData");
   function GetGlyphOutlineA(
      hdc_x : HDC;
      uChar_x : UINT;
      fuFormat : UINT;
      lpgm : LPGLYPHMETRICS;
      cjBuffer : DWORD;
      pvBuffer : LPVOID;
      lpmat2_x : access constant MAT2
   ) return DWORD;
   pragma import (C,GetGlyphOutlineA,"GetGlyphOutlineA");
   function GetGlyphOutlineW(
      hdc_x : HDC;
      uChar_x : UINT;
      fuFormat : UINT;
      lpgm : LPGLYPHMETRICS;
      cjBuffer : DWORD;
      pvBuffer : LPVOID;
      lpmat2_x : access constant MAT2
   ) return DWORD;
   pragma import (C,GetGlyphOutlineW,"GetGlyphOutlineW");
   function GetGraphicsMode(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetGraphicsMode,"GetGraphicsMode");
   function GetMapMode(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetMapMode,"GetMapMode");
   function GetMetaFileBitsEx(
      hMF : HMETAFILE;
      cbBuffer : UINT;
      lpData : LPVOID
   ) return UINT;
   pragma import (C,GetMetaFileBitsEx,"GetMetaFileBitsEx");
   function GetMetaFileA(
      lpName : LPCSTR
   ) return HMETAFILE;
   pragma import (C,GetMetaFileA,"GetMetaFileA");
   function GetMetaFileW(
      lpName : LPCWSTR
   ) return HMETAFILE;
   pragma import (C,GetMetaFileW,"GetMetaFileW");
   function GetNearestColor(
      hdc_x : HDC;
      color : COLORREF
   ) return COLORREF;
   pragma import (C,GetNearestColor,"GetNearestColor");
   function GetNearestPaletteIndex(
      h : HPALETTE;
      color : COLORREF
   ) return UINT;
   pragma import (C,GetNearestPaletteIndex,"GetNearestPaletteIndex");
   function GetObjectType(
      h : HGDIOBJ
   ) return DWORD;
   pragma import (C,GetObjectType,"GetObjectType");
   function GetOutlineTextMetricsA(
      hdc_x : HDC;
      cjCopy : UINT;
      potm : LPOUTLINETEXTMETRICA
   ) return UINT;
   pragma import (C,GetOutlineTextMetricsA,"GetOutlineTextMetricsA");
   function GetOutlineTextMetricsW(
      hdc_x : HDC;
      cjCopy : UINT;
      potm : LPOUTLINETEXTMETRICW
   ) return UINT;
   pragma import (C,GetOutlineTextMetricsW,"GetOutlineTextMetricsW");
   function GetPaletteEntries(
      hpal : HPALETTE;
      iStart : UINT;
      cEntries : UINT;
      pPalEntries : LPPALETTEENTRY
   ) return UINT;
   pragma import (C,GetPaletteEntries,"GetPaletteEntries");
   function GetPixel(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int
   ) return COLORREF;
   pragma import (C,GetPixel,"GetPixel");
   function GetPixelFormat(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetPixelFormat,"GetPixelFormat");
   function GetPolyFillMode(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetPolyFillMode,"GetPolyFillMode");
   function GetRasterizerCaps(
      lpraststat : LPRASTERIZER_STATUS;
      cjBytes : UINT
   ) return BOOL;
   pragma import (C,GetRasterizerCaps,"GetRasterizerCaps");
   function GetRandomRgn(
      hdc_x : HDC;
      hrgn_x : HRGN;
      i : INT
   ) return Interfaces.C.Int;
   pragma import (C,GetRandomRgn,"GetRandomRgn");
   function GetRegionData(
      hrgn_x : HRGN;
      nCount : DWORD;
      lpRgnData_x : LPRGNDATA
   ) return DWORD;
   pragma import (C,GetRegionData,"GetRegionData");
   function GetRgnBox(
      hrgn_x : HRGN;
      lprc : LPRECT
   ) return Interfaces.C.Int;
   pragma import (C,GetRgnBox,"GetRgnBox");
   function GetStockObject(
      i : Interfaces.C.Int
   ) return HGDIOBJ;
   pragma import (C,GetStockObject,"GetStockObject");
   function GetStretchBltMode(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetStretchBltMode,"GetStretchBltMode");
   function GetSystemPaletteEntries(
      hdc_x : HDC;
      iStart : UINT;
      cEntries : UINT;
      pPalEntries : LPPALETTEENTRY
   ) return UINT;
   pragma import (C,GetSystemPaletteEntries,"GetSystemPaletteEntries");
   function GetSystemPaletteUse(
      hdc_x : HDC
   ) return UINT;
   pragma import (C,GetSystemPaletteUse,"GetSystemPaletteUse");
   function GetTextCharacterExtra(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetTextCharacterExtra,"GetTextCharacterExtra");
   function GetTextAlign(
      hdc_x : HDC
   ) return UINT;
   pragma import (C,GetTextAlign,"GetTextAlign");
   function GetTextColor(
      hdc_x : HDC
   ) return COLORREF;
   pragma import (C,GetTextColor,"GetTextColor");
   function GetTextExtentPointA(
      hdc_x : HDC;
      lpString : LPCSTR;
      c : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentPointA,"GetTextExtentPointA");
   function GetTextExtentPointW(
      hdc_x : HDC;
      lpString : LPCWSTR;
      c : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentPointW,"GetTextExtentPointW");
   function GetTextExtentPoint32A(
      hdc_x : HDC;
      lpString : LPCSTR;
      c : Interfaces.C.Int;
      psizl : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentPoint32A,"GetTextExtentPoint32A");
   function GetTextExtentPoint32W(
      hdc_x : HDC;
      lpString : LPCWSTR;
      c : Interfaces.C.Int;
      psizl : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentPoint32W,"GetTextExtentPoint32W");
   function GetTextExtentExPointA(
      hdc_x : HDC;
      lpszString : LPCSTR;
      cchString : Interfaces.C.Int;
      nMaxExtent : Interfaces.C.Int;
      lpnFit : LPINT;
      lpnDx : LPINT;
      lpSize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentExPointA,"GetTextExtentExPointA");
   function GetTextExtentExPointW(
      hdc_x : HDC;
      lpszString : LPCWSTR;
      cchString : Interfaces.C.Int;
      nMaxExtent : Interfaces.C.Int;
      lpnFit : LPINT;
      lpnDx : LPINT;
      lpSize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentExPointW,"GetTextExtentExPointW");
   function GetTextCharset(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetTextCharset,"GetTextCharset");
   function GetTextCharsetInfo(
      hdc_x : HDC;
      lpSig : LPFONTSIGNATURE;
      dwFlags : DWORD
   ) return Interfaces.C.Int;
   pragma import (C,GetTextCharsetInfo,"GetTextCharsetInfo");
   function TranslateCharsetInfo(
      lpSrc : access DWORD;
      lpCs : LPCHARSETINFO;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,TranslateCharsetInfo,"TranslateCharsetInfo");
   function GetFontLanguageInfo(
      hdc_x : HDC
   ) return DWORD;
   pragma import (C,GetFontLanguageInfo,"GetFontLanguageInfo");
   function GetCharacterPlacementA(
      hdc_x : HDC;
      lpString : LPCSTR;
      nCount : Interfaces.C.Int;
      nMexExtent : Interfaces.C.Int;
      lpResults : LPGCP_RESULTSA;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,GetCharacterPlacementA,"GetCharacterPlacementA");
   function GetCharacterPlacementW(
      hdc_x : HDC;
      lpString : LPCWSTR;
      nCount : Interfaces.C.Int;
      nMexExtent : Interfaces.C.Int;
      lpResults : LPGCP_RESULTSW;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,GetCharacterPlacementW,"GetCharacterPlacementW");
   type tagWCRANGE is record
      wcLow : WCHAR;
      cGlyphs : USHORT;
   end record;
   subtype WCRANGE is tagWCRANGE; -- CXType_Elaborated
   type PWCRANGE is access tagWCRANGE; -- CXType_Pointer - CXType_Elaborated
   type LPWCRANGE is access tagWCRANGE; -- CXType_Pointer - CXType_Elaborated
   type tagGLYPHSET is record
      cbThis : DWORD;
      flAccel : DWORD;
      cGlyphsSupported : DWORD;
      cRanges : DWORD;
      ranges : Void;
   end record;
   subtype GLYPHSET is tagGLYPHSET; -- CXType_Elaborated
   type PGLYPHSET is access tagGLYPHSET; -- CXType_Pointer - CXType_Elaborated
   type LPGLYPHSET is access tagGLYPHSET; -- CXType_Pointer - CXType_Elaborated
   function GetFontUnicodeRanges(
      hdc_x : HDC;
      lpgs : LPGLYPHSET
   ) return DWORD;
   pragma import (C,GetFontUnicodeRanges,"GetFontUnicodeRanges");
   function GetGlyphIndicesA(
      hdc_x : HDC;
      lpstr_x : LPCSTR;
      c : Interfaces.C.Int;
      pgi : LPWORD;
      fl : DWORD
   ) return DWORD;
   pragma import (C,GetGlyphIndicesA,"GetGlyphIndicesA");
   function GetGlyphIndicesW(
      hdc_x : HDC;
      lpstr_x : LPCWSTR;
      c : Interfaces.C.Int;
      pgi : LPWORD;
      fl : DWORD
   ) return DWORD;
   pragma import (C,GetGlyphIndicesW,"GetGlyphIndicesW");
   function GetTextExtentPointI(
      hdc_x : HDC;
      pgiIn : LPWORD;
      cgi : Interfaces.C.Int;
      psize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentPointI,"GetTextExtentPointI");
   function GetTextExtentExPointI(
      hdc_x : HDC;
      lpwszString : LPWORD;
      cwchString : Interfaces.C.Int;
      nMaxExtent : Interfaces.C.Int;
      lpnFit : LPINT;
      lpnDx : LPINT;
      lpSize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetTextExtentExPointI,"GetTextExtentExPointI");
   function GetCharWidthI(
      hdc_x : HDC;
      giFirst : UINT;
      cgi : UINT;
      pgi : LPWORD;
      piWidths : LPINT
   ) return BOOL;
   pragma import (C,GetCharWidthI,"GetCharWidthI");
   function GetCharABCWidthsI(
      hdc_x : HDC;
      giFirst : UINT;
      cgi : UINT;
      pgi : LPWORD;
      pabc_x : LPABC
   ) return BOOL;
   pragma import (C,GetCharABCWidthsI,"GetCharABCWidthsI");
   type tagDESIGNVECTOR is record
      dvReserved : DWORD;
      dvNumAxes : DWORD;
      dvValues : Void;
   end record;
   subtype DESIGNVECTOR is tagDESIGNVECTOR; -- CXType_Elaborated
   type PDESIGNVECTOR is access tagDESIGNVECTOR; -- CXType_Pointer - CXType_Elaborated
   type LPDESIGNVECTOR is access tagDESIGNVECTOR; -- CXType_Pointer - CXType_Elaborated
   function AddFontResourceExA(
      name : LPCSTR;
      fl : DWORD;
      res : PVOID
   ) return Interfaces.C.Int;
   pragma import (C,AddFontResourceExA,"AddFontResourceExA");
   function AddFontResourceExW(
      name : LPCWSTR;
      fl : DWORD;
      res : PVOID
   ) return Interfaces.C.Int;
   pragma import (C,AddFontResourceExW,"AddFontResourceExW");
   function RemoveFontResourceExA(
      name : LPCSTR;
      fl : DWORD;
      pdv : PVOID
   ) return BOOL;
   pragma import (C,RemoveFontResourceExA,"RemoveFontResourceExA");
   function RemoveFontResourceExW(
      name : LPCWSTR;
      fl : DWORD;
      pdv : PVOID
   ) return BOOL;
   pragma import (C,RemoveFontResourceExW,"RemoveFontResourceExW");
   function AddFontMemResourceEx(
      pFileView : PVOID;
      cjSize : DWORD;
      pvResrved : PVOID;
      pNumFonts : access DWORD
   ) return HANDLE;
   pragma import (C,AddFontMemResourceEx,"AddFontMemResourceEx");
   function RemoveFontMemResourceEx(
      h : HANDLE
   ) return BOOL;
   pragma import (C,RemoveFontMemResourceEx,"RemoveFontMemResourceEx");
   type tagAXISINFOA is record
      axMinValue : LONG;
      axMaxValue : LONG;
      axAxisName : Void;
   end record;
   subtype AXISINFOA is tagAXISINFOA; -- CXType_Elaborated
   type PAXISINFOA is access tagAXISINFOA; -- CXType_Pointer - CXType_Elaborated
   type LPAXISINFOA is access tagAXISINFOA; -- CXType_Pointer - CXType_Elaborated
   type tagAXISINFOW is record
      axMinValue : LONG;
      axMaxValue : LONG;
      axAxisName : Void;
   end record;
   subtype AXISINFOW is tagAXISINFOW; -- CXType_Elaborated
   type PAXISINFOW is access tagAXISINFOW; -- CXType_Pointer - CXType_Elaborated
   type LPAXISINFOW is access tagAXISINFOW; -- CXType_Pointer - CXType_Elaborated
   subtype AXISINFO is AXISINFOA; -- CXType_Typedef
   subtype PAXISINFO is PAXISINFOA; -- CXType_Typedef
   subtype LPAXISINFO is LPAXISINFOA; -- CXType_Typedef
   type tagAXESLISTA is record
      axlReserved : DWORD;
      axlNumAxes : DWORD;
      axlAxisInfo : Void;
   end record;
   subtype AXESLISTA is tagAXESLISTA; -- CXType_Elaborated
   type PAXESLISTA is access tagAXESLISTA; -- CXType_Pointer - CXType_Elaborated
   type LPAXESLISTA is access tagAXESLISTA; -- CXType_Pointer - CXType_Elaborated
   type tagAXESLISTW is record
      axlReserved : DWORD;
      axlNumAxes : DWORD;
      axlAxisInfo : Void;
   end record;
   subtype AXESLISTW is tagAXESLISTW; -- CXType_Elaborated
   type PAXESLISTW is access tagAXESLISTW; -- CXType_Pointer - CXType_Elaborated
   type LPAXESLISTW is access tagAXESLISTW; -- CXType_Pointer - CXType_Elaborated
   subtype AXESLIST is AXESLISTA; -- CXType_Typedef
   subtype PAXESLIST is PAXESLISTA; -- CXType_Typedef
   subtype LPAXESLIST is LPAXESLISTA; -- CXType_Typedef
   type tagENUMLOGFONTEXDVA is record
      elfEnumLogfontEx : ENUMLOGFONTEXA;
      elfDesignVector : DESIGNVECTOR;
   end record;
   subtype ENUMLOGFONTEXDVA is tagENUMLOGFONTEXDVA; -- CXType_Elaborated
   type PENUMLOGFONTEXDVA is access tagENUMLOGFONTEXDVA; -- CXType_Pointer - CXType_Elaborated
   type LPENUMLOGFONTEXDVA is access tagENUMLOGFONTEXDVA; -- CXType_Pointer - CXType_Elaborated
   type tagENUMLOGFONTEXDVW is record
      elfEnumLogfontEx : ENUMLOGFONTEXW;
      elfDesignVector : DESIGNVECTOR;
   end record;
   subtype ENUMLOGFONTEXDVW is tagENUMLOGFONTEXDVW; -- CXType_Elaborated
   type PENUMLOGFONTEXDVW is access tagENUMLOGFONTEXDVW; -- CXType_Pointer - CXType_Elaborated
   type LPENUMLOGFONTEXDVW is access tagENUMLOGFONTEXDVW; -- CXType_Pointer - CXType_Elaborated
   subtype ENUMLOGFONTEXDV is ENUMLOGFONTEXDVA; -- CXType_Typedef
   subtype PENUMLOGFONTEXDV is PENUMLOGFONTEXDVA; -- CXType_Typedef
   subtype LPENUMLOGFONTEXDV is LPENUMLOGFONTEXDVA; -- CXType_Typedef
   function CreateFontIndirectExA(
      param1 : access constant ENUMLOGFONTEXDVA
   ) return HFONT;
   pragma import (C,CreateFontIndirectExA,"CreateFontIndirectExA");
   function CreateFontIndirectExW(
      param1 : access constant ENUMLOGFONTEXDVW
   ) return HFONT;
   pragma import (C,CreateFontIndirectExW,"CreateFontIndirectExW");
   type tagENUMTEXTMETRICA is record
      etmNewTextMetricEx : NEWTEXTMETRICEXA;
      etmAxesList : AXESLISTA;
   end record;
   subtype ENUMTEXTMETRICA is tagENUMTEXTMETRICA; -- CXType_Elaborated
   type PENUMTEXTMETRICA is access tagENUMTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type LPENUMTEXTMETRICA is access tagENUMTEXTMETRICA; -- CXType_Pointer - CXType_Elaborated
   type tagENUMTEXTMETRICW is record
      etmNewTextMetricEx : NEWTEXTMETRICEXW;
      etmAxesList : AXESLISTW;
   end record;
   subtype ENUMTEXTMETRICW is tagENUMTEXTMETRICW; -- CXType_Elaborated
   type PENUMTEXTMETRICW is access tagENUMTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   type LPENUMTEXTMETRICW is access tagENUMTEXTMETRICW; -- CXType_Pointer - CXType_Elaborated
   subtype ENUMTEXTMETRIC is ENUMTEXTMETRICA; -- CXType_Typedef
   subtype PENUMTEXTMETRIC is PENUMTEXTMETRICA; -- CXType_Typedef
   subtype LPENUMTEXTMETRIC is LPENUMTEXTMETRICA; -- CXType_Typedef
   function GetViewportExtEx(
      hdc_x : HDC;
      lpsize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetViewportExtEx,"GetViewportExtEx");
   function GetViewportOrgEx(
      hdc_x : HDC;
      lppoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,GetViewportOrgEx,"GetViewportOrgEx");
   function GetWindowExtEx(
      hdc_x : HDC;
      lpsize_x : LPSIZE
   ) return BOOL;
   pragma import (C,GetWindowExtEx,"GetWindowExtEx");
   function GetWindowOrgEx(
      hdc_x : HDC;
      lppoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,GetWindowOrgEx,"GetWindowOrgEx");
   function IntersectClipRect(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,IntersectClipRect,"IntersectClipRect");
   function InvertRgn(
      hdc_x : HDC;
      hrgn_x : HRGN
   ) return BOOL;
   pragma import (C,InvertRgn,"InvertRgn");
   function LineDDA(
      xStart : Interfaces.C.Int;
      yStart : Interfaces.C.Int;
      xEnd : Interfaces.C.Int;
      yEnd : Interfaces.C.Int;
      lpProc : LINEDDAPROC;
      data : LPARAM
   ) return BOOL;
   pragma import (C,LineDDA,"LineDDA");
   function LineTo(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,LineTo,"LineTo");
   function MaskBlt(
      hdcDest : HDC;
      xDest : Interfaces.C.Int;
      yDest : Interfaces.C.Int;
      width : Interfaces.C.Int;
      height : Interfaces.C.Int;
      hdcSrc : HDC;
      xSrc : Interfaces.C.Int;
      ySrc : Interfaces.C.Int;
      hbmMask : HBITMAP;
      xMask : Interfaces.C.Int;
      yMask : Interfaces.C.Int;
      rop : DWORD
   ) return BOOL;
   pragma import (C,MaskBlt,"MaskBlt");
   function PlgBlt(
      hdcDest : HDC;
      lpPoint_x : access constant POINT;
      hdcSrc : HDC;
      xSrc : Interfaces.C.Int;
      ySrc : Interfaces.C.Int;
      width : Interfaces.C.Int;
      height : Interfaces.C.Int;
      hbmMask : HBITMAP;
      xMask : Interfaces.C.Int;
      yMask : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PlgBlt,"PlgBlt");
   function OffsetClipRgn(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,OffsetClipRgn,"OffsetClipRgn");
   function OffsetRgn(
      hrgn_x : HRGN;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,OffsetRgn,"OffsetRgn");
   function PatBlt(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      w : Interfaces.C.Int;
      h : Interfaces.C.Int;
      rop : DWORD
   ) return BOOL;
   pragma import (C,PatBlt,"PatBlt");
   function Pie(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int;
      xr1 : Interfaces.C.Int;
      yr1 : Interfaces.C.Int;
      xr2 : Interfaces.C.Int;
      yr2 : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Pie,"Pie");
   function PlayMetaFile(
      hdc_x : HDC;
      hmf : HMETAFILE
   ) return BOOL;
   pragma import (C,PlayMetaFile,"PlayMetaFile");
   function PaintRgn(
      hdc_x : HDC;
      hrgn_x : HRGN
   ) return BOOL;
   pragma import (C,PaintRgn,"PaintRgn");
   function PolyPolygon(
      hdc_x : HDC;
      apt : access constant POINT;
      asz : access constant INT;
      csz : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PolyPolygon,"PolyPolygon");
   function PtInRegion(
      hrgn_x : HRGN;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PtInRegion,"PtInRegion");
   function PtVisible(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PtVisible,"PtVisible");
   function RectInRegion(
      hrgn_x : HRGN;
      lprect_x : access constant RECT
   ) return BOOL;
   pragma import (C,RectInRegion,"RectInRegion");
   function RectVisible(
      hdc_x : HDC;
      lprect_x : access constant RECT
   ) return BOOL;
   pragma import (C,RectVisible,"RectVisible");
   function Rectangle(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Rectangle,"Rectangle");
   function RestoreDC(
      hdc_x : HDC;
      nSavedDC : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,RestoreDC,"RestoreDC");
   function ResetDCA(
      hdc_x : HDC;
      lpdm : access constant DEVMODEA
   ) return HDC;
   pragma import (C,ResetDCA,"ResetDCA");
   function ResetDCW(
      hdc_x : HDC;
      lpdm : access constant DEVMODEW
   ) return HDC;
   pragma import (C,ResetDCW,"ResetDCW");
   function RealizePalette(
      hdc_x : HDC
   ) return UINT;
   pragma import (C,RealizePalette,"RealizePalette");
   function RemoveFontResourceA(
      lpFileName : LPCSTR
   ) return BOOL;
   pragma import (C,RemoveFontResourceA,"RemoveFontResourceA");
   function RemoveFontResourceW(
      lpFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,RemoveFontResourceW,"RemoveFontResourceW");
   function RoundRect(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int;
      width : Interfaces.C.Int;
      height : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,RoundRect,"RoundRect");
   function ResizePalette(
      hpal : HPALETTE;
      n : UINT
   ) return BOOL;
   pragma import (C,ResizePalette,"ResizePalette");
   function SaveDC(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,SaveDC,"SaveDC");
   function SelectClipRgn(
      hdc_x : HDC;
      hrgn_x : HRGN
   ) return Interfaces.C.Int;
   pragma import (C,SelectClipRgn,"SelectClipRgn");
   function ExtSelectClipRgn(
      hdc_x : HDC;
      hrgn_x : HRGN;
      mode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,ExtSelectClipRgn,"ExtSelectClipRgn");
   function SetMetaRgn(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,SetMetaRgn,"SetMetaRgn");
   function SelectObject(
      hdc_x : HDC;
      h : HGDIOBJ
   ) return HGDIOBJ;
   pragma import (C,SelectObject,"SelectObject");
   function SelectPalette(
      hdc_x : HDC;
      hPal : HPALETTE;
      bForceBkgd : BOOL
   ) return HPALETTE;
   pragma import (C,SelectPalette,"SelectPalette");
   function SetBkColor(
      hdc_x : HDC;
      color : COLORREF
   ) return COLORREF;
   pragma import (C,SetBkColor,"SetBkColor");
   function SetDCBrushColor(
      hdc_x : HDC;
      color : COLORREF
   ) return COLORREF;
   pragma import (C,SetDCBrushColor,"SetDCBrushColor");
   function SetDCPenColor(
      hdc_x : HDC;
      color : COLORREF
   ) return COLORREF;
   pragma import (C,SetDCPenColor,"SetDCPenColor");
   function SetBkMode(
      hdc_x : HDC;
      mode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetBkMode,"SetBkMode");
   function SetBitmapBits(
      hbm : HBITMAP;
      cb : DWORD;
      pvBits : access Void
   ) return LONG;
   pragma import (C,SetBitmapBits,"SetBitmapBits");
   function SetBoundsRect(
      hdc_x : HDC;
      lprect_x : access constant RECT;
      flags : UINT
   ) return UINT;
   pragma import (C,SetBoundsRect,"SetBoundsRect");
   function SetDIBits(
      hdc_x : HDC;
      hbm : HBITMAP;
      start : UINT;
      cLines : UINT;
      lpBits : access Void;
      lpbmi : access constant BITMAPINFO;
      ColorUse : UINT
   ) return Interfaces.C.Int;
   pragma import (C,SetDIBits,"SetDIBits");
   function SetDIBitsToDevice(
      hdc_x : HDC;
      xDest : Interfaces.C.Int;
      yDest : Interfaces.C.Int;
      w : DWORD;
      h : DWORD;
      xSrc : Interfaces.C.Int;
      ySrc : Interfaces.C.Int;
      StartScan : UINT;
      cLines : UINT;
      lpvBits : access Void;
      lpbmi : access constant BITMAPINFO;
      ColorUse : UINT
   ) return Interfaces.C.Int;
   pragma import (C,SetDIBitsToDevice,"SetDIBitsToDevice");
   function SetMapperFlags(
      hdc_x : HDC;
      flags : DWORD
   ) return DWORD;
   pragma import (C,SetMapperFlags,"SetMapperFlags");
   function SetGraphicsMode(
      hdc_x : HDC;
      iMode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetGraphicsMode,"SetGraphicsMode");
   function SetMapMode(
      hdc_x : HDC;
      iMode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetMapMode,"SetMapMode");
   function SetLayout(
      hdc_x : HDC;
      l : DWORD
   ) return DWORD;
   pragma import (C,SetLayout,"SetLayout");
   function GetLayout(
      hdc_x : HDC
   ) return DWORD;
   pragma import (C,GetLayout,"GetLayout");
   function SetMetaFileBitsEx(
      cbBuffer : UINT;
      lpData : access constant BYTE
   ) return HMETAFILE;
   pragma import (C,SetMetaFileBitsEx,"SetMetaFileBitsEx");
   function SetPaletteEntries(
      hpal : HPALETTE;
      iStart : UINT;
      cEntries : UINT;
      pPalEntries : access constant PALETTEENTRY
   ) return UINT;
   pragma import (C,SetPaletteEntries,"SetPaletteEntries");
   function SetPixel(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      color : COLORREF
   ) return COLORREF;
   pragma import (C,SetPixel,"SetPixel");
   function SetPixelV(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      color : COLORREF
   ) return BOOL;
   pragma import (C,SetPixelV,"SetPixelV");
   function SetPixelFormat(
      hdc_x : HDC;
      format : Interfaces.C.Int;
      ppfd : access constant PIXELFORMATDESCRIPTOR
   ) return BOOL;
   pragma import (C,SetPixelFormat,"SetPixelFormat");
   function SetPolyFillMode(
      hdc_x : HDC;
      mode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetPolyFillMode,"SetPolyFillMode");
   function StretchBlt(
      hdcDest : HDC;
      xDest : Interfaces.C.Int;
      yDest : Interfaces.C.Int;
      wDest : Interfaces.C.Int;
      hDest : Interfaces.C.Int;
      hdcSrc : HDC;
      xSrc : Interfaces.C.Int;
      ySrc : Interfaces.C.Int;
      wSrc : Interfaces.C.Int;
      hSrc : Interfaces.C.Int;
      rop : DWORD
   ) return BOOL;
   pragma import (C,StretchBlt,"StretchBlt");
   function SetRectRgn(
      hrgn_x : HRGN;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetRectRgn,"SetRectRgn");
   function StretchDIBits(
      hdc_x : HDC;
      xDest : Interfaces.C.Int;
      yDest : Interfaces.C.Int;
      DestWidth : Interfaces.C.Int;
      DestHeight : Interfaces.C.Int;
      xSrc : Interfaces.C.Int;
      ySrc : Interfaces.C.Int;
      SrcWidth : Interfaces.C.Int;
      SrcHeight : Interfaces.C.Int;
      lpBits : access Void;
      lpbmi : access constant BITMAPINFO;
      iUsage : UINT;
      rop : DWORD
   ) return Interfaces.C.Int;
   pragma import (C,StretchDIBits,"StretchDIBits");
   function SetROP2(
      hdc_x : HDC;
      rop2 : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetROP2,"SetROP2");
   function SetStretchBltMode(
      hdc_x : HDC;
      mode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetStretchBltMode,"SetStretchBltMode");
   function SetSystemPaletteUse(
      hdc_x : HDC;
      use_x : UINT
   ) return UINT;
   pragma import (C,SetSystemPaletteUse,"SetSystemPaletteUse");
   function SetTextCharacterExtra(
      hdc_x : HDC;
      extra : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetTextCharacterExtra,"SetTextCharacterExtra");
   function SetTextColor(
      hdc_x : HDC;
      color : COLORREF
   ) return COLORREF;
   pragma import (C,SetTextColor,"SetTextColor");
   function SetTextAlign(
      hdc_x : HDC;
      align : UINT
   ) return UINT;
   pragma import (C,SetTextAlign,"SetTextAlign");
   function SetTextJustification(
      hdc_x : HDC;
      extra : Interfaces.C.Int;
      count : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetTextJustification,"SetTextJustification");
   function UpdateColors(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,UpdateColors,"UpdateColors");
   subtype COLOR16 is USHORT; -- CXType_Typedef
   type TRIVERTEX_x is record
      x : LONG;
      y : LONG;
      Red : COLOR16;
      Green : COLOR16;
      Blue : COLOR16;
      Alpha : COLOR16;
   end record;
   subtype TRIVERTEX is TRIVERTEX_x; -- CXType_Elaborated
   type PTRIVERTEX is access TRIVERTEX_x; -- CXType_Pointer - CXType_Elaborated
   type LPTRIVERTEX is access TRIVERTEX_x; -- CXType_Pointer - CXType_Elaborated
   type GRADIENT_TRIANGLE_x is record
      Vertex1 : ULONG;
      Vertex2 : ULONG;
      Vertex3 : ULONG;
   end record;
   subtype GRADIENT_TRIANGLE is GRADIENT_TRIANGLE_x; -- CXType_Elaborated
   type PGRADIENT_TRIANGLE is access GRADIENT_TRIANGLE_x; -- CXType_Pointer - CXType_Elaborated
   type LPGRADIENT_TRIANGLE is access GRADIENT_TRIANGLE_x; -- CXType_Pointer - CXType_Elaborated
   type GRADIENT_RECT_x is record
      UpperLeft : ULONG;
      LowerRight : ULONG;
   end record;
   subtype GRADIENT_RECT is GRADIENT_RECT_x; -- CXType_Elaborated
   type PGRADIENT_RECT is access GRADIENT_RECT_x; -- CXType_Pointer - CXType_Elaborated
   type LPGRADIENT_RECT is access GRADIENT_RECT_x; -- CXType_Pointer - CXType_Elaborated
   type BLENDFUNCTION_x is record
      BlendOp : BYTE;
      BlendFlags : BYTE;
      SourceConstantAlpha : BYTE;
      AlphaFormat : BYTE;
   end record;
   subtype BLENDFUNCTION is BLENDFUNCTION_x; -- CXType_Elaborated
   type PBLENDFUNCTION is access BLENDFUNCTION_x; -- CXType_Pointer - CXType_Elaborated
   function AlphaBlend(
      hdcDest : HDC;
      xoriginDest : Interfaces.C.Int;
      yoriginDest : Interfaces.C.Int;
      wDest : Interfaces.C.Int;
      hDest : Interfaces.C.Int;
      hdcSrc : HDC;
      xoriginSrc : Interfaces.C.Int;
      yoriginSrc : Interfaces.C.Int;
      wSrc : Interfaces.C.Int;
      hSrc : Interfaces.C.Int;
      ftn : BLENDFUNCTION
   ) return BOOL;
   pragma import (C,AlphaBlend,"AlphaBlend");
   function TransparentBlt(
      hdcDest : HDC;
      xoriginDest : Interfaces.C.Int;
      yoriginDest : Interfaces.C.Int;
      wDest : Interfaces.C.Int;
      hDest : Interfaces.C.Int;
      hdcSrc : HDC;
      xoriginSrc : Interfaces.C.Int;
      yoriginSrc : Interfaces.C.Int;
      wSrc : Interfaces.C.Int;
      hSrc : Interfaces.C.Int;
      crTransparent : UINT
   ) return BOOL;
   pragma import (C,TransparentBlt,"TransparentBlt");
   function GradientFill(
      hdc_x : HDC;
      pVertex : PTRIVERTEX;
      nVertex : ULONG;
      pMesh : PVOID;
      nMesh : ULONG;
      ulMode : ULONG
   ) return BOOL;
   pragma import (C,GradientFill,"GradientFill");
   function GdiAlphaBlend(
      hdcDest : HDC;
      xoriginDest : Interfaces.C.Int;
      yoriginDest : Interfaces.C.Int;
      wDest : Interfaces.C.Int;
      hDest : Interfaces.C.Int;
      hdcSrc : HDC;
      xoriginSrc : Interfaces.C.Int;
      yoriginSrc : Interfaces.C.Int;
      wSrc : Interfaces.C.Int;
      hSrc : Interfaces.C.Int;
      ftn : BLENDFUNCTION
   ) return BOOL;
   pragma import (C,GdiAlphaBlend,"GdiAlphaBlend");
   function GdiTransparentBlt(
      hdcDest : HDC;
      xoriginDest : Interfaces.C.Int;
      yoriginDest : Interfaces.C.Int;
      wDest : Interfaces.C.Int;
      hDest : Interfaces.C.Int;
      hdcSrc : HDC;
      xoriginSrc : Interfaces.C.Int;
      yoriginSrc : Interfaces.C.Int;
      wSrc : Interfaces.C.Int;
      hSrc : Interfaces.C.Int;
      crTransparent : UINT
   ) return BOOL;
   pragma import (C,GdiTransparentBlt,"GdiTransparentBlt");
   function GdiGradientFill(
      hdc_x : HDC;
      pVertex : PTRIVERTEX;
      nVertex : ULONG;
      pMesh : PVOID;
      nCount : ULONG;
      ulMode : ULONG
   ) return BOOL;
   pragma import (C,GdiGradientFill,"GdiGradientFill");
   function PlayMetaFileRecord(
      hdc_x : HDC;
      lpHandleTable_x : LPHANDLETABLE;
      lpMR : LPMETARECORD;
      noObjs : UINT
   ) return BOOL;
   pragma import (C,PlayMetaFileRecord,"PlayMetaFileRecord");
   subtype MFENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (HDC, HANDLETABLE *, METARECORD *, int, LPARAM)
   function EnumMetaFile(
      hdc_x : HDC;
      hmf : HMETAFILE;
      proc_x : MFENUMPROC;
      param : LPARAM
   ) return BOOL;
   pragma import (C,EnumMetaFile,"EnumMetaFile");
   subtype ENHMFENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM)
   function CloseEnhMetaFile(
      hdc_x : HDC
   ) return HENHMETAFILE;
   pragma import (C,CloseEnhMetaFile,"CloseEnhMetaFile");
   function CopyEnhMetaFileA(
      hEnh : HENHMETAFILE;
      lpFileName : LPCSTR
   ) return HENHMETAFILE;
   pragma import (C,CopyEnhMetaFileA,"CopyEnhMetaFileA");
   function CopyEnhMetaFileW(
      hEnh : HENHMETAFILE;
      lpFileName : LPCWSTR
   ) return HENHMETAFILE;
   pragma import (C,CopyEnhMetaFileW,"CopyEnhMetaFileW");
   function CreateEnhMetaFileA(
      hdc_x : HDC;
      lpFilename : LPCSTR;
      lprc : access constant RECT;
      lpDesc : LPCSTR
   ) return HDC;
   pragma import (C,CreateEnhMetaFileA,"CreateEnhMetaFileA");
   function CreateEnhMetaFileW(
      hdc_x : HDC;
      lpFilename : LPCWSTR;
      lprc : access constant RECT;
      lpDesc : LPCWSTR
   ) return HDC;
   pragma import (C,CreateEnhMetaFileW,"CreateEnhMetaFileW");
   function DeleteEnhMetaFile(
      hmf : HENHMETAFILE
   ) return BOOL;
   pragma import (C,DeleteEnhMetaFile,"DeleteEnhMetaFile");
   function EnumEnhMetaFile(
      hdc_x : HDC;
      hmf : HENHMETAFILE;
      proc_x : ENHMFENUMPROC;
      param : LPVOID;
      lpRect_x : access constant RECT
   ) return BOOL;
   pragma import (C,EnumEnhMetaFile,"EnumEnhMetaFile");
   function GetEnhMetaFileA(
      lpName : LPCSTR
   ) return HENHMETAFILE;
   pragma import (C,GetEnhMetaFileA,"GetEnhMetaFileA");
   function GetEnhMetaFileW(
      lpName : LPCWSTR
   ) return HENHMETAFILE;
   pragma import (C,GetEnhMetaFileW,"GetEnhMetaFileW");
   function GetEnhMetaFileBits(
      hEMF : HENHMETAFILE;
      nSize : UINT;
      lpData : LPBYTE
   ) return UINT;
   pragma import (C,GetEnhMetaFileBits,"GetEnhMetaFileBits");
   function GetEnhMetaFileDescriptionA(
      hemf : HENHMETAFILE;
      cchBuffer : UINT;
      lpDescription : LPSTR
   ) return UINT;
   pragma import (C,GetEnhMetaFileDescriptionA,"GetEnhMetaFileDescriptionA");
   function GetEnhMetaFileDescriptionW(
      hemf : HENHMETAFILE;
      cchBuffer : UINT;
      lpDescription : LPWSTR
   ) return UINT;
   pragma import (C,GetEnhMetaFileDescriptionW,"GetEnhMetaFileDescriptionW");
   function GetEnhMetaFileHeader(
      hemf : HENHMETAFILE;
      nSize : UINT;
      lpEnhMetaHeader_x : LPENHMETAHEADER
   ) return UINT;
   pragma import (C,GetEnhMetaFileHeader,"GetEnhMetaFileHeader");
   function GetEnhMetaFilePaletteEntries(
      hemf : HENHMETAFILE;
      nNumEntries : UINT;
      lpPaletteEntries : LPPALETTEENTRY
   ) return UINT;
   pragma import (C,GetEnhMetaFilePaletteEntries,"GetEnhMetaFilePaletteEntries");
   function GetEnhMetaFilePixelFormat(
      hemf : HENHMETAFILE;
      cbBuffer : UINT;
      ppfd : access PIXELFORMATDESCRIPTOR
   ) return UINT;
   pragma import (C,GetEnhMetaFilePixelFormat,"GetEnhMetaFilePixelFormat");
   function GetWinMetaFileBits(
      hemf : HENHMETAFILE;
      cbData16 : UINT;
      pData16 : LPBYTE;
      iMapMode : INT;
      hdcRef : HDC
   ) return UINT;
   pragma import (C,GetWinMetaFileBits,"GetWinMetaFileBits");
   function PlayEnhMetaFile(
      hdc_x : HDC;
      hmf : HENHMETAFILE;
      lprect_x : access constant RECT
   ) return BOOL;
   pragma import (C,PlayEnhMetaFile,"PlayEnhMetaFile");
   function PlayEnhMetaFileRecord(
      hdc_x : HDC;
      pht : LPHANDLETABLE;
      pmr : access constant ENHMETARECORD;
      cht : UINT
   ) return BOOL;
   pragma import (C,PlayEnhMetaFileRecord,"PlayEnhMetaFileRecord");
   function SetEnhMetaFileBits(
      nSize : UINT;
      pb : access constant BYTE
   ) return HENHMETAFILE;
   pragma import (C,SetEnhMetaFileBits,"SetEnhMetaFileBits");
   function SetWinMetaFileBits(
      nSize : UINT;
      lpMeta16Data : access constant BYTE;
      hdcRef : HDC;
      lpMFP : access constant METAFILEPICT
   ) return HENHMETAFILE;
   pragma import (C,SetWinMetaFileBits,"SetWinMetaFileBits");
   function GdiComment(
      hdc_x : HDC;
      nSize : UINT;
      lpData : access constant BYTE
   ) return BOOL;
   pragma import (C,GdiComment,"GdiComment");
   function GetTextMetricsA(
      hdc_x : HDC;
      lptm : LPTEXTMETRICA
   ) return BOOL;
   pragma import (C,GetTextMetricsA,"GetTextMetricsA");
   function GetTextMetricsW(
      hdc_x : HDC;
      lptm : LPTEXTMETRICW
   ) return BOOL;
   pragma import (C,GetTextMetricsW,"GetTextMetricsW");
   type tagDIBSECTION is record
      dsBm : BITMAP;
      dsBmih : BITMAPINFOHEADER;
      dsBitfields : Void;
      dshSection : HANDLE;
      dsOffset : DWORD;
   end record;
   subtype DIBSECTION is tagDIBSECTION; -- CXType_Elaborated
   type LPDIBSECTION is access tagDIBSECTION; -- CXType_Pointer - CXType_Elaborated
   type PDIBSECTION is access tagDIBSECTION; -- CXType_Pointer - CXType_Elaborated
   function AngleArc(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      r : DWORD;
      StartAngle : FLOAT;
      SweepAngle : FLOAT
   ) return BOOL;
   pragma import (C,AngleArc,"AngleArc");
   function PolyPolyline(
      hdc_x : HDC;
      apt : access constant POINT;
      asz : access constant DWORD;
      csz : DWORD
   ) return BOOL;
   pragma import (C,PolyPolyline,"PolyPolyline");
   function GetWorldTransform(
      hdc_x : HDC;
      lpxf : LPXFORM
   ) return BOOL;
   pragma import (C,GetWorldTransform,"GetWorldTransform");
   function SetWorldTransform(
      hdc_x : HDC;
      lpxf : access constant XFORM
   ) return BOOL;
   pragma import (C,SetWorldTransform,"SetWorldTransform");
   function ModifyWorldTransform(
      hdc_x : HDC;
      lpxf : access constant XFORM;
      mode : DWORD
   ) return BOOL;
   pragma import (C,ModifyWorldTransform,"ModifyWorldTransform");
   function CombineTransform(
      lpxfOut : LPXFORM;
      lpxf1 : access constant XFORM;
      lpxf2 : access constant XFORM
   ) return BOOL;
   pragma import (C,CombineTransform,"CombineTransform");
   function CreateDIBSection(
      hdc_x : HDC;
      pbmi : access constant BITMAPINFO;
      usage : UINT;
      ppvBits : access LPVOID;
      hSection : HANDLE;
      offset : DWORD
   ) return HBITMAP;
   pragma import (C,CreateDIBSection,"CreateDIBSection");
   function GetDIBColorTable(
      hdc_x : HDC;
      iStart : UINT;
      cEntries : UINT;
      prgbq : access RGBQUAD
   ) return UINT;
   pragma import (C,GetDIBColorTable,"GetDIBColorTable");
   function SetDIBColorTable(
      hdc_x : HDC;
      iStart : UINT;
      cEntries : UINT;
      prgbq : access constant RGBQUAD
   ) return UINT;
   pragma import (C,SetDIBColorTable,"SetDIBColorTable");
   type tagCOLORADJUSTMENT is record
      caSize : WORD;
      caFlags : WORD;
      caIlluminantIndex : WORD;
      caRedGamma : WORD;
      caGreenGamma : WORD;
      caBlueGamma : WORD;
      caReferenceBlack : WORD;
      caReferenceWhite : WORD;
      caContrast : SHORT;
      caBrightness : SHORT;
      caColorfulness : SHORT;
      caRedGreenTint : SHORT;
   end record;
   subtype COLORADJUSTMENT is tagCOLORADJUSTMENT; -- CXType_Elaborated
   type PCOLORADJUSTMENT is access tagCOLORADJUSTMENT; -- CXType_Pointer - CXType_Elaborated
   type LPCOLORADJUSTMENT is access tagCOLORADJUSTMENT; -- CXType_Pointer - CXType_Elaborated
   function SetColorAdjustment(
      hdc_x : HDC;
      lpca : access constant COLORADJUSTMENT
   ) return BOOL;
   pragma import (C,SetColorAdjustment,"SetColorAdjustment");
   function GetColorAdjustment(
      hdc_x : HDC;
      lpca : LPCOLORADJUSTMENT
   ) return BOOL;
   pragma import (C,GetColorAdjustment,"GetColorAdjustment");
   function CreateHalftonePalette(
      hdc_x : HDC
   ) return HPALETTE;
   pragma import (C,CreateHalftonePalette,"CreateHalftonePalette");
   subtype ABORTPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HDC, int)
   type DOCINFOA_x is record
      cbSize : Interfaces.C.Int;
      lpszDocName : LPCSTR;
      lpszOutput : LPCSTR;
      lpszDatatype : LPCSTR;
      fwType : DWORD;
   end record;
   subtype DOCINFOA is DOCINFOA_x; -- CXType_Elaborated
   type LPDOCINFOA is access DOCINFOA_x; -- CXType_Pointer - CXType_Elaborated
   type DOCINFOW_x is record
      cbSize : Interfaces.C.Int;
      lpszDocName : LPCWSTR;
      lpszOutput : LPCWSTR;
      lpszDatatype : LPCWSTR;
      fwType : DWORD;
   end record;
   subtype DOCINFOW is DOCINFOW_x; -- CXType_Elaborated
   type LPDOCINFOW is access DOCINFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype DOCINFO is DOCINFOA; -- CXType_Typedef
   subtype LPDOCINFO is LPDOCINFOA; -- CXType_Typedef
   function StartDocA(
      hdc_x : HDC;
      lpdi : access constant DOCINFOA
   ) return Interfaces.C.Int;
   pragma import (C,StartDocA,"StartDocA");
   function StartDocW(
      hdc_x : HDC;
      lpdi : access constant DOCINFOW
   ) return Interfaces.C.Int;
   pragma import (C,StartDocW,"StartDocW");
   function EndDoc(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,EndDoc,"EndDoc");
   function StartPage(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,StartPage,"StartPage");
   function EndPage(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,EndPage,"EndPage");
   function AbortDoc(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,AbortDoc,"AbortDoc");
   function SetAbortProc(
      hdc_x : HDC;
      proc_x : ABORTPROC
   ) return Interfaces.C.Int;
   pragma import (C,SetAbortProc,"SetAbortProc");
   function AbortPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,AbortPath,"AbortPath");
   function ArcTo(
      hdc_x : HDC;
      left : Interfaces.C.Int;
      top : Interfaces.C.Int;
      right : Interfaces.C.Int;
      bottom : Interfaces.C.Int;
      xr1 : Interfaces.C.Int;
      yr1 : Interfaces.C.Int;
      xr2 : Interfaces.C.Int;
      yr2 : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,ArcTo,"ArcTo");
   function BeginPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,BeginPath,"BeginPath");
   function CloseFigure(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,CloseFigure,"CloseFigure");
   function EndPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,EndPath,"EndPath");
   function FillPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,FillPath,"FillPath");
   function FlattenPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,FlattenPath,"FlattenPath");
   function GetPath(
      hdc_x : HDC;
      apt : LPPOINT;
      aj : LPBYTE;
      cpt : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetPath,"GetPath");
   function PathToRegion(
      hdc_x : HDC
   ) return HRGN;
   pragma import (C,PathToRegion,"PathToRegion");
   function PolyDraw(
      hdc_x : HDC;
      apt : access constant POINT;
      aj : access constant BYTE;
      cpt : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PolyDraw,"PolyDraw");
   function SelectClipPath(
      hdc_x : HDC;
      mode : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SelectClipPath,"SelectClipPath");
   function SetArcDirection(
      hdc_x : HDC;
      dir : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetArcDirection,"SetArcDirection");
   function SetMiterLimit(
      hdc_x : HDC;
      limit : FLOAT;
      old : PFLOAT
   ) return BOOL;
   pragma import (C,SetMiterLimit,"SetMiterLimit");
   function StrokeAndFillPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,StrokeAndFillPath,"StrokeAndFillPath");
   function StrokePath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,StrokePath,"StrokePath");
   function WidenPath(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,WidenPath,"WidenPath");
   function ExtCreatePen(
      iPenStyle : DWORD;
      cWidth : DWORD;
      plbrush : access constant LOGBRUSH;
      cStyle : DWORD;
      pstyle : access constant DWORD
   ) return HPEN;
   pragma import (C,ExtCreatePen,"ExtCreatePen");
   function GetMiterLimit(
      hdc_x : HDC;
      plimit : PFLOAT
   ) return BOOL;
   pragma import (C,GetMiterLimit,"GetMiterLimit");
   function GetArcDirection(
      hdc_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,GetArcDirection,"GetArcDirection");
   function GetObjectA(
      h : HANDLE;
      c : Interfaces.C.Int;
      pv : LPVOID
   ) return Interfaces.C.Int;
   pragma import (C,GetObjectA,"GetObjectA");
   function GetObjectW(
      h : HANDLE;
      c : Interfaces.C.Int;
      pv : LPVOID
   ) return Interfaces.C.Int;
   pragma import (C,GetObjectW,"GetObjectW");
   function MoveToEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,MoveToEx,"MoveToEx");
   function TextOutA(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lpString : LPCSTR;
      c : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,TextOutA,"TextOutA");
   function TextOutW(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lpString : LPCWSTR;
      c : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,TextOutW,"TextOutW");
   function ExtTextOutA(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      options : UINT;
      lprect_x : access constant RECT;
      lpString : LPCSTR;
      c : UINT;
      lpDx : access constant INT
   ) return BOOL;
   pragma import (C,ExtTextOutA,"ExtTextOutA");
   function ExtTextOutW(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      options : UINT;
      lprect_x : access constant RECT;
      lpString : LPCWSTR;
      c : UINT;
      lpDx : access constant INT
   ) return BOOL;
   pragma import (C,ExtTextOutW,"ExtTextOutW");
   function PolyTextOutA(
      hdc_x : HDC;
      ppt : access constant POLYTEXTA;
      nstrings : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PolyTextOutA,"PolyTextOutA");
   function PolyTextOutW(
      hdc_x : HDC;
      ppt : access constant POLYTEXTW;
      nstrings : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,PolyTextOutW,"PolyTextOutW");
   function CreatePolygonRgn(
      pptl : access constant POINT;
      cPoint : Interfaces.C.Int;
      iMode : Interfaces.C.Int
   ) return HRGN;
   pragma import (C,CreatePolygonRgn,"CreatePolygonRgn");
   function DPtoLP(
      hdc_x : HDC;
      lppt : LPPOINT;
      c : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,DPtoLP,"DPtoLP");
   function LPtoDP(
      hdc_x : HDC;
      lppt : LPPOINT;
      c : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,LPtoDP,"LPtoDP");
   function Polygon(
      hdc_x : HDC;
      apt : access constant POINT;
      cpt : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Polygon,"Polygon");
   function Polyline(
      hdc_x : HDC;
      apt : access constant POINT;
      cpt : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,Polyline,"Polyline");
   function PolyBezier(
      hdc_x : HDC;
      apt : access constant POINT;
      cpt : DWORD
   ) return BOOL;
   pragma import (C,PolyBezier,"PolyBezier");
   function PolyBezierTo(
      hdc_x : HDC;
      apt : access constant POINT;
      cpt : DWORD
   ) return BOOL;
   pragma import (C,PolyBezierTo,"PolyBezierTo");
   function PolylineTo(
      hdc_x : HDC;
      apt : access constant POINT;
      cpt : DWORD
   ) return BOOL;
   pragma import (C,PolylineTo,"PolylineTo");
   function SetViewportExtEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,SetViewportExtEx,"SetViewportExtEx");
   function SetViewportOrgEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,SetViewportOrgEx,"SetViewportOrgEx");
   function SetWindowExtEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,SetWindowExtEx,"SetWindowExtEx");
   function SetWindowOrgEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,SetWindowOrgEx,"SetWindowOrgEx");
   function OffsetViewportOrgEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,OffsetViewportOrgEx,"OffsetViewportOrgEx");
   function OffsetWindowOrgEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,OffsetWindowOrgEx,"OffsetWindowOrgEx");
   function ScaleViewportExtEx(
      hdc_x : HDC;
      xn : Interfaces.C.Int;
      dx : Interfaces.C.Int;
      yn : Interfaces.C.Int;
      yd : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,ScaleViewportExtEx,"ScaleViewportExtEx");
   function ScaleWindowExtEx(
      hdc_x : HDC;
      xn : Interfaces.C.Int;
      xd : Interfaces.C.Int;
      yn : Interfaces.C.Int;
      yd : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,ScaleWindowExtEx,"ScaleWindowExtEx");
   function SetBitmapDimensionEx(
      hbm : HBITMAP;
      w : Interfaces.C.Int;
      h : Interfaces.C.Int;
      lpsz : LPSIZE
   ) return BOOL;
   pragma import (C,SetBitmapDimensionEx,"SetBitmapDimensionEx");
   function SetBrushOrgEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,SetBrushOrgEx,"SetBrushOrgEx");
   function GetTextFaceA(
      hdc_x : HDC;
      c : Interfaces.C.Int;
      lpName : LPSTR
   ) return Interfaces.C.Int;
   pragma import (C,GetTextFaceA,"GetTextFaceA");
   function GetTextFaceW(
      hdc_x : HDC;
      c : Interfaces.C.Int;
      lpName : LPWSTR
   ) return Interfaces.C.Int;
   pragma import (C,GetTextFaceW,"GetTextFaceW");
   type tagKERNINGPAIR is record
      wFirst : WORD;
      wSecond : WORD;
      iKernAmount : Interfaces.C.Int;
   end record;
   subtype KERNINGPAIR is tagKERNINGPAIR; -- CXType_Elaborated
   type LPKERNINGPAIR is access tagKERNINGPAIR; -- CXType_Pointer - CXType_Elaborated
   function GetKerningPairsA(
      hdc_x : HDC;
      nPairs : DWORD;
      lpKernPair : LPKERNINGPAIR
   ) return DWORD;
   pragma import (C,GetKerningPairsA,"GetKerningPairsA");
   function GetKerningPairsW(
      hdc_x : HDC;
      nPairs : DWORD;
      lpKernPair : LPKERNINGPAIR
   ) return DWORD;
   pragma import (C,GetKerningPairsW,"GetKerningPairsW");
   function GetDCOrgEx(
      hdc_x : HDC;
      lppt : LPPOINT
   ) return BOOL;
   pragma import (C,GetDCOrgEx,"GetDCOrgEx");
   function FixBrushOrgEx(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      ptl : LPPOINT
   ) return BOOL;
   pragma import (C,FixBrushOrgEx,"FixBrushOrgEx");
   function UnrealizeObject(
      h : HGDIOBJ
   ) return BOOL;
   pragma import (C,UnrealizeObject,"UnrealizeObject");
   function GdiFlush return BOOL;
   pragma import (C,GdiFlush,"GdiFlush");
   function GdiSetBatchLimit(
      dw : DWORD
   ) return DWORD;
   pragma import (C,GdiSetBatchLimit,"GdiSetBatchLimit");
   function GdiGetBatchLimit return DWORD;
   pragma import (C,GdiGetBatchLimit,"GdiGetBatchLimit");
   subtype ICMENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPSTR, LPARAM)
   subtype ICMENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPWSTR, LPARAM)
   function SetICMMode(
      hdc_x : HDC;
      mode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,SetICMMode,"SetICMMode");
   function CheckColorsInGamut(
      hdc_x : HDC;
      lpRGBTriple_x : LPRGBTRIPLE;
      dlpBuffer : LPVOID;
      nCount : DWORD
   ) return BOOL;
   pragma import (C,CheckColorsInGamut,"CheckColorsInGamut");
   function GetColorSpace(
      hdc_x : HDC
   ) return HCOLORSPACE;
   pragma import (C,GetColorSpace,"GetColorSpace");
   function GetLogColorSpaceA(
      hColorSpace_x : HCOLORSPACE;
      lpBuffer : LPLOGCOLORSPACEA;
      nSize : DWORD
   ) return BOOL;
   pragma import (C,GetLogColorSpaceA,"GetLogColorSpaceA");
   function GetLogColorSpaceW(
      hColorSpace_x : HCOLORSPACE;
      lpBuffer : LPLOGCOLORSPACEW;
      nSize : DWORD
   ) return BOOL;
   pragma import (C,GetLogColorSpaceW,"GetLogColorSpaceW");
   function CreateColorSpaceA(
      lplcs : LPLOGCOLORSPACEA
   ) return HCOLORSPACE;
   pragma import (C,CreateColorSpaceA,"CreateColorSpaceA");
   function CreateColorSpaceW(
      lplcs : LPLOGCOLORSPACEW
   ) return HCOLORSPACE;
   pragma import (C,CreateColorSpaceW,"CreateColorSpaceW");
   function SetColorSpace(
      hdc_x : HDC;
      hcs : HCOLORSPACE
   ) return HCOLORSPACE;
   pragma import (C,SetColorSpace,"SetColorSpace");
   function DeleteColorSpace(
      hcs : HCOLORSPACE
   ) return BOOL;
   pragma import (C,DeleteColorSpace,"DeleteColorSpace");
   function GetICMProfileA(
      hdc_x : HDC;
      pBufSize : LPDWORD;
      pszFilename : LPSTR
   ) return BOOL;
   pragma import (C,GetICMProfileA,"GetICMProfileA");
   function GetICMProfileW(
      hdc_x : HDC;
      pBufSize : LPDWORD;
      pszFilename : LPWSTR
   ) return BOOL;
   pragma import (C,GetICMProfileW,"GetICMProfileW");
   function SetICMProfileA(
      hdc_x : HDC;
      lpFileName : LPSTR
   ) return BOOL;
   pragma import (C,SetICMProfileA,"SetICMProfileA");
   function SetICMProfileW(
      hdc_x : HDC;
      lpFileName : LPWSTR
   ) return BOOL;
   pragma import (C,SetICMProfileW,"SetICMProfileW");
   function GetDeviceGammaRamp(
      hdc_x : HDC;
      lpRamp : LPVOID
   ) return BOOL;
   pragma import (C,GetDeviceGammaRamp,"GetDeviceGammaRamp");
   function SetDeviceGammaRamp(
      hdc_x : HDC;
      lpRamp : LPVOID
   ) return BOOL;
   pragma import (C,SetDeviceGammaRamp,"SetDeviceGammaRamp");
   function ColorMatchToTarget(
      hdc_x : HDC;
      hdcTarget : HDC;
      action : DWORD
   ) return BOOL;
   pragma import (C,ColorMatchToTarget,"ColorMatchToTarget");
   function EnumICMProfilesA(
      hdc_x : HDC;
      proc_x : ICMENUMPROCA;
      param : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumICMProfilesA,"EnumICMProfilesA");
   function EnumICMProfilesW(
      hdc_x : HDC;
      proc_x : ICMENUMPROCW;
      param : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumICMProfilesW,"EnumICMProfilesW");
   function UpdateICMRegKeyA(
      reserved : DWORD;
      lpszCMID : LPSTR;
      lpszFileName : LPSTR;
      command : UINT
   ) return BOOL;
   pragma import (C,UpdateICMRegKeyA,"UpdateICMRegKeyA");
   function UpdateICMRegKeyW(
      reserved : DWORD;
      lpszCMID : LPWSTR;
      lpszFileName : LPWSTR;
      command : UINT
   ) return BOOL;
   pragma import (C,UpdateICMRegKeyW,"UpdateICMRegKeyW");
   function ColorCorrectPalette(
      hdc_x : HDC;
      hPal : HPALETTE;
      deFirst : DWORD;
      num : DWORD
   ) return BOOL;
   pragma import (C,ColorCorrectPalette,"ColorCorrectPalette");
   type tagEMR is record
      iType : DWORD;
      nSize : DWORD;
   end record;
   subtype EMR is tagEMR; -- CXType_Elaborated
   type PEMR is access tagEMR; -- CXType_Pointer - CXType_Elaborated
   type tagEMRTEXT is record
      ptlReference : POINTL;
      nChars : DWORD;
      offString : DWORD;
      fOptions : DWORD;
      rcl : RECTL;
      offDx : DWORD;
   end record;
   subtype EMRTEXT is tagEMRTEXT; -- CXType_Elaborated
   type PEMRTEXT is access tagEMRTEXT; -- CXType_Pointer - CXType_Elaborated
   type tagABORTPATH is record
      emr_x : EMR;
   end record;
   subtype EMRABORTPATH is tagABORTPATH; -- CXType_Elaborated
   type PEMRABORTPATH is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRBEGINPATH is tagABORTPATH; -- CXType_Elaborated
   type PEMRBEGINPATH is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRENDPATH is tagABORTPATH; -- CXType_Elaborated
   type PEMRENDPATH is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRCLOSEFIGURE is tagABORTPATH; -- CXType_Elaborated
   type PEMRCLOSEFIGURE is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRFLATTENPATH is tagABORTPATH; -- CXType_Elaborated
   type PEMRFLATTENPATH is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRWIDENPATH is tagABORTPATH; -- CXType_Elaborated
   type PEMRWIDENPATH is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETMETARGN is tagABORTPATH; -- CXType_Elaborated
   type PEMRSETMETARGN is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSAVEDC is tagABORTPATH; -- CXType_Elaborated
   type PEMRSAVEDC is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRREALIZEPALETTE is tagABORTPATH; -- CXType_Elaborated
   type PEMRREALIZEPALETTE is access tagABORTPATH; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSELECTCLIPPATH is record
      emr_x : EMR;
      iMode : DWORD;
   end record;
   subtype EMRSELECTCLIPPATH is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSELECTCLIPPATH is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETBKMODE is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETBKMODE is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETMAPMODE is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETMAPMODE is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETLAYOUT is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETLAYOUT is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETPOLYFILLMODE is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETPOLYFILLMODE is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETROP2 is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETROP2 is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETSTRETCHBLTMODE is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETSTRETCHBLTMODE is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETICMMODE is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETICMMODE is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETTEXTALIGN is tagEMRSELECTCLIPPATH; -- CXType_Elaborated
   type PEMRSETTEXTALIGN is access tagEMRSELECTCLIPPATH; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETMITERLIMIT is record
      emr_x : EMR;
      eMiterLimit : FLOAT;
   end record;
   subtype EMRSETMITERLIMIT is tagEMRSETMITERLIMIT; -- CXType_Elaborated
   type PEMRSETMITERLIMIT is access tagEMRSETMITERLIMIT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRRESTOREDC is record
      emr_x : EMR;
      iRelative : LONG;
   end record;
   subtype EMRRESTOREDC is tagEMRRESTOREDC; -- CXType_Elaborated
   type PEMRRESTOREDC is access tagEMRRESTOREDC; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETARCDIRECTION is record
      emr_x : EMR;
      iArcDirection : DWORD;
   end record;
   subtype EMRSETARCDIRECTION is tagEMRSETARCDIRECTION; -- CXType_Elaborated
   type PEMRSETARCDIRECTION is access tagEMRSETARCDIRECTION; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETMAPPERFLAGS is record
      emr_x : EMR;
      dwFlags : DWORD;
   end record;
   subtype EMRSETMAPPERFLAGS is tagEMRSETMAPPERFLAGS; -- CXType_Elaborated
   type PEMRSETMAPPERFLAGS is access tagEMRSETMAPPERFLAGS; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETTEXTCOLOR is record
      emr_x : EMR;
      crColor : COLORREF;
   end record;
   subtype EMRSETBKCOLOR is tagEMRSETTEXTCOLOR; -- CXType_Elaborated
   type PEMRSETBKCOLOR is access tagEMRSETTEXTCOLOR; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETTEXTCOLOR is tagEMRSETTEXTCOLOR; -- CXType_Elaborated
   type PEMRSETTEXTCOLOR is access tagEMRSETTEXTCOLOR; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSELECTOBJECT is record
      emr_x : EMR;
      ihObject : DWORD;
   end record;
   subtype EMRSELECTOBJECT is tagEMRSELECTOBJECT; -- CXType_Elaborated
   type PEMRSELECTOBJECT is access tagEMRSELECTOBJECT; -- CXType_Pointer - CXType_Elaborated
   subtype EMRDELETEOBJECT is tagEMRSELECTOBJECT; -- CXType_Elaborated
   type PEMRDELETEOBJECT is access tagEMRSELECTOBJECT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSELECTPALETTE is record
      emr_x : EMR;
      ihPal : DWORD;
   end record;
   subtype EMRSELECTPALETTE is tagEMRSELECTPALETTE; -- CXType_Elaborated
   type PEMRSELECTPALETTE is access tagEMRSELECTPALETTE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRRESIZEPALETTE is record
      emr_x : EMR;
      ihPal : DWORD;
      cEntries : DWORD;
   end record;
   subtype EMRRESIZEPALETTE is tagEMRRESIZEPALETTE; -- CXType_Elaborated
   type PEMRRESIZEPALETTE is access tagEMRRESIZEPALETTE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETPALETTEENTRIES is record
      emr_x : EMR;
      ihPal : DWORD;
      iStart : DWORD;
      cEntries : DWORD;
      aPalEntries : Void;
   end record;
   subtype EMRSETPALETTEENTRIES is tagEMRSETPALETTEENTRIES; -- CXType_Elaborated
   type PEMRSETPALETTEENTRIES is access tagEMRSETPALETTEENTRIES; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETCOLORADJUSTMENT is record
      emr_x : EMR;
      ColorAdjustment_x : COLORADJUSTMENT;
   end record;
   subtype EMRSETCOLORADJUSTMENT is tagEMRSETCOLORADJUSTMENT; -- CXType_Elaborated
   type PEMRSETCOLORADJUSTMENT is access tagEMRSETCOLORADJUSTMENT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRGDICOMMENT is record
      emr_x : EMR;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype EMRGDICOMMENT is tagEMRGDICOMMENT; -- CXType_Elaborated
   type PEMRGDICOMMENT is access tagEMRGDICOMMENT; -- CXType_Pointer - CXType_Elaborated
   type tagEMREOF is record
      emr_x : EMR;
      nPalEntries : DWORD;
      offPalEntries : DWORD;
      nSizeLast : DWORD;
   end record;
   subtype EMREOF is tagEMREOF; -- CXType_Elaborated
   type PEMREOF is access tagEMREOF; -- CXType_Pointer - CXType_Elaborated
   type tagEMRLINETO is record
      emr_x : EMR;
      ptl : POINTL;
   end record;
   subtype EMRLINETO is tagEMRLINETO; -- CXType_Elaborated
   type PEMRLINETO is access tagEMRLINETO; -- CXType_Pointer - CXType_Elaborated
   subtype EMRMOVETOEX is tagEMRLINETO; -- CXType_Elaborated
   type PEMRMOVETOEX is access tagEMRLINETO; -- CXType_Pointer - CXType_Elaborated
   type tagEMROFFSETCLIPRGN is record
      emr_x : EMR;
      ptlOffset : POINTL;
   end record;
   subtype EMROFFSETCLIPRGN is tagEMROFFSETCLIPRGN; -- CXType_Elaborated
   type PEMROFFSETCLIPRGN is access tagEMROFFSETCLIPRGN; -- CXType_Pointer - CXType_Elaborated
   type tagEMRFILLPATH is record
      emr_x : EMR;
      rclBounds : RECTL;
   end record;
   subtype EMRFILLPATH is tagEMRFILLPATH; -- CXType_Elaborated
   type PEMRFILLPATH is access tagEMRFILLPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSTROKEANDFILLPATH is tagEMRFILLPATH; -- CXType_Elaborated
   type PEMRSTROKEANDFILLPATH is access tagEMRFILLPATH; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSTROKEPATH is tagEMRFILLPATH; -- CXType_Elaborated
   type PEMRSTROKEPATH is access tagEMRFILLPATH; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXCLUDECLIPRECT is record
      emr_x : EMR;
      rclClip : RECTL;
   end record;
   subtype EMREXCLUDECLIPRECT is tagEMREXCLUDECLIPRECT; -- CXType_Elaborated
   type PEMREXCLUDECLIPRECT is access tagEMREXCLUDECLIPRECT; -- CXType_Pointer - CXType_Elaborated
   subtype EMRINTERSECTCLIPRECT is tagEMREXCLUDECLIPRECT; -- CXType_Elaborated
   type PEMRINTERSECTCLIPRECT is access tagEMREXCLUDECLIPRECT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETVIEWPORTORGEX is record
      emr_x : EMR;
      ptlOrigin : POINTL;
   end record;
   subtype EMRSETVIEWPORTORGEX is tagEMRSETVIEWPORTORGEX; -- CXType_Elaborated
   type PEMRSETVIEWPORTORGEX is access tagEMRSETVIEWPORTORGEX; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETWINDOWORGEX is tagEMRSETVIEWPORTORGEX; -- CXType_Elaborated
   type PEMRSETWINDOWORGEX is access tagEMRSETVIEWPORTORGEX; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETBRUSHORGEX is tagEMRSETVIEWPORTORGEX; -- CXType_Elaborated
   type PEMRSETBRUSHORGEX is access tagEMRSETVIEWPORTORGEX; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETVIEWPORTEXTEX is record
      emr_x : EMR;
      szlExtent : SIZEL;
   end record;
   subtype EMRSETVIEWPORTEXTEX is tagEMRSETVIEWPORTEXTEX; -- CXType_Elaborated
   type PEMRSETVIEWPORTEXTEX is access tagEMRSETVIEWPORTEXTEX; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETWINDOWEXTEX is tagEMRSETVIEWPORTEXTEX; -- CXType_Elaborated
   type PEMRSETWINDOWEXTEX is access tagEMRSETVIEWPORTEXTEX; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSCALEVIEWPORTEXTEX is record
      emr_x : EMR;
      xNum : LONG;
      xDenom : LONG;
      yNum : LONG;
      yDenom : LONG;
   end record;
   subtype EMRSCALEVIEWPORTEXTEX is tagEMRSCALEVIEWPORTEXTEX; -- CXType_Elaborated
   type PEMRSCALEVIEWPORTEXTEX is access tagEMRSCALEVIEWPORTEXTEX; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSCALEWINDOWEXTEX is tagEMRSCALEVIEWPORTEXTEX; -- CXType_Elaborated
   type PEMRSCALEWINDOWEXTEX is access tagEMRSCALEVIEWPORTEXTEX; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETWORLDTRANSFORM is record
      emr_x : EMR;
      xform_x : XFORM;
   end record;
   subtype EMRSETWORLDTRANSFORM is tagEMRSETWORLDTRANSFORM; -- CXType_Elaborated
   type PEMRSETWORLDTRANSFORM is access tagEMRSETWORLDTRANSFORM; -- CXType_Pointer - CXType_Elaborated
   type tagEMRMODIFYWORLDTRANSFORM is record
      emr_x : EMR;
      xform_x : XFORM;
      iMode : DWORD;
   end record;
   subtype EMRMODIFYWORLDTRANSFORM is tagEMRMODIFYWORLDTRANSFORM; -- CXType_Elaborated
   type PEMRMODIFYWORLDTRANSFORM is access tagEMRMODIFYWORLDTRANSFORM; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETPIXELV is record
      emr_x : EMR;
      ptlPixel : POINTL;
      crColor : COLORREF;
   end record;
   subtype EMRSETPIXELV is tagEMRSETPIXELV; -- CXType_Elaborated
   type PEMRSETPIXELV is access tagEMRSETPIXELV; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXTFLOODFILL is record
      emr_x : EMR;
      ptlStart : POINTL;
      crColor : COLORREF;
      iMode : DWORD;
   end record;
   subtype EMREXTFLOODFILL is tagEMREXTFLOODFILL; -- CXType_Elaborated
   type PEMREXTFLOODFILL is access tagEMREXTFLOODFILL; -- CXType_Pointer - CXType_Elaborated
   type tagEMRELLIPSE is record
      emr_x : EMR;
      rclBox : RECTL;
   end record;
   subtype EMRELLIPSE is tagEMRELLIPSE; -- CXType_Elaborated
   type PEMRELLIPSE is access tagEMRELLIPSE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRRECTANGLE is tagEMRELLIPSE; -- CXType_Elaborated
   type PEMRRECTANGLE is access tagEMRELLIPSE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRROUNDRECT is record
      emr_x : EMR;
      rclBox : RECTL;
      szlCorner : SIZEL;
   end record;
   subtype EMRROUNDRECT is tagEMRROUNDRECT; -- CXType_Elaborated
   type PEMRROUNDRECT is access tagEMRROUNDRECT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRARC is record
      emr_x : EMR;
      rclBox : RECTL;
      ptlStart : POINTL;
      ptlEnd : POINTL;
   end record;
   subtype EMRARC is tagEMRARC; -- CXType_Elaborated
   type PEMRARC is access tagEMRARC; -- CXType_Pointer - CXType_Elaborated
   subtype EMRARCTO is tagEMRARC; -- CXType_Elaborated
   type PEMRARCTO is access tagEMRARC; -- CXType_Pointer - CXType_Elaborated
   subtype EMRCHORD is tagEMRARC; -- CXType_Elaborated
   type PEMRCHORD is access tagEMRARC; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPIE is tagEMRARC; -- CXType_Elaborated
   type PEMRPIE is access tagEMRARC; -- CXType_Pointer - CXType_Elaborated
   type tagEMRANGLEARC is record
      emr_x : EMR;
      ptlCenter : POINTL;
      nRadius : DWORD;
      eStartAngle : FLOAT;
      eSweepAngle : FLOAT;
   end record;
   subtype EMRANGLEARC is tagEMRANGLEARC; -- CXType_Elaborated
   type PEMRANGLEARC is access tagEMRANGLEARC; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYLINE is record
      emr_x : EMR;
      rclBounds : RECTL;
      cptl : DWORD;
      aptl : Void;
   end record;
   subtype EMRPOLYLINE is tagEMRPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYLINE is access tagEMRPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYBEZIER is tagEMRPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYBEZIER is access tagEMRPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYGON is tagEMRPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYGON is access tagEMRPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYBEZIERTO is tagEMRPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYBEZIERTO is access tagEMRPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYLINETO is tagEMRPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYLINETO is access tagEMRPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYLINE16 is record
      emr_x : EMR;
      rclBounds : RECTL;
      cpts : DWORD;
      apts : Void;
   end record;
   subtype EMRPOLYLINE16 is tagEMRPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYLINE16 is access tagEMRPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYBEZIER16 is tagEMRPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYBEZIER16 is access tagEMRPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYGON16 is tagEMRPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYGON16 is access tagEMRPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYBEZIERTO16 is tagEMRPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYBEZIERTO16 is access tagEMRPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYLINETO16 is tagEMRPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYLINETO16 is access tagEMRPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYDRAW is record
      emr_x : EMR;
      rclBounds : RECTL;
      cptl : DWORD;
      aptl : Void;
      abTypes : Void;
   end record;
   subtype EMRPOLYDRAW is tagEMRPOLYDRAW; -- CXType_Elaborated
   type PEMRPOLYDRAW is access tagEMRPOLYDRAW; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYDRAW16 is record
      emr_x : EMR;
      rclBounds : RECTL;
      cpts : DWORD;
      apts : Void;
      abTypes : Void;
   end record;
   subtype EMRPOLYDRAW16 is tagEMRPOLYDRAW16; -- CXType_Elaborated
   type PEMRPOLYDRAW16 is access tagEMRPOLYDRAW16; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYPOLYLINE is record
      emr_x : EMR;
      rclBounds : RECTL;
      nPolys : DWORD;
      cptl : DWORD;
      aPolyCounts : Void;
      aptl : Void;
   end record;
   subtype EMRPOLYPOLYLINE is tagEMRPOLYPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYPOLYLINE is access tagEMRPOLYPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYPOLYGON is tagEMRPOLYPOLYLINE; -- CXType_Elaborated
   type PEMRPOLYPOLYGON is access tagEMRPOLYPOLYLINE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYPOLYLINE16 is record
      emr_x : EMR;
      rclBounds : RECTL;
      nPolys : DWORD;
      cpts : DWORD;
      aPolyCounts : Void;
      apts : Void;
   end record;
   subtype EMRPOLYPOLYLINE16 is tagEMRPOLYPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYPOLYLINE16 is access tagEMRPOLYPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYPOLYGON16 is tagEMRPOLYPOLYLINE16; -- CXType_Elaborated
   type PEMRPOLYPOLYGON16 is access tagEMRPOLYPOLYLINE16; -- CXType_Pointer - CXType_Elaborated
   type tagEMRINVERTRGN is record
      emr_x : EMR;
      rclBounds : RECTL;
      cbRgnData : DWORD;
      RgnData_x : Void;
   end record;
   subtype EMRINVERTRGN is tagEMRINVERTRGN; -- CXType_Elaborated
   type PEMRINVERTRGN is access tagEMRINVERTRGN; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPAINTRGN is tagEMRINVERTRGN; -- CXType_Elaborated
   type PEMRPAINTRGN is access tagEMRINVERTRGN; -- CXType_Pointer - CXType_Elaborated
   type tagEMRFILLRGN is record
      emr_x : EMR;
      rclBounds : RECTL;
      cbRgnData : DWORD;
      ihBrush : DWORD;
      RgnData_x : Void;
   end record;
   subtype EMRFILLRGN is tagEMRFILLRGN; -- CXType_Elaborated
   type PEMRFILLRGN is access tagEMRFILLRGN; -- CXType_Pointer - CXType_Elaborated
   type tagEMRFRAMERGN is record
      emr_x : EMR;
      rclBounds : RECTL;
      cbRgnData : DWORD;
      ihBrush : DWORD;
      szlStroke : SIZEL;
      RgnData_x : Void;
   end record;
   subtype EMRFRAMERGN is tagEMRFRAMERGN; -- CXType_Elaborated
   type PEMRFRAMERGN is access tagEMRFRAMERGN; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXTSELECTCLIPRGN is record
      emr_x : EMR;
      cbRgnData : DWORD;
      iMode : DWORD;
      RgnData_x : Void;
   end record;
   subtype EMREXTSELECTCLIPRGN is tagEMREXTSELECTCLIPRGN; -- CXType_Elaborated
   type PEMREXTSELECTCLIPRGN is access tagEMREXTSELECTCLIPRGN; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXTTEXTOUTA is record
      emr_x : EMR;
      rclBounds : RECTL;
      iGraphicsMode : DWORD;
      exScale : FLOAT;
      eyScale : FLOAT;
      emrtext_x : EMRTEXT;
   end record;
   subtype EMREXTTEXTOUTA is tagEMREXTTEXTOUTA; -- CXType_Elaborated
   type PEMREXTTEXTOUTA is access tagEMREXTTEXTOUTA; -- CXType_Pointer - CXType_Elaborated
   subtype EMREXTTEXTOUTW is tagEMREXTTEXTOUTA; -- CXType_Elaborated
   type PEMREXTTEXTOUTW is access tagEMREXTTEXTOUTA; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPOLYTEXTOUTA is record
      emr_x : EMR;
      rclBounds : RECTL;
      iGraphicsMode : DWORD;
      exScale : FLOAT;
      eyScale : FLOAT;
      cStrings : LONG;
      aemrtext : Void;
   end record;
   subtype EMRPOLYTEXTOUTA is tagEMRPOLYTEXTOUTA; -- CXType_Elaborated
   type PEMRPOLYTEXTOUTA is access tagEMRPOLYTEXTOUTA; -- CXType_Pointer - CXType_Elaborated
   subtype EMRPOLYTEXTOUTW is tagEMRPOLYTEXTOUTA; -- CXType_Elaborated
   type PEMRPOLYTEXTOUTW is access tagEMRPOLYTEXTOUTA; -- CXType_Pointer - CXType_Elaborated
   type tagEMRBITBLT is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      cxDest : LONG;
      cyDest : LONG;
      dwRop : DWORD;
      xSrc : LONG;
      ySrc : LONG;
      xformSrc : XFORM;
      crBkColorSrc : COLORREF;
      iUsageSrc : DWORD;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
   end record;
   subtype EMRBITBLT is tagEMRBITBLT; -- CXType_Elaborated
   type PEMRBITBLT is access tagEMRBITBLT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSTRETCHBLT is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      cxDest : LONG;
      cyDest : LONG;
      dwRop : DWORD;
      xSrc : LONG;
      ySrc : LONG;
      xformSrc : XFORM;
      crBkColorSrc : COLORREF;
      iUsageSrc : DWORD;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      cxSrc : LONG;
      cySrc : LONG;
   end record;
   subtype EMRSTRETCHBLT is tagEMRSTRETCHBLT; -- CXType_Elaborated
   type PEMRSTRETCHBLT is access tagEMRSTRETCHBLT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRMASKBLT is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      cxDest : LONG;
      cyDest : LONG;
      dwRop : DWORD;
      xSrc : LONG;
      ySrc : LONG;
      xformSrc : XFORM;
      crBkColorSrc : COLORREF;
      iUsageSrc : DWORD;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      xMask : LONG;
      yMask : LONG;
      iUsageMask : DWORD;
      offBmiMask : DWORD;
      cbBmiMask : DWORD;
      offBitsMask : DWORD;
      cbBitsMask : DWORD;
   end record;
   subtype EMRMASKBLT is tagEMRMASKBLT; -- CXType_Elaborated
   type PEMRMASKBLT is access tagEMRMASKBLT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPLGBLT is record
      emr_x : EMR;
      rclBounds : RECTL;
      aptlDest : Void;
      xSrc : LONG;
      ySrc : LONG;
      cxSrc : LONG;
      cySrc : LONG;
      xformSrc : XFORM;
      crBkColorSrc : COLORREF;
      iUsageSrc : DWORD;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      xMask : LONG;
      yMask : LONG;
      iUsageMask : DWORD;
      offBmiMask : DWORD;
      cbBmiMask : DWORD;
      offBitsMask : DWORD;
      cbBitsMask : DWORD;
   end record;
   subtype EMRPLGBLT is tagEMRPLGBLT; -- CXType_Elaborated
   type PEMRPLGBLT is access tagEMRPLGBLT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETDIBITSTODEVICE is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      xSrc : LONG;
      ySrc : LONG;
      cxSrc : LONG;
      cySrc : LONG;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      iUsageSrc : DWORD;
      iStartScan : DWORD;
      cScans : DWORD;
   end record;
   subtype EMRSETDIBITSTODEVICE is tagEMRSETDIBITSTODEVICE; -- CXType_Elaborated
   type PEMRSETDIBITSTODEVICE is access tagEMRSETDIBITSTODEVICE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSTRETCHDIBITS is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      xSrc : LONG;
      ySrc : LONG;
      cxSrc : LONG;
      cySrc : LONG;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      iUsageSrc : DWORD;
      dwRop : DWORD;
      cxDest : LONG;
      cyDest : LONG;
   end record;
   subtype EMRSTRETCHDIBITS is tagEMRSTRETCHDIBITS; -- CXType_Elaborated
   type PEMRSTRETCHDIBITS is access tagEMRSTRETCHDIBITS; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXTCREATEFONTINDIRECTW is record
      emr_x : EMR;
      ihFont : DWORD;
      elfw : EXTLOGFONTW;
   end record;
   subtype EMREXTCREATEFONTINDIRECTW is tagEMREXTCREATEFONTINDIRECTW; -- CXType_Elaborated
   type PEMREXTCREATEFONTINDIRECTW is access tagEMREXTCREATEFONTINDIRECTW; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATEPALETTE is record
      emr_x : EMR;
      ihPal : DWORD;
      lgpl : LOGPALETTE;
   end record;
   subtype EMRCREATEPALETTE is tagEMRCREATEPALETTE; -- CXType_Elaborated
   type PEMRCREATEPALETTE is access tagEMRCREATEPALETTE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATEPEN is record
      emr_x : EMR;
      ihPen : DWORD;
      lopn : LOGPEN;
   end record;
   subtype EMRCREATEPEN is tagEMRCREATEPEN; -- CXType_Elaborated
   type PEMRCREATEPEN is access tagEMRCREATEPEN; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXTCREATEPEN is record
      emr_x : EMR;
      ihPen : DWORD;
      offBmi : DWORD;
      cbBmi : DWORD;
      offBits : DWORD;
      cbBits : DWORD;
      elp : EXTLOGPEN32;
   end record;
   subtype EMREXTCREATEPEN is tagEMREXTCREATEPEN; -- CXType_Elaborated
   type PEMREXTCREATEPEN is access tagEMREXTCREATEPEN; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATEBRUSHINDIRECT is record
      emr_x : EMR;
      ihBrush : DWORD;
      lb : LOGBRUSH32;
   end record;
   subtype EMRCREATEBRUSHINDIRECT is tagEMRCREATEBRUSHINDIRECT; -- CXType_Elaborated
   type PEMRCREATEBRUSHINDIRECT is access tagEMRCREATEBRUSHINDIRECT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATEMONOBRUSH is record
      emr_x : EMR;
      ihBrush : DWORD;
      iUsage : DWORD;
      offBmi : DWORD;
      cbBmi : DWORD;
      offBits : DWORD;
      cbBits : DWORD;
   end record;
   subtype EMRCREATEMONOBRUSH is tagEMRCREATEMONOBRUSH; -- CXType_Elaborated
   type PEMRCREATEMONOBRUSH is access tagEMRCREATEMONOBRUSH; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATEDIBPATTERNBRUSHPT is record
      emr_x : EMR;
      ihBrush : DWORD;
      iUsage : DWORD;
      offBmi : DWORD;
      cbBmi : DWORD;
      offBits : DWORD;
      cbBits : DWORD;
   end record;
   subtype EMRCREATEDIBPATTERNBRUSHPT is tagEMRCREATEDIBPATTERNBRUSHPT; -- CXType_Elaborated
   type PEMRCREATEDIBPATTERNBRUSHPT is access tagEMRCREATEDIBPATTERNBRUSHPT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRFORMAT is record
      dSignature : DWORD;
      nVersion : DWORD;
      cbData : DWORD;
      offData : DWORD;
   end record;
   subtype EMRFORMAT is tagEMRFORMAT; -- CXType_Elaborated
   type PEMRFORMAT is access tagEMRFORMAT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRGLSRECORD is record
      emr_x : EMR;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype EMRGLSRECORD is tagEMRGLSRECORD; -- CXType_Elaborated
   type PEMRGLSRECORD is access tagEMRGLSRECORD; -- CXType_Pointer - CXType_Elaborated
   type tagEMRGLSBOUNDEDRECORD is record
      emr_x : EMR;
      rclBounds : RECTL;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype EMRGLSBOUNDEDRECORD is tagEMRGLSBOUNDEDRECORD; -- CXType_Elaborated
   type PEMRGLSBOUNDEDRECORD is access tagEMRGLSBOUNDEDRECORD; -- CXType_Pointer - CXType_Elaborated
   type tagEMRPIXELFORMAT is record
      emr_x : EMR;
      pfd : PIXELFORMATDESCRIPTOR;
   end record;
   subtype EMRPIXELFORMAT is tagEMRPIXELFORMAT; -- CXType_Elaborated
   type PEMRPIXELFORMAT is access tagEMRPIXELFORMAT; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATECOLORSPACE is record
      emr_x : EMR;
      ihCS : DWORD;
      lcs : LOGCOLORSPACEA;
   end record;
   subtype EMRCREATECOLORSPACE is tagEMRCREATECOLORSPACE; -- CXType_Elaborated
   type PEMRCREATECOLORSPACE is access tagEMRCREATECOLORSPACE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETCOLORSPACE is record
      emr_x : EMR;
      ihCS : DWORD;
   end record;
   subtype EMRSETCOLORSPACE is tagEMRSETCOLORSPACE; -- CXType_Elaborated
   type PEMRSETCOLORSPACE is access tagEMRSETCOLORSPACE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSELECTCOLORSPACE is tagEMRSETCOLORSPACE; -- CXType_Elaborated
   type PEMRSELECTCOLORSPACE is access tagEMRSETCOLORSPACE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRDELETECOLORSPACE is tagEMRSETCOLORSPACE; -- CXType_Elaborated
   type PEMRDELETECOLORSPACE is access tagEMRSETCOLORSPACE; -- CXType_Pointer - CXType_Elaborated
   type tagEMREXTESCAPE is record
      emr_x : EMR;
      iEscape : INT;
      cbEscData : INT;
      EscData : Void;
   end record;
   subtype EMREXTESCAPE is tagEMREXTESCAPE; -- CXType_Elaborated
   type PEMREXTESCAPE is access tagEMREXTESCAPE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRDRAWESCAPE is tagEMREXTESCAPE; -- CXType_Elaborated
   type PEMRDRAWESCAPE is access tagEMREXTESCAPE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRNAMEDESCAPE is record
      emr_x : EMR;
      iEscape : INT;
      cbDriver : INT;
      cbEscData : INT;
      EscData : Void;
   end record;
   subtype EMRNAMEDESCAPE is tagEMRNAMEDESCAPE; -- CXType_Elaborated
   type PEMRNAMEDESCAPE is access tagEMRNAMEDESCAPE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRSETICMPROFILE is record
      emr_x : EMR;
      dwFlags : DWORD;
      cbName : DWORD;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype EMRSETICMPROFILE is tagEMRSETICMPROFILE; -- CXType_Elaborated
   type PEMRSETICMPROFILE is access tagEMRSETICMPROFILE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETICMPROFILEA is tagEMRSETICMPROFILE; -- CXType_Elaborated
   type PEMRSETICMPROFILEA is access tagEMRSETICMPROFILE; -- CXType_Pointer - CXType_Elaborated
   subtype EMRSETICMPROFILEW is tagEMRSETICMPROFILE; -- CXType_Elaborated
   type PEMRSETICMPROFILEW is access tagEMRSETICMPROFILE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRCREATECOLORSPACEW is record
      emr_x : EMR;
      ihCS : DWORD;
      lcs : LOGCOLORSPACEW;
      dwFlags : DWORD;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype EMRCREATECOLORSPACEW is tagEMRCREATECOLORSPACEW; -- CXType_Elaborated
   type PEMRCREATECOLORSPACEW is access tagEMRCREATECOLORSPACEW; -- CXType_Pointer - CXType_Elaborated
   type tagCOLORMATCHTOTARGET is record
      emr_x : EMR;
      dwAction : DWORD;
      dwFlags : DWORD;
      cbName : DWORD;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype EMRCOLORMATCHTOTARGET is tagCOLORMATCHTOTARGET; -- CXType_Elaborated
   type PEMRCOLORMATCHTOTARGET is access tagCOLORMATCHTOTARGET; -- CXType_Pointer - CXType_Elaborated
   type tagCOLORCORRECTPALETTE is record
      emr_x : EMR;
      ihPalette : DWORD;
      nFirstEntry : DWORD;
      nPalEntries : DWORD;
      nReserved : DWORD;
   end record;
   subtype EMRCOLORCORRECTPALETTE is tagCOLORCORRECTPALETTE; -- CXType_Elaborated
   type PEMRCOLORCORRECTPALETTE is access tagCOLORCORRECTPALETTE; -- CXType_Pointer - CXType_Elaborated
   type tagEMRALPHABLEND is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      cxDest : LONG;
      cyDest : LONG;
      dwRop : DWORD;
      xSrc : LONG;
      ySrc : LONG;
      xformSrc : XFORM;
      crBkColorSrc : COLORREF;
      iUsageSrc : DWORD;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      cxSrc : LONG;
      cySrc : LONG;
   end record;
   subtype EMRALPHABLEND is tagEMRALPHABLEND; -- CXType_Elaborated
   type PEMRALPHABLEND is access tagEMRALPHABLEND; -- CXType_Pointer - CXType_Elaborated
   type tagEMRGRADIENTFILL is record
      emr_x : EMR;
      rclBounds : RECTL;
      nVer : DWORD;
      nTri : DWORD;
      ulMode : ULONG;
      Ver : Void;
   end record;
   subtype EMRGRADIENTFILL is tagEMRGRADIENTFILL; -- CXType_Elaborated
   type PEMRGRADIENTFILL is access tagEMRGRADIENTFILL; -- CXType_Pointer - CXType_Elaborated
   type tagEMRTRANSPARENTBLT is record
      emr_x : EMR;
      rclBounds : RECTL;
      xDest : LONG;
      yDest : LONG;
      cxDest : LONG;
      cyDest : LONG;
      dwRop : DWORD;
      xSrc : LONG;
      ySrc : LONG;
      xformSrc : XFORM;
      crBkColorSrc : COLORREF;
      iUsageSrc : DWORD;
      offBmiSrc : DWORD;
      cbBmiSrc : DWORD;
      offBitsSrc : DWORD;
      cbBitsSrc : DWORD;
      cxSrc : LONG;
      cySrc : LONG;
   end record;
   subtype EMRTRANSPARENTBLT is tagEMRTRANSPARENTBLT; -- CXType_Elaborated
   type PEMRTRANSPARENTBLT is access tagEMRTRANSPARENTBLT; -- CXType_Pointer - CXType_Elaborated
   function wglCopyContext(
      param1 : HGLRC;
      param2 : HGLRC;
      param3 : UINT
   ) return BOOL;
   pragma import (C,wglCopyContext,"wglCopyContext");
   function wglCreateContext(
      param1 : HDC
   ) return HGLRC;
   pragma import (C,wglCreateContext,"wglCreateContext");
   function wglCreateLayerContext(
      param1 : HDC;
      param2 : Interfaces.C.Int
   ) return HGLRC;
   pragma import (C,wglCreateLayerContext,"wglCreateLayerContext");
   function wglDeleteContext(
      param1 : HGLRC
   ) return BOOL;
   pragma import (C,wglDeleteContext,"wglDeleteContext");
   function wglGetCurrentContext return HGLRC;
   pragma import (C,wglGetCurrentContext,"wglGetCurrentContext");
   function wglGetCurrentDC return HDC;
   pragma import (C,wglGetCurrentDC,"wglGetCurrentDC");
   function wglGetProcAddress(
      param1 : LPCSTR
   ) return PROC;
   pragma import (C,wglGetProcAddress,"wglGetProcAddress");
   function wglMakeCurrent(
      param1 : HDC;
      param2 : HGLRC
   ) return BOOL;
   pragma import (C,wglMakeCurrent,"wglMakeCurrent");
   function wglShareLists(
      param1 : HGLRC;
      param2 : HGLRC
   ) return BOOL;
   pragma import (C,wglShareLists,"wglShareLists");
   function wglUseFontBitmapsA(
      param1 : HDC;
      param2 : DWORD;
      param3 : DWORD;
      param4 : DWORD
   ) return BOOL;
   pragma import (C,wglUseFontBitmapsA,"wglUseFontBitmapsA");
   function wglUseFontBitmapsW(
      param1 : HDC;
      param2 : DWORD;
      param3 : DWORD;
      param4 : DWORD
   ) return BOOL;
   pragma import (C,wglUseFontBitmapsW,"wglUseFontBitmapsW");
   function SwapBuffers(
      param1 : HDC
   ) return BOOL;
   pragma import (C,SwapBuffers,"SwapBuffers");
   type POINTFLOAT_x is record
      x : FLOAT;
      y : FLOAT;
   end record;
   subtype POINTFLOAT is POINTFLOAT_x; -- CXType_Elaborated
   type PPOINTFLOAT is access POINTFLOAT_x; -- CXType_Pointer - CXType_Elaborated
   type GLYPHMETRICSFLOAT_x is record
      gmfBlackBoxX : FLOAT;
      gmfBlackBoxY : FLOAT;
      gmfptGlyphOrigin : POINTFLOAT;
      gmfCellIncX : FLOAT;
      gmfCellIncY : FLOAT;
   end record;
   subtype GLYPHMETRICSFLOAT is GLYPHMETRICSFLOAT_x; -- CXType_Elaborated
   type PGLYPHMETRICSFLOAT is access GLYPHMETRICSFLOAT_x; -- CXType_Pointer - CXType_Elaborated
   type LPGLYPHMETRICSFLOAT is access GLYPHMETRICSFLOAT_x; -- CXType_Pointer - CXType_Elaborated
   function wglUseFontOutlinesA(
      param1 : HDC;
      param2 : DWORD;
      param3 : DWORD;
      param4 : DWORD;
      param5 : FLOAT;
      param6 : FLOAT;
      param7 : Interfaces.C.Int;
      param8 : LPGLYPHMETRICSFLOAT
   ) return BOOL;
   pragma import (C,wglUseFontOutlinesA,"wglUseFontOutlinesA");
   function wglUseFontOutlinesW(
      param1 : HDC;
      param2 : DWORD;
      param3 : DWORD;
      param4 : DWORD;
      param5 : FLOAT;
      param6 : FLOAT;
      param7 : Interfaces.C.Int;
      param8 : LPGLYPHMETRICSFLOAT
   ) return BOOL;
   pragma import (C,wglUseFontOutlinesW,"wglUseFontOutlinesW");
   type tagLAYERPLANEDESCRIPTOR is record
      nSize : WORD;
      nVersion : WORD;
      dwFlags : DWORD;
      iPixelType : BYTE;
      cColorBits : BYTE;
      cRedBits : BYTE;
      cRedShift : BYTE;
      cGreenBits : BYTE;
      cGreenShift : BYTE;
      cBlueBits : BYTE;
      cBlueShift : BYTE;
      cAlphaBits : BYTE;
      cAlphaShift : BYTE;
      cAccumBits : BYTE;
      cAccumRedBits : BYTE;
      cAccumGreenBits : BYTE;
      cAccumBlueBits : BYTE;
      cAccumAlphaBits : BYTE;
      cDepthBits : BYTE;
      cStencilBits : BYTE;
      cAuxBuffers : BYTE;
      iLayerPlane : BYTE;
      bReserved : BYTE;
      crTransparent : COLORREF;
   end record;
   subtype LAYERPLANEDESCRIPTOR is tagLAYERPLANEDESCRIPTOR; -- CXType_Elaborated
   type PLAYERPLANEDESCRIPTOR is access tagLAYERPLANEDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   type LPLAYERPLANEDESCRIPTOR is access tagLAYERPLANEDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   function wglDescribeLayerPlane(
      param1 : HDC;
      param2 : Interfaces.C.Int;
      param3 : Interfaces.C.Int;
      param4 : UINT;
      param5 : LPLAYERPLANEDESCRIPTOR
   ) return BOOL;
   pragma import (C,wglDescribeLayerPlane,"wglDescribeLayerPlane");
   function wglSetLayerPaletteEntries(
      param1 : HDC;
      param2 : Interfaces.C.Int;
      param3 : Interfaces.C.Int;
      param4 : Interfaces.C.Int;
      param5 : access constant COLORREF
   ) return Interfaces.C.Int;
   pragma import (C,wglSetLayerPaletteEntries,"wglSetLayerPaletteEntries");
   function wglGetLayerPaletteEntries(
      param1 : HDC;
      param2 : Interfaces.C.Int;
      param3 : Interfaces.C.Int;
      param4 : Interfaces.C.Int;
      param5 : access COLORREF
   ) return Interfaces.C.Int;
   pragma import (C,wglGetLayerPaletteEntries,"wglGetLayerPaletteEntries");
   function wglRealizeLayerPalette(
      param1 : HDC;
      param2 : Interfaces.C.Int;
      param3 : BOOL
   ) return BOOL;
   pragma import (C,wglRealizeLayerPalette,"wglRealizeLayerPalette");
   function wglSwapLayerBuffers(
      param1 : HDC;
      param2 : UINT
   ) return BOOL;
   pragma import (C,wglSwapLayerBuffers,"wglSwapLayerBuffers");
   type WGLSWAP_x is record
      hdc_x : HDC;
      uiFlags : UINT;
   end record;
   subtype WGLSWAP is WGLSWAP_x; -- CXType_Elaborated
   type PWGLSWAP is access WGLSWAP_x; -- CXType_Pointer - CXType_Elaborated
   type LPWGLSWAP is access WGLSWAP_x; -- CXType_Pointer - CXType_Elaborated
   function wglSwapMultipleBuffers(
      param1 : UINT;
      param2 : access constant WGLSWAP
   ) return DWORD;
   pragma import (C,wglSwapMultipleBuffers,"wglSwapMultipleBuffers");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winuser.h>
   subtype HDWP is HANDLE; -- CXType_Typedef
   subtype MENUTEMPLATEA is Void; -- CXType_Void
   subtype MENUTEMPLATEW is Void; -- CXType_Void
   subtype MENUTEMPLATE is MENUTEMPLATEA; -- CXType_Typedef
   subtype LPMENUTEMPLATEA is PVOID; -- CXType_Typedef
   subtype LPMENUTEMPLATEW is PVOID; -- CXType_Typedef
   subtype LPMENUTEMPLATE is LPMENUTEMPLATEA; -- CXType_Typedef
   subtype WNDPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LRESULT (HWND, UINT, WPARAM, LPARAM)
   subtype DLGPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] INT_PTR (HWND, UINT, WPARAM, LPARAM)
   subtype TIMERPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HWND, UINT, UINT_PTR, DWORD)
   subtype GRAYSTRINGPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HDC, LPARAM, int)
   subtype WNDENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HWND, LPARAM)
   subtype HOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LRESULT (int, WPARAM, LPARAM)
   subtype SENDASYNCPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HWND, UINT, ULONG_PTR, LRESULT)
   subtype PROPENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HWND, LPCSTR, HANDLE)
   subtype PROPENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HWND, LPCWSTR, HANDLE)
   subtype PROPENUMPROCEXA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HWND, LPSTR, HANDLE, ULONG_PTR)
   subtype PROPENUMPROCEXW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HWND, LPWSTR, HANDLE, ULONG_PTR)
   subtype EDITWORDBREAKPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPSTR, int, int, int)
   subtype EDITWORDBREAKPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPWSTR, int, int, int)
   subtype DRAWSTATEPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HDC, LPARAM, WPARAM, int, int)
   subtype PROPENUMPROC is PROPENUMPROCA; -- CXType_Typedef
   subtype PROPENUMPROCEX is PROPENUMPROCEXA; -- CXType_Typedef
   subtype EDITWORDBREAKPROC is EDITWORDBREAKPROCA; -- CXType_Typedef
   subtype NAMEENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR, LPARAM)
   subtype NAMEENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, LPARAM)
   subtype WINSTAENUMPROCA is NAMEENUMPROCA; -- CXType_Typedef
   subtype DESKTOPENUMPROCA is NAMEENUMPROCA; -- CXType_Typedef
   subtype WINSTAENUMPROCW is NAMEENUMPROCW; -- CXType_Typedef
   subtype DESKTOPENUMPROCW is NAMEENUMPROCW; -- CXType_Typedef
   subtype WINSTAENUMPROC is WINSTAENUMPROCA; -- CXType_Typedef
   subtype DESKTOPENUMPROC is DESKTOPENUMPROCA; -- CXType_Typedef
   function wvsprintfA(
      param1 : LPSTR;
      param2 : LPCSTR;
      arglist : va_list
   ) return Interfaces.C.Int;
   pragma import (C,wvsprintfA,"wvsprintfA");
   function wvsprintfW(
      param1 : LPWSTR;
      param2 : LPCWSTR;
      arglist : va_list
   ) return Interfaces.C.Int;
   pragma import (C,wvsprintfW,"wvsprintfW");
   -- wsprintfA(...); -- variadic function not supported
   -- wsprintfW(...); -- variadic function not supported
   type tagCBT_CREATEWNDA is record
      lpcs : access Void;
      hwndInsertAfter : HWND;
   end record;
   type tagCREATESTRUCTA; -- Forward Declaration
   subtype CBT_CREATEWNDA is tagCBT_CREATEWNDA; -- CXType_Elaborated
   type LPCBT_CREATEWNDA is access tagCBT_CREATEWNDA; -- CXType_Pointer - CXType_Elaborated
   type tagCBT_CREATEWNDW is record
      lpcs : access Void;
      hwndInsertAfter : HWND;
   end record;
   type tagCREATESTRUCTW; -- Forward Declaration
   subtype CBT_CREATEWNDW is tagCBT_CREATEWNDW; -- CXType_Elaborated
   type LPCBT_CREATEWNDW is access tagCBT_CREATEWNDW; -- CXType_Pointer - CXType_Elaborated
   subtype CBT_CREATEWND is CBT_CREATEWNDA; -- CXType_Typedef
   subtype LPCBT_CREATEWND is LPCBT_CREATEWNDA; -- CXType_Typedef
   type tagCBTACTIVATESTRUCT is record
      fMouse : BOOL;
      hWndActive : HWND;
   end record;
   subtype CBTACTIVATESTRUCT is tagCBTACTIVATESTRUCT; -- CXType_Elaborated
   type LPCBTACTIVATESTRUCT is access tagCBTACTIVATESTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagWTSSESSION_NOTIFICATION is record
      cbSize : DWORD;
      dwSessionId : DWORD;
   end record;
   subtype WTSSESSION_NOTIFICATION is tagWTSSESSION_NOTIFICATION; -- CXType_Elaborated
   type PWTSSESSION_NOTIFICATION is access tagWTSSESSION_NOTIFICATION; -- CXType_Pointer - CXType_Elaborated
   type SHELLHOOKINFO is record
      hwnd_x : HWND;
      rc : RECT;
   end record;
   type LPSHELLHOOKINFO is access SHELLHOOKINFO; -- CXType_Pointer - CXType_Elaborated
   type tagEVENTMSG is record
      message : UINT;
      paramL : UINT;
      paramH : UINT;
      time : DWORD;
      hwnd_x : HWND;
   end record;
   subtype EVENTMSG is tagEVENTMSG; -- CXType_Elaborated
   type PEVENTMSGMSG is access tagEVENTMSG; -- CXType_Pointer - CXType_Elaborated
   type NPEVENTMSGMSG is access tagEVENTMSG; -- CXType_Pointer - CXType_Elaborated
   type LPEVENTMSGMSG is access tagEVENTMSG; -- CXType_Pointer - CXType_Elaborated
   type PEVENTMSG is access tagEVENTMSG; -- CXType_Pointer - CXType_Elaborated
   type NPEVENTMSG is access tagEVENTMSG; -- CXType_Pointer - CXType_Elaborated
   type LPEVENTMSG is access tagEVENTMSG; -- CXType_Pointer - CXType_Elaborated
   type tagCWPSTRUCT is record
      lParam_x : LPARAM;
      wParam_x : WPARAM;
      message : UINT;
      hwnd_x : HWND;
   end record;
   subtype CWPSTRUCT is tagCWPSTRUCT; -- CXType_Elaborated
   type PCWPSTRUCT is access tagCWPSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type NPCWPSTRUCT is access tagCWPSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPCWPSTRUCT is access tagCWPSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagCWPRETSTRUCT is record
      lResult_x : LRESULT;
      lParam_x : LPARAM;
      wParam_x : WPARAM;
      message : UINT;
      hwnd_x : HWND;
   end record;
   subtype CWPRETSTRUCT is tagCWPRETSTRUCT; -- CXType_Elaborated
   type PCWPRETSTRUCT is access tagCWPRETSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type NPCWPRETSTRUCT is access tagCWPRETSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPCWPRETSTRUCT is access tagCWPRETSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagKBDLLHOOKSTRUCT is record
      vkCode : DWORD;
      scanCode : DWORD;
      flags : DWORD;
      time : DWORD;
      dwExtraInfo : ULONG_PTR;
   end record;
   subtype KBDLLHOOKSTRUCT is tagKBDLLHOOKSTRUCT; -- CXType_Elaborated
   type LPKBDLLHOOKSTRUCT is access tagKBDLLHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type PKBDLLHOOKSTRUCT is access tagKBDLLHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMSLLHOOKSTRUCT is record
      pt : POINT;
      mouseData : DWORD;
      flags : DWORD;
      time : DWORD;
      dwExtraInfo : ULONG_PTR;
   end record;
   subtype MSLLHOOKSTRUCT is tagMSLLHOOKSTRUCT; -- CXType_Elaborated
   type LPMSLLHOOKSTRUCT is access tagMSLLHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type PMSLLHOOKSTRUCT is access tagMSLLHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagDEBUGHOOKINFO is record
      idThread : DWORD;
      idThreadInstaller : DWORD;
      lParam_x : LPARAM;
      wParam_x : WPARAM;
      code : Interfaces.C.Int;
   end record;
   subtype DEBUGHOOKINFO is tagDEBUGHOOKINFO; -- CXType_Elaborated
   type PDEBUGHOOKINFO is access tagDEBUGHOOKINFO; -- CXType_Pointer - CXType_Elaborated
   type NPDEBUGHOOKINFO is access tagDEBUGHOOKINFO; -- CXType_Pointer - CXType_Elaborated
   type LPDEBUGHOOKINFO is access tagDEBUGHOOKINFO; -- CXType_Pointer - CXType_Elaborated
   type tagMOUSEHOOKSTRUCT is record
      pt : POINT;
      hwnd_x : HWND;
      wHitTestCode : UINT;
      dwExtraInfo : ULONG_PTR;
   end record;
   subtype MOUSEHOOKSTRUCT is tagMOUSEHOOKSTRUCT; -- CXType_Elaborated
   type LPMOUSEHOOKSTRUCT is access tagMOUSEHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type PMOUSEHOOKSTRUCT is access tagMOUSEHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMOUSEHOOKSTRUCTEX is record
      mouseData : DWORD;
   end record;
   subtype MOUSEHOOKSTRUCTEX is tagMOUSEHOOKSTRUCTEX; -- CXType_Elaborated
   type LPMOUSEHOOKSTRUCTEX is access tagMOUSEHOOKSTRUCTEX; -- CXType_Pointer - CXType_Elaborated
   type PMOUSEHOOKSTRUCTEX is access tagMOUSEHOOKSTRUCTEX; -- CXType_Pointer - CXType_Elaborated
   type tagHARDWAREHOOKSTRUCT is record
      hwnd_x : HWND;
      message : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
   end record;
   subtype HARDWAREHOOKSTRUCT is tagHARDWAREHOOKSTRUCT; -- CXType_Elaborated
   type LPHARDWAREHOOKSTRUCT is access tagHARDWAREHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type PHARDWAREHOOKSTRUCT is access tagHARDWAREHOOKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   function LoadKeyboardLayoutA(
      pwszKLID : LPCSTR;
      Flags : UINT
   ) return HKL;
   pragma import (C,LoadKeyboardLayoutA,"LoadKeyboardLayoutA");
   function LoadKeyboardLayoutW(
      pwszKLID : LPCWSTR;
      Flags : UINT
   ) return HKL;
   pragma import (C,LoadKeyboardLayoutW,"LoadKeyboardLayoutW");
   function ActivateKeyboardLayout(
      hkl_x : HKL;
      Flags : UINT
   ) return HKL;
   pragma import (C,ActivateKeyboardLayout,"ActivateKeyboardLayout");
   function ToUnicodeEx(
      wVirtKey : UINT;
      wScanCode : UINT;
      lpKeyState : access constant BYTE;
      pwszBuff : LPWSTR;
      cchBuff : Interfaces.C.Int;
      wFlags : UINT;
      dwhkl : HKL
   ) return Interfaces.C.Int;
   pragma import (C,ToUnicodeEx,"ToUnicodeEx");
   function UnloadKeyboardLayout(
      hkl_x : HKL
   ) return BOOL;
   pragma import (C,UnloadKeyboardLayout,"UnloadKeyboardLayout");
   function GetKeyboardLayoutNameA(
      pwszKLID : LPSTR
   ) return BOOL;
   pragma import (C,GetKeyboardLayoutNameA,"GetKeyboardLayoutNameA");
   function GetKeyboardLayoutNameW(
      pwszKLID : LPWSTR
   ) return BOOL;
   pragma import (C,GetKeyboardLayoutNameW,"GetKeyboardLayoutNameW");
   function GetKeyboardLayoutList(
      nBuff : Interfaces.C.Int;
      lpList : access HKL
   ) return Interfaces.C.Int;
   pragma import (C,GetKeyboardLayoutList,"GetKeyboardLayoutList");
   function GetKeyboardLayout(
      idThread : DWORD
   ) return HKL;
   pragma import (C,GetKeyboardLayout,"GetKeyboardLayout");
   type tagMOUSEMOVEPOINT is record
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      time : DWORD;
      dwExtraInfo : ULONG_PTR;
   end record;
   subtype MOUSEMOVEPOINT is tagMOUSEMOVEPOINT; -- CXType_Elaborated
   type PMOUSEMOVEPOINT is access tagMOUSEMOVEPOINT; -- CXType_Pointer - CXType_Elaborated
   type LPMOUSEMOVEPOINT is access tagMOUSEMOVEPOINT; -- CXType_Pointer - CXType_Elaborated
   function GetMouseMovePointsEx(
      cbSize : UINT;
      lppt : LPMOUSEMOVEPOINT;
      lpptBuf : LPMOUSEMOVEPOINT;
      nBufPoints : Interfaces.C.Int;
      resolution : DWORD
   ) return Interfaces.C.Int;
   pragma import (C,GetMouseMovePointsEx,"GetMouseMovePointsEx");
   function CreateDesktopA(
      lpszDesktop : LPCSTR;
      lpszDevice : LPCSTR;
      pDevmode_x : access DEVMODEA;
      dwFlags : DWORD;
      dwDesiredAccess : ACCESS_MASK;
      lpsa : LPSECURITY_ATTRIBUTES
   ) return HDESK;
   pragma import (C,CreateDesktopA,"CreateDesktopA");
   function CreateDesktopW(
      lpszDesktop : LPCWSTR;
      lpszDevice : LPCWSTR;
      pDevmode_x : access DEVMODEW;
      dwFlags : DWORD;
      dwDesiredAccess : ACCESS_MASK;
      lpsa : LPSECURITY_ATTRIBUTES
   ) return HDESK;
   pragma import (C,CreateDesktopW,"CreateDesktopW");
   function CreateDesktopExA(
      lpszDesktop : LPCSTR;
      lpszDevice : LPCSTR;
      pDevmode_x : access DEVMODEA;
      dwFlags : DWORD;
      dwDesiredAccess : ACCESS_MASK;
      lpsa : LPSECURITY_ATTRIBUTES;
      ulHeapSize : ULONG;
      pvoid_x : PVOID
   ) return HDESK;
   pragma import (C,CreateDesktopExA,"CreateDesktopExA");
   function CreateDesktopExW(
      lpszDesktop : LPCWSTR;
      lpszDevice : LPCWSTR;
      pDevmode_x : access DEVMODEW;
      dwFlags : DWORD;
      dwDesiredAccess : ACCESS_MASK;
      lpsa : LPSECURITY_ATTRIBUTES;
      ulHeapSize : ULONG;
      pvoid_x : PVOID
   ) return HDESK;
   pragma import (C,CreateDesktopExW,"CreateDesktopExW");
   function OpenDesktopA(
      lpszDesktop : LPCSTR;
      dwFlags : DWORD;
      fInherit : BOOL;
      dwDesiredAccess : ACCESS_MASK
   ) return HDESK;
   pragma import (C,OpenDesktopA,"OpenDesktopA");
   function OpenDesktopW(
      lpszDesktop : LPCWSTR;
      dwFlags : DWORD;
      fInherit : BOOL;
      dwDesiredAccess : ACCESS_MASK
   ) return HDESK;
   pragma import (C,OpenDesktopW,"OpenDesktopW");
   function OpenInputDesktop(
      dwFlags : DWORD;
      fInherit : BOOL;
      dwDesiredAccess : ACCESS_MASK
   ) return HDESK;
   pragma import (C,OpenInputDesktop,"OpenInputDesktop");
   function EnumDesktopsA(
      hwinsta_x : HWINSTA;
      lpEnumFunc : DESKTOPENUMPROCA;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumDesktopsA,"EnumDesktopsA");
   function EnumDesktopsW(
      hwinsta_x : HWINSTA;
      lpEnumFunc : DESKTOPENUMPROCW;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumDesktopsW,"EnumDesktopsW");
   function EnumDesktopWindows(
      hDesktop : HDESK;
      lpfn : WNDENUMPROC;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumDesktopWindows,"EnumDesktopWindows");
   function SwitchDesktop(
      hDesktop : HDESK
   ) return BOOL;
   pragma import (C,SwitchDesktop,"SwitchDesktop");
   function SetThreadDesktop(
      hDesktop : HDESK
   ) return BOOL;
   pragma import (C,SetThreadDesktop,"SetThreadDesktop");
   function CloseDesktop(
      hDesktop : HDESK
   ) return BOOL;
   pragma import (C,CloseDesktop,"CloseDesktop");
   function GetThreadDesktop(
      dwThreadId : DWORD
   ) return HDESK;
   pragma import (C,GetThreadDesktop,"GetThreadDesktop");
   function CreateWindowStationA(
      lpwinsta : LPCSTR;
      dwFlags : DWORD;
      dwDesiredAccess : ACCESS_MASK;
      lpsa : LPSECURITY_ATTRIBUTES
   ) return HWINSTA;
   pragma import (C,CreateWindowStationA,"CreateWindowStationA");
   function CreateWindowStationW(
      lpwinsta : LPCWSTR;
      dwFlags : DWORD;
      dwDesiredAccess : ACCESS_MASK;
      lpsa : LPSECURITY_ATTRIBUTES
   ) return HWINSTA;
   pragma import (C,CreateWindowStationW,"CreateWindowStationW");
   function OpenWindowStationA(
      lpszWinSta : LPCSTR;
      fInherit : BOOL;
      dwDesiredAccess : ACCESS_MASK
   ) return HWINSTA;
   pragma import (C,OpenWindowStationA,"OpenWindowStationA");
   function OpenWindowStationW(
      lpszWinSta : LPCWSTR;
      fInherit : BOOL;
      dwDesiredAccess : ACCESS_MASK
   ) return HWINSTA;
   pragma import (C,OpenWindowStationW,"OpenWindowStationW");
   function EnumWindowStationsA(
      lpEnumFunc : WINSTAENUMPROCA;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumWindowStationsA,"EnumWindowStationsA");
   function EnumWindowStationsW(
      lpEnumFunc : WINSTAENUMPROCW;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumWindowStationsW,"EnumWindowStationsW");
   function CloseWindowStation(
      hWinSta_x : HWINSTA
   ) return BOOL;
   pragma import (C,CloseWindowStation,"CloseWindowStation");
   function SetProcessWindowStation(
      hWinSta_x : HWINSTA
   ) return BOOL;
   pragma import (C,SetProcessWindowStation,"SetProcessWindowStation");
   function GetProcessWindowStation return HWINSTA;
   pragma import (C,GetProcessWindowStation,"GetProcessWindowStation");
   function SetUserObjectSecurity(
      hObj : HANDLE;
      pSIRequested : PSECURITY_INFORMATION;
      pSID_x : PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,SetUserObjectSecurity,"SetUserObjectSecurity");
   function GetUserObjectSecurity(
      hObj : HANDLE;
      pSIRequested : PSECURITY_INFORMATION;
      pSID_x : PSECURITY_DESCRIPTOR;
      nLength : DWORD;
      lpnLengthNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetUserObjectSecurity,"GetUserObjectSecurity");
   type tagUSEROBJECTFLAGS is record
      fInherit : BOOL;
      fReserved : BOOL;
      dwFlags : DWORD;
   end record;
   subtype USEROBJECTFLAGS is tagUSEROBJECTFLAGS; -- CXType_Elaborated
   type PUSEROBJECTFLAGS is access tagUSEROBJECTFLAGS; -- CXType_Pointer - CXType_Elaborated
   function GetUserObjectInformationA(
      hObj : HANDLE;
      nIndex : Interfaces.C.Int;
      pvInfo : PVOID;
      nLength : DWORD;
      lpnLengthNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetUserObjectInformationA,"GetUserObjectInformationA");
   function GetUserObjectInformationW(
      hObj : HANDLE;
      nIndex : Interfaces.C.Int;
      pvInfo : PVOID;
      nLength : DWORD;
      lpnLengthNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetUserObjectInformationW,"GetUserObjectInformationW");
   function SetUserObjectInformationA(
      hObj : HANDLE;
      nIndex : Interfaces.C.Int;
      pvInfo : PVOID;
      nLength : DWORD
   ) return BOOL;
   pragma import (C,SetUserObjectInformationA,"SetUserObjectInformationA");
   function SetUserObjectInformationW(
      hObj : HANDLE;
      nIndex : Interfaces.C.Int;
      pvInfo : PVOID;
      nLength : DWORD
   ) return BOOL;
   pragma import (C,SetUserObjectInformationW,"SetUserObjectInformationW");
   type tagWNDCLASSEXA is record
      cbSize : UINT;
      style : UINT;
      lpfnWndProc : WNDPROC;
      cbClsExtra : Interfaces.C.Int;
      cbWndExtra : Interfaces.C.Int;
      hInstance_x : HINSTANCE;
      hIcon_x : HICON;
      hCursor_x : HCURSOR;
      hbrBackground : HBRUSH;
      lpszMenuName : LPCSTR;
      lpszClassName : LPCSTR;
      hIconSm : HICON;
   end record;
   subtype WNDCLASSEXA is tagWNDCLASSEXA; -- CXType_Elaborated
   type PWNDCLASSEXA is access tagWNDCLASSEXA; -- CXType_Pointer - CXType_Elaborated
   type NPWNDCLASSEXA is access tagWNDCLASSEXA; -- CXType_Pointer - CXType_Elaborated
   type LPWNDCLASSEXA is access tagWNDCLASSEXA; -- CXType_Pointer - CXType_Elaborated
   type tagWNDCLASSEXW is record
      cbSize : UINT;
      style : UINT;
      lpfnWndProc : WNDPROC;
      cbClsExtra : Interfaces.C.Int;
      cbWndExtra : Interfaces.C.Int;
      hInstance_x : HINSTANCE;
      hIcon_x : HICON;
      hCursor_x : HCURSOR;
      hbrBackground : HBRUSH;
      lpszMenuName : LPCWSTR;
      lpszClassName : LPCWSTR;
      hIconSm : HICON;
   end record;
   subtype WNDCLASSEXW is tagWNDCLASSEXW; -- CXType_Elaborated
   type PWNDCLASSEXW is access tagWNDCLASSEXW; -- CXType_Pointer - CXType_Elaborated
   type NPWNDCLASSEXW is access tagWNDCLASSEXW; -- CXType_Pointer - CXType_Elaborated
   type LPWNDCLASSEXW is access tagWNDCLASSEXW; -- CXType_Pointer - CXType_Elaborated
   subtype WNDCLASSEX is WNDCLASSEXA; -- CXType_Typedef
   subtype PWNDCLASSEX is PWNDCLASSEXA; -- CXType_Typedef
   subtype NPWNDCLASSEX is NPWNDCLASSEXA; -- CXType_Typedef
   subtype LPWNDCLASSEX is LPWNDCLASSEXA; -- CXType_Typedef
   type tagWNDCLASSA is record
      style : UINT;
      lpfnWndProc : WNDPROC;
      cbClsExtra : Interfaces.C.Int;
      cbWndExtra : Interfaces.C.Int;
      hInstance_x : HINSTANCE;
      hIcon_x : HICON;
      hCursor_x : HCURSOR;
      hbrBackground : HBRUSH;
      lpszMenuName : LPCSTR;
      lpszClassName : LPCSTR;
   end record;
   subtype WNDCLASSA is tagWNDCLASSA; -- CXType_Elaborated
   type PWNDCLASSA is access tagWNDCLASSA; -- CXType_Pointer - CXType_Elaborated
   type NPWNDCLASSA is access tagWNDCLASSA; -- CXType_Pointer - CXType_Elaborated
   type LPWNDCLASSA is access tagWNDCLASSA; -- CXType_Pointer - CXType_Elaborated
   type tagWNDCLASSW is record
      style : UINT;
      lpfnWndProc : WNDPROC;
      cbClsExtra : Interfaces.C.Int;
      cbWndExtra : Interfaces.C.Int;
      hInstance_x : HINSTANCE;
      hIcon_x : HICON;
      hCursor_x : HCURSOR;
      hbrBackground : HBRUSH;
      lpszMenuName : LPCWSTR;
      lpszClassName : LPCWSTR;
   end record;
   subtype WNDCLASSW is tagWNDCLASSW; -- CXType_Elaborated
   type PWNDCLASSW is access tagWNDCLASSW; -- CXType_Pointer - CXType_Elaborated
   type NPWNDCLASSW is access tagWNDCLASSW; -- CXType_Pointer - CXType_Elaborated
   type LPWNDCLASSW is access tagWNDCLASSW; -- CXType_Pointer - CXType_Elaborated
   subtype WNDCLASS is WNDCLASSA; -- CXType_Typedef
   subtype PWNDCLASS is PWNDCLASSA; -- CXType_Typedef
   subtype NPWNDCLASS is NPWNDCLASSA; -- CXType_Typedef
   subtype LPWNDCLASS is LPWNDCLASSA; -- CXType_Typedef
   function IsHungAppWindow(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,IsHungAppWindow,"IsHungAppWindow");
   procedure DisableProcessWindowsGhosting;
   pragma import (C,DisableProcessWindowsGhosting,"DisableProcessWindowsGhosting");
   type tagMSG is record
      hwnd_x : HWND;
      message : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      time : DWORD;
      pt : POINT;
   end record;
   subtype MSG is tagMSG; -- CXType_Elaborated
   type PMSG is access tagMSG; -- CXType_Pointer - CXType_Elaborated
   type NPMSG is access tagMSG; -- CXType_Pointer - CXType_Elaborated
   type LPMSG is access tagMSG; -- CXType_Pointer - CXType_Elaborated
   type tagMINMAXINFO is record
      ptReserved : POINT;
      ptMaxSize : POINT;
      ptMaxPosition : POINT;
      ptMinTrackSize : POINT;
      ptMaxTrackSize : POINT;
   end record;
   subtype MINMAXINFO is tagMINMAXINFO; -- CXType_Elaborated
   type PMINMAXINFO is access tagMINMAXINFO; -- CXType_Pointer - CXType_Elaborated
   type LPMINMAXINFO is access tagMINMAXINFO; -- CXType_Pointer - CXType_Elaborated
   type tagCOPYDATASTRUCT is record
      dwData : ULONG_PTR;
      cbData : DWORD;
      lpData : PVOID;
   end record;
   subtype COPYDATASTRUCT is tagCOPYDATASTRUCT; -- CXType_Elaborated
   type PCOPYDATASTRUCT is access tagCOPYDATASTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMDINEXTMENU is record
      hmenuIn : HMENU;
      hmenuNext : HMENU;
      hwndNext : HWND;
   end record;
   subtype MDINEXTMENU is tagMDINEXTMENU; -- CXType_Elaborated
   type PMDINEXTMENU is access tagMDINEXTMENU; -- CXType_Pointer - CXType_Elaborated
   type LPMDINEXTMENU is access tagMDINEXTMENU; -- CXType_Pointer - CXType_Elaborated
   type POWERBROADCAST_SETTING is record
      PowerSetting : GUID;
      DataLength : DWORD;
      Data : Void;
   end record;
   type PPOWERBROADCAST_SETTING is access POWERBROADCAST_SETTING; -- CXType_Pointer - CXType_Elaborated
   function RegisterWindowMessageA(
      lpString : LPCSTR
   ) return UINT;
   pragma import (C,RegisterWindowMessageA,"RegisterWindowMessageA");
   function RegisterWindowMessageW(
      lpString : LPCWSTR
   ) return UINT;
   pragma import (C,RegisterWindowMessageW,"RegisterWindowMessageW");
   type tagWINDOWPOS is record
      hwnd_x : HWND;
      hwndInsertAfter : HWND;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      flags : UINT;
   end record;
   subtype WINDOWPOS is tagWINDOWPOS; -- CXType_Elaborated
   type LPWINDOWPOS is access tagWINDOWPOS; -- CXType_Pointer - CXType_Elaborated
   type PWINDOWPOS is access tagWINDOWPOS; -- CXType_Pointer - CXType_Elaborated
   type tagNCCALCSIZE_PARAMS is record
      rgrc : Void;
      lppos : PWINDOWPOS;
   end record;
   subtype NCCALCSIZE_PARAMS is tagNCCALCSIZE_PARAMS; -- CXType_Elaborated
   type LPNCCALCSIZE_PARAMS is access tagNCCALCSIZE_PARAMS; -- CXType_Pointer - CXType_Elaborated
   type tagTRACKMOUSEEVENT is record
      cbSize : DWORD;
      dwFlags : DWORD;
      hwndTrack : HWND;
      dwHoverTime : DWORD;
   end record;
   subtype TRACKMOUSEEVENT is tagTRACKMOUSEEVENT; -- CXType_Elaborated
   type LPTRACKMOUSEEVENT is access tagTRACKMOUSEEVENT; -- CXType_Pointer - CXType_Elaborated
   function TrackMouseEvent_x(
      lpEventTrack : LPTRACKMOUSEEVENT
   ) return BOOL;
   pragma import (C,TrackMouseEvent_x,"TrackMouseEvent");
   function DrawEdge(
      hdc_x : HDC;
      qrc : LPRECT;
      edge : UINT;
      grfFlags : UINT
   ) return BOOL;
   pragma import (C,DrawEdge,"DrawEdge");
   function DrawFrameControl(
      param1 : HDC;
      param2 : LPRECT;
      param3 : UINT;
      param4 : UINT
   ) return BOOL;
   pragma import (C,DrawFrameControl,"DrawFrameControl");
   function DrawCaption(
      hwnd_x : HWND;
      hdc_x : HDC;
      lprect_x : access constant RECT;
      flags : UINT
   ) return BOOL;
   pragma import (C,DrawCaption,"DrawCaption");
   function DrawAnimatedRects(
      hwnd_x : HWND;
      idAni : Interfaces.C.Int;
      lprcFrom : access constant RECT;
      lprcTo : access constant RECT
   ) return BOOL;
   pragma import (C,DrawAnimatedRects,"DrawAnimatedRects");
   type tagACCEL is record
      fVirt : BYTE;
      key : WORD;
      cmd : WORD;
   end record;
   subtype ACCEL is tagACCEL; -- CXType_Elaborated
   type LPACCEL is access tagACCEL; -- CXType_Pointer - CXType_Elaborated
   type tagPAINTSTRUCT is record
      hdc_x : HDC;
      fErase : BOOL;
      rcPaint : RECT;
      fRestore : BOOL;
      fIncUpdate : BOOL;
      rgbReserved : Void;
   end record;
   subtype PAINTSTRUCT is tagPAINTSTRUCT; -- CXType_Elaborated
   type PPAINTSTRUCT is access tagPAINTSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type NPPAINTSTRUCT is access tagPAINTSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPPAINTSTRUCT is access tagPAINTSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagCREATESTRUCTA is record
      lpCreateParams : LPVOID;
      hInstance_x : HINSTANCE;
      hMenu_x : HMENU;
      hwndParent : HWND;
      cy : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      y : Interfaces.C.Int;
      x : Interfaces.C.Int;
      style : LONG;
      lpszName : LPCSTR;
      lpszClass : LPCSTR;
      dwExStyle : DWORD;
   end record;
   subtype CREATESTRUCTA is tagCREATESTRUCTA; -- CXType_Elaborated
   type LPCREATESTRUCTA is access tagCREATESTRUCTA; -- CXType_Pointer - CXType_Elaborated
   type tagCREATESTRUCTW is record
      lpCreateParams : LPVOID;
      hInstance_x : HINSTANCE;
      hMenu_x : HMENU;
      hwndParent : HWND;
      cy : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      y : Interfaces.C.Int;
      x : Interfaces.C.Int;
      style : LONG;
      lpszName : LPCWSTR;
      lpszClass : LPCWSTR;
      dwExStyle : DWORD;
   end record;
   subtype CREATESTRUCTW is tagCREATESTRUCTW; -- CXType_Elaborated
   type LPCREATESTRUCTW is access tagCREATESTRUCTW; -- CXType_Pointer - CXType_Elaborated
   subtype CREATESTRUCT is CREATESTRUCTA; -- CXType_Typedef
   subtype LPCREATESTRUCT is LPCREATESTRUCTA; -- CXType_Typedef
   type tagWINDOWPLACEMENT is record
      length : UINT;
      flags : UINT;
      showCmd : UINT;
      ptMinPosition : POINT;
      ptMaxPosition : POINT;
      rcNormalPosition : RECT;
   end record;
   subtype WINDOWPLACEMENT is tagWINDOWPLACEMENT; -- CXType_Elaborated
   type PWINDOWPLACEMENT is access WINDOWPLACEMENT; -- CXType_Pointer - CXType_Typedef
   type LPWINDOWPLACEMENT is access WINDOWPLACEMENT; -- CXType_Pointer - CXType_Typedef
   type tagNMHDR is record
      hwndFrom : HWND;
      idFrom : UINT_PTR;
      code : UINT;
   end record;
   subtype NMHDR is tagNMHDR; -- CXType_Elaborated
   type LPNMHDR is access NMHDR; -- CXType_Pointer - CXType_Typedef
   type tagSTYLESTRUCT is record
      styleOld : DWORD;
      styleNew : DWORD;
   end record;
   subtype STYLESTRUCT is tagSTYLESTRUCT; -- CXType_Elaborated
   type LPSTYLESTRUCT is access tagSTYLESTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMEASUREITEMSTRUCT is record
      CtlType : UINT;
      CtlID : UINT;
      itemID : UINT;
      itemWidth : UINT;
      itemHeight : UINT;
      itemData : ULONG_PTR;
   end record;
   subtype MEASUREITEMSTRUCT is tagMEASUREITEMSTRUCT; -- CXType_Elaborated
   type PMEASUREITEMSTRUCT is access tagMEASUREITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPMEASUREITEMSTRUCT is access tagMEASUREITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagDRAWITEMSTRUCT is record
      CtlType : UINT;
      CtlID : UINT;
      itemID : UINT;
      itemAction : UINT;
      itemState : UINT;
      hwndItem : HWND;
      hDC_x : HDC;
      rcItem : RECT;
      itemData : ULONG_PTR;
   end record;
   subtype DRAWITEMSTRUCT is tagDRAWITEMSTRUCT; -- CXType_Elaborated
   type PDRAWITEMSTRUCT is access tagDRAWITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPDRAWITEMSTRUCT is access tagDRAWITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagDELETEITEMSTRUCT is record
      CtlType : UINT;
      CtlID : UINT;
      itemID : UINT;
      hwndItem : HWND;
      itemData : ULONG_PTR;
   end record;
   subtype DELETEITEMSTRUCT is tagDELETEITEMSTRUCT; -- CXType_Elaborated
   type PDELETEITEMSTRUCT is access tagDELETEITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPDELETEITEMSTRUCT is access tagDELETEITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagCOMPAREITEMSTRUCT is record
      CtlType : UINT;
      CtlID : UINT;
      hwndItem : HWND;
      itemID1 : UINT;
      itemData1 : ULONG_PTR;
      itemID2 : UINT;
      itemData2 : ULONG_PTR;
      dwLocaleId : DWORD;
   end record;
   subtype COMPAREITEMSTRUCT is tagCOMPAREITEMSTRUCT; -- CXType_Elaborated
   type PCOMPAREITEMSTRUCT is access tagCOMPAREITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPCOMPAREITEMSTRUCT is access tagCOMPAREITEMSTRUCT; -- CXType_Pointer - CXType_Elaborated
   function GetMessageA(
      lpMsg_x : LPMSG;
      hWnd_x : HWND;
      wMsgFilterMin : UINT;
      wMsgFilterMax : UINT
   ) return BOOL;
   pragma import (C,GetMessageA,"GetMessageA");
   function GetMessageW(
      lpMsg_x : LPMSG;
      hWnd_x : HWND;
      wMsgFilterMin : UINT;
      wMsgFilterMax : UINT
   ) return BOOL;
   pragma import (C,GetMessageW,"GetMessageW");
   function TranslateMessage(
      lpMsg_x : access constant MSG
   ) return BOOL;
   pragma import (C,TranslateMessage,"TranslateMessage");
   function DispatchMessageA(
      lpMsg_x : access constant MSG
   ) return LRESULT;
   pragma import (C,DispatchMessageA,"DispatchMessageA");
   function DispatchMessageW(
      lpMsg_x : access constant MSG
   ) return LRESULT;
   pragma import (C,DispatchMessageW,"DispatchMessageW");
   function SetMessageQueue(
      cMessagesMax : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetMessageQueue,"SetMessageQueue");
   function PeekMessageA(
      lpMsg_x : LPMSG;
      hWnd_x : HWND;
      wMsgFilterMin : UINT;
      wMsgFilterMax : UINT;
      wRemoveMsg : UINT
   ) return BOOL;
   pragma import (C,PeekMessageA,"PeekMessageA");
   function PeekMessageW(
      lpMsg_x : LPMSG;
      hWnd_x : HWND;
      wMsgFilterMin : UINT;
      wMsgFilterMax : UINT;
      wRemoveMsg : UINT
   ) return BOOL;
   pragma import (C,PeekMessageW,"PeekMessageW");
   function RegisterHotKey(
      hWnd_x : HWND;
      id : Interfaces.C.Int;
      fsModifiers : UINT;
      vk : UINT
   ) return BOOL;
   pragma import (C,RegisterHotKey,"RegisterHotKey");
   function UnregisterHotKey(
      hWnd_x : HWND;
      id : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,UnregisterHotKey,"UnregisterHotKey");
   function ExitWindowsEx(
      uFlags : UINT;
      dwReason : DWORD
   ) return BOOL;
   pragma import (C,ExitWindowsEx,"ExitWindowsEx");
   function SwapMouseButton(
      fSwap : BOOL
   ) return BOOL;
   pragma import (C,SwapMouseButton,"SwapMouseButton");
   function GetMessagePos return DWORD;
   pragma import (C,GetMessagePos,"GetMessagePos");
   function GetMessageTime return LONG;
   pragma import (C,GetMessageTime,"GetMessageTime");
   function GetMessageExtraInfo return LPARAM;
   pragma import (C,GetMessageExtraInfo,"GetMessageExtraInfo");
   function GetUnpredictedMessagePos return DWORD;
   pragma import (C,GetUnpredictedMessagePos,"GetUnpredictedMessagePos");
   function IsWow64Message return BOOL;
   pragma import (C,IsWow64Message,"IsWow64Message");
   function SetMessageExtraInfo(
      lParam_x : LPARAM
   ) return LPARAM;
   pragma import (C,SetMessageExtraInfo,"SetMessageExtraInfo");
   function SendMessageA(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,SendMessageA,"SendMessageA");
   function SendMessageW(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,SendMessageW,"SendMessageW");
   function SendMessageTimeoutA(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      fuFlags : UINT;
      uTimeout : UINT;
      lpdwResult : PDWORD_PTR
   ) return LRESULT;
   pragma import (C,SendMessageTimeoutA,"SendMessageTimeoutA");
   function SendMessageTimeoutW(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      fuFlags : UINT;
      uTimeout : UINT;
      lpdwResult : PDWORD_PTR
   ) return LRESULT;
   pragma import (C,SendMessageTimeoutW,"SendMessageTimeoutW");
   function SendNotifyMessageA(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,SendNotifyMessageA,"SendNotifyMessageA");
   function SendNotifyMessageW(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,SendNotifyMessageW,"SendNotifyMessageW");
   function SendMessageCallbackA(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      lpResultCallBack : SENDASYNCPROC;
      dwData : ULONG_PTR
   ) return BOOL;
   pragma import (C,SendMessageCallbackA,"SendMessageCallbackA");
   function SendMessageCallbackW(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      lpResultCallBack : SENDASYNCPROC;
      dwData : ULONG_PTR
   ) return BOOL;
   pragma import (C,SendMessageCallbackW,"SendMessageCallbackW");
   type BSMINFO is record
      cbSize : UINT;
      hdesk_x : HDESK;
      hwnd_x : HWND;
      luid_x : LUID;
   end record;
   type PBSMINFO is access BSMINFO; -- CXType_Pointer - CXType_Elaborated
   function BroadcastSystemMessageExA(
      flags : DWORD;
      lpInfo : LPDWORD;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      pbsmInfo_x : PBSMINFO
   ) return Interfaces.C.Long;
   pragma import (C,BroadcastSystemMessageExA,"BroadcastSystemMessageExA");
   function BroadcastSystemMessageExW(
      flags : DWORD;
      lpInfo : LPDWORD;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      pbsmInfo_x : PBSMINFO
   ) return Interfaces.C.Long;
   pragma import (C,BroadcastSystemMessageExW,"BroadcastSystemMessageExW");
   function BroadcastSystemMessageA(
      flags : DWORD;
      lpInfo : LPDWORD;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return Interfaces.C.Long;
   pragma import (C,BroadcastSystemMessageA,"BroadcastSystemMessageA");
   function BroadcastSystemMessageW(
      flags : DWORD;
      lpInfo : LPDWORD;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return Interfaces.C.Long;
   pragma import (C,BroadcastSystemMessageW,"BroadcastSystemMessageW");
   subtype HDEVNOTIFY is PVOID; -- CXType_Typedef
   type PHDEVNOTIFY is access HDEVNOTIFY; -- CXType_Pointer - CXType_Typedef
   function RegisterDeviceNotificationA(
      hRecipient : HANDLE;
      NotificationFilter : LPVOID;
      Flags : DWORD
   ) return HDEVNOTIFY;
   pragma import (C,RegisterDeviceNotificationA,"RegisterDeviceNotificationA");
   function RegisterDeviceNotificationW(
      hRecipient : HANDLE;
      NotificationFilter : LPVOID;
      Flags : DWORD
   ) return HDEVNOTIFY;
   pragma import (C,RegisterDeviceNotificationW,"RegisterDeviceNotificationW");
   function UnregisterDeviceNotification(
      Handle_x : HDEVNOTIFY
   ) return BOOL;
   pragma import (C,UnregisterDeviceNotification,"UnregisterDeviceNotification");
   subtype HPOWERNOTIFY is PVOID; -- CXType_Typedef
   type PHPOWERNOTIFY is access HPOWERNOTIFY; -- CXType_Pointer - CXType_Typedef
   function RegisterPowerSettingNotification(
      hRecipient : HANDLE;
      PowerSettingGuid : LPCGUID;
      Flags : DWORD
   ) return HPOWERNOTIFY;
   pragma import (C,RegisterPowerSettingNotification,"RegisterPowerSettingNotification");
   function UnregisterPowerSettingNotification(
      Handle_x : HPOWERNOTIFY
   ) return BOOL;
   pragma import (C,UnregisterPowerSettingNotification,"UnregisterPowerSettingNotification");
   function RegisterSuspendResumeNotification(
      hRecipient : HANDLE;
      Flags : DWORD
   ) return HPOWERNOTIFY;
   pragma import (C,RegisterSuspendResumeNotification,"RegisterSuspendResumeNotification");
   function UnregisterSuspendResumeNotification(
      Handle_x : HPOWERNOTIFY
   ) return BOOL;
   pragma import (C,UnregisterSuspendResumeNotification,"UnregisterSuspendResumeNotification");
   function PostMessageA(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,PostMessageA,"PostMessageA");
   function PostMessageW(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,PostMessageW,"PostMessageW");
   function PostThreadMessageA(
      idThread : DWORD;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,PostThreadMessageA,"PostThreadMessageA");
   function PostThreadMessageW(
      idThread : DWORD;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,PostThreadMessageW,"PostThreadMessageW");
   function AttachThreadInput(
      idAttach : DWORD;
      idAttachTo : DWORD;
      fAttach : BOOL
   ) return BOOL;
   pragma import (C,AttachThreadInput,"AttachThreadInput");
   function ReplyMessage(
      lResult_x : LRESULT
   ) return BOOL;
   pragma import (C,ReplyMessage,"ReplyMessage");
   function WaitMessage return BOOL;
   pragma import (C,WaitMessage,"WaitMessage");
   function WaitForInputIdle(
      hProcess : HANDLE;
      dwMilliseconds : DWORD
   ) return DWORD;
   pragma import (C,WaitForInputIdle,"WaitForInputIdle");
   function DefWindowProcA(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefWindowProcA,"DefWindowProcA");
   function DefWindowProcW(
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefWindowProcW,"DefWindowProcW");
   procedure PostQuitMessage(
      nExitCode : Interfaces.C.Int
   );
   pragma import (C,PostQuitMessage,"PostQuitMessage");
   function CallWindowProcA(
      lpPrevWndFunc : WNDPROC;
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,CallWindowProcA,"CallWindowProcA");
   function CallWindowProcW(
      lpPrevWndFunc : WNDPROC;
      hWnd_x : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,CallWindowProcW,"CallWindowProcW");
   function InSendMessage return BOOL;
   pragma import (C,InSendMessage,"InSendMessage");
   function InSendMessageEx(
      lpReserved : LPVOID
   ) return DWORD;
   pragma import (C,InSendMessageEx,"InSendMessageEx");
   function GetDoubleClickTime return UINT;
   pragma import (C,GetDoubleClickTime,"GetDoubleClickTime");
   function SetDoubleClickTime(
      param1 : UINT
   ) return BOOL;
   pragma import (C,SetDoubleClickTime,"SetDoubleClickTime");
   function RegisterClassA(
      lpWndClass_x : access constant WNDCLASSA
   ) return ATOM;
   pragma import (C,RegisterClassA,"RegisterClassA");
   function RegisterClassW(
      lpWndClass_x : access constant WNDCLASSW
   ) return ATOM;
   pragma import (C,RegisterClassW,"RegisterClassW");
   function UnregisterClassA(
      lpClassName : LPCSTR;
      hInstance_x : HINSTANCE
   ) return BOOL;
   pragma import (C,UnregisterClassA,"UnregisterClassA");
   function UnregisterClassW(
      lpClassName : LPCWSTR;
      hInstance_x : HINSTANCE
   ) return BOOL;
   pragma import (C,UnregisterClassW,"UnregisterClassW");
   function GetClassInfoA(
      hInstance_x : HINSTANCE;
      lpClassName : LPCSTR;
      lpWndClass_x : LPWNDCLASSA
   ) return BOOL;
   pragma import (C,GetClassInfoA,"GetClassInfoA");
   function GetClassInfoW(
      hInstance_x : HINSTANCE;
      lpClassName : LPCWSTR;
      lpWndClass_x : LPWNDCLASSW
   ) return BOOL;
   pragma import (C,GetClassInfoW,"GetClassInfoW");
   function RegisterClassExA(
      param1 : access constant WNDCLASSEXA
   ) return ATOM;
   pragma import (C,RegisterClassExA,"RegisterClassExA");
   function RegisterClassExW(
      param1 : access constant WNDCLASSEXW
   ) return ATOM;
   pragma import (C,RegisterClassExW,"RegisterClassExW");
   function GetClassInfoExA(
      hInstance_x : HINSTANCE;
      lpszClass : LPCSTR;
      lpwcx : LPWNDCLASSEXA
   ) return BOOL;
   pragma import (C,GetClassInfoExA,"GetClassInfoExA");
   function GetClassInfoExW(
      hInstance_x : HINSTANCE;
      lpszClass : LPCWSTR;
      lpwcx : LPWNDCLASSEXW
   ) return BOOL;
   pragma import (C,GetClassInfoExW,"GetClassInfoExW");
   subtype PREGISTERCLASSNAMEW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOLEAN (LPCWSTR)
   function CreateWindowExA(
      dwExStyle : DWORD;
      lpClassName : LPCSTR;
      lpWindowName : LPCSTR;
      dwStyle : DWORD;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      hWndParent : HWND;
      hMenu_x : HMENU;
      hInstance_x : HINSTANCE;
      lpParam : LPVOID
   ) return HWND;
   pragma import (C,CreateWindowExA,"CreateWindowExA");
   function CreateWindowExW(
      dwExStyle : DWORD;
      lpClassName : LPCWSTR;
      lpWindowName : LPCWSTR;
      dwStyle : DWORD;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      hWndParent : HWND;
      hMenu_x : HMENU;
      hInstance_x : HINSTANCE;
      lpParam : LPVOID
   ) return HWND;
   pragma import (C,CreateWindowExW,"CreateWindowExW");
   function IsWindow(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsWindow,"IsWindow");
   function IsMenu(
      hMenu_x : HMENU
   ) return BOOL;
   pragma import (C,IsMenu,"IsMenu");
   function IsChild(
      hWndParent : HWND;
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsChild,"IsChild");
   function DestroyWindow(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,DestroyWindow,"DestroyWindow");
   function ShowWindow(
      hWnd_x : HWND;
      nCmdShow : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,ShowWindow,"ShowWindow");
   function AnimateWindow(
      hWnd_x : HWND;
      dwTime : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,AnimateWindow,"AnimateWindow");
   function UpdateLayeredWindow(
      hWnd_x : HWND;
      hdcDst : HDC;
      pptDst : access POINT;
      psize_x : access SIZE;
      hdcSrc : HDC;
      pptSrc : access POINT;
      crKey : COLORREF;
      pblend : access BLENDFUNCTION;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,UpdateLayeredWindow,"UpdateLayeredWindow");
   type tagUPDATELAYEREDWINDOWINFO is record
      cbSize : DWORD;
      hdcDst : HDC;
      pptDst : access constant POINT;
      psize_x : access constant SIZE;
      hdcSrc : HDC;
      pptSrc : access constant POINT;
      crKey : COLORREF;
      pblend : access constant BLENDFUNCTION;
      dwFlags : DWORD;
      prcDirty : access constant RECT;
   end record;
   subtype UPDATELAYEREDWINDOWINFO is tagUPDATELAYEREDWINDOWINFO; -- CXType_Elaborated
   type PUPDATELAYEREDWINDOWINFO is access tagUPDATELAYEREDWINDOWINFO; -- CXType_Pointer - CXType_Elaborated
   function UpdateLayeredWindowIndirect(
      hWnd_x : HWND;
      pULWInfo : access constant UPDATELAYEREDWINDOWINFO
   ) return BOOL;
   pragma import (C,UpdateLayeredWindowIndirect,"UpdateLayeredWindowIndirect");
   function GetLayeredWindowAttributes(
      hwnd_x : HWND;
      pcrKey : access COLORREF;
      pbAlpha : access BYTE;
      pdwFlags : access DWORD
   ) return BOOL;
   pragma import (C,GetLayeredWindowAttributes,"GetLayeredWindowAttributes");
   function PrintWindow(
      hwnd_x : HWND;
      hdcBlt : HDC;
      nFlags : UINT
   ) return BOOL;
   pragma import (C,PrintWindow,"PrintWindow");
   function SetLayeredWindowAttributes(
      hwnd_x : HWND;
      crKey : COLORREF;
      bAlpha : BYTE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,SetLayeredWindowAttributes,"SetLayeredWindowAttributes");
   function ShowWindowAsync(
      hWnd_x : HWND;
      nCmdShow : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,ShowWindowAsync,"ShowWindowAsync");
   function FlashWindow(
      hWnd_x : HWND;
      bInvert : BOOL
   ) return BOOL;
   pragma import (C,FlashWindow,"FlashWindow");
   type FLASHWINFO is record
      cbSize : UINT;
      hwnd_x : HWND;
      dwFlags : DWORD;
      uCount : UINT;
      dwTimeout : DWORD;
   end record;
   type PFLASHWINFO is access FLASHWINFO; -- CXType_Pointer - CXType_Elaborated
   function FlashWindowEx(
      pfwi : PFLASHWINFO
   ) return BOOL;
   pragma import (C,FlashWindowEx,"FlashWindowEx");
   function ShowOwnedPopups(
      hWnd_x : HWND;
      fShow : BOOL
   ) return BOOL;
   pragma import (C,ShowOwnedPopups,"ShowOwnedPopups");
   function OpenIcon(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,OpenIcon,"OpenIcon");
   function CloseWindow(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,CloseWindow,"CloseWindow");
   function MoveWindow(
      hWnd_x : HWND;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      bRepaint : BOOL
   ) return BOOL;
   pragma import (C,MoveWindow,"MoveWindow");
   function SetWindowPos(
      hWnd_x : HWND;
      hWndInsertAfter : HWND;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,SetWindowPos,"SetWindowPos");
   function GetWindowPlacement(
      hWnd_x : HWND;
      lpwndpl : access WINDOWPLACEMENT
   ) return BOOL;
   pragma import (C,GetWindowPlacement,"GetWindowPlacement");
   function SetWindowPlacement(
      hWnd_x : HWND;
      lpwndpl : access constant WINDOWPLACEMENT
   ) return BOOL;
   pragma import (C,SetWindowPlacement,"SetWindowPlacement");
   function GetWindowDisplayAffinity(
      hWnd_x : HWND;
      pdwAffinity : access DWORD
   ) return BOOL;
   pragma import (C,GetWindowDisplayAffinity,"GetWindowDisplayAffinity");
   function SetWindowDisplayAffinity(
      hWnd_x : HWND;
      dwAffinity : DWORD
   ) return BOOL;
   pragma import (C,SetWindowDisplayAffinity,"SetWindowDisplayAffinity");
   function BeginDeferWindowPos(
      nNumWindows : Interfaces.C.Int
   ) return HDWP;
   pragma import (C,BeginDeferWindowPos,"BeginDeferWindowPos");
   function DeferWindowPos(
      hWinPosInfo : HDWP;
      hWnd_x : HWND;
      hWndInsertAfter : HWND;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      uFlags : UINT
   ) return HDWP;
   pragma import (C,DeferWindowPos,"DeferWindowPos");
   function EndDeferWindowPos(
      hWinPosInfo : HDWP
   ) return BOOL;
   pragma import (C,EndDeferWindowPos,"EndDeferWindowPos");
   function IsWindowVisible(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsWindowVisible,"IsWindowVisible");
   function IsIconic(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsIconic,"IsIconic");
   function AnyPopup return BOOL;
   pragma import (C,AnyPopup,"AnyPopup");
   function BringWindowToTop(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,BringWindowToTop,"BringWindowToTop");
   function IsZoomed(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsZoomed,"IsZoomed");
   type DLGTEMPLATE is record
      style : DWORD;
      dwExtendedStyle : DWORD;
      cdit : WORD;
      x : Interfaces.C.Short;
      y : Interfaces.C.Short;
      cx : Interfaces.C.Short;
      cy : Interfaces.C.Short;
   end record;
   type LPDLGTEMPLATEA is access DLGTEMPLATE; -- CXType_Pointer - CXType_Typedef
   type LPDLGTEMPLATEW is access DLGTEMPLATE; -- CXType_Pointer - CXType_Typedef
   subtype LPDLGTEMPLATE is LPDLGTEMPLATEA; -- CXType_Typedef
   type LPCDLGTEMPLATEA is access constant DLGTEMPLATE; -- CXType_Pointer - CXType_Typedef
   type LPCDLGTEMPLATEW is access constant DLGTEMPLATE; -- CXType_Pointer - CXType_Typedef
   subtype LPCDLGTEMPLATE is LPCDLGTEMPLATEA; -- CXType_Typedef
   type DLGITEMTEMPLATE is record
      style : DWORD;
      dwExtendedStyle : DWORD;
      x : Interfaces.C.Short;
      y : Interfaces.C.Short;
      cx : Interfaces.C.Short;
      cy : Interfaces.C.Short;
      id : WORD;
   end record;
   type PDLGITEMTEMPLATEA is access DLGITEMTEMPLATE; -- CXType_Pointer - CXType_Typedef
   type PDLGITEMTEMPLATEW is access DLGITEMTEMPLATE; -- CXType_Pointer - CXType_Typedef
   subtype PDLGITEMTEMPLATE is PDLGITEMTEMPLATEA; -- CXType_Typedef
   type LPDLGITEMTEMPLATEA is access DLGITEMTEMPLATE; -- CXType_Pointer - CXType_Typedef
   type LPDLGITEMTEMPLATEW is access DLGITEMTEMPLATE; -- CXType_Pointer - CXType_Typedef
   subtype LPDLGITEMTEMPLATE is LPDLGITEMTEMPLATEA; -- CXType_Typedef
   function CreateDialogParamA(
      hInstance_x : HINSTANCE;
      lpTemplateName : LPCSTR;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return HWND;
   pragma import (C,CreateDialogParamA,"CreateDialogParamA");
   function CreateDialogParamW(
      hInstance_x : HINSTANCE;
      lpTemplateName : LPCWSTR;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return HWND;
   pragma import (C,CreateDialogParamW,"CreateDialogParamW");
   function CreateDialogIndirectParamA(
      hInstance_x : HINSTANCE;
      lpTemplate : LPCDLGTEMPLATEA;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return HWND;
   pragma import (C,CreateDialogIndirectParamA,"CreateDialogIndirectParamA");
   function CreateDialogIndirectParamW(
      hInstance_x : HINSTANCE;
      lpTemplate : LPCDLGTEMPLATEW;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return HWND;
   pragma import (C,CreateDialogIndirectParamW,"CreateDialogIndirectParamW");
   function DialogBoxParamA(
      hInstance_x : HINSTANCE;
      lpTemplateName : LPCSTR;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return INT_PTR;
   pragma import (C,DialogBoxParamA,"DialogBoxParamA");
   function DialogBoxParamW(
      hInstance_x : HINSTANCE;
      lpTemplateName : LPCWSTR;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return INT_PTR;
   pragma import (C,DialogBoxParamW,"DialogBoxParamW");
   function DialogBoxIndirectParamA(
      hInstance_x : HINSTANCE;
      hDialogTemplate : LPCDLGTEMPLATEA;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return INT_PTR;
   pragma import (C,DialogBoxIndirectParamA,"DialogBoxIndirectParamA");
   function DialogBoxIndirectParamW(
      hInstance_x : HINSTANCE;
      hDialogTemplate : LPCDLGTEMPLATEW;
      hWndParent : HWND;
      lpDialogFunc : DLGPROC;
      dwInitParam : LPARAM
   ) return INT_PTR;
   pragma import (C,DialogBoxIndirectParamW,"DialogBoxIndirectParamW");
   function EndDialog(
      hDlg : HWND;
      nResult : INT_PTR
   ) return BOOL;
   pragma import (C,EndDialog,"EndDialog");
   function GetDlgItem(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int
   ) return HWND;
   pragma import (C,GetDlgItem,"GetDlgItem");
   function SetDlgItemInt(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      uValue : UINT;
      bSigned : BOOL
   ) return BOOL;
   pragma import (C,SetDlgItemInt,"SetDlgItemInt");
   function GetDlgItemInt(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      lpTranslated : access BOOL;
      bSigned : BOOL
   ) return UINT;
   pragma import (C,GetDlgItemInt,"GetDlgItemInt");
   function SetDlgItemTextA(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      lpString : LPCSTR
   ) return BOOL;
   pragma import (C,SetDlgItemTextA,"SetDlgItemTextA");
   function SetDlgItemTextW(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      lpString : LPCWSTR
   ) return BOOL;
   pragma import (C,SetDlgItemTextW,"SetDlgItemTextW");
   function GetDlgItemTextA(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      lpString : LPSTR;
      cchMax : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GetDlgItemTextA,"GetDlgItemTextA");
   function GetDlgItemTextW(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      lpString : LPWSTR;
      cchMax : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GetDlgItemTextW,"GetDlgItemTextW");
   function CheckDlgButton(
      hDlg : HWND;
      nIDButton : Interfaces.C.Int;
      uCheck : UINT
   ) return BOOL;
   pragma import (C,CheckDlgButton,"CheckDlgButton");
   function CheckRadioButton(
      hDlg : HWND;
      nIDFirstButton : Interfaces.C.Int;
      nIDLastButton : Interfaces.C.Int;
      nIDCheckButton : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,CheckRadioButton,"CheckRadioButton");
   function IsDlgButtonChecked(
      hDlg : HWND;
      nIDButton : Interfaces.C.Int
   ) return UINT;
   pragma import (C,IsDlgButtonChecked,"IsDlgButtonChecked");
   function SendDlgItemMessageA(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,SendDlgItemMessageA,"SendDlgItemMessageA");
   function SendDlgItemMessageW(
      hDlg : HWND;
      nIDDlgItem : Interfaces.C.Int;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,SendDlgItemMessageW,"SendDlgItemMessageW");
   function GetNextDlgGroupItem(
      hDlg : HWND;
      hCtl : HWND;
      bPrevious : BOOL
   ) return HWND;
   pragma import (C,GetNextDlgGroupItem,"GetNextDlgGroupItem");
   function GetNextDlgTabItem(
      hDlg : HWND;
      hCtl : HWND;
      bPrevious : BOOL
   ) return HWND;
   pragma import (C,GetNextDlgTabItem,"GetNextDlgTabItem");
   function GetDlgCtrlID(
      hWnd_x : HWND
   ) return Interfaces.C.Int;
   pragma import (C,GetDlgCtrlID,"GetDlgCtrlID");
   function GetDialogBaseUnits return Interfaces.C.Long;
   pragma import (C,GetDialogBaseUnits,"GetDialogBaseUnits");
   function DefDlgProcA(
      hDlg : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefDlgProcA,"DefDlgProcA");
   function DefDlgProcW(
      hDlg : HWND;
      Msg_x : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefDlgProcW,"DefDlgProcW");
   type DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS is (
      DCDC_DEFAULT,
      DCDC_DISABLE_FONT_UPDATE,
      DCDC_DISABLE_RELAYOUT
   );
   for DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS use (
      DCDC_DEFAULT => 0,
      DCDC_DISABLE_FONT_UPDATE => 1,
      DCDC_DISABLE_RELAYOUT => 2
   );
   for DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS'Size use 32;
   function SetDialogControlDpiChangeBehavior(
      hWnd_x : HWND;
      mask : DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
      values : DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
   ) return BOOL;
   pragma import (C,SetDialogControlDpiChangeBehavior,"SetDialogControlDpiChangeBehavior");
   function GetDialogControlDpiChangeBehavior(
      hWnd_x : HWND
   ) return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
   pragma import (C,GetDialogControlDpiChangeBehavior,"GetDialogControlDpiChangeBehavior");
   type DIALOG_DPI_CHANGE_BEHAVIORS is (
      DDC_DEFAULT,
      DDC_DISABLE_ALL,
      DDC_DISABLE_RESIZE,
      DDC_DISABLE_CONTROL_RELAYOUT
   );
   for DIALOG_DPI_CHANGE_BEHAVIORS use (
      DDC_DEFAULT => 0,
      DDC_DISABLE_ALL => 1,
      DDC_DISABLE_RESIZE => 2,
      DDC_DISABLE_CONTROL_RELAYOUT => 4
   );
   for DIALOG_DPI_CHANGE_BEHAVIORS'Size use 32;
   function SetDialogDpiChangeBehavior(
      hDlg : HWND;
      mask : DIALOG_DPI_CHANGE_BEHAVIORS;
      values : DIALOG_DPI_CHANGE_BEHAVIORS
   ) return BOOL;
   pragma import (C,SetDialogDpiChangeBehavior,"SetDialogDpiChangeBehavior");
   function GetDialogDpiChangeBehavior(
      hDlg : HWND
   ) return DIALOG_DPI_CHANGE_BEHAVIORS;
   pragma import (C,GetDialogDpiChangeBehavior,"GetDialogDpiChangeBehavior");
   function CallMsgFilterA(
      lpMsg_x : LPMSG;
      nCode : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,CallMsgFilterA,"CallMsgFilterA");
   function CallMsgFilterW(
      lpMsg_x : LPMSG;
      nCode : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,CallMsgFilterW,"CallMsgFilterW");
   function OpenClipboard(
      hWndNewOwner : HWND
   ) return BOOL;
   pragma import (C,OpenClipboard,"OpenClipboard");
   function CloseClipboard return BOOL;
   pragma import (C,CloseClipboard,"CloseClipboard");
   function GetClipboardSequenceNumber return DWORD;
   pragma import (C,GetClipboardSequenceNumber,"GetClipboardSequenceNumber");
   function GetClipboardOwner return HWND;
   pragma import (C,GetClipboardOwner,"GetClipboardOwner");
   function SetClipboardViewer(
      hWndNewViewer : HWND
   ) return HWND;
   pragma import (C,SetClipboardViewer,"SetClipboardViewer");
   function GetClipboardViewer return HWND;
   pragma import (C,GetClipboardViewer,"GetClipboardViewer");
   function ChangeClipboardChain(
      hWndRemove : HWND;
      hWndNewNext : HWND
   ) return BOOL;
   pragma import (C,ChangeClipboardChain,"ChangeClipboardChain");
   function SetClipboardData(
      uFormat : UINT;
      hMem : HANDLE
   ) return HANDLE;
   pragma import (C,SetClipboardData,"SetClipboardData");
   function GetClipboardData(
      uFormat : UINT
   ) return HANDLE;
   pragma import (C,GetClipboardData,"GetClipboardData");
   function RegisterClipboardFormatA(
      lpszFormat : LPCSTR
   ) return UINT;
   pragma import (C,RegisterClipboardFormatA,"RegisterClipboardFormatA");
   function RegisterClipboardFormatW(
      lpszFormat : LPCWSTR
   ) return UINT;
   pragma import (C,RegisterClipboardFormatW,"RegisterClipboardFormatW");
   function CountClipboardFormats return Interfaces.C.Int;
   pragma import (C,CountClipboardFormats,"CountClipboardFormats");
   function EnumClipboardFormats(
      format : UINT
   ) return UINT;
   pragma import (C,EnumClipboardFormats,"EnumClipboardFormats");
   function GetClipboardFormatNameA(
      format : UINT;
      lpszFormatName : LPSTR;
      cchMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetClipboardFormatNameA,"GetClipboardFormatNameA");
   function GetClipboardFormatNameW(
      format : UINT;
      lpszFormatName : LPWSTR;
      cchMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetClipboardFormatNameW,"GetClipboardFormatNameW");
   function EmptyClipboard return BOOL;
   pragma import (C,EmptyClipboard,"EmptyClipboard");
   function IsClipboardFormatAvailable(
      format : UINT
   ) return BOOL;
   pragma import (C,IsClipboardFormatAvailable,"IsClipboardFormatAvailable");
   function GetPriorityClipboardFormat(
      paFormatPriorityList : access UINT;
      cFormats : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetPriorityClipboardFormat,"GetPriorityClipboardFormat");
   function GetOpenClipboardWindow return HWND;
   pragma import (C,GetOpenClipboardWindow,"GetOpenClipboardWindow");
   function AddClipboardFormatListener(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,AddClipboardFormatListener,"AddClipboardFormatListener");
   function RemoveClipboardFormatListener(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,RemoveClipboardFormatListener,"RemoveClipboardFormatListener");
   function GetUpdatedClipboardFormats(
      lpuiFormats : PUINT;
      cFormats : UINT;
      pcFormatsOut : PUINT
   ) return BOOL;
   pragma import (C,GetUpdatedClipboardFormats,"GetUpdatedClipboardFormats");
   function CharToOemA(
      pSrc : LPCSTR;
      pDst : LPSTR
   ) return BOOL;
   pragma import (C,CharToOemA,"CharToOemA");
   function CharToOemW(
      pSrc : LPCWSTR;
      pDst : LPSTR
   ) return BOOL;
   pragma import (C,CharToOemW,"CharToOemW");
   function OemToCharA(
      pSrc : LPCSTR;
      pDst : LPSTR
   ) return BOOL;
   pragma import (C,OemToCharA,"OemToCharA");
   function OemToCharW(
      pSrc : LPCSTR;
      pDst : LPWSTR
   ) return BOOL;
   pragma import (C,OemToCharW,"OemToCharW");
   function CharToOemBuffA(
      lpszSrc : LPCSTR;
      lpszDst : LPSTR;
      cchDstLength : DWORD
   ) return BOOL;
   pragma import (C,CharToOemBuffA,"CharToOemBuffA");
   function CharToOemBuffW(
      lpszSrc : LPCWSTR;
      lpszDst : LPSTR;
      cchDstLength : DWORD
   ) return BOOL;
   pragma import (C,CharToOemBuffW,"CharToOemBuffW");
   function OemToCharBuffA(
      lpszSrc : LPCSTR;
      lpszDst : LPSTR;
      cchDstLength : DWORD
   ) return BOOL;
   pragma import (C,OemToCharBuffA,"OemToCharBuffA");
   function OemToCharBuffW(
      lpszSrc : LPCSTR;
      lpszDst : LPWSTR;
      cchDstLength : DWORD
   ) return BOOL;
   pragma import (C,OemToCharBuffW,"OemToCharBuffW");
   function CharUpperA(
      lpsz : LPSTR
   ) return LPSTR;
   pragma import (C,CharUpperA,"CharUpperA");
   function CharUpperW(
      lpsz : LPWSTR
   ) return LPWSTR;
   pragma import (C,CharUpperW,"CharUpperW");
   function CharUpperBuffA(
      lpsz : LPSTR;
      cchLength : DWORD
   ) return DWORD;
   pragma import (C,CharUpperBuffA,"CharUpperBuffA");
   function CharUpperBuffW(
      lpsz : LPWSTR;
      cchLength : DWORD
   ) return DWORD;
   pragma import (C,CharUpperBuffW,"CharUpperBuffW");
   function CharLowerA(
      lpsz : LPSTR
   ) return LPSTR;
   pragma import (C,CharLowerA,"CharLowerA");
   function CharLowerW(
      lpsz : LPWSTR
   ) return LPWSTR;
   pragma import (C,CharLowerW,"CharLowerW");
   function CharLowerBuffA(
      lpsz : LPSTR;
      cchLength : DWORD
   ) return DWORD;
   pragma import (C,CharLowerBuffA,"CharLowerBuffA");
   function CharLowerBuffW(
      lpsz : LPWSTR;
      cchLength : DWORD
   ) return DWORD;
   pragma import (C,CharLowerBuffW,"CharLowerBuffW");
   function CharNextA(
      lpsz : LPCSTR
   ) return LPSTR;
   pragma import (C,CharNextA,"CharNextA");
   function CharNextW(
      lpsz : LPCWSTR
   ) return LPWSTR;
   pragma import (C,CharNextW,"CharNextW");
   function CharPrevA(
      lpszStart : LPCSTR;
      lpszCurrent : LPCSTR
   ) return LPSTR;
   pragma import (C,CharPrevA,"CharPrevA");
   function CharPrevW(
      lpszStart : LPCWSTR;
      lpszCurrent : LPCWSTR
   ) return LPWSTR;
   pragma import (C,CharPrevW,"CharPrevW");
   function CharNextExA(
      CodePage : WORD;
      lpCurrentChar : LPCSTR;
      dwFlags : DWORD
   ) return LPSTR;
   pragma import (C,CharNextExA,"CharNextExA");
   function CharPrevExA(
      CodePage : WORD;
      lpStart : LPCSTR;
      lpCurrentChar : LPCSTR;
      dwFlags : DWORD
   ) return LPSTR;
   pragma import (C,CharPrevExA,"CharPrevExA");
   function IsCharAlphaA(
      ch : CHAR
   ) return BOOL;
   pragma import (C,IsCharAlphaA,"IsCharAlphaA");
   function IsCharAlphaW(
      ch : WCHAR
   ) return BOOL;
   pragma import (C,IsCharAlphaW,"IsCharAlphaW");
   function IsCharAlphaNumericA(
      ch : CHAR
   ) return BOOL;
   pragma import (C,IsCharAlphaNumericA,"IsCharAlphaNumericA");
   function IsCharAlphaNumericW(
      ch : WCHAR
   ) return BOOL;
   pragma import (C,IsCharAlphaNumericW,"IsCharAlphaNumericW");
   function IsCharUpperA(
      ch : CHAR
   ) return BOOL;
   pragma import (C,IsCharUpperA,"IsCharUpperA");
   function IsCharUpperW(
      ch : WCHAR
   ) return BOOL;
   pragma import (C,IsCharUpperW,"IsCharUpperW");
   function IsCharLowerA(
      ch : CHAR
   ) return BOOL;
   pragma import (C,IsCharLowerA,"IsCharLowerA");
   function IsCharLowerW(
      ch : WCHAR
   ) return BOOL;
   pragma import (C,IsCharLowerW,"IsCharLowerW");
   function SetFocus(
      hWnd_x : HWND
   ) return HWND;
   pragma import (C,SetFocus,"SetFocus");
   function GetActiveWindow return HWND;
   pragma import (C,GetActiveWindow,"GetActiveWindow");
   function GetFocus return HWND;
   pragma import (C,GetFocus,"GetFocus");
   function GetKBCodePage return UINT;
   pragma import (C,GetKBCodePage,"GetKBCodePage");
   function GetKeyState(
      nVirtKey : Interfaces.C.Int
   ) return SHORT;
   pragma import (C,GetKeyState,"GetKeyState");
   function GetAsyncKeyState(
      vKey : Interfaces.C.Int
   ) return SHORT;
   pragma import (C,GetAsyncKeyState,"GetAsyncKeyState");
   function GetKeyboardState(
      lpKeyState : PBYTE
   ) return BOOL;
   pragma import (C,GetKeyboardState,"GetKeyboardState");
   function SetKeyboardState(
      lpKeyState : LPBYTE
   ) return BOOL;
   pragma import (C,SetKeyboardState,"SetKeyboardState");
   function GetKeyNameTextA(
      lParam_x : LONG;
      lpString : LPSTR;
      cchSize : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetKeyNameTextA,"GetKeyNameTextA");
   function GetKeyNameTextW(
      lParam_x : LONG;
      lpString : LPWSTR;
      cchSize : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetKeyNameTextW,"GetKeyNameTextW");
   function GetKeyboardType(
      nTypeFlag : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetKeyboardType,"GetKeyboardType");
   function ToAsciiEx(
      uVirtKey : UINT;
      uScanCode : UINT;
      lpKeyState : access constant BYTE;
      lpChar : LPWORD;
      uFlags : UINT;
      dwhkl : HKL
   ) return Interfaces.C.Int;
   pragma import (C,ToAsciiEx,"ToAsciiEx");
   function ToUnicode(
      wVirtKey : UINT;
      wScanCode : UINT;
      lpKeyState : access constant BYTE;
      pwszBuff : LPWSTR;
      cchBuff : Interfaces.C.Int;
      wFlags : UINT
   ) return Interfaces.C.Int;
   pragma import (C,ToUnicode,"ToUnicode");
   function OemKeyScan(
      wOemChar : WORD
   ) return DWORD;
   pragma import (C,OemKeyScan,"OemKeyScan");
   function VkKeyScanA(
      ch : CHAR
   ) return SHORT;
   pragma import (C,VkKeyScanA,"VkKeyScanA");
   function VkKeyScanW(
      ch : WCHAR
   ) return SHORT;
   pragma import (C,VkKeyScanW,"VkKeyScanW");
   function VkKeyScanExA(
      ch : CHAR;
      dwhkl : HKL
   ) return SHORT;
   pragma import (C,VkKeyScanExA,"VkKeyScanExA");
   function VkKeyScanExW(
      ch : WCHAR;
      dwhkl : HKL
   ) return SHORT;
   pragma import (C,VkKeyScanExW,"VkKeyScanExW");
   procedure keybd_event(
      bVk : BYTE;
      bScan : BYTE;
      dwFlags : DWORD;
      dwExtraInfo : ULONG_PTR
   );
   pragma import (C,keybd_event,"keybd_event");
   procedure mouse_event(
      dwFlags : DWORD;
      dx : DWORD;
      dy : DWORD;
      dwData : DWORD;
      dwExtraInfo : ULONG_PTR
   );
   pragma import (C,mouse_event,"mouse_event");
   type tagMOUSEINPUT is record
      dx : LONG;
      dy : LONG;
      mouseData : DWORD;
      dwFlags : DWORD;
      time : DWORD;
      dwExtraInfo : ULONG_PTR;
   end record;
   subtype MOUSEINPUT is tagMOUSEINPUT; -- CXType_Elaborated
   type PMOUSEINPUT is access tagMOUSEINPUT; -- CXType_Pointer - CXType_Elaborated
   type LPMOUSEINPUT is access tagMOUSEINPUT; -- CXType_Pointer - CXType_Elaborated
   type tagKEYBDINPUT is record
      wVk : WORD;
      wScan : WORD;
      dwFlags : DWORD;
      time : DWORD;
      dwExtraInfo : ULONG_PTR;
   end record;
   subtype KEYBDINPUT is tagKEYBDINPUT; -- CXType_Elaborated
   type PKEYBDINPUT is access tagKEYBDINPUT; -- CXType_Pointer - CXType_Elaborated
   type LPKEYBDINPUT is access tagKEYBDINPUT; -- CXType_Pointer - CXType_Elaborated
   type tagHARDWAREINPUT is record
      uMsg : DWORD;
      wParamL : WORD;
      wParamH : WORD;
   end record;
   subtype HARDWAREINPUT is tagHARDWAREINPUT; -- CXType_Elaborated
   type PHARDWAREINPUT is access tagHARDWAREINPUT; -- CXType_Pointer - CXType_Elaborated
   type LPHARDWAREINPUT is access tagHARDWAREINPUT; -- CXType_Pointer - CXType_Elaborated
   type tagINPUT is record
      type_x : DWORD;
   end record;
   subtype INPUT is tagINPUT; -- CXType_Elaborated
   type PINPUT is access tagINPUT; -- CXType_Pointer - CXType_Elaborated
   type LPINPUT is access tagINPUT; -- CXType_Pointer - CXType_Elaborated
   function SendInput(
      cInputs : UINT;
      pInputs : LPINPUT;
      cbSize : Interfaces.C.Int
   ) return UINT;
   pragma import (C,SendInput,"SendInput");
   type HTOUCHINPUT_x is record
      unused : Interfaces.C.Int;
   end record;
   type HTOUCHINPUT is access HTOUCHINPUT_x; -- CXType_Pointer - CXType_Elaborated
   type tagTOUCHINPUT is record
      x : LONG;
      y : LONG;
      hSource : HANDLE;
      dwID : DWORD;
      dwFlags : DWORD;
      dwMask : DWORD;
      dwTime : DWORD;
      dwExtraInfo : ULONG_PTR;
      cxContact : DWORD;
      cyContact : DWORD;
   end record;
   subtype TOUCHINPUT is tagTOUCHINPUT; -- CXType_Elaborated
   type PTOUCHINPUT is access tagTOUCHINPUT; -- CXType_Pointer - CXType_Elaborated
   type PCTOUCHINPUT is access constant TOUCHINPUT; -- CXType_Pointer - CXType_Typedef
   function GetTouchInputInfo(
      hTouchInput_x : HTOUCHINPUT;
      cInputs : UINT;
      pInputs : PTOUCHINPUT;
      cbSize : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,GetTouchInputInfo,"GetTouchInputInfo");
   function CloseTouchInputHandle(
      hTouchInput_x : HTOUCHINPUT
   ) return BOOL;
   pragma import (C,CloseTouchInputHandle,"CloseTouchInputHandle");
   function RegisterTouchWindow(
      hwnd_x : HWND;
      ulFlags : ULONG
   ) return BOOL;
   pragma import (C,RegisterTouchWindow,"RegisterTouchWindow");
   function UnregisterTouchWindow(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,UnregisterTouchWindow,"UnregisterTouchWindow");
   function IsTouchWindow(
      hwnd_x : HWND;
      pulFlags : PULONG
   ) return BOOL;
   pragma import (C,IsTouchWindow,"IsTouchWindow");
   type tagPOINTER_INPUT_TYPE is (
      PT_POINTER,
      PT_TOUCH,
      PT_PEN,
      PT_MOUSE,
      PT_TOUCHPAD
   );
   for tagPOINTER_INPUT_TYPE use (
      PT_POINTER => 1,
      PT_TOUCH => 2,
      PT_PEN => 3,
      PT_MOUSE => 4,
      PT_TOUCHPAD => 5
   );
   for tagPOINTER_INPUT_TYPE'Size use 32;
   subtype POINTER_INPUT_TYPE is DWORD; -- CXType_Typedef
   subtype POINTER_FLAGS is UINT32; -- CXType_Typedef
   type tagPOINTER_BUTTON_CHANGE_TYPE is (
      POINTER_CHANGE_NONE,
      POINTER_CHANGE_FIRSTBUTTON_DOWN,
      POINTER_CHANGE_FIRSTBUTTON_UP,
      POINTER_CHANGE_SECONDBUTTON_DOWN,
      POINTER_CHANGE_SECONDBUTTON_UP,
      POINTER_CHANGE_THIRDBUTTON_DOWN,
      POINTER_CHANGE_THIRDBUTTON_UP,
      POINTER_CHANGE_FOURTHBUTTON_DOWN,
      POINTER_CHANGE_FOURTHBUTTON_UP,
      POINTER_CHANGE_FIFTHBUTTON_DOWN,
      POINTER_CHANGE_FIFTHBUTTON_UP
   );
   for tagPOINTER_BUTTON_CHANGE_TYPE use (
      POINTER_CHANGE_NONE => 0,
      POINTER_CHANGE_FIRSTBUTTON_DOWN => 1,
      POINTER_CHANGE_FIRSTBUTTON_UP => 2,
      POINTER_CHANGE_SECONDBUTTON_DOWN => 3,
      POINTER_CHANGE_SECONDBUTTON_UP => 4,
      POINTER_CHANGE_THIRDBUTTON_DOWN => 5,
      POINTER_CHANGE_THIRDBUTTON_UP => 6,
      POINTER_CHANGE_FOURTHBUTTON_DOWN => 7,
      POINTER_CHANGE_FOURTHBUTTON_UP => 8,
      POINTER_CHANGE_FIFTHBUTTON_DOWN => 9,
      POINTER_CHANGE_FIFTHBUTTON_UP => 10
   );
   for tagPOINTER_BUTTON_CHANGE_TYPE'Size use 32;
   subtype POINTER_BUTTON_CHANGE_TYPE is tagPOINTER_BUTTON_CHANGE_TYPE; -- CXType_Elaborated
   type tagPOINTER_INFO is record
      pointerType : POINTER_INPUT_TYPE;
      pointerId : UINT32;
      frameId : UINT32;
      pointerFlags : POINTER_FLAGS;
      sourceDevice : HANDLE;
      hwndTarget : HWND;
      ptPixelLocation : POINT;
      ptHimetricLocation : POINT;
      ptPixelLocationRaw : POINT;
      ptHimetricLocationRaw : POINT;
      dwTime : DWORD;
      historyCount : UINT32;
      InputData : INT32;
      dwKeyStates : DWORD;
      PerformanceCount : UINT64;
      ButtonChangeType : POINTER_BUTTON_CHANGE_TYPE;
   end record;
   subtype POINTER_INFO is tagPOINTER_INFO; -- CXType_Elaborated
   subtype TOUCH_FLAGS is UINT32; -- CXType_Typedef
   subtype TOUCH_MASK is UINT32; -- CXType_Typedef
   type tagPOINTER_TOUCH_INFO is record
      pointerInfo : POINTER_INFO;
      touchFlags : TOUCH_FLAGS;
      touchMask : TOUCH_MASK;
      rcContact : RECT;
      rcContactRaw : RECT;
      orientation : UINT32;
      pressure : UINT32;
   end record;
   subtype POINTER_TOUCH_INFO is tagPOINTER_TOUCH_INFO; -- CXType_Elaborated
   subtype PEN_FLAGS is UINT32; -- CXType_Typedef
   subtype PEN_MASK is UINT32; -- CXType_Typedef
   type tagPOINTER_PEN_INFO is record
      pointerInfo : POINTER_INFO;
      penFlags : PEN_FLAGS;
      penMask : PEN_MASK;
      pressure : UINT32;
      rotation : UINT32;
      tiltX : INT32;
      tiltY : INT32;
   end record;
   subtype POINTER_PEN_INFO is tagPOINTER_PEN_INFO; -- CXType_Elaborated
   function InitializeTouchInjection(
      maxCount : UINT32;
      dwMode : DWORD
   ) return BOOL;
   pragma import (C,InitializeTouchInjection,"InitializeTouchInjection");
   function InjectTouchInput(
      count : UINT32;
      contacts : access constant POINTER_TOUCH_INFO
   ) return BOOL;
   pragma import (C,InjectTouchInput,"InjectTouchInput");
   type tagUSAGE_PROPERTIES is record
      level : USHORT;
      page : USHORT;
      usage : USHORT;
      logicalMinimum : INT32;
      logicalMaximum : INT32;
      unit : USHORT;
      exponent : USHORT;
      count : BYTE;
      physicalMinimum : INT32;
      physicalMaximum : INT32;
   end record;
   subtype USAGE_PROPERTIES is tagUSAGE_PROPERTIES; -- CXType_Elaborated
   type PUSAGE_PROPERTIES is access tagUSAGE_PROPERTIES; -- CXType_Pointer - CXType_Elaborated
   type tagPOINTER_TYPE_INFO is record
      type_x : POINTER_INPUT_TYPE;
   end record;
   subtype POINTER_TYPE_INFO is tagPOINTER_TYPE_INFO; -- CXType_Elaborated
   type PPOINTER_TYPE_INFO is access tagPOINTER_TYPE_INFO; -- CXType_Pointer - CXType_Elaborated
   type tagINPUT_INJECTION_VALUE is record
      page : USHORT;
      usage : USHORT;
      value : INT32;
      index : USHORT;
   end record;
   subtype INPUT_INJECTION_VALUE is tagINPUT_INJECTION_VALUE; -- CXType_Elaborated
   type PINPUT_INJECTION_VALUE is access tagINPUT_INJECTION_VALUE; -- CXType_Pointer - CXType_Elaborated
   function GetPointerType(
      pointerId : UINT32;
      pointerType : access POINTER_INPUT_TYPE
   ) return BOOL;
   pragma import (C,GetPointerType,"GetPointerType");
   function GetPointerCursorId(
      pointerId : UINT32;
      cursorId : access UINT32
   ) return BOOL;
   pragma import (C,GetPointerCursorId,"GetPointerCursorId");
   function GetPointerInfo(
      pointerId : UINT32;
      pointerInfo : access POINTER_INFO
   ) return BOOL;
   pragma import (C,GetPointerInfo,"GetPointerInfo");
   function GetPointerInfoHistory(
      pointerId : UINT32;
      entriesCount : access UINT32;
      pointerInfo : access POINTER_INFO
   ) return BOOL;
   pragma import (C,GetPointerInfoHistory,"GetPointerInfoHistory");
   function GetPointerFrameInfo(
      pointerId : UINT32;
      pointerCount : access UINT32;
      pointerInfo : access POINTER_INFO
   ) return BOOL;
   pragma import (C,GetPointerFrameInfo,"GetPointerFrameInfo");
   function GetPointerFrameInfoHistory(
      pointerId : UINT32;
      entriesCount : access UINT32;
      pointerCount : access UINT32;
      pointerInfo : access POINTER_INFO
   ) return BOOL;
   pragma import (C,GetPointerFrameInfoHistory,"GetPointerFrameInfoHistory");
   function GetPointerTouchInfo(
      pointerId : UINT32;
      touchInfo : access POINTER_TOUCH_INFO
   ) return BOOL;
   pragma import (C,GetPointerTouchInfo,"GetPointerTouchInfo");
   function GetPointerTouchInfoHistory(
      pointerId : UINT32;
      entriesCount : access UINT32;
      touchInfo : access POINTER_TOUCH_INFO
   ) return BOOL;
   pragma import (C,GetPointerTouchInfoHistory,"GetPointerTouchInfoHistory");
   function GetPointerFrameTouchInfo(
      pointerId : UINT32;
      pointerCount : access UINT32;
      touchInfo : access POINTER_TOUCH_INFO
   ) return BOOL;
   pragma import (C,GetPointerFrameTouchInfo,"GetPointerFrameTouchInfo");
   function GetPointerFrameTouchInfoHistory(
      pointerId : UINT32;
      entriesCount : access UINT32;
      pointerCount : access UINT32;
      touchInfo : access POINTER_TOUCH_INFO
   ) return BOOL;
   pragma import (C,GetPointerFrameTouchInfoHistory,"GetPointerFrameTouchInfoHistory");
   function GetPointerPenInfo(
      pointerId : UINT32;
      penInfo : access POINTER_PEN_INFO
   ) return BOOL;
   pragma import (C,GetPointerPenInfo,"GetPointerPenInfo");
   function GetPointerPenInfoHistory(
      pointerId : UINT32;
      entriesCount : access UINT32;
      penInfo : access POINTER_PEN_INFO
   ) return BOOL;
   pragma import (C,GetPointerPenInfoHistory,"GetPointerPenInfoHistory");
   function GetPointerFramePenInfo(
      pointerId : UINT32;
      pointerCount : access UINT32;
      penInfo : access POINTER_PEN_INFO
   ) return BOOL;
   pragma import (C,GetPointerFramePenInfo,"GetPointerFramePenInfo");
   function GetPointerFramePenInfoHistory(
      pointerId : UINT32;
      entriesCount : access UINT32;
      pointerCount : access UINT32;
      penInfo : access POINTER_PEN_INFO
   ) return BOOL;
   pragma import (C,GetPointerFramePenInfoHistory,"GetPointerFramePenInfoHistory");
   function SkipPointerFrameMessages(
      pointerId : UINT32
   ) return BOOL;
   pragma import (C,SkipPointerFrameMessages,"SkipPointerFrameMessages");
   function RegisterPointerInputTarget(
      hwnd_x : HWND;
      pointerType : POINTER_INPUT_TYPE
   ) return BOOL;
   pragma import (C,RegisterPointerInputTarget,"RegisterPointerInputTarget");
   function UnregisterPointerInputTarget(
      hwnd_x : HWND;
      pointerType : POINTER_INPUT_TYPE
   ) return BOOL;
   pragma import (C,UnregisterPointerInputTarget,"UnregisterPointerInputTarget");
   function RegisterPointerInputTargetEx(
      hwnd_x : HWND;
      pointerType : POINTER_INPUT_TYPE;
      fObserve : BOOL
   ) return BOOL;
   pragma import (C,RegisterPointerInputTargetEx,"RegisterPointerInputTargetEx");
   function UnregisterPointerInputTargetEx(
      hwnd_x : HWND;
      pointerType : POINTER_INPUT_TYPE
   ) return BOOL;
   pragma import (C,UnregisterPointerInputTargetEx,"UnregisterPointerInputTargetEx");
   function EnableMouseInPointer(
      fEnable : BOOL
   ) return BOOL;
   pragma import (C,EnableMouseInPointer,"EnableMouseInPointer");
   function IsMouseInPointerEnabled return BOOL;
   pragma import (C,IsMouseInPointerEnabled,"IsMouseInPointerEnabled");
   function EnableMouseInPointerForThread return BOOL;
   pragma import (C,EnableMouseInPointerForThread,"EnableMouseInPointerForThread");
   function RegisterTouchHitTestingWindow(
      hwnd_x : HWND;
      value : ULONG
   ) return BOOL;
   pragma import (C,RegisterTouchHitTestingWindow,"RegisterTouchHitTestingWindow");
   type tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION is record
      score : UINT16;
      adjustedPoint : POINT;
   end record;
   subtype TOUCH_HIT_TESTING_PROXIMITY_EVALUATION is tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION; -- CXType_Elaborated
   type PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION is access tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION; -- CXType_Pointer - CXType_Elaborated
   type tagTOUCH_HIT_TESTING_INPUT is record
      pointerId : UINT32;
      point_x : POINT;
      boundingBox : RECT;
      nonOccludedBoundingBox : RECT;
      orientation : UINT32;
   end record;
   subtype TOUCH_HIT_TESTING_INPUT is tagTOUCH_HIT_TESTING_INPUT; -- CXType_Elaborated
   type PTOUCH_HIT_TESTING_INPUT is access tagTOUCH_HIT_TESTING_INPUT; -- CXType_Pointer - CXType_Elaborated
   function EvaluateProximityToRect(
      controlBoundingBox : access constant RECT;
      pHitTestingInput : access constant TOUCH_HIT_TESTING_INPUT;
      pProximityEval : access TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
   ) return BOOL;
   pragma import (C,EvaluateProximityToRect,"EvaluateProximityToRect");
   function EvaluateProximityToPolygon(
      numVertices : UINT32;
      controlPolygon : access constant POINT;
      pHitTestingInput : access constant TOUCH_HIT_TESTING_INPUT;
      pProximityEval : access TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
   ) return BOOL;
   pragma import (C,EvaluateProximityToPolygon,"EvaluateProximityToPolygon");
   function PackTouchHitTestingProximityEvaluation(
      pHitTestingInput : access constant TOUCH_HIT_TESTING_INPUT;
      pProximityEval : access constant TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
   ) return LRESULT;
   pragma import (C,PackTouchHitTestingProximityEvaluation,"PackTouchHitTestingProximityEvaluation");
   type tagFEEDBACK_TYPE is (
      FEEDBACK_MAX,
      FEEDBACK_TOUCH_CONTACTVISUALIZATION,
      FEEDBACK_PEN_BARRELVISUALIZATION,
      FEEDBACK_PEN_TAP,
      FEEDBACK_PEN_DOUBLETAP,
      FEEDBACK_PEN_PRESSANDHOLD,
      FEEDBACK_PEN_RIGHTTAP,
      FEEDBACK_TOUCH_TAP,
      FEEDBACK_TOUCH_DOUBLETAP,
      FEEDBACK_TOUCH_PRESSANDHOLD,
      FEEDBACK_TOUCH_RIGHTTAP,
      FEEDBACK_GESTURE_PRESSANDTAP
   );
   for tagFEEDBACK_TYPE use (
      FEEDBACK_MAX => -1,
      FEEDBACK_TOUCH_CONTACTVISUALIZATION => 1,
      FEEDBACK_PEN_BARRELVISUALIZATION => 2,
      FEEDBACK_PEN_TAP => 3,
      FEEDBACK_PEN_DOUBLETAP => 4,
      FEEDBACK_PEN_PRESSANDHOLD => 5,
      FEEDBACK_PEN_RIGHTTAP => 6,
      FEEDBACK_TOUCH_TAP => 7,
      FEEDBACK_TOUCH_DOUBLETAP => 8,
      FEEDBACK_TOUCH_PRESSANDHOLD => 9,
      FEEDBACK_TOUCH_RIGHTTAP => 10,
      FEEDBACK_GESTURE_PRESSANDTAP => 11
   );
   for tagFEEDBACK_TYPE'Size use 32;
   subtype FEEDBACK_TYPE is tagFEEDBACK_TYPE; -- CXType_Elaborated
   function GetWindowFeedbackSetting(
      hwnd_x : HWND;
      feedback : FEEDBACK_TYPE;
      dwFlags : DWORD;
      pSize_x : access UINT32;
      config : access Void
   ) return BOOL;
   pragma import (C,GetWindowFeedbackSetting,"GetWindowFeedbackSetting");
   function SetWindowFeedbackSetting(
      hwnd_x : HWND;
      feedback : FEEDBACK_TYPE;
      dwFlags : DWORD;
      size_x : UINT32;
      configuration : access Void
   ) return BOOL;
   pragma import (C,SetWindowFeedbackSetting,"SetWindowFeedbackSetting");
   type tagINPUT_TRANSFORM is null record;
   subtype INPUT_TRANSFORM is tagINPUT_TRANSFORM; -- CXType_Elaborated
   function GetPointerInputTransform(
      pointerId : UINT32;
      historyCount : UINT32;
      inputTransform : access INPUT_TRANSFORM
   ) return BOOL;
   pragma import (C,GetPointerInputTransform,"GetPointerInputTransform");
   type tagLASTINPUTINFO is record
      cbSize : UINT;
      dwTime : DWORD;
   end record;
   subtype LASTINPUTINFO is tagLASTINPUTINFO; -- CXType_Elaborated
   type PLASTINPUTINFO is access tagLASTINPUTINFO; -- CXType_Pointer - CXType_Elaborated
   function GetLastInputInfo(
      plii : PLASTINPUTINFO
   ) return BOOL;
   pragma import (C,GetLastInputInfo,"GetLastInputInfo");
   function MapVirtualKeyA(
      uCode : UINT;
      uMapType : UINT
   ) return UINT;
   pragma import (C,MapVirtualKeyA,"MapVirtualKeyA");
   function MapVirtualKeyW(
      uCode : UINT;
      uMapType : UINT
   ) return UINT;
   pragma import (C,MapVirtualKeyW,"MapVirtualKeyW");
   function MapVirtualKeyExA(
      uCode : UINT;
      uMapType : UINT;
      dwhkl : HKL
   ) return UINT;
   pragma import (C,MapVirtualKeyExA,"MapVirtualKeyExA");
   function MapVirtualKeyExW(
      uCode : UINT;
      uMapType : UINT;
      dwhkl : HKL
   ) return UINT;
   pragma import (C,MapVirtualKeyExW,"MapVirtualKeyExW");
   function GetInputState return BOOL;
   pragma import (C,GetInputState,"GetInputState");
   function GetQueueStatus(
      flags : UINT
   ) return DWORD;
   pragma import (C,GetQueueStatus,"GetQueueStatus");
   function GetCapture return HWND;
   pragma import (C,GetCapture,"GetCapture");
   function SetCapture(
      hWnd_x : HWND
   ) return HWND;
   pragma import (C,SetCapture,"SetCapture");
   function ReleaseCapture return BOOL;
   pragma import (C,ReleaseCapture,"ReleaseCapture");
   function MsgWaitForMultipleObjects(
      nCount : DWORD;
      pHandles : access constant HANDLE;
      fWaitAll : BOOL;
      dwMilliseconds : DWORD;
      dwWakeMask : DWORD
   ) return DWORD;
   pragma import (C,MsgWaitForMultipleObjects,"MsgWaitForMultipleObjects");
   function MsgWaitForMultipleObjectsEx(
      nCount : DWORD;
      pHandles : access constant HANDLE;
      dwMilliseconds : DWORD;
      dwWakeMask : DWORD;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,MsgWaitForMultipleObjectsEx,"MsgWaitForMultipleObjectsEx");
   function SetTimer(
      hWnd_x : HWND;
      nIDEvent : UINT_PTR;
      uElapse : UINT;
      lpTimerFunc : TIMERPROC
   ) return UINT_PTR;
   pragma import (C,SetTimer,"SetTimer");
   function SetCoalescableTimer(
      hWnd_x : HWND;
      nIDEvent : UINT_PTR;
      uElapse : UINT;
      lpTimerFunc : TIMERPROC;
      uToleranceDelay : ULONG
   ) return UINT_PTR;
   pragma import (C,SetCoalescableTimer,"SetCoalescableTimer");
   function KillTimer(
      hWnd_x : HWND;
      uIDEvent : UINT_PTR
   ) return BOOL;
   pragma import (C,KillTimer,"KillTimer");
   function IsWindowUnicode(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsWindowUnicode,"IsWindowUnicode");
   function EnableWindow(
      hWnd_x : HWND;
      bEnable : BOOL
   ) return BOOL;
   pragma import (C,EnableWindow,"EnableWindow");
   function IsWindowEnabled(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,IsWindowEnabled,"IsWindowEnabled");
   function LoadAcceleratorsA(
      hInstance_x : HINSTANCE;
      lpTableName : LPCSTR
   ) return HACCEL;
   pragma import (C,LoadAcceleratorsA,"LoadAcceleratorsA");
   function LoadAcceleratorsW(
      hInstance_x : HINSTANCE;
      lpTableName : LPCWSTR
   ) return HACCEL;
   pragma import (C,LoadAcceleratorsW,"LoadAcceleratorsW");
   function CreateAcceleratorTableA(
      paccel : LPACCEL;
      cAccel : Interfaces.C.Int
   ) return HACCEL;
   pragma import (C,CreateAcceleratorTableA,"CreateAcceleratorTableA");
   function CreateAcceleratorTableW(
      paccel : LPACCEL;
      cAccel : Interfaces.C.Int
   ) return HACCEL;
   pragma import (C,CreateAcceleratorTableW,"CreateAcceleratorTableW");
   function DestroyAcceleratorTable(
      hAccel_x : HACCEL
   ) return BOOL;
   pragma import (C,DestroyAcceleratorTable,"DestroyAcceleratorTable");
   function CopyAcceleratorTableA(
      hAccelSrc : HACCEL;
      lpAccelDst : LPACCEL;
      cAccelEntries : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,CopyAcceleratorTableA,"CopyAcceleratorTableA");
   function CopyAcceleratorTableW(
      hAccelSrc : HACCEL;
      lpAccelDst : LPACCEL;
      cAccelEntries : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,CopyAcceleratorTableW,"CopyAcceleratorTableW");
   function TranslateAcceleratorA(
      hWnd_x : HWND;
      hAccTable : HACCEL;
      lpMsg_x : LPMSG
   ) return Interfaces.C.Int;
   pragma import (C,TranslateAcceleratorA,"TranslateAcceleratorA");
   function TranslateAcceleratorW(
      hWnd_x : HWND;
      hAccTable : HACCEL;
      lpMsg_x : LPMSG
   ) return Interfaces.C.Int;
   pragma import (C,TranslateAcceleratorW,"TranslateAcceleratorW");
   function GetSystemMetrics(
      nIndex : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetSystemMetrics,"GetSystemMetrics");
   function GetSystemMetricsForDpi(
      nIndex : Interfaces.C.Int;
      dpi : UINT
   ) return Interfaces.C.Int;
   pragma import (C,GetSystemMetricsForDpi,"GetSystemMetricsForDpi");
   function LoadMenuA(
      hInstance_x : HINSTANCE;
      lpMenuName : LPCSTR
   ) return HMENU;
   pragma import (C,LoadMenuA,"LoadMenuA");
   function LoadMenuW(
      hInstance_x : HINSTANCE;
      lpMenuName : LPCWSTR
   ) return HMENU;
   pragma import (C,LoadMenuW,"LoadMenuW");
   function LoadMenuIndirectA(
      lpMenuTemplate_x : access constant MENUTEMPLATEA
   ) return HMENU;
   pragma import (C,LoadMenuIndirectA,"LoadMenuIndirectA");
   function LoadMenuIndirectW(
      lpMenuTemplate_x : access constant MENUTEMPLATEW
   ) return HMENU;
   pragma import (C,LoadMenuIndirectW,"LoadMenuIndirectW");
   function GetMenu(
      hWnd_x : HWND
   ) return HMENU;
   pragma import (C,GetMenu,"GetMenu");
   function SetMenu(
      hWnd_x : HWND;
      hMenu_x : HMENU
   ) return BOOL;
   pragma import (C,SetMenu,"SetMenu");
   function ChangeMenuA(
      hMenu_x : HMENU;
      cmd : UINT;
      lpszNewItem : LPCSTR;
      cmdInsert : UINT;
      flags : UINT
   ) return BOOL;
   pragma import (C,ChangeMenuA,"ChangeMenuA");
   function ChangeMenuW(
      hMenu_x : HMENU;
      cmd : UINT;
      lpszNewItem : LPCWSTR;
      cmdInsert : UINT;
      flags : UINT
   ) return BOOL;
   pragma import (C,ChangeMenuW,"ChangeMenuW");
   function HiliteMenuItem(
      hWnd_x : HWND;
      hMenu_x : HMENU;
      uIDHiliteItem : UINT;
      uHilite : UINT
   ) return BOOL;
   pragma import (C,HiliteMenuItem,"HiliteMenuItem");
   function GetMenuStringA(
      hMenu_x : HMENU;
      uIDItem : UINT;
      lpString : LPSTR;
      cchMax : Interfaces.C.Int;
      flags : UINT
   ) return Interfaces.C.Int;
   pragma import (C,GetMenuStringA,"GetMenuStringA");
   function GetMenuStringW(
      hMenu_x : HMENU;
      uIDItem : UINT;
      lpString : LPWSTR;
      cchMax : Interfaces.C.Int;
      flags : UINT
   ) return Interfaces.C.Int;
   pragma import (C,GetMenuStringW,"GetMenuStringW");
   function GetMenuState(
      hMenu_x : HMENU;
      uId : UINT;
      uFlags : UINT
   ) return UINT;
   pragma import (C,GetMenuState,"GetMenuState");
   function DrawMenuBar(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,DrawMenuBar,"DrawMenuBar");
   function GetSystemMenu(
      hWnd_x : HWND;
      bRevert : BOOL
   ) return HMENU;
   pragma import (C,GetSystemMenu,"GetSystemMenu");
   function CreateMenu return HMENU;
   pragma import (C,CreateMenu,"CreateMenu");
   function CreatePopupMenu return HMENU;
   pragma import (C,CreatePopupMenu,"CreatePopupMenu");
   function DestroyMenu(
      hMenu_x : HMENU
   ) return BOOL;
   pragma import (C,DestroyMenu,"DestroyMenu");
   function CheckMenuItem(
      hMenu_x : HMENU;
      uIDCheckItem : UINT;
      uCheck : UINT
   ) return DWORD;
   pragma import (C,CheckMenuItem,"CheckMenuItem");
   function EnableMenuItem(
      hMenu_x : HMENU;
      uIDEnableItem : UINT;
      uEnable : UINT
   ) return BOOL;
   pragma import (C,EnableMenuItem,"EnableMenuItem");
   function GetSubMenu(
      hMenu_x : HMENU;
      nPos : Interfaces.C.Int
   ) return HMENU;
   pragma import (C,GetSubMenu,"GetSubMenu");
   function GetMenuItemID(
      hMenu_x : HMENU;
      nPos : Interfaces.C.Int
   ) return UINT;
   pragma import (C,GetMenuItemID,"GetMenuItemID");
   function GetMenuItemCount(
      hMenu_x : HMENU
   ) return Interfaces.C.Int;
   pragma import (C,GetMenuItemCount,"GetMenuItemCount");
   function InsertMenuA(
      hMenu_x : HMENU;
      uPosition : UINT;
      uFlags : UINT;
      uIDNewItem : UINT_PTR;
      lpNewItem : LPCSTR
   ) return BOOL;
   pragma import (C,InsertMenuA,"InsertMenuA");
   function InsertMenuW(
      hMenu_x : HMENU;
      uPosition : UINT;
      uFlags : UINT;
      uIDNewItem : UINT_PTR;
      lpNewItem : LPCWSTR
   ) return BOOL;
   pragma import (C,InsertMenuW,"InsertMenuW");
   function AppendMenuA(
      hMenu_x : HMENU;
      uFlags : UINT;
      uIDNewItem : UINT_PTR;
      lpNewItem : LPCSTR
   ) return BOOL;
   pragma import (C,AppendMenuA,"AppendMenuA");
   function AppendMenuW(
      hMenu_x : HMENU;
      uFlags : UINT;
      uIDNewItem : UINT_PTR;
      lpNewItem : LPCWSTR
   ) return BOOL;
   pragma import (C,AppendMenuW,"AppendMenuW");
   function ModifyMenuA(
      hMnu : HMENU;
      uPosition : UINT;
      uFlags : UINT;
      uIDNewItem : UINT_PTR;
      lpNewItem : LPCSTR
   ) return BOOL;
   pragma import (C,ModifyMenuA,"ModifyMenuA");
   function ModifyMenuW(
      hMnu : HMENU;
      uPosition : UINT;
      uFlags : UINT;
      uIDNewItem : UINT_PTR;
      lpNewItem : LPCWSTR
   ) return BOOL;
   pragma import (C,ModifyMenuW,"ModifyMenuW");
   function RemoveMenu(
      hMenu_x : HMENU;
      uPosition : UINT;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,RemoveMenu,"RemoveMenu");
   function DeleteMenu(
      hMenu_x : HMENU;
      uPosition : UINT;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,DeleteMenu,"DeleteMenu");
   function SetMenuItemBitmaps(
      hMenu_x : HMENU;
      uPosition : UINT;
      uFlags : UINT;
      hBitmapUnchecked : HBITMAP;
      hBitmapChecked : HBITMAP
   ) return BOOL;
   pragma import (C,SetMenuItemBitmaps,"SetMenuItemBitmaps");
   function GetMenuCheckMarkDimensions return LONG;
   pragma import (C,GetMenuCheckMarkDimensions,"GetMenuCheckMarkDimensions");
   function TrackPopupMenu(
      hMenu_x : HMENU;
      uFlags : UINT;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      nReserved : Interfaces.C.Int;
      hWnd_x : HWND;
      prcRect : access constant RECT
   ) return BOOL;
   pragma import (C,TrackPopupMenu,"TrackPopupMenu");
   type tagTPMPARAMS is record
      cbSize : UINT;
      rcExclude : RECT;
   end record;
   subtype TPMPARAMS is tagTPMPARAMS; -- CXType_Elaborated
   type LPTPMPARAMS is access TPMPARAMS; -- CXType_Pointer - CXType_Typedef
   function TrackPopupMenuEx(
      hMenu_x : HMENU;
      uFlags : UINT;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      hwnd_x : HWND;
      lptpm : LPTPMPARAMS
   ) return BOOL;
   pragma import (C,TrackPopupMenuEx,"TrackPopupMenuEx");
   function CalculatePopupWindowPosition(
      anchorPoint : access constant POINT;
      windowSize : access constant SIZE;
      flags : UINT;
      excludeRect : access RECT;
      popupWindowPosition : access RECT
   ) return BOOL;
   pragma import (C,CalculatePopupWindowPosition,"CalculatePopupWindowPosition");
   type tagMENUINFO is record
      cbSize : DWORD;
      fMask : DWORD;
      dwStyle : DWORD;
      cyMax : UINT;
      hbrBack : HBRUSH;
      dwContextHelpID : DWORD;
      dwMenuData : ULONG_PTR;
   end record;
   subtype MENUINFO is tagMENUINFO; -- CXType_Elaborated
   type LPMENUINFO is access tagMENUINFO; -- CXType_Pointer - CXType_Elaborated
   type LPCMENUINFO is access constant MENUINFO; -- CXType_Pointer - CXType_Typedef
   function GetMenuInfo(
      param1 : HMENU;
      param2 : LPMENUINFO
   ) return BOOL;
   pragma import (C,GetMenuInfo,"GetMenuInfo");
   function SetMenuInfo(
      param1 : HMENU;
      param2 : LPCMENUINFO
   ) return BOOL;
   pragma import (C,SetMenuInfo,"SetMenuInfo");
   function EndMenu return BOOL;
   pragma import (C,EndMenu,"EndMenu");
   type tagMENUGETOBJECTINFO is record
      dwFlags : DWORD;
      uPos : UINT;
      hmenu_x : HMENU;
      riid : PVOID;
      pvObj : PVOID;
   end record;
   subtype MENUGETOBJECTINFO is tagMENUGETOBJECTINFO; -- CXType_Elaborated
   type PMENUGETOBJECTINFO is access tagMENUGETOBJECTINFO; -- CXType_Pointer - CXType_Elaborated
   type tagMENUITEMINFOA is record
      cbSize : UINT;
      fMask : UINT;
      fType : UINT;
      fState : UINT;
      wID : UINT;
      hSubMenu : HMENU;
      hbmpChecked : HBITMAP;
      hbmpUnchecked : HBITMAP;
      dwItemData : ULONG_PTR;
      dwTypeData : LPSTR;
      cch : UINT;
      hbmpItem : HBITMAP;
   end record;
   subtype MENUITEMINFOA is tagMENUITEMINFOA; -- CXType_Elaborated
   type LPMENUITEMINFOA is access tagMENUITEMINFOA; -- CXType_Pointer - CXType_Elaborated
   type tagMENUITEMINFOW is record
      cbSize : UINT;
      fMask : UINT;
      fType : UINT;
      fState : UINT;
      wID : UINT;
      hSubMenu : HMENU;
      hbmpChecked : HBITMAP;
      hbmpUnchecked : HBITMAP;
      dwItemData : ULONG_PTR;
      dwTypeData : LPWSTR;
      cch : UINT;
      hbmpItem : HBITMAP;
   end record;
   subtype MENUITEMINFOW is tagMENUITEMINFOW; -- CXType_Elaborated
   type LPMENUITEMINFOW is access tagMENUITEMINFOW; -- CXType_Pointer - CXType_Elaborated
   subtype MENUITEMINFO is MENUITEMINFOA; -- CXType_Typedef
   subtype LPMENUITEMINFO is LPMENUITEMINFOA; -- CXType_Typedef
   type LPCMENUITEMINFOA is access constant MENUITEMINFOA; -- CXType_Pointer - CXType_Typedef
   type LPCMENUITEMINFOW is access constant MENUITEMINFOW; -- CXType_Pointer - CXType_Typedef
   subtype LPCMENUITEMINFO is LPCMENUITEMINFOA; -- CXType_Typedef
   function InsertMenuItemA(
      hmenu_x : HMENU;
      item : UINT;
      fByPosition : BOOL;
      lpmi : LPCMENUITEMINFOA
   ) return BOOL;
   pragma import (C,InsertMenuItemA,"InsertMenuItemA");
   function InsertMenuItemW(
      hmenu_x : HMENU;
      item : UINT;
      fByPosition : BOOL;
      lpmi : LPCMENUITEMINFOW
   ) return BOOL;
   pragma import (C,InsertMenuItemW,"InsertMenuItemW");
   function GetMenuItemInfoA(
      hmenu_x : HMENU;
      item : UINT;
      fByPosition : BOOL;
      lpmii : LPMENUITEMINFOA
   ) return BOOL;
   pragma import (C,GetMenuItemInfoA,"GetMenuItemInfoA");
   function GetMenuItemInfoW(
      hmenu_x : HMENU;
      item : UINT;
      fByPosition : BOOL;
      lpmii : LPMENUITEMINFOW
   ) return BOOL;
   pragma import (C,GetMenuItemInfoW,"GetMenuItemInfoW");
   function SetMenuItemInfoA(
      hmenu_x : HMENU;
      item : UINT;
      fByPositon : BOOL;
      lpmii : LPCMENUITEMINFOA
   ) return BOOL;
   pragma import (C,SetMenuItemInfoA,"SetMenuItemInfoA");
   function SetMenuItemInfoW(
      hmenu_x : HMENU;
      item : UINT;
      fByPositon : BOOL;
      lpmii : LPCMENUITEMINFOW
   ) return BOOL;
   pragma import (C,SetMenuItemInfoW,"SetMenuItemInfoW");
   function GetMenuDefaultItem(
      hMenu_x : HMENU;
      fByPos : UINT;
      gmdiFlags : UINT
   ) return UINT;
   pragma import (C,GetMenuDefaultItem,"GetMenuDefaultItem");
   function SetMenuDefaultItem(
      hMenu_x : HMENU;
      uItem : UINT;
      fByPos : UINT
   ) return BOOL;
   pragma import (C,SetMenuDefaultItem,"SetMenuDefaultItem");
   function GetMenuItemRect(
      hWnd_x : HWND;
      hMenu_x : HMENU;
      uItem : UINT;
      lprcItem : LPRECT
   ) return BOOL;
   pragma import (C,GetMenuItemRect,"GetMenuItemRect");
   function MenuItemFromPoint(
      hWnd_x : HWND;
      hMenu_x : HMENU;
      ptScreen : POINT
   ) return Interfaces.C.Int;
   pragma import (C,MenuItemFromPoint,"MenuItemFromPoint");
   type tagDROPSTRUCT is record
      hwndSource : HWND;
      hwndSink : HWND;
      wFmt : DWORD;
      dwData : ULONG_PTR;
      ptDrop : POINT;
      dwControlData : DWORD;
   end record;
   subtype DROPSTRUCT is tagDROPSTRUCT; -- CXType_Elaborated
   type PDROPSTRUCT is access tagDROPSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type LPDROPSTRUCT is access tagDROPSTRUCT; -- CXType_Pointer - CXType_Elaborated
   function DragObject(
      hwndParent : HWND;
      hwndFrom : HWND;
      fmt : UINT;
      data : ULONG_PTR;
      hcur : HCURSOR
   ) return DWORD;
   pragma import (C,DragObject,"DragObject");
   function DragDetect(
      hwnd_x : HWND;
      pt : POINT
   ) return BOOL;
   pragma import (C,DragDetect,"DragDetect");
   function DrawIcon(
      hDC_x : HDC;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      hIcon_x : HICON
   ) return BOOL;
   pragma import (C,DrawIcon,"DrawIcon");
   type tagDRAWTEXTPARAMS is record
      cbSize : UINT;
      iTabLength : Interfaces.C.Int;
      iLeftMargin : Interfaces.C.Int;
      iRightMargin : Interfaces.C.Int;
      uiLengthDrawn : UINT;
   end record;
   subtype DRAWTEXTPARAMS is tagDRAWTEXTPARAMS; -- CXType_Elaborated
   type LPDRAWTEXTPARAMS is access tagDRAWTEXTPARAMS; -- CXType_Pointer - CXType_Elaborated
   function DrawTextA(
      hdc_x : HDC;
      lpchText : LPCSTR;
      cchText : Interfaces.C.Int;
      lprc : LPRECT;
      format : UINT
   ) return Interfaces.C.Int;
   pragma import (C,DrawTextA,"DrawTextA");
   function DrawTextW(
      hdc_x : HDC;
      lpchText : LPCWSTR;
      cchText : Interfaces.C.Int;
      lprc : LPRECT;
      format : UINT
   ) return Interfaces.C.Int;
   pragma import (C,DrawTextW,"DrawTextW");
   function DrawTextExA(
      hdc_x : HDC;
      lpchText : LPSTR;
      cchText : Interfaces.C.Int;
      lprc : LPRECT;
      format : UINT;
      lpdtp : LPDRAWTEXTPARAMS
   ) return Interfaces.C.Int;
   pragma import (C,DrawTextExA,"DrawTextExA");
   function DrawTextExW(
      hdc_x : HDC;
      lpchText : LPWSTR;
      cchText : Interfaces.C.Int;
      lprc : LPRECT;
      format : UINT;
      lpdtp : LPDRAWTEXTPARAMS
   ) return Interfaces.C.Int;
   pragma import (C,DrawTextExW,"DrawTextExW");
   function GrayStringA(
      hDC_x : HDC;
      hBrush_x : HBRUSH;
      lpOutputFunc : GRAYSTRINGPROC;
      lpData : LPARAM;
      nCount : Interfaces.C.Int;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,GrayStringA,"GrayStringA");
   function GrayStringW(
      hDC_x : HDC;
      hBrush_x : HBRUSH;
      lpOutputFunc : GRAYSTRINGPROC;
      lpData : LPARAM;
      nCount : Interfaces.C.Int;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,GrayStringW,"GrayStringW");
   function DrawStateA(
      hdc_x : HDC;
      hbrFore : HBRUSH;
      qfnCallBack : DRAWSTATEPROC;
      lData : LPARAM;
      wData : WPARAM;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,DrawStateA,"DrawStateA");
   function DrawStateW(
      hdc_x : HDC;
      hbrFore : HBRUSH;
      qfnCallBack : DRAWSTATEPROC;
      lData : LPARAM;
      wData : WPARAM;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,DrawStateW,"DrawStateW");
   function TabbedTextOutA(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lpString : LPCSTR;
      chCount : Interfaces.C.Int;
      nTabPositions : Interfaces.C.Int;
      lpnTabStopPositions : access constant INT;
      nTabOrigin : Interfaces.C.Int
   ) return LONG;
   pragma import (C,TabbedTextOutA,"TabbedTextOutA");
   function TabbedTextOutW(
      hdc_x : HDC;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      lpString : LPCWSTR;
      chCount : Interfaces.C.Int;
      nTabPositions : Interfaces.C.Int;
      lpnTabStopPositions : access constant INT;
      nTabOrigin : Interfaces.C.Int
   ) return LONG;
   pragma import (C,TabbedTextOutW,"TabbedTextOutW");
   function GetTabbedTextExtentA(
      hdc_x : HDC;
      lpString : LPCSTR;
      chCount : Interfaces.C.Int;
      nTabPositions : Interfaces.C.Int;
      lpnTabStopPositions : access constant INT
   ) return DWORD;
   pragma import (C,GetTabbedTextExtentA,"GetTabbedTextExtentA");
   function GetTabbedTextExtentW(
      hdc_x : HDC;
      lpString : LPCWSTR;
      chCount : Interfaces.C.Int;
      nTabPositions : Interfaces.C.Int;
      lpnTabStopPositions : access constant INT
   ) return DWORD;
   pragma import (C,GetTabbedTextExtentW,"GetTabbedTextExtentW");
   function UpdateWindow(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,UpdateWindow,"UpdateWindow");
   function SetActiveWindow(
      hWnd_x : HWND
   ) return HWND;
   pragma import (C,SetActiveWindow,"SetActiveWindow");
   function GetForegroundWindow return HWND;
   pragma import (C,GetForegroundWindow,"GetForegroundWindow");
   function PaintDesktop(
      hdc_x : HDC
   ) return BOOL;
   pragma import (C,PaintDesktop,"PaintDesktop");
   procedure SwitchToThisWindow(
      hwnd_x : HWND;
      fUnknown : BOOL
   );
   pragma import (C,SwitchToThisWindow,"SwitchToThisWindow");
   function SetForegroundWindow(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,SetForegroundWindow,"SetForegroundWindow");
   function AllowSetForegroundWindow(
      dwProcessId : DWORD
   ) return BOOL;
   pragma import (C,AllowSetForegroundWindow,"AllowSetForegroundWindow");
   function LockSetForegroundWindow(
      uLockCode : UINT
   ) return BOOL;
   pragma import (C,LockSetForegroundWindow,"LockSetForegroundWindow");
   function WindowFromDC(
      hDC_x : HDC
   ) return HWND;
   pragma import (C,WindowFromDC,"WindowFromDC");
   function GetDC(
      hWnd_x : HWND
   ) return HDC;
   pragma import (C,GetDC,"GetDC");
   function GetDCEx(
      hWnd_x : HWND;
      hrgnClip : HRGN;
      flags : DWORD
   ) return HDC;
   pragma import (C,GetDCEx,"GetDCEx");
   function GetWindowDC(
      hWnd_x : HWND
   ) return HDC;
   pragma import (C,GetWindowDC,"GetWindowDC");
   function ReleaseDC(
      hWnd_x : HWND;
      hDC_x : HDC
   ) return Interfaces.C.Int;
   pragma import (C,ReleaseDC,"ReleaseDC");
   function BeginPaint(
      hWnd_x : HWND;
      lpPaint : LPPAINTSTRUCT
   ) return HDC;
   pragma import (C,BeginPaint,"BeginPaint");
   function EndPaint(
      hWnd_x : HWND;
      lpPaint : access constant PAINTSTRUCT
   ) return BOOL;
   pragma import (C,EndPaint,"EndPaint");
   function GetUpdateRect(
      hWnd_x : HWND;
      lpRect_x : LPRECT;
      bErase : BOOL
   ) return BOOL;
   pragma import (C,GetUpdateRect,"GetUpdateRect");
   function GetUpdateRgn(
      hWnd_x : HWND;
      hRgn_x : HRGN;
      bErase : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,GetUpdateRgn,"GetUpdateRgn");
   function SetWindowRgn(
      hWnd_x : HWND;
      hRgn_x : HRGN;
      bRedraw : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,SetWindowRgn,"SetWindowRgn");
   function GetWindowRgn(
      hWnd_x : HWND;
      hRgn_x : HRGN
   ) return Interfaces.C.Int;
   pragma import (C,GetWindowRgn,"GetWindowRgn");
   function GetWindowRgnBox(
      hWnd_x : HWND;
      lprc : LPRECT
   ) return Interfaces.C.Int;
   pragma import (C,GetWindowRgnBox,"GetWindowRgnBox");
   function ExcludeUpdateRgn(
      hDC_x : HDC;
      hWnd_x : HWND
   ) return Interfaces.C.Int;
   pragma import (C,ExcludeUpdateRgn,"ExcludeUpdateRgn");
   function InvalidateRect(
      hWnd_x : HWND;
      lpRect_x : access constant RECT;
      bErase : BOOL
   ) return BOOL;
   pragma import (C,InvalidateRect,"InvalidateRect");
   function ValidateRect(
      hWnd_x : HWND;
      lpRect_x : access constant RECT
   ) return BOOL;
   pragma import (C,ValidateRect,"ValidateRect");
   function InvalidateRgn(
      hWnd_x : HWND;
      hRgn_x : HRGN;
      bErase : BOOL
   ) return BOOL;
   pragma import (C,InvalidateRgn,"InvalidateRgn");
   function ValidateRgn(
      hWnd_x : HWND;
      hRgn_x : HRGN
   ) return BOOL;
   pragma import (C,ValidateRgn,"ValidateRgn");
   function RedrawWindow(
      hWnd_x : HWND;
      lprcUpdate : access constant RECT;
      hrgnUpdate : HRGN;
      flags : UINT
   ) return BOOL;
   pragma import (C,RedrawWindow,"RedrawWindow");
   function LockWindowUpdate(
      hWndLock : HWND
   ) return BOOL;
   pragma import (C,LockWindowUpdate,"LockWindowUpdate");
   function ScrollWindow(
      hWnd_x : HWND;
      XAmount : Interfaces.C.Int;
      YAmount : Interfaces.C.Int;
      lpRect_x : access constant RECT;
      lpClipRect : access constant RECT
   ) return BOOL;
   pragma import (C,ScrollWindow,"ScrollWindow");
   function ScrollDC(
      hDC_x : HDC;
      dx : Interfaces.C.Int;
      dy : Interfaces.C.Int;
      lprcScroll : access constant RECT;
      lprcClip : access constant RECT;
      hrgnUpdate : HRGN;
      lprcUpdate : LPRECT
   ) return BOOL;
   pragma import (C,ScrollDC,"ScrollDC");
   function ScrollWindowEx(
      hWnd_x : HWND;
      dx : Interfaces.C.Int;
      dy : Interfaces.C.Int;
      prcScroll : access constant RECT;
      prcClip : access constant RECT;
      hrgnUpdate : HRGN;
      prcUpdate : LPRECT;
      flags : UINT
   ) return Interfaces.C.Int;
   pragma import (C,ScrollWindowEx,"ScrollWindowEx");
   function SetScrollPos(
      hWnd_x : HWND;
      nBar : Interfaces.C.Int;
      nPos : Interfaces.C.Int;
      bRedraw : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,SetScrollPos,"SetScrollPos");
   function GetScrollPos(
      hWnd_x : HWND;
      nBar : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetScrollPos,"GetScrollPos");
   function SetScrollRange(
      hWnd_x : HWND;
      nBar : Interfaces.C.Int;
      nMinPos : Interfaces.C.Int;
      nMaxPos : Interfaces.C.Int;
      bRedraw : BOOL
   ) return BOOL;
   pragma import (C,SetScrollRange,"SetScrollRange");
   function GetScrollRange(
      hWnd_x : HWND;
      nBar : Interfaces.C.Int;
      lpMinPos : LPINT;
      lpMaxPos : LPINT
   ) return BOOL;
   pragma import (C,GetScrollRange,"GetScrollRange");
   function ShowScrollBar(
      hWnd_x : HWND;
      wBar : Interfaces.C.Int;
      bShow : BOOL
   ) return BOOL;
   pragma import (C,ShowScrollBar,"ShowScrollBar");
   function EnableScrollBar(
      hWnd_x : HWND;
      wSBflags : UINT;
      wArrows : UINT
   ) return BOOL;
   pragma import (C,EnableScrollBar,"EnableScrollBar");
   function SetPropA(
      hWnd_x : HWND;
      lpString : LPCSTR;
      hData : HANDLE
   ) return BOOL;
   pragma import (C,SetPropA,"SetPropA");
   function SetPropW(
      hWnd_x : HWND;
      lpString : LPCWSTR;
      hData : HANDLE
   ) return BOOL;
   pragma import (C,SetPropW,"SetPropW");
   function GetPropA(
      hWnd_x : HWND;
      lpString : LPCSTR
   ) return HANDLE;
   pragma import (C,GetPropA,"GetPropA");
   function GetPropW(
      hWnd_x : HWND;
      lpString : LPCWSTR
   ) return HANDLE;
   pragma import (C,GetPropW,"GetPropW");
   function RemovePropA(
      hWnd_x : HWND;
      lpString : LPCSTR
   ) return HANDLE;
   pragma import (C,RemovePropA,"RemovePropA");
   function RemovePropW(
      hWnd_x : HWND;
      lpString : LPCWSTR
   ) return HANDLE;
   pragma import (C,RemovePropW,"RemovePropW");
   function EnumPropsExA(
      hWnd_x : HWND;
      lpEnumFunc : PROPENUMPROCEXA;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumPropsExA,"EnumPropsExA");
   function EnumPropsExW(
      hWnd_x : HWND;
      lpEnumFunc : PROPENUMPROCEXW;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,EnumPropsExW,"EnumPropsExW");
   function EnumPropsA(
      hWnd_x : HWND;
      lpEnumFunc : PROPENUMPROCA
   ) return Interfaces.C.Int;
   pragma import (C,EnumPropsA,"EnumPropsA");
   function EnumPropsW(
      hWnd_x : HWND;
      lpEnumFunc : PROPENUMPROCW
   ) return Interfaces.C.Int;
   pragma import (C,EnumPropsW,"EnumPropsW");
   function SetWindowTextA(
      hWnd_x : HWND;
      lpString : LPCSTR
   ) return BOOL;
   pragma import (C,SetWindowTextA,"SetWindowTextA");
   function SetWindowTextW(
      hWnd_x : HWND;
      lpString : LPCWSTR
   ) return BOOL;
   pragma import (C,SetWindowTextW,"SetWindowTextW");
   function GetWindowTextA(
      hWnd_x : HWND;
      lpString : LPSTR;
      nMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetWindowTextA,"GetWindowTextA");
   function GetWindowTextW(
      hWnd_x : HWND;
      lpString : LPWSTR;
      nMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetWindowTextW,"GetWindowTextW");
   function GetWindowTextLengthA(
      hWnd_x : HWND
   ) return Interfaces.C.Int;
   pragma import (C,GetWindowTextLengthA,"GetWindowTextLengthA");
   function GetWindowTextLengthW(
      hWnd_x : HWND
   ) return Interfaces.C.Int;
   pragma import (C,GetWindowTextLengthW,"GetWindowTextLengthW");
   function GetClientRect(
      hWnd_x : HWND;
      lpRect_x : LPRECT
   ) return BOOL;
   pragma import (C,GetClientRect,"GetClientRect");
   function GetWindowRect(
      hWnd_x : HWND;
      lpRect_x : LPRECT
   ) return BOOL;
   pragma import (C,GetWindowRect,"GetWindowRect");
   function AdjustWindowRect(
      lpRect_x : LPRECT;
      dwStyle : DWORD;
      bMenu : BOOL
   ) return BOOL;
   pragma import (C,AdjustWindowRect,"AdjustWindowRect");
   function AdjustWindowRectEx(
      lpRect_x : LPRECT;
      dwStyle : DWORD;
      bMenu : BOOL;
      dwExStyle : DWORD
   ) return BOOL;
   pragma import (C,AdjustWindowRectEx,"AdjustWindowRectEx");
   function AdjustWindowRectExForDpi(
      lpRect_x : LPRECT;
      dwStyle : DWORD;
      bMenu : BOOL;
      dwExStyle : DWORD;
      dpi : UINT
   ) return BOOL;
   pragma import (C,AdjustWindowRectExForDpi,"AdjustWindowRectExForDpi");
   type tagHELPINFO is record
      cbSize : UINT;
      iContextType : Interfaces.C.Int;
      iCtrlId : Interfaces.C.Int;
      hItemHandle : HANDLE;
      dwContextId : DWORD_PTR;
      MousePos : POINT;
   end record;
   subtype HELPINFO is tagHELPINFO; -- CXType_Elaborated
   type LPHELPINFO is access tagHELPINFO; -- CXType_Pointer - CXType_Elaborated
   function SetWindowContextHelpId(
      param1 : HWND;
      param2 : DWORD
   ) return BOOL;
   pragma import (C,SetWindowContextHelpId,"SetWindowContextHelpId");
   function GetWindowContextHelpId(
      param1 : HWND
   ) return DWORD;
   pragma import (C,GetWindowContextHelpId,"GetWindowContextHelpId");
   function SetMenuContextHelpId(
      param1 : HMENU;
      param2 : DWORD
   ) return BOOL;
   pragma import (C,SetMenuContextHelpId,"SetMenuContextHelpId");
   function GetMenuContextHelpId(
      param1 : HMENU
   ) return DWORD;
   pragma import (C,GetMenuContextHelpId,"GetMenuContextHelpId");
   function MessageBoxA(
      hWnd_x : HWND;
      lpText : LPCSTR;
      lpCaption : LPCSTR;
      uType : UINT
   ) return Interfaces.C.Int;
   pragma import (C,MessageBoxA,"MessageBoxA");
   function MessageBoxW(
      hWnd_x : HWND;
      lpText : LPCWSTR;
      lpCaption : LPCWSTR;
      uType : UINT
   ) return Interfaces.C.Int;
   pragma import (C,MessageBoxW,"MessageBoxW");
   function MessageBoxExA(
      hWnd_x : HWND;
      lpText : LPCSTR;
      lpCaption : LPCSTR;
      uType : UINT;
      wLanguageId : WORD
   ) return Interfaces.C.Int;
   pragma import (C,MessageBoxExA,"MessageBoxExA");
   function MessageBoxExW(
      hWnd_x : HWND;
      lpText : LPCWSTR;
      lpCaption : LPCWSTR;
      uType : UINT;
      wLanguageId : WORD
   ) return Interfaces.C.Int;
   pragma import (C,MessageBoxExW,"MessageBoxExW");
   subtype MSGBOXCALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPHELPINFO)
   type tagMSGBOXPARAMSA is record
      cbSize : UINT;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      lpszText : LPCSTR;
      lpszCaption : LPCSTR;
      dwStyle : DWORD;
      lpszIcon : LPCSTR;
      dwContextHelpId : DWORD_PTR;
      lpfnMsgBoxCallback : MSGBOXCALLBACK;
      dwLanguageId : DWORD;
   end record;
   subtype MSGBOXPARAMSA is tagMSGBOXPARAMSA; -- CXType_Elaborated
   type PMSGBOXPARAMSA is access tagMSGBOXPARAMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMSGBOXPARAMSA is access tagMSGBOXPARAMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMSGBOXPARAMSW is record
      cbSize : UINT;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      lpszText : LPCWSTR;
      lpszCaption : LPCWSTR;
      dwStyle : DWORD;
      lpszIcon : LPCWSTR;
      dwContextHelpId : DWORD_PTR;
      lpfnMsgBoxCallback : MSGBOXCALLBACK;
      dwLanguageId : DWORD;
   end record;
   subtype MSGBOXPARAMSW is tagMSGBOXPARAMSW; -- CXType_Elaborated
   type PMSGBOXPARAMSW is access tagMSGBOXPARAMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMSGBOXPARAMSW is access tagMSGBOXPARAMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MSGBOXPARAMS is MSGBOXPARAMSA; -- CXType_Typedef
   subtype PMSGBOXPARAMS is PMSGBOXPARAMSA; -- CXType_Typedef
   subtype LPMSGBOXPARAMS is LPMSGBOXPARAMSA; -- CXType_Typedef
   function MessageBoxIndirectA(
      lpmbp : access constant MSGBOXPARAMSA
   ) return Interfaces.C.Int;
   pragma import (C,MessageBoxIndirectA,"MessageBoxIndirectA");
   function MessageBoxIndirectW(
      lpmbp : access constant MSGBOXPARAMSW
   ) return Interfaces.C.Int;
   pragma import (C,MessageBoxIndirectW,"MessageBoxIndirectW");
   function MessageBeep(
      uType : UINT
   ) return BOOL;
   pragma import (C,MessageBeep,"MessageBeep");
   function ShowCursor(
      bShow : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,ShowCursor,"ShowCursor");
   function SetCursorPos(
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetCursorPos,"SetCursorPos");
   function SetPhysicalCursorPos(
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetPhysicalCursorPos,"SetPhysicalCursorPos");
   function SetCursor(
      hCursor_x : HCURSOR
   ) return HCURSOR;
   pragma import (C,SetCursor,"SetCursor");
   function GetCursorPos(
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,GetCursorPos,"GetCursorPos");
   function GetPhysicalCursorPos(
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,GetPhysicalCursorPos,"GetPhysicalCursorPos");
   function GetClipCursor(
      lpRect_x : LPRECT
   ) return BOOL;
   pragma import (C,GetClipCursor,"GetClipCursor");
   function GetCursor return HCURSOR;
   pragma import (C,GetCursor,"GetCursor");
   function CreateCaret(
      hWnd_x : HWND;
      hBitmap_x : HBITMAP;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,CreateCaret,"CreateCaret");
   function GetCaretBlinkTime return UINT;
   pragma import (C,GetCaretBlinkTime,"GetCaretBlinkTime");
   function SetCaretBlinkTime(
      uMSeconds : UINT
   ) return BOOL;
   pragma import (C,SetCaretBlinkTime,"SetCaretBlinkTime");
   function DestroyCaret return BOOL;
   pragma import (C,DestroyCaret,"DestroyCaret");
   function HideCaret(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,HideCaret,"HideCaret");
   function ShowCaret(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,ShowCaret,"ShowCaret");
   function SetCaretPos(
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetCaretPos,"SetCaretPos");
   function GetCaretPos(
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,GetCaretPos,"GetCaretPos");
   function ClientToScreen(
      hWnd_x : HWND;
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,ClientToScreen,"ClientToScreen");
   function ScreenToClient(
      hWnd_x : HWND;
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,ScreenToClient,"ScreenToClient");
   function LogicalToPhysicalPoint(
      hWnd_x : HWND;
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,LogicalToPhysicalPoint,"LogicalToPhysicalPoint");
   function PhysicalToLogicalPoint(
      hWnd_x : HWND;
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,PhysicalToLogicalPoint,"PhysicalToLogicalPoint");
   function LogicalToPhysicalPointForPerMonitorDPI(
      hWnd_x : HWND;
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,LogicalToPhysicalPointForPerMonitorDPI,"LogicalToPhysicalPointForPerMonitorDPI");
   function PhysicalToLogicalPointForPerMonitorDPI(
      hWnd_x : HWND;
      lpPoint_x : LPPOINT
   ) return BOOL;
   pragma import (C,PhysicalToLogicalPointForPerMonitorDPI,"PhysicalToLogicalPointForPerMonitorDPI");
   function MapWindowPoints(
      hWndFrom : HWND;
      hWndTo : HWND;
      lpPoints_x : LPPOINT;
      cPoints : UINT
   ) return Interfaces.C.Int;
   pragma import (C,MapWindowPoints,"MapWindowPoints");
   function WindowFromPoint(
      Point_x : POINT
   ) return HWND;
   pragma import (C,WindowFromPoint,"WindowFromPoint");
   function WindowFromPhysicalPoint(
      Point_x : POINT
   ) return HWND;
   pragma import (C,WindowFromPhysicalPoint,"WindowFromPhysicalPoint");
   function ChildWindowFromPoint(
      hWndParent : HWND;
      Point_x : POINT
   ) return HWND;
   pragma import (C,ChildWindowFromPoint,"ChildWindowFromPoint");
   function ClipCursor(
      lpRect_x : access constant RECT
   ) return BOOL;
   pragma import (C,ClipCursor,"ClipCursor");
   function ChildWindowFromPointEx(
      hwnd_x : HWND;
      pt : POINT;
      flags : UINT
   ) return HWND;
   pragma import (C,ChildWindowFromPointEx,"ChildWindowFromPointEx");
   function GetSysColor(
      nIndex : Interfaces.C.Int
   ) return DWORD;
   pragma import (C,GetSysColor,"GetSysColor");
   function GetSysColorBrush(
      nIndex : Interfaces.C.Int
   ) return HBRUSH;
   pragma import (C,GetSysColorBrush,"GetSysColorBrush");
   function SetSysColors(
      cElements : Interfaces.C.Int;
      lpaElements : access constant INT;
      lpaRgbValues : access constant COLORREF
   ) return BOOL;
   pragma import (C,SetSysColors,"SetSysColors");
   function DrawFocusRect(
      hDC_x : HDC;
      lprc : access constant RECT
   ) return BOOL;
   pragma import (C,DrawFocusRect,"DrawFocusRect");
   function FillRect(
      hDC_x : HDC;
      lprc : access constant RECT;
      hbr : HBRUSH
   ) return Interfaces.C.Int;
   pragma import (C,FillRect,"FillRect");
   function FrameRect(
      hDC_x : HDC;
      lprc : access constant RECT;
      hbr : HBRUSH
   ) return Interfaces.C.Int;
   pragma import (C,FrameRect,"FrameRect");
   function InvertRect(
      hDC_x : HDC;
      lprc : access constant RECT
   ) return BOOL;
   pragma import (C,InvertRect,"InvertRect");
   function SetRect(
      lprc : LPRECT;
      xLeft : Interfaces.C.Int;
      yTop : Interfaces.C.Int;
      xRight : Interfaces.C.Int;
      yBottom : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,SetRect,"SetRect");
   function SetRectEmpty(
      lprc : LPRECT
   ) return BOOL;
   pragma import (C,SetRectEmpty,"SetRectEmpty");
   function CopyRect(
      lprcDst : LPRECT;
      lprcSrc : access constant RECT
   ) return BOOL;
   pragma import (C,CopyRect,"CopyRect");
   function InflateRect(
      lprc : LPRECT;
      dx : Interfaces.C.Int;
      dy : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,InflateRect,"InflateRect");
   function IntersectRect(
      lprcDst : LPRECT;
      lprcSrc1 : access constant RECT;
      lprcSrc2 : access constant RECT
   ) return BOOL;
   pragma import (C,IntersectRect,"IntersectRect");
   function UnionRect(
      lprcDst : LPRECT;
      lprcSrc1 : access constant RECT;
      lprcSrc2 : access constant RECT
   ) return BOOL;
   pragma import (C,UnionRect,"UnionRect");
   function SubtractRect(
      lprcDst : LPRECT;
      lprcSrc1 : access constant RECT;
      lprcSrc2 : access constant RECT
   ) return BOOL;
   pragma import (C,SubtractRect,"SubtractRect");
   function OffsetRect(
      lprc : LPRECT;
      dx : Interfaces.C.Int;
      dy : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,OffsetRect,"OffsetRect");
   function IsRectEmpty(
      lprc : access constant RECT
   ) return BOOL;
   pragma import (C,IsRectEmpty,"IsRectEmpty");
   function EqualRect(
      lprc1 : access constant RECT;
      lprc2 : access constant RECT
   ) return BOOL;
   pragma import (C,EqualRect,"EqualRect");
   function PtInRect(
      lprc : access constant RECT;
      pt : POINT
   ) return BOOL;
   pragma import (C,PtInRect,"PtInRect");
   function GetWindowWord(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return WORD;
   pragma import (C,GetWindowWord,"GetWindowWord");
   function SetWindowWord(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      wNewWord : WORD
   ) return WORD;
   pragma import (C,SetWindowWord,"SetWindowWord");
   function GetWindowLongA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return LONG;
   pragma import (C,GetWindowLongA,"GetWindowLongA");
   function GetWindowLongW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return LONG;
   pragma import (C,GetWindowLongW,"GetWindowLongW");
   function SetWindowLongA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG
   ) return LONG;
   pragma import (C,SetWindowLongA,"SetWindowLongA");
   function SetWindowLongW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG
   ) return LONG;
   pragma import (C,SetWindowLongW,"SetWindowLongW");
   function GetWindowLongPtrA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return LONG_PTR;
   pragma import (C,GetWindowLongPtrA,"GetWindowLongPtrA");
   function GetWindowLongPtrW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return LONG_PTR;
   pragma import (C,GetWindowLongPtrW,"GetWindowLongPtrW");
   function SetWindowLongPtrA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG_PTR
   ) return LONG_PTR;
   pragma import (C,SetWindowLongPtrA,"SetWindowLongPtrA");
   function SetWindowLongPtrW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG_PTR
   ) return LONG_PTR;
   pragma import (C,SetWindowLongPtrW,"SetWindowLongPtrW");
   function GetClassWord(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return WORD;
   pragma import (C,GetClassWord,"GetClassWord");
   function SetClassWord(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      wNewWord : WORD
   ) return WORD;
   pragma import (C,SetClassWord,"SetClassWord");
   function GetClassLongA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return DWORD;
   pragma import (C,GetClassLongA,"GetClassLongA");
   function GetClassLongW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return DWORD;
   pragma import (C,GetClassLongW,"GetClassLongW");
   function SetClassLongA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG
   ) return DWORD;
   pragma import (C,SetClassLongA,"SetClassLongA");
   function SetClassLongW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG
   ) return DWORD;
   pragma import (C,SetClassLongW,"SetClassLongW");
   function GetClassLongPtrA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return ULONG_PTR;
   pragma import (C,GetClassLongPtrA,"GetClassLongPtrA");
   function GetClassLongPtrW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int
   ) return ULONG_PTR;
   pragma import (C,GetClassLongPtrW,"GetClassLongPtrW");
   function SetClassLongPtrA(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG_PTR
   ) return ULONG_PTR;
   pragma import (C,SetClassLongPtrA,"SetClassLongPtrA");
   function SetClassLongPtrW(
      hWnd_x : HWND;
      nIndex : Interfaces.C.Int;
      dwNewLong : LONG_PTR
   ) return ULONG_PTR;
   pragma import (C,SetClassLongPtrW,"SetClassLongPtrW");
   function GetProcessDefaultLayout(
      pdwDefaultLayout : access DWORD
   ) return BOOL;
   pragma import (C,GetProcessDefaultLayout,"GetProcessDefaultLayout");
   function SetProcessDefaultLayout(
      dwDefaultLayout : DWORD
   ) return BOOL;
   pragma import (C,SetProcessDefaultLayout,"SetProcessDefaultLayout");
   function GetDesktopWindow return HWND;
   pragma import (C,GetDesktopWindow,"GetDesktopWindow");
   function GetParent(
      hWnd_x : HWND
   ) return HWND;
   pragma import (C,GetParent,"GetParent");
   function SetParent(
      hWndChild : HWND;
      hWndNewParent : HWND
   ) return HWND;
   pragma import (C,SetParent,"SetParent");
   function EnumChildWindows(
      hWndParent : HWND;
      lpEnumFunc : WNDENUMPROC;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumChildWindows,"EnumChildWindows");
   function FindWindowA(
      lpClassName : LPCSTR;
      lpWindowName : LPCSTR
   ) return HWND;
   pragma import (C,FindWindowA,"FindWindowA");
   function FindWindowW(
      lpClassName : LPCWSTR;
      lpWindowName : LPCWSTR
   ) return HWND;
   pragma import (C,FindWindowW,"FindWindowW");
   function FindWindowExA(
      hWndParent : HWND;
      hWndChildAfter : HWND;
      lpszClass : LPCSTR;
      lpszWindow : LPCSTR
   ) return HWND;
   pragma import (C,FindWindowExA,"FindWindowExA");
   function FindWindowExW(
      hWndParent : HWND;
      hWndChildAfter : HWND;
      lpszClass : LPCWSTR;
      lpszWindow : LPCWSTR
   ) return HWND;
   pragma import (C,FindWindowExW,"FindWindowExW");
   function GetShellWindow return HWND;
   pragma import (C,GetShellWindow,"GetShellWindow");
   function RegisterShellHookWindow(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,RegisterShellHookWindow,"RegisterShellHookWindow");
   function DeregisterShellHookWindow(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,DeregisterShellHookWindow,"DeregisterShellHookWindow");
   function EnumWindows(
      lpEnumFunc : WNDENUMPROC;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumWindows,"EnumWindows");
   function EnumThreadWindows(
      dwThreadId : DWORD;
      lpfn : WNDENUMPROC;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumThreadWindows,"EnumThreadWindows");
   function GetClassNameA(
      hWnd_x : HWND;
      lpClassName : LPSTR;
      nMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetClassNameA,"GetClassNameA");
   function GetClassNameW(
      hWnd_x : HWND;
      lpClassName : LPWSTR;
      nMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetClassNameW,"GetClassNameW");
   function GetTopWindow(
      hWnd_x : HWND
   ) return HWND;
   pragma import (C,GetTopWindow,"GetTopWindow");
   function GetWindowThreadProcessId(
      hWnd_x : HWND;
      lpdwProcessId : LPDWORD
   ) return DWORD;
   pragma import (C,GetWindowThreadProcessId,"GetWindowThreadProcessId");
   function IsGUIThread(
      bConvert : BOOL
   ) return BOOL;
   pragma import (C,IsGUIThread,"IsGUIThread");
   function GetLastActivePopup(
      hWnd_x : HWND
   ) return HWND;
   pragma import (C,GetLastActivePopup,"GetLastActivePopup");
   function GetWindow(
      hWnd_x : HWND;
      uCmd : UINT
   ) return HWND;
   pragma import (C,GetWindow,"GetWindow");
   function SetWindowsHookA(
      nFilterType : Interfaces.C.Int;
      pfnFilterProc : HOOKPROC
   ) return HHOOK;
   pragma import (C,SetWindowsHookA,"SetWindowsHookA");
   function SetWindowsHookW(
      nFilterType : Interfaces.C.Int;
      pfnFilterProc : HOOKPROC
   ) return HHOOK;
   pragma import (C,SetWindowsHookW,"SetWindowsHookW");
   function UnhookWindowsHook(
      nCode : Interfaces.C.Int;
      pfnFilterProc : HOOKPROC
   ) return BOOL;
   pragma import (C,UnhookWindowsHook,"UnhookWindowsHook");
   function SetWindowsHookExA(
      idHook : Interfaces.C.Int;
      lpfn : HOOKPROC;
      hmod : HINSTANCE;
      dwThreadId : DWORD
   ) return HHOOK;
   pragma import (C,SetWindowsHookExA,"SetWindowsHookExA");
   function SetWindowsHookExW(
      idHook : Interfaces.C.Int;
      lpfn : HOOKPROC;
      hmod : HINSTANCE;
      dwThreadId : DWORD
   ) return HHOOK;
   pragma import (C,SetWindowsHookExW,"SetWindowsHookExW");
   function UnhookWindowsHookEx(
      hhk : HHOOK
   ) return BOOL;
   pragma import (C,UnhookWindowsHookEx,"UnhookWindowsHookEx");
   function CallNextHookEx(
      hhk : HHOOK;
      nCode : Interfaces.C.Int;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,CallNextHookEx,"CallNextHookEx");
   function CheckMenuRadioItem(
      hmenu_x : HMENU;
      first : UINT;
      last : UINT;
      check : UINT;
      flags : UINT
   ) return BOOL;
   pragma import (C,CheckMenuRadioItem,"CheckMenuRadioItem");
   type MENUITEMTEMPLATEHEADER is record
      versionNumber : WORD;
      offset : WORD;
   end record;
   type PMENUITEMTEMPLATEHEADER is access MENUITEMTEMPLATEHEADER; -- CXType_Pointer - CXType_Elaborated
   type MENUITEMTEMPLATE is record
      mtOption : WORD;
      mtID : WORD;
      mtString : Void;
   end record;
   type PMENUITEMTEMPLATE is access MENUITEMTEMPLATE; -- CXType_Pointer - CXType_Elaborated
   function LoadBitmapA(
      hInstance_x : HINSTANCE;
      lpBitmapName : LPCSTR
   ) return HBITMAP;
   pragma import (C,LoadBitmapA,"LoadBitmapA");
   function LoadBitmapW(
      hInstance_x : HINSTANCE;
      lpBitmapName : LPCWSTR
   ) return HBITMAP;
   pragma import (C,LoadBitmapW,"LoadBitmapW");
   function LoadCursorA(
      hInstance_x : HINSTANCE;
      lpCursorName : LPCSTR
   ) return HCURSOR;
   pragma import (C,LoadCursorA,"LoadCursorA");
   function LoadCursorW(
      hInstance_x : HINSTANCE;
      lpCursorName : LPCWSTR
   ) return HCURSOR;
   pragma import (C,LoadCursorW,"LoadCursorW");
   function LoadCursorFromFileA(
      lpFileName : LPCSTR
   ) return HCURSOR;
   pragma import (C,LoadCursorFromFileA,"LoadCursorFromFileA");
   function LoadCursorFromFileW(
      lpFileName : LPCWSTR
   ) return HCURSOR;
   pragma import (C,LoadCursorFromFileW,"LoadCursorFromFileW");
   function CreateCursor(
      hInst : HINSTANCE;
      xHotSpot : Interfaces.C.Int;
      yHotSpot : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      pvANDPlane : access Void;
      pvXORPlane : access Void
   ) return HCURSOR;
   pragma import (C,CreateCursor,"CreateCursor");
   function DestroyCursor(
      hCursor_x : HCURSOR
   ) return BOOL;
   pragma import (C,DestroyCursor,"DestroyCursor");
   function SetSystemCursor(
      hcur : HCURSOR;
      id : DWORD
   ) return BOOL;
   pragma import (C,SetSystemCursor,"SetSystemCursor");
   type ICONINFO_x is record
      fIcon : BOOL;
      xHotspot : DWORD;
      yHotspot : DWORD;
      hbmMask : HBITMAP;
      hbmColor : HBITMAP;
   end record;
   subtype ICONINFO is ICONINFO_x; -- CXType_Elaborated
   type PICONINFO is access ICONINFO; -- CXType_Pointer - CXType_Typedef
   function LoadIconA(
      hInstance_x : HINSTANCE;
      lpIconName : LPCSTR
   ) return HICON;
   pragma import (C,LoadIconA,"LoadIconA");
   function LoadIconW(
      hInstance_x : HINSTANCE;
      lpIconName : LPCWSTR
   ) return HICON;
   pragma import (C,LoadIconW,"LoadIconW");
   function PrivateExtractIconsA(
      szFileName : LPCSTR;
      nIconIndex : Interfaces.C.Int;
      cxIcon : Interfaces.C.Int;
      cyIcon : Interfaces.C.Int;
      phicon : access HICON;
      piconid : access UINT;
      nIcons : UINT;
      flags : UINT
   ) return UINT;
   pragma import (C,PrivateExtractIconsA,"PrivateExtractIconsA");
   function PrivateExtractIconsW(
      szFileName : LPCWSTR;
      nIconIndex : Interfaces.C.Int;
      cxIcon : Interfaces.C.Int;
      cyIcon : Interfaces.C.Int;
      phicon : access HICON;
      piconid : access UINT;
      nIcons : UINT;
      flags : UINT
   ) return UINT;
   pragma import (C,PrivateExtractIconsW,"PrivateExtractIconsW");
   function CreateIcon(
      hInstance_x : HINSTANCE;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      cPlanes : BYTE;
      cBitsPixel : BYTE;
      lpbANDbits : access constant BYTE;
      lpbXORbits : access constant BYTE
   ) return HICON;
   pragma import (C,CreateIcon,"CreateIcon");
   function DestroyIcon(
      hIcon_x : HICON
   ) return BOOL;
   pragma import (C,DestroyIcon,"DestroyIcon");
   function LookupIconIdFromDirectory(
      presbits : PBYTE;
      fIcon : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,LookupIconIdFromDirectory,"LookupIconIdFromDirectory");
   function LookupIconIdFromDirectoryEx(
      presbits : PBYTE;
      fIcon : BOOL;
      cxDesired : Interfaces.C.Int;
      cyDesired : Interfaces.C.Int;
      Flags : UINT
   ) return Interfaces.C.Int;
   pragma import (C,LookupIconIdFromDirectoryEx,"LookupIconIdFromDirectoryEx");
   function CreateIconFromResource(
      presbits : PBYTE;
      dwResSize : DWORD;
      fIcon : BOOL;
      dwVer : DWORD
   ) return HICON;
   pragma import (C,CreateIconFromResource,"CreateIconFromResource");
   function CreateIconFromResourceEx(
      presbits : PBYTE;
      dwResSize : DWORD;
      fIcon : BOOL;
      dwVer : DWORD;
      cxDesired : Interfaces.C.Int;
      cyDesired : Interfaces.C.Int;
      Flags : UINT
   ) return HICON;
   pragma import (C,CreateIconFromResourceEx,"CreateIconFromResourceEx");
   type tagCURSORSHAPE is record
      xHotSpot : Interfaces.C.Int;
      yHotSpot : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      cbWidth : Interfaces.C.Int;
      Planes : BYTE;
      BitsPixel : BYTE;
   end record;
   subtype CURSORSHAPE is tagCURSORSHAPE; -- CXType_Elaborated
   type LPCURSORSHAPE is access tagCURSORSHAPE; -- CXType_Pointer - CXType_Elaborated
   function LoadImageA(
      hInst : HINSTANCE;
      name : LPCSTR;
      type_x : UINT;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      fuLoad : UINT
   ) return HANDLE;
   pragma import (C,LoadImageA,"LoadImageA");
   function LoadImageW(
      hInst : HINSTANCE;
      name : LPCWSTR;
      type_x : UINT;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      fuLoad : UINT
   ) return HANDLE;
   pragma import (C,LoadImageW,"LoadImageW");
   function CopyImage(
      h : HANDLE;
      type_x : UINT;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      flags : UINT
   ) return HANDLE;
   pragma import (C,CopyImage,"CopyImage");
   function DrawIconEx(
      hdc_x : HDC;
      xLeft : Interfaces.C.Int;
      yTop : Interfaces.C.Int;
      hIcon_x : HICON;
      cxWidth : Interfaces.C.Int;
      cyWidth : Interfaces.C.Int;
      istepIfAniCur : UINT;
      hbrFlickerFreeDraw : HBRUSH;
      diFlags : UINT
   ) return BOOL;
   pragma import (C,DrawIconEx,"DrawIconEx");
   function CreateIconIndirect(
      piconinfo_x : PICONINFO
   ) return HICON;
   pragma import (C,CreateIconIndirect,"CreateIconIndirect");
   function CopyIcon(
      hIcon_x : HICON
   ) return HICON;
   pragma import (C,CopyIcon,"CopyIcon");
   function GetIconInfo(
      hIcon_x : HICON;
      piconinfo_x : PICONINFO
   ) return BOOL;
   pragma import (C,GetIconInfo,"GetIconInfo");
   type ICONINFOEXA_x is record
      cbSize : DWORD;
      fIcon : BOOL;
      xHotspot : DWORD;
      yHotspot : DWORD;
      hbmMask : HBITMAP;
      hbmColor : HBITMAP;
      wResID : WORD;
      szModName : Void;
      szResName : Void;
   end record;
   subtype ICONINFOEXA is ICONINFOEXA_x; -- CXType_Elaborated
   type PICONINFOEXA is access ICONINFOEXA_x; -- CXType_Pointer - CXType_Elaborated
   type ICONINFOEXW_x is record
      cbSize : DWORD;
      fIcon : BOOL;
      xHotspot : DWORD;
      yHotspot : DWORD;
      hbmMask : HBITMAP;
      hbmColor : HBITMAP;
      wResID : WORD;
      szModName : Void;
      szResName : Void;
   end record;
   subtype ICONINFOEXW is ICONINFOEXW_x; -- CXType_Elaborated
   type PICONINFOEXW is access ICONINFOEXW_x; -- CXType_Pointer - CXType_Elaborated
   subtype ICONINFOEX is ICONINFOEXA; -- CXType_Typedef
   subtype PICONINFOEX is PICONINFOEXA; -- CXType_Typedef
   function GetIconInfoExA(
      hicon_x : HICON;
      piconinfo_x : PICONINFOEXA
   ) return BOOL;
   pragma import (C,GetIconInfoExA,"GetIconInfoExA");
   function GetIconInfoExW(
      hicon_x : HICON;
      piconinfo_x : PICONINFOEXW
   ) return BOOL;
   pragma import (C,GetIconInfoExW,"GetIconInfoExW");
   type EDIT_CONTROL_FEATURE is (
      EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT,
      EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS
   );
   for EDIT_CONTROL_FEATURE use (
      EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT => 0,
      EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS => 1
   );
   for EDIT_CONTROL_FEATURE'Size use 32;
   function IsDialogMessageA(
      hDlg : HWND;
      lpMsg_x : LPMSG
   ) return BOOL;
   pragma import (C,IsDialogMessageA,"IsDialogMessageA");
   function IsDialogMessageW(
      hDlg : HWND;
      lpMsg_x : LPMSG
   ) return BOOL;
   pragma import (C,IsDialogMessageW,"IsDialogMessageW");
   function MapDialogRect(
      hDlg : HWND;
      lpRect_x : LPRECT
   ) return BOOL;
   pragma import (C,MapDialogRect,"MapDialogRect");
   function DlgDirListA(
      hDlg : HWND;
      lpPathSpec : LPSTR;
      nIDListBox : Interfaces.C.Int;
      nIDStaticPath : Interfaces.C.Int;
      uFileType : UINT
   ) return Interfaces.C.Int;
   pragma import (C,DlgDirListA,"DlgDirListA");
   function DlgDirListW(
      hDlg : HWND;
      lpPathSpec : LPWSTR;
      nIDListBox : Interfaces.C.Int;
      nIDStaticPath : Interfaces.C.Int;
      uFileType : UINT
   ) return Interfaces.C.Int;
   pragma import (C,DlgDirListW,"DlgDirListW");
   function DlgDirSelectExA(
      hwndDlg : HWND;
      lpString : LPSTR;
      chCount : Interfaces.C.Int;
      idListBox : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,DlgDirSelectExA,"DlgDirSelectExA");
   function DlgDirSelectExW(
      hwndDlg : HWND;
      lpString : LPWSTR;
      chCount : Interfaces.C.Int;
      idListBox : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,DlgDirSelectExW,"DlgDirSelectExW");
   function DlgDirListComboBoxA(
      hDlg : HWND;
      lpPathSpec : LPSTR;
      nIDComboBox : Interfaces.C.Int;
      nIDStaticPath : Interfaces.C.Int;
      uFiletype : UINT
   ) return Interfaces.C.Int;
   pragma import (C,DlgDirListComboBoxA,"DlgDirListComboBoxA");
   function DlgDirListComboBoxW(
      hDlg : HWND;
      lpPathSpec : LPWSTR;
      nIDComboBox : Interfaces.C.Int;
      nIDStaticPath : Interfaces.C.Int;
      uFiletype : UINT
   ) return Interfaces.C.Int;
   pragma import (C,DlgDirListComboBoxW,"DlgDirListComboBoxW");
   function DlgDirSelectComboBoxExA(
      hwndDlg : HWND;
      lpString : LPSTR;
      cchOut : Interfaces.C.Int;
      idComboBox : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,DlgDirSelectComboBoxExA,"DlgDirSelectComboBoxExA");
   function DlgDirSelectComboBoxExW(
      hwndDlg : HWND;
      lpString : LPWSTR;
      cchOut : Interfaces.C.Int;
      idComboBox : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,DlgDirSelectComboBoxExW,"DlgDirSelectComboBoxExW");
   type tagSCROLLINFO is record
      cbSize : UINT;
      fMask : UINT;
      nMin : Interfaces.C.Int;
      nMax : Interfaces.C.Int;
      nPage : UINT;
      nPos : Interfaces.C.Int;
      nTrackPos : Interfaces.C.Int;
   end record;
   subtype SCROLLINFO is tagSCROLLINFO; -- CXType_Elaborated
   type LPSCROLLINFO is access tagSCROLLINFO; -- CXType_Pointer - CXType_Elaborated
   type LPCSCROLLINFO is access constant SCROLLINFO; -- CXType_Pointer - CXType_Typedef
   function SetScrollInfo(
      hwnd_x : HWND;
      nBar : Interfaces.C.Int;
      lpsi : LPCSCROLLINFO;
      redraw : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,SetScrollInfo,"SetScrollInfo");
   function GetScrollInfo(
      hwnd_x : HWND;
      nBar : Interfaces.C.Int;
      lpsi : LPSCROLLINFO
   ) return BOOL;
   pragma import (C,GetScrollInfo,"GetScrollInfo");
   type tagMDICREATESTRUCTA is record
      szClass : LPCSTR;
      szTitle : LPCSTR;
      hOwner : HANDLE;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      style : DWORD;
      lParam_x : LPARAM;
   end record;
   subtype MDICREATESTRUCTA is tagMDICREATESTRUCTA; -- CXType_Elaborated
   type LPMDICREATESTRUCTA is access tagMDICREATESTRUCTA; -- CXType_Pointer - CXType_Elaborated
   type tagMDICREATESTRUCTW is record
      szClass : LPCWSTR;
      szTitle : LPCWSTR;
      hOwner : HANDLE;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      cx : Interfaces.C.Int;
      cy : Interfaces.C.Int;
      style : DWORD;
      lParam_x : LPARAM;
   end record;
   subtype MDICREATESTRUCTW is tagMDICREATESTRUCTW; -- CXType_Elaborated
   type LPMDICREATESTRUCTW is access tagMDICREATESTRUCTW; -- CXType_Pointer - CXType_Elaborated
   subtype MDICREATESTRUCT is MDICREATESTRUCTA; -- CXType_Typedef
   subtype LPMDICREATESTRUCT is LPMDICREATESTRUCTA; -- CXType_Typedef
   type tagCLIENTCREATESTRUCT is record
      hWindowMenu : HANDLE;
      idFirstChild : UINT;
   end record;
   subtype CLIENTCREATESTRUCT is tagCLIENTCREATESTRUCT; -- CXType_Elaborated
   type LPCLIENTCREATESTRUCT is access tagCLIENTCREATESTRUCT; -- CXType_Pointer - CXType_Elaborated
   function DefFrameProcA(
      hWnd_x : HWND;
      hWndMDIClient : HWND;
      uMsg : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefFrameProcA,"DefFrameProcA");
   function DefFrameProcW(
      hWnd_x : HWND;
      hWndMDIClient : HWND;
      uMsg : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefFrameProcW,"DefFrameProcW");
   function DefMDIChildProcA(
      hWnd_x : HWND;
      uMsg : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefMDIChildProcA,"DefMDIChildProcA");
   function DefMDIChildProcW(
      hWnd_x : HWND;
      uMsg : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM
   ) return LRESULT;
   pragma import (C,DefMDIChildProcW,"DefMDIChildProcW");
   function TranslateMDISysAccel(
      hWndClient : HWND;
      lpMsg_x : LPMSG
   ) return BOOL;
   pragma import (C,TranslateMDISysAccel,"TranslateMDISysAccel");
   function ArrangeIconicWindows(
      hWnd_x : HWND
   ) return UINT;
   pragma import (C,ArrangeIconicWindows,"ArrangeIconicWindows");
   function CreateMDIWindowA(
      lpClassName : LPCSTR;
      lpWindowName : LPCSTR;
      dwStyle : DWORD;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      hWndParent : HWND;
      hInstance_x : HINSTANCE;
      lParam_x : LPARAM
   ) return HWND;
   pragma import (C,CreateMDIWindowA,"CreateMDIWindowA");
   function CreateMDIWindowW(
      lpClassName : LPCWSTR;
      lpWindowName : LPCWSTR;
      dwStyle : DWORD;
      X : Interfaces.C.Int;
      Y : Interfaces.C.Int;
      nWidth : Interfaces.C.Int;
      nHeight : Interfaces.C.Int;
      hWndParent : HWND;
      hInstance_x : HINSTANCE;
      lParam_x : LPARAM
   ) return HWND;
   pragma import (C,CreateMDIWindowW,"CreateMDIWindowW");
   function TileWindows(
      hwndParent : HWND;
      wHow : UINT;
      lpRect_x : access constant RECT;
      cKids : UINT;
      lpKids : access constant HWND
   ) return WORD;
   pragma import (C,TileWindows,"TileWindows");
   function CascadeWindows(
      hwndParent : HWND;
      wHow : UINT;
      lpRect_x : access constant RECT;
      cKids : UINT;
      lpKids : access constant HWND
   ) return WORD;
   pragma import (C,CascadeWindows,"CascadeWindows");
   subtype HELPPOLY is DWORD; -- CXType_Typedef
   type tagMULTIKEYHELPA is record
      mkSize : DWORD;
      mkKeylist : CHAR;
      szKeyphrase : Void;
   end record;
   subtype MULTIKEYHELPA is tagMULTIKEYHELPA; -- CXType_Elaborated
   type PMULTIKEYHELPA is access tagMULTIKEYHELPA; -- CXType_Pointer - CXType_Elaborated
   type LPMULTIKEYHELPA is access tagMULTIKEYHELPA; -- CXType_Pointer - CXType_Elaborated
   type tagMULTIKEYHELPW is record
      mkSize : DWORD;
      mkKeylist : WCHAR;
      szKeyphrase : Void;
   end record;
   subtype MULTIKEYHELPW is tagMULTIKEYHELPW; -- CXType_Elaborated
   type PMULTIKEYHELPW is access tagMULTIKEYHELPW; -- CXType_Pointer - CXType_Elaborated
   type LPMULTIKEYHELPW is access tagMULTIKEYHELPW; -- CXType_Pointer - CXType_Elaborated
   subtype MULTIKEYHELP is MULTIKEYHELPA; -- CXType_Typedef
   subtype PMULTIKEYHELP is PMULTIKEYHELPA; -- CXType_Typedef
   subtype LPMULTIKEYHELP is LPMULTIKEYHELPA; -- CXType_Typedef
   type tagHELPWININFOA is record
      wStructSize : Interfaces.C.Int;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      dx : Interfaces.C.Int;
      dy : Interfaces.C.Int;
      wMax : Interfaces.C.Int;
      rgchMember : Void;
   end record;
   subtype HELPWININFOA is tagHELPWININFOA; -- CXType_Elaborated
   type PHELPWININFOA is access tagHELPWININFOA; -- CXType_Pointer - CXType_Elaborated
   type LPHELPWININFOA is access tagHELPWININFOA; -- CXType_Pointer - CXType_Elaborated
   type tagHELPWININFOW is record
      wStructSize : Interfaces.C.Int;
      x : Interfaces.C.Int;
      y : Interfaces.C.Int;
      dx : Interfaces.C.Int;
      dy : Interfaces.C.Int;
      wMax : Interfaces.C.Int;
      rgchMember : Void;
   end record;
   subtype HELPWININFOW is tagHELPWININFOW; -- CXType_Elaborated
   type PHELPWININFOW is access tagHELPWININFOW; -- CXType_Pointer - CXType_Elaborated
   type LPHELPWININFOW is access tagHELPWININFOW; -- CXType_Pointer - CXType_Elaborated
   subtype HELPWININFO is HELPWININFOA; -- CXType_Typedef
   subtype PHELPWININFO is PHELPWININFOA; -- CXType_Typedef
   subtype LPHELPWININFO is LPHELPWININFOA; -- CXType_Typedef
   function WinHelpA(
      hWndMain : HWND;
      lpszHelp : LPCSTR;
      uCommand : UINT;
      dwData : ULONG_PTR
   ) return BOOL;
   pragma import (C,WinHelpA,"WinHelpA");
   function WinHelpW(
      hWndMain : HWND;
      lpszHelp : LPCWSTR;
      uCommand : UINT;
      dwData : ULONG_PTR
   ) return BOOL;
   pragma import (C,WinHelpW,"WinHelpW");
   function GetGuiResources(
      hProcess : HANDLE;
      uiFlags : DWORD
   ) return DWORD;
   pragma import (C,GetGuiResources,"GetGuiResources");
   type tagTouchPredictionParameters is record
      cbSize : UINT;
      dwLatency : UINT;
      dwSampleTime : UINT;
      bUseHWTimeStamp : UINT;
   end record;
   subtype TOUCHPREDICTIONPARAMETERS is tagTouchPredictionParameters; -- CXType_Elaborated
   type PTOUCHPREDICTIONPARAMETERS is access tagTouchPredictionParameters; -- CXType_Pointer - CXType_Elaborated
   type tagHANDEDNESS is (
      HANDEDNESS_LEFT,
      HANDEDNESS_RIGHT
   );
   for tagHANDEDNESS use (
      HANDEDNESS_LEFT => 0,
      HANDEDNESS_RIGHT => 1
   );
   for tagHANDEDNESS'Size use 32;
   subtype HANDEDNESS is tagHANDEDNESS; -- CXType_Elaborated
   type PHANDEDNESS is access tagHANDEDNESS; -- CXType_Pointer - CXType_Elaborated
   type tagNONCLIENTMETRICSA is record
      cbSize : UINT;
      iBorderWidth : Interfaces.C.Int;
      iScrollWidth : Interfaces.C.Int;
      iScrollHeight : Interfaces.C.Int;
      iCaptionWidth : Interfaces.C.Int;
      iCaptionHeight : Interfaces.C.Int;
      lfCaptionFont : LOGFONTA;
      iSmCaptionWidth : Interfaces.C.Int;
      iSmCaptionHeight : Interfaces.C.Int;
      lfSmCaptionFont : LOGFONTA;
      iMenuWidth : Interfaces.C.Int;
      iMenuHeight : Interfaces.C.Int;
      lfMenuFont : LOGFONTA;
      lfStatusFont : LOGFONTA;
      lfMessageFont : LOGFONTA;
      iPaddedBorderWidth : Interfaces.C.Int;
   end record;
   subtype NONCLIENTMETRICSA is tagNONCLIENTMETRICSA; -- CXType_Elaborated
   type PNONCLIENTMETRICSA is access tagNONCLIENTMETRICSA; -- CXType_Pointer - CXType_Elaborated
   type LPNONCLIENTMETRICSA is access tagNONCLIENTMETRICSA; -- CXType_Pointer - CXType_Elaborated
   type tagNONCLIENTMETRICSW is record
      cbSize : UINT;
      iBorderWidth : Interfaces.C.Int;
      iScrollWidth : Interfaces.C.Int;
      iScrollHeight : Interfaces.C.Int;
      iCaptionWidth : Interfaces.C.Int;
      iCaptionHeight : Interfaces.C.Int;
      lfCaptionFont : LOGFONTW;
      iSmCaptionWidth : Interfaces.C.Int;
      iSmCaptionHeight : Interfaces.C.Int;
      lfSmCaptionFont : LOGFONTW;
      iMenuWidth : Interfaces.C.Int;
      iMenuHeight : Interfaces.C.Int;
      lfMenuFont : LOGFONTW;
      lfStatusFont : LOGFONTW;
      lfMessageFont : LOGFONTW;
      iPaddedBorderWidth : Interfaces.C.Int;
   end record;
   subtype NONCLIENTMETRICSW is tagNONCLIENTMETRICSW; -- CXType_Elaborated
   type PNONCLIENTMETRICSW is access tagNONCLIENTMETRICSW; -- CXType_Pointer - CXType_Elaborated
   type LPNONCLIENTMETRICSW is access tagNONCLIENTMETRICSW; -- CXType_Pointer - CXType_Elaborated
   subtype NONCLIENTMETRICS is NONCLIENTMETRICSA; -- CXType_Typedef
   subtype PNONCLIENTMETRICS is PNONCLIENTMETRICSA; -- CXType_Typedef
   subtype LPNONCLIENTMETRICS is LPNONCLIENTMETRICSA; -- CXType_Typedef
   type tagMINIMIZEDMETRICS is record
      cbSize : UINT;
      iWidth : Interfaces.C.Int;
      iHorzGap : Interfaces.C.Int;
      iVertGap : Interfaces.C.Int;
      iArrange : Interfaces.C.Int;
   end record;
   subtype MINIMIZEDMETRICS is tagMINIMIZEDMETRICS; -- CXType_Elaborated
   type PMINIMIZEDMETRICS is access tagMINIMIZEDMETRICS; -- CXType_Pointer - CXType_Elaborated
   type LPMINIMIZEDMETRICS is access tagMINIMIZEDMETRICS; -- CXType_Pointer - CXType_Elaborated
   type tagICONMETRICSA is record
      cbSize : UINT;
      iHorzSpacing : Interfaces.C.Int;
      iVertSpacing : Interfaces.C.Int;
      iTitleWrap : Interfaces.C.Int;
      lfFont : LOGFONTA;
   end record;
   subtype ICONMETRICSA is tagICONMETRICSA; -- CXType_Elaborated
   type PICONMETRICSA is access tagICONMETRICSA; -- CXType_Pointer - CXType_Elaborated
   type LPICONMETRICSA is access tagICONMETRICSA; -- CXType_Pointer - CXType_Elaborated
   type tagICONMETRICSW is record
      cbSize : UINT;
      iHorzSpacing : Interfaces.C.Int;
      iVertSpacing : Interfaces.C.Int;
      iTitleWrap : Interfaces.C.Int;
      lfFont : LOGFONTW;
   end record;
   subtype ICONMETRICSW is tagICONMETRICSW; -- CXType_Elaborated
   type PICONMETRICSW is access tagICONMETRICSW; -- CXType_Pointer - CXType_Elaborated
   type LPICONMETRICSW is access tagICONMETRICSW; -- CXType_Pointer - CXType_Elaborated
   subtype ICONMETRICS is ICONMETRICSA; -- CXType_Typedef
   subtype PICONMETRICS is PICONMETRICSA; -- CXType_Typedef
   subtype LPICONMETRICS is LPICONMETRICSA; -- CXType_Typedef
   type tagANIMATIONINFO is record
      cbSize : UINT;
      iMinAnimate : Interfaces.C.Int;
   end record;
   subtype ANIMATIONINFO is tagANIMATIONINFO; -- CXType_Elaborated
   type LPANIMATIONINFO is access tagANIMATIONINFO; -- CXType_Pointer - CXType_Elaborated
   type tagSERIALKEYSA is record
      cbSize : UINT;
      dwFlags : DWORD;
      lpszActivePort : LPSTR;
      lpszPort : LPSTR;
      iBaudRate : UINT;
      iPortState : UINT;
      iActive : UINT;
   end record;
   subtype SERIALKEYSA is tagSERIALKEYSA; -- CXType_Elaborated
   type LPSERIALKEYSA is access tagSERIALKEYSA; -- CXType_Pointer - CXType_Elaborated
   type tagSERIALKEYSW is record
      cbSize : UINT;
      dwFlags : DWORD;
      lpszActivePort : LPWSTR;
      lpszPort : LPWSTR;
      iBaudRate : UINT;
      iPortState : UINT;
      iActive : UINT;
   end record;
   subtype SERIALKEYSW is tagSERIALKEYSW; -- CXType_Elaborated
   type LPSERIALKEYSW is access tagSERIALKEYSW; -- CXType_Pointer - CXType_Elaborated
   subtype SERIALKEYS is SERIALKEYSA; -- CXType_Typedef
   subtype LPSERIALKEYS is LPSERIALKEYSA; -- CXType_Typedef
   type tagHIGHCONTRASTA is record
      cbSize : UINT;
      dwFlags : DWORD;
      lpszDefaultScheme : LPSTR;
   end record;
   subtype HIGHCONTRASTA is tagHIGHCONTRASTA; -- CXType_Elaborated
   type LPHIGHCONTRASTA is access tagHIGHCONTRASTA; -- CXType_Pointer - CXType_Elaborated
   type tagHIGHCONTRASTW is record
      cbSize : UINT;
      dwFlags : DWORD;
      lpszDefaultScheme : LPWSTR;
   end record;
   subtype HIGHCONTRASTW is tagHIGHCONTRASTW; -- CXType_Elaborated
   type LPHIGHCONTRASTW is access tagHIGHCONTRASTW; -- CXType_Pointer - CXType_Elaborated
   subtype HIGHCONTRAST is HIGHCONTRASTA; -- CXType_Typedef
   subtype LPHIGHCONTRAST is LPHIGHCONTRASTA; -- CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\tvout.h>
   type VIDEOPARAMETERS_x is record
      Guid_x : GUID;
      dwOffset : ULONG;
      dwCommand : ULONG;
      dwFlags : ULONG;
      dwMode : ULONG;
      dwTVStandard : ULONG;
      dwAvailableModes : ULONG;
      dwAvailableTVStandard : ULONG;
      dwFlickerFilter : ULONG;
      dwOverScanX : ULONG;
      dwOverScanY : ULONG;
      dwMaxUnscaledX : ULONG;
      dwMaxUnscaledY : ULONG;
      dwPositionX : ULONG;
      dwPositionY : ULONG;
      dwBrightness : ULONG;
      dwContrast : ULONG;
      dwCPType : ULONG;
      dwCPCommand : ULONG;
      dwCPStandard : ULONG;
      dwCPKey : ULONG;
      bCP_APSTriggerBits : ULONG;
      bOEMCopyProtection : Void;
   end record;
   subtype VIDEOPARAMETERS is VIDEOPARAMETERS_x; -- CXType_Elaborated
   type PVIDEOPARAMETERS is access VIDEOPARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type LPVIDEOPARAMETERS is access VIDEOPARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winuser.h>
   function ChangeDisplaySettingsA(
      lpDevMode_x : access DEVMODEA;
      dwFlags : DWORD
   ) return LONG;
   pragma import (C,ChangeDisplaySettingsA,"ChangeDisplaySettingsA");
   function ChangeDisplaySettingsW(
      lpDevMode_x : access DEVMODEW;
      dwFlags : DWORD
   ) return LONG;
   pragma import (C,ChangeDisplaySettingsW,"ChangeDisplaySettingsW");
   function ChangeDisplaySettingsExA(
      lpszDeviceName : LPCSTR;
      lpDevMode_x : access DEVMODEA;
      hwnd_x : HWND;
      dwflags : DWORD;
      lParam_x : LPVOID
   ) return LONG;
   pragma import (C,ChangeDisplaySettingsExA,"ChangeDisplaySettingsExA");
   function ChangeDisplaySettingsExW(
      lpszDeviceName : LPCWSTR;
      lpDevMode_x : access DEVMODEW;
      hwnd_x : HWND;
      dwflags : DWORD;
      lParam_x : LPVOID
   ) return LONG;
   pragma import (C,ChangeDisplaySettingsExW,"ChangeDisplaySettingsExW");
   function EnumDisplaySettingsA(
      lpszDeviceName : LPCSTR;
      iModeNum : DWORD;
      lpDevMode_x : access DEVMODEA
   ) return BOOL;
   pragma import (C,EnumDisplaySettingsA,"EnumDisplaySettingsA");
   function EnumDisplaySettingsW(
      lpszDeviceName : LPCWSTR;
      iModeNum : DWORD;
      lpDevMode_x : access DEVMODEW
   ) return BOOL;
   pragma import (C,EnumDisplaySettingsW,"EnumDisplaySettingsW");
   function EnumDisplaySettingsExA(
      lpszDeviceName : LPCSTR;
      iModeNum : DWORD;
      lpDevMode_x : access DEVMODEA;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDisplaySettingsExA,"EnumDisplaySettingsExA");
   function EnumDisplaySettingsExW(
      lpszDeviceName : LPCWSTR;
      iModeNum : DWORD;
      lpDevMode_x : access DEVMODEW;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDisplaySettingsExW,"EnumDisplaySettingsExW");
   function EnumDisplayDevicesA(
      lpDevice : LPCSTR;
      iDevNum : DWORD;
      lpDisplayDevice : PDISPLAY_DEVICEA;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDisplayDevicesA,"EnumDisplayDevicesA");
   function EnumDisplayDevicesW(
      lpDevice : LPCWSTR;
      iDevNum : DWORD;
      lpDisplayDevice : PDISPLAY_DEVICEW;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDisplayDevicesW,"EnumDisplayDevicesW");
   function GetDisplayConfigBufferSizes(
      flags : UINT32;
      numPathArrayElements : access UINT32;
      numModeInfoArrayElements : access UINT32
   ) return LONG;
   pragma import (C,GetDisplayConfigBufferSizes,"GetDisplayConfigBufferSizes");
   function SetDisplayConfig(
      numPathArrayElements : UINT32;
      pathArray : access DISPLAYCONFIG_PATH_INFO;
      numModeInfoArrayElements : UINT32;
      modeInfoArray : access DISPLAYCONFIG_MODE_INFO;
      flags : UINT32
   ) return LONG;
   pragma import (C,SetDisplayConfig,"SetDisplayConfig");
   function QueryDisplayConfig(
      flags : UINT32;
      numPathArrayElements : access UINT32;
      pathArray : access DISPLAYCONFIG_PATH_INFO;
      numModeInfoArrayElements : access UINT32;
      modeInfoArray : access DISPLAYCONFIG_MODE_INFO;
      currentTopologyId : access DISPLAYCONFIG_TOPOLOGY_ID
   ) return LONG;
   pragma import (C,QueryDisplayConfig,"QueryDisplayConfig");
   function DisplayConfigGetDeviceInfo(
      requestPacket : access DISPLAYCONFIG_DEVICE_INFO_HEADER
   ) return LONG;
   pragma import (C,DisplayConfigGetDeviceInfo,"DisplayConfigGetDeviceInfo");
   function DisplayConfigSetDeviceInfo(
      setPacket : access DISPLAYCONFIG_DEVICE_INFO_HEADER
   ) return LONG;
   pragma import (C,DisplayConfigSetDeviceInfo,"DisplayConfigSetDeviceInfo");
   function SystemParametersInfoA(
      uiAction : UINT;
      uiParam : UINT;
      pvParam : PVOID;
      fWinIni : UINT
   ) return BOOL;
   pragma import (C,SystemParametersInfoA,"SystemParametersInfoA");
   function SystemParametersInfoW(
      uiAction : UINT;
      uiParam : UINT;
      pvParam : PVOID;
      fWinIni : UINT
   ) return BOOL;
   pragma import (C,SystemParametersInfoW,"SystemParametersInfoW");
   function SystemParametersInfoForDpi(
      uiAction : UINT;
      uiParam : UINT;
      pvParam : PVOID;
      fWinIni : UINT;
      dpi : UINT
   ) return BOOL;
   pragma import (C,SystemParametersInfoForDpi,"SystemParametersInfoForDpi");
   type tagFILTERKEYS is record
      cbSize : UINT;
      dwFlags : DWORD;
      iWaitMSec : DWORD;
      iDelayMSec : DWORD;
      iRepeatMSec : DWORD;
      iBounceMSec : DWORD;
   end record;
   subtype FILTERKEYS is tagFILTERKEYS; -- CXType_Elaborated
   type LPFILTERKEYS is access tagFILTERKEYS; -- CXType_Pointer - CXType_Elaborated
   type tagSTICKYKEYS is record
      cbSize : UINT;
      dwFlags : DWORD;
   end record;
   subtype STICKYKEYS is tagSTICKYKEYS; -- CXType_Elaborated
   type LPSTICKYKEYS is access tagSTICKYKEYS; -- CXType_Pointer - CXType_Elaborated
   type tagMOUSEKEYS is record
      cbSize : UINT;
      dwFlags : DWORD;
      iMaxSpeed : DWORD;
      iTimeToMaxSpeed : DWORD;
      iCtrlSpeed : DWORD;
      dwReserved1 : DWORD;
      dwReserved2 : DWORD;
   end record;
   subtype MOUSEKEYS is tagMOUSEKEYS; -- CXType_Elaborated
   type LPMOUSEKEYS is access tagMOUSEKEYS; -- CXType_Pointer - CXType_Elaborated
   type tagACCESSTIMEOUT is record
      cbSize : UINT;
      dwFlags : DWORD;
      iTimeOutMSec : DWORD;
   end record;
   subtype ACCESSTIMEOUT is tagACCESSTIMEOUT; -- CXType_Elaborated
   type LPACCESSTIMEOUT is access tagACCESSTIMEOUT; -- CXType_Pointer - CXType_Elaborated
   type tagSOUNDSENTRYA is record
      cbSize : UINT;
      dwFlags : DWORD;
      iFSTextEffect : DWORD;
      iFSTextEffectMSec : DWORD;
      iFSTextEffectColorBits : DWORD;
      iFSGrafEffect : DWORD;
      iFSGrafEffectMSec : DWORD;
      iFSGrafEffectColor : DWORD;
      iWindowsEffect : DWORD;
      iWindowsEffectMSec : DWORD;
      lpszWindowsEffectDLL : LPSTR;
      iWindowsEffectOrdinal : DWORD;
   end record;
   subtype SOUNDSENTRYA is tagSOUNDSENTRYA; -- CXType_Elaborated
   type LPSOUNDSENTRYA is access tagSOUNDSENTRYA; -- CXType_Pointer - CXType_Elaborated
   type tagSOUNDSENTRYW is record
      cbSize : UINT;
      dwFlags : DWORD;
      iFSTextEffect : DWORD;
      iFSTextEffectMSec : DWORD;
      iFSTextEffectColorBits : DWORD;
      iFSGrafEffect : DWORD;
      iFSGrafEffectMSec : DWORD;
      iFSGrafEffectColor : DWORD;
      iWindowsEffect : DWORD;
      iWindowsEffectMSec : DWORD;
      lpszWindowsEffectDLL : LPWSTR;
      iWindowsEffectOrdinal : DWORD;
   end record;
   subtype SOUNDSENTRYW is tagSOUNDSENTRYW; -- CXType_Elaborated
   type LPSOUNDSENTRYW is access tagSOUNDSENTRYW; -- CXType_Pointer - CXType_Elaborated
   subtype SOUNDSENTRY is SOUNDSENTRYA; -- CXType_Typedef
   subtype LPSOUNDSENTRY is LPSOUNDSENTRYA; -- CXType_Typedef
   function SoundSentry_x return BOOL;
   pragma import (C,SoundSentry_x,"SoundSentry");
   type tagTOGGLEKEYS is record
      cbSize : UINT;
      dwFlags : DWORD;
   end record;
   subtype TOGGLEKEYS is tagTOGGLEKEYS; -- CXType_Elaborated
   type LPTOGGLEKEYS is access tagTOGGLEKEYS; -- CXType_Pointer - CXType_Elaborated
   type tagAUDIODESCRIPTION is record
      cbSize : UINT;
      Enabled : BOOL;
      Locale : LCID;
   end record;
   subtype AUDIODESCRIPTION is tagAUDIODESCRIPTION; -- CXType_Elaborated
   type LPAUDIODESCRIPTION is access tagAUDIODESCRIPTION; -- CXType_Pointer - CXType_Elaborated
   procedure SetDebugErrorLevel(
      dwLevel : DWORD
   );
   pragma import (C,SetDebugErrorLevel,"SetDebugErrorLevel");
   procedure SetLastErrorEx(
      dwErrCode : DWORD;
      dwType : DWORD
   );
   pragma import (C,SetLastErrorEx,"SetLastErrorEx");
   function InternalGetWindowText(
      hWnd_x : HWND;
      pString : LPWSTR;
      cchMaxCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,InternalGetWindowText,"InternalGetWindowText");
   function CancelShutdown return BOOL;
   pragma import (C,CancelShutdown,"CancelShutdown");
   function MonitorFromPoint(
      pt : POINT;
      dwFlags : DWORD
   ) return HMONITOR;
   pragma import (C,MonitorFromPoint,"MonitorFromPoint");
   function MonitorFromRect(
      lprc : LPCRECT;
      dwFlags : DWORD
   ) return HMONITOR;
   pragma import (C,MonitorFromRect,"MonitorFromRect");
   function MonitorFromWindow(
      hwnd_x : HWND;
      dwFlags : DWORD
   ) return HMONITOR;
   pragma import (C,MonitorFromWindow,"MonitorFromWindow");
   type tagMONITORINFO is record
      cbSize : DWORD;
      rcMonitor : RECT;
      rcWork : RECT;
      dwFlags : DWORD;
   end record;
   subtype MONITORINFO is tagMONITORINFO; -- CXType_Elaborated
   type LPMONITORINFO is access tagMONITORINFO; -- CXType_Pointer - CXType_Elaborated
   type tagMONITORINFOEXA is record
      szDevice : Void;
   end record;
   subtype MONITORINFOEXA is tagMONITORINFOEXA; -- CXType_Elaborated
   type LPMONITORINFOEXA is access tagMONITORINFOEXA; -- CXType_Pointer - CXType_Elaborated
   type tagMONITORINFOEXW is record
      szDevice : Void;
   end record;
   subtype MONITORINFOEXW is tagMONITORINFOEXW; -- CXType_Elaborated
   type LPMONITORINFOEXW is access tagMONITORINFOEXW; -- CXType_Pointer - CXType_Elaborated
   subtype MONITORINFOEX is MONITORINFOEXA; -- CXType_Typedef
   subtype LPMONITORINFOEX is LPMONITORINFOEXA; -- CXType_Typedef
   function GetMonitorInfoA(
      hMonitor_x : HMONITOR;
      lpmi : LPMONITORINFO
   ) return BOOL;
   pragma import (C,GetMonitorInfoA,"GetMonitorInfoA");
   function GetMonitorInfoW(
      hMonitor_x : HMONITOR;
      lpmi : LPMONITORINFO
   ) return BOOL;
   pragma import (C,GetMonitorInfoW,"GetMonitorInfoW");
   subtype MONITORENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HMONITOR, HDC, LPRECT, LPARAM)
   function EnumDisplayMonitors(
      hdc_x : HDC;
      lprcClip : LPCRECT;
      lpfnEnum : MONITORENUMPROC;
      dwData : LPARAM
   ) return BOOL;
   pragma import (C,EnumDisplayMonitors,"EnumDisplayMonitors");
   procedure NotifyWinEvent(
      event : DWORD;
      hwnd_x : HWND;
      idObject : LONG;
      idChild : LONG
   );
   pragma import (C,NotifyWinEvent,"NotifyWinEvent");
   subtype WINEVENTPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HWINEVENTHOOK, DWORD, HWND, LONG, LONG, DWORD, DWORD)
   function SetWinEventHook(
      eventMin : DWORD;
      eventMax : DWORD;
      hmodWinEventProc : HMODULE;
      pfnWinEventProc : WINEVENTPROC;
      idProcess : DWORD;
      idThread : DWORD;
      dwFlags : DWORD
   ) return HWINEVENTHOOK;
   pragma import (C,SetWinEventHook,"SetWinEventHook");
   function IsWinEventHookInstalled(
      event : DWORD
   ) return BOOL;
   pragma import (C,IsWinEventHookInstalled,"IsWinEventHookInstalled");
   function UnhookWinEvent(
      hWinEventHook_x : HWINEVENTHOOK
   ) return BOOL;
   pragma import (C,UnhookWinEvent,"UnhookWinEvent");
   type tagGUITHREADINFO is record
      cbSize : DWORD;
      flags : DWORD;
      hwndActive : HWND;
      hwndFocus : HWND;
      hwndCapture : HWND;
      hwndMenuOwner : HWND;
      hwndMoveSize : HWND;
      hwndCaret : HWND;
      rcCaret : RECT;
   end record;
   subtype GUITHREADINFO is tagGUITHREADINFO; -- CXType_Elaborated
   type PGUITHREADINFO is access tagGUITHREADINFO; -- CXType_Pointer - CXType_Elaborated
   type LPGUITHREADINFO is access tagGUITHREADINFO; -- CXType_Pointer - CXType_Elaborated
   function GetGUIThreadInfo(
      idThread : DWORD;
      pgui : PGUITHREADINFO
   ) return BOOL;
   pragma import (C,GetGUIThreadInfo,"GetGUIThreadInfo");
   function BlockInput(
      fBlockIt : BOOL
   ) return BOOL;
   pragma import (C,BlockInput,"BlockInput");
   function SetProcessDPIAware return BOOL;
   pragma import (C,SetProcessDPIAware,"SetProcessDPIAware");
   function IsProcessDPIAware return BOOL;
   pragma import (C,IsProcessDPIAware,"IsProcessDPIAware");
   function SetThreadDpiAwarenessContext(
      dpiContext : DPI_AWARENESS_CONTEXT
   ) return DPI_AWARENESS_CONTEXT;
   pragma import (C,SetThreadDpiAwarenessContext,"SetThreadDpiAwarenessContext");
   function GetThreadDpiAwarenessContext return DPI_AWARENESS_CONTEXT;
   pragma import (C,GetThreadDpiAwarenessContext,"GetThreadDpiAwarenessContext");
   function GetWindowDpiAwarenessContext(
      hwnd_x : HWND
   ) return DPI_AWARENESS_CONTEXT;
   pragma import (C,GetWindowDpiAwarenessContext,"GetWindowDpiAwarenessContext");
   function GetAwarenessFromDpiAwarenessContext(
      value : DPI_AWARENESS_CONTEXT
   ) return DPI_AWARENESS;
   pragma import (C,GetAwarenessFromDpiAwarenessContext,"GetAwarenessFromDpiAwarenessContext");
   function GetDpiFromDpiAwarenessContext(
      value : DPI_AWARENESS_CONTEXT
   ) return UINT;
   pragma import (C,GetDpiFromDpiAwarenessContext,"GetDpiFromDpiAwarenessContext");
   function AreDpiAwarenessContextsEqual(
      dpiContextA : DPI_AWARENESS_CONTEXT;
      dpiContextB : DPI_AWARENESS_CONTEXT
   ) return BOOL;
   pragma import (C,AreDpiAwarenessContextsEqual,"AreDpiAwarenessContextsEqual");
   function IsValidDpiAwarenessContext(
      value : DPI_AWARENESS_CONTEXT
   ) return BOOL;
   pragma import (C,IsValidDpiAwarenessContext,"IsValidDpiAwarenessContext");
   function GetDpiForWindow(
      hwnd_x : HWND
   ) return UINT;
   pragma import (C,GetDpiForWindow,"GetDpiForWindow");
   function GetDpiForSystem return UINT;
   pragma import (C,GetDpiForSystem,"GetDpiForSystem");
   function GetSystemDpiForProcess(
      hProcess : HANDLE
   ) return UINT;
   pragma import (C,GetSystemDpiForProcess,"GetSystemDpiForProcess");
   function EnableNonClientDpiScaling(
      hwnd_x : HWND
   ) return BOOL;
   pragma import (C,EnableNonClientDpiScaling,"EnableNonClientDpiScaling");
   function InheritWindowMonitor(
      hwnd_x : HWND;
      hwndInherit : HWND
   ) return BOOL;
   pragma import (C,InheritWindowMonitor,"InheritWindowMonitor");
   function SetProcessDpiAwarenessContext(
      value : DPI_AWARENESS_CONTEXT
   ) return BOOL;
   pragma import (C,SetProcessDpiAwarenessContext,"SetProcessDpiAwarenessContext");
   function SetThreadDpiHostingBehavior(
      value : DPI_HOSTING_BEHAVIOR
   ) return DPI_HOSTING_BEHAVIOR;
   pragma import (C,SetThreadDpiHostingBehavior,"SetThreadDpiHostingBehavior");
   function GetThreadDpiHostingBehavior return DPI_HOSTING_BEHAVIOR;
   pragma import (C,GetThreadDpiHostingBehavior,"GetThreadDpiHostingBehavior");
   function GetWindowDpiHostingBehavior(
      hwnd_x : HWND
   ) return DPI_HOSTING_BEHAVIOR;
   pragma import (C,GetWindowDpiHostingBehavior,"GetWindowDpiHostingBehavior");
   function GetWindowModuleFileNameA(
      hwnd_x : HWND;
      pszFileName : LPSTR;
      cchFileNameMax : UINT
   ) return UINT;
   pragma import (C,GetWindowModuleFileNameA,"GetWindowModuleFileNameA");
   function GetWindowModuleFileNameW(
      hwnd_x : HWND;
      pszFileName : LPWSTR;
      cchFileNameMax : UINT
   ) return UINT;
   pragma import (C,GetWindowModuleFileNameW,"GetWindowModuleFileNameW");
   type tagCURSORINFO is record
      cbSize : DWORD;
      flags : DWORD;
      hCursor_x : HCURSOR;
      ptScreenPos : POINT;
   end record;
   subtype CURSORINFO is tagCURSORINFO; -- CXType_Elaborated
   type PCURSORINFO is access tagCURSORINFO; -- CXType_Pointer - CXType_Elaborated
   type LPCURSORINFO is access tagCURSORINFO; -- CXType_Pointer - CXType_Elaborated
   function GetCursorInfo(
      pci : PCURSORINFO
   ) return BOOL;
   pragma import (C,GetCursorInfo,"GetCursorInfo");
   type tagWINDOWINFO is record
      cbSize : DWORD;
      rcWindow : RECT;
      rcClient : RECT;
      dwStyle : DWORD;
      dwExStyle : DWORD;
      dwWindowStatus : DWORD;
      cxWindowBorders : UINT;
      cyWindowBorders : UINT;
      atomWindowType : ATOM;
      wCreatorVersion : WORD;
   end record;
   subtype WINDOWINFO is tagWINDOWINFO; -- CXType_Elaborated
   type PWINDOWINFO is access tagWINDOWINFO; -- CXType_Pointer - CXType_Elaborated
   type LPWINDOWINFO is access tagWINDOWINFO; -- CXType_Pointer - CXType_Elaborated
   function GetWindowInfo(
      hwnd_x : HWND;
      pwi : PWINDOWINFO
   ) return BOOL;
   pragma import (C,GetWindowInfo,"GetWindowInfo");
   type tagTITLEBARINFO is record
      cbSize : DWORD;
      rcTitleBar : RECT;
      rgstate : Void;
   end record;
   subtype TITLEBARINFO is tagTITLEBARINFO; -- CXType_Elaborated
   type PTITLEBARINFO is access tagTITLEBARINFO; -- CXType_Pointer - CXType_Elaborated
   type LPTITLEBARINFO is access tagTITLEBARINFO; -- CXType_Pointer - CXType_Elaborated
   function GetTitleBarInfo(
      hwnd_x : HWND;
      pti : PTITLEBARINFO
   ) return BOOL;
   pragma import (C,GetTitleBarInfo,"GetTitleBarInfo");
   type tagTITLEBARINFOEX is record
      cbSize : DWORD;
      rcTitleBar : RECT;
      rgstate : Void;
      rgrect : Void;
   end record;
   subtype TITLEBARINFOEX is tagTITLEBARINFOEX; -- CXType_Elaborated
   type PTITLEBARINFOEX is access tagTITLEBARINFOEX; -- CXType_Pointer - CXType_Elaborated
   type LPTITLEBARINFOEX is access tagTITLEBARINFOEX; -- CXType_Pointer - CXType_Elaborated
   type tagMENUBARINFO is record
      cbSize : DWORD;
      rcBar : RECT;
      hMenu_x : HMENU;
      hwndMenu : HWND;
      fBarFocused : BOOL;
      fFocused : BOOL;
   end record;
   subtype MENUBARINFO is tagMENUBARINFO; -- CXType_Elaborated
   type PMENUBARINFO is access tagMENUBARINFO; -- CXType_Pointer - CXType_Elaborated
   type LPMENUBARINFO is access tagMENUBARINFO; -- CXType_Pointer - CXType_Elaborated
   function GetMenuBarInfo(
      hwnd_x : HWND;
      idObject : LONG;
      idItem : LONG;
      pmbi : PMENUBARINFO
   ) return BOOL;
   pragma import (C,GetMenuBarInfo,"GetMenuBarInfo");
   type tagSCROLLBARINFO is record
      cbSize : DWORD;
      rcScrollBar : RECT;
      dxyLineButton : Interfaces.C.Int;
      xyThumbTop : Interfaces.C.Int;
      xyThumbBottom : Interfaces.C.Int;
      reserved : Interfaces.C.Int;
      rgstate : Void;
   end record;
   subtype SCROLLBARINFO is tagSCROLLBARINFO; -- CXType_Elaborated
   type PSCROLLBARINFO is access tagSCROLLBARINFO; -- CXType_Pointer - CXType_Elaborated
   type LPSCROLLBARINFO is access tagSCROLLBARINFO; -- CXType_Pointer - CXType_Elaborated
   function GetScrollBarInfo(
      hwnd_x : HWND;
      idObject : LONG;
      psbi : PSCROLLBARINFO
   ) return BOOL;
   pragma import (C,GetScrollBarInfo,"GetScrollBarInfo");
   type tagCOMBOBOXINFO is record
      cbSize : DWORD;
      rcItem : RECT;
      rcButton : RECT;
      stateButton : DWORD;
      hwndCombo : HWND;
      hwndItem : HWND;
      hwndList : HWND;
   end record;
   subtype COMBOBOXINFO is tagCOMBOBOXINFO; -- CXType_Elaborated
   type PCOMBOBOXINFO is access tagCOMBOBOXINFO; -- CXType_Pointer - CXType_Elaborated
   type LPCOMBOBOXINFO is access tagCOMBOBOXINFO; -- CXType_Pointer - CXType_Elaborated
   function GetComboBoxInfo(
      hwndCombo : HWND;
      pcbi : PCOMBOBOXINFO
   ) return BOOL;
   pragma import (C,GetComboBoxInfo,"GetComboBoxInfo");
   function GetAncestor(
      hwnd_x : HWND;
      gaFlags : UINT
   ) return HWND;
   pragma import (C,GetAncestor,"GetAncestor");
   function RealChildWindowFromPoint(
      hwndParent : HWND;
      ptParentClientCoords : POINT
   ) return HWND;
   pragma import (C,RealChildWindowFromPoint,"RealChildWindowFromPoint");
   function RealGetWindowClassA(
      hwnd_x : HWND;
      ptszClassName : LPSTR;
      cchClassNameMax : UINT
   ) return UINT;
   pragma import (C,RealGetWindowClassA,"RealGetWindowClassA");
   function RealGetWindowClassW(
      hwnd_x : HWND;
      ptszClassName : LPWSTR;
      cchClassNameMax : UINT
   ) return UINT;
   pragma import (C,RealGetWindowClassW,"RealGetWindowClassW");
   type tagALTTABINFO is record
      cbSize : DWORD;
      cItems : Interfaces.C.Int;
      cColumns : Interfaces.C.Int;
      cRows : Interfaces.C.Int;
      iColFocus : Interfaces.C.Int;
      iRowFocus : Interfaces.C.Int;
      cxItem : Interfaces.C.Int;
      cyItem : Interfaces.C.Int;
      ptStart : POINT;
   end record;
   subtype ALTTABINFO is tagALTTABINFO; -- CXType_Elaborated
   type PALTTABINFO is access tagALTTABINFO; -- CXType_Pointer - CXType_Elaborated
   type LPALTTABINFO is access tagALTTABINFO; -- CXType_Pointer - CXType_Elaborated
   function GetAltTabInfoA(
      hwnd_x : HWND;
      iItem : Interfaces.C.Int;
      pati : PALTTABINFO;
      pszItemText : LPSTR;
      cchItemText : UINT
   ) return BOOL;
   pragma import (C,GetAltTabInfoA,"GetAltTabInfoA");
   function GetAltTabInfoW(
      hwnd_x : HWND;
      iItem : Interfaces.C.Int;
      pati : PALTTABINFO;
      pszItemText : LPWSTR;
      cchItemText : UINT
   ) return BOOL;
   pragma import (C,GetAltTabInfoW,"GetAltTabInfoW");
   function GetListBoxInfo(
      hwnd_x : HWND
   ) return DWORD;
   pragma import (C,GetListBoxInfo,"GetListBoxInfo");
   function LockWorkStation return BOOL;
   pragma import (C,LockWorkStation,"LockWorkStation");
   function UserHandleGrantAccess(
      hUserHandle : HANDLE;
      hJob : HANDLE;
      bGrant : BOOL
   ) return BOOL;
   pragma import (C,UserHandleGrantAccess,"UserHandleGrantAccess");
   type HRAWINPUT_x is record
      unused : Interfaces.C.Int;
   end record;
   type HRAWINPUT is access HRAWINPUT_x; -- CXType_Pointer - CXType_Elaborated
   type tagRAWINPUTHEADER is record
      dwType : DWORD;
      dwSize : DWORD;
      hDevice : HANDLE;
      wParam_x : WPARAM;
   end record;
   subtype RAWINPUTHEADER is tagRAWINPUTHEADER; -- CXType_Elaborated
   type PRAWINPUTHEADER is access tagRAWINPUTHEADER; -- CXType_Pointer - CXType_Elaborated
   type LPRAWINPUTHEADER is access tagRAWINPUTHEADER; -- CXType_Pointer - CXType_Elaborated
   type tagRAWMOUSE is record
      usFlags : USHORT;
      ulRawButtons : ULONG;
      lLastX : LONG;
      lLastY : LONG;
      ulExtraInformation : ULONG;
   end record;
   subtype RAWMOUSE is tagRAWMOUSE; -- CXType_Elaborated
   type PRAWMOUSE is access tagRAWMOUSE; -- CXType_Pointer - CXType_Elaborated
   type LPRAWMOUSE is access tagRAWMOUSE; -- CXType_Pointer - CXType_Elaborated
   type tagRAWKEYBOARD is record
      MakeCode : USHORT;
      Flags : USHORT;
      Reserved : USHORT;
      VKey : USHORT;
      Message : UINT;
      ExtraInformation : ULONG;
   end record;
   subtype RAWKEYBOARD is tagRAWKEYBOARD; -- CXType_Elaborated
   type PRAWKEYBOARD is access tagRAWKEYBOARD; -- CXType_Pointer - CXType_Elaborated
   type LPRAWKEYBOARD is access tagRAWKEYBOARD; -- CXType_Pointer - CXType_Elaborated
   type tagRAWHID is record
      dwSizeHid : DWORD;
      dwCount : DWORD;
      bRawData : Void;
   end record;
   subtype RAWHID is tagRAWHID; -- CXType_Elaborated
   type PRAWHID is access tagRAWHID; -- CXType_Pointer - CXType_Elaborated
   type LPRAWHID is access tagRAWHID; -- CXType_Pointer - CXType_Elaborated
   type tagRAWINPUT is record
      header : RAWINPUTHEADER;
      data : Void;
   end record;
   subtype RAWINPUT is tagRAWINPUT; -- CXType_Elaborated
   type PRAWINPUT is access tagRAWINPUT; -- CXType_Pointer - CXType_Elaborated
   type LPRAWINPUT is access tagRAWINPUT; -- CXType_Pointer - CXType_Elaborated
   function GetRawInputData(
      hRawInput_x : HRAWINPUT;
      uiCommand : UINT;
      pData : LPVOID;
      pcbSize : PUINT;
      cbSizeHeader : UINT
   ) return UINT;
   pragma import (C,GetRawInputData,"GetRawInputData");
   type tagRID_DEVICE_INFO_MOUSE is record
      dwId : DWORD;
      dwNumberOfButtons : DWORD;
      dwSampleRate : DWORD;
      fHasHorizontalWheel : BOOL;
   end record;
   subtype RID_DEVICE_INFO_MOUSE is tagRID_DEVICE_INFO_MOUSE; -- CXType_Elaborated
   type PRID_DEVICE_INFO_MOUSE is access tagRID_DEVICE_INFO_MOUSE; -- CXType_Pointer - CXType_Elaborated
   type tagRID_DEVICE_INFO_KEYBOARD is record
      dwType : DWORD;
      dwSubType : DWORD;
      dwKeyboardMode : DWORD;
      dwNumberOfFunctionKeys : DWORD;
      dwNumberOfIndicators : DWORD;
      dwNumberOfKeysTotal : DWORD;
   end record;
   subtype RID_DEVICE_INFO_KEYBOARD is tagRID_DEVICE_INFO_KEYBOARD; -- CXType_Elaborated
   type PRID_DEVICE_INFO_KEYBOARD is access tagRID_DEVICE_INFO_KEYBOARD; -- CXType_Pointer - CXType_Elaborated
   type tagRID_DEVICE_INFO_HID is record
      dwVendorId : DWORD;
      dwProductId : DWORD;
      dwVersionNumber : DWORD;
      usUsagePage : USHORT;
      usUsage : USHORT;
   end record;
   subtype RID_DEVICE_INFO_HID is tagRID_DEVICE_INFO_HID; -- CXType_Elaborated
   type PRID_DEVICE_INFO_HID is access tagRID_DEVICE_INFO_HID; -- CXType_Pointer - CXType_Elaborated
   type tagRID_DEVICE_INFO is record
      cbSize : DWORD;
      dwType : DWORD;
   end record;
   subtype RID_DEVICE_INFO is tagRID_DEVICE_INFO; -- CXType_Elaborated
   type PRID_DEVICE_INFO is access tagRID_DEVICE_INFO; -- CXType_Pointer - CXType_Elaborated
   type LPRID_DEVICE_INFO is access tagRID_DEVICE_INFO; -- CXType_Pointer - CXType_Elaborated
   function GetRawInputDeviceInfoA(
      hDevice : HANDLE;
      uiCommand : UINT;
      pData : LPVOID;
      pcbSize : PUINT
   ) return UINT;
   pragma import (C,GetRawInputDeviceInfoA,"GetRawInputDeviceInfoA");
   function GetRawInputDeviceInfoW(
      hDevice : HANDLE;
      uiCommand : UINT;
      pData : LPVOID;
      pcbSize : PUINT
   ) return UINT;
   pragma import (C,GetRawInputDeviceInfoW,"GetRawInputDeviceInfoW");
   function GetRawInputBuffer(
      pData : PRAWINPUT;
      pcbSize : PUINT;
      cbSizeHeader : UINT
   ) return UINT;
   pragma import (C,GetRawInputBuffer,"GetRawInputBuffer");
   type tagRAWINPUTDEVICE is record
      usUsagePage : USHORT;
      usUsage : USHORT;
      dwFlags : DWORD;
      hwndTarget : HWND;
   end record;
   subtype RAWINPUTDEVICE is tagRAWINPUTDEVICE; -- CXType_Elaborated
   type PRAWINPUTDEVICE is access tagRAWINPUTDEVICE; -- CXType_Pointer - CXType_Elaborated
   type LPRAWINPUTDEVICE is access tagRAWINPUTDEVICE; -- CXType_Pointer - CXType_Elaborated
   type PCRAWINPUTDEVICE is access constant RAWINPUTDEVICE; -- CXType_Pointer - CXType_Typedef
   function RegisterRawInputDevices(
      pRawInputDevices : PCRAWINPUTDEVICE;
      uiNumDevices : UINT;
      cbSize : UINT
   ) return BOOL;
   pragma import (C,RegisterRawInputDevices,"RegisterRawInputDevices");
   function GetRegisteredRawInputDevices(
      pRawInputDevices : PRAWINPUTDEVICE;
      puiNumDevices : PUINT;
      cbSize : UINT
   ) return UINT;
   pragma import (C,GetRegisteredRawInputDevices,"GetRegisteredRawInputDevices");
   type tagRAWINPUTDEVICELIST is record
      hDevice : HANDLE;
      dwType : DWORD;
   end record;
   subtype RAWINPUTDEVICELIST is tagRAWINPUTDEVICELIST; -- CXType_Elaborated
   type PRAWINPUTDEVICELIST is access tagRAWINPUTDEVICELIST; -- CXType_Pointer - CXType_Elaborated
   function GetRawInputDeviceList(
      pRawInputDeviceList_x : PRAWINPUTDEVICELIST;
      puiNumDevices : PUINT;
      cbSize : UINT
   ) return UINT;
   pragma import (C,GetRawInputDeviceList,"GetRawInputDeviceList");
   function DefRawInputProc(
      paRawInput : access PRAWINPUT;
      nInput : INT;
      cbSizeHeader : UINT
   ) return LRESULT;
   pragma import (C,DefRawInputProc,"DefRawInputProc");
   type tagPOINTER_DEVICE_TYPE is (
      POINTER_DEVICE_TYPE_MAX,
      POINTER_DEVICE_TYPE_INTEGRATED_PEN,
      POINTER_DEVICE_TYPE_EXTERNAL_PEN,
      POINTER_DEVICE_TYPE_TOUCH,
      POINTER_DEVICE_TYPE_TOUCH_PAD
   );
   for tagPOINTER_DEVICE_TYPE use (
      POINTER_DEVICE_TYPE_MAX => -1,
      POINTER_DEVICE_TYPE_INTEGRATED_PEN => 1,
      POINTER_DEVICE_TYPE_EXTERNAL_PEN => 2,
      POINTER_DEVICE_TYPE_TOUCH => 3,
      POINTER_DEVICE_TYPE_TOUCH_PAD => 4
   );
   for tagPOINTER_DEVICE_TYPE'Size use 32;
   subtype POINTER_DEVICE_TYPE is tagPOINTER_DEVICE_TYPE; -- CXType_Elaborated
   type tagPOINTER_DEVICE_INFO is record
      displayOrientation : DWORD;
      device : HANDLE;
      pointerDeviceType : POINTER_DEVICE_TYPE;
      monitor : HMONITOR;
      startingCursorId : ULONG;
      maxActiveContacts : USHORT;
      productString : Void;
   end record;
   subtype POINTER_DEVICE_INFO is tagPOINTER_DEVICE_INFO; -- CXType_Elaborated
   type tagPOINTER_DEVICE_PROPERTY is record
      logicalMin : INT32;
      logicalMax : INT32;
      physicalMin : INT32;
      physicalMax : INT32;
      unit : UINT32;
      unitExponent : UINT32;
      usagePageId : USHORT;
      usageId : USHORT;
   end record;
   subtype POINTER_DEVICE_PROPERTY is tagPOINTER_DEVICE_PROPERTY; -- CXType_Elaborated
   type tagPOINTER_DEVICE_CURSOR_TYPE is (
      POINTER_DEVICE_CURSOR_TYPE_MAX,
      POINTER_DEVICE_CURSOR_TYPE_UNKNOWN,
      POINTER_DEVICE_CURSOR_TYPE_TIP,
      POINTER_DEVICE_CURSOR_TYPE_ERASER
   );
   for tagPOINTER_DEVICE_CURSOR_TYPE use (
      POINTER_DEVICE_CURSOR_TYPE_MAX => -1,
      POINTER_DEVICE_CURSOR_TYPE_UNKNOWN => 0,
      POINTER_DEVICE_CURSOR_TYPE_TIP => 1,
      POINTER_DEVICE_CURSOR_TYPE_ERASER => 2
   );
   for tagPOINTER_DEVICE_CURSOR_TYPE'Size use 32;
   subtype POINTER_DEVICE_CURSOR_TYPE is tagPOINTER_DEVICE_CURSOR_TYPE; -- CXType_Elaborated
   type tagPOINTER_DEVICE_CURSOR_INFO is record
      cursorId : UINT32;
      cursor : POINTER_DEVICE_CURSOR_TYPE;
   end record;
   subtype POINTER_DEVICE_CURSOR_INFO is tagPOINTER_DEVICE_CURSOR_INFO; -- CXType_Elaborated
   function GetPointerDevices(
      deviceCount : access UINT32;
      pointerDevices : access POINTER_DEVICE_INFO
   ) return BOOL;
   pragma import (C,GetPointerDevices,"GetPointerDevices");
   function GetPointerDevice(
      device : HANDLE;
      pointerDevice : access POINTER_DEVICE_INFO
   ) return BOOL;
   pragma import (C,GetPointerDevice,"GetPointerDevice");
   function GetPointerDeviceProperties(
      device : HANDLE;
      propertyCount : access UINT32;
      pointerProperties : access POINTER_DEVICE_PROPERTY
   ) return BOOL;
   pragma import (C,GetPointerDeviceProperties,"GetPointerDeviceProperties");
   function RegisterPointerDeviceNotifications(
      window : HWND;
      notifyRange : BOOL
   ) return BOOL;
   pragma import (C,RegisterPointerDeviceNotifications,"RegisterPointerDeviceNotifications");
   function GetPointerDeviceRects(
      device : HANDLE;
      pointerDeviceRect : access RECT;
      displayRect : access RECT
   ) return BOOL;
   pragma import (C,GetPointerDeviceRects,"GetPointerDeviceRects");
   function GetPointerDeviceCursors(
      device : HANDLE;
      cursorCount : access UINT32;
      deviceCursors : access POINTER_DEVICE_CURSOR_INFO
   ) return BOOL;
   pragma import (C,GetPointerDeviceCursors,"GetPointerDeviceCursors");
   function GetRawPointerDeviceData(
      pointerId : UINT32;
      historyCount : UINT32;
      propertiesCount : UINT32;
      pProperties : access POINTER_DEVICE_PROPERTY;
      pValues : access LONG
   ) return BOOL;
   pragma import (C,GetRawPointerDeviceData,"GetRawPointerDeviceData");
   function ChangeWindowMessageFilter(
      message : UINT;
      dwFlag : DWORD
   ) return BOOL;
   pragma import (C,ChangeWindowMessageFilter,"ChangeWindowMessageFilter");
   type tagCHANGEFILTERSTRUCT is record
      cbSize : DWORD;
      ExtStatus : DWORD;
   end record;
   subtype CHANGEFILTERSTRUCT is tagCHANGEFILTERSTRUCT; -- CXType_Elaborated
   type PCHANGEFILTERSTRUCT is access tagCHANGEFILTERSTRUCT; -- CXType_Pointer - CXType_Elaborated
   function ChangeWindowMessageFilterEx(
      hwnd_x : HWND;
      message : UINT;
      action : DWORD;
      pChangeFilterStruct_x : PCHANGEFILTERSTRUCT
   ) return BOOL;
   pragma import (C,ChangeWindowMessageFilterEx,"ChangeWindowMessageFilterEx");
   type HGESTUREINFO_x is record
      unused : Interfaces.C.Int;
   end record;
   type HGESTUREINFO is access HGESTUREINFO_x; -- CXType_Pointer - CXType_Elaborated
   type tagGESTUREINFO is record
      cbSize : UINT;
      dwFlags : DWORD;
      dwID : DWORD;
      hwndTarget : HWND;
      ptsLocation : POINTS;
      dwInstanceID : DWORD;
      dwSequenceID : DWORD;
      ullArguments : ULONGLONG;
      cbExtraArgs : UINT;
   end record;
   subtype GESTUREINFO is tagGESTUREINFO; -- CXType_Elaborated
   type PGESTUREINFO is access tagGESTUREINFO; -- CXType_Pointer - CXType_Elaborated
   type PCGESTUREINFO is access constant GESTUREINFO; -- CXType_Pointer - CXType_Typedef
   type tagGESTURENOTIFYSTRUCT is record
      cbSize : UINT;
      dwFlags : DWORD;
      hwndTarget : HWND;
      ptsLocation : POINTS;
      dwInstanceID : DWORD;
   end record;
   subtype GESTURENOTIFYSTRUCT is tagGESTURENOTIFYSTRUCT; -- CXType_Elaborated
   type PGESTURENOTIFYSTRUCT is access tagGESTURENOTIFYSTRUCT; -- CXType_Pointer - CXType_Elaborated
   function GetGestureInfo(
      hGestureInfo_x : HGESTUREINFO;
      pGestureInfo_x : PGESTUREINFO
   ) return BOOL;
   pragma import (C,GetGestureInfo,"GetGestureInfo");
   function GetGestureExtraArgs(
      hGestureInfo_x : HGESTUREINFO;
      cbExtraArgs : UINT;
      pExtraArgs : PBYTE
   ) return BOOL;
   pragma import (C,GetGestureExtraArgs,"GetGestureExtraArgs");
   function CloseGestureInfoHandle(
      hGestureInfo_x : HGESTUREINFO
   ) return BOOL;
   pragma import (C,CloseGestureInfoHandle,"CloseGestureInfoHandle");
   type tagGESTURECONFIG is record
      dwID : DWORD;
      dwWant : DWORD;
      dwBlock : DWORD;
   end record;
   subtype GESTURECONFIG is tagGESTURECONFIG; -- CXType_Elaborated
   type PGESTURECONFIG is access tagGESTURECONFIG; -- CXType_Pointer - CXType_Elaborated
   function SetGestureConfig(
      hwnd_x : HWND;
      dwReserved : DWORD;
      cIDs : UINT;
      pGestureConfig_x : PGESTURECONFIG;
      cbSize : UINT
   ) return BOOL;
   pragma import (C,SetGestureConfig,"SetGestureConfig");
   function GetGestureConfig(
      hwnd_x : HWND;
      dwReserved : DWORD;
      dwFlags : DWORD;
      pcIDs : PUINT;
      pGestureConfig_x : PGESTURECONFIG;
      cbSize : UINT
   ) return BOOL;
   pragma import (C,GetGestureConfig,"GetGestureConfig");
   function ShutdownBlockReasonCreate(
      hWnd_x : HWND;
      pwszReason : LPCWSTR
   ) return BOOL;
   pragma import (C,ShutdownBlockReasonCreate,"ShutdownBlockReasonCreate");
   function ShutdownBlockReasonQuery(
      hWnd_x : HWND;
      pwszBuff : LPWSTR;
      pcchBuff : access DWORD
   ) return BOOL;
   pragma import (C,ShutdownBlockReasonQuery,"ShutdownBlockReasonQuery");
   function ShutdownBlockReasonDestroy(
      hWnd_x : HWND
   ) return BOOL;
   pragma import (C,ShutdownBlockReasonDestroy,"ShutdownBlockReasonDestroy");
   type tagINPUT_MESSAGE_DEVICE_TYPE is (
      IMDT_UNAVAILABLE,
      IMDT_KEYBOARD,
      IMDT_MOUSE,
      IMDT_TOUCH,
      IMDT_PEN,
      IMDT_TOUCHPAD
   );
   for tagINPUT_MESSAGE_DEVICE_TYPE use (
      IMDT_UNAVAILABLE => 0,
      IMDT_KEYBOARD => 1,
      IMDT_MOUSE => 2,
      IMDT_TOUCH => 4,
      IMDT_PEN => 8,
      IMDT_TOUCHPAD => 16
   );
   for tagINPUT_MESSAGE_DEVICE_TYPE'Size use 32;
   subtype INPUT_MESSAGE_DEVICE_TYPE is tagINPUT_MESSAGE_DEVICE_TYPE; -- CXType_Elaborated
   type tagINPUT_MESSAGE_ORIGIN_ID is (
      IMO_UNAVAILABLE,
      IMO_HARDWARE,
      IMO_INJECTED,
      IMO_SYSTEM
   );
   for tagINPUT_MESSAGE_ORIGIN_ID use (
      IMO_UNAVAILABLE => 0,
      IMO_HARDWARE => 1,
      IMO_INJECTED => 2,
      IMO_SYSTEM => 4
   );
   for tagINPUT_MESSAGE_ORIGIN_ID'Size use 32;
   subtype INPUT_MESSAGE_ORIGIN_ID is tagINPUT_MESSAGE_ORIGIN_ID; -- CXType_Elaborated
   type tagINPUT_MESSAGE_SOURCE is record
      deviceType : INPUT_MESSAGE_DEVICE_TYPE;
      originId : INPUT_MESSAGE_ORIGIN_ID;
   end record;
   subtype INPUT_MESSAGE_SOURCE is tagINPUT_MESSAGE_SOURCE; -- CXType_Elaborated
   function GetCurrentInputMessageSource(
      inputMessageSource : access INPUT_MESSAGE_SOURCE
   ) return BOOL;
   pragma import (C,GetCurrentInputMessageSource,"GetCurrentInputMessageSource");
   function GetCIMSSM(
      inputMessageSource : access INPUT_MESSAGE_SOURCE
   ) return BOOL;
   pragma import (C,GetCIMSSM,"GetCIMSSM");
   type tagAR_STATE is (
      AR_ENABLED,
      AR_DISABLED,
      AR_SUPPRESSED,
      AR_REMOTESESSION,
      AR_MULTIMON,
      AR_NOSENSOR,
      AR_NOT_SUPPORTED,
      AR_DOCKED,
      AR_LAPTOP
   );
   for tagAR_STATE use (
      AR_ENABLED => 0,
      AR_DISABLED => 1,
      AR_SUPPRESSED => 2,
      AR_REMOTESESSION => 4,
      AR_MULTIMON => 8,
      AR_NOSENSOR => 16,
      AR_NOT_SUPPORTED => 32,
      AR_DOCKED => 64,
      AR_LAPTOP => 128
   );
   for tagAR_STATE'Size use 32;
   subtype AR_STATE is tagAR_STATE; -- CXType_Elaborated
   type PAR_STATE is access tagAR_STATE; -- CXType_Pointer - CXType_Elaborated
   type ORIENTATION_PREFERENCE is (
      ORIENTATION_PREFERENCE_NONE,
      ORIENTATION_PREFERENCE_LANDSCAPE,
      ORIENTATION_PREFERENCE_PORTRAIT,
      ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED,
      ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED
   );
   for ORIENTATION_PREFERENCE use (
      ORIENTATION_PREFERENCE_NONE => 0,
      ORIENTATION_PREFERENCE_LANDSCAPE => 1,
      ORIENTATION_PREFERENCE_PORTRAIT => 2,
      ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED => 4,
      ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED => 8
   );
   for ORIENTATION_PREFERENCE'Size use 32;
   function GetAutoRotationState(
      pState : PAR_STATE
   ) return BOOL;
   pragma import (C,GetAutoRotationState,"GetAutoRotationState");
   function GetDisplayAutoRotationPreferences(
      pOrientation : access ORIENTATION_PREFERENCE
   ) return BOOL;
   pragma import (C,GetDisplayAutoRotationPreferences,"GetDisplayAutoRotationPreferences");
   function GetDisplayAutoRotationPreferencesByProcessId(
      dwProcessId : DWORD;
      pOrientation : access ORIENTATION_PREFERENCE;
      fRotateScreen : access BOOL
   ) return BOOL;
   pragma import (C,GetDisplayAutoRotationPreferencesByProcessId,"GetDisplayAutoRotationPreferencesByProcessId");
   function SetDisplayAutoRotationPreferences(
      orientation : ORIENTATION_PREFERENCE
   ) return BOOL;
   pragma import (C,SetDisplayAutoRotationPreferences,"SetDisplayAutoRotationPreferences");
   function IsImmersiveProcess(
      hProcess : HANDLE
   ) return BOOL;
   pragma import (C,IsImmersiveProcess,"IsImmersiveProcess");
   function SetProcessRestrictionExemption(
      fEnableExemption : BOOL
   ) return BOOL;
   pragma import (C,SetProcessRestrictionExemption,"SetProcessRestrictionExemption");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnls.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\datetimeapi.h>
   function GetDateFormatA(
      Locale : LCID;
      dwFlags : DWORD;
      lpDate : access constant SYSTEMTIME;
      lpFormat : LPCSTR;
      lpDateStr : LPSTR;
      cchDate : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetDateFormatA,"GetDateFormatA");
   function GetDateFormatW(
      Locale : LCID;
      dwFlags : DWORD;
      lpDate : access constant SYSTEMTIME;
      lpFormat : LPCWSTR;
      lpDateStr : LPWSTR;
      cchDate : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetDateFormatW,"GetDateFormatW");
   function GetTimeFormatA(
      Locale : LCID;
      dwFlags : DWORD;
      lpTime : access constant SYSTEMTIME;
      lpFormat : LPCSTR;
      lpTimeStr : LPSTR;
      cchTime : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetTimeFormatA,"GetTimeFormatA");
   function GetTimeFormatW(
      Locale : LCID;
      dwFlags : DWORD;
      lpTime : access constant SYSTEMTIME;
      lpFormat : LPCWSTR;
      lpTimeStr : LPWSTR;
      cchTime : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetTimeFormatW,"GetTimeFormatW");
   function GetTimeFormatEx(
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lpTime : access constant SYSTEMTIME;
      lpFormat : LPCWSTR;
      lpTimeStr : LPWSTR;
      cchTime : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetTimeFormatEx,"GetTimeFormatEx");
   function GetDateFormatEx(
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lpDate : access constant SYSTEMTIME;
      lpFormat : LPCWSTR;
      lpDateStr : LPWSTR;
      cchDate : Interfaces.C.Int;
      lpCalendar : LPCWSTR
   ) return Interfaces.C.Int;
   pragma import (C,GetDateFormatEx,"GetDateFormatEx");
   function GetDurationFormatEx(
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lpDuration : access constant SYSTEMTIME;
      ullDuration : ULONGLONG;
      lpFormat : LPCWSTR;
      lpDurationStr : LPWSTR;
      cchDuration : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetDurationFormatEx,"GetDurationFormatEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnls.h>
   subtype LGRPID is DWORD; -- CXType_Typedef
   subtype LCTYPE is DWORD; -- CXType_Typedef
   subtype CALTYPE is DWORD; -- CXType_Typedef
   subtype CALID is DWORD; -- CXType_Typedef
   type cpinfo_x is record
      MaxCharSize : UINT;
      DefaultChar : Void;
      LeadByte : Void;
   end record;
   subtype CPINFO is cpinfo_x; -- CXType_Elaborated
   type LPCPINFO is access cpinfo_x; -- CXType_Pointer - CXType_Elaborated
   type cpinfoexA_x is record
      MaxCharSize : UINT;
      DefaultChar : Void;
      LeadByte : Void;
      UnicodeDefaultChar : WCHAR;
      CodePage : UINT;
      CodePageName : Void;
   end record;
   subtype CPINFOEXA is cpinfoexA_x; -- CXType_Elaborated
   type LPCPINFOEXA is access cpinfoexA_x; -- CXType_Pointer - CXType_Elaborated
   type cpinfoexW_x is record
      MaxCharSize : UINT;
      DefaultChar : Void;
      LeadByte : Void;
      UnicodeDefaultChar : WCHAR;
      CodePage : UINT;
      CodePageName : Void;
   end record;
   subtype CPINFOEXW is cpinfoexW_x; -- CXType_Elaborated
   type LPCPINFOEXW is access cpinfoexW_x; -- CXType_Pointer - CXType_Elaborated
   subtype CPINFOEX is CPINFOEXA; -- CXType_Typedef
   subtype LPCPINFOEX is LPCPINFOEXA; -- CXType_Typedef
   type numberfmtA_x is record
      NumDigits : UINT;
      LeadingZero : UINT;
      Grouping : UINT;
      lpDecimalSep : LPSTR;
      lpThousandSep : LPSTR;
      NegativeOrder : UINT;
   end record;
   subtype NUMBERFMTA is numberfmtA_x; -- CXType_Elaborated
   type LPNUMBERFMTA is access numberfmtA_x; -- CXType_Pointer - CXType_Elaborated
   type numberfmtW_x is record
      NumDigits : UINT;
      LeadingZero : UINT;
      Grouping : UINT;
      lpDecimalSep : LPWSTR;
      lpThousandSep : LPWSTR;
      NegativeOrder : UINT;
   end record;
   subtype NUMBERFMTW is numberfmtW_x; -- CXType_Elaborated
   type LPNUMBERFMTW is access numberfmtW_x; -- CXType_Pointer - CXType_Elaborated
   subtype NUMBERFMT is NUMBERFMTA; -- CXType_Typedef
   subtype LPNUMBERFMT is LPNUMBERFMTA; -- CXType_Typedef
   type currencyfmtA_x is record
      NumDigits : UINT;
      LeadingZero : UINT;
      Grouping : UINT;
      lpDecimalSep : LPSTR;
      lpThousandSep : LPSTR;
      NegativeOrder : UINT;
      PositiveOrder : UINT;
      lpCurrencySymbol : LPSTR;
   end record;
   subtype CURRENCYFMTA is currencyfmtA_x; -- CXType_Elaborated
   type LPCURRENCYFMTA is access currencyfmtA_x; -- CXType_Pointer - CXType_Elaborated
   type currencyfmtW_x is record
      NumDigits : UINT;
      LeadingZero : UINT;
      Grouping : UINT;
      lpDecimalSep : LPWSTR;
      lpThousandSep : LPWSTR;
      NegativeOrder : UINT;
      PositiveOrder : UINT;
      lpCurrencySymbol : LPWSTR;
   end record;
   subtype CURRENCYFMTW is currencyfmtW_x; -- CXType_Elaborated
   type LPCURRENCYFMTW is access currencyfmtW_x; -- CXType_Pointer - CXType_Elaborated
   subtype CURRENCYFMT is CURRENCYFMTA; -- CXType_Typedef
   subtype LPCURRENCYFMT is LPCURRENCYFMTA; -- CXType_Typedef
   type SYSNLS_FUNCTION is (
      COMPARE_STRING
   );
   for SYSNLS_FUNCTION use (
      COMPARE_STRING => 1
   );
   for SYSNLS_FUNCTION'Size use 32;
   subtype NLS_FUNCTION is DWORD; -- CXType_Typedef
   type nlsversioninfo_x is record
      dwNLSVersionInfoSize : DWORD;
      dwNLSVersion : DWORD;
      dwDefinedVersion : DWORD;
      dwEffectiveId : DWORD;
      guidCustomVersion : GUID;
   end record;
   subtype NLSVERSIONINFO is nlsversioninfo_x; -- CXType_Elaborated
   type LPNLSVERSIONINFO is access nlsversioninfo_x; -- CXType_Pointer - CXType_Elaborated
   type nlsversioninfoex_x is record
      dwNLSVersionInfoSize : DWORD;
      dwNLSVersion : DWORD;
      dwDefinedVersion : DWORD;
      dwEffectiveId : DWORD;
      guidCustomVersion : GUID;
   end record;
   subtype NLSVERSIONINFOEX is nlsversioninfoex_x; -- CXType_Elaborated
   type LPNLSVERSIONINFOEX is access nlsversioninfoex_x; -- CXType_Pointer - CXType_Elaborated
   subtype GEOTYPE is DWORD; -- CXType_Typedef
   subtype GEOCLASS is DWORD; -- CXType_Typedef
   subtype GEOID is LONG; -- CXType_Typedef
   type SYSGEOTYPE is (
      GEO_NATION,
      GEO_LATITUDE,
      GEO_LONGITUDE,
      GEO_ISO2,
      GEO_ISO3,
      GEO_RFC1766,
      GEO_LCID,
      GEO_FRIENDLYNAME,
      GEO_OFFICIALNAME,
      GEO_TIMEZONES,
      GEO_OFFICIALLANGUAGES,
      GEO_ISO_UN_NUMBER,
      GEO_PARENT,
      GEO_DIALINGCODE,
      GEO_CURRENCYCODE,
      GEO_CURRENCYSYMBOL,
      GEO_NAME,
      GEO_ID
   );
   for SYSGEOTYPE use (
      GEO_NATION => 1,
      GEO_LATITUDE => 2,
      GEO_LONGITUDE => 3,
      GEO_ISO2 => 4,
      GEO_ISO3 => 5,
      GEO_RFC1766 => 6,
      GEO_LCID => 7,
      GEO_FRIENDLYNAME => 8,
      GEO_OFFICIALNAME => 9,
      GEO_TIMEZONES => 10,
      GEO_OFFICIALLANGUAGES => 11,
      GEO_ISO_UN_NUMBER => 12,
      GEO_PARENT => 13,
      GEO_DIALINGCODE => 14,
      GEO_CURRENCYCODE => 15,
      GEO_CURRENCYSYMBOL => 16,
      GEO_NAME => 17,
      GEO_ID => 18
   );
   for SYSGEOTYPE'Size use 32;
   type SYSGEOCLASS is (
      GEOCLASS_ALL,
      GEOCLASS_REGION,
      GEOCLASS_NATION
   );
   for SYSGEOCLASS use (
      GEOCLASS_ALL => 0,
      GEOCLASS_REGION => 14,
      GEOCLASS_NATION => 16
   );
   for SYSGEOCLASS'Size use 32;
   type NORM_FORM_x is (
      NormalizationOther,
      NormalizationC,
      NormalizationD,
      NormalizationKC,
      NormalizationKD
   );
   for NORM_FORM_x use (
      NormalizationOther => 0,
      NormalizationC => 1,
      NormalizationD => 2,
      NormalizationKC => 5,
      NormalizationKD => 6
   );
   for NORM_FORM_x'Size use 32;
   subtype NORM_FORM is NORM_FORM_x; -- CXType_Elaborated
   subtype LANGUAGEGROUP_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR)
   subtype LANGGROUPLOCALE_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LGRPID, LCID, LPSTR, LONG_PTR)
   subtype UILANGUAGE_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR, LONG_PTR)
   subtype CODEPAGE_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR)
   subtype DATEFMT_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR)
   subtype DATEFMT_ENUMPROCEXA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR, CALID)
   subtype TIMEFMT_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR)
   subtype CALINFO_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR)
   subtype CALINFO_ENUMPROCEXA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR, CALID)
   subtype LOCALE_ENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPSTR)
   subtype LOCALE_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR)
   subtype LANGUAGEGROUP_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR)
   subtype LANGGROUPLOCALE_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LGRPID, LCID, LPWSTR, LONG_PTR)
   subtype UILANGUAGE_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, LONG_PTR)
   subtype CODEPAGE_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR)
   subtype DATEFMT_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR)
   subtype DATEFMT_ENUMPROCEXW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, CALID)
   subtype TIMEFMT_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR)
   subtype CALINFO_ENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR)
   subtype CALINFO_ENUMPROCEXW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, CALID)
   subtype GEO_ENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (GEOID)
   subtype GEO_ENUMNAMEPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PWSTR, LPARAM)
   type FILEMUIINFO_x is record
      dwSize : DWORD;
      dwVersion : DWORD;
      dwFileType : DWORD;
      pChecksum : Void;
      pServiceChecksum : Void;
      dwLanguageNameOffset : DWORD;
      dwTypeIDMainSize : DWORD;
      dwTypeIDMainOffset : DWORD;
      dwTypeNameMainOffset : DWORD;
      dwTypeIDMUISize : DWORD;
      dwTypeIDMUIOffset : DWORD;
      dwTypeNameMUIOffset : DWORD;
      abBuffer : Void;
   end record;
   subtype FILEMUIINFO is FILEMUIINFO_x; -- CXType_Elaborated
   type PFILEMUIINFO is access FILEMUIINFO_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\stringapiset.h>
   function CompareStringEx(
      lpLocaleName : LPCWSTR;
      dwCmpFlags : DWORD;
      lpString1 : LPCWCH;
      cchCount1 : Interfaces.C.Int;
      lpString2 : LPCWCH;
      cchCount2 : Interfaces.C.Int;
      lpVersionInformation : LPNLSVERSIONINFO;
      lpReserved : LPVOID;
      lParam_x : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,CompareStringEx,"CompareStringEx");
   function CompareStringOrdinal(
      lpString1 : LPCWCH;
      cchCount1 : Interfaces.C.Int;
      lpString2 : LPCWCH;
      cchCount2 : Interfaces.C.Int;
      bIgnoreCase : BOOL
   ) return Interfaces.C.Int;
   pragma import (C,CompareStringOrdinal,"CompareStringOrdinal");
   function CompareStringW(
      Locale : LCID;
      dwCmpFlags : DWORD;
      lpString1 : PCNZWCH;
      cchCount1 : Interfaces.C.Int;
      lpString2 : PCNZWCH;
      cchCount2 : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,CompareStringW,"CompareStringW");
   function FoldStringW(
      dwMapFlags : DWORD;
      lpSrcStr : LPCWCH;
      cchSrc : Interfaces.C.Int;
      lpDestStr : LPWSTR;
      cchDest : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,FoldStringW,"FoldStringW");
   function GetStringTypeExW(
      Locale : LCID;
      dwInfoType : DWORD;
      lpSrcStr : LPCWCH;
      cchSrc : Interfaces.C.Int;
      lpCharType : LPWORD
   ) return BOOL;
   pragma import (C,GetStringTypeExW,"GetStringTypeExW");
   function GetStringTypeW(
      dwInfoType : DWORD;
      lpSrcStr : LPCWCH;
      cchSrc : Interfaces.C.Int;
      lpCharType : LPWORD
   ) return BOOL;
   pragma import (C,GetStringTypeW,"GetStringTypeW");
   function MultiByteToWideChar(
      CodePage : UINT;
      dwFlags : DWORD;
      lpMultiByteStr : LPCCH;
      cbMultiByte : Interfaces.C.Int;
      lpWideCharStr : LPWSTR;
      cchWideChar : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,MultiByteToWideChar,"MultiByteToWideChar");
   function WideCharToMultiByte(
      CodePage : UINT;
      dwFlags : DWORD;
      lpWideCharStr : LPCWCH;
      cchWideChar : Interfaces.C.Int;
      lpMultiByteStr : LPSTR;
      cbMultiByte : Interfaces.C.Int;
      lpDefaultChar : LPCCH;
      lpUsedDefaultChar : LPBOOL
   ) return Interfaces.C.Int;
   pragma import (C,WideCharToMultiByte,"WideCharToMultiByte");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnls.h>
   function IsValidCodePage(
      CodePage : UINT
   ) return BOOL;
   pragma import (C,IsValidCodePage,"IsValidCodePage");
   function GetACP return UINT;
   pragma import (C,GetACP,"GetACP");
   function GetOEMCP return UINT;
   pragma import (C,GetOEMCP,"GetOEMCP");
   function GetCPInfo(
      CodePage : UINT;
      lpCPInfo_x : LPCPINFO
   ) return BOOL;
   pragma import (C,GetCPInfo,"GetCPInfo");
   function GetCPInfoExA(
      CodePage : UINT;
      dwFlags : DWORD;
      lpCPInfoEx_x : LPCPINFOEXA
   ) return BOOL;
   pragma import (C,GetCPInfoExA,"GetCPInfoExA");
   function GetCPInfoExW(
      CodePage : UINT;
      dwFlags : DWORD;
      lpCPInfoEx_x : LPCPINFOEXW
   ) return BOOL;
   pragma import (C,GetCPInfoExW,"GetCPInfoExW");
   function CompareStringA(
      Locale : LCID;
      dwCmpFlags : DWORD;
      lpString1 : PCNZCH;
      cchCount1 : Interfaces.C.Int;
      lpString2 : PCNZCH;
      cchCount2 : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,CompareStringA,"CompareStringA");
   function FindNLSString(
      Locale : LCID;
      dwFindNLSStringFlags : DWORD;
      lpStringSource : LPCWSTR;
      cchSource : Interfaces.C.Int;
      lpStringValue : LPCWSTR;
      cchValue : Interfaces.C.Int;
      pcchFound : LPINT
   ) return Interfaces.C.Int;
   pragma import (C,FindNLSString,"FindNLSString");
   function LCMapStringW(
      Locale : LCID;
      dwMapFlags : DWORD;
      lpSrcStr : LPCWSTR;
      cchSrc : Interfaces.C.Int;
      lpDestStr : LPWSTR;
      cchDest : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,LCMapStringW,"LCMapStringW");
   function LCMapStringA(
      Locale : LCID;
      dwMapFlags : DWORD;
      lpSrcStr : LPCSTR;
      cchSrc : Interfaces.C.Int;
      lpDestStr : LPSTR;
      cchDest : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,LCMapStringA,"LCMapStringA");
   function GetLocaleInfoW(
      Locale : LCID;
      LCType_x : LCTYPE;
      lpLCData : LPWSTR;
      cchData : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetLocaleInfoW,"GetLocaleInfoW");
   function GetLocaleInfoA(
      Locale : LCID;
      LCType_x : LCTYPE;
      lpLCData : LPSTR;
      cchData : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetLocaleInfoA,"GetLocaleInfoA");
   function SetLocaleInfoA(
      Locale : LCID;
      LCType_x : LCTYPE;
      lpLCData : LPCSTR
   ) return BOOL;
   pragma import (C,SetLocaleInfoA,"SetLocaleInfoA");
   function SetLocaleInfoW(
      Locale : LCID;
      LCType_x : LCTYPE;
      lpLCData : LPCWSTR
   ) return BOOL;
   pragma import (C,SetLocaleInfoW,"SetLocaleInfoW");
   function GetCalendarInfoA(
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE;
      lpCalData : LPSTR;
      cchData : Interfaces.C.Int;
      lpValue : LPDWORD
   ) return Interfaces.C.Int;
   pragma import (C,GetCalendarInfoA,"GetCalendarInfoA");
   function GetCalendarInfoW(
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE;
      lpCalData : LPWSTR;
      cchData : Interfaces.C.Int;
      lpValue : LPDWORD
   ) return Interfaces.C.Int;
   pragma import (C,GetCalendarInfoW,"GetCalendarInfoW");
   function SetCalendarInfoA(
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE;
      lpCalData : LPCSTR
   ) return BOOL;
   pragma import (C,SetCalendarInfoA,"SetCalendarInfoA");
   function SetCalendarInfoW(
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE;
      lpCalData : LPCWSTR
   ) return BOOL;
   pragma import (C,SetCalendarInfoW,"SetCalendarInfoW");
   function LoadStringByReference(
      Flags : DWORD;
      Language : PCWSTR;
      SourceString : PCWSTR;
      Buffer : PWSTR;
      cchBuffer : ULONG;
      Directory : PCWSTR;
      pcchBufferOut : PULONG
   ) return BOOL;
   pragma import (C,LoadStringByReference,"LoadStringByReference");
   function IsDBCSLeadByte(
      TestChar : BYTE
   ) return BOOL;
   pragma import (C,IsDBCSLeadByte,"IsDBCSLeadByte");
   function IsDBCSLeadByteEx(
      CodePage : UINT;
      TestChar : BYTE
   ) return BOOL;
   pragma import (C,IsDBCSLeadByteEx,"IsDBCSLeadByteEx");
   function LCIDToLocaleName(
      Locale : LCID;
      lpName : LPWSTR;
      cchName : Interfaces.C.Int;
      dwFlags : DWORD
   ) return Interfaces.C.Int;
   pragma import (C,LCIDToLocaleName,"LCIDToLocaleName");
   function LocaleNameToLCID(
      lpName : LPCWSTR;
      dwFlags : DWORD
   ) return LCID;
   pragma import (C,LocaleNameToLCID,"LocaleNameToLCID");
   function GetDurationFormat(
      Locale : LCID;
      dwFlags : DWORD;
      lpDuration : access constant SYSTEMTIME;
      ullDuration : ULONGLONG;
      lpFormat : LPCWSTR;
      lpDurationStr : LPWSTR;
      cchDuration : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetDurationFormat,"GetDurationFormat");
   function GetNumberFormatA(
      Locale : LCID;
      dwFlags : DWORD;
      lpValue : LPCSTR;
      lpFormat : access constant NUMBERFMTA;
      lpNumberStr : LPSTR;
      cchNumber : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetNumberFormatA,"GetNumberFormatA");
   function GetNumberFormatW(
      Locale : LCID;
      dwFlags : DWORD;
      lpValue : LPCWSTR;
      lpFormat : access constant NUMBERFMTW;
      lpNumberStr : LPWSTR;
      cchNumber : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetNumberFormatW,"GetNumberFormatW");
   function GetCurrencyFormatA(
      Locale : LCID;
      dwFlags : DWORD;
      lpValue : LPCSTR;
      lpFormat : access constant CURRENCYFMTA;
      lpCurrencyStr : LPSTR;
      cchCurrency : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetCurrencyFormatA,"GetCurrencyFormatA");
   function GetCurrencyFormatW(
      Locale : LCID;
      dwFlags : DWORD;
      lpValue : LPCWSTR;
      lpFormat : access constant CURRENCYFMTW;
      lpCurrencyStr : LPWSTR;
      cchCurrency : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetCurrencyFormatW,"GetCurrencyFormatW");
   function EnumCalendarInfoA(
      lpCalInfoEnumProc : CALINFO_ENUMPROCA;
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE
   ) return BOOL;
   pragma import (C,EnumCalendarInfoA,"EnumCalendarInfoA");
   function EnumCalendarInfoW(
      lpCalInfoEnumProc : CALINFO_ENUMPROCW;
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE
   ) return BOOL;
   pragma import (C,EnumCalendarInfoW,"EnumCalendarInfoW");
   function EnumCalendarInfoExA(
      lpCalInfoEnumProcEx : CALINFO_ENUMPROCEXA;
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE
   ) return BOOL;
   pragma import (C,EnumCalendarInfoExA,"EnumCalendarInfoExA");
   function EnumCalendarInfoExW(
      lpCalInfoEnumProcEx : CALINFO_ENUMPROCEXW;
      Locale : LCID;
      Calendar : CALID;
      CalType_x : CALTYPE
   ) return BOOL;
   pragma import (C,EnumCalendarInfoExW,"EnumCalendarInfoExW");
   function EnumTimeFormatsA(
      lpTimeFmtEnumProc : TIMEFMT_ENUMPROCA;
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumTimeFormatsA,"EnumTimeFormatsA");
   function EnumTimeFormatsW(
      lpTimeFmtEnumProc : TIMEFMT_ENUMPROCW;
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumTimeFormatsW,"EnumTimeFormatsW");
   function EnumDateFormatsA(
      lpDateFmtEnumProc : DATEFMT_ENUMPROCA;
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDateFormatsA,"EnumDateFormatsA");
   function EnumDateFormatsW(
      lpDateFmtEnumProc : DATEFMT_ENUMPROCW;
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDateFormatsW,"EnumDateFormatsW");
   function EnumDateFormatsExA(
      lpDateFmtEnumProcEx : DATEFMT_ENUMPROCEXA;
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDateFormatsExA,"EnumDateFormatsExA");
   function EnumDateFormatsExW(
      lpDateFmtEnumProcEx : DATEFMT_ENUMPROCEXW;
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumDateFormatsExW,"EnumDateFormatsExW");
   function IsValidLanguageGroup(
      LanguageGroup : LGRPID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,IsValidLanguageGroup,"IsValidLanguageGroup");
   function GetNLSVersion(
      function_x : NLS_FUNCTION;
      Locale : LCID;
      lpVersionInformation : LPNLSVERSIONINFO
   ) return BOOL;
   pragma import (C,GetNLSVersion,"GetNLSVersion");
   function IsValidLocale(
      Locale : LCID;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,IsValidLocale,"IsValidLocale");
   function GetGeoInfoA(
      Location : GEOID;
      GeoType_x : GEOTYPE;
      lpGeoData : LPSTR;
      cchData : Interfaces.C.Int;
      LangId_x : LANGID
   ) return Interfaces.C.Int;
   pragma import (C,GetGeoInfoA,"GetGeoInfoA");
   function GetGeoInfoW(
      Location : GEOID;
      GeoType_x : GEOTYPE;
      lpGeoData : LPWSTR;
      cchData : Interfaces.C.Int;
      LangId_x : LANGID
   ) return Interfaces.C.Int;
   pragma import (C,GetGeoInfoW,"GetGeoInfoW");
   function GetGeoInfoEx(
      location : PWSTR;
      geoType_x : GEOTYPE;
      geoData : PWSTR;
      geoDataCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetGeoInfoEx,"GetGeoInfoEx");
   function EnumSystemGeoID(
      GeoClass_x : GEOCLASS;
      ParentGeoId : GEOID;
      lpGeoEnumProc : GEO_ENUMPROC
   ) return BOOL;
   pragma import (C,EnumSystemGeoID,"EnumSystemGeoID");
   function EnumSystemGeoNames(
      geoClass_x : GEOCLASS;
      geoEnumProc : GEO_ENUMNAMEPROC;
      data : LPARAM
   ) return BOOL;
   pragma import (C,EnumSystemGeoNames,"EnumSystemGeoNames");
   function GetUserGeoID(
      GeoClass_x : GEOCLASS
   ) return GEOID;
   pragma import (C,GetUserGeoID,"GetUserGeoID");
   function GetUserDefaultGeoName(
      geoName : LPWSTR;
      geoNameCount : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetUserDefaultGeoName,"GetUserDefaultGeoName");
   function SetUserGeoID(
      GeoId_x : GEOID
   ) return BOOL;
   pragma import (C,SetUserGeoID,"SetUserGeoID");
   function SetUserGeoName(
      geoName : PWSTR
   ) return BOOL;
   pragma import (C,SetUserGeoName,"SetUserGeoName");
   function ConvertDefaultLocale(
      Locale : LCID
   ) return LCID;
   pragma import (C,ConvertDefaultLocale,"ConvertDefaultLocale");
   function GetThreadLocale return LCID;
   pragma import (C,GetThreadLocale,"GetThreadLocale");
   function SetThreadLocale(
      Locale : LCID
   ) return BOOL;
   pragma import (C,SetThreadLocale,"SetThreadLocale");
   function GetSystemDefaultUILanguage return LANGID;
   pragma import (C,GetSystemDefaultUILanguage,"GetSystemDefaultUILanguage");
   function GetUserDefaultUILanguage return LANGID;
   pragma import (C,GetUserDefaultUILanguage,"GetUserDefaultUILanguage");
   function GetUserDefaultLangID return LANGID;
   pragma import (C,GetUserDefaultLangID,"GetUserDefaultLangID");
   function GetSystemDefaultLangID return LANGID;
   pragma import (C,GetSystemDefaultLangID,"GetSystemDefaultLangID");
   function GetSystemDefaultLCID return LCID;
   pragma import (C,GetSystemDefaultLCID,"GetSystemDefaultLCID");
   function GetUserDefaultLCID return LCID;
   pragma import (C,GetUserDefaultLCID,"GetUserDefaultLCID");
   function SetThreadUILanguage(
      LangId_x : LANGID
   ) return LANGID;
   pragma import (C,SetThreadUILanguage,"SetThreadUILanguage");
   function GetThreadUILanguage return LANGID;
   pragma import (C,GetThreadUILanguage,"GetThreadUILanguage");
   function GetProcessPreferredUILanguages(
      dwFlags : DWORD;
      pulNumLanguages : PULONG;
      pwszLanguagesBuffer : PZZWSTR;
      pcchLanguagesBuffer : PULONG
   ) return BOOL;
   pragma import (C,GetProcessPreferredUILanguages,"GetProcessPreferredUILanguages");
   function SetProcessPreferredUILanguages(
      dwFlags : DWORD;
      pwszLanguagesBuffer : PCZZWSTR;
      pulNumLanguages : PULONG
   ) return BOOL;
   pragma import (C,SetProcessPreferredUILanguages,"SetProcessPreferredUILanguages");
   function GetUserPreferredUILanguages(
      dwFlags : DWORD;
      pulNumLanguages : PULONG;
      pwszLanguagesBuffer : PZZWSTR;
      pcchLanguagesBuffer : PULONG
   ) return BOOL;
   pragma import (C,GetUserPreferredUILanguages,"GetUserPreferredUILanguages");
   function GetSystemPreferredUILanguages(
      dwFlags : DWORD;
      pulNumLanguages : PULONG;
      pwszLanguagesBuffer : PZZWSTR;
      pcchLanguagesBuffer : PULONG
   ) return BOOL;
   pragma import (C,GetSystemPreferredUILanguages,"GetSystemPreferredUILanguages");
   function GetThreadPreferredUILanguages(
      dwFlags : DWORD;
      pulNumLanguages : PULONG;
      pwszLanguagesBuffer : PZZWSTR;
      pcchLanguagesBuffer : PULONG
   ) return BOOL;
   pragma import (C,GetThreadPreferredUILanguages,"GetThreadPreferredUILanguages");
   function SetThreadPreferredUILanguages(
      dwFlags : DWORD;
      pwszLanguagesBuffer : PCZZWSTR;
      pulNumLanguages : PULONG
   ) return BOOL;
   pragma import (C,SetThreadPreferredUILanguages,"SetThreadPreferredUILanguages");
   function GetFileMUIInfo(
      dwFlags : DWORD;
      pcwszFilePath : PCWSTR;
      pFileMUIInfo_x : PFILEMUIINFO;
      pcbFileMUIInfo : access DWORD
   ) return BOOL;
   pragma import (C,GetFileMUIInfo,"GetFileMUIInfo");
   function GetFileMUIPath(
      dwFlags : DWORD;
      pcwszFilePath : PCWSTR;
      pwszLanguage : PWSTR;
      pcchLanguage : PULONG;
      pwszFileMUIPath : PWSTR;
      pcchFileMUIPath : PULONG;
      pululEnumerator : PULONGLONG
   ) return BOOL;
   pragma import (C,GetFileMUIPath,"GetFileMUIPath");
   function GetUILanguageInfo(
      dwFlags : DWORD;
      pwmszLanguage : PCZZWSTR;
      pwszFallbackLanguages : PZZWSTR;
      pcchFallbackLanguages : PDWORD;
      pAttributes : PDWORD
   ) return BOOL;
   pragma import (C,GetUILanguageInfo,"GetUILanguageInfo");
   function NotifyUILanguageChange(
      dwFlags : DWORD;
      pcwstrNewLanguage : PCWSTR;
      pcwstrPreviousLanguage : PCWSTR;
      dwReserved : DWORD;
      pdwStatusRtrn : PDWORD
   ) return BOOL;
   pragma import (C,NotifyUILanguageChange,"NotifyUILanguageChange");
   function GetStringTypeExA(
      Locale : LCID;
      dwInfoType : DWORD;
      lpSrcStr : LPCSTR;
      cchSrc : Interfaces.C.Int;
      lpCharType : LPWORD
   ) return BOOL;
   pragma import (C,GetStringTypeExA,"GetStringTypeExA");
   function GetStringTypeA(
      Locale : LCID;
      dwInfoType : DWORD;
      lpSrcStr : LPCSTR;
      cchSrc : Interfaces.C.Int;
      lpCharType : LPWORD
   ) return BOOL;
   pragma import (C,GetStringTypeA,"GetStringTypeA");
   function FoldStringA(
      dwMapFlags : DWORD;
      lpSrcStr : LPCSTR;
      cchSrc : Interfaces.C.Int;
      lpDestStr : LPSTR;
      cchDest : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,FoldStringA,"FoldStringA");
   function EnumSystemLocalesA(
      lpLocaleEnumProc : LOCALE_ENUMPROCA;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumSystemLocalesA,"EnumSystemLocalesA");
   function EnumSystemLocalesW(
      lpLocaleEnumProc : LOCALE_ENUMPROCW;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumSystemLocalesW,"EnumSystemLocalesW");
   function EnumSystemLanguageGroupsA(
      lpLanguageGroupEnumProc : LANGUAGEGROUP_ENUMPROCA;
      dwFlags : DWORD;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumSystemLanguageGroupsA,"EnumSystemLanguageGroupsA");
   function EnumSystemLanguageGroupsW(
      lpLanguageGroupEnumProc : LANGUAGEGROUP_ENUMPROCW;
      dwFlags : DWORD;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumSystemLanguageGroupsW,"EnumSystemLanguageGroupsW");
   function EnumLanguageGroupLocalesA(
      lpLangGroupLocaleEnumProc : LANGGROUPLOCALE_ENUMPROCA;
      LanguageGroup : LGRPID;
      dwFlags : DWORD;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumLanguageGroupLocalesA,"EnumLanguageGroupLocalesA");
   function EnumLanguageGroupLocalesW(
      lpLangGroupLocaleEnumProc : LANGGROUPLOCALE_ENUMPROCW;
      LanguageGroup : LGRPID;
      dwFlags : DWORD;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumLanguageGroupLocalesW,"EnumLanguageGroupLocalesW");
   function EnumUILanguagesA(
      lpUILanguageEnumProc : UILANGUAGE_ENUMPROCA;
      dwFlags : DWORD;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumUILanguagesA,"EnumUILanguagesA");
   function EnumUILanguagesW(
      lpUILanguageEnumProc : UILANGUAGE_ENUMPROCW;
      dwFlags : DWORD;
      lParam_x : LONG_PTR
   ) return BOOL;
   pragma import (C,EnumUILanguagesW,"EnumUILanguagesW");
   function EnumSystemCodePagesA(
      lpCodePageEnumProc : CODEPAGE_ENUMPROCA;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumSystemCodePagesA,"EnumSystemCodePagesA");
   function EnumSystemCodePagesW(
      lpCodePageEnumProc : CODEPAGE_ENUMPROCW;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,EnumSystemCodePagesW,"EnumSystemCodePagesW");
   function NormalizeString(
      NormForm : NORM_FORM;
      lpSrcString : LPCWSTR;
      cwSrcLength : Interfaces.C.Int;
      lpDstString : LPWSTR;
      cwDstLength : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,NormalizeString,"NormalizeString");
   function IsNormalizedString(
      NormForm : NORM_FORM;
      lpString : LPCWSTR;
      cwLength : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,IsNormalizedString,"IsNormalizedString");
   function IdnToAscii(
      dwFlags : DWORD;
      lpUnicodeCharStr : LPCWSTR;
      cchUnicodeChar : Interfaces.C.Int;
      lpASCIICharStr : LPWSTR;
      cchASCIIChar : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,IdnToAscii,"IdnToAscii");
   function IdnToNameprepUnicode(
      dwFlags : DWORD;
      lpUnicodeCharStr : LPCWSTR;
      cchUnicodeChar : Interfaces.C.Int;
      lpNameprepCharStr : LPWSTR;
      cchNameprepChar : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,IdnToNameprepUnicode,"IdnToNameprepUnicode");
   function IdnToUnicode(
      dwFlags : DWORD;
      lpASCIICharStr : LPCWSTR;
      cchASCIIChar : Interfaces.C.Int;
      lpUnicodeCharStr : LPWSTR;
      cchUnicodeChar : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,IdnToUnicode,"IdnToUnicode");
   function VerifyScripts(
      dwFlags : DWORD;
      lpLocaleScripts : LPCWSTR;
      cchLocaleScripts : Interfaces.C.Int;
      lpTestScripts : LPCWSTR;
      cchTestScripts : Interfaces.C.Int
   ) return BOOL;
   pragma import (C,VerifyScripts,"VerifyScripts");
   function GetStringScripts(
      dwFlags : DWORD;
      lpString : LPCWSTR;
      cchString : Interfaces.C.Int;
      lpScripts : LPWSTR;
      cchScripts : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetStringScripts,"GetStringScripts");
   function GetLocaleInfoEx(
      lpLocaleName : LPCWSTR;
      LCType_x : LCTYPE;
      lpLCData : LPWSTR;
      cchData : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetLocaleInfoEx,"GetLocaleInfoEx");
   function GetCalendarInfoEx(
      lpLocaleName : LPCWSTR;
      Calendar : CALID;
      lpReserved : LPCWSTR;
      CalType_x : CALTYPE;
      lpCalData : LPWSTR;
      cchData : Interfaces.C.Int;
      lpValue : LPDWORD
   ) return Interfaces.C.Int;
   pragma import (C,GetCalendarInfoEx,"GetCalendarInfoEx");
   function GetNumberFormatEx(
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lpValue : LPCWSTR;
      lpFormat : access constant NUMBERFMTW;
      lpNumberStr : LPWSTR;
      cchNumber : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetNumberFormatEx,"GetNumberFormatEx");
   function GetCurrencyFormatEx(
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lpValue : LPCWSTR;
      lpFormat : access constant CURRENCYFMTW;
      lpCurrencyStr : LPWSTR;
      cchCurrency : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetCurrencyFormatEx,"GetCurrencyFormatEx");
   function GetUserDefaultLocaleName(
      lpLocaleName : LPWSTR;
      cchLocaleName : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetUserDefaultLocaleName,"GetUserDefaultLocaleName");
   function GetSystemDefaultLocaleName(
      lpLocaleName : LPWSTR;
      cchLocaleName : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,GetSystemDefaultLocaleName,"GetSystemDefaultLocaleName");
   function IsNLSDefinedString(
      function_x : NLS_FUNCTION;
      dwFlags : DWORD;
      lpVersionInformation : LPNLSVERSIONINFO;
      lpString : LPCWSTR;
      cchStr : INT
   ) return BOOL;
   pragma import (C,IsNLSDefinedString,"IsNLSDefinedString");
   function GetNLSVersionEx(
      function_x : NLS_FUNCTION;
      lpLocaleName : LPCWSTR;
      lpVersionInformation : LPNLSVERSIONINFOEX
   ) return BOOL;
   pragma import (C,GetNLSVersionEx,"GetNLSVersionEx");
   function IsValidNLSVersion(
      function_x : NLS_FUNCTION;
      lpLocaleName : LPCWSTR;
      lpVersionInformation : LPNLSVERSIONINFOEX
   ) return DWORD;
   pragma import (C,IsValidNLSVersion,"IsValidNLSVersion");
   function FindNLSStringEx(
      lpLocaleName : LPCWSTR;
      dwFindNLSStringFlags : DWORD;
      lpStringSource : LPCWSTR;
      cchSource : Interfaces.C.Int;
      lpStringValue : LPCWSTR;
      cchValue : Interfaces.C.Int;
      pcchFound : LPINT;
      lpVersionInformation : LPNLSVERSIONINFO;
      lpReserved : LPVOID;
      sortHandle : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,FindNLSStringEx,"FindNLSStringEx");
   function LCMapStringEx(
      lpLocaleName : LPCWSTR;
      dwMapFlags : DWORD;
      lpSrcStr : LPCWSTR;
      cchSrc : Interfaces.C.Int;
      lpDestStr : LPWSTR;
      cchDest : Interfaces.C.Int;
      lpVersionInformation : LPNLSVERSIONINFO;
      lpReserved : LPVOID;
      sortHandle : LPARAM
   ) return Interfaces.C.Int;
   pragma import (C,LCMapStringEx,"LCMapStringEx");
   function IsValidLocaleName(
      lpLocaleName : LPCWSTR
   ) return BOOL;
   pragma import (C,IsValidLocaleName,"IsValidLocaleName");
   subtype CALINFO_ENUMPROCEXEX is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, CALID, LPWSTR, LPARAM)
   function EnumCalendarInfoExEx(
      pCalInfoEnumProcExEx : CALINFO_ENUMPROCEXEX;
      lpLocaleName : LPCWSTR;
      Calendar : CALID;
      lpReserved : LPCWSTR;
      CalType_x : CALTYPE;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumCalendarInfoExEx,"EnumCalendarInfoExEx");
   subtype DATEFMT_ENUMPROCEXEX is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, CALID, LPARAM)
   function EnumDateFormatsExEx(
      lpDateFmtEnumProcExEx : DATEFMT_ENUMPROCEXEX;
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumDateFormatsExEx,"EnumDateFormatsExEx");
   subtype TIMEFMT_ENUMPROCEX is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, LPARAM)
   function EnumTimeFormatsEx(
      lpTimeFmtEnumProcEx : TIMEFMT_ENUMPROCEX;
      lpLocaleName : LPCWSTR;
      dwFlags : DWORD;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,EnumTimeFormatsEx,"EnumTimeFormatsEx");
   subtype LOCALE_ENUMPROCEX is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPWSTR, DWORD, LPARAM)
   function EnumSystemLocalesEx(
      lpLocaleEnumProcEx : LOCALE_ENUMPROCEX;
      dwFlags : DWORD;
      lParam_x : LPARAM;
      lpReserved : LPVOID
   ) return BOOL;
   pragma import (C,EnumSystemLocalesEx,"EnumSystemLocalesEx");
   function ResolveLocaleName(
      lpNameToResolve : LPCWSTR;
      lpLocaleName : LPWSTR;
      cchLocaleName : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,ResolveLocaleName,"ResolveLocaleName");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\wincon.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\wincontypes.h>
   type COORD_x is record
      X : SHORT;
      Y : SHORT;
   end record;
   subtype COORD is COORD_x; -- CXType_Elaborated
   type PCOORD is access COORD_x; -- CXType_Pointer - CXType_Elaborated
   type SMALL_RECT_x is record
      Left : SHORT;
      Top : SHORT;
      Right : SHORT;
      Bottom : SHORT;
   end record;
   subtype SMALL_RECT is SMALL_RECT_x; -- CXType_Elaborated
   type PSMALL_RECT is access SMALL_RECT_x; -- CXType_Pointer - CXType_Elaborated
   type KEY_EVENT_RECORD_x is record
      bKeyDown : BOOL;
      wRepeatCount : WORD;
      wVirtualKeyCode : WORD;
      wVirtualScanCode : WORD;
      uChar_x : Void;
      dwControlKeyState : DWORD;
   end record;
   subtype KEY_EVENT_RECORD is KEY_EVENT_RECORD_x; -- CXType_Elaborated
   type PKEY_EVENT_RECORD is access KEY_EVENT_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type MOUSE_EVENT_RECORD_x is record
      dwMousePosition : COORD;
      dwButtonState : DWORD;
      dwControlKeyState : DWORD;
      dwEventFlags : DWORD;
   end record;
   subtype MOUSE_EVENT_RECORD is MOUSE_EVENT_RECORD_x; -- CXType_Elaborated
   type PMOUSE_EVENT_RECORD is access MOUSE_EVENT_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type WINDOW_BUFFER_SIZE_RECORD_x is record
      dwSize : COORD;
   end record;
   subtype WINDOW_BUFFER_SIZE_RECORD is WINDOW_BUFFER_SIZE_RECORD_x; -- CXType_Elaborated
   type PWINDOW_BUFFER_SIZE_RECORD is access WINDOW_BUFFER_SIZE_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type MENU_EVENT_RECORD_x is record
      dwCommandId : UINT;
   end record;
   subtype MENU_EVENT_RECORD is MENU_EVENT_RECORD_x; -- CXType_Elaborated
   type PMENU_EVENT_RECORD is access MENU_EVENT_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type FOCUS_EVENT_RECORD_x is record
      bSetFocus : BOOL;
   end record;
   subtype FOCUS_EVENT_RECORD is FOCUS_EVENT_RECORD_x; -- CXType_Elaborated
   type PFOCUS_EVENT_RECORD is access FOCUS_EVENT_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type INPUT_RECORD_x is record
      EventType : WORD;
      Event : Void;
   end record;
   subtype INPUT_RECORD is INPUT_RECORD_x; -- CXType_Elaborated
   type PINPUT_RECORD is access INPUT_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type CHAR_INFO_x is record
      Char_x : Void;
      Attributes : WORD;
   end record;
   subtype CHAR_INFO is CHAR_INFO_x; -- CXType_Elaborated
   type PCHAR_INFO is access CHAR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CONSOLE_FONT_INFO_x is record
      nFont : DWORD;
      dwFontSize : COORD;
   end record;
   subtype CONSOLE_FONT_INFO is CONSOLE_FONT_INFO_x; -- CXType_Elaborated
   type PCONSOLE_FONT_INFO is access CONSOLE_FONT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\consoleapi.h>
   function AllocConsole return BOOL;
   pragma import (C,AllocConsole,"AllocConsole");
   function FreeConsole return BOOL;
   pragma import (C,FreeConsole,"FreeConsole");
   function AttachConsole(
      dwProcessId : DWORD
   ) return BOOL;
   pragma import (C,AttachConsole,"AttachConsole");
   function GetConsoleCP return UINT;
   pragma import (C,GetConsoleCP,"GetConsoleCP");
   function GetConsoleOutputCP return UINT;
   pragma import (C,GetConsoleOutputCP,"GetConsoleOutputCP");
   function GetConsoleMode(
      hConsoleHandle : HANDLE;
      lpMode : LPDWORD
   ) return BOOL;
   pragma import (C,GetConsoleMode,"GetConsoleMode");
   function SetConsoleMode(
      hConsoleHandle : HANDLE;
      dwMode : DWORD
   ) return BOOL;
   pragma import (C,SetConsoleMode,"SetConsoleMode");
   function GetNumberOfConsoleInputEvents(
      hConsoleInput : HANDLE;
      lpNumberOfEvents : LPDWORD
   ) return BOOL;
   pragma import (C,GetNumberOfConsoleInputEvents,"GetNumberOfConsoleInputEvents");
   function ReadConsoleInputA(
      hConsoleInput : HANDLE;
      lpBuffer : PINPUT_RECORD;
      nLength : DWORD;
      lpNumberOfEventsRead : LPDWORD
   ) return BOOL;
   pragma import (C,ReadConsoleInputA,"ReadConsoleInputA");
   function ReadConsoleInputW(
      hConsoleInput : HANDLE;
      lpBuffer : PINPUT_RECORD;
      nLength : DWORD;
      lpNumberOfEventsRead : LPDWORD
   ) return BOOL;
   pragma import (C,ReadConsoleInputW,"ReadConsoleInputW");
   function PeekConsoleInputA(
      hConsoleInput : HANDLE;
      lpBuffer : PINPUT_RECORD;
      nLength : DWORD;
      lpNumberOfEventsRead : LPDWORD
   ) return BOOL;
   pragma import (C,PeekConsoleInputA,"PeekConsoleInputA");
   function PeekConsoleInputW(
      hConsoleInput : HANDLE;
      lpBuffer : PINPUT_RECORD;
      nLength : DWORD;
      lpNumberOfEventsRead : LPDWORD
   ) return BOOL;
   pragma import (C,PeekConsoleInputW,"PeekConsoleInputW");
   type CONSOLE_READCONSOLE_CONTROL_x is record
      nLength : ULONG;
      nInitialChars : ULONG;
      dwCtrlWakeupMask : ULONG;
      dwControlKeyState : ULONG;
   end record;
   subtype CONSOLE_READCONSOLE_CONTROL is CONSOLE_READCONSOLE_CONTROL_x; -- CXType_Elaborated
   type PCONSOLE_READCONSOLE_CONTROL is access CONSOLE_READCONSOLE_CONTROL_x; -- CXType_Pointer - CXType_Elaborated
   function ReadConsoleA(
      hConsoleInput : HANDLE;
      lpBuffer : LPVOID;
      nNumberOfCharsToRead : DWORD;
      lpNumberOfCharsRead : LPDWORD;
      pInputControl : PCONSOLE_READCONSOLE_CONTROL
   ) return BOOL;
   pragma import (C,ReadConsoleA,"ReadConsoleA");
   function ReadConsoleW(
      hConsoleInput : HANDLE;
      lpBuffer : LPVOID;
      nNumberOfCharsToRead : DWORD;
      lpNumberOfCharsRead : LPDWORD;
      pInputControl : PCONSOLE_READCONSOLE_CONTROL
   ) return BOOL;
   pragma import (C,ReadConsoleW,"ReadConsoleW");
   function WriteConsoleA(
      hConsoleOutput : HANDLE;
      lpBuffer : access Void;
      nNumberOfCharsToWrite : DWORD;
      lpNumberOfCharsWritten : LPDWORD;
      lpReserved : LPVOID
   ) return BOOL;
   pragma import (C,WriteConsoleA,"WriteConsoleA");
   function WriteConsoleW(
      hConsoleOutput : HANDLE;
      lpBuffer : access Void;
      nNumberOfCharsToWrite : DWORD;
      lpNumberOfCharsWritten : LPDWORD;
      lpReserved : LPVOID
   ) return BOOL;
   pragma import (C,WriteConsoleW,"WriteConsoleW");
   subtype PHANDLER_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD)
   function SetConsoleCtrlHandler(
      HandlerRoutine : PHANDLER_ROUTINE;
      Add : BOOL
   ) return BOOL;
   pragma import (C,SetConsoleCtrlHandler,"SetConsoleCtrlHandler");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\consoleapi2.h>
   function FillConsoleOutputCharacterA(
      hConsoleOutput : HANDLE;
      cCharacter : CHAR;
      nLength : DWORD;
      dwWriteCoord : COORD;
      lpNumberOfCharsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,FillConsoleOutputCharacterA,"FillConsoleOutputCharacterA");
   function FillConsoleOutputCharacterW(
      hConsoleOutput : HANDLE;
      cCharacter : WCHAR;
      nLength : DWORD;
      dwWriteCoord : COORD;
      lpNumberOfCharsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,FillConsoleOutputCharacterW,"FillConsoleOutputCharacterW");
   function FillConsoleOutputAttribute(
      hConsoleOutput : HANDLE;
      wAttribute : WORD;
      nLength : DWORD;
      dwWriteCoord : COORD;
      lpNumberOfAttrsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,FillConsoleOutputAttribute,"FillConsoleOutputAttribute");
   function GenerateConsoleCtrlEvent(
      dwCtrlEvent : DWORD;
      dwProcessGroupId : DWORD
   ) return BOOL;
   pragma import (C,GenerateConsoleCtrlEvent,"GenerateConsoleCtrlEvent");
   function CreateConsoleScreenBuffer(
      dwDesiredAccess : DWORD;
      dwShareMode : DWORD;
      lpSecurityAttributes : access constant SECURITY_ATTRIBUTES;
      dwFlags : DWORD;
      lpScreenBufferData : LPVOID
   ) return HANDLE;
   pragma import (C,CreateConsoleScreenBuffer,"CreateConsoleScreenBuffer");
   function SetConsoleActiveScreenBuffer(
      hConsoleOutput : HANDLE
   ) return BOOL;
   pragma import (C,SetConsoleActiveScreenBuffer,"SetConsoleActiveScreenBuffer");
   function FlushConsoleInputBuffer(
      hConsoleInput : HANDLE
   ) return BOOL;
   pragma import (C,FlushConsoleInputBuffer,"FlushConsoleInputBuffer");
   function SetConsoleCP(
      wCodePageID : UINT
   ) return BOOL;
   pragma import (C,SetConsoleCP,"SetConsoleCP");
   function SetConsoleOutputCP(
      wCodePageID : UINT
   ) return BOOL;
   pragma import (C,SetConsoleOutputCP,"SetConsoleOutputCP");
   type CONSOLE_CURSOR_INFO_x is record
      dwSize : DWORD;
      bVisible : BOOL;
   end record;
   subtype CONSOLE_CURSOR_INFO is CONSOLE_CURSOR_INFO_x; -- CXType_Elaborated
   type PCONSOLE_CURSOR_INFO is access CONSOLE_CURSOR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function GetConsoleCursorInfo(
      hConsoleOutput : HANDLE;
      lpConsoleCursorInfo : PCONSOLE_CURSOR_INFO
   ) return BOOL;
   pragma import (C,GetConsoleCursorInfo,"GetConsoleCursorInfo");
   function SetConsoleCursorInfo(
      hConsoleOutput : HANDLE;
      lpConsoleCursorInfo : access constant CONSOLE_CURSOR_INFO
   ) return BOOL;
   pragma import (C,SetConsoleCursorInfo,"SetConsoleCursorInfo");
   type CONSOLE_SCREEN_BUFFER_INFO_x is record
      dwSize : COORD;
      dwCursorPosition : COORD;
      wAttributes : WORD;
      srWindow : SMALL_RECT;
      dwMaximumWindowSize : COORD;
   end record;
   subtype CONSOLE_SCREEN_BUFFER_INFO is CONSOLE_SCREEN_BUFFER_INFO_x; -- CXType_Elaborated
   type PCONSOLE_SCREEN_BUFFER_INFO is access CONSOLE_SCREEN_BUFFER_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function GetConsoleScreenBufferInfo(
      hConsoleOutput : HANDLE;
      lpConsoleScreenBufferInfo : PCONSOLE_SCREEN_BUFFER_INFO
   ) return BOOL;
   pragma import (C,GetConsoleScreenBufferInfo,"GetConsoleScreenBufferInfo");
   type CONSOLE_SCREEN_BUFFER_INFOEX_x is record
      cbSize : ULONG;
      dwSize : COORD;
      dwCursorPosition : COORD;
      wAttributes : WORD;
      srWindow : SMALL_RECT;
      dwMaximumWindowSize : COORD;
      wPopupAttributes : WORD;
      bFullscreenSupported : BOOL;
      ColorTable : Void;
   end record;
   subtype CONSOLE_SCREEN_BUFFER_INFOEX is CONSOLE_SCREEN_BUFFER_INFOEX_x; -- CXType_Elaborated
   type PCONSOLE_SCREEN_BUFFER_INFOEX is access CONSOLE_SCREEN_BUFFER_INFOEX_x; -- CXType_Pointer - CXType_Elaborated
   function GetConsoleScreenBufferInfoEx(
      hConsoleOutput : HANDLE;
      lpConsoleScreenBufferInfoEx : PCONSOLE_SCREEN_BUFFER_INFOEX
   ) return BOOL;
   pragma import (C,GetConsoleScreenBufferInfoEx,"GetConsoleScreenBufferInfoEx");
   function SetConsoleScreenBufferInfoEx(
      hConsoleOutput : HANDLE;
      lpConsoleScreenBufferInfoEx : PCONSOLE_SCREEN_BUFFER_INFOEX
   ) return BOOL;
   pragma import (C,SetConsoleScreenBufferInfoEx,"SetConsoleScreenBufferInfoEx");
   function SetConsoleScreenBufferSize(
      hConsoleOutput : HANDLE;
      dwSize : COORD
   ) return BOOL;
   pragma import (C,SetConsoleScreenBufferSize,"SetConsoleScreenBufferSize");
   function SetConsoleCursorPosition(
      hConsoleOutput : HANDLE;
      dwCursorPosition : COORD
   ) return BOOL;
   pragma import (C,SetConsoleCursorPosition,"SetConsoleCursorPosition");
   function GetLargestConsoleWindowSize(
      hConsoleOutput : HANDLE
   ) return COORD;
   pragma import (C,GetLargestConsoleWindowSize,"GetLargestConsoleWindowSize");
   function SetConsoleTextAttribute(
      hConsoleOutput : HANDLE;
      wAttributes : WORD
   ) return BOOL;
   pragma import (C,SetConsoleTextAttribute,"SetConsoleTextAttribute");
   function SetConsoleWindowInfo(
      hConsoleOutput : HANDLE;
      bAbsolute : BOOL;
      lpConsoleWindow : access constant SMALL_RECT
   ) return BOOL;
   pragma import (C,SetConsoleWindowInfo,"SetConsoleWindowInfo");
   function WriteConsoleOutputCharacterA(
      hConsoleOutput : HANDLE;
      lpCharacter : LPCSTR;
      nLength : DWORD;
      dwWriteCoord : COORD;
      lpNumberOfCharsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,WriteConsoleOutputCharacterA,"WriteConsoleOutputCharacterA");
   function WriteConsoleOutputCharacterW(
      hConsoleOutput : HANDLE;
      lpCharacter : LPCWSTR;
      nLength : DWORD;
      dwWriteCoord : COORD;
      lpNumberOfCharsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,WriteConsoleOutputCharacterW,"WriteConsoleOutputCharacterW");
   function WriteConsoleOutputAttribute(
      hConsoleOutput : HANDLE;
      lpAttribute : access constant WORD;
      nLength : DWORD;
      dwWriteCoord : COORD;
      lpNumberOfAttrsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,WriteConsoleOutputAttribute,"WriteConsoleOutputAttribute");
   function ReadConsoleOutputCharacterA(
      hConsoleOutput : HANDLE;
      lpCharacter : LPSTR;
      nLength : DWORD;
      dwReadCoord : COORD;
      lpNumberOfCharsRead : LPDWORD
   ) return BOOL;
   pragma import (C,ReadConsoleOutputCharacterA,"ReadConsoleOutputCharacterA");
   function ReadConsoleOutputCharacterW(
      hConsoleOutput : HANDLE;
      lpCharacter : LPWSTR;
      nLength : DWORD;
      dwReadCoord : COORD;
      lpNumberOfCharsRead : LPDWORD
   ) return BOOL;
   pragma import (C,ReadConsoleOutputCharacterW,"ReadConsoleOutputCharacterW");
   function ReadConsoleOutputAttribute(
      hConsoleOutput : HANDLE;
      lpAttribute : LPWORD;
      nLength : DWORD;
      dwReadCoord : COORD;
      lpNumberOfAttrsRead : LPDWORD
   ) return BOOL;
   pragma import (C,ReadConsoleOutputAttribute,"ReadConsoleOutputAttribute");
   function WriteConsoleInputA(
      hConsoleInput : HANDLE;
      lpBuffer : access constant INPUT_RECORD;
      nLength : DWORD;
      lpNumberOfEventsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,WriteConsoleInputA,"WriteConsoleInputA");
   function WriteConsoleInputW(
      hConsoleInput : HANDLE;
      lpBuffer : access constant INPUT_RECORD;
      nLength : DWORD;
      lpNumberOfEventsWritten : LPDWORD
   ) return BOOL;
   pragma import (C,WriteConsoleInputW,"WriteConsoleInputW");
   function ScrollConsoleScreenBufferA(
      hConsoleOutput : HANDLE;
      lpScrollRectangle : access constant SMALL_RECT;
      lpClipRectangle : access constant SMALL_RECT;
      dwDestinationOrigin : COORD;
      lpFill : access constant CHAR_INFO
   ) return BOOL;
   pragma import (C,ScrollConsoleScreenBufferA,"ScrollConsoleScreenBufferA");
   function ScrollConsoleScreenBufferW(
      hConsoleOutput : HANDLE;
      lpScrollRectangle : access constant SMALL_RECT;
      lpClipRectangle : access constant SMALL_RECT;
      dwDestinationOrigin : COORD;
      lpFill : access constant CHAR_INFO
   ) return BOOL;
   pragma import (C,ScrollConsoleScreenBufferW,"ScrollConsoleScreenBufferW");
   function WriteConsoleOutputA(
      hConsoleOutput : HANDLE;
      lpBuffer : access constant CHAR_INFO;
      dwBufferSize : COORD;
      dwBufferCoord : COORD;
      lpWriteRegion : PSMALL_RECT
   ) return BOOL;
   pragma import (C,WriteConsoleOutputA,"WriteConsoleOutputA");
   function WriteConsoleOutputW(
      hConsoleOutput : HANDLE;
      lpBuffer : access constant CHAR_INFO;
      dwBufferSize : COORD;
      dwBufferCoord : COORD;
      lpWriteRegion : PSMALL_RECT
   ) return BOOL;
   pragma import (C,WriteConsoleOutputW,"WriteConsoleOutputW");
   function ReadConsoleOutputA(
      hConsoleOutput : HANDLE;
      lpBuffer : PCHAR_INFO;
      dwBufferSize : COORD;
      dwBufferCoord : COORD;
      lpReadRegion : PSMALL_RECT
   ) return BOOL;
   pragma import (C,ReadConsoleOutputA,"ReadConsoleOutputA");
   function ReadConsoleOutputW(
      hConsoleOutput : HANDLE;
      lpBuffer : PCHAR_INFO;
      dwBufferSize : COORD;
      dwBufferCoord : COORD;
      lpReadRegion : PSMALL_RECT
   ) return BOOL;
   pragma import (C,ReadConsoleOutputW,"ReadConsoleOutputW");
   function GetConsoleTitleA(
      lpConsoleTitle : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleTitleA,"GetConsoleTitleA");
   function GetConsoleTitleW(
      lpConsoleTitle : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleTitleW,"GetConsoleTitleW");
   function GetConsoleOriginalTitleA(
      lpConsoleTitle : LPSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleOriginalTitleA,"GetConsoleOriginalTitleA");
   function GetConsoleOriginalTitleW(
      lpConsoleTitle : LPWSTR;
      nSize : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleOriginalTitleW,"GetConsoleOriginalTitleW");
   function SetConsoleTitleA(
      lpConsoleTitle : LPCSTR
   ) return BOOL;
   pragma import (C,SetConsoleTitleA,"SetConsoleTitleA");
   function SetConsoleTitleW(
      lpConsoleTitle : LPCWSTR
   ) return BOOL;
   pragma import (C,SetConsoleTitleW,"SetConsoleTitleW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\consoleapi3.h>
   function GetNumberOfConsoleMouseButtons(
      lpNumberOfMouseButtons : LPDWORD
   ) return BOOL;
   pragma import (C,GetNumberOfConsoleMouseButtons,"GetNumberOfConsoleMouseButtons");
   function GetConsoleFontSize(
      hConsoleOutput : HANDLE;
      nFont : DWORD
   ) return COORD;
   pragma import (C,GetConsoleFontSize,"GetConsoleFontSize");
   function GetCurrentConsoleFont(
      hConsoleOutput : HANDLE;
      bMaximumWindow : BOOL;
      lpConsoleCurrentFont : PCONSOLE_FONT_INFO
   ) return BOOL;
   pragma import (C,GetCurrentConsoleFont,"GetCurrentConsoleFont");
   type CONSOLE_FONT_INFOEX_x is record
      cbSize : ULONG;
      nFont : DWORD;
      dwFontSize : COORD;
      FontFamily : UINT;
      FontWeight : UINT;
      FaceName : Void;
   end record;
   subtype CONSOLE_FONT_INFOEX is CONSOLE_FONT_INFOEX_x; -- CXType_Elaborated
   type PCONSOLE_FONT_INFOEX is access CONSOLE_FONT_INFOEX_x; -- CXType_Pointer - CXType_Elaborated
   function GetCurrentConsoleFontEx(
      hConsoleOutput : HANDLE;
      bMaximumWindow : BOOL;
      lpConsoleCurrentFontEx : PCONSOLE_FONT_INFOEX
   ) return BOOL;
   pragma import (C,GetCurrentConsoleFontEx,"GetCurrentConsoleFontEx");
   function SetCurrentConsoleFontEx(
      hConsoleOutput : HANDLE;
      bMaximumWindow : BOOL;
      lpConsoleCurrentFontEx : PCONSOLE_FONT_INFOEX
   ) return BOOL;
   pragma import (C,SetCurrentConsoleFontEx,"SetCurrentConsoleFontEx");
   type CONSOLE_SELECTION_INFO_x is record
      dwFlags : DWORD;
      dwSelectionAnchor : COORD;
      srSelection : SMALL_RECT;
   end record;
   subtype CONSOLE_SELECTION_INFO is CONSOLE_SELECTION_INFO_x; -- CXType_Elaborated
   type PCONSOLE_SELECTION_INFO is access CONSOLE_SELECTION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function GetConsoleSelectionInfo(
      lpConsoleSelectionInfo : PCONSOLE_SELECTION_INFO
   ) return BOOL;
   pragma import (C,GetConsoleSelectionInfo,"GetConsoleSelectionInfo");
   type CONSOLE_HISTORY_INFO_x is record
      cbSize : UINT;
      HistoryBufferSize : UINT;
      NumberOfHistoryBuffers : UINT;
      dwFlags : DWORD;
   end record;
   subtype CONSOLE_HISTORY_INFO is CONSOLE_HISTORY_INFO_x; -- CXType_Elaborated
   type PCONSOLE_HISTORY_INFO is access CONSOLE_HISTORY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function GetConsoleHistoryInfo(
      lpConsoleHistoryInfo : PCONSOLE_HISTORY_INFO
   ) return BOOL;
   pragma import (C,GetConsoleHistoryInfo,"GetConsoleHistoryInfo");
   function SetConsoleHistoryInfo(
      lpConsoleHistoryInfo : PCONSOLE_HISTORY_INFO
   ) return BOOL;
   pragma import (C,SetConsoleHistoryInfo,"SetConsoleHistoryInfo");
   function GetConsoleDisplayMode(
      lpModeFlags : LPDWORD
   ) return BOOL;
   pragma import (C,GetConsoleDisplayMode,"GetConsoleDisplayMode");
   function SetConsoleDisplayMode(
      hConsoleOutput : HANDLE;
      dwFlags : DWORD;
      lpNewScreenBufferDimensions : PCOORD
   ) return BOOL;
   pragma import (C,SetConsoleDisplayMode,"SetConsoleDisplayMode");
   function GetConsoleWindow return HWND;
   pragma import (C,GetConsoleWindow,"GetConsoleWindow");
   function AddConsoleAliasA(
      Source : LPSTR;
      Target : LPSTR;
      ExeName : LPSTR
   ) return BOOL;
   pragma import (C,AddConsoleAliasA,"AddConsoleAliasA");
   function AddConsoleAliasW(
      Source : LPWSTR;
      Target : LPWSTR;
      ExeName : LPWSTR
   ) return BOOL;
   pragma import (C,AddConsoleAliasW,"AddConsoleAliasW");
   function GetConsoleAliasA(
      Source : LPSTR;
      TargetBuffer : LPSTR;
      TargetBufferLength : DWORD;
      ExeName : LPSTR
   ) return DWORD;
   pragma import (C,GetConsoleAliasA,"GetConsoleAliasA");
   function GetConsoleAliasW(
      Source : LPWSTR;
      TargetBuffer : LPWSTR;
      TargetBufferLength : DWORD;
      ExeName : LPWSTR
   ) return DWORD;
   pragma import (C,GetConsoleAliasW,"GetConsoleAliasW");
   function GetConsoleAliasesLengthA(
      ExeName : LPSTR
   ) return DWORD;
   pragma import (C,GetConsoleAliasesLengthA,"GetConsoleAliasesLengthA");
   function GetConsoleAliasesLengthW(
      ExeName : LPWSTR
   ) return DWORD;
   pragma import (C,GetConsoleAliasesLengthW,"GetConsoleAliasesLengthW");
   function GetConsoleAliasExesLengthA return DWORD;
   pragma import (C,GetConsoleAliasExesLengthA,"GetConsoleAliasExesLengthA");
   function GetConsoleAliasExesLengthW return DWORD;
   pragma import (C,GetConsoleAliasExesLengthW,"GetConsoleAliasExesLengthW");
   function GetConsoleAliasesA(
      AliasBuffer : LPSTR;
      AliasBufferLength : DWORD;
      ExeName : LPSTR
   ) return DWORD;
   pragma import (C,GetConsoleAliasesA,"GetConsoleAliasesA");
   function GetConsoleAliasesW(
      AliasBuffer : LPWSTR;
      AliasBufferLength : DWORD;
      ExeName : LPWSTR
   ) return DWORD;
   pragma import (C,GetConsoleAliasesW,"GetConsoleAliasesW");
   function GetConsoleAliasExesA(
      ExeNameBuffer : LPSTR;
      ExeNameBufferLength : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleAliasExesA,"GetConsoleAliasExesA");
   function GetConsoleAliasExesW(
      ExeNameBuffer : LPWSTR;
      ExeNameBufferLength : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleAliasExesW,"GetConsoleAliasExesW");
   procedure ExpungeConsoleCommandHistoryA(
      ExeName : LPSTR
   );
   pragma import (C,ExpungeConsoleCommandHistoryA,"ExpungeConsoleCommandHistoryA");
   procedure ExpungeConsoleCommandHistoryW(
      ExeName : LPWSTR
   );
   pragma import (C,ExpungeConsoleCommandHistoryW,"ExpungeConsoleCommandHistoryW");
   function SetConsoleNumberOfCommandsA(
      Number : DWORD;
      ExeName : LPSTR
   ) return BOOL;
   pragma import (C,SetConsoleNumberOfCommandsA,"SetConsoleNumberOfCommandsA");
   function SetConsoleNumberOfCommandsW(
      Number : DWORD;
      ExeName : LPWSTR
   ) return BOOL;
   pragma import (C,SetConsoleNumberOfCommandsW,"SetConsoleNumberOfCommandsW");
   function GetConsoleCommandHistoryLengthA(
      ExeName : LPSTR
   ) return DWORD;
   pragma import (C,GetConsoleCommandHistoryLengthA,"GetConsoleCommandHistoryLengthA");
   function GetConsoleCommandHistoryLengthW(
      ExeName : LPWSTR
   ) return DWORD;
   pragma import (C,GetConsoleCommandHistoryLengthW,"GetConsoleCommandHistoryLengthW");
   function GetConsoleCommandHistoryA(
      Commands : LPSTR;
      CommandBufferLength : DWORD;
      ExeName : LPSTR
   ) return DWORD;
   pragma import (C,GetConsoleCommandHistoryA,"GetConsoleCommandHistoryA");
   function GetConsoleCommandHistoryW(
      Commands : LPWSTR;
      CommandBufferLength : DWORD;
      ExeName : LPWSTR
   ) return DWORD;
   pragma import (C,GetConsoleCommandHistoryW,"GetConsoleCommandHistoryW");
   function GetConsoleProcessList(
      lpdwProcessList : LPDWORD;
      dwProcessCount : DWORD
   ) return DWORD;
   pragma import (C,GetConsoleProcessList,"GetConsoleProcessList");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\verrsrc.h>
   type tagVS_FIXEDFILEINFO is record
      dwSignature : DWORD;
      dwStrucVersion : DWORD;
      dwFileVersionMS : DWORD;
      dwFileVersionLS : DWORD;
      dwProductVersionMS : DWORD;
      dwProductVersionLS : DWORD;
      dwFileFlagsMask : DWORD;
      dwFileFlags : DWORD;
      dwFileOS : DWORD;
      dwFileType : DWORD;
      dwFileSubtype : DWORD;
      dwFileDateMS : DWORD;
      dwFileDateLS : DWORD;
   end record;
   subtype VS_FIXEDFILEINFO is tagVS_FIXEDFILEINFO; -- CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winver.h>
   function VerFindFileA(
      uFlags : DWORD;
      szFileName : LPCSTR;
      szWinDir : LPCSTR;
      szAppDir : LPCSTR;
      szCurDir : LPSTR;
      puCurDirLen : PUINT;
      szDestDir : LPSTR;
      puDestDirLen : PUINT
   ) return DWORD;
   pragma import (C,VerFindFileA,"VerFindFileA");
   function VerFindFileW(
      uFlags : DWORD;
      szFileName : LPCWSTR;
      szWinDir : LPCWSTR;
      szAppDir : LPCWSTR;
      szCurDir : LPWSTR;
      puCurDirLen : PUINT;
      szDestDir : LPWSTR;
      puDestDirLen : PUINT
   ) return DWORD;
   pragma import (C,VerFindFileW,"VerFindFileW");
   function VerInstallFileA(
      uFlags : DWORD;
      szSrcFileName : LPCSTR;
      szDestFileName : LPCSTR;
      szSrcDir : LPCSTR;
      szDestDir : LPCSTR;
      szCurDir : LPCSTR;
      szTmpFile : LPSTR;
      puTmpFileLen : PUINT
   ) return DWORD;
   pragma import (C,VerInstallFileA,"VerInstallFileA");
   function VerInstallFileW(
      uFlags : DWORD;
      szSrcFileName : LPCWSTR;
      szDestFileName : LPCWSTR;
      szSrcDir : LPCWSTR;
      szDestDir : LPCWSTR;
      szCurDir : LPCWSTR;
      szTmpFile : LPWSTR;
      puTmpFileLen : PUINT
   ) return DWORD;
   pragma import (C,VerInstallFileW,"VerInstallFileW");
   function GetFileVersionInfoSizeA(
      lptstrFilename : LPCSTR;
      lpdwHandle : LPDWORD
   ) return DWORD;
   pragma import (C,GetFileVersionInfoSizeA,"GetFileVersionInfoSizeA");
   function GetFileVersionInfoSizeW(
      lptstrFilename : LPCWSTR;
      lpdwHandle : LPDWORD
   ) return DWORD;
   pragma import (C,GetFileVersionInfoSizeW,"GetFileVersionInfoSizeW");
   function GetFileVersionInfoA(
      lptstrFilename : LPCSTR;
      dwHandle : DWORD;
      dwLen : DWORD;
      lpData : LPVOID
   ) return BOOL;
   pragma import (C,GetFileVersionInfoA,"GetFileVersionInfoA");
   function GetFileVersionInfoW(
      lptstrFilename : LPCWSTR;
      dwHandle : DWORD;
      dwLen : DWORD;
      lpData : LPVOID
   ) return BOOL;
   pragma import (C,GetFileVersionInfoW,"GetFileVersionInfoW");
   function GetFileVersionInfoSizeExA(
      dwFlags : DWORD;
      lpwstrFilename : LPCSTR;
      lpdwHandle : LPDWORD
   ) return DWORD;
   pragma import (C,GetFileVersionInfoSizeExA,"GetFileVersionInfoSizeExA");
   function GetFileVersionInfoSizeExW(
      dwFlags : DWORD;
      lpwstrFilename : LPCWSTR;
      lpdwHandle : LPDWORD
   ) return DWORD;
   pragma import (C,GetFileVersionInfoSizeExW,"GetFileVersionInfoSizeExW");
   function GetFileVersionInfoExA(
      dwFlags : DWORD;
      lpwstrFilename : LPCSTR;
      dwHandle : DWORD;
      dwLen : DWORD;
      lpData : LPVOID
   ) return BOOL;
   pragma import (C,GetFileVersionInfoExA,"GetFileVersionInfoExA");
   function GetFileVersionInfoExW(
      dwFlags : DWORD;
      lpwstrFilename : LPCWSTR;
      dwHandle : DWORD;
      dwLen : DWORD;
      lpData : LPVOID
   ) return BOOL;
   pragma import (C,GetFileVersionInfoExW,"GetFileVersionInfoExW");
   function VerLanguageNameA(
      wLang : DWORD;
      szLang : LPSTR;
      cchLang : DWORD
   ) return DWORD;
   pragma import (C,VerLanguageNameA,"VerLanguageNameA");
   function VerLanguageNameW(
      wLang : DWORD;
      szLang : LPWSTR;
      cchLang : DWORD
   ) return DWORD;
   pragma import (C,VerLanguageNameW,"VerLanguageNameW");
   function VerQueryValueA(
      pBlock : LPCVOID;
      lpSubBlock : LPCSTR;
      lplpBuffer : access LPVOID;
      puLen : PUINT
   ) return BOOL;
   pragma import (C,VerQueryValueA,"VerQueryValueA");
   function VerQueryValueW(
      pBlock : LPCVOID;
      lpSubBlock : LPCWSTR;
      lplpBuffer : access LPVOID;
      puLen : PUINT
   ) return BOOL;
   pragma import (C,VerQueryValueW,"VerQueryValueW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winreg.h>
   subtype LSTATUS is LONG; -- CXType_Typedef
   subtype REGSAM is ACCESS_MASK; -- CXType_Typedef
   type val_context is record
      valuelen : Interfaces.C.Int;
      value_context : LPVOID;
      val_buff_ptr : LPVOID;
   end record;
   type PVALCONTEXT is access val_context; -- CXType_Pointer - CXType_Elaborated
   type pvalueA is record
      pv_valuename : LPSTR;
      pv_valuelen : Interfaces.C.Int;
      pv_value_context : LPVOID;
      pv_type : DWORD;
   end record;
   -- subtype PVALUEA is pvalueA; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PPVALUEA is access pvalueA; -- CXType_Pointer - CXType_Elaborated
   type pvalueW is record
      pv_valuename : LPWSTR;
      pv_valuelen : Interfaces.C.Int;
      pv_value_context : LPVOID;
      pv_type : DWORD;
   end record;
   -- subtype PVALUEW is pvalueW; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PPVALUEW is access pvalueW; -- CXType_Pointer - CXType_Elaborated
   subtype PVALUE is PVALUEA; -- CXType_Typedef
   subtype PPVALUE is PPVALUEA; -- CXType_Typedef
   subtype QUERYHANDLER is System.Address; -- [FIXME - CXType_FunctionProto] DWORD (LPVOID, PVALCONTEXT, DWORD, LPVOID, DWORD *, DWORD)
   subtype PQUERYHANDLER is System.Address; -- [FIXME - CXType_Pointer - CXType_FunctionProto] DWORD (LPVOID, PVALCONTEXT, DWORD, LPVOID, DWORD *, DWORD)
   type provider_info is record
      pi_R0_1val : PQUERYHANDLER;
      pi_R0_allvals : PQUERYHANDLER;
      pi_R3_1val : PQUERYHANDLER;
      pi_R3_allvals : PQUERYHANDLER;
      pi_flags : DWORD;
      pi_key_context : LPVOID;
   end record;
   subtype REG_PROVIDER is provider_info; -- CXType_Elaborated
   type PPROVIDER is access provider_info; -- CXType_Pointer - CXType_Elaborated
   type value_entA is record
      ve_valuename : LPSTR;
      ve_valuelen : DWORD;
      ve_valueptr : DWORD_PTR;
      ve_type : DWORD;
   end record;
   subtype VALENTA is value_entA; -- CXType_Elaborated
   type PVALENTA is access value_entA; -- CXType_Pointer - CXType_Elaborated
   type value_entW is record
      ve_valuename : LPWSTR;
      ve_valuelen : DWORD;
      ve_valueptr : DWORD_PTR;
      ve_type : DWORD;
   end record;
   subtype VALENTW is value_entW; -- CXType_Elaborated
   type PVALENTW is access value_entW; -- CXType_Pointer - CXType_Elaborated
   subtype VALENT is VALENTA; -- CXType_Typedef
   subtype PVALENT is PVALENTA; -- CXType_Typedef
   function RegCloseKey(
      hKey_x : HKEY
   ) return LSTATUS;
   pragma import (C,RegCloseKey,"RegCloseKey");
   function RegOverridePredefKey(
      hKey_x : HKEY;
      hNewHKey : HKEY
   ) return LSTATUS;
   pragma import (C,RegOverridePredefKey,"RegOverridePredefKey");
   function RegOpenUserClassesRoot(
      hToken : HANDLE;
      dwOptions : DWORD;
      samDesired : REGSAM;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegOpenUserClassesRoot,"RegOpenUserClassesRoot");
   function RegOpenCurrentUser(
      samDesired : REGSAM;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegOpenCurrentUser,"RegOpenCurrentUser");
   function RegDisablePredefinedCache return LSTATUS;
   pragma import (C,RegDisablePredefinedCache,"RegDisablePredefinedCache");
   function RegDisablePredefinedCacheEx return LSTATUS;
   pragma import (C,RegDisablePredefinedCacheEx,"RegDisablePredefinedCacheEx");
   function RegConnectRegistryA(
      lpMachineName : LPCSTR;
      hKey_x : HKEY;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegConnectRegistryA,"RegConnectRegistryA");
   function RegConnectRegistryW(
      lpMachineName : LPCWSTR;
      hKey_x : HKEY;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegConnectRegistryW,"RegConnectRegistryW");
   function RegConnectRegistryExA(
      lpMachineName : LPCSTR;
      hKey_x : HKEY;
      Flags : ULONG;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegConnectRegistryExA,"RegConnectRegistryExA");
   function RegConnectRegistryExW(
      lpMachineName : LPCWSTR;
      hKey_x : HKEY;
      Flags : ULONG;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegConnectRegistryExW,"RegConnectRegistryExW");
   function RegCreateKeyA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegCreateKeyA,"RegCreateKeyA");
   function RegCreateKeyW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegCreateKeyW,"RegCreateKeyW");
   function RegCreateKeyExA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      Reserved : DWORD;
      lpClass : LPSTR;
      dwOptions : DWORD;
      samDesired : REGSAM;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      phkResult : PHKEY;
      lpdwDisposition : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegCreateKeyExA,"RegCreateKeyExA");
   function RegCreateKeyExW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      Reserved : DWORD;
      lpClass : LPWSTR;
      dwOptions : DWORD;
      samDesired : REGSAM;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      phkResult : PHKEY;
      lpdwDisposition : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegCreateKeyExW,"RegCreateKeyExW");
   function RegCreateKeyTransactedA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      Reserved : DWORD;
      lpClass : LPSTR;
      dwOptions : DWORD;
      samDesired : REGSAM;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      phkResult : PHKEY;
      lpdwDisposition : LPDWORD;
      hTransaction : HANDLE;
      pExtendedParemeter : PVOID
   ) return LSTATUS;
   pragma import (C,RegCreateKeyTransactedA,"RegCreateKeyTransactedA");
   function RegCreateKeyTransactedW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      Reserved : DWORD;
      lpClass : LPWSTR;
      dwOptions : DWORD;
      samDesired : REGSAM;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      phkResult : PHKEY;
      lpdwDisposition : LPDWORD;
      hTransaction : HANDLE;
      pExtendedParemeter : PVOID
   ) return LSTATUS;
   pragma import (C,RegCreateKeyTransactedW,"RegCreateKeyTransactedW");
   function RegDeleteKeyA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyA,"RegDeleteKeyA");
   function RegDeleteKeyW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyW,"RegDeleteKeyW");
   function RegDeleteKeyExA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      samDesired : REGSAM;
      Reserved : DWORD
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyExA,"RegDeleteKeyExA");
   function RegDeleteKeyExW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      samDesired : REGSAM;
      Reserved : DWORD
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyExW,"RegDeleteKeyExW");
   function RegDeleteKeyTransactedA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      samDesired : REGSAM;
      Reserved : DWORD;
      hTransaction : HANDLE;
      pExtendedParameter : PVOID
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyTransactedA,"RegDeleteKeyTransactedA");
   function RegDeleteKeyTransactedW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      samDesired : REGSAM;
      Reserved : DWORD;
      hTransaction : HANDLE;
      pExtendedParameter : PVOID
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyTransactedW,"RegDeleteKeyTransactedW");
   function RegDisableReflectionKey(
      hBase : HKEY
   ) return LONG;
   pragma import (C,RegDisableReflectionKey,"RegDisableReflectionKey");
   function RegEnableReflectionKey(
      hBase : HKEY
   ) return LONG;
   pragma import (C,RegEnableReflectionKey,"RegEnableReflectionKey");
   function RegQueryReflectionKey(
      hBase : HKEY;
      bIsReflectionDisabled : access BOOL
   ) return LONG;
   pragma import (C,RegQueryReflectionKey,"RegQueryReflectionKey");
   function RegDeleteValueA(
      hKey_x : HKEY;
      lpValueName : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteValueA,"RegDeleteValueA");
   function RegDeleteValueW(
      hKey_x : HKEY;
      lpValueName : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteValueW,"RegDeleteValueW");
   function RegEnumKeyA(
      hKey_x : HKEY;
      dwIndex : DWORD;
      lpName : LPSTR;
      cchName : DWORD
   ) return LSTATUS;
   pragma import (C,RegEnumKeyA,"RegEnumKeyA");
   function RegEnumKeyW(
      hKey_x : HKEY;
      dwIndex : DWORD;
      lpName : LPWSTR;
      cchName : DWORD
   ) return LSTATUS;
   pragma import (C,RegEnumKeyW,"RegEnumKeyW");
   function RegEnumKeyExA(
      hKey_x : HKEY;
      dwIndex : DWORD;
      lpName : LPSTR;
      lpcchName : LPDWORD;
      lpReserved : LPDWORD;
      lpClass : LPSTR;
      lpcchClass : LPDWORD;
      lpftLastWriteTime : PFILETIME
   ) return LSTATUS;
   pragma import (C,RegEnumKeyExA,"RegEnumKeyExA");
   function RegEnumKeyExW(
      hKey_x : HKEY;
      dwIndex : DWORD;
      lpName : LPWSTR;
      lpcchName : LPDWORD;
      lpReserved : LPDWORD;
      lpClass : LPWSTR;
      lpcchClass : LPDWORD;
      lpftLastWriteTime : PFILETIME
   ) return LSTATUS;
   pragma import (C,RegEnumKeyExW,"RegEnumKeyExW");
   function RegEnumValueA(
      hKey_x : HKEY;
      dwIndex : DWORD;
      lpValueName : LPSTR;
      lpcchValueName : LPDWORD;
      lpReserved : LPDWORD;
      lpType : LPDWORD;
      lpData : LPBYTE;
      lpcbData : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegEnumValueA,"RegEnumValueA");
   function RegEnumValueW(
      hKey_x : HKEY;
      dwIndex : DWORD;
      lpValueName : LPWSTR;
      lpcchValueName : LPDWORD;
      lpReserved : LPDWORD;
      lpType : LPDWORD;
      lpData : LPBYTE;
      lpcbData : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegEnumValueW,"RegEnumValueW");
   function RegFlushKey(
      hKey_x : HKEY
   ) return LSTATUS;
   pragma import (C,RegFlushKey,"RegFlushKey");
   function RegGetKeySecurity(
      hKey_x : HKEY;
      SecurityInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      lpcbSecurityDescriptor : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegGetKeySecurity,"RegGetKeySecurity");
   function RegLoadKeyA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      lpFile : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegLoadKeyA,"RegLoadKeyA");
   function RegLoadKeyW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      lpFile : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegLoadKeyW,"RegLoadKeyW");
   function RegNotifyChangeKeyValue(
      hKey_x : HKEY;
      bWatchSubtree : BOOL;
      dwNotifyFilter : DWORD;
      hEvent : HANDLE;
      fAsynchronous : BOOL
   ) return LSTATUS;
   pragma import (C,RegNotifyChangeKeyValue,"RegNotifyChangeKeyValue");
   function RegOpenKeyA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegOpenKeyA,"RegOpenKeyA");
   function RegOpenKeyW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegOpenKeyW,"RegOpenKeyW");
   function RegOpenKeyExA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      ulOptions : DWORD;
      samDesired : REGSAM;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegOpenKeyExA,"RegOpenKeyExA");
   function RegOpenKeyExW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      ulOptions : DWORD;
      samDesired : REGSAM;
      phkResult : PHKEY
   ) return LSTATUS;
   pragma import (C,RegOpenKeyExW,"RegOpenKeyExW");
   function RegOpenKeyTransactedA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      ulOptions : DWORD;
      samDesired : REGSAM;
      phkResult : PHKEY;
      hTransaction : HANDLE;
      pExtendedParemeter : PVOID
   ) return LSTATUS;
   pragma import (C,RegOpenKeyTransactedA,"RegOpenKeyTransactedA");
   function RegOpenKeyTransactedW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      ulOptions : DWORD;
      samDesired : REGSAM;
      phkResult : PHKEY;
      hTransaction : HANDLE;
      pExtendedParemeter : PVOID
   ) return LSTATUS;
   pragma import (C,RegOpenKeyTransactedW,"RegOpenKeyTransactedW");
   function RegQueryInfoKeyA(
      hKey_x : HKEY;
      lpClass : LPSTR;
      lpcchClass : LPDWORD;
      lpReserved : LPDWORD;
      lpcSubKeys : LPDWORD;
      lpcbMaxSubKeyLen : LPDWORD;
      lpcbMaxClassLen : LPDWORD;
      lpcValues : LPDWORD;
      lpcbMaxValueNameLen : LPDWORD;
      lpcbMaxValueLen : LPDWORD;
      lpcbSecurityDescriptor : LPDWORD;
      lpftLastWriteTime : PFILETIME
   ) return LSTATUS;
   pragma import (C,RegQueryInfoKeyA,"RegQueryInfoKeyA");
   function RegQueryInfoKeyW(
      hKey_x : HKEY;
      lpClass : LPWSTR;
      lpcchClass : LPDWORD;
      lpReserved : LPDWORD;
      lpcSubKeys : LPDWORD;
      lpcbMaxSubKeyLen : LPDWORD;
      lpcbMaxClassLen : LPDWORD;
      lpcValues : LPDWORD;
      lpcbMaxValueNameLen : LPDWORD;
      lpcbMaxValueLen : LPDWORD;
      lpcbSecurityDescriptor : LPDWORD;
      lpftLastWriteTime : PFILETIME
   ) return LSTATUS;
   pragma import (C,RegQueryInfoKeyW,"RegQueryInfoKeyW");
   function RegQueryValueA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      lpData : LPSTR;
      lpcbData : PLONG
   ) return LSTATUS;
   pragma import (C,RegQueryValueA,"RegQueryValueA");
   function RegQueryValueW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      lpData : LPWSTR;
      lpcbData : PLONG
   ) return LSTATUS;
   pragma import (C,RegQueryValueW,"RegQueryValueW");
   function RegQueryMultipleValuesA(
      hKey_x : HKEY;
      val_list : PVALENTA;
      num_vals : DWORD;
      lpValueBuf : LPSTR;
      ldwTotsize : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegQueryMultipleValuesA,"RegQueryMultipleValuesA");
   function RegQueryMultipleValuesW(
      hKey_x : HKEY;
      val_list : PVALENTW;
      num_vals : DWORD;
      lpValueBuf : LPWSTR;
      ldwTotsize : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegQueryMultipleValuesW,"RegQueryMultipleValuesW");
   function RegQueryValueExA(
      hKey_x : HKEY;
      lpValueName : LPCSTR;
      lpReserved : LPDWORD;
      lpType : LPDWORD;
      lpData : LPBYTE;
      lpcbData : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegQueryValueExA,"RegQueryValueExA");
   function RegQueryValueExW(
      hKey_x : HKEY;
      lpValueName : LPCWSTR;
      lpReserved : LPDWORD;
      lpType : LPDWORD;
      lpData : LPBYTE;
      lpcbData : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegQueryValueExW,"RegQueryValueExW");
   function RegReplaceKeyA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      lpNewFile : LPCSTR;
      lpOldFile : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegReplaceKeyA,"RegReplaceKeyA");
   function RegReplaceKeyW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      lpNewFile : LPCWSTR;
      lpOldFile : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegReplaceKeyW,"RegReplaceKeyW");
   function RegRestoreKeyA(
      hKey_x : HKEY;
      lpFile : LPCSTR;
      dwFlags : DWORD
   ) return LSTATUS;
   pragma import (C,RegRestoreKeyA,"RegRestoreKeyA");
   function RegRestoreKeyW(
      hKey_x : HKEY;
      lpFile : LPCWSTR;
      dwFlags : DWORD
   ) return LSTATUS;
   pragma import (C,RegRestoreKeyW,"RegRestoreKeyW");
   function RegRenameKey(
      hKey_x : HKEY;
      lpSubKeyName : LPCWSTR;
      lpNewKeyName : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegRenameKey,"RegRenameKey");
   function RegSaveKeyA(
      hKey_x : HKEY;
      lpFile : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return LSTATUS;
   pragma import (C,RegSaveKeyA,"RegSaveKeyA");
   function RegSaveKeyW(
      hKey_x : HKEY;
      lpFile : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return LSTATUS;
   pragma import (C,RegSaveKeyW,"RegSaveKeyW");
   function RegSetKeySecurity(
      hKey_x : HKEY;
      SecurityInformation : SECURITY_INFORMATION;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return LSTATUS;
   pragma import (C,RegSetKeySecurity,"RegSetKeySecurity");
   function RegSetValueA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      dwType : DWORD;
      lpData : LPCSTR;
      cbData : DWORD
   ) return LSTATUS;
   pragma import (C,RegSetValueA,"RegSetValueA");
   function RegSetValueW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      dwType : DWORD;
      lpData : LPCWSTR;
      cbData : DWORD
   ) return LSTATUS;
   pragma import (C,RegSetValueW,"RegSetValueW");
   function RegSetValueExA(
      hKey_x : HKEY;
      lpValueName : LPCSTR;
      Reserved : DWORD;
      dwType : DWORD;
      lpData : access constant BYTE;
      cbData : DWORD
   ) return LSTATUS;
   pragma import (C,RegSetValueExA,"RegSetValueExA");
   function RegSetValueExW(
      hKey_x : HKEY;
      lpValueName : LPCWSTR;
      Reserved : DWORD;
      dwType : DWORD;
      lpData : access constant BYTE;
      cbData : DWORD
   ) return LSTATUS;
   pragma import (C,RegSetValueExW,"RegSetValueExW");
   function RegUnLoadKeyA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegUnLoadKeyA,"RegUnLoadKeyA");
   function RegUnLoadKeyW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegUnLoadKeyW,"RegUnLoadKeyW");
   function RegDeleteKeyValueA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      lpValueName : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyValueA,"RegDeleteKeyValueA");
   function RegDeleteKeyValueW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      lpValueName : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteKeyValueW,"RegDeleteKeyValueW");
   function RegSetKeyValueA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR;
      lpValueName : LPCSTR;
      dwType : DWORD;
      lpData : LPCVOID;
      cbData : DWORD
   ) return LSTATUS;
   pragma import (C,RegSetKeyValueA,"RegSetKeyValueA");
   function RegSetKeyValueW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR;
      lpValueName : LPCWSTR;
      dwType : DWORD;
      lpData : LPCVOID;
      cbData : DWORD
   ) return LSTATUS;
   pragma import (C,RegSetKeyValueW,"RegSetKeyValueW");
   function RegDeleteTreeA(
      hKey_x : HKEY;
      lpSubKey : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteTreeA,"RegDeleteTreeA");
   function RegDeleteTreeW(
      hKey_x : HKEY;
      lpSubKey : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegDeleteTreeW,"RegDeleteTreeW");
   function RegCopyTreeA(
      hKeySrc : HKEY;
      lpSubKey : LPCSTR;
      hKeyDest : HKEY
   ) return LSTATUS;
   pragma import (C,RegCopyTreeA,"RegCopyTreeA");
   function RegGetValueA(
      hkey_x : HKEY;
      lpSubKey : LPCSTR;
      lpValue : LPCSTR;
      dwFlags : DWORD;
      pdwType : LPDWORD;
      pvData : PVOID;
      pcbData : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegGetValueA,"RegGetValueA");
   function RegGetValueW(
      hkey_x : HKEY;
      lpSubKey : LPCWSTR;
      lpValue : LPCWSTR;
      dwFlags : DWORD;
      pdwType : LPDWORD;
      pvData : PVOID;
      pcbData : LPDWORD
   ) return LSTATUS;
   pragma import (C,RegGetValueW,"RegGetValueW");
   function RegCopyTreeW(
      hKeySrc : HKEY;
      lpSubKey : LPCWSTR;
      hKeyDest : HKEY
   ) return LSTATUS;
   pragma import (C,RegCopyTreeW,"RegCopyTreeW");
   function RegLoadMUIStringA(
      hKey_x : HKEY;
      pszValue : LPCSTR;
      pszOutBuf : LPSTR;
      cbOutBuf : DWORD;
      pcbData : LPDWORD;
      Flags : DWORD;
      pszDirectory : LPCSTR
   ) return LSTATUS;
   pragma import (C,RegLoadMUIStringA,"RegLoadMUIStringA");
   function RegLoadMUIStringW(
      hKey_x : HKEY;
      pszValue : LPCWSTR;
      pszOutBuf : LPWSTR;
      cbOutBuf : DWORD;
      pcbData : LPDWORD;
      Flags : DWORD;
      pszDirectory : LPCWSTR
   ) return LSTATUS;
   pragma import (C,RegLoadMUIStringW,"RegLoadMUIStringW");
   function RegLoadAppKeyA(
      lpFile : LPCSTR;
      phkResult : PHKEY;
      samDesired : REGSAM;
      dwOptions : DWORD;
      Reserved : DWORD
   ) return LSTATUS;
   pragma import (C,RegLoadAppKeyA,"RegLoadAppKeyA");
   function RegLoadAppKeyW(
      lpFile : LPCWSTR;
      phkResult : PHKEY;
      samDesired : REGSAM;
      dwOptions : DWORD;
      Reserved : DWORD
   ) return LSTATUS;
   pragma import (C,RegLoadAppKeyW,"RegLoadAppKeyW");
   function InitiateSystemShutdownA(
      lpMachineName : LPSTR;
      lpMessage : LPSTR;
      dwTimeout : DWORD;
      bForceAppsClosed : BOOL;
      bRebootAfterShutdown : BOOL
   ) return BOOL;
   pragma import (C,InitiateSystemShutdownA,"InitiateSystemShutdownA");
   function InitiateSystemShutdownW(
      lpMachineName : LPWSTR;
      lpMessage : LPWSTR;
      dwTimeout : DWORD;
      bForceAppsClosed : BOOL;
      bRebootAfterShutdown : BOOL
   ) return BOOL;
   pragma import (C,InitiateSystemShutdownW,"InitiateSystemShutdownW");
   function AbortSystemShutdownA(
      lpMachineName : LPSTR
   ) return BOOL;
   pragma import (C,AbortSystemShutdownA,"AbortSystemShutdownA");
   function AbortSystemShutdownW(
      lpMachineName : LPWSTR
   ) return BOOL;
   pragma import (C,AbortSystemShutdownW,"AbortSystemShutdownW");
   function InitiateSystemShutdownExA(
      lpMachineName : LPSTR;
      lpMessage : LPSTR;
      dwTimeout : DWORD;
      bForceAppsClosed : BOOL;
      bRebootAfterShutdown : BOOL;
      dwReason : DWORD
   ) return BOOL;
   pragma import (C,InitiateSystemShutdownExA,"InitiateSystemShutdownExA");
   function InitiateSystemShutdownExW(
      lpMachineName : LPWSTR;
      lpMessage : LPWSTR;
      dwTimeout : DWORD;
      bForceAppsClosed : BOOL;
      bRebootAfterShutdown : BOOL;
      dwReason : DWORD
   ) return BOOL;
   pragma import (C,InitiateSystemShutdownExW,"InitiateSystemShutdownExW");
   function InitiateShutdownA(
      lpMachineName : LPSTR;
      lpMessage : LPSTR;
      dwGracePeriod : DWORD;
      dwShutdownFlags : DWORD;
      dwReason : DWORD
   ) return DWORD;
   pragma import (C,InitiateShutdownA,"InitiateShutdownA");
   function InitiateShutdownW(
      lpMachineName : LPWSTR;
      lpMessage : LPWSTR;
      dwGracePeriod : DWORD;
      dwShutdownFlags : DWORD;
      dwReason : DWORD
   ) return DWORD;
   pragma import (C,InitiateShutdownW,"InitiateShutdownW");
   function CheckForHiberboot(
      pHiberboot : PBOOLEAN;
      bClearFlag : BOOLEAN
   ) return DWORD;
   pragma import (C,CheckForHiberboot,"CheckForHiberboot");
   function RegSaveKeyExA(
      hKey_x : HKEY;
      lpFile : LPCSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      Flags : DWORD
   ) return LSTATUS;
   pragma import (C,RegSaveKeyExA,"RegSaveKeyExA");
   function RegSaveKeyExW(
      hKey_x : HKEY;
      lpFile : LPCWSTR;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES;
      Flags : DWORD
   ) return LSTATUS;
   pragma import (C,RegSaveKeyExW,"RegSaveKeyExW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnetwk.h>
   type NETRESOURCEA_x is record
      dwScope : DWORD;
      dwType : DWORD;
      dwDisplayType : DWORD;
      dwUsage : DWORD;
      lpLocalName : LPSTR;
      lpRemoteName : LPSTR;
      lpComment : LPSTR;
      lpProvider : LPSTR;
   end record;
   subtype NETRESOURCEA is NETRESOURCEA_x; -- CXType_Elaborated
   type LPNETRESOURCEA is access NETRESOURCEA_x; -- CXType_Pointer - CXType_Elaborated
   type NETRESOURCEW_x is record
      dwScope : DWORD;
      dwType : DWORD;
      dwDisplayType : DWORD;
      dwUsage : DWORD;
      lpLocalName : LPWSTR;
      lpRemoteName : LPWSTR;
      lpComment : LPWSTR;
      lpProvider : LPWSTR;
   end record;
   subtype NETRESOURCEW is NETRESOURCEW_x; -- CXType_Elaborated
   type LPNETRESOURCEW is access NETRESOURCEW_x; -- CXType_Pointer - CXType_Elaborated
   subtype NETRESOURCE is NETRESOURCEA; -- CXType_Typedef
   subtype LPNETRESOURCE is LPNETRESOURCEA; -- CXType_Typedef
   function WNetAddConnectionA(
      lpRemoteName : LPCSTR;
      lpPassword : LPCSTR;
      lpLocalName : LPCSTR
   ) return DWORD;
   pragma import (C,WNetAddConnectionA,"WNetAddConnectionA");
   function WNetAddConnectionW(
      lpRemoteName : LPCWSTR;
      lpPassword : LPCWSTR;
      lpLocalName : LPCWSTR
   ) return DWORD;
   pragma import (C,WNetAddConnectionW,"WNetAddConnectionW");
   function WNetAddConnection2A(
      lpNetResource_x : LPNETRESOURCEA;
      lpPassword : LPCSTR;
      lpUserName : LPCSTR;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,WNetAddConnection2A,"WNetAddConnection2A");
   function WNetAddConnection2W(
      lpNetResource_x : LPNETRESOURCEW;
      lpPassword : LPCWSTR;
      lpUserName : LPCWSTR;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,WNetAddConnection2W,"WNetAddConnection2W");
   function WNetAddConnection3A(
      hwndOwner : HWND;
      lpNetResource_x : LPNETRESOURCEA;
      lpPassword : LPCSTR;
      lpUserName : LPCSTR;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,WNetAddConnection3A,"WNetAddConnection3A");
   function WNetAddConnection3W(
      hwndOwner : HWND;
      lpNetResource_x : LPNETRESOURCEW;
      lpPassword : LPCWSTR;
      lpUserName : LPCWSTR;
      dwFlags : DWORD
   ) return DWORD;
   pragma import (C,WNetAddConnection3W,"WNetAddConnection3W");
   function WNetCancelConnectionA(
      lpName : LPCSTR;
      fForce : BOOL
   ) return DWORD;
   pragma import (C,WNetCancelConnectionA,"WNetCancelConnectionA");
   function WNetCancelConnectionW(
      lpName : LPCWSTR;
      fForce : BOOL
   ) return DWORD;
   pragma import (C,WNetCancelConnectionW,"WNetCancelConnectionW");
   function WNetCancelConnection2A(
      lpName : LPCSTR;
      dwFlags : DWORD;
      fForce : BOOL
   ) return DWORD;
   pragma import (C,WNetCancelConnection2A,"WNetCancelConnection2A");
   function WNetCancelConnection2W(
      lpName : LPCWSTR;
      dwFlags : DWORD;
      fForce : BOOL
   ) return DWORD;
   pragma import (C,WNetCancelConnection2W,"WNetCancelConnection2W");
   function WNetGetConnectionA(
      lpLocalName : LPCSTR;
      lpRemoteName : LPSTR;
      lpnLength : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetConnectionA,"WNetGetConnectionA");
   function WNetGetConnectionW(
      lpLocalName : LPCWSTR;
      lpRemoteName : LPWSTR;
      lpnLength : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetConnectionW,"WNetGetConnectionW");
   function WNetRestoreSingleConnectionW(
      hwndParent : HWND;
      lpDevice : LPCWSTR;
      fUseUI : BOOL
   ) return DWORD;
   pragma import (C,WNetRestoreSingleConnectionW,"WNetRestoreSingleConnectionW");
   function WNetUseConnectionA(
      hwndOwner : HWND;
      lpNetResource_x : LPNETRESOURCEA;
      lpPassword : LPCSTR;
      lpUserId : LPCSTR;
      dwFlags : DWORD;
      lpAccessName : LPSTR;
      lpBufferSize : LPDWORD;
      lpResult : LPDWORD
   ) return DWORD;
   pragma import (C,WNetUseConnectionA,"WNetUseConnectionA");
   function WNetUseConnectionW(
      hwndOwner : HWND;
      lpNetResource_x : LPNETRESOURCEW;
      lpPassword : LPCWSTR;
      lpUserId : LPCWSTR;
      dwFlags : DWORD;
      lpAccessName : LPWSTR;
      lpBufferSize : LPDWORD;
      lpResult : LPDWORD
   ) return DWORD;
   pragma import (C,WNetUseConnectionW,"WNetUseConnectionW");
   function WNetConnectionDialog(
      hwnd_x : HWND;
      dwType : DWORD
   ) return DWORD;
   pragma import (C,WNetConnectionDialog,"WNetConnectionDialog");
   function WNetDisconnectDialog(
      hwnd_x : HWND;
      dwType : DWORD
   ) return DWORD;
   pragma import (C,WNetDisconnectDialog,"WNetDisconnectDialog");
   type CONNECTDLGSTRUCTA_x is record
      cbStructure : DWORD;
      hwndOwner : HWND;
      lpConnRes : LPNETRESOURCEA;
      dwFlags : DWORD;
      dwDevNum : DWORD;
   end record;
   subtype CONNECTDLGSTRUCTA is CONNECTDLGSTRUCTA_x; -- CXType_Elaborated
   type LPCONNECTDLGSTRUCTA is access CONNECTDLGSTRUCTA_x; -- CXType_Pointer - CXType_Elaborated
   type CONNECTDLGSTRUCTW_x is record
      cbStructure : DWORD;
      hwndOwner : HWND;
      lpConnRes : LPNETRESOURCEW;
      dwFlags : DWORD;
      dwDevNum : DWORD;
   end record;
   subtype CONNECTDLGSTRUCTW is CONNECTDLGSTRUCTW_x; -- CXType_Elaborated
   type LPCONNECTDLGSTRUCTW is access CONNECTDLGSTRUCTW_x; -- CXType_Pointer - CXType_Elaborated
   subtype CONNECTDLGSTRUCT is CONNECTDLGSTRUCTA; -- CXType_Typedef
   subtype LPCONNECTDLGSTRUCT is LPCONNECTDLGSTRUCTA; -- CXType_Typedef
   function WNetConnectionDialog1A(
      lpConnDlgStruct : LPCONNECTDLGSTRUCTA
   ) return DWORD;
   pragma import (C,WNetConnectionDialog1A,"WNetConnectionDialog1A");
   function WNetConnectionDialog1W(
      lpConnDlgStruct : LPCONNECTDLGSTRUCTW
   ) return DWORD;
   pragma import (C,WNetConnectionDialog1W,"WNetConnectionDialog1W");
   type DISCDLGSTRUCTA_x is record
      cbStructure : DWORD;
      hwndOwner : HWND;
      lpLocalName : LPSTR;
      lpRemoteName : LPSTR;
      dwFlags : DWORD;
   end record;
   subtype DISCDLGSTRUCTA is DISCDLGSTRUCTA_x; -- CXType_Elaborated
   type LPDISCDLGSTRUCTA is access DISCDLGSTRUCTA_x; -- CXType_Pointer - CXType_Elaborated
   type DISCDLGSTRUCTW_x is record
      cbStructure : DWORD;
      hwndOwner : HWND;
      lpLocalName : LPWSTR;
      lpRemoteName : LPWSTR;
      dwFlags : DWORD;
   end record;
   subtype DISCDLGSTRUCTW is DISCDLGSTRUCTW_x; -- CXType_Elaborated
   type LPDISCDLGSTRUCTW is access DISCDLGSTRUCTW_x; -- CXType_Pointer - CXType_Elaborated
   subtype DISCDLGSTRUCT is DISCDLGSTRUCTA; -- CXType_Typedef
   subtype LPDISCDLGSTRUCT is LPDISCDLGSTRUCTA; -- CXType_Typedef
   function WNetDisconnectDialog1A(
      lpConnDlgStruct : LPDISCDLGSTRUCTA
   ) return DWORD;
   pragma import (C,WNetDisconnectDialog1A,"WNetDisconnectDialog1A");
   function WNetDisconnectDialog1W(
      lpConnDlgStruct : LPDISCDLGSTRUCTW
   ) return DWORD;
   pragma import (C,WNetDisconnectDialog1W,"WNetDisconnectDialog1W");
   function WNetOpenEnumA(
      dwScope : DWORD;
      dwType : DWORD;
      dwUsage : DWORD;
      lpNetResource_x : LPNETRESOURCEA;
      lphEnum : LPHANDLE
   ) return DWORD;
   pragma import (C,WNetOpenEnumA,"WNetOpenEnumA");
   function WNetOpenEnumW(
      dwScope : DWORD;
      dwType : DWORD;
      dwUsage : DWORD;
      lpNetResource_x : LPNETRESOURCEW;
      lphEnum : LPHANDLE
   ) return DWORD;
   pragma import (C,WNetOpenEnumW,"WNetOpenEnumW");
   function WNetEnumResourceA(
      hEnum : HANDLE;
      lpcCount : LPDWORD;
      lpBuffer : LPVOID;
      lpBufferSize : LPDWORD
   ) return DWORD;
   pragma import (C,WNetEnumResourceA,"WNetEnumResourceA");
   function WNetEnumResourceW(
      hEnum : HANDLE;
      lpcCount : LPDWORD;
      lpBuffer : LPVOID;
      lpBufferSize : LPDWORD
   ) return DWORD;
   pragma import (C,WNetEnumResourceW,"WNetEnumResourceW");
   function WNetCloseEnum(
      hEnum : HANDLE
   ) return DWORD;
   pragma import (C,WNetCloseEnum,"WNetCloseEnum");
   function WNetGetResourceParentA(
      lpNetResource_x : LPNETRESOURCEA;
      lpBuffer : LPVOID;
      lpcbBuffer : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetResourceParentA,"WNetGetResourceParentA");
   function WNetGetResourceParentW(
      lpNetResource_x : LPNETRESOURCEW;
      lpBuffer : LPVOID;
      lpcbBuffer : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetResourceParentW,"WNetGetResourceParentW");
   function WNetGetResourceInformationA(
      lpNetResource_x : LPNETRESOURCEA;
      lpBuffer : LPVOID;
      lpcbBuffer : LPDWORD;
      lplpSystem : access LPSTR
   ) return DWORD;
   pragma import (C,WNetGetResourceInformationA,"WNetGetResourceInformationA");
   function WNetGetResourceInformationW(
      lpNetResource_x : LPNETRESOURCEW;
      lpBuffer : LPVOID;
      lpcbBuffer : LPDWORD;
      lplpSystem : access LPWSTR
   ) return DWORD;
   pragma import (C,WNetGetResourceInformationW,"WNetGetResourceInformationW");
   type UNIVERSAL_NAME_INFOA_x is record
      lpUniversalName : LPSTR;
   end record;
   subtype UNIVERSAL_NAME_INFOA is UNIVERSAL_NAME_INFOA_x; -- CXType_Elaborated
   type LPUNIVERSAL_NAME_INFOA is access UNIVERSAL_NAME_INFOA_x; -- CXType_Pointer - CXType_Elaborated
   type UNIVERSAL_NAME_INFOW_x is record
      lpUniversalName : LPWSTR;
   end record;
   subtype UNIVERSAL_NAME_INFOW is UNIVERSAL_NAME_INFOW_x; -- CXType_Elaborated
   type LPUNIVERSAL_NAME_INFOW is access UNIVERSAL_NAME_INFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype UNIVERSAL_NAME_INFO is UNIVERSAL_NAME_INFOA; -- CXType_Typedef
   subtype LPUNIVERSAL_NAME_INFO is LPUNIVERSAL_NAME_INFOA; -- CXType_Typedef
   type REMOTE_NAME_INFOA_x is record
      lpUniversalName : LPSTR;
      lpConnectionName : LPSTR;
      lpRemainingPath : LPSTR;
   end record;
   subtype REMOTE_NAME_INFOA is REMOTE_NAME_INFOA_x; -- CXType_Elaborated
   type LPREMOTE_NAME_INFOA is access REMOTE_NAME_INFOA_x; -- CXType_Pointer - CXType_Elaborated
   type REMOTE_NAME_INFOW_x is record
      lpUniversalName : LPWSTR;
      lpConnectionName : LPWSTR;
      lpRemainingPath : LPWSTR;
   end record;
   subtype REMOTE_NAME_INFOW is REMOTE_NAME_INFOW_x; -- CXType_Elaborated
   type LPREMOTE_NAME_INFOW is access REMOTE_NAME_INFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype REMOTE_NAME_INFO is REMOTE_NAME_INFOA; -- CXType_Typedef
   subtype LPREMOTE_NAME_INFO is LPREMOTE_NAME_INFOA; -- CXType_Typedef
   function WNetGetUniversalNameA(
      lpLocalPath : LPCSTR;
      dwInfoLevel : DWORD;
      lpBuffer : LPVOID;
      lpBufferSize : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetUniversalNameA,"WNetGetUniversalNameA");
   function WNetGetUniversalNameW(
      lpLocalPath : LPCWSTR;
      dwInfoLevel : DWORD;
      lpBuffer : LPVOID;
      lpBufferSize : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetUniversalNameW,"WNetGetUniversalNameW");
   function WNetGetUserA(
      lpName : LPCSTR;
      lpUserName : LPSTR;
      lpnLength : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetUserA,"WNetGetUserA");
   function WNetGetUserW(
      lpName : LPCWSTR;
      lpUserName : LPWSTR;
      lpnLength : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetUserW,"WNetGetUserW");
   function WNetGetProviderNameA(
      dwNetType : DWORD;
      lpProviderName : LPSTR;
      lpBufferSize : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetProviderNameA,"WNetGetProviderNameA");
   function WNetGetProviderNameW(
      dwNetType : DWORD;
      lpProviderName : LPWSTR;
      lpBufferSize : LPDWORD
   ) return DWORD;
   pragma import (C,WNetGetProviderNameW,"WNetGetProviderNameW");
   type NETINFOSTRUCT_x is record
      cbStructure : DWORD;
      dwProviderVersion : DWORD;
      dwStatus : DWORD;
      dwCharacteristics : DWORD;
      dwHandle : ULONG_PTR;
      wNetType : WORD;
      dwPrinters : DWORD;
      dwDrives : DWORD;
   end record;
   subtype NETINFOSTRUCT is NETINFOSTRUCT_x; -- CXType_Elaborated
   type LPNETINFOSTRUCT is access NETINFOSTRUCT_x; -- CXType_Pointer - CXType_Elaborated
   function WNetGetNetworkInformationA(
      lpProvider : LPCSTR;
      lpNetInfoStruct_x : LPNETINFOSTRUCT
   ) return DWORD;
   pragma import (C,WNetGetNetworkInformationA,"WNetGetNetworkInformationA");
   function WNetGetNetworkInformationW(
      lpProvider : LPCWSTR;
      lpNetInfoStruct_x : LPNETINFOSTRUCT
   ) return DWORD;
   pragma import (C,WNetGetNetworkInformationW,"WNetGetNetworkInformationW");
   function WNetGetLastErrorA(
      lpError : LPDWORD;
      lpErrorBuf : LPSTR;
      nErrorBufSize : DWORD;
      lpNameBuf : LPSTR;
      nNameBufSize : DWORD
   ) return DWORD;
   pragma import (C,WNetGetLastErrorA,"WNetGetLastErrorA");
   function WNetGetLastErrorW(
      lpError : LPDWORD;
      lpErrorBuf : LPWSTR;
      nErrorBufSize : DWORD;
      lpNameBuf : LPWSTR;
      nNameBufSize : DWORD
   ) return DWORD;
   pragma import (C,WNetGetLastErrorW,"WNetGetLastErrorW");
   type NETCONNECTINFOSTRUCT_x is record
      cbStructure : DWORD;
      dwFlags : DWORD;
      dwSpeed : DWORD;
      dwDelay : DWORD;
      dwOptDataSize : DWORD;
   end record;
   subtype NETCONNECTINFOSTRUCT is NETCONNECTINFOSTRUCT_x; -- CXType_Elaborated
   type LPNETCONNECTINFOSTRUCT is access NETCONNECTINFOSTRUCT_x; -- CXType_Pointer - CXType_Elaborated
   function MultinetGetConnectionPerformanceA(
      lpNetResource_x : LPNETRESOURCEA;
      lpNetConnectInfoStruct_x : LPNETCONNECTINFOSTRUCT
   ) return DWORD;
   pragma import (C,MultinetGetConnectionPerformanceA,"MultinetGetConnectionPerformanceA");
   function MultinetGetConnectionPerformanceW(
      lpNetResource_x : LPNETRESOURCEW;
      lpNetConnectInfoStruct_x : LPNETCONNECTINFOSTRUCT
   ) return DWORD;
   pragma import (C,MultinetGetConnectionPerformanceW,"MultinetGetConnectionPerformanceW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\dde.h>
   type DDEACK is record
      bAppReturnCode : Interfaces.C.unsigned_short;
      reserved : Interfaces.C.unsigned_short;
      fBusy : Interfaces.C.unsigned_short;
      fAck : Interfaces.C.unsigned_short;
   end record;
   type DDEADVISE is record
      reserved : Interfaces.C.unsigned_short;
      fDeferUpd : Interfaces.C.unsigned_short;
      fAckReq : Interfaces.C.unsigned_short;
      cfFormat : Interfaces.C.Short;
   end record;
   type DDEDATA is record
      unused : Interfaces.C.unsigned_short;
      fResponse : Interfaces.C.unsigned_short;
      fRelease : Interfaces.C.unsigned_short;
      reserved : Interfaces.C.unsigned_short;
      fAckReq : Interfaces.C.unsigned_short;
      cfFormat : Interfaces.C.Short;
      Value : Void;
   end record;
   type DDEPOKE is record
      unused : Interfaces.C.unsigned_short;
      fRelease : Interfaces.C.unsigned_short;
      fReserved : Interfaces.C.unsigned_short;
      cfFormat : Interfaces.C.Short;
      Value : Void;
   end record;
   type DDELN is record
      unused : Interfaces.C.unsigned_short;
      fRelease : Interfaces.C.unsigned_short;
      fDeferUpd : Interfaces.C.unsigned_short;
      fAckReq : Interfaces.C.unsigned_short;
      cfFormat : Interfaces.C.Short;
   end record;
   type DDEUP is record
      unused : Interfaces.C.unsigned_short;
      fAck : Interfaces.C.unsigned_short;
      fRelease : Interfaces.C.unsigned_short;
      fReserved : Interfaces.C.unsigned_short;
      fAckReq : Interfaces.C.unsigned_short;
      cfFormat : Interfaces.C.Short;
      rgb : Void;
   end record;
   function DdeSetQualityOfService(
      hwndClient : HWND;
      pqosNew : access constant SECURITY_QUALITY_OF_SERVICE;
      pqosPrev : PSECURITY_QUALITY_OF_SERVICE
   ) return BOOL;
   pragma import (C,DdeSetQualityOfService,"DdeSetQualityOfService");
   function ImpersonateDdeClientWindow(
      hWndClient : HWND;
      hWndServer : HWND
   ) return BOOL;
   pragma import (C,ImpersonateDdeClientWindow,"ImpersonateDdeClientWindow");
   function PackDDElParam(
      msg_x : UINT;
      uiLo : UINT_PTR;
      uiHi : UINT_PTR
   ) return LPARAM;
   pragma import (C,PackDDElParam,"PackDDElParam");
   function UnpackDDElParam(
      msg_x : UINT;
      lParam_x : LPARAM;
      puiLo : PUINT_PTR;
      puiHi : PUINT_PTR
   ) return BOOL;
   pragma import (C,UnpackDDElParam,"UnpackDDElParam");
   function FreeDDElParam(
      msg_x : UINT;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,FreeDDElParam,"FreeDDElParam");
   function ReuseDDElParam(
      lParam_x : LPARAM;
      msgIn : UINT;
      msgOut : UINT;
      uiLo : UINT_PTR;
      uiHi : UINT_PTR
   ) return LPARAM;
   pragma import (C,ReuseDDElParam,"ReuseDDElParam");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\ddeml.h>
   type HCONVLIST_x is record
      unused : Interfaces.C.Int;
   end record;
   type HCONVLIST is access HCONVLIST_x; -- CXType_Pointer - CXType_Elaborated
   type HCONV_x is record
      unused : Interfaces.C.Int;
   end record;
   type HCONV is access HCONV_x; -- CXType_Pointer - CXType_Elaborated
   type HSZ_x is record
      unused : Interfaces.C.Int;
   end record;
   type HSZ is access HSZ_x; -- CXType_Pointer - CXType_Elaborated
   type HDDEDATA_x is record
      unused : Interfaces.C.Int;
   end record;
   type HDDEDATA is access HDDEDATA_x; -- CXType_Pointer - CXType_Elaborated
   type tagHSZPAIR is record
      hszSvc : HSZ;
      hszTopic : HSZ;
   end record;
   subtype HSZPAIR is tagHSZPAIR; -- CXType_Elaborated
   type PHSZPAIR is access tagHSZPAIR; -- CXType_Pointer - CXType_Elaborated
   type tagCONVCONTEXT is record
      cb : UINT;
      wFlags : UINT;
      wCountryID : UINT;
      iCodePage : Interfaces.C.Int;
      dwLangID : DWORD;
      dwSecurity : DWORD;
      qos : SECURITY_QUALITY_OF_SERVICE;
   end record;
   subtype CONVCONTEXT is tagCONVCONTEXT; -- CXType_Elaborated
   type PCONVCONTEXT is access tagCONVCONTEXT; -- CXType_Pointer - CXType_Elaborated
   type tagCONVINFO is record
      cb : DWORD;
      hUser : DWORD_PTR;
      hConvPartner : HCONV;
      hszSvcPartner : HSZ;
      hszServiceReq : HSZ;
      hszTopic : HSZ;
      hszItem : HSZ;
      wFmt : UINT;
      wType : UINT;
      wStatus : UINT;
      wConvst : UINT;
      wLastError : UINT;
      hConvList_x : HCONVLIST;
      ConvCtxt : CONVCONTEXT;
      hwnd_x : HWND;
      hwndPartner : HWND;
   end record;
   subtype CONVINFO is tagCONVINFO; -- CXType_Elaborated
   type PCONVINFO is access tagCONVINFO; -- CXType_Pointer - CXType_Elaborated
   subtype FNCALLBACK is System.Address; -- [FIXME - CXType_FunctionProto] HDDEDATA (UINT, UINT, HCONV, HSZ, HSZ, HDDEDATA, ULONG_PTR, ULONG_PTR)
   subtype PFNCALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] HDDEDATA (UINT, UINT, HCONV, HSZ, HSZ, HDDEDATA, ULONG_PTR, ULONG_PTR)
   function DdeInitializeA(
      pidInst : LPDWORD;
      pfnCallback_x : PFNCALLBACK;
      afCmd : DWORD;
      ulRes : DWORD
   ) return UINT;
   pragma import (C,DdeInitializeA,"DdeInitializeA");
   function DdeInitializeW(
      pidInst : LPDWORD;
      pfnCallback_x : PFNCALLBACK;
      afCmd : DWORD;
      ulRes : DWORD
   ) return UINT;
   pragma import (C,DdeInitializeW,"DdeInitializeW");
   function DdeUninitialize(
      idInst : DWORD
   ) return BOOL;
   pragma import (C,DdeUninitialize,"DdeUninitialize");
   function DdeConnectList(
      idInst : DWORD;
      hszService : HSZ;
      hszTopic : HSZ;
      hConvList_x : HCONVLIST;
      pCC : PCONVCONTEXT
   ) return HCONVLIST;
   pragma import (C,DdeConnectList,"DdeConnectList");
   function DdeQueryNextServer(
      hConvList_x : HCONVLIST;
      hConvPrev : HCONV
   ) return HCONV;
   pragma import (C,DdeQueryNextServer,"DdeQueryNextServer");
   function DdeDisconnectList(
      hConvList_x : HCONVLIST
   ) return BOOL;
   pragma import (C,DdeDisconnectList,"DdeDisconnectList");
   function DdeConnect(
      idInst : DWORD;
      hszService : HSZ;
      hszTopic : HSZ;
      pCC : PCONVCONTEXT
   ) return HCONV;
   pragma import (C,DdeConnect,"DdeConnect");
   function DdeDisconnect(
      hConv_x : HCONV
   ) return BOOL;
   pragma import (C,DdeDisconnect,"DdeDisconnect");
   function DdeReconnect(
      hConv_x : HCONV
   ) return HCONV;
   pragma import (C,DdeReconnect,"DdeReconnect");
   function DdeQueryConvInfo(
      hConv_x : HCONV;
      idTransaction : DWORD;
      pConvInfo_x : PCONVINFO
   ) return UINT;
   pragma import (C,DdeQueryConvInfo,"DdeQueryConvInfo");
   function DdeSetUserHandle(
      hConv_x : HCONV;
      id : DWORD;
      hUser : DWORD_PTR
   ) return BOOL;
   pragma import (C,DdeSetUserHandle,"DdeSetUserHandle");
   function DdeAbandonTransaction(
      idInst : DWORD;
      hConv_x : HCONV;
      idTransaction : DWORD
   ) return BOOL;
   pragma import (C,DdeAbandonTransaction,"DdeAbandonTransaction");
   function DdePostAdvise(
      idInst : DWORD;
      hszTopic : HSZ;
      hszItem : HSZ
   ) return BOOL;
   pragma import (C,DdePostAdvise,"DdePostAdvise");
   function DdeEnableCallback(
      idInst : DWORD;
      hConv_x : HCONV;
      wCmd : UINT
   ) return BOOL;
   pragma import (C,DdeEnableCallback,"DdeEnableCallback");
   function DdeImpersonateClient(
      hConv_x : HCONV
   ) return BOOL;
   pragma import (C,DdeImpersonateClient,"DdeImpersonateClient");
   function DdeNameService(
      idInst : DWORD;
      hsz1 : HSZ;
      hsz2 : HSZ;
      afCmd : UINT
   ) return HDDEDATA;
   pragma import (C,DdeNameService,"DdeNameService");
   function DdeClientTransaction(
      pData : LPBYTE;
      cbData : DWORD;
      hConv_x : HCONV;
      hszItem : HSZ;
      wFmt : UINT;
      wType : UINT;
      dwTimeout : DWORD;
      pdwResult : LPDWORD
   ) return HDDEDATA;
   pragma import (C,DdeClientTransaction,"DdeClientTransaction");
   function DdeCreateDataHandle(
      idInst : DWORD;
      pSrc : LPBYTE;
      cb : DWORD;
      cbOff : DWORD;
      hszItem : HSZ;
      wFmt : UINT;
      afCmd : UINT
   ) return HDDEDATA;
   pragma import (C,DdeCreateDataHandle,"DdeCreateDataHandle");
   function DdeAddData(
      hData : HDDEDATA;
      pSrc : LPBYTE;
      cb : DWORD;
      cbOff : DWORD
   ) return HDDEDATA;
   pragma import (C,DdeAddData,"DdeAddData");
   function DdeGetData(
      hData : HDDEDATA;
      pDst : LPBYTE;
      cbMax : DWORD;
      cbOff : DWORD
   ) return DWORD;
   pragma import (C,DdeGetData,"DdeGetData");
   function DdeAccessData(
      hData : HDDEDATA;
      pcbDataSize : LPDWORD
   ) return LPBYTE;
   pragma import (C,DdeAccessData,"DdeAccessData");
   function DdeUnaccessData(
      hData : HDDEDATA
   ) return BOOL;
   pragma import (C,DdeUnaccessData,"DdeUnaccessData");
   function DdeFreeDataHandle(
      hData : HDDEDATA
   ) return BOOL;
   pragma import (C,DdeFreeDataHandle,"DdeFreeDataHandle");
   function DdeGetLastError(
      idInst : DWORD
   ) return UINT;
   pragma import (C,DdeGetLastError,"DdeGetLastError");
   function DdeCreateStringHandleA(
      idInst : DWORD;
      psz_x : LPCSTR;
      iCodePage : Interfaces.C.Int
   ) return HSZ;
   pragma import (C,DdeCreateStringHandleA,"DdeCreateStringHandleA");
   function DdeCreateStringHandleW(
      idInst : DWORD;
      psz_x : LPCWSTR;
      iCodePage : Interfaces.C.Int
   ) return HSZ;
   pragma import (C,DdeCreateStringHandleW,"DdeCreateStringHandleW");
   function DdeQueryStringA(
      idInst : DWORD;
      hsz_x : HSZ;
      psz_x : LPSTR;
      cchMax : DWORD;
      iCodePage : Interfaces.C.Int
   ) return DWORD;
   pragma import (C,DdeQueryStringA,"DdeQueryStringA");
   function DdeQueryStringW(
      idInst : DWORD;
      hsz_x : HSZ;
      psz_x : LPWSTR;
      cchMax : DWORD;
      iCodePage : Interfaces.C.Int
   ) return DWORD;
   pragma import (C,DdeQueryStringW,"DdeQueryStringW");
   function DdeFreeStringHandle(
      idInst : DWORD;
      hsz_x : HSZ
   ) return BOOL;
   pragma import (C,DdeFreeStringHandle,"DdeFreeStringHandle");
   function DdeKeepStringHandle(
      idInst : DWORD;
      hsz_x : HSZ
   ) return BOOL;
   pragma import (C,DdeKeepStringHandle,"DdeKeepStringHandle");
   function DdeCmpStringHandles(
      hsz1 : HSZ;
      hsz2 : HSZ
   ) return Interfaces.C.Int;
   pragma import (C,DdeCmpStringHandles,"DdeCmpStringHandles");
   type tagDDEML_MSG_HOOK_DATA is record
      uiLo : UINT_PTR;
      uiHi : UINT_PTR;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype DDEML_MSG_HOOK_DATA is tagDDEML_MSG_HOOK_DATA; -- CXType_Elaborated
   type PDDEML_MSG_HOOK_DATA is access tagDDEML_MSG_HOOK_DATA; -- CXType_Pointer - CXType_Elaborated
   type tagMONMSGSTRUCT is record
      cb : UINT;
      hwndTo : HWND;
      dwTime : DWORD;
      hTask_x : HANDLE;
      wMsg : UINT;
      wParam_x : WPARAM;
      lParam_x : LPARAM;
      dmhd : DDEML_MSG_HOOK_DATA;
   end record;
   subtype MONMSGSTRUCT is tagMONMSGSTRUCT; -- CXType_Elaborated
   type PMONMSGSTRUCT is access tagMONMSGSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMONCBSTRUCT is record
      cb : UINT;
      dwTime : DWORD;
      hTask_x : HANDLE;
      dwRet : DWORD;
      wType : UINT;
      wFmt : UINT;
      hConv_x : HCONV;
      hsz1 : HSZ;
      hsz2 : HSZ;
      hData : HDDEDATA;
      dwData1 : ULONG_PTR;
      dwData2 : ULONG_PTR;
      cc : CONVCONTEXT;
      cbData : DWORD;
      Data : Void;
   end record;
   subtype MONCBSTRUCT is tagMONCBSTRUCT; -- CXType_Elaborated
   type PMONCBSTRUCT is access tagMONCBSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMONHSZSTRUCTA is record
      cb : UINT;
      fsAction : BOOL;
      dwTime : DWORD;
      hsz_x : HSZ;
      hTask_x : HANDLE;
      str : Void;
   end record;
   subtype MONHSZSTRUCTA is tagMONHSZSTRUCTA; -- CXType_Elaborated
   type PMONHSZSTRUCTA is access tagMONHSZSTRUCTA; -- CXType_Pointer - CXType_Elaborated
   type tagMONHSZSTRUCTW is record
      cb : UINT;
      fsAction : BOOL;
      dwTime : DWORD;
      hsz_x : HSZ;
      hTask_x : HANDLE;
      str : Void;
   end record;
   subtype MONHSZSTRUCTW is tagMONHSZSTRUCTW; -- CXType_Elaborated
   type PMONHSZSTRUCTW is access tagMONHSZSTRUCTW; -- CXType_Pointer - CXType_Elaborated
   subtype MONHSZSTRUCT is MONHSZSTRUCTA; -- CXType_Typedef
   subtype PMONHSZSTRUCT is PMONHSZSTRUCTA; -- CXType_Typedef
   type tagMONERRSTRUCT is record
      cb : UINT;
      wLastError : UINT;
      dwTime : DWORD;
      hTask_x : HANDLE;
   end record;
   subtype MONERRSTRUCT is tagMONERRSTRUCT; -- CXType_Elaborated
   type PMONERRSTRUCT is access tagMONERRSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMONLINKSTRUCT is record
      cb : UINT;
      dwTime : DWORD;
      hTask_x : HANDLE;
      fEstablished : BOOL;
      fNoData : BOOL;
      hszSvc : HSZ;
      hszTopic : HSZ;
      hszItem : HSZ;
      wFmt : UINT;
      fServer : BOOL;
      hConvServer : HCONV;
      hConvClient : HCONV;
   end record;
   subtype MONLINKSTRUCT is tagMONLINKSTRUCT; -- CXType_Elaborated
   type PMONLINKSTRUCT is access tagMONLINKSTRUCT; -- CXType_Pointer - CXType_Elaborated
   type tagMONCONVSTRUCT is record
      cb : UINT;
      fConnect : BOOL;
      dwTime : DWORD;
      hTask_x : HANDLE;
      hszSvc : HSZ;
      hszTopic : HSZ;
      hConvClient : HCONV;
      hConvServer : HCONV;
   end record;
   subtype MONCONVSTRUCT is tagMONCONVSTRUCT; -- CXType_Elaborated
   type PMONCONVSTRUCT is access tagMONCONVSTRUCT; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\dlgs.h>
   type tagCRGB is record
      bRed : BYTE;
      bGreen : BYTE;
      bBlue : BYTE;
      bExtra : BYTE;
   end record;
   subtype CRGB is tagCRGB; -- CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\lzexpand.h>
   function LZStart return INT;
   pragma import (C,LZStart,"LZStart");
   procedure LZDone;
   pragma import (C,LZDone,"LZDone");
   function CopyLZFile(
      hfSource : INT;
      hfDest : INT
   ) return LONG;
   pragma import (C,CopyLZFile,"CopyLZFile");
   function LZCopy(
      hfSource : INT;
      hfDest : INT
   ) return LONG;
   pragma import (C,LZCopy,"LZCopy");
   function LZInit(
      hfSource : INT
   ) return INT;
   pragma import (C,LZInit,"LZInit");
   function GetExpandedNameA(
      lpszSource : LPSTR;
      lpszBuffer : LPSTR
   ) return INT;
   pragma import (C,GetExpandedNameA,"GetExpandedNameA");
   function GetExpandedNameW(
      lpszSource : LPWSTR;
      lpszBuffer : LPWSTR
   ) return INT;
   pragma import (C,GetExpandedNameW,"GetExpandedNameW");
   function LZOpenFileA(
      lpFileName : LPSTR;
      lpReOpenBuf : LPOFSTRUCT;
      wStyle : WORD
   ) return INT;
   pragma import (C,LZOpenFileA,"LZOpenFileA");
   function LZOpenFileW(
      lpFileName : LPWSTR;
      lpReOpenBuf : LPOFSTRUCT;
      wStyle : WORD
   ) return INT;
   pragma import (C,LZOpenFileW,"LZOpenFileW");
   function LZSeek(
      hFile_x : INT;
      lOffset : LONG;
      iOrigin : INT
   ) return LONG;
   pragma import (C,LZSeek,"LZSeek");
   function LZRead(
      hFile_x : INT;
      lpBuffer : access CHAR;
      cbRead : INT
   ) return INT;
   pragma import (C,LZRead,"LZRead");
   procedure LZClose(
      hFile_x : INT
   );
   pragma import (C,LZClose,"LZClose");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mmsyscom.h>
   subtype MMVERSION is UINT; -- CXType_Typedef
   subtype MMRESULT is UINT; -- CXType_Typedef
   type LPUINT is access UINT; -- CXType_Pointer - CXType_Typedef
   type mmtime_tag is record
      wType : UINT;
      u : Void;
   end record;
   subtype MMTIME is mmtime_tag; -- CXType_Elaborated
   type PMMTIME is access mmtime_tag; -- CXType_Pointer - CXType_Elaborated
   type NPMMTIME is access mmtime_tag; -- CXType_Pointer - CXType_Elaborated
   type LPMMTIME is access mmtime_tag; -- CXType_Pointer - CXType_Elaborated
   type HDRVR_x is record
      unused : Interfaces.C.Int;
   end record;
   type HDRVR is access HDRVR_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRVCALLBACK is System.Address; -- [FIXME - CXType_Unexposed]
   subtype LPDRVCALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HDRVR, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR)
   subtype PDRVCALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HDRVR, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR)
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mmsystem.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mciapi.h>
   subtype MCIERROR is DWORD; -- CXType_Typedef
   subtype MCIDEVICEID is UINT; -- CXType_Typedef
   subtype YIELDPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT (MCIDEVICEID, DWORD)
   function mciSendCommandA(
      mciId : MCIDEVICEID;
      uMsg : UINT;
      dwParam1 : DWORD_PTR;
      dwParam2 : DWORD_PTR
   ) return MCIERROR;
   pragma import (C,mciSendCommandA,"mciSendCommandA");
   function mciSendCommandW(
      mciId : MCIDEVICEID;
      uMsg : UINT;
      dwParam1 : DWORD_PTR;
      dwParam2 : DWORD_PTR
   ) return MCIERROR;
   pragma import (C,mciSendCommandW,"mciSendCommandW");
   function mciSendStringA(
      lpstrCommand : LPCSTR;
      lpstrReturnString : LPSTR;
      uReturnLength : UINT;
      hwndCallback : HWND
   ) return MCIERROR;
   pragma import (C,mciSendStringA,"mciSendStringA");
   function mciSendStringW(
      lpstrCommand : LPCWSTR;
      lpstrReturnString : LPWSTR;
      uReturnLength : UINT;
      hwndCallback : HWND
   ) return MCIERROR;
   pragma import (C,mciSendStringW,"mciSendStringW");
   function mciGetDeviceIDA(
      pszDevice : LPCSTR
   ) return MCIDEVICEID;
   pragma import (C,mciGetDeviceIDA,"mciGetDeviceIDA");
   function mciGetDeviceIDW(
      pszDevice : LPCWSTR
   ) return MCIDEVICEID;
   pragma import (C,mciGetDeviceIDW,"mciGetDeviceIDW");
   function mciGetDeviceIDFromElementIDA(
      dwElementID : DWORD;
      lpstrType : LPCSTR
   ) return MCIDEVICEID;
   pragma import (C,mciGetDeviceIDFromElementIDA,"mciGetDeviceIDFromElementIDA");
   function mciGetDeviceIDFromElementIDW(
      dwElementID : DWORD;
      lpstrType : LPCWSTR
   ) return MCIDEVICEID;
   pragma import (C,mciGetDeviceIDFromElementIDW,"mciGetDeviceIDFromElementIDW");
   function mciGetErrorStringA(
      mcierr : MCIERROR;
      pszText : LPSTR;
      cchText : UINT
   ) return BOOL;
   pragma import (C,mciGetErrorStringA,"mciGetErrorStringA");
   function mciGetErrorStringW(
      mcierr : MCIERROR;
      pszText : LPWSTR;
      cchText : UINT
   ) return BOOL;
   pragma import (C,mciGetErrorStringW,"mciGetErrorStringW");
   function mciSetYieldProc(
      mciId : MCIDEVICEID;
      fpYieldProc : YIELDPROC;
      dwYieldData : DWORD
   ) return BOOL;
   pragma import (C,mciSetYieldProc,"mciSetYieldProc");
   function mciGetCreatorTask(
      mciId : MCIDEVICEID
   ) return HTASK;
   pragma import (C,mciGetCreatorTask,"mciGetCreatorTask");
   function mciGetYieldProc(
      mciId : MCIDEVICEID;
      pdwYieldData : LPDWORD
   ) return YIELDPROC;
   pragma import (C,mciGetYieldProc,"mciGetYieldProc");
   type tagMCI_GENERIC_PARMS is record
      dwCallback : DWORD_PTR;
   end record;
   subtype MCI_GENERIC_PARMS is tagMCI_GENERIC_PARMS; -- CXType_Elaborated
   type PMCI_GENERIC_PARMS is access tagMCI_GENERIC_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_GENERIC_PARMS is access tagMCI_GENERIC_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OPEN_PARMSA is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCSTR;
      lpstrElementName : LPCSTR;
      lpstrAlias : LPCSTR;
   end record;
   subtype MCI_OPEN_PARMSA is tagMCI_OPEN_PARMSA; -- CXType_Elaborated
   type PMCI_OPEN_PARMSA is access tagMCI_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OPEN_PARMSA is access tagMCI_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OPEN_PARMSW is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCWSTR;
      lpstrElementName : LPCWSTR;
      lpstrAlias : LPCWSTR;
   end record;
   subtype MCI_OPEN_PARMSW is tagMCI_OPEN_PARMSW; -- CXType_Elaborated
   type PMCI_OPEN_PARMSW is access tagMCI_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OPEN_PARMSW is access tagMCI_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_OPEN_PARMS is MCI_OPEN_PARMSA; -- CXType_Typedef
   subtype PMCI_OPEN_PARMS is PMCI_OPEN_PARMSA; -- CXType_Typedef
   subtype LPMCI_OPEN_PARMS is LPMCI_OPEN_PARMSA; -- CXType_Typedef
   type tagMCI_PLAY_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrom : DWORD;
      dwTo : DWORD;
   end record;
   subtype MCI_PLAY_PARMS is tagMCI_PLAY_PARMS; -- CXType_Elaborated
   type PMCI_PLAY_PARMS is access tagMCI_PLAY_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_PLAY_PARMS is access tagMCI_PLAY_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_SEEK_PARMS is record
      dwCallback : DWORD_PTR;
      dwTo : DWORD;
   end record;
   subtype MCI_SEEK_PARMS is tagMCI_SEEK_PARMS; -- CXType_Elaborated
   type PMCI_SEEK_PARMS is access tagMCI_SEEK_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SEEK_PARMS is access tagMCI_SEEK_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_STATUS_PARMS is record
      dwCallback : DWORD_PTR;
      dwReturn : DWORD_PTR;
      dwItem : DWORD;
      dwTrack : DWORD;
   end record;
   subtype MCI_STATUS_PARMS is tagMCI_STATUS_PARMS; -- CXType_Elaborated
   type PMCI_STATUS_PARMS is access tagMCI_STATUS_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_STATUS_PARMS is access tagMCI_STATUS_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_INFO_PARMSA is record
      dwCallback : DWORD_PTR;
      lpstrReturn : LPSTR;
      dwRetSize : DWORD;
   end record;
   subtype MCI_INFO_PARMSA is tagMCI_INFO_PARMSA; -- CXType_Elaborated
   type LPMCI_INFO_PARMSA is access tagMCI_INFO_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_INFO_PARMSW is record
      dwCallback : DWORD_PTR;
      lpstrReturn : LPWSTR;
      dwRetSize : DWORD;
   end record;
   subtype MCI_INFO_PARMSW is tagMCI_INFO_PARMSW; -- CXType_Elaborated
   type LPMCI_INFO_PARMSW is access tagMCI_INFO_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_INFO_PARMS is MCI_INFO_PARMSA; -- CXType_Typedef
   subtype LPMCI_INFO_PARMS is LPMCI_INFO_PARMSA; -- CXType_Typedef
   type tagMCI_GETDEVCAPS_PARMS is record
      dwCallback : DWORD_PTR;
      dwReturn : DWORD;
      dwItem : DWORD;
   end record;
   subtype MCI_GETDEVCAPS_PARMS is tagMCI_GETDEVCAPS_PARMS; -- CXType_Elaborated
   type PMCI_GETDEVCAPS_PARMS is access tagMCI_GETDEVCAPS_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_GETDEVCAPS_PARMS is access tagMCI_GETDEVCAPS_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_SYSINFO_PARMSA is record
      dwCallback : DWORD_PTR;
      lpstrReturn : LPSTR;
      dwRetSize : DWORD;
      dwNumber : DWORD;
      wDeviceType : UINT;
   end record;
   subtype MCI_SYSINFO_PARMSA is tagMCI_SYSINFO_PARMSA; -- CXType_Elaborated
   type PMCI_SYSINFO_PARMSA is access tagMCI_SYSINFO_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SYSINFO_PARMSA is access tagMCI_SYSINFO_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_SYSINFO_PARMSW is record
      dwCallback : DWORD_PTR;
      lpstrReturn : LPWSTR;
      dwRetSize : DWORD;
      dwNumber : DWORD;
      wDeviceType : UINT;
   end record;
   subtype MCI_SYSINFO_PARMSW is tagMCI_SYSINFO_PARMSW; -- CXType_Elaborated
   type PMCI_SYSINFO_PARMSW is access tagMCI_SYSINFO_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SYSINFO_PARMSW is access tagMCI_SYSINFO_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_SYSINFO_PARMS is MCI_SYSINFO_PARMSA; -- CXType_Typedef
   subtype PMCI_SYSINFO_PARMS is PMCI_SYSINFO_PARMSA; -- CXType_Typedef
   subtype LPMCI_SYSINFO_PARMS is LPMCI_SYSINFO_PARMSA; -- CXType_Typedef
   type tagMCI_SET_PARMS is record
      dwCallback : DWORD_PTR;
      dwTimeFormat : DWORD;
      dwAudio : DWORD;
   end record;
   subtype MCI_SET_PARMS is tagMCI_SET_PARMS; -- CXType_Elaborated
   type PMCI_SET_PARMS is access tagMCI_SET_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SET_PARMS is access tagMCI_SET_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_BREAK_PARMS is record
      dwCallback : DWORD_PTR;
      nVirtKey : Interfaces.C.Int;
      hwndBreak : HWND;
   end record;
   subtype MCI_BREAK_PARMS is tagMCI_BREAK_PARMS; -- CXType_Elaborated
   type PMCI_BREAK_PARMS is access tagMCI_BREAK_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_BREAK_PARMS is access tagMCI_BREAK_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_SAVE_PARMSA is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCSTR;
   end record;
   subtype MCI_SAVE_PARMSA is tagMCI_SAVE_PARMSA; -- CXType_Elaborated
   type PMCI_SAVE_PARMSA is access tagMCI_SAVE_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SAVE_PARMSA is access tagMCI_SAVE_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_SAVE_PARMSW is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCWSTR;
   end record;
   subtype MCI_SAVE_PARMSW is tagMCI_SAVE_PARMSW; -- CXType_Elaborated
   type PMCI_SAVE_PARMSW is access tagMCI_SAVE_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SAVE_PARMSW is access tagMCI_SAVE_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_SAVE_PARMS is MCI_SAVE_PARMSA; -- CXType_Typedef
   subtype PMCI_SAVE_PARMS is PMCI_SAVE_PARMSA; -- CXType_Typedef
   subtype LPMCI_SAVE_PARMS is LPMCI_SAVE_PARMSA; -- CXType_Typedef
   type tagMCI_LOAD_PARMSA is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCSTR;
   end record;
   subtype MCI_LOAD_PARMSA is tagMCI_LOAD_PARMSA; -- CXType_Elaborated
   type PMCI_LOAD_PARMSA is access tagMCI_LOAD_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_LOAD_PARMSA is access tagMCI_LOAD_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_LOAD_PARMSW is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCWSTR;
   end record;
   subtype MCI_LOAD_PARMSW is tagMCI_LOAD_PARMSW; -- CXType_Elaborated
   type PMCI_LOAD_PARMSW is access tagMCI_LOAD_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_LOAD_PARMSW is access tagMCI_LOAD_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_LOAD_PARMS is MCI_LOAD_PARMSA; -- CXType_Typedef
   subtype PMCI_LOAD_PARMS is PMCI_LOAD_PARMSA; -- CXType_Typedef
   subtype LPMCI_LOAD_PARMS is LPMCI_LOAD_PARMSA; -- CXType_Typedef
   type tagMCI_RECORD_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrom : DWORD;
      dwTo : DWORD;
   end record;
   subtype MCI_RECORD_PARMS is tagMCI_RECORD_PARMS; -- CXType_Elaborated
   type LPMCI_RECORD_PARMS is access tagMCI_RECORD_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_VD_PLAY_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrom : DWORD;
      dwTo : DWORD;
      dwSpeed : DWORD;
   end record;
   subtype MCI_VD_PLAY_PARMS is tagMCI_VD_PLAY_PARMS; -- CXType_Elaborated
   type PMCI_VD_PLAY_PARMS is access tagMCI_VD_PLAY_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_VD_PLAY_PARMS is access tagMCI_VD_PLAY_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_VD_STEP_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrames : DWORD;
   end record;
   subtype MCI_VD_STEP_PARMS is tagMCI_VD_STEP_PARMS; -- CXType_Elaborated
   type PMCI_VD_STEP_PARMS is access tagMCI_VD_STEP_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_VD_STEP_PARMS is access tagMCI_VD_STEP_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_VD_ESCAPE_PARMSA is record
      dwCallback : DWORD_PTR;
      lpstrCommand : LPCSTR;
   end record;
   subtype MCI_VD_ESCAPE_PARMSA is tagMCI_VD_ESCAPE_PARMSA; -- CXType_Elaborated
   type PMCI_VD_ESCAPE_PARMSA is access tagMCI_VD_ESCAPE_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_VD_ESCAPE_PARMSA is access tagMCI_VD_ESCAPE_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_VD_ESCAPE_PARMSW is record
      dwCallback : DWORD_PTR;
      lpstrCommand : LPCWSTR;
   end record;
   subtype MCI_VD_ESCAPE_PARMSW is tagMCI_VD_ESCAPE_PARMSW; -- CXType_Elaborated
   type PMCI_VD_ESCAPE_PARMSW is access tagMCI_VD_ESCAPE_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_VD_ESCAPE_PARMSW is access tagMCI_VD_ESCAPE_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_VD_ESCAPE_PARMS is MCI_VD_ESCAPE_PARMSA; -- CXType_Typedef
   subtype PMCI_VD_ESCAPE_PARMS is PMCI_VD_ESCAPE_PARMSA; -- CXType_Typedef
   subtype LPMCI_VD_ESCAPE_PARMS is LPMCI_VD_ESCAPE_PARMSA; -- CXType_Typedef
   type tagMCI_WAVE_OPEN_PARMSA is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCSTR;
      lpstrElementName : LPCSTR;
      lpstrAlias : LPCSTR;
      dwBufferSeconds : DWORD;
   end record;
   subtype MCI_WAVE_OPEN_PARMSA is tagMCI_WAVE_OPEN_PARMSA; -- CXType_Elaborated
   type PMCI_WAVE_OPEN_PARMSA is access tagMCI_WAVE_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_WAVE_OPEN_PARMSA is access tagMCI_WAVE_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_WAVE_OPEN_PARMSW is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCWSTR;
      lpstrElementName : LPCWSTR;
      lpstrAlias : LPCWSTR;
      dwBufferSeconds : DWORD;
   end record;
   subtype MCI_WAVE_OPEN_PARMSW is tagMCI_WAVE_OPEN_PARMSW; -- CXType_Elaborated
   type PMCI_WAVE_OPEN_PARMSW is access tagMCI_WAVE_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_WAVE_OPEN_PARMSW is access tagMCI_WAVE_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_WAVE_OPEN_PARMS is MCI_WAVE_OPEN_PARMSA; -- CXType_Typedef
   subtype PMCI_WAVE_OPEN_PARMS is PMCI_WAVE_OPEN_PARMSA; -- CXType_Typedef
   subtype LPMCI_WAVE_OPEN_PARMS is LPMCI_WAVE_OPEN_PARMSA; -- CXType_Typedef
   type tagMCI_WAVE_DELETE_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrom : DWORD;
      dwTo : DWORD;
   end record;
   subtype MCI_WAVE_DELETE_PARMS is tagMCI_WAVE_DELETE_PARMS; -- CXType_Elaborated
   type PMCI_WAVE_DELETE_PARMS is access tagMCI_WAVE_DELETE_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_WAVE_DELETE_PARMS is access tagMCI_WAVE_DELETE_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_WAVE_SET_PARMS is record
      dwCallback : DWORD_PTR;
      dwTimeFormat : DWORD;
      dwAudio : DWORD;
      wInput : UINT;
      wOutput : UINT;
      wFormatTag : WORD;
      wReserved2 : WORD;
      nChannels : WORD;
      wReserved3 : WORD;
      nSamplesPerSec : DWORD;
      nAvgBytesPerSec : DWORD;
      nBlockAlign : WORD;
      wReserved4 : WORD;
      wBitsPerSample : WORD;
      wReserved5 : WORD;
   end record;
   subtype MCI_WAVE_SET_PARMS is tagMCI_WAVE_SET_PARMS; -- CXType_Elaborated
   type PMCI_WAVE_SET_PARMS is access tagMCI_WAVE_SET_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_WAVE_SET_PARMS is access tagMCI_WAVE_SET_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_SEQ_SET_PARMS is record
      dwCallback : DWORD_PTR;
      dwTimeFormat : DWORD;
      dwAudio : DWORD;
      dwTempo : DWORD;
      dwPort : DWORD;
      dwSlave : DWORD;
      dwMaster : DWORD;
      dwOffset : DWORD;
   end record;
   subtype MCI_SEQ_SET_PARMS is tagMCI_SEQ_SET_PARMS; -- CXType_Elaborated
   type PMCI_SEQ_SET_PARMS is access tagMCI_SEQ_SET_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_SEQ_SET_PARMS is access tagMCI_SEQ_SET_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_ANIM_OPEN_PARMSA is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCSTR;
      lpstrElementName : LPCSTR;
      lpstrAlias : LPCSTR;
      dwStyle : DWORD;
      hWndParent : HWND;
   end record;
   subtype MCI_ANIM_OPEN_PARMSA is tagMCI_ANIM_OPEN_PARMSA; -- CXType_Elaborated
   type PMCI_ANIM_OPEN_PARMSA is access tagMCI_ANIM_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_OPEN_PARMSA is access tagMCI_ANIM_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_ANIM_OPEN_PARMSW is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCWSTR;
      lpstrElementName : LPCWSTR;
      lpstrAlias : LPCWSTR;
      dwStyle : DWORD;
      hWndParent : HWND;
   end record;
   subtype MCI_ANIM_OPEN_PARMSW is tagMCI_ANIM_OPEN_PARMSW; -- CXType_Elaborated
   type PMCI_ANIM_OPEN_PARMSW is access tagMCI_ANIM_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_OPEN_PARMSW is access tagMCI_ANIM_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_ANIM_OPEN_PARMS is MCI_ANIM_OPEN_PARMSA; -- CXType_Typedef
   subtype PMCI_ANIM_OPEN_PARMS is PMCI_ANIM_OPEN_PARMSA; -- CXType_Typedef
   subtype LPMCI_ANIM_OPEN_PARMS is LPMCI_ANIM_OPEN_PARMSA; -- CXType_Typedef
   type tagMCI_ANIM_PLAY_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrom : DWORD;
      dwTo : DWORD;
      dwSpeed : DWORD;
   end record;
   subtype MCI_ANIM_PLAY_PARMS is tagMCI_ANIM_PLAY_PARMS; -- CXType_Elaborated
   type PMCI_ANIM_PLAY_PARMS is access tagMCI_ANIM_PLAY_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_PLAY_PARMS is access tagMCI_ANIM_PLAY_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_ANIM_STEP_PARMS is record
      dwCallback : DWORD_PTR;
      dwFrames : DWORD;
   end record;
   subtype MCI_ANIM_STEP_PARMS is tagMCI_ANIM_STEP_PARMS; -- CXType_Elaborated
   type PMCI_ANIM_STEP_PARMS is access tagMCI_ANIM_STEP_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_STEP_PARMS is access tagMCI_ANIM_STEP_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_ANIM_WINDOW_PARMSA is record
      dwCallback : DWORD_PTR;
      hWnd_x : HWND;
      nCmdShow : UINT;
      lpstrText : LPCSTR;
   end record;
   subtype MCI_ANIM_WINDOW_PARMSA is tagMCI_ANIM_WINDOW_PARMSA; -- CXType_Elaborated
   type PMCI_ANIM_WINDOW_PARMSA is access tagMCI_ANIM_WINDOW_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_WINDOW_PARMSA is access tagMCI_ANIM_WINDOW_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_ANIM_WINDOW_PARMSW is record
      dwCallback : DWORD_PTR;
      hWnd_x : HWND;
      nCmdShow : UINT;
      lpstrText : LPCWSTR;
   end record;
   subtype MCI_ANIM_WINDOW_PARMSW is tagMCI_ANIM_WINDOW_PARMSW; -- CXType_Elaborated
   type PMCI_ANIM_WINDOW_PARMSW is access tagMCI_ANIM_WINDOW_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_WINDOW_PARMSW is access tagMCI_ANIM_WINDOW_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_ANIM_WINDOW_PARMS is MCI_ANIM_WINDOW_PARMSA; -- CXType_Typedef
   subtype PMCI_ANIM_WINDOW_PARMS is PMCI_ANIM_WINDOW_PARMSA; -- CXType_Typedef
   subtype LPMCI_ANIM_WINDOW_PARMS is LPMCI_ANIM_WINDOW_PARMSA; -- CXType_Typedef
   type tagMCI_ANIM_RECT_PARMS is record
      dwCallback : DWORD_PTR;
      rc : RECT;
   end record;
   subtype MCI_ANIM_RECT_PARMS is tagMCI_ANIM_RECT_PARMS; -- CXType_Elaborated
   type PMCI_ANIM_RECT_PARMS is access MCI_ANIM_RECT_PARMS; -- CXType_Pointer - CXType_Typedef
   type LPMCI_ANIM_RECT_PARMS is access MCI_ANIM_RECT_PARMS; -- CXType_Pointer - CXType_Typedef
   type tagMCI_ANIM_UPDATE_PARMS is record
      dwCallback : DWORD_PTR;
      rc : RECT;
      hDC_x : HDC;
   end record;
   subtype MCI_ANIM_UPDATE_PARMS is tagMCI_ANIM_UPDATE_PARMS; -- CXType_Elaborated
   type PMCI_ANIM_UPDATE_PARMS is access tagMCI_ANIM_UPDATE_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_ANIM_UPDATE_PARMS is access tagMCI_ANIM_UPDATE_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OVLY_OPEN_PARMSA is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCSTR;
      lpstrElementName : LPCSTR;
      lpstrAlias : LPCSTR;
      dwStyle : DWORD;
      hWndParent : HWND;
   end record;
   subtype MCI_OVLY_OPEN_PARMSA is tagMCI_OVLY_OPEN_PARMSA; -- CXType_Elaborated
   type PMCI_OVLY_OPEN_PARMSA is access tagMCI_OVLY_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_OPEN_PARMSA is access tagMCI_OVLY_OPEN_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OVLY_OPEN_PARMSW is record
      dwCallback : DWORD_PTR;
      wDeviceID : MCIDEVICEID;
      lpstrDeviceType : LPCWSTR;
      lpstrElementName : LPCWSTR;
      lpstrAlias : LPCWSTR;
      dwStyle : DWORD;
      hWndParent : HWND;
   end record;
   subtype MCI_OVLY_OPEN_PARMSW is tagMCI_OVLY_OPEN_PARMSW; -- CXType_Elaborated
   type PMCI_OVLY_OPEN_PARMSW is access tagMCI_OVLY_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_OPEN_PARMSW is access tagMCI_OVLY_OPEN_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_OVLY_OPEN_PARMS is MCI_OVLY_OPEN_PARMSA; -- CXType_Typedef
   subtype PMCI_OVLY_OPEN_PARMS is PMCI_OVLY_OPEN_PARMSA; -- CXType_Typedef
   subtype LPMCI_OVLY_OPEN_PARMS is LPMCI_OVLY_OPEN_PARMSA; -- CXType_Typedef
   type tagMCI_OVLY_WINDOW_PARMSA is record
      dwCallback : DWORD_PTR;
      hWnd_x : HWND;
      nCmdShow : UINT;
      lpstrText : LPCSTR;
   end record;
   subtype MCI_OVLY_WINDOW_PARMSA is tagMCI_OVLY_WINDOW_PARMSA; -- CXType_Elaborated
   type PMCI_OVLY_WINDOW_PARMSA is access tagMCI_OVLY_WINDOW_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_WINDOW_PARMSA is access tagMCI_OVLY_WINDOW_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OVLY_WINDOW_PARMSW is record
      dwCallback : DWORD_PTR;
      hWnd_x : HWND;
      nCmdShow : UINT;
      lpstrText : LPCWSTR;
   end record;
   subtype MCI_OVLY_WINDOW_PARMSW is tagMCI_OVLY_WINDOW_PARMSW; -- CXType_Elaborated
   type PMCI_OVLY_WINDOW_PARMSW is access tagMCI_OVLY_WINDOW_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_WINDOW_PARMSW is access tagMCI_OVLY_WINDOW_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_OVLY_WINDOW_PARMS is MCI_OVLY_WINDOW_PARMSA; -- CXType_Typedef
   subtype PMCI_OVLY_WINDOW_PARMS is PMCI_OVLY_WINDOW_PARMSA; -- CXType_Typedef
   subtype LPMCI_OVLY_WINDOW_PARMS is LPMCI_OVLY_WINDOW_PARMSA; -- CXType_Typedef
   type tagMCI_OVLY_RECT_PARMS is record
      dwCallback : DWORD_PTR;
      rc : RECT;
   end record;
   subtype MCI_OVLY_RECT_PARMS is tagMCI_OVLY_RECT_PARMS; -- CXType_Elaborated
   type PMCI_OVLY_RECT_PARMS is access tagMCI_OVLY_RECT_PARMS; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_RECT_PARMS is access tagMCI_OVLY_RECT_PARMS; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OVLY_SAVE_PARMSA is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCSTR;
      rc : RECT;
   end record;
   subtype MCI_OVLY_SAVE_PARMSA is tagMCI_OVLY_SAVE_PARMSA; -- CXType_Elaborated
   type PMCI_OVLY_SAVE_PARMSA is access tagMCI_OVLY_SAVE_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_SAVE_PARMSA is access tagMCI_OVLY_SAVE_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OVLY_SAVE_PARMSW is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCWSTR;
      rc : RECT;
   end record;
   subtype MCI_OVLY_SAVE_PARMSW is tagMCI_OVLY_SAVE_PARMSW; -- CXType_Elaborated
   type PMCI_OVLY_SAVE_PARMSW is access tagMCI_OVLY_SAVE_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_SAVE_PARMSW is access tagMCI_OVLY_SAVE_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_OVLY_SAVE_PARMS is MCI_OVLY_SAVE_PARMSA; -- CXType_Typedef
   subtype PMCI_OVLY_SAVE_PARMS is PMCI_OVLY_SAVE_PARMSA; -- CXType_Typedef
   subtype LPMCI_OVLY_SAVE_PARMS is LPMCI_OVLY_SAVE_PARMSA; -- CXType_Typedef
   type tagMCI_OVLY_LOAD_PARMSA is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCSTR;
      rc : RECT;
   end record;
   subtype MCI_OVLY_LOAD_PARMSA is tagMCI_OVLY_LOAD_PARMSA; -- CXType_Elaborated
   type PMCI_OVLY_LOAD_PARMSA is access tagMCI_OVLY_LOAD_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_LOAD_PARMSA is access tagMCI_OVLY_LOAD_PARMSA; -- CXType_Pointer - CXType_Elaborated
   type tagMCI_OVLY_LOAD_PARMSW is record
      dwCallback : DWORD_PTR;
      lpfilename : LPCWSTR;
      rc : RECT;
   end record;
   subtype MCI_OVLY_LOAD_PARMSW is tagMCI_OVLY_LOAD_PARMSW; -- CXType_Elaborated
   type PMCI_OVLY_LOAD_PARMSW is access tagMCI_OVLY_LOAD_PARMSW; -- CXType_Pointer - CXType_Elaborated
   type LPMCI_OVLY_LOAD_PARMSW is access tagMCI_OVLY_LOAD_PARMSW; -- CXType_Pointer - CXType_Elaborated
   subtype MCI_OVLY_LOAD_PARMS is MCI_OVLY_LOAD_PARMSA; -- CXType_Typedef
   subtype PMCI_OVLY_LOAD_PARMS is PMCI_OVLY_LOAD_PARMSA; -- CXType_Typedef
   subtype LPMCI_OVLY_LOAD_PARMS is LPMCI_OVLY_LOAD_PARMSA; -- CXType_Typedef
   function mciGetDriverData(
      wDeviceID : MCIDEVICEID
   ) return DWORD_PTR;
   pragma import (C,mciGetDriverData,"mciGetDriverData");
   function mciLoadCommandResource(
      hInstance_x : HANDLE;
      lpResName : LPCWSTR;
      wType : UINT
   ) return UINT;
   pragma import (C,mciLoadCommandResource,"mciLoadCommandResource");
   function mciSetDriverData(
      wDeviceID : MCIDEVICEID;
      dwData : DWORD_PTR
   ) return BOOL;
   pragma import (C,mciSetDriverData,"mciSetDriverData");
   function mciDriverYield(
      wDeviceID : MCIDEVICEID
   ) return UINT;
   pragma import (C,mciDriverYield,"mciDriverYield");
   function mciDriverNotify(
      hwndCallback : HANDLE;
      wDeviceID : MCIDEVICEID;
      uStatus : UINT
   ) return BOOL;
   pragma import (C,mciDriverNotify,"mciDriverNotify");
   function mciFreeCommandResource(
      wTable : UINT
   ) return BOOL;
   pragma import (C,mciFreeCommandResource,"mciFreeCommandResource");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mmiscapi.h>
   type DRVCONFIGINFOEX is record
      dwDCISize : DWORD;
      lpszDCISectionName : LPCWSTR;
      lpszDCIAliasName : LPCWSTR;
      dnDevNode : DWORD;
   end record;
   type PDRVCONFIGINFOEX is access DRVCONFIGINFOEX; -- CXType_Pointer - CXType_Elaborated
   type NPDRVCONFIGINFOEX is access DRVCONFIGINFOEX; -- CXType_Pointer - CXType_Elaborated
   type LPDRVCONFIGINFOEX is access DRVCONFIGINFOEX; -- CXType_Pointer - CXType_Elaborated
   type tagDRVCONFIGINFO is record
      dwDCISize : DWORD;
      lpszDCISectionName : LPCWSTR;
      lpszDCIAliasName : LPCWSTR;
   end record;
   subtype DRVCONFIGINFO is tagDRVCONFIGINFO; -- CXType_Elaborated
   type PDRVCONFIGINFO is access tagDRVCONFIGINFO; -- CXType_Pointer - CXType_Elaborated
   type NPDRVCONFIGINFO is access tagDRVCONFIGINFO; -- CXType_Pointer - CXType_Elaborated
   type LPDRVCONFIGINFO is access tagDRVCONFIGINFO; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVERPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LRESULT (DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM)
   function CloseDriver(
      hDriver : HDRVR;
      lParam1 : LPARAM;
      lParam2 : LPARAM
   ) return LRESULT;
   pragma import (C,CloseDriver,"CloseDriver");
   function OpenDriver(
      szDriverName : LPCWSTR;
      szSectionName : LPCWSTR;
      lParam2 : LPARAM
   ) return HDRVR;
   pragma import (C,OpenDriver,"OpenDriver");
   function SendDriverMessage(
      hDriver : HDRVR;
      message : UINT;
      lParam1 : LPARAM;
      lParam2 : LPARAM
   ) return LRESULT;
   pragma import (C,SendDriverMessage,"SendDriverMessage");
   function DrvGetModuleHandle(
      hDriver : HDRVR
   ) return HMODULE;
   pragma import (C,DrvGetModuleHandle,"DrvGetModuleHandle");
   function GetDriverModuleHandle(
      hDriver : HDRVR
   ) return HMODULE;
   pragma import (C,GetDriverModuleHandle,"GetDriverModuleHandle");
   function DefDriverProc(
      dwDriverIdentifier : DWORD_PTR;
      hdrvr_x : HDRVR;
      uMsg : UINT;
      lParam1 : LPARAM;
      lParam2 : LPARAM
   ) return LRESULT;
   pragma import (C,DefDriverProc,"DefDriverProc");
   function DriverCallback(
      dwCallback : DWORD_PTR;
      dwFlags : DWORD;
      hDevice : HDRVR;
      dwMsg : DWORD;
      dwUser : DWORD_PTR;
      dwParam1 : DWORD_PTR;
      dwParam2 : DWORD_PTR
   ) return BOOL;
   pragma import (C,DriverCallback,"DriverCallback");
   function sndOpenSound(
      EventName : LPCWSTR;
      AppName : LPCWSTR;
      Flags : INT32;
      FileHandle : PHANDLE
   ) return LONG;
   pragma import (C,sndOpenSound,"sndOpenSound");
   subtype DRIVERMSGPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (DWORD, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR)
   function mmDrvInstall(
      hDriver : HDRVR;
      wszDrvEntry : LPCWSTR;
      drvMessage : DRIVERMSGPROC;
      wFlags : UINT
   ) return UINT;
   pragma import (C,mmDrvInstall,"mmDrvInstall");
   subtype FOURCC is DWORD; -- CXType_Typedef
   type HPSTR is access Character; -- CXType_Pointer - CXType_Char_S
   type HMMIO_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMMIO is access HMMIO_x; -- CXType_Pointer - CXType_Elaborated
   subtype MMIOPROC is System.Address; -- [FIXME - CXType_Unexposed]
   subtype LPMMIOPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LRESULT (LPSTR, UINT, LPARAM, LPARAM)
   type MMIOINFO_x is record
      dwFlags : DWORD;
      fccIOProc : FOURCC;
      pIOProc : LPMMIOPROC;
      wErrorRet : UINT;
      htask_x : HTASK;
      cchBuffer : LONG;
      pchBuffer : HPSTR;
      pchNext : HPSTR;
      pchEndRead : HPSTR;
      pchEndWrite : HPSTR;
      lBufOffset : LONG;
      lDiskOffset : LONG;
      adwInfo : Void;
      dwReserved1 : DWORD;
      dwReserved2 : DWORD;
      hmmio_x : HMMIO;
   end record;
   subtype MMIOINFO is MMIOINFO_x; -- CXType_Elaborated
   type PMMIOINFO is access MMIOINFO_x; -- CXType_Pointer - CXType_Elaborated
   type NPMMIOINFO is access MMIOINFO_x; -- CXType_Pointer - CXType_Elaborated
   type LPMMIOINFO is access MMIOINFO_x; -- CXType_Pointer - CXType_Elaborated
   type LPCMMIOINFO is access constant MMIOINFO; -- CXType_Pointer - CXType_Typedef
   type MMCKINFO_x is record
      ckid : FOURCC;
      cksize : DWORD;
      fccType : FOURCC;
      dwDataOffset : DWORD;
      dwFlags : DWORD;
   end record;
   subtype MMCKINFO is MMCKINFO_x; -- CXType_Elaborated
   type PMMCKINFO is access MMCKINFO_x; -- CXType_Pointer - CXType_Elaborated
   type NPMMCKINFO is access MMCKINFO_x; -- CXType_Pointer - CXType_Elaborated
   type LPMMCKINFO is access MMCKINFO_x; -- CXType_Pointer - CXType_Elaborated
   type LPCMMCKINFO is access constant MMCKINFO; -- CXType_Pointer - CXType_Typedef
   function mmioStringToFOURCCA(
      sz : LPCSTR;
      uFlags : UINT
   ) return FOURCC;
   pragma import (C,mmioStringToFOURCCA,"mmioStringToFOURCCA");
   function mmioStringToFOURCCW(
      sz : LPCWSTR;
      uFlags : UINT
   ) return FOURCC;
   pragma import (C,mmioStringToFOURCCW,"mmioStringToFOURCCW");
   function mmioInstallIOProcA(
      fccIOProc : FOURCC;
      pIOProc : LPMMIOPROC;
      dwFlags : DWORD
   ) return LPMMIOPROC;
   pragma import (C,mmioInstallIOProcA,"mmioInstallIOProcA");
   function mmioInstallIOProcW(
      fccIOProc : FOURCC;
      pIOProc : LPMMIOPROC;
      dwFlags : DWORD
   ) return LPMMIOPROC;
   pragma import (C,mmioInstallIOProcW,"mmioInstallIOProcW");
   function mmioOpenA(
      pszFileName : LPSTR;
      pmmioinfo_x : LPMMIOINFO;
      fdwOpen : DWORD
   ) return HMMIO;
   pragma import (C,mmioOpenA,"mmioOpenA");
   function mmioOpenW(
      pszFileName : LPWSTR;
      pmmioinfo_x : LPMMIOINFO;
      fdwOpen : DWORD
   ) return HMMIO;
   pragma import (C,mmioOpenW,"mmioOpenW");
   function mmioRenameA(
      pszFileName : LPCSTR;
      pszNewFileName : LPCSTR;
      pmmioinfo_x : LPCMMIOINFO;
      fdwRename : DWORD
   ) return MMRESULT;
   pragma import (C,mmioRenameA,"mmioRenameA");
   function mmioRenameW(
      pszFileName : LPCWSTR;
      pszNewFileName : LPCWSTR;
      pmmioinfo_x : LPCMMIOINFO;
      fdwRename : DWORD
   ) return MMRESULT;
   pragma import (C,mmioRenameW,"mmioRenameW");
   function mmioClose(
      hmmio_x : HMMIO;
      fuClose : UINT
   ) return MMRESULT;
   pragma import (C,mmioClose,"mmioClose");
   function mmioRead(
      hmmio_x : HMMIO;
      pch_x : HPSTR;
      cch : LONG
   ) return LONG;
   pragma import (C,mmioRead,"mmioRead");
   function mmioWrite(
      hmmio_x : HMMIO;
      pch_x : access Character;
      cch : LONG
   ) return LONG;
   pragma import (C,mmioWrite,"mmioWrite");
   function mmioSeek(
      hmmio_x : HMMIO;
      lOffset : LONG;
      iOrigin : Interfaces.C.Int
   ) return LONG;
   pragma import (C,mmioSeek,"mmioSeek");
   function mmioGetInfo(
      hmmio_x : HMMIO;
      pmmioinfo_x : LPMMIOINFO;
      fuInfo : UINT
   ) return MMRESULT;
   pragma import (C,mmioGetInfo,"mmioGetInfo");
   function mmioSetInfo(
      hmmio_x : HMMIO;
      pmmioinfo_x : LPCMMIOINFO;
      fuInfo : UINT
   ) return MMRESULT;
   pragma import (C,mmioSetInfo,"mmioSetInfo");
   function mmioSetBuffer(
      hmmio_x : HMMIO;
      pchBuffer : LPSTR;
      cchBuffer : LONG;
      fuBuffer : UINT
   ) return MMRESULT;
   pragma import (C,mmioSetBuffer,"mmioSetBuffer");
   function mmioFlush(
      hmmio_x : HMMIO;
      fuFlush : UINT
   ) return MMRESULT;
   pragma import (C,mmioFlush,"mmioFlush");
   function mmioAdvance(
      hmmio_x : HMMIO;
      pmmioinfo_x : LPMMIOINFO;
      fuAdvance : UINT
   ) return MMRESULT;
   pragma import (C,mmioAdvance,"mmioAdvance");
   function mmioSendMessage(
      hmmio_x : HMMIO;
      uMsg : UINT;
      lParam1 : LPARAM;
      lParam2 : LPARAM
   ) return LRESULT;
   pragma import (C,mmioSendMessage,"mmioSendMessage");
   function mmioDescend(
      hmmio_x : HMMIO;
      pmmcki : LPMMCKINFO;
      pmmckiParent : access constant MMCKINFO;
      fuDescend : UINT
   ) return MMRESULT;
   pragma import (C,mmioDescend,"mmioDescend");
   function mmioAscend(
      hmmio_x : HMMIO;
      pmmcki : LPMMCKINFO;
      fuAscend : UINT
   ) return MMRESULT;
   pragma import (C,mmioAscend,"mmioAscend");
   function mmioCreateChunk(
      hmmio_x : HMMIO;
      pmmcki : LPMMCKINFO;
      fuCreate : UINT
   ) return MMRESULT;
   pragma import (C,mmioCreateChunk,"mmioCreateChunk");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mmiscapi2.h>
   subtype TIMECALLBACK is System.Address; -- [FIXME - CXType_Unexposed]
   subtype LPTIMECALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (UINT, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR)
   function timeSetEvent(
      uDelay : UINT;
      uResolution : UINT;
      fptc : LPTIMECALLBACK;
      dwUser : DWORD_PTR;
      fuEvent : UINT
   ) return MMRESULT;
   pragma import (C,timeSetEvent,"timeSetEvent");
   function timeKillEvent(
      uTimerID : UINT
   ) return MMRESULT;
   pragma import (C,timeKillEvent,"timeKillEvent");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\playsoundapi.h>
   function sndPlaySoundA(
      pszSound : LPCSTR;
      fuSound : UINT
   ) return BOOL;
   pragma import (C,sndPlaySoundA,"sndPlaySoundA");
   function sndPlaySoundW(
      pszSound : LPCWSTR;
      fuSound : UINT
   ) return BOOL;
   pragma import (C,sndPlaySoundW,"sndPlaySoundW");
   function PlaySoundA(
      pszSound : LPCSTR;
      hmod : HMODULE;
      fdwSound : DWORD
   ) return BOOL;
   pragma import (C,PlaySoundA,"PlaySoundA");
   function PlaySoundW(
      pszSound : LPCWSTR;
      hmod : HMODULE;
      fdwSound : DWORD
   ) return BOOL;
   pragma import (C,PlaySoundW,"PlaySoundW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mmeapi.h>
   type HWAVE_x is record
      unused : Interfaces.C.Int;
   end record;
   type HWAVE is access HWAVE_x; -- CXType_Pointer - CXType_Elaborated
   type HWAVEIN_x is record
      unused : Interfaces.C.Int;
   end record;
   type HWAVEIN is access HWAVEIN_x; -- CXType_Pointer - CXType_Elaborated
   type HWAVEOUT_x is record
      unused : Interfaces.C.Int;
   end record;
   type HWAVEOUT is access HWAVEOUT_x; -- CXType_Pointer - CXType_Elaborated
   type LPHWAVEIN is access HWAVEIN; -- CXType_Pointer - CXType_Typedef
   type LPHWAVEOUT is access HWAVEOUT; -- CXType_Pointer - CXType_Typedef
   subtype WAVECALLBACK is System.Address; -- [FIXME - CXType_Unexposed]
   subtype LPWAVECALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HDRVR, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR)
   type wavehdr_tag is record
      lpData : LPSTR;
      dwBufferLength : DWORD;
      dwBytesRecorded : DWORD;
      dwUser : DWORD_PTR;
      dwFlags : DWORD;
      dwLoops : DWORD;
      lpNext : access Void;
      reserved : DWORD_PTR;
   end record;
   subtype WAVEHDR is wavehdr_tag; -- CXType_Elaborated
   type PWAVEHDR is access wavehdr_tag; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEHDR is access wavehdr_tag; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEHDR is access wavehdr_tag; -- CXType_Pointer - CXType_Elaborated
   type tagWAVEOUTCAPSA is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
   end record;
   subtype WAVEOUTCAPSA is tagWAVEOUTCAPSA; -- CXType_Elaborated
   type PWAVEOUTCAPSA is access tagWAVEOUTCAPSA; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEOUTCAPSA is access tagWAVEOUTCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEOUTCAPSA is access tagWAVEOUTCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagWAVEOUTCAPSW is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
   end record;
   subtype WAVEOUTCAPSW is tagWAVEOUTCAPSW; -- CXType_Elaborated
   type PWAVEOUTCAPSW is access tagWAVEOUTCAPSW; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEOUTCAPSW is access tagWAVEOUTCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEOUTCAPSW is access tagWAVEOUTCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype WAVEOUTCAPS is WAVEOUTCAPSA; -- CXType_Typedef
   subtype PWAVEOUTCAPS is PWAVEOUTCAPSA; -- CXType_Typedef
   subtype NPWAVEOUTCAPS is NPWAVEOUTCAPSA; -- CXType_Typedef
   subtype LPWAVEOUTCAPS is LPWAVEOUTCAPSA; -- CXType_Typedef
   type tagWAVEOUTCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype WAVEOUTCAPS2A is tagWAVEOUTCAPS2A; -- CXType_Elaborated
   type PWAVEOUTCAPS2A is access tagWAVEOUTCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEOUTCAPS2A is access tagWAVEOUTCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEOUTCAPS2A is access tagWAVEOUTCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagWAVEOUTCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype WAVEOUTCAPS2W is tagWAVEOUTCAPS2W; -- CXType_Elaborated
   type PWAVEOUTCAPS2W is access tagWAVEOUTCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEOUTCAPS2W is access tagWAVEOUTCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEOUTCAPS2W is access tagWAVEOUTCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype WAVEOUTCAPS2 is WAVEOUTCAPS2A; -- CXType_Typedef
   subtype PWAVEOUTCAPS2 is PWAVEOUTCAPS2A; -- CXType_Typedef
   subtype NPWAVEOUTCAPS2 is NPWAVEOUTCAPS2A; -- CXType_Typedef
   subtype LPWAVEOUTCAPS2 is LPWAVEOUTCAPS2A; -- CXType_Typedef
   type tagWAVEINCAPSA is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
   end record;
   subtype WAVEINCAPSA is tagWAVEINCAPSA; -- CXType_Elaborated
   type PWAVEINCAPSA is access tagWAVEINCAPSA; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEINCAPSA is access tagWAVEINCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEINCAPSA is access tagWAVEINCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagWAVEINCAPSW is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
   end record;
   subtype WAVEINCAPSW is tagWAVEINCAPSW; -- CXType_Elaborated
   type PWAVEINCAPSW is access tagWAVEINCAPSW; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEINCAPSW is access tagWAVEINCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEINCAPSW is access tagWAVEINCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype WAVEINCAPS is WAVEINCAPSA; -- CXType_Typedef
   subtype PWAVEINCAPS is PWAVEINCAPSA; -- CXType_Typedef
   subtype NPWAVEINCAPS is NPWAVEINCAPSA; -- CXType_Typedef
   subtype LPWAVEINCAPS is LPWAVEINCAPSA; -- CXType_Typedef
   type tagWAVEINCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype WAVEINCAPS2A is tagWAVEINCAPS2A; -- CXType_Elaborated
   type PWAVEINCAPS2A is access tagWAVEINCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEINCAPS2A is access tagWAVEINCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEINCAPS2A is access tagWAVEINCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagWAVEINCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwFormats : DWORD;
      wChannels : WORD;
      wReserved1 : WORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype WAVEINCAPS2W is tagWAVEINCAPS2W; -- CXType_Elaborated
   type PWAVEINCAPS2W is access tagWAVEINCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEINCAPS2W is access tagWAVEINCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEINCAPS2W is access tagWAVEINCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype WAVEINCAPS2 is WAVEINCAPS2A; -- CXType_Typedef
   subtype PWAVEINCAPS2 is PWAVEINCAPS2A; -- CXType_Typedef
   subtype NPWAVEINCAPS2 is NPWAVEINCAPS2A; -- CXType_Typedef
   subtype LPWAVEINCAPS2 is LPWAVEINCAPS2A; -- CXType_Typedef
   type waveformat_tag is record
      wFormatTag : WORD;
      nChannels : WORD;
      nSamplesPerSec : DWORD;
      nAvgBytesPerSec : DWORD;
      nBlockAlign : WORD;
   end record;
   subtype WAVEFORMAT is waveformat_tag; -- CXType_Elaborated
   type PWAVEFORMAT is access waveformat_tag; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEFORMAT is access waveformat_tag; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEFORMAT is access waveformat_tag; -- CXType_Pointer - CXType_Elaborated
   type pcmwaveformat_tag is record
      wf : WAVEFORMAT;
      wBitsPerSample : WORD;
   end record;
   subtype PCMWAVEFORMAT is pcmwaveformat_tag; -- CXType_Elaborated
   type PPCMWAVEFORMAT is access pcmwaveformat_tag; -- CXType_Pointer - CXType_Elaborated
   type NPPCMWAVEFORMAT is access pcmwaveformat_tag; -- CXType_Pointer - CXType_Elaborated
   type LPPCMWAVEFORMAT is access pcmwaveformat_tag; -- CXType_Pointer - CXType_Elaborated
   type tWAVEFORMATEX is record
      wFormatTag : WORD;
      nChannels : WORD;
      nSamplesPerSec : DWORD;
      nAvgBytesPerSec : DWORD;
      nBlockAlign : WORD;
      wBitsPerSample : WORD;
      cbSize : WORD;
   end record;
   subtype WAVEFORMATEX is tWAVEFORMATEX; -- CXType_Elaborated
   type PWAVEFORMATEX is access tWAVEFORMATEX; -- CXType_Pointer - CXType_Elaborated
   type NPWAVEFORMATEX is access tWAVEFORMATEX; -- CXType_Pointer - CXType_Elaborated
   type LPWAVEFORMATEX is access tWAVEFORMATEX; -- CXType_Pointer - CXType_Elaborated
   type LPCWAVEFORMATEX is access constant WAVEFORMATEX; -- CXType_Pointer - CXType_Typedef
   function waveOutGetNumDevs return UINT;
   pragma import (C,waveOutGetNumDevs,"waveOutGetNumDevs");
   function waveOutGetDevCapsA(
      uDeviceID : UINT_PTR;
      pwoc : LPWAVEOUTCAPSA;
      cbwoc : UINT
   ) return MMRESULT;
   pragma import (C,waveOutGetDevCapsA,"waveOutGetDevCapsA");
   function waveOutGetDevCapsW(
      uDeviceID : UINT_PTR;
      pwoc : LPWAVEOUTCAPSW;
      cbwoc : UINT
   ) return MMRESULT;
   pragma import (C,waveOutGetDevCapsW,"waveOutGetDevCapsW");
   function waveOutGetVolume(
      hwo : HWAVEOUT;
      pdwVolume : LPDWORD
   ) return MMRESULT;
   pragma import (C,waveOutGetVolume,"waveOutGetVolume");
   function waveOutSetVolume(
      hwo : HWAVEOUT;
      dwVolume : DWORD
   ) return MMRESULT;
   pragma import (C,waveOutSetVolume,"waveOutSetVolume");
   function waveOutGetErrorTextA(
      mmrError : MMRESULT;
      pszText : LPSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,waveOutGetErrorTextA,"waveOutGetErrorTextA");
   function waveOutGetErrorTextW(
      mmrError : MMRESULT;
      pszText : LPWSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,waveOutGetErrorTextW,"waveOutGetErrorTextW");
   function waveOutOpen(
      phwo : LPHWAVEOUT;
      uDeviceID : UINT;
      pwfx : LPCWAVEFORMATEX;
      dwCallback : DWORD_PTR;
      dwInstance : DWORD_PTR;
      fdwOpen : DWORD
   ) return MMRESULT;
   pragma import (C,waveOutOpen,"waveOutOpen");
   function waveOutClose(
      hwo : HWAVEOUT
   ) return MMRESULT;
   pragma import (C,waveOutClose,"waveOutClose");
   function waveOutPrepareHeader(
      hwo : HWAVEOUT;
      pwh : LPWAVEHDR;
      cbwh : UINT
   ) return MMRESULT;
   pragma import (C,waveOutPrepareHeader,"waveOutPrepareHeader");
   function waveOutUnprepareHeader(
      hwo : HWAVEOUT;
      pwh : LPWAVEHDR;
      cbwh : UINT
   ) return MMRESULT;
   pragma import (C,waveOutUnprepareHeader,"waveOutUnprepareHeader");
   function waveOutWrite(
      hwo : HWAVEOUT;
      pwh : LPWAVEHDR;
      cbwh : UINT
   ) return MMRESULT;
   pragma import (C,waveOutWrite,"waveOutWrite");
   function waveOutPause(
      hwo : HWAVEOUT
   ) return MMRESULT;
   pragma import (C,waveOutPause,"waveOutPause");
   function waveOutRestart(
      hwo : HWAVEOUT
   ) return MMRESULT;
   pragma import (C,waveOutRestart,"waveOutRestart");
   function waveOutReset(
      hwo : HWAVEOUT
   ) return MMRESULT;
   pragma import (C,waveOutReset,"waveOutReset");
   function waveOutBreakLoop(
      hwo : HWAVEOUT
   ) return MMRESULT;
   pragma import (C,waveOutBreakLoop,"waveOutBreakLoop");
   function waveOutGetPosition(
      hwo : HWAVEOUT;
      pmmt : LPMMTIME;
      cbmmt : UINT
   ) return MMRESULT;
   pragma import (C,waveOutGetPosition,"waveOutGetPosition");
   function waveOutGetPitch(
      hwo : HWAVEOUT;
      pdwPitch : LPDWORD
   ) return MMRESULT;
   pragma import (C,waveOutGetPitch,"waveOutGetPitch");
   function waveOutSetPitch(
      hwo : HWAVEOUT;
      dwPitch : DWORD
   ) return MMRESULT;
   pragma import (C,waveOutSetPitch,"waveOutSetPitch");
   function waveOutGetPlaybackRate(
      hwo : HWAVEOUT;
      pdwRate : LPDWORD
   ) return MMRESULT;
   pragma import (C,waveOutGetPlaybackRate,"waveOutGetPlaybackRate");
   function waveOutSetPlaybackRate(
      hwo : HWAVEOUT;
      dwRate : DWORD
   ) return MMRESULT;
   pragma import (C,waveOutSetPlaybackRate,"waveOutSetPlaybackRate");
   function waveOutGetID(
      hwo : HWAVEOUT;
      puDeviceID : LPUINT
   ) return MMRESULT;
   pragma import (C,waveOutGetID,"waveOutGetID");
   function waveOutMessage(
      hwo : HWAVEOUT;
      uMsg : UINT;
      dw1 : DWORD_PTR;
      dw2 : DWORD_PTR
   ) return MMRESULT;
   pragma import (C,waveOutMessage,"waveOutMessage");
   function waveInGetNumDevs return UINT;
   pragma import (C,waveInGetNumDevs,"waveInGetNumDevs");
   function waveInGetDevCapsA(
      uDeviceID : UINT_PTR;
      pwic : LPWAVEINCAPSA;
      cbwic : UINT
   ) return MMRESULT;
   pragma import (C,waveInGetDevCapsA,"waveInGetDevCapsA");
   function waveInGetDevCapsW(
      uDeviceID : UINT_PTR;
      pwic : LPWAVEINCAPSW;
      cbwic : UINT
   ) return MMRESULT;
   pragma import (C,waveInGetDevCapsW,"waveInGetDevCapsW");
   function waveInGetErrorTextA(
      mmrError : MMRESULT;
      pszText : LPSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,waveInGetErrorTextA,"waveInGetErrorTextA");
   function waveInGetErrorTextW(
      mmrError : MMRESULT;
      pszText : LPWSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,waveInGetErrorTextW,"waveInGetErrorTextW");
   function waveInOpen(
      phwi : LPHWAVEIN;
      uDeviceID : UINT;
      pwfx : LPCWAVEFORMATEX;
      dwCallback : DWORD_PTR;
      dwInstance : DWORD_PTR;
      fdwOpen : DWORD
   ) return MMRESULT;
   pragma import (C,waveInOpen,"waveInOpen");
   function waveInClose(
      hwi : HWAVEIN
   ) return MMRESULT;
   pragma import (C,waveInClose,"waveInClose");
   function waveInPrepareHeader(
      hwi : HWAVEIN;
      pwh : LPWAVEHDR;
      cbwh : UINT
   ) return MMRESULT;
   pragma import (C,waveInPrepareHeader,"waveInPrepareHeader");
   function waveInUnprepareHeader(
      hwi : HWAVEIN;
      pwh : LPWAVEHDR;
      cbwh : UINT
   ) return MMRESULT;
   pragma import (C,waveInUnprepareHeader,"waveInUnprepareHeader");
   function waveInAddBuffer(
      hwi : HWAVEIN;
      pwh : LPWAVEHDR;
      cbwh : UINT
   ) return MMRESULT;
   pragma import (C,waveInAddBuffer,"waveInAddBuffer");
   function waveInStart(
      hwi : HWAVEIN
   ) return MMRESULT;
   pragma import (C,waveInStart,"waveInStart");
   function waveInStop(
      hwi : HWAVEIN
   ) return MMRESULT;
   pragma import (C,waveInStop,"waveInStop");
   function waveInReset(
      hwi : HWAVEIN
   ) return MMRESULT;
   pragma import (C,waveInReset,"waveInReset");
   function waveInGetPosition(
      hwi : HWAVEIN;
      pmmt : LPMMTIME;
      cbmmt : UINT
   ) return MMRESULT;
   pragma import (C,waveInGetPosition,"waveInGetPosition");
   function waveInGetID(
      hwi : HWAVEIN;
      puDeviceID : LPUINT
   ) return MMRESULT;
   pragma import (C,waveInGetID,"waveInGetID");
   function waveInMessage(
      hwi : HWAVEIN;
      uMsg : UINT;
      dw1 : DWORD_PTR;
      dw2 : DWORD_PTR
   ) return MMRESULT;
   pragma import (C,waveInMessage,"waveInMessage");
   type HMIDI_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMIDI is access HMIDI_x; -- CXType_Pointer - CXType_Elaborated
   type HMIDIIN_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMIDIIN is access HMIDIIN_x; -- CXType_Pointer - CXType_Elaborated
   type HMIDIOUT_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMIDIOUT is access HMIDIOUT_x; -- CXType_Pointer - CXType_Elaborated
   type HMIDISTRM_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMIDISTRM is access HMIDISTRM_x; -- CXType_Pointer - CXType_Elaborated
   type LPHMIDI is access HMIDI; -- CXType_Pointer - CXType_Typedef
   type LPHMIDIIN is access HMIDIIN; -- CXType_Pointer - CXType_Typedef
   type LPHMIDIOUT is access HMIDIOUT; -- CXType_Pointer - CXType_Typedef
   type LPHMIDISTRM is access HMIDISTRM; -- CXType_Pointer - CXType_Typedef
   subtype MIDICALLBACK is System.Address; -- [FIXME - CXType_Unexposed]
   subtype LPMIDICALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HDRVR, UINT, DWORD_PTR, DWORD_PTR, DWORD_PTR)
   subtype PATCHARRAY is System.Address; -- [FIXME - CXType_ConstantArray]
   type LPPATCHARRAY is access WORD; -- CXType_Pointer - CXType_Typedef
   subtype KEYARRAY is System.Address; -- [FIXME - CXType_ConstantArray]
   type LPKEYARRAY is access WORD; -- CXType_Pointer - CXType_Typedef
   type tagMIDIOUTCAPSA is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wVoices : WORD;
      wNotes : WORD;
      wChannelMask : WORD;
      dwSupport : DWORD;
   end record;
   subtype MIDIOUTCAPSA is tagMIDIOUTCAPSA; -- CXType_Elaborated
   type PMIDIOUTCAPSA is access tagMIDIOUTCAPSA; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIOUTCAPSA is access tagMIDIOUTCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIOUTCAPSA is access tagMIDIOUTCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagMIDIOUTCAPSW is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wVoices : WORD;
      wNotes : WORD;
      wChannelMask : WORD;
      dwSupport : DWORD;
   end record;
   subtype MIDIOUTCAPSW is tagMIDIOUTCAPSW; -- CXType_Elaborated
   type PMIDIOUTCAPSW is access tagMIDIOUTCAPSW; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIOUTCAPSW is access tagMIDIOUTCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIOUTCAPSW is access tagMIDIOUTCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype MIDIOUTCAPS is MIDIOUTCAPSA; -- CXType_Typedef
   subtype PMIDIOUTCAPS is PMIDIOUTCAPSA; -- CXType_Typedef
   subtype NPMIDIOUTCAPS is NPMIDIOUTCAPSA; -- CXType_Typedef
   subtype LPMIDIOUTCAPS is LPMIDIOUTCAPSA; -- CXType_Typedef
   type tagMIDIOUTCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wVoices : WORD;
      wNotes : WORD;
      wChannelMask : WORD;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype MIDIOUTCAPS2A is tagMIDIOUTCAPS2A; -- CXType_Elaborated
   type PMIDIOUTCAPS2A is access tagMIDIOUTCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIOUTCAPS2A is access tagMIDIOUTCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIOUTCAPS2A is access tagMIDIOUTCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagMIDIOUTCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wVoices : WORD;
      wNotes : WORD;
      wChannelMask : WORD;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype MIDIOUTCAPS2W is tagMIDIOUTCAPS2W; -- CXType_Elaborated
   type PMIDIOUTCAPS2W is access tagMIDIOUTCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIOUTCAPS2W is access tagMIDIOUTCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIOUTCAPS2W is access tagMIDIOUTCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype MIDIOUTCAPS2 is MIDIOUTCAPS2A; -- CXType_Typedef
   subtype PMIDIOUTCAPS2 is PMIDIOUTCAPS2A; -- CXType_Typedef
   subtype NPMIDIOUTCAPS2 is NPMIDIOUTCAPS2A; -- CXType_Typedef
   subtype LPMIDIOUTCAPS2 is LPMIDIOUTCAPS2A; -- CXType_Typedef
   type tagMIDIINCAPSA is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwSupport : DWORD;
   end record;
   subtype MIDIINCAPSA is tagMIDIINCAPSA; -- CXType_Elaborated
   type PMIDIINCAPSA is access tagMIDIINCAPSA; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIINCAPSA is access tagMIDIINCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIINCAPSA is access tagMIDIINCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagMIDIINCAPSW is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwSupport : DWORD;
   end record;
   subtype MIDIINCAPSW is tagMIDIINCAPSW; -- CXType_Elaborated
   type PMIDIINCAPSW is access tagMIDIINCAPSW; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIINCAPSW is access tagMIDIINCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIINCAPSW is access tagMIDIINCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype MIDIINCAPS is MIDIINCAPSA; -- CXType_Typedef
   subtype PMIDIINCAPS is PMIDIINCAPSA; -- CXType_Typedef
   subtype NPMIDIINCAPS is NPMIDIINCAPSA; -- CXType_Typedef
   subtype LPMIDIINCAPS is LPMIDIINCAPSA; -- CXType_Typedef
   type tagMIDIINCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype MIDIINCAPS2A is tagMIDIINCAPS2A; -- CXType_Elaborated
   type PMIDIINCAPS2A is access tagMIDIINCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIINCAPS2A is access tagMIDIINCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIINCAPS2A is access tagMIDIINCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagMIDIINCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype MIDIINCAPS2W is tagMIDIINCAPS2W; -- CXType_Elaborated
   type PMIDIINCAPS2W is access tagMIDIINCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIINCAPS2W is access tagMIDIINCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIINCAPS2W is access tagMIDIINCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype MIDIINCAPS2 is MIDIINCAPS2A; -- CXType_Typedef
   subtype PMIDIINCAPS2 is PMIDIINCAPS2A; -- CXType_Typedef
   subtype NPMIDIINCAPS2 is NPMIDIINCAPS2A; -- CXType_Typedef
   subtype LPMIDIINCAPS2 is LPMIDIINCAPS2A; -- CXType_Typedef
   type midihdr_tag is record
      lpData : LPSTR;
      dwBufferLength : DWORD;
      dwBytesRecorded : DWORD;
      dwUser : DWORD_PTR;
      dwFlags : DWORD;
      lpNext : access Void;
      reserved : DWORD_PTR;
      dwOffset : DWORD;
      dwReserved : Void;
   end record;
   subtype MIDIHDR is midihdr_tag; -- CXType_Elaborated
   type PMIDIHDR is access midihdr_tag; -- CXType_Pointer - CXType_Elaborated
   type NPMIDIHDR is access midihdr_tag; -- CXType_Pointer - CXType_Elaborated
   type LPMIDIHDR is access midihdr_tag; -- CXType_Pointer - CXType_Elaborated
   type midievent_tag is record
      dwDeltaTime : DWORD;
      dwStreamID : DWORD;
      dwEvent : DWORD;
      dwParms : Void;
   end record;
   subtype MIDIEVENT is midievent_tag; -- CXType_Elaborated
   type midistrmbuffver_tag is record
      dwVersion : DWORD;
      dwMid : DWORD;
      dwOEMVersion : DWORD;
   end record;
   subtype MIDISTRMBUFFVER is midistrmbuffver_tag; -- CXType_Elaborated
   type midiproptimediv_tag is record
      cbStruct : DWORD;
      dwTimeDiv : DWORD;
   end record;
   subtype MIDIPROPTIMEDIV is midiproptimediv_tag; -- CXType_Elaborated
   type LPMIDIPROPTIMEDIV is access midiproptimediv_tag; -- CXType_Pointer - CXType_Elaborated
   type midiproptempo_tag is record
      cbStruct : DWORD;
      dwTempo : DWORD;
   end record;
   subtype MIDIPROPTEMPO is midiproptempo_tag; -- CXType_Elaborated
   type LPMIDIPROPTEMPO is access midiproptempo_tag; -- CXType_Pointer - CXType_Elaborated
   function midiOutGetNumDevs return UINT;
   pragma import (C,midiOutGetNumDevs,"midiOutGetNumDevs");
   function midiStreamOpen(
      phms : LPHMIDISTRM;
      puDeviceID : LPUINT;
      cMidi : DWORD;
      dwCallback : DWORD_PTR;
      dwInstance : DWORD_PTR;
      fdwOpen : DWORD
   ) return MMRESULT;
   pragma import (C,midiStreamOpen,"midiStreamOpen");
   function midiStreamClose(
      hms : HMIDISTRM
   ) return MMRESULT;
   pragma import (C,midiStreamClose,"midiStreamClose");
   function midiStreamProperty(
      hms : HMIDISTRM;
      lppropdata : LPBYTE;
      dwProperty : DWORD
   ) return MMRESULT;
   pragma import (C,midiStreamProperty,"midiStreamProperty");
   function midiStreamPosition(
      hms : HMIDISTRM;
      lpmmt : LPMMTIME;
      cbmmt : UINT
   ) return MMRESULT;
   pragma import (C,midiStreamPosition,"midiStreamPosition");
   function midiStreamOut(
      hms : HMIDISTRM;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiStreamOut,"midiStreamOut");
   function midiStreamPause(
      hms : HMIDISTRM
   ) return MMRESULT;
   pragma import (C,midiStreamPause,"midiStreamPause");
   function midiStreamRestart(
      hms : HMIDISTRM
   ) return MMRESULT;
   pragma import (C,midiStreamRestart,"midiStreamRestart");
   function midiStreamStop(
      hms : HMIDISTRM
   ) return MMRESULT;
   pragma import (C,midiStreamStop,"midiStreamStop");
   function midiConnect(
      hmi : HMIDI;
      hmo : HMIDIOUT;
      pReserved : LPVOID
   ) return MMRESULT;
   pragma import (C,midiConnect,"midiConnect");
   function midiDisconnect(
      hmi : HMIDI;
      hmo : HMIDIOUT;
      pReserved : LPVOID
   ) return MMRESULT;
   pragma import (C,midiDisconnect,"midiDisconnect");
   function midiOutGetDevCapsA(
      uDeviceID : UINT_PTR;
      pmoc : LPMIDIOUTCAPSA;
      cbmoc : UINT
   ) return MMRESULT;
   pragma import (C,midiOutGetDevCapsA,"midiOutGetDevCapsA");
   function midiOutGetDevCapsW(
      uDeviceID : UINT_PTR;
      pmoc : LPMIDIOUTCAPSW;
      cbmoc : UINT
   ) return MMRESULT;
   pragma import (C,midiOutGetDevCapsW,"midiOutGetDevCapsW");
   function midiOutGetVolume(
      hmo : HMIDIOUT;
      pdwVolume : LPDWORD
   ) return MMRESULT;
   pragma import (C,midiOutGetVolume,"midiOutGetVolume");
   function midiOutSetVolume(
      hmo : HMIDIOUT;
      dwVolume : DWORD
   ) return MMRESULT;
   pragma import (C,midiOutSetVolume,"midiOutSetVolume");
   function midiOutGetErrorTextA(
      mmrError : MMRESULT;
      pszText : LPSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,midiOutGetErrorTextA,"midiOutGetErrorTextA");
   function midiOutGetErrorTextW(
      mmrError : MMRESULT;
      pszText : LPWSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,midiOutGetErrorTextW,"midiOutGetErrorTextW");
   function midiOutOpen(
      phmo : LPHMIDIOUT;
      uDeviceID : UINT;
      dwCallback : DWORD_PTR;
      dwInstance : DWORD_PTR;
      fdwOpen : DWORD
   ) return MMRESULT;
   pragma import (C,midiOutOpen,"midiOutOpen");
   function midiOutClose(
      hmo : HMIDIOUT
   ) return MMRESULT;
   pragma import (C,midiOutClose,"midiOutClose");
   function midiOutPrepareHeader(
      hmo : HMIDIOUT;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiOutPrepareHeader,"midiOutPrepareHeader");
   function midiOutUnprepareHeader(
      hmo : HMIDIOUT;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiOutUnprepareHeader,"midiOutUnprepareHeader");
   function midiOutShortMsg(
      hmo : HMIDIOUT;
      dwMsg : DWORD
   ) return MMRESULT;
   pragma import (C,midiOutShortMsg,"midiOutShortMsg");
   function midiOutLongMsg(
      hmo : HMIDIOUT;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiOutLongMsg,"midiOutLongMsg");
   function midiOutReset(
      hmo : HMIDIOUT
   ) return MMRESULT;
   pragma import (C,midiOutReset,"midiOutReset");
   function midiOutCachePatches(
      hmo : HMIDIOUT;
      uBank : UINT;
      pwpa : LPWORD;
      fuCache : UINT
   ) return MMRESULT;
   pragma import (C,midiOutCachePatches,"midiOutCachePatches");
   function midiOutCacheDrumPatches(
      hmo : HMIDIOUT;
      uPatch : UINT;
      pwkya : LPWORD;
      fuCache : UINT
   ) return MMRESULT;
   pragma import (C,midiOutCacheDrumPatches,"midiOutCacheDrumPatches");
   function midiOutGetID(
      hmo : HMIDIOUT;
      puDeviceID : LPUINT
   ) return MMRESULT;
   pragma import (C,midiOutGetID,"midiOutGetID");
   function midiOutMessage(
      hmo : HMIDIOUT;
      uMsg : UINT;
      dw1 : DWORD_PTR;
      dw2 : DWORD_PTR
   ) return MMRESULT;
   pragma import (C,midiOutMessage,"midiOutMessage");
   function midiInGetNumDevs return UINT;
   pragma import (C,midiInGetNumDevs,"midiInGetNumDevs");
   function midiInGetDevCapsA(
      uDeviceID : UINT_PTR;
      pmic : LPMIDIINCAPSA;
      cbmic : UINT
   ) return MMRESULT;
   pragma import (C,midiInGetDevCapsA,"midiInGetDevCapsA");
   function midiInGetDevCapsW(
      uDeviceID : UINT_PTR;
      pmic : LPMIDIINCAPSW;
      cbmic : UINT
   ) return MMRESULT;
   pragma import (C,midiInGetDevCapsW,"midiInGetDevCapsW");
   function midiInGetErrorTextA(
      mmrError : MMRESULT;
      pszText : LPSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,midiInGetErrorTextA,"midiInGetErrorTextA");
   function midiInGetErrorTextW(
      mmrError : MMRESULT;
      pszText : LPWSTR;
      cchText : UINT
   ) return MMRESULT;
   pragma import (C,midiInGetErrorTextW,"midiInGetErrorTextW");
   function midiInOpen(
      phmi : LPHMIDIIN;
      uDeviceID : UINT;
      dwCallback : DWORD_PTR;
      dwInstance : DWORD_PTR;
      fdwOpen : DWORD
   ) return MMRESULT;
   pragma import (C,midiInOpen,"midiInOpen");
   function midiInClose(
      hmi : HMIDIIN
   ) return MMRESULT;
   pragma import (C,midiInClose,"midiInClose");
   function midiInPrepareHeader(
      hmi : HMIDIIN;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiInPrepareHeader,"midiInPrepareHeader");
   function midiInUnprepareHeader(
      hmi : HMIDIIN;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiInUnprepareHeader,"midiInUnprepareHeader");
   function midiInAddBuffer(
      hmi : HMIDIIN;
      pmh : LPMIDIHDR;
      cbmh : UINT
   ) return MMRESULT;
   pragma import (C,midiInAddBuffer,"midiInAddBuffer");
   function midiInStart(
      hmi : HMIDIIN
   ) return MMRESULT;
   pragma import (C,midiInStart,"midiInStart");
   function midiInStop(
      hmi : HMIDIIN
   ) return MMRESULT;
   pragma import (C,midiInStop,"midiInStop");
   function midiInReset(
      hmi : HMIDIIN
   ) return MMRESULT;
   pragma import (C,midiInReset,"midiInReset");
   function midiInGetID(
      hmi : HMIDIIN;
      puDeviceID : LPUINT
   ) return MMRESULT;
   pragma import (C,midiInGetID,"midiInGetID");
   function midiInMessage(
      hmi : HMIDIIN;
      uMsg : UINT;
      dw1 : DWORD_PTR;
      dw2 : DWORD_PTR
   ) return MMRESULT;
   pragma import (C,midiInMessage,"midiInMessage");
   type tagAUXCAPSA is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
   end record;
   subtype AUXCAPSA is tagAUXCAPSA; -- CXType_Elaborated
   type PAUXCAPSA is access tagAUXCAPSA; -- CXType_Pointer - CXType_Elaborated
   type NPAUXCAPSA is access tagAUXCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPAUXCAPSA is access tagAUXCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagAUXCAPSW is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
   end record;
   subtype AUXCAPSW is tagAUXCAPSW; -- CXType_Elaborated
   type PAUXCAPSW is access tagAUXCAPSW; -- CXType_Pointer - CXType_Elaborated
   type NPAUXCAPSW is access tagAUXCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPAUXCAPSW is access tagAUXCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype AUXCAPS is AUXCAPSA; -- CXType_Typedef
   subtype PAUXCAPS is PAUXCAPSA; -- CXType_Typedef
   subtype NPAUXCAPS is NPAUXCAPSA; -- CXType_Typedef
   subtype LPAUXCAPS is LPAUXCAPSA; -- CXType_Typedef
   type tagAUXCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype AUXCAPS2A is tagAUXCAPS2A; -- CXType_Elaborated
   type PAUXCAPS2A is access tagAUXCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type NPAUXCAPS2A is access tagAUXCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPAUXCAPS2A is access tagAUXCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagAUXCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      wTechnology : WORD;
      wReserved1 : WORD;
      dwSupport : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype AUXCAPS2W is tagAUXCAPS2W; -- CXType_Elaborated
   type PAUXCAPS2W is access tagAUXCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type NPAUXCAPS2W is access tagAUXCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPAUXCAPS2W is access tagAUXCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype AUXCAPS2 is AUXCAPS2A; -- CXType_Typedef
   subtype PAUXCAPS2 is PAUXCAPS2A; -- CXType_Typedef
   subtype NPAUXCAPS2 is NPAUXCAPS2A; -- CXType_Typedef
   subtype LPAUXCAPS2 is LPAUXCAPS2A; -- CXType_Typedef
   function auxGetNumDevs return UINT;
   pragma import (C,auxGetNumDevs,"auxGetNumDevs");
   function auxGetDevCapsA(
      uDeviceID : UINT_PTR;
      pac : LPAUXCAPSA;
      cbac : UINT
   ) return MMRESULT;
   pragma import (C,auxGetDevCapsA,"auxGetDevCapsA");
   function auxGetDevCapsW(
      uDeviceID : UINT_PTR;
      pac : LPAUXCAPSW;
      cbac : UINT
   ) return MMRESULT;
   pragma import (C,auxGetDevCapsW,"auxGetDevCapsW");
   function auxSetVolume(
      uDeviceID : UINT;
      dwVolume : DWORD
   ) return MMRESULT;
   pragma import (C,auxSetVolume,"auxSetVolume");
   function auxGetVolume(
      uDeviceID : UINT;
      pdwVolume : LPDWORD
   ) return MMRESULT;
   pragma import (C,auxGetVolume,"auxGetVolume");
   function auxOutMessage(
      uDeviceID : UINT;
      uMsg : UINT;
      dw1 : DWORD_PTR;
      dw2 : DWORD_PTR
   ) return MMRESULT;
   pragma import (C,auxOutMessage,"auxOutMessage");
   type HMIXEROBJ_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMIXEROBJ is access HMIXEROBJ_x; -- CXType_Pointer - CXType_Elaborated
   type LPHMIXEROBJ is access HMIXEROBJ; -- CXType_Pointer - CXType_Typedef
   type HMIXER_x is record
      unused : Interfaces.C.Int;
   end record;
   type HMIXER is access HMIXER_x; -- CXType_Pointer - CXType_Elaborated
   type LPHMIXER is access HMIXER; -- CXType_Pointer - CXType_Typedef
   function mixerGetNumDevs return UINT;
   pragma import (C,mixerGetNumDevs,"mixerGetNumDevs");
   type tagMIXERCAPSA is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      fdwSupport : DWORD;
      cDestinations : DWORD;
   end record;
   subtype MIXERCAPSA is tagMIXERCAPSA; -- CXType_Elaborated
   type PMIXERCAPSA is access tagMIXERCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCAPSA is access tagMIXERCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERCAPSW is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      fdwSupport : DWORD;
      cDestinations : DWORD;
   end record;
   subtype MIXERCAPSW is tagMIXERCAPSW; -- CXType_Elaborated
   type PMIXERCAPSW is access tagMIXERCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCAPSW is access tagMIXERCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype MIXERCAPS is MIXERCAPSA; -- CXType_Typedef
   subtype PMIXERCAPS is PMIXERCAPSA; -- CXType_Typedef
   subtype LPMIXERCAPS is LPMIXERCAPSA; -- CXType_Typedef
   type tagMIXERCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      fdwSupport : DWORD;
      cDestinations : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype MIXERCAPS2A is tagMIXERCAPS2A; -- CXType_Elaborated
   type PMIXERCAPS2A is access tagMIXERCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCAPS2A is access tagMIXERCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      vDriverVersion : MMVERSION;
      szPname : Void;
      fdwSupport : DWORD;
      cDestinations : DWORD;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype MIXERCAPS2W is tagMIXERCAPS2W; -- CXType_Elaborated
   type PMIXERCAPS2W is access tagMIXERCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCAPS2W is access tagMIXERCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype MIXERCAPS2 is MIXERCAPS2A; -- CXType_Typedef
   subtype PMIXERCAPS2 is PMIXERCAPS2A; -- CXType_Typedef
   subtype LPMIXERCAPS2 is LPMIXERCAPS2A; -- CXType_Typedef
   function mixerGetDevCapsA(
      uMxId : UINT_PTR;
      pmxcaps : LPMIXERCAPSA;
      cbmxcaps : UINT
   ) return MMRESULT;
   pragma import (C,mixerGetDevCapsA,"mixerGetDevCapsA");
   function mixerGetDevCapsW(
      uMxId : UINT_PTR;
      pmxcaps : LPMIXERCAPSW;
      cbmxcaps : UINT
   ) return MMRESULT;
   pragma import (C,mixerGetDevCapsW,"mixerGetDevCapsW");
   function mixerOpen(
      phmx : LPHMIXER;
      uMxId : UINT;
      dwCallback : DWORD_PTR;
      dwInstance : DWORD_PTR;
      fdwOpen : DWORD
   ) return MMRESULT;
   pragma import (C,mixerOpen,"mixerOpen");
   function mixerClose(
      hmx : HMIXER
   ) return MMRESULT;
   pragma import (C,mixerClose,"mixerClose");
   function mixerMessage(
      hmx : HMIXER;
      uMsg : UINT;
      dwParam1 : DWORD_PTR;
      dwParam2 : DWORD_PTR
   ) return DWORD;
   pragma import (C,mixerMessage,"mixerMessage");
   type tagMIXERLINEA is record
      cbStruct : DWORD;
      dwDestination : DWORD;
      dwSource : DWORD;
      dwLineID : DWORD;
      fdwLine : DWORD;
      dwUser : DWORD_PTR;
      dwComponentType : DWORD;
      cChannels : DWORD;
      cConnections : DWORD;
      cControls : DWORD;
      szShortName : Void;
      szName : Void;
      Target : Void;
   end record;
   subtype MIXERLINEA is tagMIXERLINEA; -- CXType_Elaborated
   type PMIXERLINEA is access tagMIXERLINEA; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERLINEA is access tagMIXERLINEA; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERLINEW is record
      cbStruct : DWORD;
      dwDestination : DWORD;
      dwSource : DWORD;
      dwLineID : DWORD;
      fdwLine : DWORD;
      dwUser : DWORD_PTR;
      dwComponentType : DWORD;
      cChannels : DWORD;
      cConnections : DWORD;
      cControls : DWORD;
      szShortName : Void;
      szName : Void;
      Target : Void;
   end record;
   subtype MIXERLINEW is tagMIXERLINEW; -- CXType_Elaborated
   type PMIXERLINEW is access tagMIXERLINEW; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERLINEW is access tagMIXERLINEW; -- CXType_Pointer - CXType_Elaborated
   subtype MIXERLINE is MIXERLINEA; -- CXType_Typedef
   subtype PMIXERLINE is PMIXERLINEA; -- CXType_Typedef
   subtype LPMIXERLINE is LPMIXERLINEA; -- CXType_Typedef
   function mixerGetLineInfoA(
      hmxobj : HMIXEROBJ;
      pmxl : LPMIXERLINEA;
      fdwInfo : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetLineInfoA,"mixerGetLineInfoA");
   function mixerGetLineInfoW(
      hmxobj : HMIXEROBJ;
      pmxl : LPMIXERLINEW;
      fdwInfo : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetLineInfoW,"mixerGetLineInfoW");
   function mixerGetID(
      hmxobj : HMIXEROBJ;
      puMxId : access UINT;
      fdwId : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetID,"mixerGetID");
   type tagMIXERCONTROLA is record
      cbStruct : DWORD;
      dwControlID : DWORD;
      dwControlType : DWORD;
      fdwControl : DWORD;
      cMultipleItems : DWORD;
      szShortName : Void;
      szName : Void;
      Bounds : Void;
      Metrics : Void;
   end record;
   subtype MIXERCONTROLA is tagMIXERCONTROLA; -- CXType_Elaborated
   type PMIXERCONTROLA is access tagMIXERCONTROLA; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLA is access tagMIXERCONTROLA; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERCONTROLW is record
      cbStruct : DWORD;
      dwControlID : DWORD;
      dwControlType : DWORD;
      fdwControl : DWORD;
      cMultipleItems : DWORD;
      szShortName : Void;
      szName : Void;
      Bounds : Void;
      Metrics : Void;
   end record;
   subtype MIXERCONTROLW is tagMIXERCONTROLW; -- CXType_Elaborated
   type PMIXERCONTROLW is access tagMIXERCONTROLW; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLW is access tagMIXERCONTROLW; -- CXType_Pointer - CXType_Elaborated
   subtype MIXERCONTROL is MIXERCONTROLA; -- CXType_Typedef
   subtype PMIXERCONTROL is PMIXERCONTROLA; -- CXType_Typedef
   subtype LPMIXERCONTROL is LPMIXERCONTROLA; -- CXType_Typedef
   type tagMIXERLINECONTROLSA is record
      cbStruct : DWORD;
      dwLineID : DWORD;
      cControls : DWORD;
      cbmxctrl : DWORD;
      pamxctrl : LPMIXERCONTROLA;
   end record;
   subtype MIXERLINECONTROLSA is tagMIXERLINECONTROLSA; -- CXType_Elaborated
   type PMIXERLINECONTROLSA is access tagMIXERLINECONTROLSA; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERLINECONTROLSA is access tagMIXERLINECONTROLSA; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERLINECONTROLSW is record
      cbStruct : DWORD;
      dwLineID : DWORD;
      cControls : DWORD;
      cbmxctrl : DWORD;
      pamxctrl : LPMIXERCONTROLW;
   end record;
   subtype MIXERLINECONTROLSW is tagMIXERLINECONTROLSW; -- CXType_Elaborated
   type PMIXERLINECONTROLSW is access tagMIXERLINECONTROLSW; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERLINECONTROLSW is access tagMIXERLINECONTROLSW; -- CXType_Pointer - CXType_Elaborated
   subtype MIXERLINECONTROLS is MIXERLINECONTROLSA; -- CXType_Typedef
   subtype PMIXERLINECONTROLS is PMIXERLINECONTROLSA; -- CXType_Typedef
   subtype LPMIXERLINECONTROLS is LPMIXERLINECONTROLSA; -- CXType_Typedef
   function mixerGetLineControlsA(
      hmxobj : HMIXEROBJ;
      pmxlc : LPMIXERLINECONTROLSA;
      fdwControls : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetLineControlsA,"mixerGetLineControlsA");
   function mixerGetLineControlsW(
      hmxobj : HMIXEROBJ;
      pmxlc : LPMIXERLINECONTROLSW;
      fdwControls : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetLineControlsW,"mixerGetLineControlsW");
   type tMIXERCONTROLDETAILS is record
      cbStruct : DWORD;
      dwControlID : DWORD;
      cChannels : DWORD;
      cbDetails : DWORD;
      paDetails : LPVOID;
   end record;
   subtype MIXERCONTROLDETAILS is tMIXERCONTROLDETAILS; -- CXType_Elaborated
   type PMIXERCONTROLDETAILS is access tMIXERCONTROLDETAILS; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLDETAILS is access tMIXERCONTROLDETAILS; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERCONTROLDETAILS_LISTTEXTA is record
      dwParam1 : DWORD;
      dwParam2 : DWORD;
      szName : Void;
   end record;
   subtype MIXERCONTROLDETAILS_LISTTEXTA is tagMIXERCONTROLDETAILS_LISTTEXTA; -- CXType_Elaborated
   type PMIXERCONTROLDETAILS_LISTTEXTA is access tagMIXERCONTROLDETAILS_LISTTEXTA; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLDETAILS_LISTTEXTA is access tagMIXERCONTROLDETAILS_LISTTEXTA; -- CXType_Pointer - CXType_Elaborated
   type tagMIXERCONTROLDETAILS_LISTTEXTW is record
      dwParam1 : DWORD;
      dwParam2 : DWORD;
      szName : Void;
   end record;
   subtype MIXERCONTROLDETAILS_LISTTEXTW is tagMIXERCONTROLDETAILS_LISTTEXTW; -- CXType_Elaborated
   type PMIXERCONTROLDETAILS_LISTTEXTW is access tagMIXERCONTROLDETAILS_LISTTEXTW; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLDETAILS_LISTTEXTW is access tagMIXERCONTROLDETAILS_LISTTEXTW; -- CXType_Pointer - CXType_Elaborated
   subtype MIXERCONTROLDETAILS_LISTTEXT is MIXERCONTROLDETAILS_LISTTEXTA; -- CXType_Typedef
   subtype PMIXERCONTROLDETAILS_LISTTEXT is PMIXERCONTROLDETAILS_LISTTEXTA; -- CXType_Typedef
   subtype LPMIXERCONTROLDETAILS_LISTTEXT is LPMIXERCONTROLDETAILS_LISTTEXTA; -- CXType_Typedef
   type tMIXERCONTROLDETAILS_BOOLEAN is record
      fValue : LONG;
   end record;
   subtype MIXERCONTROLDETAILS_BOOLEAN is tMIXERCONTROLDETAILS_BOOLEAN; -- CXType_Elaborated
   type PMIXERCONTROLDETAILS_BOOLEAN is access tMIXERCONTROLDETAILS_BOOLEAN; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLDETAILS_BOOLEAN is access tMIXERCONTROLDETAILS_BOOLEAN; -- CXType_Pointer - CXType_Elaborated
   type tMIXERCONTROLDETAILS_SIGNED is record
      lValue : LONG;
   end record;
   subtype MIXERCONTROLDETAILS_SIGNED is tMIXERCONTROLDETAILS_SIGNED; -- CXType_Elaborated
   type PMIXERCONTROLDETAILS_SIGNED is access tMIXERCONTROLDETAILS_SIGNED; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLDETAILS_SIGNED is access tMIXERCONTROLDETAILS_SIGNED; -- CXType_Pointer - CXType_Elaborated
   type tMIXERCONTROLDETAILS_UNSIGNED is record
      dwValue : DWORD;
   end record;
   subtype MIXERCONTROLDETAILS_UNSIGNED is tMIXERCONTROLDETAILS_UNSIGNED; -- CXType_Elaborated
   type PMIXERCONTROLDETAILS_UNSIGNED is access tMIXERCONTROLDETAILS_UNSIGNED; -- CXType_Pointer - CXType_Elaborated
   type LPMIXERCONTROLDETAILS_UNSIGNED is access tMIXERCONTROLDETAILS_UNSIGNED; -- CXType_Pointer - CXType_Elaborated
   function mixerGetControlDetailsA(
      hmxobj : HMIXEROBJ;
      pmxcd : LPMIXERCONTROLDETAILS;
      fdwDetails : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetControlDetailsA,"mixerGetControlDetailsA");
   function mixerGetControlDetailsW(
      hmxobj : HMIXEROBJ;
      pmxcd : LPMIXERCONTROLDETAILS;
      fdwDetails : DWORD
   ) return MMRESULT;
   pragma import (C,mixerGetControlDetailsW,"mixerGetControlDetailsW");
   function mixerSetControlDetails(
      hmxobj : HMIXEROBJ;
      pmxcd : LPMIXERCONTROLDETAILS;
      fdwDetails : DWORD
   ) return MMRESULT;
   pragma import (C,mixerSetControlDetails,"mixerSetControlDetails");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\timeapi.h>
   type timecaps_tag is record
      wPeriodMin : UINT;
      wPeriodMax : UINT;
   end record;
   subtype TIMECAPS is timecaps_tag; -- CXType_Elaborated
   type PTIMECAPS is access timecaps_tag; -- CXType_Pointer - CXType_Elaborated
   type NPTIMECAPS is access timecaps_tag; -- CXType_Pointer - CXType_Elaborated
   type LPTIMECAPS is access timecaps_tag; -- CXType_Pointer - CXType_Elaborated
   function timeGetSystemTime(
      pmmt : LPMMTIME;
      cbmmt : UINT
   ) return MMRESULT;
   pragma import (C,timeGetSystemTime,"timeGetSystemTime");
   function timeGetTime return DWORD;
   pragma import (C,timeGetTime,"timeGetTime");
   function timeGetDevCaps(
      ptc : LPTIMECAPS;
      cbtc : UINT
   ) return MMRESULT;
   pragma import (C,timeGetDevCaps,"timeGetDevCaps");
   function timeBeginPeriod(
      uPeriod : UINT
   ) return MMRESULT;
   pragma import (C,timeBeginPeriod,"timeBeginPeriod");
   function timeEndPeriod(
      uPeriod : UINT
   ) return MMRESULT;
   pragma import (C,timeEndPeriod,"timeEndPeriod");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\joystickapi.h>
   type tagJOYCAPSA is record
      wMid : WORD;
      wPid : WORD;
      szPname : Void;
      wXmin : UINT;
      wXmax : UINT;
      wYmin : UINT;
      wYmax : UINT;
      wZmin : UINT;
      wZmax : UINT;
      wNumButtons : UINT;
      wPeriodMin : UINT;
      wPeriodMax : UINT;
      wRmin : UINT;
      wRmax : UINT;
      wUmin : UINT;
      wUmax : UINT;
      wVmin : UINT;
      wVmax : UINT;
      wCaps : UINT;
      wMaxAxes : UINT;
      wNumAxes : UINT;
      wMaxButtons : UINT;
      szRegKey : Void;
      szOEMVxD : Void;
   end record;
   subtype JOYCAPSA is tagJOYCAPSA; -- CXType_Elaborated
   type PJOYCAPSA is access tagJOYCAPSA; -- CXType_Pointer - CXType_Elaborated
   type NPJOYCAPSA is access tagJOYCAPSA; -- CXType_Pointer - CXType_Elaborated
   type LPJOYCAPSA is access tagJOYCAPSA; -- CXType_Pointer - CXType_Elaborated
   type tagJOYCAPSW is record
      wMid : WORD;
      wPid : WORD;
      szPname : Void;
      wXmin : UINT;
      wXmax : UINT;
      wYmin : UINT;
      wYmax : UINT;
      wZmin : UINT;
      wZmax : UINT;
      wNumButtons : UINT;
      wPeriodMin : UINT;
      wPeriodMax : UINT;
      wRmin : UINT;
      wRmax : UINT;
      wUmin : UINT;
      wUmax : UINT;
      wVmin : UINT;
      wVmax : UINT;
      wCaps : UINT;
      wMaxAxes : UINT;
      wNumAxes : UINT;
      wMaxButtons : UINT;
      szRegKey : Void;
      szOEMVxD : Void;
   end record;
   subtype JOYCAPSW is tagJOYCAPSW; -- CXType_Elaborated
   type PJOYCAPSW is access tagJOYCAPSW; -- CXType_Pointer - CXType_Elaborated
   type NPJOYCAPSW is access tagJOYCAPSW; -- CXType_Pointer - CXType_Elaborated
   type LPJOYCAPSW is access tagJOYCAPSW; -- CXType_Pointer - CXType_Elaborated
   subtype JOYCAPS is JOYCAPSA; -- CXType_Typedef
   subtype PJOYCAPS is PJOYCAPSA; -- CXType_Typedef
   subtype NPJOYCAPS is NPJOYCAPSA; -- CXType_Typedef
   subtype LPJOYCAPS is LPJOYCAPSA; -- CXType_Typedef
   type tagJOYCAPS2A is record
      wMid : WORD;
      wPid : WORD;
      szPname : Void;
      wXmin : UINT;
      wXmax : UINT;
      wYmin : UINT;
      wYmax : UINT;
      wZmin : UINT;
      wZmax : UINT;
      wNumButtons : UINT;
      wPeriodMin : UINT;
      wPeriodMax : UINT;
      wRmin : UINT;
      wRmax : UINT;
      wUmin : UINT;
      wUmax : UINT;
      wVmin : UINT;
      wVmax : UINT;
      wCaps : UINT;
      wMaxAxes : UINT;
      wNumAxes : UINT;
      wMaxButtons : UINT;
      szRegKey : Void;
      szOEMVxD : Void;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype JOYCAPS2A is tagJOYCAPS2A; -- CXType_Elaborated
   type PJOYCAPS2A is access tagJOYCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type NPJOYCAPS2A is access tagJOYCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type LPJOYCAPS2A is access tagJOYCAPS2A; -- CXType_Pointer - CXType_Elaborated
   type tagJOYCAPS2W is record
      wMid : WORD;
      wPid : WORD;
      szPname : Void;
      wXmin : UINT;
      wXmax : UINT;
      wYmin : UINT;
      wYmax : UINT;
      wZmin : UINT;
      wZmax : UINT;
      wNumButtons : UINT;
      wPeriodMin : UINT;
      wPeriodMax : UINT;
      wRmin : UINT;
      wRmax : UINT;
      wUmin : UINT;
      wUmax : UINT;
      wVmin : UINT;
      wVmax : UINT;
      wCaps : UINT;
      wMaxAxes : UINT;
      wNumAxes : UINT;
      wMaxButtons : UINT;
      szRegKey : Void;
      szOEMVxD : Void;
      ManufacturerGuid : GUID;
      ProductGuid : GUID;
      NameGuid : GUID;
   end record;
   subtype JOYCAPS2W is tagJOYCAPS2W; -- CXType_Elaborated
   type PJOYCAPS2W is access tagJOYCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type NPJOYCAPS2W is access tagJOYCAPS2W; -- CXType_Pointer - CXType_Elaborated
   type LPJOYCAPS2W is access tagJOYCAPS2W; -- CXType_Pointer - CXType_Elaborated
   subtype JOYCAPS2 is JOYCAPS2A; -- CXType_Typedef
   subtype PJOYCAPS2 is PJOYCAPS2A; -- CXType_Typedef
   subtype NPJOYCAPS2 is NPJOYCAPS2A; -- CXType_Typedef
   subtype LPJOYCAPS2 is LPJOYCAPS2A; -- CXType_Typedef
   type joyinfo_tag is record
      wXpos : UINT;
      wYpos : UINT;
      wZpos : UINT;
      wButtons : UINT;
   end record;
   subtype JOYINFO is joyinfo_tag; -- CXType_Elaborated
   type PJOYINFO is access joyinfo_tag; -- CXType_Pointer - CXType_Elaborated
   type NPJOYINFO is access joyinfo_tag; -- CXType_Pointer - CXType_Elaborated
   type LPJOYINFO is access joyinfo_tag; -- CXType_Pointer - CXType_Elaborated
   type joyinfoex_tag is record
      dwSize : DWORD;
      dwFlags : DWORD;
      dwXpos : DWORD;
      dwYpos : DWORD;
      dwZpos : DWORD;
      dwRpos : DWORD;
      dwUpos : DWORD;
      dwVpos : DWORD;
      dwButtons : DWORD;
      dwButtonNumber : DWORD;
      dwPOV : DWORD;
      dwReserved1 : DWORD;
      dwReserved2 : DWORD;
   end record;
   subtype JOYINFOEX is joyinfoex_tag; -- CXType_Elaborated
   type PJOYINFOEX is access joyinfoex_tag; -- CXType_Pointer - CXType_Elaborated
   type NPJOYINFOEX is access joyinfoex_tag; -- CXType_Pointer - CXType_Elaborated
   type LPJOYINFOEX is access joyinfoex_tag; -- CXType_Pointer - CXType_Elaborated
   function joyGetPosEx(
      uJoyID : UINT;
      pji : LPJOYINFOEX
   ) return MMRESULT;
   pragma import (C,joyGetPosEx,"joyGetPosEx");
   function joyGetNumDevs return UINT;
   pragma import (C,joyGetNumDevs,"joyGetNumDevs");
   function joyGetDevCapsA(
      uJoyID : UINT_PTR;
      pjc : LPJOYCAPSA;
      cbjc : UINT
   ) return MMRESULT;
   pragma import (C,joyGetDevCapsA,"joyGetDevCapsA");
   function joyGetDevCapsW(
      uJoyID : UINT_PTR;
      pjc : LPJOYCAPSW;
      cbjc : UINT
   ) return MMRESULT;
   pragma import (C,joyGetDevCapsW,"joyGetDevCapsW");
   function joyGetPos(
      uJoyID : UINT;
      pji : LPJOYINFO
   ) return MMRESULT;
   pragma import (C,joyGetPos,"joyGetPos");
   function joyGetThreshold(
      uJoyID : UINT;
      puThreshold : LPUINT
   ) return MMRESULT;
   pragma import (C,joyGetThreshold,"joyGetThreshold");
   function joyReleaseCapture(
      uJoyID : UINT
   ) return MMRESULT;
   pragma import (C,joyReleaseCapture,"joyReleaseCapture");
   function joySetCapture(
      hwnd_x : HWND;
      uJoyID : UINT;
      uPeriod : UINT;
      fChanged : BOOL
   ) return MMRESULT;
   pragma import (C,joySetCapture,"joySetCapture");
   function joySetThreshold(
      uJoyID : UINT;
      uThreshold : UINT
   ) return MMRESULT;
   pragma import (C,joySetThreshold,"joySetThreshold");
   function joyConfigChanged(
      dwFlags : DWORD
   ) return MMRESULT;
   pragma import (C,joyConfigChanged,"joyConfigChanged");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\nb30.h>
   type NCB_x is record
      ncb_command : UCHAR;
      ncb_retcode : UCHAR;
      ncb_lsn : UCHAR;
      ncb_num : UCHAR;
      ncb_buffer : PUCHAR;
      ncb_length : WORD;
      ncb_callname : Void;
      ncb_name : Void;
      ncb_rto : UCHAR;
      ncb_sto : UCHAR;
      ncb_post : access System.Address;
      ncb_lana_num : UCHAR;
      ncb_cmd_cplt : UCHAR;
      ncb_reserve : Void;
      ncb_event : HANDLE;
   end record;
   subtype NCB is NCB_x; -- CXType_Elaborated
   type PNCB is access NCB_x; -- CXType_Pointer - CXType_Elaborated
   type ADAPTER_STATUS_x is record
      adapter_address : Void;
      rev_major : UCHAR;
      reserved0 : UCHAR;
      adapter_type : UCHAR;
      rev_minor : UCHAR;
      duration : WORD;
      frmr_recv : WORD;
      frmr_xmit : WORD;
      iframe_recv_err : WORD;
      xmit_aborts : WORD;
      xmit_success : DWORD;
      recv_success : DWORD;
      iframe_xmit_err : WORD;
      recv_buff_unavail : WORD;
      t1_timeouts : WORD;
      ti_timeouts : WORD;
      reserved1 : DWORD;
      free_ncbs : WORD;
      max_cfg_ncbs : WORD;
      max_ncbs : WORD;
      xmit_buf_unavail : WORD;
      max_dgram_size : WORD;
      pending_sess : WORD;
      max_cfg_sess : WORD;
      max_sess : WORD;
      max_sess_pkt_size : WORD;
      name_count : WORD;
   end record;
   subtype ADAPTER_STATUS is ADAPTER_STATUS_x; -- CXType_Elaborated
   type PADAPTER_STATUS is access ADAPTER_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type NAME_BUFFER_x is record
      name : Void;
      name_num : UCHAR;
      name_flags : UCHAR;
   end record;
   subtype NAME_BUFFER is NAME_BUFFER_x; -- CXType_Elaborated
   type PNAME_BUFFER is access NAME_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type SESSION_HEADER_x is record
      sess_name : UCHAR;
      num_sess : UCHAR;
      rcv_dg_outstanding : UCHAR;
      rcv_any_outstanding : UCHAR;
   end record;
   subtype SESSION_HEADER is SESSION_HEADER_x; -- CXType_Elaborated
   type PSESSION_HEADER is access SESSION_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type SESSION_BUFFER_x is record
      lsn : UCHAR;
      state : UCHAR;
      local_name : Void;
      remote_name : Void;
      rcvs_outstanding : UCHAR;
      sends_outstanding : UCHAR;
   end record;
   subtype SESSION_BUFFER is SESSION_BUFFER_x; -- CXType_Elaborated
   type PSESSION_BUFFER is access SESSION_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type LANA_ENUM_x is record
      length : UCHAR;
      lana : Void;
   end record;
   subtype LANA_ENUM is LANA_ENUM_x; -- CXType_Elaborated
   type PLANA_ENUM is access LANA_ENUM_x; -- CXType_Pointer - CXType_Elaborated
   type FIND_NAME_HEADER_x is record
      node_count : WORD;
      reserved : UCHAR;
      unique_group : UCHAR;
   end record;
   subtype FIND_NAME_HEADER is FIND_NAME_HEADER_x; -- CXType_Elaborated
   type PFIND_NAME_HEADER is access FIND_NAME_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type FIND_NAME_BUFFER_x is record
      length : UCHAR;
      access_control : UCHAR;
      frame_control : UCHAR;
      destination_addr : Void;
      source_addr : Void;
      routing_info : Void;
   end record;
   subtype FIND_NAME_BUFFER is FIND_NAME_BUFFER_x; -- CXType_Elaborated
   type PFIND_NAME_BUFFER is access FIND_NAME_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type ACTION_HEADER_x is record
      transport_id : ULONG;
      action_code : USHORT;
      reserved : USHORT;
   end record;
   subtype ACTION_HEADER is ACTION_HEADER_x; -- CXType_Elaborated
   type PACTION_HEADER is access ACTION_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   function Netbios(
      pncb_x : PNCB
   ) return UCHAR;
   pragma import (C,Netbios,"Netbios");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared/rpc.h>
   type I_RPC_HANDLE is access Void; -- CXType_Pointer - CXType_Void
   subtype RPC_STATUS is Interfaces.C.Long; -- CXType_Long
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\rpcdce.h>
   type RPC_CSTR is access Interfaces.C.unsigned_char; -- CXType_Pointer - CXType_UChar
   type RPC_WSTR is access Interfaces.C.unsigned_short; -- CXType_Pointer - CXType_UShort
   type RPC_CWSTR is access constant Interfaces.C.unsigned_short; -- CXType_Pointer - CXType_UShort
   subtype RPC_BINDING_HANDLE is I_RPC_HANDLE; -- CXType_Typedef
   subtype handle_t is RPC_BINDING_HANDLE; -- CXType_Typedef
   subtype UUID is GUID; -- CXType_Typedef
   type RPC_BINDING_VECTOR_x is record
      Count : Interfaces.C.unsigned_long;
      BindingH : Void;
   end record;
   subtype RPC_BINDING_VECTOR is RPC_BINDING_VECTOR_x; -- CXType_Elaborated
   type UUID_VECTOR_x is record
      Count : Interfaces.C.unsigned_long;
      Uuid_x : Void;
   end record;
   subtype UUID_VECTOR is UUID_VECTOR_x; -- CXType_Elaborated
   type RPC_IF_HANDLE is access Void; -- CXType_Pointer - CXType_Void
   type RPC_IF_ID_x is record
      Uuid_x : UUID;
      VersMajor : Interfaces.C.unsigned_short;
      VersMinor : Interfaces.C.unsigned_short;
   end record;
   subtype RPC_IF_ID is RPC_IF_ID_x; -- CXType_Elaborated
   type RPC_PROTSEQ_VECTORA_x is record
      Count : Interfaces.C.unsigned;
      Protseq : Void;
   end record;
   subtype RPC_PROTSEQ_VECTORA is RPC_PROTSEQ_VECTORA_x; -- CXType_Elaborated
   type RPC_PROTSEQ_VECTORW_x is record
      Count : Interfaces.C.unsigned;
      Protseq : Void;
   end record;
   subtype RPC_PROTSEQ_VECTORW is RPC_PROTSEQ_VECTORW_x; -- CXType_Elaborated
   type RPC_POLICY_x is record
      Length : Interfaces.C.unsigned;
      EndpointFlags : Interfaces.C.unsigned_long;
      NICFlags : Interfaces.C.unsigned_long;
   end record;
   subtype RPC_POLICY is RPC_POLICY_x; -- CXType_Elaborated
   type PRPC_POLICY is access RPC_POLICY_x; -- CXType_Pointer - CXType_Elaborated
   subtype RPC_OBJECT_INQ_FN is System.Address; -- [FIXME - CXType_FunctionProto] void (UUID *, UUID *, RPC_STATUS *)
   subtype RPC_IF_CALLBACK_FN is System.Address; -- [FIXME - CXType_FunctionProto] RPC_STATUS (RPC_IF_HANDLE, void *)
   subtype RPC_SECURITY_CALLBACK_FN is System.Address; -- [FIXME - CXType_FunctionProto] void (void *)
   type RPC_STATS_VECTOR is record
      Count : Interfaces.C.unsigned;
      Stats : Void;
   end record;
   type RPC_IF_ID_VECTOR is record
      Count : Interfaces.C.unsigned_long;
      IfId : Void;
   end record;
   function RpcBindingCopy(
      SourceBinding : RPC_BINDING_HANDLE;
      DestinationBinding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingCopy,"RpcBindingCopy");
   function RpcBindingFree(
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingFree,"RpcBindingFree");
   function RpcBindingSetOption(
      hBinding : RPC_BINDING_HANDLE;
      option : Interfaces.C.unsigned_long;
      optionValue : ULONG_PTR
   ) return RPC_STATUS;
   pragma import (C,RpcBindingSetOption,"RpcBindingSetOption");
   function RpcBindingInqOption(
      hBinding : RPC_BINDING_HANDLE;
      option : Interfaces.C.unsigned_long;
      pOptionValue : access ULONG_PTR
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqOption,"RpcBindingInqOption");
   function RpcBindingFromStringBindingA(
      StringBinding : RPC_CSTR;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingFromStringBindingA,"RpcBindingFromStringBindingA");
   function RpcBindingFromStringBindingW(
      StringBinding : RPC_WSTR;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingFromStringBindingW,"RpcBindingFromStringBindingW");
   function RpcSsGetContextBinding(
      ContextHandle : access Void;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcSsGetContextBinding,"RpcSsGetContextBinding");
   function RpcBindingInqObject(
      Binding : RPC_BINDING_HANDLE;
      ObjectUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqObject,"RpcBindingInqObject");
   function RpcBindingReset(
      Binding : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingReset,"RpcBindingReset");
   function RpcBindingSetObject(
      Binding : RPC_BINDING_HANDLE;
      ObjectUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,RpcBindingSetObject,"RpcBindingSetObject");
   function RpcMgmtInqDefaultProtectLevel(
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthnLevel : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtInqDefaultProtectLevel,"RpcMgmtInqDefaultProtectLevel");
   function RpcBindingToStringBindingA(
      Binding : RPC_BINDING_HANDLE;
      StringBinding : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcBindingToStringBindingA,"RpcBindingToStringBindingA");
   function RpcBindingToStringBindingW(
      Binding : RPC_BINDING_HANDLE;
      StringBinding : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcBindingToStringBindingW,"RpcBindingToStringBindingW");
   type RPC_BINDING_VECTOR_Ptr is access all RPC_BINDING_VECTOR; -- Auto Generated Dependancy
   function RpcBindingVectorFree(
      BindingVector : access RPC_BINDING_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcBindingVectorFree,"RpcBindingVectorFree");
   function RpcStringBindingComposeA(
      ObjUuid : RPC_CSTR;
      ProtSeq : RPC_CSTR;
      NetworkAddr : RPC_CSTR;
      Endpoint : RPC_CSTR;
      Options : RPC_CSTR;
      StringBinding : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcStringBindingComposeA,"RpcStringBindingComposeA");
   function RpcStringBindingComposeW(
      ObjUuid : RPC_WSTR;
      ProtSeq : RPC_WSTR;
      NetworkAddr : RPC_WSTR;
      Endpoint : RPC_WSTR;
      Options : RPC_WSTR;
      StringBinding : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcStringBindingComposeW,"RpcStringBindingComposeW");
   function RpcStringBindingParseA(
      StringBinding : RPC_CSTR;
      ObjUuid : access RPC_CSTR;
      Protseq : access RPC_CSTR;
      NetworkAddr : access RPC_CSTR;
      Endpoint : access RPC_CSTR;
      NetworkOptions : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcStringBindingParseA,"RpcStringBindingParseA");
   function RpcStringBindingParseW(
      StringBinding : RPC_WSTR;
      ObjUuid : access RPC_WSTR;
      Protseq : access RPC_WSTR;
      NetworkAddr : access RPC_WSTR;
      Endpoint : access RPC_WSTR;
      NetworkOptions : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcStringBindingParseW,"RpcStringBindingParseW");
   function RpcStringFreeA(
      String : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcStringFreeA,"RpcStringFreeA");
   function RpcStringFreeW(
      String : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcStringFreeW,"RpcStringFreeW");
   function RpcIfInqId(
      RpcIfHandle : RPC_IF_HANDLE;
      RpcIfId : access RPC_IF_ID
   ) return RPC_STATUS;
   pragma import (C,RpcIfInqId,"RpcIfInqId");
   function RpcNetworkIsProtseqValidA(
      Protseq : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNetworkIsProtseqValidA,"RpcNetworkIsProtseqValidA");
   function RpcNetworkIsProtseqValidW(
      Protseq : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNetworkIsProtseqValidW,"RpcNetworkIsProtseqValidW");
   function RpcMgmtInqComTimeout(
      Binding : RPC_BINDING_HANDLE;
      Timeout : access Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtInqComTimeout,"RpcMgmtInqComTimeout");
   function RpcMgmtSetComTimeout(
      Binding : RPC_BINDING_HANDLE;
      Timeout : Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtSetComTimeout,"RpcMgmtSetComTimeout");
   function RpcMgmtSetCancelTimeout(
      Timeout : Interfaces.C.Long
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtSetCancelTimeout,"RpcMgmtSetCancelTimeout");
   type RPC_PROTSEQ_VECTORA_Ptr is access all RPC_PROTSEQ_VECTORA; -- Auto Generated Dependancy
   function RpcNetworkInqProtseqsA(
      ProtseqVector : access RPC_PROTSEQ_VECTORA_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcNetworkInqProtseqsA,"RpcNetworkInqProtseqsA");
   type RPC_PROTSEQ_VECTORW_Ptr is access all RPC_PROTSEQ_VECTORW; -- Auto Generated Dependancy
   function RpcNetworkInqProtseqsW(
      ProtseqVector : access RPC_PROTSEQ_VECTORW_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcNetworkInqProtseqsW,"RpcNetworkInqProtseqsW");
   function RpcObjectInqType(
      ObjUuid : access UUID;
      TypeUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,RpcObjectInqType,"RpcObjectInqType");
   function RpcObjectSetInqFn(
      InquiryFn : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcObjectSetInqFn,"RpcObjectSetInqFn");
   function RpcObjectSetType(
      ObjUuid : access UUID;
      TypeUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,RpcObjectSetType,"RpcObjectSetType");
   function RpcProtseqVectorFreeA(
      ProtseqVector : access RPC_PROTSEQ_VECTORA_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcProtseqVectorFreeA,"RpcProtseqVectorFreeA");
   function RpcProtseqVectorFreeW(
      ProtseqVector : access RPC_PROTSEQ_VECTORW_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcProtseqVectorFreeW,"RpcProtseqVectorFreeW");
   function RpcServerInqBindings(
      BindingVector : access RPC_BINDING_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqBindings,"RpcServerInqBindings");
   function RpcServerInqBindingsEx(
      SecurityDescriptor : access Void;
      BindingVector : access RPC_BINDING_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqBindingsEx,"RpcServerInqBindingsEx");
   function RpcServerInqIf(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqIf,"RpcServerInqIf");
   function RpcServerListen(
      MinimumCallThreads : Interfaces.C.unsigned;
      MaxCalls : Interfaces.C.unsigned;
      DontWait : Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,RpcServerListen,"RpcServerListen");
   function RpcServerRegisterIf(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerRegisterIf,"RpcServerRegisterIf");
   function RpcServerRegisterIfEx(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access Void;
      Flags : Interfaces.C.unsigned;
      MaxCalls : Interfaces.C.unsigned;
      IfCallback : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerRegisterIfEx,"RpcServerRegisterIfEx");
   function RpcServerRegisterIf2(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access Void;
      Flags : Interfaces.C.unsigned;
      MaxCalls : Interfaces.C.unsigned;
      MaxRpcSize : Interfaces.C.unsigned;
      IfCallbackFn : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerRegisterIf2,"RpcServerRegisterIf2");
   function RpcServerRegisterIf3(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access Void;
      Flags : Interfaces.C.unsigned;
      MaxCalls : Interfaces.C.unsigned;
      MaxRpcSize : Interfaces.C.unsigned;
      IfCallback : access Void;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerRegisterIf3,"RpcServerRegisterIf3");
   function RpcServerUnregisterIf(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      WaitForCallsToComplete : Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,RpcServerUnregisterIf,"RpcServerUnregisterIf");
   function RpcServerUnregisterIfEx(
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      RundownContextHandles : Interfaces.C.Int
   ) return RPC_STATUS;
   pragma import (C,RpcServerUnregisterIfEx,"RpcServerUnregisterIfEx");
   function RpcServerUseAllProtseqs(
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseAllProtseqs,"RpcServerUseAllProtseqs");
   function RpcServerUseAllProtseqsEx(
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseAllProtseqsEx,"RpcServerUseAllProtseqsEx");
   function RpcServerUseAllProtseqsIf(
      MaxCalls : Interfaces.C.unsigned;
      IfSpec : RPC_IF_HANDLE;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseAllProtseqsIf,"RpcServerUseAllProtseqsIf");
   function RpcServerUseAllProtseqsIfEx(
      MaxCalls : Interfaces.C.unsigned;
      IfSpec : RPC_IF_HANDLE;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseAllProtseqsIfEx,"RpcServerUseAllProtseqsIfEx");
   function RpcServerUseProtseqA(
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqA,"RpcServerUseProtseqA");
   function RpcServerUseProtseqExA(
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqExA,"RpcServerUseProtseqExA");
   function RpcServerUseProtseqW(
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqW,"RpcServerUseProtseqW");
   function RpcServerUseProtseqExW(
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqExW,"RpcServerUseProtseqExW");
   function RpcServerUseProtseqEpA(
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      Endpoint : RPC_CSTR;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqEpA,"RpcServerUseProtseqEpA");
   function RpcServerUseProtseqEpExA(
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      Endpoint : RPC_CSTR;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqEpExA,"RpcServerUseProtseqEpExA");
   function RpcServerUseProtseqEpW(
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      Endpoint : RPC_WSTR;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqEpW,"RpcServerUseProtseqEpW");
   function RpcServerUseProtseqEpExW(
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      Endpoint : RPC_WSTR;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqEpExW,"RpcServerUseProtseqEpExW");
   function RpcServerUseProtseqIfA(
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      IfSpec : RPC_IF_HANDLE;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqIfA,"RpcServerUseProtseqIfA");
   function RpcServerUseProtseqIfExA(
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      IfSpec : RPC_IF_HANDLE;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqIfExA,"RpcServerUseProtseqIfExA");
   function RpcServerUseProtseqIfW(
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      IfSpec : RPC_IF_HANDLE;
      SecurityDescriptor : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqIfW,"RpcServerUseProtseqIfW");
   function RpcServerUseProtseqIfExW(
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      IfSpec : RPC_IF_HANDLE;
      SecurityDescriptor : access Void;
      Policy : PRPC_POLICY
   ) return RPC_STATUS;
   pragma import (C,RpcServerUseProtseqIfExW,"RpcServerUseProtseqIfExW");
   procedure RpcServerYield;
   pragma import (C,RpcServerYield,"RpcServerYield");
   type RPC_STATS_VECTOR_Ptr is access all RPC_STATS_VECTOR; -- Auto Generated Dependancy
   function RpcMgmtStatsVectorFree(
      StatsVector : access RPC_STATS_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtStatsVectorFree,"RpcMgmtStatsVectorFree");
   function RpcMgmtInqStats(
      Binding : RPC_BINDING_HANDLE;
      Statistics : access RPC_STATS_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtInqStats,"RpcMgmtInqStats");
   function RpcMgmtIsServerListening(
      Binding : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtIsServerListening,"RpcMgmtIsServerListening");
   function RpcMgmtStopServerListening(
      Binding : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtStopServerListening,"RpcMgmtStopServerListening");
   function RpcMgmtWaitServerListen return RPC_STATUS;
   pragma import (C,RpcMgmtWaitServerListen,"RpcMgmtWaitServerListen");
   function RpcMgmtSetServerStackSize(
      ThreadStackSize : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtSetServerStackSize,"RpcMgmtSetServerStackSize");
   procedure RpcSsDontSerializeContext;
   pragma import (C,RpcSsDontSerializeContext,"RpcSsDontSerializeContext");
   function RpcMgmtEnableIdleCleanup return RPC_STATUS;
   pragma import (C,RpcMgmtEnableIdleCleanup,"RpcMgmtEnableIdleCleanup");
   type RPC_IF_ID_VECTOR_Ptr is access all RPC_IF_ID_VECTOR; -- Auto Generated Dependancy
   function RpcMgmtInqIfIds(
      Binding : RPC_BINDING_HANDLE;
      IfIdVector : access RPC_IF_ID_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtInqIfIds,"RpcMgmtInqIfIds");
   function RpcIfIdVectorFree(
      IfIdVector : access RPC_IF_ID_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcIfIdVectorFree,"RpcIfIdVectorFree");
   function RpcMgmtInqServerPrincNameA(
      Binding : RPC_BINDING_HANDLE;
      AuthnSvc : Interfaces.C.unsigned_long;
      ServerPrincName : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtInqServerPrincNameA,"RpcMgmtInqServerPrincNameA");
   function RpcMgmtInqServerPrincNameW(
      Binding : RPC_BINDING_HANDLE;
      AuthnSvc : Interfaces.C.unsigned_long;
      ServerPrincName : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtInqServerPrincNameW,"RpcMgmtInqServerPrincNameW");
   function RpcServerInqDefaultPrincNameA(
      AuthnSvc : Interfaces.C.unsigned_long;
      PrincName : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqDefaultPrincNameA,"RpcServerInqDefaultPrincNameA");
   function RpcServerInqDefaultPrincNameW(
      AuthnSvc : Interfaces.C.unsigned_long;
      PrincName : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqDefaultPrincNameW,"RpcServerInqDefaultPrincNameW");
   function RpcEpResolveBinding(
      Binding : RPC_BINDING_HANDLE;
      IfSpec : RPC_IF_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcEpResolveBinding,"RpcEpResolveBinding");
   function RpcNsBindingInqEntryNameA(
      Binding : RPC_BINDING_HANDLE;
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingInqEntryNameA,"RpcNsBindingInqEntryNameA");
   function RpcNsBindingInqEntryNameW(
      Binding : RPC_BINDING_HANDLE;
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingInqEntryNameW,"RpcNsBindingInqEntryNameW");
   type RPC_AUTH_IDENTITY_HANDLE is access Void; -- CXType_Pointer - CXType_Void
   type RPC_AUTHZ_HANDLE is access Void; -- CXType_Pointer - CXType_Void
   type RPC_SECURITY_QOS_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
   end record;
   subtype RPC_SECURITY_QOS is RPC_SECURITY_QOS_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS is access RPC_SECURITY_QOS_x; -- CXType_Pointer - CXType_Elaborated
   type SEC_WINNT_AUTH_IDENTITY_W_x is record
      User : access Interfaces.C.unsigned_short;
      UserLength : Interfaces.C.unsigned_long;
      Domain : access Interfaces.C.unsigned_short;
      DomainLength : Interfaces.C.unsigned_long;
      Password : access Interfaces.C.unsigned_short;
      PasswordLength : Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long;
   end record;
   subtype SEC_WINNT_AUTH_IDENTITY_W is SEC_WINNT_AUTH_IDENTITY_W_x; -- CXType_Elaborated
   type PSEC_WINNT_AUTH_IDENTITY_W is access SEC_WINNT_AUTH_IDENTITY_W_x; -- CXType_Pointer - CXType_Elaborated
   type SEC_WINNT_AUTH_IDENTITY_A_x is record
      User : access Interfaces.C.unsigned_char;
      UserLength : Interfaces.C.unsigned_long;
      Domain : access Interfaces.C.unsigned_char;
      DomainLength : Interfaces.C.unsigned_long;
      Password : access Interfaces.C.unsigned_char;
      PasswordLength : Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long;
   end record;
   subtype SEC_WINNT_AUTH_IDENTITY_A is SEC_WINNT_AUTH_IDENTITY_A_x; -- CXType_Elaborated
   type PSEC_WINNT_AUTH_IDENTITY_A is access SEC_WINNT_AUTH_IDENTITY_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_HTTP_TRANSPORT_CREDENTIALS_W_x is record
      TransportCredentials : access SEC_WINNT_AUTH_IDENTITY_W;
      Flags : Interfaces.C.unsigned_long;
      AuthenticationTarget : Interfaces.C.unsigned_long;
      NumberOfAuthnSchemes : Interfaces.C.unsigned_long;
      AuthnSchemes : access Interfaces.C.unsigned_long;
      ServerCertificateSubject : access Interfaces.C.unsigned_short;
   end record;
   subtype RPC_HTTP_TRANSPORT_CREDENTIALS_W is RPC_HTTP_TRANSPORT_CREDENTIALS_W_x; -- CXType_Elaborated
   type PRPC_HTTP_TRANSPORT_CREDENTIALS_W is access RPC_HTTP_TRANSPORT_CREDENTIALS_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_HTTP_TRANSPORT_CREDENTIALS_A_x is record
      TransportCredentials : access SEC_WINNT_AUTH_IDENTITY_A;
      Flags : Interfaces.C.unsigned_long;
      AuthenticationTarget : Interfaces.C.unsigned_long;
      NumberOfAuthnSchemes : Interfaces.C.unsigned_long;
      AuthnSchemes : access Interfaces.C.unsigned_long;
      ServerCertificateSubject : access Interfaces.C.unsigned_char;
   end record;
   subtype RPC_HTTP_TRANSPORT_CREDENTIALS_A is RPC_HTTP_TRANSPORT_CREDENTIALS_A_x; -- CXType_Elaborated
   type PRPC_HTTP_TRANSPORT_CREDENTIALS_A is access RPC_HTTP_TRANSPORT_CREDENTIALS_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W_x is record
      TransportCredentials : access SEC_WINNT_AUTH_IDENTITY_W;
      Flags : Interfaces.C.unsigned_long;
      AuthenticationTarget : Interfaces.C.unsigned_long;
      NumberOfAuthnSchemes : Interfaces.C.unsigned_long;
      AuthnSchemes : access Interfaces.C.unsigned_long;
      ServerCertificateSubject : access Interfaces.C.unsigned_short;
      ProxyCredentials : access SEC_WINNT_AUTH_IDENTITY_W;
      NumberOfProxyAuthnSchemes : Interfaces.C.unsigned_long;
      ProxyAuthnSchemes : access Interfaces.C.unsigned_long;
   end record;
   subtype RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W is RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W_x; -- CXType_Elaborated
   type PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W is access RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A_x is record
      TransportCredentials : access SEC_WINNT_AUTH_IDENTITY_A;
      Flags : Interfaces.C.unsigned_long;
      AuthenticationTarget : Interfaces.C.unsigned_long;
      NumberOfAuthnSchemes : Interfaces.C.unsigned_long;
      AuthnSchemes : access Interfaces.C.unsigned_long;
      ServerCertificateSubject : access Interfaces.C.unsigned_char;
      ProxyCredentials : access SEC_WINNT_AUTH_IDENTITY_A;
      NumberOfProxyAuthnSchemes : Interfaces.C.unsigned_long;
      ProxyAuthnSchemes : access Interfaces.C.unsigned_long;
   end record;
   subtype RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A is RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A_x; -- CXType_Elaborated
   type PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A is access RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W_x is record
      TransportCredentials : RPC_AUTH_IDENTITY_HANDLE;
      Flags : Interfaces.C.unsigned_long;
      AuthenticationTarget : Interfaces.C.unsigned_long;
      NumberOfAuthnSchemes : Interfaces.C.unsigned_long;
      AuthnSchemes : access Interfaces.C.unsigned_long;
      ServerCertificateSubject : access Interfaces.C.unsigned_short;
      ProxyCredentials : RPC_AUTH_IDENTITY_HANDLE;
      NumberOfProxyAuthnSchemes : Interfaces.C.unsigned_long;
      ProxyAuthnSchemes : access Interfaces.C.unsigned_long;
   end record;
   subtype RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W is RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W_x; -- CXType_Elaborated
   type PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W is access RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A_x is record
      TransportCredentials : RPC_AUTH_IDENTITY_HANDLE;
      Flags : Interfaces.C.unsigned_long;
      AuthenticationTarget : Interfaces.C.unsigned_long;
      NumberOfAuthnSchemes : Interfaces.C.unsigned_long;
      AuthnSchemes : access Interfaces.C.unsigned_long;
      ServerCertificateSubject : access Interfaces.C.unsigned_char;
      ProxyCredentials : RPC_AUTH_IDENTITY_HANDLE;
      NumberOfProxyAuthnSchemes : Interfaces.C.unsigned_long;
      ProxyAuthnSchemes : access Interfaces.C.unsigned_long;
   end record;
   subtype RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A is RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A_x; -- CXType_Elaborated
   type PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A is access RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V2_W_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
   end record;
   subtype RPC_SECURITY_QOS_V2_W is RPC_SECURITY_QOS_V2_W_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V2_W is access RPC_SECURITY_QOS_V2_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V2_A_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
   end record;
   subtype RPC_SECURITY_QOS_V2_A is RPC_SECURITY_QOS_V2_A_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V2_A is access RPC_SECURITY_QOS_V2_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V3_W_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
      Sid_x : access Void;
   end record;
   subtype RPC_SECURITY_QOS_V3_W is RPC_SECURITY_QOS_V3_W_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V3_W is access RPC_SECURITY_QOS_V3_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V3_A_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
      Sid_x : access Void;
   end record;
   subtype RPC_SECURITY_QOS_V3_A is RPC_SECURITY_QOS_V3_A_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V3_A is access RPC_SECURITY_QOS_V3_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V4_W_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
      Sid_x : access Void;
      EffectiveOnly : Interfaces.C.unsigned;
   end record;
   subtype RPC_SECURITY_QOS_V4_W is RPC_SECURITY_QOS_V4_W_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V4_W is access RPC_SECURITY_QOS_V4_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V4_A_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
      Sid_x : access Void;
      EffectiveOnly : Interfaces.C.unsigned;
   end record;
   subtype RPC_SECURITY_QOS_V4_A is RPC_SECURITY_QOS_V4_A_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V4_A is access RPC_SECURITY_QOS_V4_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V5_W_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
      Sid_x : access Void;
      EffectiveOnly : Interfaces.C.unsigned;
      ServerSecurityDescriptor : access Void;
   end record;
   subtype RPC_SECURITY_QOS_V5_W is RPC_SECURITY_QOS_V5_W_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V5_W is access RPC_SECURITY_QOS_V5_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SECURITY_QOS_V5_A_x is record
      Version : Interfaces.C.unsigned_long;
      Capabilities : Interfaces.C.unsigned_long;
      IdentityTracking : Interfaces.C.unsigned_long;
      ImpersonationType : Interfaces.C.unsigned_long;
      AdditionalSecurityInfoType : Interfaces.C.unsigned_long;
      u : Void;
      Sid_x : access Void;
      EffectiveOnly : Interfaces.C.unsigned;
      ServerSecurityDescriptor : access Void;
   end record;
   subtype RPC_SECURITY_QOS_V5_A is RPC_SECURITY_QOS_V5_A_x; -- CXType_Elaborated
   type PRPC_SECURITY_QOS_V5_A is access RPC_SECURITY_QOS_V5_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_BINDING_HANDLE_TEMPLATE_V1_W_x is record
      Version : Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long;
      ProtocolSequence : Interfaces.C.unsigned_long;
      NetworkAddress : access Interfaces.C.unsigned_short;
      StringEndpoint : access Interfaces.C.unsigned_short;
      u1 : Void;
      ObjectUuid : UUID;
   end record;
   subtype RPC_BINDING_HANDLE_TEMPLATE_V1_W is RPC_BINDING_HANDLE_TEMPLATE_V1_W_x; -- CXType_Elaborated
   type PRPC_BINDING_HANDLE_TEMPLATE_V1_W is access RPC_BINDING_HANDLE_TEMPLATE_V1_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_BINDING_HANDLE_TEMPLATE_V1_A_x is record
      Version : Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long;
      ProtocolSequence : Interfaces.C.unsigned_long;
      NetworkAddress : access Interfaces.C.unsigned_char;
      StringEndpoint : access Interfaces.C.unsigned_char;
      u1 : Void;
      ObjectUuid : UUID;
   end record;
   subtype RPC_BINDING_HANDLE_TEMPLATE_V1_A is RPC_BINDING_HANDLE_TEMPLATE_V1_A_x; -- CXType_Elaborated
   type PRPC_BINDING_HANDLE_TEMPLATE_V1_A is access RPC_BINDING_HANDLE_TEMPLATE_V1_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_BINDING_HANDLE_SECURITY_V1_W_x is record
      Version : Interfaces.C.unsigned_long;
      ServerPrincName : access Interfaces.C.unsigned_short;
      AuthnLevel : Interfaces.C.unsigned_long;
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthIdentity : access SEC_WINNT_AUTH_IDENTITY_W;
      SecurityQos : access RPC_SECURITY_QOS;
   end record;
   subtype RPC_BINDING_HANDLE_SECURITY_V1_W is RPC_BINDING_HANDLE_SECURITY_V1_W_x; -- CXType_Elaborated
   type PRPC_BINDING_HANDLE_SECURITY_V1_W is access RPC_BINDING_HANDLE_SECURITY_V1_W_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_BINDING_HANDLE_SECURITY_V1_A_x is record
      Version : Interfaces.C.unsigned_long;
      ServerPrincName : access Interfaces.C.unsigned_char;
      AuthnLevel : Interfaces.C.unsigned_long;
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthIdentity : access SEC_WINNT_AUTH_IDENTITY_A;
      SecurityQos : access RPC_SECURITY_QOS;
   end record;
   subtype RPC_BINDING_HANDLE_SECURITY_V1_A is RPC_BINDING_HANDLE_SECURITY_V1_A_x; -- CXType_Elaborated
   type PRPC_BINDING_HANDLE_SECURITY_V1_A is access RPC_BINDING_HANDLE_SECURITY_V1_A_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_BINDING_HANDLE_OPTIONS_V1_x is record
      Version : Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long;
      ComTimeout : Interfaces.C.unsigned_long;
      CallTimeout : Interfaces.C.unsigned_long;
   end record;
   subtype RPC_BINDING_HANDLE_OPTIONS_V1 is RPC_BINDING_HANDLE_OPTIONS_V1_x; -- CXType_Elaborated
   type PRPC_BINDING_HANDLE_OPTIONS_V1 is access RPC_BINDING_HANDLE_OPTIONS_V1_x; -- CXType_Pointer - CXType_Elaborated
   function RpcBindingCreateA(
      Template : access RPC_BINDING_HANDLE_TEMPLATE_V1_A;
      Security : access RPC_BINDING_HANDLE_SECURITY_V1_A;
      Options : access RPC_BINDING_HANDLE_OPTIONS_V1;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingCreateA,"RpcBindingCreateA");
   function RpcBindingCreateW(
      Template : access RPC_BINDING_HANDLE_TEMPLATE_V1_W;
      Security : access RPC_BINDING_HANDLE_SECURITY_V1_W;
      Options : access RPC_BINDING_HANDLE_OPTIONS_V1;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingCreateW,"RpcBindingCreateW");
   function RpcBindingGetTrainingContextHandle(
      Binding : RPC_BINDING_HANDLE;
      ContextHandle : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,RpcBindingGetTrainingContextHandle,"RpcBindingGetTrainingContextHandle");
   function RpcServerInqBindingHandle(
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqBindingHandle,"RpcServerInqBindingHandle");
   type RPC_HTTP_REDIRECTOR_STAGE_x is (
      RPCHTTP_RS_REDIRECT,
      RPCHTTP_RS_ACCESS_1,
      RPCHTTP_RS_SESSION,
      RPCHTTP_RS_ACCESS_2,
      RPCHTTP_RS_INTERFACE
   );
   for RPC_HTTP_REDIRECTOR_STAGE_x use (
      RPCHTTP_RS_REDIRECT => 1,
      RPCHTTP_RS_ACCESS_1 => 2,
      RPCHTTP_RS_SESSION => 3,
      RPCHTTP_RS_ACCESS_2 => 4,
      RPCHTTP_RS_INTERFACE => 5
   );
   for RPC_HTTP_REDIRECTOR_STAGE_x'Size use 32;
   subtype RPC_HTTP_REDIRECTOR_STAGE is RPC_HTTP_REDIRECTOR_STAGE_x; -- CXType_Elaborated
   subtype RPC_NEW_HTTP_PROXY_CHANNEL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (RPC_HTTP_REDIRECTOR_STAGE, RPC_WSTR, RPC_WSTR, RPC_WSTR, RPC_WSTR, void *, void *, void *, void *, unsigned long, RPC_WSTR *, RPC_WSTR *)
   subtype RPC_HTTP_PROXY_FREE_STRING is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPC_WSTR)
   function RpcImpersonateClient(
      BindingHandle : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcImpersonateClient,"RpcImpersonateClient");
   function RpcImpersonateClient2(
      BindingHandle : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcImpersonateClient2,"RpcImpersonateClient2");
   function RpcRevertToSelfEx(
      BindingHandle : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcRevertToSelfEx,"RpcRevertToSelfEx");
   function RpcRevertToSelf return RPC_STATUS;
   pragma import (C,RpcRevertToSelf,"RpcRevertToSelf");
   function RpcImpersonateClientContainer(
      BindingHandle : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcImpersonateClientContainer,"RpcImpersonateClientContainer");
   function RpcRevertContainerImpersonation return RPC_STATUS;
   pragma import (C,RpcRevertContainerImpersonation,"RpcRevertContainerImpersonation");
   function RpcBindingInqAuthClientA(
      ClientBinding : RPC_BINDING_HANDLE;
      Privs : access RPC_AUTHZ_HANDLE;
      ServerPrincName : access RPC_CSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthzSvc : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthClientA,"RpcBindingInqAuthClientA");
   function RpcBindingInqAuthClientW(
      ClientBinding : RPC_BINDING_HANDLE;
      Privs : access RPC_AUTHZ_HANDLE;
      ServerPrincName : access RPC_WSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthzSvc : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthClientW,"RpcBindingInqAuthClientW");
   function RpcBindingInqAuthClientExA(
      ClientBinding : RPC_BINDING_HANDLE;
      Privs : access RPC_AUTHZ_HANDLE;
      ServerPrincName : access RPC_CSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthzSvc : access Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthClientExA,"RpcBindingInqAuthClientExA");
   function RpcBindingInqAuthClientExW(
      ClientBinding : RPC_BINDING_HANDLE;
      Privs : access RPC_AUTHZ_HANDLE;
      ServerPrincName : access RPC_WSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthzSvc : access Interfaces.C.unsigned_long;
      Flags : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthClientExW,"RpcBindingInqAuthClientExW");
   function RpcBindingInqAuthInfoA(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : access RPC_CSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthIdentity : access RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthInfoA,"RpcBindingInqAuthInfoA");
   function RpcBindingInqAuthInfoW(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : access RPC_WSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthIdentity : access RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthInfoW,"RpcBindingInqAuthInfoW");
   function RpcBindingSetAuthInfoA(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : RPC_CSTR;
      AuthnLevel : Interfaces.C.unsigned_long;
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthIdentity : RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingSetAuthInfoA,"RpcBindingSetAuthInfoA");
   function RpcBindingSetAuthInfoExA(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : RPC_CSTR;
      AuthnLevel : Interfaces.C.unsigned_long;
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthIdentity : RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : Interfaces.C.unsigned_long;
      SecurityQos : access RPC_SECURITY_QOS
   ) return RPC_STATUS;
   pragma import (C,RpcBindingSetAuthInfoExA,"RpcBindingSetAuthInfoExA");
   function RpcBindingSetAuthInfoW(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : RPC_WSTR;
      AuthnLevel : Interfaces.C.unsigned_long;
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthIdentity : RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcBindingSetAuthInfoW,"RpcBindingSetAuthInfoW");
   function RpcBindingSetAuthInfoExW(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : RPC_WSTR;
      AuthnLevel : Interfaces.C.unsigned_long;
      AuthnSvc : Interfaces.C.unsigned_long;
      AuthIdentity : RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : Interfaces.C.unsigned_long;
      SecurityQOS : access RPC_SECURITY_QOS
   ) return RPC_STATUS;
   pragma import (C,RpcBindingSetAuthInfoExW,"RpcBindingSetAuthInfoExW");
   function RpcBindingInqAuthInfoExA(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : access RPC_CSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthIdentity : access RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : access Interfaces.C.unsigned_long;
      RpcQosVersion : Interfaces.C.unsigned_long;
      SecurityQOS : access RPC_SECURITY_QOS
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthInfoExA,"RpcBindingInqAuthInfoExA");
   function RpcBindingInqAuthInfoExW(
      Binding : RPC_BINDING_HANDLE;
      ServerPrincName : access RPC_WSTR;
      AuthnLevel : access Interfaces.C.unsigned_long;
      AuthnSvc : access Interfaces.C.unsigned_long;
      AuthIdentity : access RPC_AUTH_IDENTITY_HANDLE;
      AuthzSvc : access Interfaces.C.unsigned_long;
      RpcQosVersion : Interfaces.C.unsigned_long;
      SecurityQOS : access RPC_SECURITY_QOS
   ) return RPC_STATUS;
   pragma import (C,RpcBindingInqAuthInfoExW,"RpcBindingInqAuthInfoExW");
   subtype RPC_AUTH_KEY_RETRIEVAL_FN is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (void *, RPC_WSTR, unsigned long, void **, RPC_STATUS *)
   function RpcServerCompleteSecurityCallback(
      BindingHandle : RPC_BINDING_HANDLE;
      Status : RPC_STATUS
   ) return RPC_STATUS;
   pragma import (C,RpcServerCompleteSecurityCallback,"RpcServerCompleteSecurityCallback");
   function RpcServerRegisterAuthInfoA(
      ServerPrincName : RPC_CSTR;
      AuthnSvc : Interfaces.C.unsigned_long;
      GetKeyFn : RPC_AUTH_KEY_RETRIEVAL_FN;
      Arg : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerRegisterAuthInfoA,"RpcServerRegisterAuthInfoA");
   function RpcServerRegisterAuthInfoW(
      ServerPrincName : RPC_WSTR;
      AuthnSvc : Interfaces.C.unsigned_long;
      GetKeyFn : RPC_AUTH_KEY_RETRIEVAL_FN;
      Arg : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerRegisterAuthInfoW,"RpcServerRegisterAuthInfoW");
   type RPC_CLIENT_INFORMATION1 is record
      UserName : access Interfaces.C.unsigned_char;
      ComputerName : access Interfaces.C.unsigned_char;
      Privilege : Interfaces.C.unsigned_short;
      AuthFlags : Interfaces.C.unsigned_long;
   end record;
   type PRPC_CLIENT_INFORMATION1 is access RPC_CLIENT_INFORMATION1; -- CXType_Pointer - CXType_Elaborated
   function RpcBindingServerFromClient(
      ClientBinding : RPC_BINDING_HANDLE;
      ServerBinding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingServerFromClient,"RpcBindingServerFromClient");
   procedure RpcRaiseException(
      exception_x : RPC_STATUS
   );
   pragma import (C,RpcRaiseException,"RpcRaiseException");
   function RpcTestCancel return RPC_STATUS;
   pragma import (C,RpcTestCancel,"RpcTestCancel");
   function RpcServerTestCancel(
      BindingHandle : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcServerTestCancel,"RpcServerTestCancel");
   function RpcCancelThread(
      Thread : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcCancelThread,"RpcCancelThread");
   function RpcCancelThreadEx(
      Thread : access Void;
      Timeout : Interfaces.C.Long
   ) return RPC_STATUS;
   pragma import (C,RpcCancelThreadEx,"RpcCancelThreadEx");
   function UuidCreate(
      Uuid_x : access UUID
   ) return RPC_STATUS;
   pragma import (C,UuidCreate,"UuidCreate");
   function UuidCreateSequential(
      Uuid_x : access UUID
   ) return RPC_STATUS;
   pragma import (C,UuidCreateSequential,"UuidCreateSequential");
   function UuidToStringA(
      Uuid_x : access constant UUID;
      StringUuid : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,UuidToStringA,"UuidToStringA");
   function UuidFromStringA(
      StringUuid : RPC_CSTR;
      Uuid_x : access UUID
   ) return RPC_STATUS;
   pragma import (C,UuidFromStringA,"UuidFromStringA");
   function UuidToStringW(
      Uuid_x : access constant UUID;
      StringUuid : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,UuidToStringW,"UuidToStringW");
   function UuidFromStringW(
      StringUuid : RPC_WSTR;
      Uuid_x : access UUID
   ) return RPC_STATUS;
   pragma import (C,UuidFromStringW,"UuidFromStringW");
   function UuidCompare(
      Uuid1 : access UUID;
      Uuid2 : access UUID;
      Status : access RPC_STATUS
   ) return Interfaces.C.Int;
   pragma import (C,UuidCompare,"UuidCompare");
   function UuidCreateNil(
      NilUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,UuidCreateNil,"UuidCreateNil");
   function UuidEqual(
      Uuid1 : access UUID;
      Uuid2 : access UUID;
      Status : access RPC_STATUS
   ) return Interfaces.C.Int;
   pragma import (C,UuidEqual,"UuidEqual");
   function UuidHash(
      Uuid_x : access UUID;
      Status : access RPC_STATUS
   ) return Interfaces.C.unsigned_short;
   pragma import (C,UuidHash,"UuidHash");
   function UuidIsNil(
      Uuid_x : access UUID;
      Status : access RPC_STATUS
   ) return Interfaces.C.Int;
   pragma import (C,UuidIsNil,"UuidIsNil");
   function RpcEpRegisterNoReplaceA(
      IfSpec : RPC_IF_HANDLE;
      BindingVector : access RPC_BINDING_VECTOR;
      UuidVector : access UUID_VECTOR;
      Annotation : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcEpRegisterNoReplaceA,"RpcEpRegisterNoReplaceA");
   function RpcEpRegisterNoReplaceW(
      IfSpec : RPC_IF_HANDLE;
      BindingVector : access RPC_BINDING_VECTOR;
      UuidVector : access UUID_VECTOR;
      Annotation : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcEpRegisterNoReplaceW,"RpcEpRegisterNoReplaceW");
   function RpcEpRegisterA(
      IfSpec : RPC_IF_HANDLE;
      BindingVector : access RPC_BINDING_VECTOR;
      UuidVector : access UUID_VECTOR;
      Annotation : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcEpRegisterA,"RpcEpRegisterA");
   function RpcEpRegisterW(
      IfSpec : RPC_IF_HANDLE;
      BindingVector : access RPC_BINDING_VECTOR;
      UuidVector : access UUID_VECTOR;
      Annotation : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcEpRegisterW,"RpcEpRegisterW");
   function RpcEpUnregister(
      IfSpec : RPC_IF_HANDLE;
      BindingVector : access RPC_BINDING_VECTOR;
      UuidVector : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcEpUnregister,"RpcEpUnregister");
   function DceErrorInqTextA(
      RpcStatus : RPC_STATUS;
      ErrorText : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,DceErrorInqTextA,"DceErrorInqTextA");
   function DceErrorInqTextW(
      RpcStatus : RPC_STATUS;
      ErrorText : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,DceErrorInqTextW,"DceErrorInqTextW");
   type RPC_EP_INQ_HANDLE is access I_RPC_HANDLE; -- CXType_Pointer - CXType_Typedef
   function RpcMgmtEpEltInqBegin(
      EpBinding : RPC_BINDING_HANDLE;
      InquiryType : Interfaces.C.unsigned_long;
      IfId : access RPC_IF_ID;
      VersOption : Interfaces.C.unsigned_long;
      ObjectUuid : access UUID;
      InquiryContext : access RPC_EP_INQ_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtEpEltInqBegin,"RpcMgmtEpEltInqBegin");
   function RpcMgmtEpEltInqDone(
      InquiryContext : access RPC_EP_INQ_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtEpEltInqDone,"RpcMgmtEpEltInqDone");
   function RpcMgmtEpEltInqNextA(
      InquiryContext : RPC_EP_INQ_HANDLE;
      IfId : access RPC_IF_ID;
      Binding : access RPC_BINDING_HANDLE;
      ObjectUuid : access UUID;
      Annotation : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtEpEltInqNextA,"RpcMgmtEpEltInqNextA");
   function RpcMgmtEpEltInqNextW(
      InquiryContext : RPC_EP_INQ_HANDLE;
      IfId : access RPC_IF_ID;
      Binding : access RPC_BINDING_HANDLE;
      ObjectUuid : access UUID;
      Annotation : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtEpEltInqNextW,"RpcMgmtEpEltInqNextW");
   function RpcMgmtEpUnregister(
      EpBinding : RPC_BINDING_HANDLE;
      IfId : access RPC_IF_ID;
      Binding : RPC_BINDING_HANDLE;
      ObjectUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtEpUnregister,"RpcMgmtEpUnregister");
   subtype RPC_MGMT_AUTHORIZATION_FN is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (RPC_BINDING_HANDLE, unsigned long, RPC_STATUS *)
   function RpcMgmtSetAuthorizationFn(
      AuthorizationFn : RPC_MGMT_AUTHORIZATION_FN
   ) return RPC_STATUS;
   pragma import (C,RpcMgmtSetAuthorizationFn,"RpcMgmtSetAuthorizationFn");
   function RpcExceptionFilter(
      ExceptionCode : Interfaces.C.unsigned_long
   ) return Interfaces.C.Int;
   pragma import (C,RpcExceptionFilter,"RpcExceptionFilter");
   type RPC_INTERFACE_GROUP is access Void; -- CXType_Pointer - CXType_Void
   type PRPC_INTERFACE_GROUP is access void; -- CXType_Pointer
   type RPC_ENDPOINT_TEMPLATEW is record
      Version : Interfaces.C.unsigned_long;
      ProtSeq : RPC_WSTR;
      Endpoint : RPC_WSTR;
      SecurityDescriptor : access Void;
      Backlog : Interfaces.C.unsigned_long;
   end record;
   type PRPC_ENDPOINT_TEMPLATEW is access RPC_ENDPOINT_TEMPLATEW; -- CXType_Pointer - CXType_Elaborated
   type RPC_ENDPOINT_TEMPLATEA is record
      Version : Interfaces.C.unsigned_long;
      ProtSeq : RPC_CSTR;
      Endpoint : RPC_CSTR;
      SecurityDescriptor : access Void;
      Backlog : Interfaces.C.unsigned_long;
   end record;
   type PRPC_ENDPOINT_TEMPLATEA is access RPC_ENDPOINT_TEMPLATEA; -- CXType_Pointer - CXType_Elaborated
   type RPC_INTERFACE_TEMPLATEA is record
      Version : Interfaces.C.unsigned_long;
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access Void;
      Flags : Interfaces.C.unsigned;
      MaxCalls : Interfaces.C.unsigned;
      MaxRpcSize : Interfaces.C.unsigned;
      IfCallback : access Void;
      UuidVector : access UUID_VECTOR;
      Annotation : RPC_CSTR;
      SecurityDescriptor : access Void;
   end record;
   type PRPC_INTERFACE_TEMPLATEA is access RPC_INTERFACE_TEMPLATEA; -- CXType_Pointer - CXType_Elaborated
   type RPC_INTERFACE_TEMPLATEW is record
      Version : Interfaces.C.unsigned_long;
      IfSpec : RPC_IF_HANDLE;
      MgrTypeUuid : access UUID;
      MgrEpv : access Void;
      Flags : Interfaces.C.unsigned;
      MaxCalls : Interfaces.C.unsigned;
      MaxRpcSize : Interfaces.C.unsigned;
      IfCallback : access Void;
      UuidVector : access UUID_VECTOR;
      Annotation : RPC_WSTR;
      SecurityDescriptor : access Void;
   end record;
   type PRPC_INTERFACE_TEMPLATEW is access RPC_INTERFACE_TEMPLATEW; -- CXType_Pointer - CXType_Elaborated
   subtype RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN is System.Address; -- [FIXME - CXType_FunctionProto] void (RPC_INTERFACE_GROUP, void *, unsigned long)
   function RpcServerInterfaceGroupCreateW(
      interfaces_x : access RPC_INTERFACE_TEMPLATEW;
      NumIfs : Interfaces.C.unsigned_long;
      Endpoints : access RPC_ENDPOINT_TEMPLATEW;
      NumEndpoints : Interfaces.C.unsigned_long;
      IdlePeriod : Interfaces.C.unsigned_long;
      IdleCallbackFn : Void;
      IdleCallbackContext : access Void;
      IfGroup : PRPC_INTERFACE_GROUP
   ) return RPC_STATUS;
   pragma import (C,RpcServerInterfaceGroupCreateW,"RpcServerInterfaceGroupCreateW");
   function RpcServerInterfaceGroupCreateA(
      interfaces_x : access RPC_INTERFACE_TEMPLATEA;
      NumIfs : Interfaces.C.unsigned_long;
      Endpoints : access RPC_ENDPOINT_TEMPLATEA;
      NumEndpoints : Interfaces.C.unsigned_long;
      IdlePeriod : Interfaces.C.unsigned_long;
      IdleCallbackFn : Void;
      IdleCallbackContext : access Void;
      IfGroup : PRPC_INTERFACE_GROUP
   ) return RPC_STATUS;
   pragma import (C,RpcServerInterfaceGroupCreateA,"RpcServerInterfaceGroupCreateA");
   function RpcServerInterfaceGroupClose(
      IfGroup : RPC_INTERFACE_GROUP
   ) return RPC_STATUS;
   pragma import (C,RpcServerInterfaceGroupClose,"RpcServerInterfaceGroupClose");
   function RpcServerInterfaceGroupActivate(
      IfGroup : RPC_INTERFACE_GROUP
   ) return RPC_STATUS;
   pragma import (C,RpcServerInterfaceGroupActivate,"RpcServerInterfaceGroupActivate");
   function RpcServerInterfaceGroupDeactivate(
      IfGroup : RPC_INTERFACE_GROUP;
      ForceDeactivation : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcServerInterfaceGroupDeactivate,"RpcServerInterfaceGroupDeactivate");
   function RpcServerInterfaceGroupInqBindings(
      IfGroup : RPC_INTERFACE_GROUP;
      BindingVector : access RPC_BINDING_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcServerInterfaceGroupInqBindings,"RpcServerInterfaceGroupInqBindings");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\rpcdcep.h>
   type RPC_VERSION_x is record
      MajorVersion : Interfaces.C.unsigned_short;
      MinorVersion : Interfaces.C.unsigned_short;
   end record;
   subtype RPC_VERSION is RPC_VERSION_x; -- CXType_Elaborated
   type RPC_SYNTAX_IDENTIFIER_x is record
      SyntaxGUID : GUID;
      SyntaxVersion : RPC_VERSION;
   end record;
   subtype RPC_SYNTAX_IDENTIFIER is RPC_SYNTAX_IDENTIFIER_x; -- CXType_Elaborated
   type PRPC_SYNTAX_IDENTIFIER is access RPC_SYNTAX_IDENTIFIER_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_MESSAGE_x is record
      Handle_x : RPC_BINDING_HANDLE;
      DataRepresentation : Interfaces.C.unsigned_long;
      Buffer : access Void;
      BufferLength : Interfaces.C.unsigned;
      ProcNum : Interfaces.C.unsigned;
      TransferSyntax : PRPC_SYNTAX_IDENTIFIER;
      RpcInterfaceInformation : access Void;
      ReservedForRuntime : access Void;
      ManagerEpv : access Void;
      ImportContext : access Void;
      RpcFlags : Interfaces.C.unsigned_long;
   end record;
   subtype RPC_MESSAGE is RPC_MESSAGE_x; -- CXType_Elaborated
   type PRPC_MESSAGE is access RPC_MESSAGE_x; -- CXType_Pointer - CXType_Elaborated
   subtype RPC_FORWARD_FUNCTION is System.Address; -- [FIXME - CXType_FunctionProto] RPC_STATUS (UUID *, RPC_VERSION *, UUID *, unsigned char *, void **)
   type RPC_ADDRESS_CHANGE_TYPE is (
      PROTOCOL_NOT_LOADED,
      PROTOCOL_LOADED,
      PROTOCOL_ADDRESS_CHANGE
   );
   for RPC_ADDRESS_CHANGE_TYPE use (
      PROTOCOL_NOT_LOADED => 1,
      PROTOCOL_LOADED => 2,
      PROTOCOL_ADDRESS_CHANGE => 3
   );
   for RPC_ADDRESS_CHANGE_TYPE'Size use 32;
   subtype RPC_ADDRESS_CHANGE_FN is System.Address; -- [FIXME - CXType_FunctionProto] void (void *)
   subtype RPC_DISPATCH_FUNCTION is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PRPC_MESSAGE)
   type RPC_DISPATCH_TABLE is record
      DispatchTableCount : Interfaces.C.unsigned;
      DispatchTable : access RPC_DISPATCH_FUNCTION;
      Reserved : LONG_PTR;
   end record;
   type PRPC_DISPATCH_TABLE is access RPC_DISPATCH_TABLE; -- CXType_Pointer - CXType_Elaborated
   type RPC_PROTSEQ_ENDPOINT_x is record
      RpcProtocolSequence : access Interfaces.C.unsigned_char;
      Endpoint : access Interfaces.C.unsigned_char;
   end record;
   subtype RPC_PROTSEQ_ENDPOINT is RPC_PROTSEQ_ENDPOINT_x; -- CXType_Elaborated
   type PRPC_PROTSEQ_ENDPOINT is access RPC_PROTSEQ_ENDPOINT_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_SERVER_INTERFACE_x is record
      Length : Interfaces.C.unsigned;
      InterfaceId : RPC_SYNTAX_IDENTIFIER;
      TransferSyntax : RPC_SYNTAX_IDENTIFIER;
      DispatchTable : PRPC_DISPATCH_TABLE;
      RpcProtseqEndpointCount : Interfaces.C.unsigned;
      RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT;
      DefaultManagerEpv : access Void;
      InterpreterInfo : access Void;
      Flags : Interfaces.C.unsigned;
   end record;
   subtype RPC_SERVER_INTERFACE is RPC_SERVER_INTERFACE_x; -- CXType_Elaborated
   type PRPC_SERVER_INTERFACE is access RPC_SERVER_INTERFACE_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_CLIENT_INTERFACE_x is record
      Length : Interfaces.C.unsigned;
      InterfaceId : RPC_SYNTAX_IDENTIFIER;
      TransferSyntax : RPC_SYNTAX_IDENTIFIER;
      DispatchTable : PRPC_DISPATCH_TABLE;
      RpcProtseqEndpointCount : Interfaces.C.unsigned;
      RpcProtseqEndpoint : PRPC_PROTSEQ_ENDPOINT;
      Reserved : ULONG_PTR;
      InterpreterInfo : access Void;
      Flags : Interfaces.C.unsigned;
   end record;
   subtype RPC_CLIENT_INTERFACE is RPC_CLIENT_INTERFACE_x; -- CXType_Elaborated
   type PRPC_CLIENT_INTERFACE is access RPC_CLIENT_INTERFACE_x; -- CXType_Pointer - CXType_Elaborated
   function I_RpcNegotiateTransferSyntax(
      Message : access RPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcNegotiateTransferSyntax,"I_RpcNegotiateTransferSyntax");
   function I_RpcGetBuffer(
      Message : access RPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcGetBuffer,"I_RpcGetBuffer");
   function I_RpcGetBufferWithObject(
      Message : access RPC_MESSAGE;
      ObjectUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,I_RpcGetBufferWithObject,"I_RpcGetBufferWithObject");
   function I_RpcSendReceive(
      Message : access RPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcSendReceive,"I_RpcSendReceive");
   function I_RpcFreeBuffer(
      Message : access RPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcFreeBuffer,"I_RpcFreeBuffer");
   function I_RpcSend(
      Message : PRPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcSend,"I_RpcSend");
   function I_RpcReceive(
      Message : PRPC_MESSAGE;
      Size_x : Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcReceive,"I_RpcReceive");
   function I_RpcFreePipeBuffer(
      Message : access RPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcFreePipeBuffer,"I_RpcFreePipeBuffer");
   function I_RpcReallocPipeBuffer(
      Message : PRPC_MESSAGE;
      NewSize : Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcReallocPipeBuffer,"I_RpcReallocPipeBuffer");
   type I_RPC_MUTEX is access Void; -- CXType_Pointer - CXType_Void
   procedure I_RpcRequestMutex(
      Mutex : access I_RPC_MUTEX
   );
   pragma import (C,I_RpcRequestMutex,"I_RpcRequestMutex");
   procedure I_RpcClearMutex(
      Mutex : I_RPC_MUTEX
   );
   pragma import (C,I_RpcClearMutex,"I_RpcClearMutex");
   procedure I_RpcDeleteMutex(
      Mutex : I_RPC_MUTEX
   );
   pragma import (C,I_RpcDeleteMutex,"I_RpcDeleteMutex");
   procedure I_RpcAllocate(
      Size_x : Interfaces.C.unsigned
   );
   pragma import (C,I_RpcAllocate,"I_RpcAllocate");
   procedure I_RpcFree(
      Object : access Void
   );
   pragma import (C,I_RpcFree,"I_RpcFree");
   function I_RpcFreeSystemHandleCollection(
      CallObj : access Void;
      FreeFlags : Interfaces.C.unsigned_long
   ) return Interfaces.C.unsigned_long;
   pragma import (C,I_RpcFreeSystemHandleCollection,"I_RpcFreeSystemHandleCollection");
   function I_RpcSetSystemHandle(
      Handle_x : access Void;
      type_x : Interfaces.C.unsigned_char;
      AccessMask : Interfaces.C.unsigned_long;
      CallObj : access Void;
      HandleIndex : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcSetSystemHandle,"I_RpcSetSystemHandle");
   function I_RpcGetSystemHandle(
      pMemory : access Interfaces.C.unsigned_char;
      type_x : Interfaces.C.unsigned_char;
      AccessMask : Interfaces.C.unsigned_long;
      HandleIndex : Interfaces.C.unsigned_long;
      CallObj : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcGetSystemHandle,"I_RpcGetSystemHandle");
   procedure I_RpcFreeSystemHandle(
      type_x : Interfaces.C.unsigned_char;
      Handle_x : access Void
   );
   pragma import (C,I_RpcFreeSystemHandle,"I_RpcFreeSystemHandle");
   procedure I_RpcPauseExecution(
      Milliseconds : Interfaces.C.unsigned_long
   );
   pragma import (C,I_RpcPauseExecution,"I_RpcPauseExecution");
   function I_RpcGetExtendedError return RPC_STATUS;
   pragma import (C,I_RpcGetExtendedError,"I_RpcGetExtendedError");
   type LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION_x is (
      MarshalDirectionMarshal,
      MarshalDirectionUnmarshal
   );
   for LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION_x use (
      MarshalDirectionMarshal => 0,
      MarshalDirectionUnmarshal => 1
   );
   for LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION_x'Size use 32;
   subtype LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION is LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION_x; -- CXType_Elaborated
   function I_RpcSystemHandleTypeSpecificWork(
      Handle_x : access Void;
      ActualType : Interfaces.C.unsigned_char;
      IdlType : Interfaces.C.unsigned_char;
      MarshalDirection : LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
   ) return RPC_STATUS;
   pragma import (C,I_RpcSystemHandleTypeSpecificWork,"I_RpcSystemHandleTypeSpecificWork");
   subtype PRPC_RUNDOWN is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (void *)
   function I_RpcMonitorAssociation(
      Handle_x : RPC_BINDING_HANDLE;
      RundownRoutine : PRPC_RUNDOWN;
      Context_x : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcMonitorAssociation,"I_RpcMonitorAssociation");
   function I_RpcStopMonitorAssociation(
      Handle_x : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,I_RpcStopMonitorAssociation,"I_RpcStopMonitorAssociation");
   function I_RpcGetCurrentCallHandle return RPC_BINDING_HANDLE;
   pragma import (C,I_RpcGetCurrentCallHandle,"I_RpcGetCurrentCallHandle");
   function I_RpcGetAssociationContext(
      BindingHandle : RPC_BINDING_HANDLE;
      AssociationContext : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,I_RpcGetAssociationContext,"I_RpcGetAssociationContext");
   procedure I_RpcGetServerContextList(
      BindingHandle : RPC_BINDING_HANDLE
   );
   pragma import (C,I_RpcGetServerContextList,"I_RpcGetServerContextList");
   procedure I_RpcSetServerContextList(
      BindingHandle : RPC_BINDING_HANDLE;
      ServerContextList : access Void
   );
   pragma import (C,I_RpcSetServerContextList,"I_RpcSetServerContextList");
   function I_RpcNsInterfaceExported(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : access Interfaces.C.unsigned_short;
      RpcInterfaceInformation : access RPC_SERVER_INTERFACE
   ) return RPC_STATUS;
   pragma import (C,I_RpcNsInterfaceExported,"I_RpcNsInterfaceExported");
   function I_RpcNsInterfaceUnexported(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : access Interfaces.C.unsigned_short;
      RpcInterfaceInformation : access RPC_SERVER_INTERFACE
   ) return RPC_STATUS;
   pragma import (C,I_RpcNsInterfaceUnexported,"I_RpcNsInterfaceUnexported");
   function I_RpcBindingToStaticStringBindingW(
      Binding : RPC_BINDING_HANDLE;
      StringBinding : access PUINT16
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingToStaticStringBindingW,"I_RpcBindingToStaticStringBindingW");
   function I_RpcBindingInqSecurityContext(
      Binding : RPC_BINDING_HANDLE;
      SecurityContextHandle : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqSecurityContext,"I_RpcBindingInqSecurityContext");
   type RPC_SEC_CONTEXT_KEY_INFO_x is record
      EncryptAlgorithm : Interfaces.C.unsigned_long;
      KeySize : Interfaces.C.unsigned_long;
      SignatureAlgorithm : Interfaces.C.unsigned_long;
   end record;
   subtype RPC_SEC_CONTEXT_KEY_INFO is RPC_SEC_CONTEXT_KEY_INFO_x; -- CXType_Elaborated
   type PRPC_SEC_CONTEXT_KEY_INFO is access RPC_SEC_CONTEXT_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function I_RpcBindingInqSecurityContextKeyInfo(
      Binding : RPC_BINDING_HANDLE;
      KeyInfo : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqSecurityContextKeyInfo,"I_RpcBindingInqSecurityContextKeyInfo");
   function I_RpcBindingInqWireIdForSnego(
      Binding : RPC_BINDING_HANDLE;
      WireId : access Interfaces.C.unsigned_char
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqWireIdForSnego,"I_RpcBindingInqWireIdForSnego");
   function I_RpcBindingInqMarshalledTargetInfo(
      Binding : RPC_BINDING_HANDLE;
      MarshalledTargetInfoSize : access Interfaces.C.unsigned_long;
      MarshalledTargetInfo : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqMarshalledTargetInfo,"I_RpcBindingInqMarshalledTargetInfo");
   function I_RpcBindingInqLocalClientPID(
      Binding : RPC_BINDING_HANDLE;
      Pid : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqLocalClientPID,"I_RpcBindingInqLocalClientPID");
   function I_RpcBindingHandleToAsyncHandle(
      Binding : RPC_BINDING_HANDLE;
      AsyncHandle : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingHandleToAsyncHandle,"I_RpcBindingHandleToAsyncHandle");
   function I_RpcNsBindingSetEntryNameW(
      Binding : RPC_BINDING_HANDLE;
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcNsBindingSetEntryNameW,"I_RpcNsBindingSetEntryNameW");
   function I_RpcNsBindingSetEntryNameA(
      Binding : RPC_BINDING_HANDLE;
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcNsBindingSetEntryNameA,"I_RpcNsBindingSetEntryNameA");
   function I_RpcServerUseProtseqEp2A(
      NetworkAddress : RPC_CSTR;
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      Endpoint : RPC_CSTR;
      SecurityDescriptor : access Void;
      Policy : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerUseProtseqEp2A,"I_RpcServerUseProtseqEp2A");
   function I_RpcServerUseProtseqEp2W(
      NetworkAddress : RPC_WSTR;
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      Endpoint : RPC_WSTR;
      SecurityDescriptor : access Void;
      Policy : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerUseProtseqEp2W,"I_RpcServerUseProtseqEp2W");
   function I_RpcServerUseProtseq2W(
      NetworkAddress : RPC_WSTR;
      Protseq : RPC_WSTR;
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void;
      Policy : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerUseProtseq2W,"I_RpcServerUseProtseq2W");
   function I_RpcServerUseProtseq2A(
      NetworkAddress : RPC_CSTR;
      Protseq : RPC_CSTR;
      MaxCalls : Interfaces.C.unsigned;
      SecurityDescriptor : access Void;
      Policy : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerUseProtseq2A,"I_RpcServerUseProtseq2A");
   function I_RpcServerStartService(
      Protseq : RPC_WSTR;
      Endpoint : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerStartService,"I_RpcServerStartService");
   function I_RpcBindingInqDynamicEndpointW(
      Binding : RPC_BINDING_HANDLE;
      DynamicEndpoint : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqDynamicEndpointW,"I_RpcBindingInqDynamicEndpointW");
   function I_RpcBindingInqDynamicEndpointA(
      Binding : RPC_BINDING_HANDLE;
      DynamicEndpoint : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqDynamicEndpointA,"I_RpcBindingInqDynamicEndpointA");
   function I_RpcServerCheckClientRestriction(
      Context_x : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerCheckClientRestriction,"I_RpcServerCheckClientRestriction");
   function I_RpcBindingInqTransportType(
      Binding : RPC_BINDING_HANDLE;
      type_x : access Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqTransportType,"I_RpcBindingInqTransportType");
   type RPC_TRANSFER_SYNTAX_x is record
      Uuid_x : UUID;
      VersMajor : Interfaces.C.unsigned_short;
      VersMinor : Interfaces.C.unsigned_short;
   end record;
   subtype RPC_TRANSFER_SYNTAX is RPC_TRANSFER_SYNTAX_x; -- CXType_Elaborated
   function I_RpcIfInqTransferSyntaxes(
      RpcIfHandle : RPC_IF_HANDLE;
      TransferSyntaxes : access RPC_TRANSFER_SYNTAX;
      TransferSyntaxSize : Interfaces.C.unsigned;
      TransferSyntaxCount : access Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcIfInqTransferSyntaxes,"I_RpcIfInqTransferSyntaxes");
   function I_UuidCreate(
      Uuid_x : access UUID
   ) return RPC_STATUS;
   pragma import (C,I_UuidCreate,"I_UuidCreate");
   procedure I_RpcUninitializeNdrOle;
   pragma import (C,I_RpcUninitializeNdrOle,"I_RpcUninitializeNdrOle");
   function I_RpcBindingCopy(
      SourceBinding : RPC_BINDING_HANDLE;
      DestinationBinding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingCopy,"I_RpcBindingCopy");
   function I_RpcBindingIsClientLocal(
      BindingHandle : RPC_BINDING_HANDLE;
      ClientLocalFlag : access Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingIsClientLocal,"I_RpcBindingIsClientLocal");
   function I_RpcBindingInqConnId(
      Binding : RPC_BINDING_HANDLE;
      ConnId : access LPVOID;
      pfFirstCall : access Interfaces.C.Int
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqConnId,"I_RpcBindingInqConnId");
   function I_RpcBindingCreateNP(
      ServerName : RPC_WSTR;
      ServiceName : RPC_WSTR;
      NetworkOptions : RPC_WSTR;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingCreateNP,"I_RpcBindingCreateNP");
   procedure I_RpcSsDontSerializeContext;
   pragma import (C,I_RpcSsDontSerializeContext,"I_RpcSsDontSerializeContext");
   function I_RpcLaunchDatagramReceiveThread(
      pAddress : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcLaunchDatagramReceiveThread,"I_RpcLaunchDatagramReceiveThread");
   function I_RpcServerRegisterForwardFunction(
      pForwardFunction : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerRegisterForwardFunction,"I_RpcServerRegisterForwardFunction");
   -- function I_RpcServerInqAddressChangeFn return RPC_ADDRESS_CHANGE_FN *;
   function I_RpcServerSetAddressChangeFn(
      pAddressChangeFn : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerSetAddressChangeFn,"I_RpcServerSetAddressChangeFn");
   function I_RpcServerInqLocalConnAddress(
      Binding : RPC_BINDING_HANDLE;
      Buffer : access Void;
      BufferSize : access Interfaces.C.unsigned_long;
      AddressFormat : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerInqLocalConnAddress,"I_RpcServerInqLocalConnAddress");
   function I_RpcServerInqRemoteConnAddress(
      Binding : RPC_BINDING_HANDLE;
      Buffer : access Void;
      BufferSize : access Interfaces.C.unsigned_long;
      AddressFormat : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerInqRemoteConnAddress,"I_RpcServerInqRemoteConnAddress");
   procedure I_RpcSessionStrictContextHandle;
   pragma import (C,I_RpcSessionStrictContextHandle,"I_RpcSessionStrictContextHandle");
   function I_RpcTurnOnEEInfoPropagation return RPC_STATUS;
   pragma import (C,I_RpcTurnOnEEInfoPropagation,"I_RpcTurnOnEEInfoPropagation");
   function I_RpcConnectionInqSockBuffSize(
      RecvBuffSize : access Interfaces.C.unsigned_long;
      SendBuffSize : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcConnectionInqSockBuffSize,"I_RpcConnectionInqSockBuffSize");
   function I_RpcConnectionSetSockBuffSize(
      RecvBuffSize : Interfaces.C.unsigned_long;
      SendBuffSize : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcConnectionSetSockBuffSize,"I_RpcConnectionSetSockBuffSize");
   subtype RPCLT_PDU_FILTER_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (void *, unsigned int, int)
   subtype RPC_SETFILTER_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPCLT_PDU_FILTER_FUNC)
   function I_RpcServerStartListening(
      hWnd_x : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerStartListening,"I_RpcServerStartListening");
   function I_RpcServerStopListening return RPC_STATUS;
   pragma import (C,I_RpcServerStopListening,"I_RpcServerStopListening");
   subtype RPC_BLOCKING_FN is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (void *, void *, void *)
   function I_RpcBindingSetAsync(
      Binding : RPC_BINDING_HANDLE;
      BlockingFn : RPC_BLOCKING_FN;
      ServerTid : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingSetAsync,"I_RpcBindingSetAsync");
   function I_RpcSetThreadParams(
      fClientFree : Interfaces.C.Int;
      Context_x : access Void;
      hWndClient : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcSetThreadParams,"I_RpcSetThreadParams");
   function I_RpcWindowProc(
      hWnd_x : access Void;
      Message : Interfaces.C.unsigned;
      wParam_x : Interfaces.C.unsigned;
      lParam_x : Interfaces.C.unsigned_long
   ) return Interfaces.C.unsigned;
   pragma import (C,I_RpcWindowProc,"I_RpcWindowProc");
   function I_RpcServerUnregisterEndpointA(
      Protseq : RPC_CSTR;
      Endpoint : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerUnregisterEndpointA,"I_RpcServerUnregisterEndpointA");
   function I_RpcServerUnregisterEndpointW(
      Protseq : RPC_WSTR;
      Endpoint : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerUnregisterEndpointW,"I_RpcServerUnregisterEndpointW");
   function I_RpcServerInqTransportType(
      type_x : access Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerInqTransportType,"I_RpcServerInqTransportType");
   function I_RpcMapWin32Status(
      Status : RPC_STATUS
   ) return Interfaces.C.Long;
   pragma import (C,I_RpcMapWin32Status,"I_RpcMapWin32Status");
   type RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR_x is record
      BufferSize : Interfaces.C.unsigned_long;
      Buffer : access Character;
   end record;
   subtype RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR is RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR_x; -- CXType_Elaborated
   type RDR_CALLOUT_STATE_x is record
      LastError : RPC_STATUS;
      LastEEInfo : access Void;
      LastCalledStage : RPC_HTTP_REDIRECTOR_STAGE;
      ServerName : access Interfaces.C.unsigned_short;
      ServerPort : access Interfaces.C.unsigned_short;
      RemoteUser : access Interfaces.C.unsigned_short;
      AuthType : access Interfaces.C.unsigned_short;
      ResourceTypePresent : Interfaces.C.unsigned_char;
      SessionIdPresent : Interfaces.C.unsigned_char;
      InterfacePresent : Interfaces.C.unsigned_char;
      ResourceType : UUID;
      SessionId : UUID;
      interface_x : RPC_SYNTAX_IDENTIFIER;
      CertContext : access Void;
   end record;
   subtype RDR_CALLOUT_STATE is RDR_CALLOUT_STATE_x; -- CXType_Elaborated
   subtype I_RpcProxyIsValidMachineFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (RPC_WSTR, RPC_WSTR, unsigned long)
   subtype I_RpcProxyGetClientAddressFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (void *, char *, unsigned long *)
   subtype I_RpcProxyGetConnectionTimeoutFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (unsigned long *)
   subtype I_RpcPerformCalloutFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (void *, RDR_CALLOUT_STATE *, RPC_HTTP_REDIRECTOR_STAGE)
   subtype I_RpcFreeCalloutStateFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RDR_CALLOUT_STATE *)
   subtype I_RpcProxyGetClientSessionAndResourceUUID is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (void *, int *, UUID *, int *, UUID *)
   subtype I_RpcProxyFilterIfFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] RPC_STATUS (void *, UUID *, unsigned short, int *)
   type RpcProxyPerfCounters is (
      RpcCurrentUniqueUser,
      RpcBackEndConnectionAttempts,
      RpcBackEndConnectionFailed,
      RpcRequestsPerSecond,
      RpcIncomingConnections,
      RpcIncomingBandwidth,
      RpcOutgoingBandwidth,
      RpcAttemptedLbsDecisions,
      RpcFailedLbsDecisions,
      RpcAttemptedLbsMessages,
      RpcFailedLbsMessages,
      RpcLastCounter
   );
   for RpcProxyPerfCounters use (
      RpcCurrentUniqueUser => 1,
      RpcBackEndConnectionAttempts => 2,
      RpcBackEndConnectionFailed => 3,
      RpcRequestsPerSecond => 4,
      RpcIncomingConnections => 5,
      RpcIncomingBandwidth => 6,
      RpcOutgoingBandwidth => 7,
      RpcAttemptedLbsDecisions => 8,
      RpcFailedLbsDecisions => 9,
      RpcAttemptedLbsMessages => 10,
      RpcFailedLbsMessages => 11,
      RpcLastCounter => 12
   );
   for RpcProxyPerfCounters'Size use 32;
   subtype RpcPerfCounters is RpcProxyPerfCounters; -- CXType_Elaborated
   subtype I_RpcProxyUpdatePerfCounterFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RpcPerfCounters, int, unsigned long)
   subtype I_RpcProxyUpdatePerfCounterBackendServerFn is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (unsigned short *, int)
   type tagI_RpcProxyCallbackInterface is record
      IsValidMachineFn : I_RpcProxyIsValidMachineFn;
      GetClientAddressFn : I_RpcProxyGetClientAddressFn;
      GetConnectionTimeoutFn : I_RpcProxyGetConnectionTimeoutFn;
      PerformCalloutFn : I_RpcPerformCalloutFn;
      FreeCalloutStateFn : I_RpcFreeCalloutStateFn;
      GetClientSessionAndResourceUUIDFn : I_RpcProxyGetClientSessionAndResourceUUID;
      ProxyFilterIfFn : I_RpcProxyFilterIfFn;
      RpcProxyUpdatePerfCounterFn : I_RpcProxyUpdatePerfCounterFn;
      RpcProxyUpdatePerfCounterBackendServerFn : I_RpcProxyUpdatePerfCounterBackendServerFn;
   end record;
   subtype I_RpcProxyCallbackInterface is tagI_RpcProxyCallbackInterface; -- CXType_Elaborated
   function I_RpcProxyNewConnection(
      ConnectionType : Interfaces.C.unsigned_long;
      ServerAddress : access Interfaces.C.unsigned_short;
      ServerPort : access Interfaces.C.unsigned_short;
      MinConnTimeout : access Interfaces.C.unsigned_short;
      ConnectionParameter : access Void;
      CallOutState : access RDR_CALLOUT_STATE;
      ProxyCallbackInterface : access I_RpcProxyCallbackInterface
   ) return RPC_STATUS;
   pragma import (C,I_RpcProxyNewConnection,"I_RpcProxyNewConnection");
   function I_RpcReplyToClientWithStatus(
      ConnectionParameter : access Void;
      RpcStatus : RPC_STATUS
   ) return RPC_STATUS;
   pragma import (C,I_RpcReplyToClientWithStatus,"I_RpcReplyToClientWithStatus");
   procedure I_RpcRecordCalloutFailure(
      RpcStatus : RPC_STATUS;
      CallOutState : access RDR_CALLOUT_STATE;
      DllName : access Interfaces.C.unsigned_short
   );
   pragma import (C,I_RpcRecordCalloutFailure,"I_RpcRecordCalloutFailure");
   function I_RpcMgmtEnableDedicatedThreadPool return RPC_STATUS;
   pragma import (C,I_RpcMgmtEnableDedicatedThreadPool,"I_RpcMgmtEnableDedicatedThreadPool");
   function I_RpcGetDefaultSD(
      ppSecurityDescriptor : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,I_RpcGetDefaultSD,"I_RpcGetDefaultSD");
   function I_RpcOpenClientProcess(
      Binding : RPC_BINDING_HANDLE;
      DesiredAccess : Interfaces.C.unsigned_long;
      ClientProcess : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,I_RpcOpenClientProcess,"I_RpcOpenClientProcess");
   function I_RpcBindingIsServerLocal(
      Binding : RPC_BINDING_HANDLE;
      ServerLocalFlag : access Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingIsServerLocal,"I_RpcBindingIsServerLocal");
   function I_RpcBindingSetPrivateOption(
      hBinding : RPC_BINDING_HANDLE;
      option : Interfaces.C.unsigned_long;
      optionValue : ULONG_PTR
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingSetPrivateOption,"I_RpcBindingSetPrivateOption");
   function I_RpcServerSubscribeForDisconnectNotification(
      Binding : RPC_BINDING_HANDLE;
      hEvent : access Void
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerSubscribeForDisconnectNotification,"I_RpcServerSubscribeForDisconnectNotification");
   function I_RpcServerGetAssociationID(
      Binding : RPC_BINDING_HANDLE;
      AssociationID : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcServerGetAssociationID,"I_RpcServerGetAssociationID");
   function I_RpcServerDisableExceptionFilter return Interfaces.C.Long;
   pragma import (C,I_RpcServerDisableExceptionFilter,"I_RpcServerDisableExceptionFilter");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\rpcnsi.h>
   type RPC_NS_HANDLE is access Void; -- CXType_Pointer - CXType_Void
   function RpcNsBindingExportA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfSpec : RPC_IF_HANDLE;
      BindingVec : access RPC_BINDING_VECTOR;
      ObjectUuidVec : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingExportA,"RpcNsBindingExportA");
   function RpcNsBindingUnexportA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjectUuidVec : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingUnexportA,"RpcNsBindingUnexportA");
   function RpcNsBindingExportW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE;
      BindingVec : access RPC_BINDING_VECTOR;
      ObjectUuidVec : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingExportW,"RpcNsBindingExportW");
   function RpcNsBindingUnexportW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjectUuidVec : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingUnexportW,"RpcNsBindingUnexportW");
   function RpcNsBindingExportPnPA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjectVector : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingExportPnPA,"RpcNsBindingExportPnPA");
   function RpcNsBindingUnexportPnPA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjectVector : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingUnexportPnPA,"RpcNsBindingUnexportPnPA");
   function RpcNsBindingExportPnPW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjectVector : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingExportPnPW,"RpcNsBindingExportPnPW");
   function RpcNsBindingUnexportPnPW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjectVector : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingUnexportPnPW,"RpcNsBindingUnexportPnPW");
   function RpcNsBindingLookupBeginA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjUuid : access UUID;
      BindingMaxCount : Interfaces.C.unsigned_long;
      LookupContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingLookupBeginA,"RpcNsBindingLookupBeginA");
   function RpcNsBindingLookupBeginW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjUuid : access UUID;
      BindingMaxCount : Interfaces.C.unsigned_long;
      LookupContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingLookupBeginW,"RpcNsBindingLookupBeginW");
   function RpcNsBindingLookupNext(
      LookupContext : RPC_NS_HANDLE;
      BindingVec : access RPC_BINDING_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingLookupNext,"RpcNsBindingLookupNext");
   function RpcNsBindingLookupDone(
      LookupContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingLookupDone,"RpcNsBindingLookupDone");
   function RpcNsGroupDeleteA(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupDeleteA,"RpcNsGroupDeleteA");
   function RpcNsGroupMbrAddA(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_CSTR;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrAddA,"RpcNsGroupMbrAddA");
   function RpcNsGroupMbrRemoveA(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_CSTR;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrRemoveA,"RpcNsGroupMbrRemoveA");
   function RpcNsGroupMbrInqBeginA(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_CSTR;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrInqBeginA,"RpcNsGroupMbrInqBeginA");
   function RpcNsGroupMbrInqNextA(
      InquiryContext : RPC_NS_HANDLE;
      MemberName : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrInqNextA,"RpcNsGroupMbrInqNextA");
   function RpcNsGroupDeleteW(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupDeleteW,"RpcNsGroupDeleteW");
   function RpcNsGroupMbrAddW(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_WSTR;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrAddW,"RpcNsGroupMbrAddW");
   function RpcNsGroupMbrRemoveW(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_WSTR;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrRemoveW,"RpcNsGroupMbrRemoveW");
   function RpcNsGroupMbrInqBeginW(
      GroupNameSyntax : Interfaces.C.unsigned_long;
      GroupName : RPC_WSTR;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrInqBeginW,"RpcNsGroupMbrInqBeginW");
   function RpcNsGroupMbrInqNextW(
      InquiryContext : RPC_NS_HANDLE;
      MemberName : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrInqNextW,"RpcNsGroupMbrInqNextW");
   function RpcNsGroupMbrInqDone(
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsGroupMbrInqDone,"RpcNsGroupMbrInqDone");
   function RpcNsProfileDeleteA(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileDeleteA,"RpcNsProfileDeleteA");
   function RpcNsProfileEltAddA(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_CSTR;
      IfId : access RPC_IF_ID;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_CSTR;
      Priority : Interfaces.C.unsigned_long;
      Annotation : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltAddA,"RpcNsProfileEltAddA");
   function RpcNsProfileEltRemoveA(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_CSTR;
      IfId : access RPC_IF_ID;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltRemoveA,"RpcNsProfileEltRemoveA");
   function RpcNsProfileEltInqBeginA(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_CSTR;
      InquiryType : Interfaces.C.unsigned_long;
      IfId : access RPC_IF_ID;
      VersOption : Interfaces.C.unsigned_long;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_CSTR;
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltInqBeginA,"RpcNsProfileEltInqBeginA");
   function RpcNsProfileEltInqNextA(
      InquiryContext : RPC_NS_HANDLE;
      IfId : access RPC_IF_ID;
      MemberName : access RPC_CSTR;
      Priority : access Interfaces.C.unsigned_long;
      Annotation : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltInqNextA,"RpcNsProfileEltInqNextA");
   function RpcNsProfileDeleteW(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileDeleteW,"RpcNsProfileDeleteW");
   function RpcNsProfileEltAddW(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_WSTR;
      IfId : access RPC_IF_ID;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_WSTR;
      Priority : Interfaces.C.unsigned_long;
      Annotation : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltAddW,"RpcNsProfileEltAddW");
   function RpcNsProfileEltRemoveW(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_WSTR;
      IfId : access RPC_IF_ID;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltRemoveW,"RpcNsProfileEltRemoveW");
   function RpcNsProfileEltInqBeginW(
      ProfileNameSyntax : Interfaces.C.unsigned_long;
      ProfileName : RPC_WSTR;
      InquiryType : Interfaces.C.unsigned_long;
      IfId : access RPC_IF_ID;
      VersOption : Interfaces.C.unsigned_long;
      MemberNameSyntax : Interfaces.C.unsigned_long;
      MemberName : RPC_WSTR;
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltInqBeginW,"RpcNsProfileEltInqBeginW");
   function RpcNsProfileEltInqNextW(
      InquiryContext : RPC_NS_HANDLE;
      IfId : access RPC_IF_ID;
      MemberName : access RPC_WSTR;
      Priority : access Interfaces.C.unsigned_long;
      Annotation : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltInqNextW,"RpcNsProfileEltInqNextW");
   function RpcNsProfileEltInqDone(
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsProfileEltInqDone,"RpcNsProfileEltInqDone");
   function RpcNsEntryObjectInqBeginA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsEntryObjectInqBeginA,"RpcNsEntryObjectInqBeginA");
   function RpcNsEntryObjectInqBeginW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsEntryObjectInqBeginW,"RpcNsEntryObjectInqBeginW");
   function RpcNsEntryObjectInqNext(
      InquiryContext : RPC_NS_HANDLE;
      ObjUuid : access UUID
   ) return RPC_STATUS;
   pragma import (C,RpcNsEntryObjectInqNext,"RpcNsEntryObjectInqNext");
   function RpcNsEntryObjectInqDone(
      InquiryContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsEntryObjectInqDone,"RpcNsEntryObjectInqDone");
   function RpcNsEntryExpandNameA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      ExpandedName : access RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsEntryExpandNameA,"RpcNsEntryExpandNameA");
   function RpcNsMgmtBindingUnexportA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfId : access RPC_IF_ID;
      VersOption : Interfaces.C.unsigned_long;
      ObjectUuidVec : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtBindingUnexportA,"RpcNsMgmtBindingUnexportA");
   function RpcNsMgmtEntryCreateA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtEntryCreateA,"RpcNsMgmtEntryCreateA");
   function RpcNsMgmtEntryDeleteA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtEntryDeleteA,"RpcNsMgmtEntryDeleteA");
   function RpcNsMgmtEntryInqIfIdsA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfIdVec : access RPC_IF_ID_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtEntryInqIfIdsA,"RpcNsMgmtEntryInqIfIdsA");
   function RpcNsMgmtHandleSetExpAge(
      NsHandle : RPC_NS_HANDLE;
      ExpirationAge : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtHandleSetExpAge,"RpcNsMgmtHandleSetExpAge");
   function RpcNsMgmtInqExpAge(
      ExpirationAge : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtInqExpAge,"RpcNsMgmtInqExpAge");
   function RpcNsMgmtSetExpAge(
      ExpirationAge : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtSetExpAge,"RpcNsMgmtSetExpAge");
   function RpcNsEntryExpandNameW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      ExpandedName : access RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsEntryExpandNameW,"RpcNsEntryExpandNameW");
   function RpcNsMgmtBindingUnexportW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfId : access RPC_IF_ID;
      VersOption : Interfaces.C.unsigned_long;
      ObjectUuidVec : access UUID_VECTOR
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtBindingUnexportW,"RpcNsMgmtBindingUnexportW");
   function RpcNsMgmtEntryCreateW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtEntryCreateW,"RpcNsMgmtEntryCreateW");
   function RpcNsMgmtEntryDeleteW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtEntryDeleteW,"RpcNsMgmtEntryDeleteW");
   function RpcNsMgmtEntryInqIfIdsW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfIdVec : access RPC_IF_ID_VECTOR_Ptr
   ) return RPC_STATUS;
   pragma import (C,RpcNsMgmtEntryInqIfIdsW,"RpcNsMgmtEntryInqIfIdsW");
   function RpcNsBindingImportBeginA(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_CSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjUuid : access UUID;
      ImportContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingImportBeginA,"RpcNsBindingImportBeginA");
   function RpcNsBindingImportBeginW(
      EntryNameSyntax : Interfaces.C.unsigned_long;
      EntryName : RPC_WSTR;
      IfSpec : RPC_IF_HANDLE;
      ObjUuid : access UUID;
      ImportContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingImportBeginW,"RpcNsBindingImportBeginW");
   function RpcNsBindingImportNext(
      ImportContext : RPC_NS_HANDLE;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingImportNext,"RpcNsBindingImportNext");
   function RpcNsBindingImportDone(
      ImportContext : access RPC_NS_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingImportDone,"RpcNsBindingImportDone");
   function RpcNsBindingSelect(
      BindingVec : access RPC_BINDING_VECTOR;
      Binding : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcNsBindingSelect,"RpcNsBindingSelect");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\rpcasync.h>
   type RPC_NOTIFICATION_TYPES_x is (
      RpcNotificationTypeNone,
      RpcNotificationTypeEvent,
      RpcNotificationTypeApc,
      RpcNotificationTypeIoc,
      RpcNotificationTypeHwnd,
      RpcNotificationTypeCallback
   );
   for RPC_NOTIFICATION_TYPES_x use (
      RpcNotificationTypeNone => 0,
      RpcNotificationTypeEvent => 1,
      RpcNotificationTypeApc => 2,
      RpcNotificationTypeIoc => 3,
      RpcNotificationTypeHwnd => 4,
      RpcNotificationTypeCallback => 5
   );
   for RPC_NOTIFICATION_TYPES_x'Size use 32;
   subtype RPC_NOTIFICATION_TYPES is RPC_NOTIFICATION_TYPES_x; -- CXType_Elaborated
   type RPC_ASYNC_EVENT_x is (
      RpcCallComplete,
      RpcSendComplete,
      RpcReceiveComplete,
      RpcClientDisconnect,
      RpcClientCancel
   );
   for RPC_ASYNC_EVENT_x use (
      RpcCallComplete => 0,
      RpcSendComplete => 1,
      RpcReceiveComplete => 2,
      RpcClientDisconnect => 3,
      RpcClientCancel => 4
   );
   for RPC_ASYNC_EVENT_x'Size use 32;
   subtype RPC_ASYNC_EVENT is RPC_ASYNC_EVENT_x; -- CXType_Elaborated
   type RPC_ASYNC_STATE_x; -- Forward Declaration
   subtype RPCNOTIFICATION_ROUTINE is System.Address; -- [FIXME - CXType_FunctionProto] void (struct _RPC_ASYNC_STATE *, void *, RPC_ASYNC_EVENT)
   subtype PFN_RPCNOTIFICATION_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_FunctionProto] void (struct _RPC_ASYNC_STATE *, void *, RPC_ASYNC_EVENT)
   type RPC_ASYNC_NOTIFICATION_INFO_x is null record; -- Union Placeholder [FIXME]
   subtype RPC_ASYNC_NOTIFICATION_INFO is RPC_ASYNC_NOTIFICATION_INFO_x; -- CXType_Elaborated
   type PRPC_ASYNC_NOTIFICATION_INFO is access RPC_ASYNC_NOTIFICATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type RPC_ASYNC_STATE_x is record
      Size_x : Interfaces.C.unsigned;
      Signature : Interfaces.C.unsigned_long;
      Lock : Interfaces.C.Long;
      Flags : Interfaces.C.unsigned_long;
      StubInfo : access Void;
      UserInfo : access Void;
      RuntimeInfo : access Void;
      Event : RPC_ASYNC_EVENT;
      NotificationType : RPC_NOTIFICATION_TYPES;
      u : RPC_ASYNC_NOTIFICATION_INFO;
      Reserved : Void;
   end record;
   subtype RPC_ASYNC_STATE is RPC_ASYNC_STATE_x; -- CXType_Elaborated
   type PRPC_ASYNC_STATE is access RPC_ASYNC_STATE_x; -- CXType_Pointer - CXType_Elaborated
   function RpcAsyncRegisterInfo(
      pAsync : PRPC_ASYNC_STATE
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncRegisterInfo,"RpcAsyncRegisterInfo");
   function RpcAsyncInitializeHandle(
      pAsync : PRPC_ASYNC_STATE;
      Size_x : Interfaces.C.unsigned
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncInitializeHandle,"RpcAsyncInitializeHandle");
   function RpcAsyncGetCallStatus(
      pAsync : PRPC_ASYNC_STATE
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncGetCallStatus,"RpcAsyncGetCallStatus");
   function RpcAsyncCompleteCall(
      pAsync : PRPC_ASYNC_STATE;
      Reply : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncCompleteCall,"RpcAsyncCompleteCall");
   function RpcAsyncAbortCall(
      pAsync : PRPC_ASYNC_STATE;
      ExceptionCode : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncAbortCall,"RpcAsyncAbortCall");
   function RpcAsyncCancelCall(
      pAsync : PRPC_ASYNC_STATE;
      fAbort : BOOL
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncCancelCall,"RpcAsyncCancelCall");
   type tagExtendedErrorParamTypes is (
      eeptAnsiString,
      eeptUnicodeString,
      eeptLongVal,
      eeptShortVal,
      eeptPointerVal,
      eeptNone,
      eeptBinary
   );
   for tagExtendedErrorParamTypes use (
      eeptAnsiString => 1,
      eeptUnicodeString => 2,
      eeptLongVal => 3,
      eeptShortVal => 4,
      eeptPointerVal => 5,
      eeptNone => 6,
      eeptBinary => 7
   );
   for tagExtendedErrorParamTypes'Size use 32;
   subtype ExtendedErrorParamTypes is tagExtendedErrorParamTypes; -- CXType_Elaborated
   type tagBinaryParam is record
      Buffer : access Void;
      Size_x : Interfaces.C.Short;
   end record;
   subtype BinaryParam is tagBinaryParam; -- CXType_Elaborated
   type tagRPC_EE_INFO_PARAM is record
      ParameterType : ExtendedErrorParamTypes;
      u : Void;
   end record;
   subtype RPC_EE_INFO_PARAM is tagRPC_EE_INFO_PARAM; -- CXType_Elaborated
   type tagRPC_EXTENDED_ERROR_INFO is record
      Version : ULONG;
      ComputerName : LPWSTR;
      ProcessID : ULONG;
      u : Void;
      GeneratingComponent : ULONG;
      Status : ULONG;
      DetectionLocation : USHORT;
      Flags : USHORT;
      NumberOfParameters : Interfaces.C.Int;
      Parameters : Void;
   end record;
   subtype RPC_EXTENDED_ERROR_INFO is tagRPC_EXTENDED_ERROR_INFO; -- CXType_Elaborated
   type tagRPC_ERROR_ENUM_HANDLE is record
      Signature : ULONG;
      CurrentPos : access Void;
      Head : access Void;
   end record;
   subtype RPC_ERROR_ENUM_HANDLE is tagRPC_ERROR_ENUM_HANDLE; -- CXType_Elaborated
   function RpcErrorStartEnumeration(
      EnumHandle : access RPC_ERROR_ENUM_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcErrorStartEnumeration,"RpcErrorStartEnumeration");
   function RpcErrorGetNextRecord(
      EnumHandle : access RPC_ERROR_ENUM_HANDLE;
      CopyStrings : BOOL;
      ErrorInfo : access RPC_EXTENDED_ERROR_INFO
   ) return RPC_STATUS;
   pragma import (C,RpcErrorGetNextRecord,"RpcErrorGetNextRecord");
   function RpcErrorEndEnumeration(
      EnumHandle : access RPC_ERROR_ENUM_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcErrorEndEnumeration,"RpcErrorEndEnumeration");
   function RpcErrorResetEnumeration(
      EnumHandle : access RPC_ERROR_ENUM_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcErrorResetEnumeration,"RpcErrorResetEnumeration");
   function RpcErrorGetNumberOfRecords(
      EnumHandle : access RPC_ERROR_ENUM_HANDLE;
      Records : access Interfaces.C.Int
   ) return RPC_STATUS;
   pragma import (C,RpcErrorGetNumberOfRecords,"RpcErrorGetNumberOfRecords");
   function RpcErrorSaveErrorInfo(
      EnumHandle : access RPC_ERROR_ENUM_HANDLE;
      ErrorBlob : access PVOID;
      BlobSize : access size_t
   ) return RPC_STATUS;
   pragma import (C,RpcErrorSaveErrorInfo,"RpcErrorSaveErrorInfo");
   function RpcErrorLoadErrorInfo(
      ErrorBlob : PVOID;
      BlobSize : size_t;
      EnumHandle : access RPC_ERROR_ENUM_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcErrorLoadErrorInfo,"RpcErrorLoadErrorInfo");
   function RpcErrorAddRecord(
      ErrorInfo : access RPC_EXTENDED_ERROR_INFO
   ) return RPC_STATUS;
   pragma import (C,RpcErrorAddRecord,"RpcErrorAddRecord");
   procedure RpcErrorClearInformation;
   pragma import (C,RpcErrorClearInformation,"RpcErrorClearInformation");
   function RpcAsyncCleanupThread(
      dwTimeout : DWORD
   ) return RPC_STATUS;
   pragma import (C,RpcAsyncCleanupThread,"RpcAsyncCleanupThread");
   function RpcGetAuthorizationContextForClient(
      ClientBinding : RPC_BINDING_HANDLE;
      ImpersonateOnReturn : BOOL;
      Reserved1 : PVOID;
      pExpirationTime : PLARGE_INTEGER;
      Reserved2 : LUID;
      Reserved3 : DWORD;
      Reserved4 : PVOID;
      pAuthzClientContext : access PVOID
   ) return RPC_STATUS;
   pragma import (C,RpcGetAuthorizationContextForClient,"RpcGetAuthorizationContextForClient");
   function RpcFreeAuthorizationContext(
      pAuthzClientContext : access PVOID
   ) return RPC_STATUS;
   pragma import (C,RpcFreeAuthorizationContext,"RpcFreeAuthorizationContext");
   function RpcSsContextLockExclusive(
      ServerBindingHandle : RPC_BINDING_HANDLE;
      UserContext : PVOID
   ) return RPC_STATUS;
   pragma import (C,RpcSsContextLockExclusive,"RpcSsContextLockExclusive");
   function RpcSsContextLockShared(
      ServerBindingHandle : RPC_BINDING_HANDLE;
      UserContext : PVOID
   ) return RPC_STATUS;
   pragma import (C,RpcSsContextLockShared,"RpcSsContextLockShared");
   type tagRpcLocalAddressFormat is (
      rlafInvalid,
      rlafIPv4,
      rlafIPv6
   );
   for tagRpcLocalAddressFormat use (
      rlafInvalid => 0,
      rlafIPv4 => 1,
      rlafIPv6 => 2
   );
   for tagRpcLocalAddressFormat'Size use 32;
   subtype RpcLocalAddressFormat is tagRpcLocalAddressFormat; -- CXType_Elaborated
   type RPC_CALL_LOCAL_ADDRESS_V1_x is record
      Version : Interfaces.C.unsigned;
      Buffer : access Void;
      BufferSize : Interfaces.C.unsigned_long;
      AddressFormat : RpcLocalAddressFormat;
   end record;
   subtype RPC_CALL_LOCAL_ADDRESS_V1 is RPC_CALL_LOCAL_ADDRESS_V1_x; -- CXType_Elaborated
   type PRPC_CALL_LOCAL_ADDRESS_V1 is access RPC_CALL_LOCAL_ADDRESS_V1_x; -- CXType_Pointer - CXType_Elaborated
   type tagRPC_CALL_ATTRIBUTES_V1_W is record
      Version : Interfaces.C.unsigned;
      Flags : Interfaces.C.unsigned_long;
      ServerPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ServerPrincipalName : access Interfaces.C.unsigned_short;
      ClientPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ClientPrincipalName : access Interfaces.C.unsigned_short;
      AuthenticationLevel : Interfaces.C.unsigned_long;
      AuthenticationService : Interfaces.C.unsigned_long;
      NullSession : BOOL;
   end record;
   subtype RPC_CALL_ATTRIBUTES_V1_W is tagRPC_CALL_ATTRIBUTES_V1_W; -- CXType_Elaborated
   type tagRPC_CALL_ATTRIBUTES_V1_A is record
      Version : Interfaces.C.unsigned;
      Flags : Interfaces.C.unsigned_long;
      ServerPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ServerPrincipalName : access Interfaces.C.unsigned_char;
      ClientPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ClientPrincipalName : access Interfaces.C.unsigned_char;
      AuthenticationLevel : Interfaces.C.unsigned_long;
      AuthenticationService : Interfaces.C.unsigned_long;
      NullSession : BOOL;
   end record;
   subtype RPC_CALL_ATTRIBUTES_V1_A is tagRPC_CALL_ATTRIBUTES_V1_A; -- CXType_Elaborated
   type tagRpcCallType is (
      rctInvalid,
      rctNormal,
      rctTraining,
      rctGuaranteed
   );
   for tagRpcCallType use (
      rctInvalid => 0,
      rctNormal => 1,
      rctTraining => 2,
      rctGuaranteed => 3
   );
   for tagRpcCallType'Size use 32;
   subtype RpcCallType is tagRpcCallType; -- CXType_Elaborated
   type tagRpcCallClientLocality is (
      rcclInvalid,
      rcclLocal,
      rcclRemote,
      rcclClientUnknownLocality
   );
   for tagRpcCallClientLocality use (
      rcclInvalid => 0,
      rcclLocal => 1,
      rcclRemote => 2,
      rcclClientUnknownLocality => 3
   );
   for tagRpcCallClientLocality'Size use 32;
   subtype RpcCallClientLocality is tagRpcCallClientLocality; -- CXType_Elaborated
   type tagRPC_CALL_ATTRIBUTES_V2_W is record
      Version : Interfaces.C.unsigned;
      Flags : Interfaces.C.unsigned_long;
      ServerPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ServerPrincipalName : access Interfaces.C.unsigned_short;
      ClientPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ClientPrincipalName : access Interfaces.C.unsigned_short;
      AuthenticationLevel : Interfaces.C.unsigned_long;
      AuthenticationService : Interfaces.C.unsigned_long;
      NullSession : BOOL;
      KernelModeCaller : BOOL;
      ProtocolSequence : Interfaces.C.unsigned_long;
      IsClientLocal : RpcCallClientLocality;
      ClientPID : HANDLE;
      CallStatus : Interfaces.C.unsigned_long;
      CallType : RpcCallType;
      CallLocalAddress : access RPC_CALL_LOCAL_ADDRESS_V1;
      OpNum : Interfaces.C.unsigned_short;
      InterfaceUuid : UUID;
   end record;
   subtype RPC_CALL_ATTRIBUTES_V2_W is tagRPC_CALL_ATTRIBUTES_V2_W; -- CXType_Elaborated
   type tagRPC_CALL_ATTRIBUTES_V2_A is record
      Version : Interfaces.C.unsigned;
      Flags : Interfaces.C.unsigned_long;
      ServerPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ServerPrincipalName : access Interfaces.C.unsigned_char;
      ClientPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ClientPrincipalName : access Interfaces.C.unsigned_char;
      AuthenticationLevel : Interfaces.C.unsigned_long;
      AuthenticationService : Interfaces.C.unsigned_long;
      NullSession : BOOL;
      KernelModeCaller : BOOL;
      ProtocolSequence : Interfaces.C.unsigned_long;
      IsClientLocal : Interfaces.C.unsigned_long;
      ClientPID : HANDLE;
      CallStatus : Interfaces.C.unsigned_long;
      CallType : RpcCallType;
      CallLocalAddress : access RPC_CALL_LOCAL_ADDRESS_V1;
      OpNum : Interfaces.C.unsigned_short;
      InterfaceUuid : UUID;
   end record;
   subtype RPC_CALL_ATTRIBUTES_V2_A is tagRPC_CALL_ATTRIBUTES_V2_A; -- CXType_Elaborated
   type tagRPC_CALL_ATTRIBUTES_V3_W is record
      Version : Interfaces.C.unsigned;
      Flags : Interfaces.C.unsigned_long;
      ServerPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ServerPrincipalName : access Interfaces.C.unsigned_short;
      ClientPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ClientPrincipalName : access Interfaces.C.unsigned_short;
      AuthenticationLevel : Interfaces.C.unsigned_long;
      AuthenticationService : Interfaces.C.unsigned_long;
      NullSession : BOOL;
      KernelModeCaller : BOOL;
      ProtocolSequence : Interfaces.C.unsigned_long;
      IsClientLocal : RpcCallClientLocality;
      ClientPID : HANDLE;
      CallStatus : Interfaces.C.unsigned_long;
      CallType : RpcCallType;
      CallLocalAddress : access RPC_CALL_LOCAL_ADDRESS_V1;
      OpNum : Interfaces.C.unsigned_short;
      InterfaceUuid : UUID;
      ClientIdentifierBufferLength : Interfaces.C.unsigned_long;
      ClientIdentifier : access Interfaces.C.unsigned_char;
   end record;
   subtype RPC_CALL_ATTRIBUTES_V3_W is tagRPC_CALL_ATTRIBUTES_V3_W; -- CXType_Elaborated
   type tagRPC_CALL_ATTRIBUTES_V3_A is record
      Version : Interfaces.C.unsigned;
      Flags : Interfaces.C.unsigned_long;
      ServerPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ServerPrincipalName : access Interfaces.C.unsigned_char;
      ClientPrincipalNameBufferLength : Interfaces.C.unsigned_long;
      ClientPrincipalName : access Interfaces.C.unsigned_char;
      AuthenticationLevel : Interfaces.C.unsigned_long;
      AuthenticationService : Interfaces.C.unsigned_long;
      NullSession : BOOL;
      KernelModeCaller : BOOL;
      ProtocolSequence : Interfaces.C.unsigned_long;
      IsClientLocal : Interfaces.C.unsigned_long;
      ClientPID : HANDLE;
      CallStatus : Interfaces.C.unsigned_long;
      CallType : RpcCallType;
      CallLocalAddress : access RPC_CALL_LOCAL_ADDRESS_V1;
      OpNum : Interfaces.C.unsigned_short;
      InterfaceUuid : UUID;
      ClientIdentifierBufferLength : Interfaces.C.unsigned_long;
      ClientIdentifier : access Interfaces.C.unsigned_char;
   end record;
   subtype RPC_CALL_ATTRIBUTES_V3_A is tagRPC_CALL_ATTRIBUTES_V3_A; -- CXType_Elaborated
   function RpcServerInqCallAttributesW(
      ClientBinding : RPC_BINDING_HANDLE;
      RpcCallAttributes : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqCallAttributesW,"RpcServerInqCallAttributesW");
   function RpcServerInqCallAttributesA(
      ClientBinding : RPC_BINDING_HANDLE;
      RpcCallAttributes : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcServerInqCallAttributesA,"RpcServerInqCallAttributesA");
   subtype RPC_CALL_ATTRIBUTES is RPC_CALL_ATTRIBUTES_V3_A; -- CXType_Typedef
   type RPC_NOTIFICATIONS_x is (
      RpcNotificationCallNone,
      RpcNotificationClientDisconnect,
      RpcNotificationCallCancel
   );
   for RPC_NOTIFICATIONS_x use (
      RpcNotificationCallNone => 0,
      RpcNotificationClientDisconnect => 1,
      RpcNotificationCallCancel => 2
   );
   for RPC_NOTIFICATIONS_x'Size use 32;
   subtype RPC_NOTIFICATIONS is RPC_NOTIFICATIONS_x; -- CXType_Elaborated
   function RpcServerSubscribeForNotification(
      Binding : RPC_BINDING_HANDLE;
      Notification : RPC_NOTIFICATIONS;
      NotificationType : RPC_NOTIFICATION_TYPES;
      NotificationInfo : access RPC_ASYNC_NOTIFICATION_INFO
   ) return RPC_STATUS;
   pragma import (C,RpcServerSubscribeForNotification,"RpcServerSubscribeForNotification");
   function RpcServerUnsubscribeForNotification(
      Binding : RPC_BINDING_HANDLE;
      Notification : RPC_NOTIFICATIONS;
      NotificationsQueued : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,RpcServerUnsubscribeForNotification,"RpcServerUnsubscribeForNotification");
   function RpcBindingBind(
      pAsync : PRPC_ASYNC_STATE;
      Binding : RPC_BINDING_HANDLE;
      IfSpec : RPC_IF_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingBind,"RpcBindingBind");
   function RpcBindingUnbind(
      Binding : RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcBindingUnbind,"RpcBindingUnbind");
   function I_RpcAsyncSetHandle(
      Message : PRPC_MESSAGE;
      pAsync : PRPC_ASYNC_STATE
   ) return RPC_STATUS;
   pragma import (C,I_RpcAsyncSetHandle,"I_RpcAsyncSetHandle");
   function I_RpcAsyncAbortCall(
      pAsync : PRPC_ASYNC_STATE;
      ExceptionCode : Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,I_RpcAsyncAbortCall,"I_RpcAsyncAbortCall");
   function I_RpcExceptionFilter(
      ExceptionCode : Interfaces.C.unsigned_long
   ) return Interfaces.C.Int;
   pragma import (C,I_RpcExceptionFilter,"I_RpcExceptionFilter");
   function I_RpcBindingInqClientTokenAttributes(
      Binding : RPC_BINDING_HANDLE;
      TokenId : access LUID;
      AuthenticationId : access LUID;
      ModifiedId : access LUID
   ) return RPC_STATUS;
   pragma import (C,I_RpcBindingInqClientTokenAttributes,"I_RpcBindingInqClientTokenAttributes");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\shellapi.h>
   type HDROP_x is record
      unused : Interfaces.C.Int;
   end record;
   type HDROP is access HDROP_x; -- CXType_Pointer - CXType_Elaborated
   function DragQueryFileA(
      hDrop_x : HDROP;
      iFile : UINT;
      lpszFile : LPSTR;
      cch : UINT
   ) return UINT;
   pragma import (C,DragQueryFileA,"DragQueryFileA");
   function DragQueryFileW(
      hDrop_x : HDROP;
      iFile : UINT;
      lpszFile : LPWSTR;
      cch : UINT
   ) return UINT;
   pragma import (C,DragQueryFileW,"DragQueryFileW");
   function DragQueryPoint(
      hDrop_x : HDROP;
      ppt : access POINT
   ) return BOOL;
   pragma import (C,DragQueryPoint,"DragQueryPoint");
   procedure DragFinish(
      hDrop_x : HDROP
   );
   pragma import (C,DragFinish,"DragFinish");
   procedure DragAcceptFiles(
      hWnd_x : HWND;
      fAccept : BOOL
   );
   pragma import (C,DragAcceptFiles,"DragAcceptFiles");
   function ShellExecuteA(
      hwnd_x : HWND;
      lpOperation : LPCSTR;
      lpFile : LPCSTR;
      lpParameters : LPCSTR;
      lpDirectory : LPCSTR;
      nShowCmd : INT
   ) return HINSTANCE;
   pragma import (C,ShellExecuteA,"ShellExecuteA");
   function ShellExecuteW(
      hwnd_x : HWND;
      lpOperation : LPCWSTR;
      lpFile : LPCWSTR;
      lpParameters : LPCWSTR;
      lpDirectory : LPCWSTR;
      nShowCmd : INT
   ) return HINSTANCE;
   pragma import (C,ShellExecuteW,"ShellExecuteW");
   function FindExecutableA(
      lpFile : LPCSTR;
      lpDirectory : LPCSTR;
      lpResult : LPSTR
   ) return HINSTANCE;
   pragma import (C,FindExecutableA,"FindExecutableA");
   function FindExecutableW(
      lpFile : LPCWSTR;
      lpDirectory : LPCWSTR;
      lpResult : LPWSTR
   ) return HINSTANCE;
   pragma import (C,FindExecutableW,"FindExecutableW");
   function ShellAboutA(
      hWnd_x : HWND;
      szApp : LPCSTR;
      szOtherStuff : LPCSTR;
      hIcon_x : HICON
   ) return INT;
   pragma import (C,ShellAboutA,"ShellAboutA");
   function ShellAboutW(
      hWnd_x : HWND;
      szApp : LPCWSTR;
      szOtherStuff : LPCWSTR;
      hIcon_x : HICON
   ) return INT;
   pragma import (C,ShellAboutW,"ShellAboutW");
   function DuplicateIcon(
      hInst : HINSTANCE;
      hIcon_x : HICON
   ) return HICON;
   pragma import (C,DuplicateIcon,"DuplicateIcon");
   function ExtractAssociatedIconA(
      hInst : HINSTANCE;
      pszIconPath : LPSTR;
      piIcon : access WORD
   ) return HICON;
   pragma import (C,ExtractAssociatedIconA,"ExtractAssociatedIconA");
   function ExtractAssociatedIconW(
      hInst : HINSTANCE;
      pszIconPath : LPWSTR;
      piIcon : access WORD
   ) return HICON;
   pragma import (C,ExtractAssociatedIconW,"ExtractAssociatedIconW");
   function ExtractAssociatedIconExA(
      hInst : HINSTANCE;
      pszIconPath : LPSTR;
      piIconIndex : access WORD;
      piIconId : access WORD
   ) return HICON;
   pragma import (C,ExtractAssociatedIconExA,"ExtractAssociatedIconExA");
   function ExtractAssociatedIconExW(
      hInst : HINSTANCE;
      pszIconPath : LPWSTR;
      piIconIndex : access WORD;
      piIconId : access WORD
   ) return HICON;
   pragma import (C,ExtractAssociatedIconExW,"ExtractAssociatedIconExW");
   function ExtractIconA(
      hInst : HINSTANCE;
      pszExeFileName : LPCSTR;
      nIconIndex : UINT
   ) return HICON;
   pragma import (C,ExtractIconA,"ExtractIconA");
   function ExtractIconW(
      hInst : HINSTANCE;
      pszExeFileName : LPCWSTR;
      nIconIndex : UINT
   ) return HICON;
   pragma import (C,ExtractIconW,"ExtractIconW");
   type DRAGINFOA_x is record
      uSize : UINT;
      pt : POINT;
      fNC : BOOL;
      lpFileList : PZZSTR;
      grfKeyState : DWORD;
   end record;
   subtype DRAGINFOA is DRAGINFOA_x; -- CXType_Elaborated
   type LPDRAGINFOA is access DRAGINFOA_x; -- CXType_Pointer - CXType_Elaborated
   type DRAGINFOW_x is record
      uSize : UINT;
      pt : POINT;
      fNC : BOOL;
      lpFileList : PZZWSTR;
      grfKeyState : DWORD;
   end record;
   subtype DRAGINFOW is DRAGINFOW_x; -- CXType_Elaborated
   type LPDRAGINFOW is access DRAGINFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRAGINFO is DRAGINFOA; -- CXType_Typedef
   subtype LPDRAGINFO is LPDRAGINFOA; -- CXType_Typedef
   type AppBarData_x is record
      cbSize : DWORD;
      hWnd_x : HWND;
      uCallbackMessage : UINT;
      uEdge : UINT;
      rc : RECT;
      lParam_x : LPARAM;
   end record;
   subtype APPBARDATA is AppBarData_x; -- CXType_Elaborated
   type PAPPBARDATA is access AppBarData_x; -- CXType_Pointer - CXType_Elaborated
   function SHAppBarMessage(
      dwMessage : DWORD;
      pData : PAPPBARDATA
   ) return UINT_PTR;
   pragma import (C,SHAppBarMessage,"SHAppBarMessage");
   function DoEnvironmentSubstA(
      pszSrc : LPSTR;
      cchSrc : UINT
   ) return DWORD;
   pragma import (C,DoEnvironmentSubstA,"DoEnvironmentSubstA");
   function DoEnvironmentSubstW(
      pszSrc : LPWSTR;
      cchSrc : UINT
   ) return DWORD;
   pragma import (C,DoEnvironmentSubstW,"DoEnvironmentSubstW");
   function ExtractIconExA(
      lpszFile : LPCSTR;
      nIconIndex : Interfaces.C.Int;
      phiconLarge : access HICON;
      phiconSmall : access HICON;
      nIcons : UINT
   ) return UINT;
   pragma import (C,ExtractIconExA,"ExtractIconExA");
   function ExtractIconExW(
      lpszFile : LPCWSTR;
      nIconIndex : Interfaces.C.Int;
      phiconLarge : access HICON;
      phiconSmall : access HICON;
      nIcons : UINT
   ) return UINT;
   pragma import (C,ExtractIconExW,"ExtractIconExW");
   subtype FILEOP_FLAGS is WORD; -- CXType_Typedef
   subtype PRINTEROP_FLAGS is WORD; -- CXType_Typedef
   type SHFILEOPSTRUCTA_x is record
      hwnd_x : HWND;
      wFunc : UINT;
      pFrom : PCZZSTR;
      pTo : PCZZSTR;
      fFlags : FILEOP_FLAGS;
      fAnyOperationsAborted : BOOL;
      hNameMappings : LPVOID;
      lpszProgressTitle : PCSTR;
   end record;
   subtype SHFILEOPSTRUCTA is SHFILEOPSTRUCTA_x; -- CXType_Elaborated
   type LPSHFILEOPSTRUCTA is access SHFILEOPSTRUCTA_x; -- CXType_Pointer - CXType_Elaborated
   type SHFILEOPSTRUCTW_x is record
      hwnd_x : HWND;
      wFunc : UINT;
      pFrom : PCZZWSTR;
      pTo : PCZZWSTR;
      fFlags : FILEOP_FLAGS;
      fAnyOperationsAborted : BOOL;
      hNameMappings : LPVOID;
      lpszProgressTitle : PCWSTR;
   end record;
   subtype SHFILEOPSTRUCTW is SHFILEOPSTRUCTW_x; -- CXType_Elaborated
   type LPSHFILEOPSTRUCTW is access SHFILEOPSTRUCTW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SHFILEOPSTRUCT is SHFILEOPSTRUCTA; -- CXType_Typedef
   subtype LPSHFILEOPSTRUCT is LPSHFILEOPSTRUCTA; -- CXType_Typedef
   function SHFileOperationA(
      lpFileOp : LPSHFILEOPSTRUCTA
   ) return Interfaces.C.Int;
   pragma import (C,SHFileOperationA,"SHFileOperationA");
   function SHFileOperationW(
      lpFileOp : LPSHFILEOPSTRUCTW
   ) return Interfaces.C.Int;
   pragma import (C,SHFileOperationW,"SHFileOperationW");
   procedure SHFreeNameMappings(
      hNameMappings : HANDLE
   );
   pragma import (C,SHFreeNameMappings,"SHFreeNameMappings");
   type SHNAMEMAPPINGA_x is record
      pszOldPath : LPSTR;
      pszNewPath : LPSTR;
      cchOldPath : Interfaces.C.Int;
      cchNewPath : Interfaces.C.Int;
   end record;
   subtype SHNAMEMAPPINGA is SHNAMEMAPPINGA_x; -- CXType_Elaborated
   type LPSHNAMEMAPPINGA is access SHNAMEMAPPINGA_x; -- CXType_Pointer - CXType_Elaborated
   type SHNAMEMAPPINGW_x is record
      pszOldPath : LPWSTR;
      pszNewPath : LPWSTR;
      cchOldPath : Interfaces.C.Int;
      cchNewPath : Interfaces.C.Int;
   end record;
   subtype SHNAMEMAPPINGW is SHNAMEMAPPINGW_x; -- CXType_Elaborated
   type LPSHNAMEMAPPINGW is access SHNAMEMAPPINGW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SHNAMEMAPPING is SHNAMEMAPPINGA; -- CXType_Typedef
   subtype LPSHNAMEMAPPING is LPSHNAMEMAPPINGA; -- CXType_Typedef
   type SHELLEXECUTEINFOA_x is record
      cbSize : DWORD;
      fMask : ULONG;
      hwnd_x : HWND;
      lpVerb : LPCSTR;
      lpFile : LPCSTR;
      lpParameters : LPCSTR;
      lpDirectory : LPCSTR;
      nShow : Interfaces.C.Int;
      hInstApp : HINSTANCE;
      lpIDList : access Void;
      lpClass : LPCSTR;
      hkeyClass : HKEY;
      dwHotKey : DWORD;
      hProcess : HANDLE;
   end record;
   subtype SHELLEXECUTEINFOA is SHELLEXECUTEINFOA_x; -- CXType_Elaborated
   type LPSHELLEXECUTEINFOA is access SHELLEXECUTEINFOA_x; -- CXType_Pointer - CXType_Elaborated
   type SHELLEXECUTEINFOW_x is record
      cbSize : DWORD;
      fMask : ULONG;
      hwnd_x : HWND;
      lpVerb : LPCWSTR;
      lpFile : LPCWSTR;
      lpParameters : LPCWSTR;
      lpDirectory : LPCWSTR;
      nShow : Interfaces.C.Int;
      hInstApp : HINSTANCE;
      lpIDList : access Void;
      lpClass : LPCWSTR;
      hkeyClass : HKEY;
      dwHotKey : DWORD;
      hProcess : HANDLE;
   end record;
   subtype SHELLEXECUTEINFOW is SHELLEXECUTEINFOW_x; -- CXType_Elaborated
   type LPSHELLEXECUTEINFOW is access SHELLEXECUTEINFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SHELLEXECUTEINFO is SHELLEXECUTEINFOA; -- CXType_Typedef
   subtype LPSHELLEXECUTEINFO is LPSHELLEXECUTEINFOA; -- CXType_Typedef
   function ShellExecuteExA(
      pExecInfo : access SHELLEXECUTEINFOA
   ) return BOOL;
   pragma import (C,ShellExecuteExA,"ShellExecuteExA");
   function ShellExecuteExW(
      pExecInfo : access SHELLEXECUTEINFOW
   ) return BOOL;
   pragma import (C,ShellExecuteExW,"ShellExecuteExW");
   type SHCREATEPROCESSINFOW_x is record
      cbSize : DWORD;
      fMask : ULONG;
      hwnd_x : HWND;
      pszFile : LPCWSTR;
      pszParameters : LPCWSTR;
      pszCurrentDirectory : LPCWSTR;
      hUserToken : HANDLE;
      lpProcessAttributes : LPSECURITY_ATTRIBUTES;
      lpThreadAttributes : LPSECURITY_ATTRIBUTES;
      bInheritHandles : BOOL;
      dwCreationFlags : DWORD;
      lpStartupInfo_x : LPSTARTUPINFOW;
      lpProcessInformation : LPPROCESS_INFORMATION;
   end record;
   subtype SHCREATEPROCESSINFOW is SHCREATEPROCESSINFOW_x; -- CXType_Elaborated
   type PSHCREATEPROCESSINFOW is access SHCREATEPROCESSINFOW_x; -- CXType_Pointer - CXType_Elaborated
   function SHCreateProcessAsUserW(
      pscpi : PSHCREATEPROCESSINFOW
   ) return BOOL;
   pragma import (C,SHCreateProcessAsUserW,"SHCreateProcessAsUserW");
   function SHEvaluateSystemCommandTemplate(
      pszCmdTemplate : PCWSTR;
      ppszApplication : access PWSTR;
      ppszCommandLine : access PWSTR;
      ppszParameters : access PWSTR
   ) return HRESULT;
   pragma import (C,SHEvaluateSystemCommandTemplate,"SHEvaluateSystemCommandTemplate");
   type ASSOCCLASS is (
      ASSOCCLASS_SHELL_KEY,
      ASSOCCLASS_PROGID_KEY,
      ASSOCCLASS_PROGID_STR,
      ASSOCCLASS_CLSID_KEY,
      ASSOCCLASS_CLSID_STR,
      ASSOCCLASS_APP_KEY,
      ASSOCCLASS_APP_STR,
      ASSOCCLASS_SYSTEM_STR,
      ASSOCCLASS_FOLDER,
      ASSOCCLASS_STAR,
      ASSOCCLASS_FIXED_PROGID_STR,
      ASSOCCLASS_PROTOCOL_STR
   );
   for ASSOCCLASS use (
      ASSOCCLASS_SHELL_KEY => 0,
      ASSOCCLASS_PROGID_KEY => 1,
      ASSOCCLASS_PROGID_STR => 2,
      ASSOCCLASS_CLSID_KEY => 3,
      ASSOCCLASS_CLSID_STR => 4,
      ASSOCCLASS_APP_KEY => 5,
      ASSOCCLASS_APP_STR => 6,
      ASSOCCLASS_SYSTEM_STR => 7,
      ASSOCCLASS_FOLDER => 8,
      ASSOCCLASS_STAR => 9,
      ASSOCCLASS_FIXED_PROGID_STR => 10,
      ASSOCCLASS_PROTOCOL_STR => 11
   );
   for ASSOCCLASS'Size use 32;
   type ASSOCIATIONELEMENT is record
      ac : ASSOCCLASS;
      hkClass : HKEY;
      pszClass : PCWSTR;
   end record;
   function AssocCreateForClasses(
      rgClasses : access constant ASSOCIATIONELEMENT;
      cClasses : ULONG;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,AssocCreateForClasses,"AssocCreateForClasses");
   type SHQUERYRBINFO_x is record
      cbSize : DWORD;
      i64Size : Interfaces.C.Extensions.long_long;
      i64NumItems : Interfaces.C.Extensions.long_long;
   end record;
   subtype SHQUERYRBINFO is SHQUERYRBINFO_x; -- CXType_Elaborated
   type LPSHQUERYRBINFO is access SHQUERYRBINFO_x; -- CXType_Pointer - CXType_Elaborated
   function SHQueryRecycleBinA(
      pszRootPath : LPCSTR;
      pSHQueryRBInfo : LPSHQUERYRBINFO
   ) return HRESULT;
   pragma import (C,SHQueryRecycleBinA,"SHQueryRecycleBinA");
   function SHQueryRecycleBinW(
      pszRootPath : LPCWSTR;
      pSHQueryRBInfo : LPSHQUERYRBINFO
   ) return HRESULT;
   pragma import (C,SHQueryRecycleBinW,"SHQueryRecycleBinW");
   function SHEmptyRecycleBinA(
      hwnd_x : HWND;
      pszRootPath : LPCSTR;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,SHEmptyRecycleBinA,"SHEmptyRecycleBinA");
   function SHEmptyRecycleBinW(
      hwnd_x : HWND;
      pszRootPath : LPCWSTR;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,SHEmptyRecycleBinW,"SHEmptyRecycleBinW");
   type QUERY_USER_NOTIFICATION_STATE is (
      QUNS_NOT_PRESENT,
      QUNS_BUSY,
      QUNS_RUNNING_D3D_FULL_SCREEN,
      QUNS_PRESENTATION_MODE,
      QUNS_ACCEPTS_NOTIFICATIONS,
      QUNS_QUIET_TIME,
      QUNS_APP
   );
   for QUERY_USER_NOTIFICATION_STATE use (
      QUNS_NOT_PRESENT => 1,
      QUNS_BUSY => 2,
      QUNS_RUNNING_D3D_FULL_SCREEN => 3,
      QUNS_PRESENTATION_MODE => 4,
      QUNS_ACCEPTS_NOTIFICATIONS => 5,
      QUNS_QUIET_TIME => 6,
      QUNS_APP => 7
   );
   for QUERY_USER_NOTIFICATION_STATE'Size use 32;
   function SHQueryUserNotificationState(
      pquns : access QUERY_USER_NOTIFICATION_STATE
   ) return HRESULT;
   pragma import (C,SHQueryUserNotificationState,"SHQueryUserNotificationState");
   function SHGetPropertyStoreForWindow(
      hwnd_x : HWND;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,SHGetPropertyStoreForWindow,"SHGetPropertyStoreForWindow");
   type NOTIFYICONDATAA_x is record
      cbSize : DWORD;
      hWnd_x : HWND;
      uID : UINT;
      uFlags : UINT;
      uCallbackMessage : UINT;
      hIcon_x : HICON;
      szTip : Void;
      dwState : DWORD;
      dwStateMask : DWORD;
      szInfo : Void;
      szInfoTitle : Void;
      dwInfoFlags : DWORD;
      guidItem : GUID;
      hBalloonIcon : HICON;
   end record;
   subtype NOTIFYICONDATAA is NOTIFYICONDATAA_x; -- CXType_Elaborated
   type PNOTIFYICONDATAA is access NOTIFYICONDATAA_x; -- CXType_Pointer - CXType_Elaborated
   type NOTIFYICONDATAW_x is record
      cbSize : DWORD;
      hWnd_x : HWND;
      uID : UINT;
      uFlags : UINT;
      uCallbackMessage : UINT;
      hIcon_x : HICON;
      szTip : Void;
      dwState : DWORD;
      dwStateMask : DWORD;
      szInfo : Void;
      szInfoTitle : Void;
      dwInfoFlags : DWORD;
      guidItem : GUID;
      hBalloonIcon : HICON;
   end record;
   subtype NOTIFYICONDATAW is NOTIFYICONDATAW_x; -- CXType_Elaborated
   type PNOTIFYICONDATAW is access NOTIFYICONDATAW_x; -- CXType_Pointer - CXType_Elaborated
   subtype NOTIFYICONDATA is NOTIFYICONDATAA; -- CXType_Typedef
   subtype PNOTIFYICONDATA is PNOTIFYICONDATAA; -- CXType_Typedef
   type NOTIFYICONIDENTIFIER_x is record
      cbSize : DWORD;
      hWnd_x : HWND;
      uID : UINT;
      guidItem : GUID;
   end record;
   subtype NOTIFYICONIDENTIFIER is NOTIFYICONIDENTIFIER_x; -- CXType_Elaborated
   type PNOTIFYICONIDENTIFIER is access NOTIFYICONIDENTIFIER_x; -- CXType_Pointer - CXType_Elaborated
   function Shell_NotifyIconA(
      dwMessage : DWORD;
      lpData : PNOTIFYICONDATAA
   ) return BOOL;
   pragma import (C,Shell_NotifyIconA,"Shell_NotifyIconA");
   function Shell_NotifyIconW(
      dwMessage : DWORD;
      lpData : PNOTIFYICONDATAW
   ) return BOOL;
   pragma import (C,Shell_NotifyIconW,"Shell_NotifyIconW");
   function Shell_NotifyIconGetRect(
      identifier : access constant NOTIFYICONIDENTIFIER;
      iconLocation : access RECT
   ) return HRESULT;
   pragma import (C,Shell_NotifyIconGetRect,"Shell_NotifyIconGetRect");
   type SHFILEINFOA_x is record
      hIcon_x : HICON;
      iIcon : Interfaces.C.Int;
      dwAttributes : DWORD;
      szDisplayName : Void;
      szTypeName : Void;
   end record;
   subtype SHFILEINFOA is SHFILEINFOA_x; -- CXType_Elaborated
   type SHFILEINFOW_x is record
      hIcon_x : HICON;
      iIcon : Interfaces.C.Int;
      dwAttributes : DWORD;
      szDisplayName : Void;
      szTypeName : Void;
   end record;
   subtype SHFILEINFOW is SHFILEINFOW_x; -- CXType_Elaborated
   subtype SHFILEINFO is SHFILEINFOA; -- CXType_Typedef
   function SHGetFileInfoA(
      pszPath : LPCSTR;
      dwFileAttributes : DWORD;
      psfi : access SHFILEINFOA;
      cbFileInfo : UINT;
      uFlags : UINT
   ) return DWORD_PTR;
   pragma import (C,SHGetFileInfoA,"SHGetFileInfoA");
   function SHGetFileInfoW(
      pszPath : LPCWSTR;
      dwFileAttributes : DWORD;
      psfi : access SHFILEINFOW;
      cbFileInfo : UINT;
      uFlags : UINT
   ) return DWORD_PTR;
   pragma import (C,SHGetFileInfoW,"SHGetFileInfoW");
   type SHSTOCKICONINFO_x is record
      cbSize : DWORD;
      hIcon_x : HICON;
      iSysImageIndex : Interfaces.C.Int;
      iIcon : Interfaces.C.Int;
      szPath : Void;
   end record;
   subtype SHSTOCKICONINFO is SHSTOCKICONINFO_x; -- CXType_Elaborated
   type SHSTOCKICONID is (
      SIID_DOCNOASSOC,
      SIID_DOCASSOC,
      SIID_APPLICATION,
      SIID_FOLDER,
      SIID_FOLDEROPEN,
      SIID_DRIVE525,
      SIID_DRIVE35,
      SIID_DRIVEREMOVE,
      SIID_DRIVEFIXED,
      SIID_DRIVENET,
      SIID_DRIVENETDISABLED,
      SIID_DRIVECD,
      SIID_DRIVERAM,
      SIID_WORLD,
      SIID_SERVER,
      SIID_PRINTER,
      SIID_MYNETWORK,
      SIID_FIND,
      SIID_HELP,
      SIID_SHARE,
      SIID_LINK,
      SIID_SLOWFILE,
      SIID_RECYCLER,
      SIID_RECYCLERFULL,
      SIID_MEDIACDAUDIO,
      SIID_LOCK,
      SIID_AUTOLIST,
      SIID_PRINTERNET,
      SIID_SERVERSHARE,
      SIID_PRINTERFAX,
      SIID_PRINTERFAXNET,
      SIID_PRINTERFILE,
      SIID_STACK,
      SIID_MEDIASVCD,
      SIID_STUFFEDFOLDER,
      SIID_DRIVEUNKNOWN,
      SIID_DRIVEDVD,
      SIID_MEDIADVD,
      SIID_MEDIADVDRAM,
      SIID_MEDIADVDRW,
      SIID_MEDIADVDR,
      SIID_MEDIADVDROM,
      SIID_MEDIACDAUDIOPLUS,
      SIID_MEDIACDRW,
      SIID_MEDIACDR,
      SIID_MEDIACDBURN,
      SIID_MEDIABLANKCD,
      SIID_MEDIACDROM,
      SIID_AUDIOFILES,
      SIID_IMAGEFILES,
      SIID_VIDEOFILES,
      SIID_MIXEDFILES,
      SIID_FOLDERBACK,
      SIID_FOLDERFRONT,
      SIID_SHIELD,
      SIID_WARNING,
      SIID_INFO,
      SIID_ERROR,
      SIID_KEY,
      SIID_SOFTWARE,
      SIID_RENAME,
      SIID_DELETE,
      SIID_MEDIAAUDIODVD,
      SIID_MEDIAMOVIEDVD,
      SIID_MEDIAENHANCEDCD,
      SIID_MEDIAENHANCEDDVD,
      SIID_MEDIAHDDVD,
      SIID_MEDIABLURAY,
      SIID_MEDIAVCD,
      SIID_MEDIADVDPLUSR,
      SIID_MEDIADVDPLUSRW,
      SIID_DESKTOPPC,
      SIID_MOBILEPC,
      SIID_USERS,
      SIID_MEDIASMARTMEDIA,
      SIID_MEDIACOMPACTFLASH,
      SIID_DEVICECELLPHONE,
      SIID_DEVICECAMERA,
      SIID_DEVICEVIDEOCAMERA,
      SIID_DEVICEAUDIOPLAYER,
      SIID_NETWORKCONNECT,
      SIID_INTERNET,
      SIID_ZIPFILE,
      SIID_SETTINGS,
      SIID_DRIVEHDDVD,
      SIID_DRIVEBD,
      SIID_MEDIAHDDVDROM,
      SIID_MEDIAHDDVDR,
      SIID_MEDIAHDDVDRAM,
      SIID_MEDIABDROM,
      SIID_MEDIABDR,
      SIID_MEDIABDRE,
      SIID_CLUSTEREDDRIVE,
      SIID_MAX_ICONS
   );
   for SHSTOCKICONID use (
      SIID_DOCNOASSOC => 0,
      SIID_DOCASSOC => 1,
      SIID_APPLICATION => 2,
      SIID_FOLDER => 3,
      SIID_FOLDEROPEN => 4,
      SIID_DRIVE525 => 5,
      SIID_DRIVE35 => 6,
      SIID_DRIVEREMOVE => 7,
      SIID_DRIVEFIXED => 8,
      SIID_DRIVENET => 9,
      SIID_DRIVENETDISABLED => 10,
      SIID_DRIVECD => 11,
      SIID_DRIVERAM => 12,
      SIID_WORLD => 13,
      SIID_SERVER => 15,
      SIID_PRINTER => 16,
      SIID_MYNETWORK => 17,
      SIID_FIND => 22,
      SIID_HELP => 23,
      SIID_SHARE => 28,
      SIID_LINK => 29,
      SIID_SLOWFILE => 30,
      SIID_RECYCLER => 31,
      SIID_RECYCLERFULL => 32,
      SIID_MEDIACDAUDIO => 40,
      SIID_LOCK => 47,
      SIID_AUTOLIST => 49,
      SIID_PRINTERNET => 50,
      SIID_SERVERSHARE => 51,
      SIID_PRINTERFAX => 52,
      SIID_PRINTERFAXNET => 53,
      SIID_PRINTERFILE => 54,
      SIID_STACK => 55,
      SIID_MEDIASVCD => 56,
      SIID_STUFFEDFOLDER => 57,
      SIID_DRIVEUNKNOWN => 58,
      SIID_DRIVEDVD => 59,
      SIID_MEDIADVD => 60,
      SIID_MEDIADVDRAM => 61,
      SIID_MEDIADVDRW => 62,
      SIID_MEDIADVDR => 63,
      SIID_MEDIADVDROM => 64,
      SIID_MEDIACDAUDIOPLUS => 65,
      SIID_MEDIACDRW => 66,
      SIID_MEDIACDR => 67,
      SIID_MEDIACDBURN => 68,
      SIID_MEDIABLANKCD => 69,
      SIID_MEDIACDROM => 70,
      SIID_AUDIOFILES => 71,
      SIID_IMAGEFILES => 72,
      SIID_VIDEOFILES => 73,
      SIID_MIXEDFILES => 74,
      SIID_FOLDERBACK => 75,
      SIID_FOLDERFRONT => 76,
      SIID_SHIELD => 77,
      SIID_WARNING => 78,
      SIID_INFO => 79,
      SIID_ERROR => 80,
      SIID_KEY => 81,
      SIID_SOFTWARE => 82,
      SIID_RENAME => 83,
      SIID_DELETE => 84,
      SIID_MEDIAAUDIODVD => 85,
      SIID_MEDIAMOVIEDVD => 86,
      SIID_MEDIAENHANCEDCD => 87,
      SIID_MEDIAENHANCEDDVD => 88,
      SIID_MEDIAHDDVD => 89,
      SIID_MEDIABLURAY => 90,
      SIID_MEDIAVCD => 91,
      SIID_MEDIADVDPLUSR => 92,
      SIID_MEDIADVDPLUSRW => 93,
      SIID_DESKTOPPC => 94,
      SIID_MOBILEPC => 95,
      SIID_USERS => 96,
      SIID_MEDIASMARTMEDIA => 97,
      SIID_MEDIACOMPACTFLASH => 98,
      SIID_DEVICECELLPHONE => 99,
      SIID_DEVICECAMERA => 100,
      SIID_DEVICEVIDEOCAMERA => 101,
      SIID_DEVICEAUDIOPLAYER => 102,
      SIID_NETWORKCONNECT => 103,
      SIID_INTERNET => 104,
      SIID_ZIPFILE => 105,
      SIID_SETTINGS => 106,
      SIID_DRIVEHDDVD => 132,
      SIID_DRIVEBD => 133,
      SIID_MEDIAHDDVDROM => 134,
      SIID_MEDIAHDDVDR => 135,
      SIID_MEDIAHDDVDRAM => 136,
      SIID_MEDIABDROM => 137,
      SIID_MEDIABDR => 138,
      SIID_MEDIABDRE => 139,
      SIID_CLUSTEREDDRIVE => 140,
      SIID_MAX_ICONS => 181
   );
   for SHSTOCKICONID'Size use 32;
   function SHGetStockIconInfo(
      siid : SHSTOCKICONID;
      uFlags : UINT;
      psii : access SHSTOCKICONINFO
   ) return HRESULT;
   pragma import (C,SHGetStockIconInfo,"SHGetStockIconInfo");
   function SHGetDiskFreeSpaceExA(
      pszDirectoryName : LPCSTR;
      pulFreeBytesAvailableToCaller : access ULARGE_INTEGER;
      pulTotalNumberOfBytes : access ULARGE_INTEGER;
      pulTotalNumberOfFreeBytes : access ULARGE_INTEGER
   ) return BOOL;
   pragma import (C,SHGetDiskFreeSpaceExA,"SHGetDiskFreeSpaceExA");
   function SHGetDiskFreeSpaceExW(
      pszDirectoryName : LPCWSTR;
      pulFreeBytesAvailableToCaller : access ULARGE_INTEGER;
      pulTotalNumberOfBytes : access ULARGE_INTEGER;
      pulTotalNumberOfFreeBytes : access ULARGE_INTEGER
   ) return BOOL;
   pragma import (C,SHGetDiskFreeSpaceExW,"SHGetDiskFreeSpaceExW");
   function SHGetNewLinkInfoA(
      pszLinkTo : LPCSTR;
      pszDir : LPCSTR;
      pszName : LPSTR;
      pfMustCopy : access BOOL;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,SHGetNewLinkInfoA,"SHGetNewLinkInfoA");
   function SHGetNewLinkInfoW(
      pszLinkTo : LPCWSTR;
      pszDir : LPCWSTR;
      pszName : LPWSTR;
      pfMustCopy : access BOOL;
      uFlags : UINT
   ) return BOOL;
   pragma import (C,SHGetNewLinkInfoW,"SHGetNewLinkInfoW");
   function SHInvokePrinterCommandA(
      hwnd_x : HWND;
      uAction : UINT;
      lpBuf1 : LPCSTR;
      lpBuf2 : LPCSTR;
      fModal : BOOL
   ) return BOOL;
   pragma import (C,SHInvokePrinterCommandA,"SHInvokePrinterCommandA");
   function SHInvokePrinterCommandW(
      hwnd_x : HWND;
      uAction : UINT;
      lpBuf1 : LPCWSTR;
      lpBuf2 : LPCWSTR;
      fModal : BOOL
   ) return BOOL;
   pragma import (C,SHInvokePrinterCommandW,"SHInvokePrinterCommandW");
   type OPEN_PRINTER_PROPS_INFOA_x is record
      dwSize : DWORD;
      pszSheetName : LPSTR;
      uSheetIndex : UINT;
      dwFlags : DWORD;
      bModal : BOOL;
   end record;
   subtype OPEN_PRINTER_PROPS_INFOA is OPEN_PRINTER_PROPS_INFOA_x; -- CXType_Elaborated
   type POPEN_PRINTER_PROPS_INFOA is access OPEN_PRINTER_PROPS_INFOA_x; -- CXType_Pointer - CXType_Elaborated
   type OPEN_PRINTER_PROPS_INFOW_x is record
      dwSize : DWORD;
      pszSheetName : LPWSTR;
      uSheetIndex : UINT;
      dwFlags : DWORD;
      bModal : BOOL;
   end record;
   subtype OPEN_PRINTER_PROPS_INFOW is OPEN_PRINTER_PROPS_INFOW_x; -- CXType_Elaborated
   type POPEN_PRINTER_PROPS_INFOW is access OPEN_PRINTER_PROPS_INFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype OPEN_PRINTER_PROPS_INFO is OPEN_PRINTER_PROPS_INFOA; -- CXType_Typedef
   subtype POPEN_PRINTER_PROPS_INFO is POPEN_PRINTER_PROPS_INFOA; -- CXType_Typedef
   function SHLoadNonloadedIconOverlayIdentifiers return HRESULT;
   pragma import (C,SHLoadNonloadedIconOverlayIdentifiers,"SHLoadNonloadedIconOverlayIdentifiers");
   function SHIsFileAvailableOffline(
      pwszPath : PCWSTR;
      pdwStatus : access DWORD
   ) return HRESULT;
   pragma import (C,SHIsFileAvailableOffline,"SHIsFileAvailableOffline");
   function SHSetLocalizedName(
      pszPath : PCWSTR;
      pszResModule : PCWSTR;
      idsRes : Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,SHSetLocalizedName,"SHSetLocalizedName");
   function SHRemoveLocalizedName(
      pszPath : PCWSTR
   ) return HRESULT;
   pragma import (C,SHRemoveLocalizedName,"SHRemoveLocalizedName");
   function SHGetLocalizedName(
      pszPath : PCWSTR;
      pszResModule : PWSTR;
      cch : UINT;
      pidsRes : access Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,SHGetLocalizedName,"SHGetLocalizedName");
   -- ShellMessageBoxA(...); -- variadic function not supported
   -- ShellMessageBoxW(...); -- variadic function not supported
   function IsLFNDriveA(
      pszPath : LPCSTR
   ) return BOOL;
   pragma import (C,IsLFNDriveA,"IsLFNDriveA");
   function IsLFNDriveW(
      pszPath : LPCWSTR
   ) return BOOL;
   pragma import (C,IsLFNDriveW,"IsLFNDriveW");
   function SHEnumerateUnreadMailAccountsA(
      hKeyUser : HKEY;
      dwIndex : DWORD;
      pszMailAddress : LPSTR;
      cchMailAddress : Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,SHEnumerateUnreadMailAccountsA,"SHEnumerateUnreadMailAccountsA");
   function SHEnumerateUnreadMailAccountsW(
      hKeyUser : HKEY;
      dwIndex : DWORD;
      pszMailAddress : LPWSTR;
      cchMailAddress : Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,SHEnumerateUnreadMailAccountsW,"SHEnumerateUnreadMailAccountsW");
   function SHGetUnreadMailCountA(
      hKeyUser : HKEY;
      pszMailAddress : LPCSTR;
      pdwCount : access DWORD;
      pFileTime_x : access FILETIME;
      pszShellExecuteCommand : LPSTR;
      cchShellExecuteCommand : Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,SHGetUnreadMailCountA,"SHGetUnreadMailCountA");
   function SHGetUnreadMailCountW(
      hKeyUser : HKEY;
      pszMailAddress : LPCWSTR;
      pdwCount : access DWORD;
      pFileTime_x : access FILETIME;
      pszShellExecuteCommand : LPWSTR;
      cchShellExecuteCommand : Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,SHGetUnreadMailCountW,"SHGetUnreadMailCountW");
   function SHSetUnreadMailCountA(
      pszMailAddress : LPCSTR;
      dwCount : DWORD;
      pszShellExecuteCommand : LPCSTR
   ) return HRESULT;
   pragma import (C,SHSetUnreadMailCountA,"SHSetUnreadMailCountA");
   function SHSetUnreadMailCountW(
      pszMailAddress : LPCWSTR;
      dwCount : DWORD;
      pszShellExecuteCommand : LPCWSTR
   ) return HRESULT;
   pragma import (C,SHSetUnreadMailCountW,"SHSetUnreadMailCountW");
   function SHTestTokenMembership(
      hToken : HANDLE;
      ulRID : ULONG
   ) return BOOL;
   pragma import (C,SHTestTokenMembership,"SHTestTokenMembership");
   function SHGetImageList(
      iImageList : Interfaces.C.Int;
      riid : access constant IID;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,SHGetImageList,"SHGetImageList");
   subtype PFNCANSHAREFOLDERW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] HRESULT (PCWSTR)
   subtype PFNSHOWSHAREFOLDERUIW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] HRESULT (HWND, PCWSTR)
   function InitNetworkAddressControl return BOOL;
   pragma import (C,InitNetworkAddressControl,"InitNetworkAddressControl");
   type tagNC_ADDRESS is record
      pAddrInfo : access Void;
      PortNumber : USHORT;
      PrefixLength : BYTE;
   end record;
   type NET_ADDRESS_INFO_x; -- Forward Declaration
   subtype NC_ADDRESS is tagNC_ADDRESS; -- CXType_Elaborated
   type PNC_ADDRESS is access tagNC_ADDRESS; -- CXType_Pointer - CXType_Elaborated
   function SHGetDriveMedia(
      pszDrive : PCWSTR;
      pdwMediaContent : access DWORD
   ) return HRESULT;
   pragma import (C,SHGetDriveMedia,"SHGetDriveMedia");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winperf.h>
   type PERF_DATA_BLOCK_x is record
      Signature : Void;
      LittleEndian : DWORD;
      Version : DWORD;
      Revision : DWORD;
      TotalByteLength : DWORD;
      HeaderLength : DWORD;
      NumObjectTypes : DWORD;
      DefaultObject : LONG;
      SystemTime_x : SYSTEMTIME;
      PerfTime : LARGE_INTEGER;
      PerfFreq : LARGE_INTEGER;
      PerfTime100nSec : LARGE_INTEGER;
      SystemNameLength : DWORD;
      SystemNameOffset : DWORD;
   end record;
   subtype PERF_DATA_BLOCK is PERF_DATA_BLOCK_x; -- CXType_Elaborated
   type PPERF_DATA_BLOCK is access PERF_DATA_BLOCK_x; -- CXType_Pointer - CXType_Elaborated
   type PERF_OBJECT_TYPE_x is record
      TotalByteLength : DWORD;
      DefinitionLength : DWORD;
      HeaderLength : DWORD;
      ObjectNameTitleIndex : DWORD;
      ObjectNameTitle : DWORD;
      ObjectHelpTitleIndex : DWORD;
      ObjectHelpTitle : DWORD;
      DetailLevel : DWORD;
      NumCounters : DWORD;
      DefaultCounter : LONG;
      NumInstances : LONG;
      CodePage : DWORD;
      PerfTime : LARGE_INTEGER;
      PerfFreq : LARGE_INTEGER;
   end record;
   subtype PERF_OBJECT_TYPE is PERF_OBJECT_TYPE_x; -- CXType_Elaborated
   type PPERF_OBJECT_TYPE is access PERF_OBJECT_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type PERF_COUNTER_DEFINITION_x is record
      ByteLength : DWORD;
      CounterNameTitleIndex : DWORD;
      CounterNameTitle : DWORD;
      CounterHelpTitleIndex : DWORD;
      CounterHelpTitle : DWORD;
      DefaultScale : LONG;
      DetailLevel : DWORD;
      CounterType : DWORD;
      CounterSize : DWORD;
      CounterOffset : DWORD;
   end record;
   subtype PERF_COUNTER_DEFINITION is PERF_COUNTER_DEFINITION_x; -- CXType_Elaborated
   type PPERF_COUNTER_DEFINITION is access PERF_COUNTER_DEFINITION_x; -- CXType_Pointer - CXType_Elaborated
   type PERF_INSTANCE_DEFINITION_x is record
      ByteLength : DWORD;
      ParentObjectTitleIndex : DWORD;
      ParentObjectInstance : DWORD;
      UniqueID : LONG;
      NameOffset : DWORD;
      NameLength : DWORD;
   end record;
   subtype PERF_INSTANCE_DEFINITION is PERF_INSTANCE_DEFINITION_x; -- CXType_Elaborated
   type PPERF_INSTANCE_DEFINITION is access PERF_INSTANCE_DEFINITION_x; -- CXType_Pointer - CXType_Elaborated
   type PERF_COUNTER_BLOCK_x is record
      ByteLength : DWORD;
   end record;
   subtype PERF_COUNTER_BLOCK is PERF_COUNTER_BLOCK_x; -- CXType_Elaborated
   type PPERF_COUNTER_BLOCK is access PERF_COUNTER_BLOCK_x; -- CXType_Pointer - CXType_Elaborated
   subtype PM_OPEN_PROC is System.Address; -- [FIXME - CXType_Unexposed]
   subtype PM_COLLECT_PROC is System.Address; -- [FIXME - CXType_Unexposed]
   subtype PM_CLOSE_PROC is System.Address; -- [FIXME - CXType_Unexposed]
   subtype PM_QUERY_PROC is System.Address; -- [FIXME - CXType_Unexposed]
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winsock.h>
   subtype u_char is Interfaces.C.unsigned_char; -- CXType_UChar
   subtype u_short is Interfaces.C.unsigned_short; -- CXType_UShort
   subtype u_int is Interfaces.C.unsigned; -- CXType_UInt
   subtype u_long is Interfaces.C.unsigned_long; -- CXType_ULong
   subtype SOCKET is UINT_PTR; -- CXType_Typedef
   type fd_set is record
      fd_count : u_int;
      fd_array : Void;
   end record;
   function WSAFDIsSet(
      param1 : SOCKET;
      param2 : access fd_set
   ) return Interfaces.C.Int;
   pragma import (C,WSAFDIsSet,"__WSAFDIsSet");
   type timeval is record
      tv_sec : Interfaces.C.Long;
      tv_usec : Interfaces.C.Long;
   end record;
   type hostent is record
      h_name : access Character;
      h_aliases : access va_list;
      h_addrtype : Interfaces.C.Short;
      h_length : Interfaces.C.Short;
      h_addr_list : access va_list;
   end record;
   type netent is record
      n_name : access Character;
      n_aliases : access va_list;
      n_addrtype : Interfaces.C.Short;
      n_net : u_long;
   end record;
   type servent is record
      s_name : access Character;
      s_aliases : access va_list;
      s_proto : access Character;
      s_port : Interfaces.C.Short;
   end record;
   type protoent is record
      p_name : access Character;
      p_aliases : access va_list;
      p_proto : Interfaces.C.Short;
   end record;
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\inaddr.h>
   type in_addr is record
      S_un : Void;
   end record;
   -- subtype IN_ADDR is in_addr; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PIN_ADDR is access in_addr; -- CXType_Pointer - CXType_Elaborated
   type LPIN_ADDR is access in_addr; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winsock.h>
   type sockaddr_in is record
      sin_family : Interfaces.C.Short;
      sin_port : u_short;
      sin_addr : Void;
      sin_zero : Void;
   end record;
   type WSAData is record
      wVersion : WORD;
      wHighVersion : WORD;
      iMaxSockets : Interfaces.C.unsigned_short;
      iMaxUdpDg : Interfaces.C.unsigned_short;
      lpVendorInfo : access Character;
      szDescription : Void;
      szSystemStatus : Void;
   end record;
   -- subtype WSADATA is WSAData; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type LPWSADATA is access WSADATA; -- CXType_Pointer - CXType_Typedef
   type ip_mreq is record
      imr_multiaddr : Void;
      imr_interface : Void;
   end record;
   type sockaddr is record
      sa_family : u_short;
      sa_data : Void;
   end record;
   type sockproto is record
      sp_family : u_short;
      sp_protocol : u_short;
   end record;
   type linger is record
      l_onoff : u_short;
      l_linger : u_short;
   end record;
   function accept_x(
      s : SOCKET;
      addr : access Void;
      addrlen : access Interfaces.C.Int
   ) return SOCKET;
   pragma import (C,accept_x,"accept");
   function bind(
      s : SOCKET;
      addr : access Void;
      namelen : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,bind,"bind");
   function closesocket(
      s : SOCKET
   ) return Interfaces.C.Int;
   pragma import (C,closesocket,"closesocket");
   function connect(
      s : SOCKET;
      name : access Void;
      namelen : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,connect,"connect");
   function ioctlsocket(
      s : SOCKET;
      cmd : Interfaces.C.Long;
      argp : access u_long
   ) return Interfaces.C.Int;
   pragma import (C,ioctlsocket,"ioctlsocket");
   function getpeername(
      s : SOCKET;
      name : access Void;
      namelen : access Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,getpeername,"getpeername");
   function getsockname(
      s : SOCKET;
      name : access Void;
      namelen : access Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,getsockname,"getsockname");
   function getsockopt(
      s : SOCKET;
      level : Interfaces.C.Int;
      optname : Interfaces.C.Int;
      optval : access Character;
      optlen : access Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,getsockopt,"getsockopt");
   function htonl(
      hostlong : u_long
   ) return u_long;
   pragma import (C,htonl,"htonl");
   function htons(
      hostshort : u_short
   ) return u_short;
   pragma import (C,htons,"htons");
   function inet_addr(
      cp : access Character
   ) return Interfaces.C.unsigned_long;
   pragma import (C,inet_addr,"inet_addr");
   function listen(
      s : SOCKET;
      backlog : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,listen,"listen");
   function ntohl(
      netlong : u_long
   ) return u_long;
   pragma import (C,ntohl,"ntohl");
   function ntohs(
      netshort : u_short
   ) return u_short;
   pragma import (C,ntohs,"ntohs");
   function recv(
      s : SOCKET;
      buf : access Character;
      len : Interfaces.C.Int;
      flags : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,recv,"recv");
   function recvfrom(
      s : SOCKET;
      buf : access Character;
      len : Interfaces.C.Int;
      flags : Interfaces.C.Int;
      from : access Void;
      fromlen : access Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,recvfrom,"recvfrom");
   function select_x(
      nfds : Interfaces.C.Int;
      readfds : access fd_set;
      writefds : access fd_set;
      exceptfds : access fd_set;
      timeout : access Void
   ) return Interfaces.C.Int;
   pragma import (C,select_x,"select");
   function send(
      s : SOCKET;
      buf : access Character;
      len : Interfaces.C.Int;
      flags : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,send,"send");
   function sendto(
      s : SOCKET;
      buf : access Character;
      len : Interfaces.C.Int;
      flags : Interfaces.C.Int;
      to : access Void;
      tolen : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,sendto,"sendto");
   function setsockopt(
      s : SOCKET;
      level : Interfaces.C.Int;
      optname : Interfaces.C.Int;
      optval : access Character;
      optlen : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,setsockopt,"setsockopt");
   function shutdown(
      s : SOCKET;
      how : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,shutdown,"shutdown");
   function socket_x(
      af : Interfaces.C.Int;
      type_x : Interfaces.C.Int;
      protocol : Interfaces.C.Int
   ) return SOCKET;
   pragma import (C,socket_x,"socket");
   function gethostname(
      name : access Character;
      namelen : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,gethostname,"gethostname");
   function WSAStartup(
      wVersionRequired : WORD;
      lpWSAData_x : LPWSADATA
   ) return Interfaces.C.Int;
   pragma import (C,WSAStartup,"WSAStartup");
   function WSACleanup return Interfaces.C.Int;
   pragma import (C,WSACleanup,"WSACleanup");
   procedure WSASetLastError(
      iError : Interfaces.C.Int
   );
   pragma import (C,WSASetLastError,"WSASetLastError");
   function WSAGetLastError return Interfaces.C.Int;
   pragma import (C,WSAGetLastError,"WSAGetLastError");
   function WSAIsBlocking return BOOL;
   pragma import (C,WSAIsBlocking,"WSAIsBlocking");
   function WSAUnhookBlockingHook return Interfaces.C.Int;
   pragma import (C,WSAUnhookBlockingHook,"WSAUnhookBlockingHook");
   function WSASetBlockingHook(
      lpBlockFunc : FARPROC
   ) return FARPROC;
   pragma import (C,WSASetBlockingHook,"WSASetBlockingHook");
   function WSACancelBlockingCall return Interfaces.C.Int;
   pragma import (C,WSACancelBlockingCall,"WSACancelBlockingCall");
   function WSAAsyncGetServByName(
      hWnd_x : HWND;
      wMsg : u_int;
      name : access Character;
      proto : access Character;
      buf : access Character;
      buflen : Interfaces.C.Int
   ) return HANDLE;
   pragma import (C,WSAAsyncGetServByName,"WSAAsyncGetServByName");
   function WSAAsyncGetServByPort(
      hWnd_x : HWND;
      wMsg : u_int;
      port : Interfaces.C.Int;
      proto : access Character;
      buf : access Character;
      buflen : Interfaces.C.Int
   ) return HANDLE;
   pragma import (C,WSAAsyncGetServByPort,"WSAAsyncGetServByPort");
   function WSAAsyncGetProtoByName(
      hWnd_x : HWND;
      wMsg : u_int;
      name : access Character;
      buf : access Character;
      buflen : Interfaces.C.Int
   ) return HANDLE;
   pragma import (C,WSAAsyncGetProtoByName,"WSAAsyncGetProtoByName");
   function WSAAsyncGetProtoByNumber(
      hWnd_x : HWND;
      wMsg : u_int;
      number : Interfaces.C.Int;
      buf : access Character;
      buflen : Interfaces.C.Int
   ) return HANDLE;
   pragma import (C,WSAAsyncGetProtoByNumber,"WSAAsyncGetProtoByNumber");
   function WSAAsyncGetHostByName(
      hWnd_x : HWND;
      wMsg : u_int;
      name : access Character;
      buf : access Character;
      buflen : Interfaces.C.Int
   ) return HANDLE;
   pragma import (C,WSAAsyncGetHostByName,"WSAAsyncGetHostByName");
   function WSAAsyncGetHostByAddr(
      hWnd_x : HWND;
      wMsg : u_int;
      addr : access Character;
      len : Interfaces.C.Int;
      type_x : Interfaces.C.Int;
      buf : access Character;
      buflen : Interfaces.C.Int
   ) return HANDLE;
   pragma import (C,WSAAsyncGetHostByAddr,"WSAAsyncGetHostByAddr");
   function WSACancelAsyncRequest(
      hAsyncTaskHandle : HANDLE
   ) return Interfaces.C.Int;
   pragma import (C,WSACancelAsyncRequest,"WSACancelAsyncRequest");
   function WSAAsyncSelect(
      s : SOCKET;
      hWnd_x : HWND;
      wMsg : u_int;
      lEvent : Interfaces.C.Long
   ) return Interfaces.C.Int;
   pragma import (C,WSAAsyncSelect,"WSAAsyncSelect");
   function WSARecvEx(
      s : SOCKET;
      buf : access Character;
      len : Interfaces.C.Int;
      flags : access Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,WSARecvEx,"WSARecvEx");
   type TRANSMIT_FILE_BUFFERS_x is record
      Head : PVOID;
      HeadLength : DWORD;
      Tail : PVOID;
      TailLength : DWORD;
   end record;
   subtype TRANSMIT_FILE_BUFFERS is TRANSMIT_FILE_BUFFERS_x; -- CXType_Elaborated
   type PTRANSMIT_FILE_BUFFERS is access TRANSMIT_FILE_BUFFERS_x; -- CXType_Pointer - CXType_Elaborated
   type LPTRANSMIT_FILE_BUFFERS is access TRANSMIT_FILE_BUFFERS_x; -- CXType_Pointer - CXType_Elaborated
   function TransmitFile(
      hSocket : SOCKET;
      hFile_x : HANDLE;
      nNumberOfBytesToWrite : DWORD;
      nNumberOfBytesPerSend : DWORD;
      lpOverlapped_x : LPOVERLAPPED;
      lpTransmitBuffers : LPTRANSMIT_FILE_BUFFERS;
      dwReserved : DWORD
   ) return BOOL;
   pragma import (C,TransmitFile,"TransmitFile");
   function AcceptEx(
      sListenSocket : SOCKET;
      sAcceptSocket : SOCKET;
      lpOutputBuffer : PVOID;
      dwReceiveDataLength : DWORD;
      dwLocalAddressLength : DWORD;
      dwRemoteAddressLength : DWORD;
      lpdwBytesReceived : LPDWORD;
      lpOverlapped_x : LPOVERLAPPED
   ) return BOOL;
   pragma import (C,AcceptEx,"AcceptEx");
   procedure GetAcceptExSockaddrs(
      lpOutputBuffer : PVOID;
      dwReceiveDataLength : DWORD;
      dwLocalAddressLength : DWORD;
      dwRemoteAddressLength : DWORD;
      LocalSockaddr : access LPVOID;
      LocalSockaddrLength : LPINT;
      RemoteSockaddr : access LPVOID;
      RemoteSockaddrLength : LPINT
   );
   pragma import (C,GetAcceptExSockaddrs,"GetAcceptExSockaddrs");
   -- subtype SOCKADDR is sockaddr; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PSOCKADDR is access sockaddr; -- CXType_Pointer - CXType_Elaborated
   type LPSOCKADDR is access sockaddr; -- CXType_Pointer - CXType_Elaborated
   -- subtype SOCKADDR_IN is sockaddr_in; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PSOCKADDR_IN is access sockaddr_in; -- CXType_Pointer - CXType_Elaborated
   type LPSOCKADDR_IN is access sockaddr_in; -- CXType_Pointer - CXType_Elaborated
   -- subtype LINGER is linger; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PLINGER is access linger; -- CXType_Pointer - CXType_Elaborated
   type LPLINGER is access linger; -- CXType_Pointer - CXType_Elaborated
   -- subtype FD_SET is fd_set; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PFD_SET is access fd_set; -- CXType_Pointer - CXType_Elaborated
   type LPFD_SET is access fd_set; -- CXType_Pointer - CXType_Elaborated
   -- subtype HOSTENT is hostent; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PHOSTENT is access hostent; -- CXType_Pointer - CXType_Elaborated
   type LPHOSTENT is access hostent; -- CXType_Pointer - CXType_Elaborated
   -- subtype SERVENT is servent; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PSERVENT is access servent; -- CXType_Pointer - CXType_Elaborated
   type LPSERVENT is access servent; -- CXType_Pointer - CXType_Elaborated
   -- subtype PROTOENT is protoent; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PPROTOENT is access protoent; -- CXType_Pointer - CXType_Elaborated
   type LPPROTOENT is access protoent; -- CXType_Pointer - CXType_Elaborated
   -- subtype TIMEVAL is timeval; -- CXType_Elaborated [Note: Type already defined (case sensitive issue)]
   type PTIMEVAL is access timeval; -- CXType_Pointer - CXType_Elaborated
   type LPTIMEVAL is access timeval; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\wincrypt.h>
   subtype ALG_ID is Interfaces.C.unsigned; -- CXType_UInt
   subtype HCRYPTPROV is ULONG_PTR; -- CXType_Typedef
   subtype HCRYPTKEY is ULONG_PTR; -- CXType_Typedef
   subtype HCRYPTHASH is ULONG_PTR; -- CXType_Typedef
   type CMS_KEY_INFO_x is record
      dwVersion : DWORD;
      Algid : ALG_ID;
      pbOID : access BYTE;
      cbOID : DWORD;
   end record;
   subtype CMS_KEY_INFO is CMS_KEY_INFO_x; -- CXType_Elaborated
   type PCMS_KEY_INFO is access CMS_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type HMAC_Info_x is record
      HashAlgid : ALG_ID;
      pbInnerString : access BYTE;
      cbInnerString : DWORD;
      pbOuterString : access BYTE;
      cbOuterString : DWORD;
   end record;
   subtype HMAC_INFO is HMAC_Info_x; -- CXType_Elaborated
   type PHMAC_INFO is access HMAC_Info_x; -- CXType_Pointer - CXType_Elaborated
   type SCHANNEL_ALG_x is record
      dwUse : DWORD;
      Algid : ALG_ID;
      cBits : DWORD;
      dwFlags : DWORD;
      dwReserved : DWORD;
   end record;
   subtype SCHANNEL_ALG is SCHANNEL_ALG_x; -- CXType_Elaborated
   type PSCHANNEL_ALG is access SCHANNEL_ALG_x; -- CXType_Pointer - CXType_Elaborated
   type PROV_ENUMALGS_x is record
      aiAlgid : ALG_ID;
      dwBitLen : DWORD;
      dwNameLen : DWORD;
      szName : Void;
   end record;
   subtype PROV_ENUMALGS is PROV_ENUMALGS_x; -- CXType_Elaborated
   type PROV_ENUMALGS_EX_x is record
      aiAlgid : ALG_ID;
      dwDefaultLen : DWORD;
      dwMinLen : DWORD;
      dwMaxLen : DWORD;
      dwProtocols : DWORD;
      dwNameLen : DWORD;
      szName : Void;
      dwLongNameLen : DWORD;
      szLongName : Void;
   end record;
   subtype PROV_ENUMALGS_EX is PROV_ENUMALGS_EX_x; -- CXType_Elaborated
   type PUBLICKEYSTRUC_x is record
      bType : BYTE;
      bVersion : BYTE;
      reserved : WORD;
      aiKeyAlg : ALG_ID;
   end record;
   subtype BLOBHEADER is PUBLICKEYSTRUC_x; -- CXType_Elaborated
   subtype PUBLICKEYSTRUC is PUBLICKEYSTRUC_x; -- CXType_Elaborated
   type RSAPUBKEY_x is record
      magic : DWORD;
      bitlen : DWORD;
      pubexp : DWORD;
   end record;
   subtype RSAPUBKEY is RSAPUBKEY_x; -- CXType_Elaborated
   type PUBKEY_x is record
      magic : DWORD;
      bitlen : DWORD;
   end record;
   subtype DHPUBKEY is PUBKEY_x; -- CXType_Elaborated
   subtype DSSPUBKEY is PUBKEY_x; -- CXType_Elaborated
   subtype KEAPUBKEY is PUBKEY_x; -- CXType_Elaborated
   subtype TEKPUBKEY is PUBKEY_x; -- CXType_Elaborated
   type DSSSEED_x is record
      counter : DWORD;
      seed : Void;
   end record;
   subtype DSSSEED is DSSSEED_x; -- CXType_Elaborated
   type PUBKEYVER3_x is record
      magic : DWORD;
      bitlenP : DWORD;
      bitlenQ : DWORD;
      bitlenJ : DWORD;
      DSSSeed_x : DSSSEED;
   end record;
   subtype DHPUBKEY_VER3 is PUBKEYVER3_x; -- CXType_Elaborated
   subtype DSSPUBKEY_VER3 is PUBKEYVER3_x; -- CXType_Elaborated
   type PRIVKEYVER3_x is record
      magic : DWORD;
      bitlenP : DWORD;
      bitlenQ : DWORD;
      bitlenJ : DWORD;
      bitlenX : DWORD;
      DSSSeed_x : DSSSEED;
   end record;
   subtype DHPRIVKEY_VER3 is PRIVKEYVER3_x; -- CXType_Elaborated
   subtype DSSPRIVKEY_VER3 is PRIVKEYVER3_x; -- CXType_Elaborated
   type KEY_TYPE_SUBTYPE_x is record
      dwKeySpec : DWORD;
      type_x : GUID;
      subtype_x : GUID;
   end record;
   subtype KEY_TYPE_SUBTYPE is KEY_TYPE_SUBTYPE_x; -- CXType_Elaborated
   type PKEY_TYPE_SUBTYPE is access KEY_TYPE_SUBTYPE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_FORTEZZA_DATA_PROP_x is record
      SerialNumber : Void;
      CertIndex : Interfaces.C.Int;
      CertLabel : Void;
   end record;
   subtype CERT_FORTEZZA_DATA_PROP is CERT_FORTEZZA_DATA_PROP_x; -- CXType_Elaborated
   type CRYPT_RC4_KEY_STATE_x is record
      Key : Void;
      SBox : Void;
      i : Interfaces.C.unsigned_char;
      j : Interfaces.C.unsigned_char;
   end record;
   subtype CRYPT_RC4_KEY_STATE is CRYPT_RC4_KEY_STATE_x; -- CXType_Elaborated
   type PCRYPT_RC4_KEY_STATE is access CRYPT_RC4_KEY_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_DES_KEY_STATE_x is record
      Key : Void;
      IV : Void;
      Feedback : Void;
   end record;
   subtype CRYPT_DES_KEY_STATE is CRYPT_DES_KEY_STATE_x; -- CXType_Elaborated
   type PCRYPT_DES_KEY_STATE is access CRYPT_DES_KEY_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_3DES_KEY_STATE_x is record
      Key : Void;
      IV : Void;
      Feedback : Void;
   end record;
   subtype CRYPT_3DES_KEY_STATE is CRYPT_3DES_KEY_STATE_x; -- CXType_Elaborated
   type PCRYPT_3DES_KEY_STATE is access CRYPT_3DES_KEY_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_AES_128_KEY_STATE_x is record
      Key : Void;
      IV : Void;
      EncryptionState : Void;
      DecryptionState : Void;
      Feedback : Void;
   end record;
   subtype CRYPT_AES_128_KEY_STATE is CRYPT_AES_128_KEY_STATE_x; -- CXType_Elaborated
   type PCRYPT_AES_128_KEY_STATE is access CRYPT_AES_128_KEY_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_AES_256_KEY_STATE_x is record
      Key : Void;
      IV : Void;
      EncryptionState : Void;
      DecryptionState : Void;
      Feedback : Void;
   end record;
   subtype CRYPT_AES_256_KEY_STATE is CRYPT_AES_256_KEY_STATE_x; -- CXType_Elaborated
   type PCRYPT_AES_256_KEY_STATE is access CRYPT_AES_256_KEY_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPTOAPI_BLOB_x is record
      cbData : DWORD;
      pbData : access BYTE;
   end record;
   subtype CRYPT_INTEGER_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_INTEGER_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_UINT_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_UINT_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_OBJID_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_OBJID_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CERT_NAME_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCERT_NAME_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CERT_RDN_VALUE_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCERT_RDN_VALUE_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CERT_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCERT_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRL_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRL_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype DATA_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PDATA_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_DATA_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_DATA_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_HASH_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_HASH_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_DIGEST_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_DIGEST_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_DER_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_DER_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_ATTR_BLOB is CRYPTOAPI_BLOB_x; -- CXType_Elaborated
   type PCRYPT_ATTR_BLOB is access CRYPTOAPI_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type CMS_DH_KEY_INFO_x is record
      dwVersion : DWORD;
      Algid : ALG_ID;
      pszContentEncObjId : LPSTR;
      PubInfo : CRYPT_DATA_BLOB;
      pReserved : access Void;
   end record;
   subtype CMS_DH_KEY_INFO is CMS_DH_KEY_INFO_x; -- CXType_Elaborated
   type PCMS_DH_KEY_INFO is access CMS_DH_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CryptAcquireContextA(
      phProv : access HCRYPTPROV;
      szContainer : LPCSTR;
      szProvider : LPCSTR;
      dwProvType : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptAcquireContextA,"CryptAcquireContextA");
   function CryptAcquireContextW(
      phProv : access HCRYPTPROV;
      szContainer : LPCWSTR;
      szProvider : LPCWSTR;
      dwProvType : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptAcquireContextW,"CryptAcquireContextW");
   function CryptReleaseContext(
      hProv : HCRYPTPROV;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptReleaseContext,"CryptReleaseContext");
   function CryptGenKey(
      hProv : HCRYPTPROV;
      Algid : ALG_ID;
      dwFlags : DWORD;
      phKey_x : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptGenKey,"CryptGenKey");
   function CryptDeriveKey(
      hProv : HCRYPTPROV;
      Algid : ALG_ID;
      hBaseData : HCRYPTHASH;
      dwFlags : DWORD;
      phKey_x : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptDeriveKey,"CryptDeriveKey");
   function CryptDestroyKey(
      hKey_x : HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptDestroyKey,"CryptDestroyKey");
   function CryptSetKeyParam(
      hKey_x : HCRYPTKEY;
      dwParam : DWORD;
      pbData : access constant BYTE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptSetKeyParam,"CryptSetKeyParam");
   function CryptGetKeyParam(
      hKey_x : HCRYPTKEY;
      dwParam : DWORD;
      pbData : access BYTE;
      pdwDataLen : access DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptGetKeyParam,"CryptGetKeyParam");
   function CryptSetHashParam(
      hHash : HCRYPTHASH;
      dwParam : DWORD;
      pbData : access constant BYTE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptSetHashParam,"CryptSetHashParam");
   function CryptGetHashParam(
      hHash : HCRYPTHASH;
      dwParam : DWORD;
      pbData : access BYTE;
      pdwDataLen : access DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptGetHashParam,"CryptGetHashParam");
   function CryptSetProvParam(
      hProv : HCRYPTPROV;
      dwParam : DWORD;
      pbData : access constant BYTE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptSetProvParam,"CryptSetProvParam");
   function CryptGetProvParam(
      hProv : HCRYPTPROV;
      dwParam : DWORD;
      pbData : access BYTE;
      pdwDataLen : access DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptGetProvParam,"CryptGetProvParam");
   function CryptGenRandom(
      hProv : HCRYPTPROV;
      dwLen : DWORD;
      pbBuffer : access BYTE
   ) return BOOL;
   pragma import (C,CryptGenRandom,"CryptGenRandom");
   function CryptGetUserKey(
      hProv : HCRYPTPROV;
      dwKeySpec : DWORD;
      phUserKey : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptGetUserKey,"CryptGetUserKey");
   function CryptExportKey(
      hKey_x : HCRYPTKEY;
      hExpKey : HCRYPTKEY;
      dwBlobType : DWORD;
      dwFlags : DWORD;
      pbData : access BYTE;
      pdwDataLen : access DWORD
   ) return BOOL;
   pragma import (C,CryptExportKey,"CryptExportKey");
   function CryptImportKey(
      hProv : HCRYPTPROV;
      pbData : access constant BYTE;
      dwDataLen : DWORD;
      hPubKey : HCRYPTKEY;
      dwFlags : DWORD;
      phKey_x : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptImportKey,"CryptImportKey");
   function CryptEncrypt(
      hKey_x : HCRYPTKEY;
      hHash : HCRYPTHASH;
      Final : BOOL;
      dwFlags : DWORD;
      pbData : access BYTE;
      pdwDataLen : access DWORD;
      dwBufLen : DWORD
   ) return BOOL;
   pragma import (C,CryptEncrypt,"CryptEncrypt");
   function CryptDecrypt(
      hKey_x : HCRYPTKEY;
      hHash : HCRYPTHASH;
      Final : BOOL;
      dwFlags : DWORD;
      pbData : access BYTE;
      pdwDataLen : access DWORD
   ) return BOOL;
   pragma import (C,CryptDecrypt,"CryptDecrypt");
   function CryptCreateHash(
      hProv : HCRYPTPROV;
      Algid : ALG_ID;
      hKey_x : HCRYPTKEY;
      dwFlags : DWORD;
      phHash : access HCRYPTHASH
   ) return BOOL;
   pragma import (C,CryptCreateHash,"CryptCreateHash");
   function CryptHashData(
      hHash : HCRYPTHASH;
      pbData : access constant BYTE;
      dwDataLen : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptHashData,"CryptHashData");
   function CryptHashSessionKey(
      hHash : HCRYPTHASH;
      hKey_x : HCRYPTKEY;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptHashSessionKey,"CryptHashSessionKey");
   function CryptDestroyHash(
      hHash : HCRYPTHASH
   ) return BOOL;
   pragma import (C,CryptDestroyHash,"CryptDestroyHash");
   function CryptSignHashA(
      hHash : HCRYPTHASH;
      dwKeySpec : DWORD;
      szDescription : LPCSTR;
      dwFlags : DWORD;
      pbSignature : access BYTE;
      pdwSigLen : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignHashA,"CryptSignHashA");
   function CryptSignHashW(
      hHash : HCRYPTHASH;
      dwKeySpec : DWORD;
      szDescription : LPCWSTR;
      dwFlags : DWORD;
      pbSignature : access BYTE;
      pdwSigLen : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignHashW,"CryptSignHashW");
   function CryptVerifySignatureA(
      hHash : HCRYPTHASH;
      pbSignature : access constant BYTE;
      dwSigLen : DWORD;
      hPubKey : HCRYPTKEY;
      szDescription : LPCSTR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptVerifySignatureA,"CryptVerifySignatureA");
   function CryptVerifySignatureW(
      hHash : HCRYPTHASH;
      pbSignature : access constant BYTE;
      dwSigLen : DWORD;
      hPubKey : HCRYPTKEY;
      szDescription : LPCWSTR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptVerifySignatureW,"CryptVerifySignatureW");
   function CryptSetProviderA(
      pszProvName : LPCSTR;
      dwProvType : DWORD
   ) return BOOL;
   pragma import (C,CryptSetProviderA,"CryptSetProviderA");
   function CryptSetProviderW(
      pszProvName : LPCWSTR;
      dwProvType : DWORD
   ) return BOOL;
   pragma import (C,CryptSetProviderW,"CryptSetProviderW");
   function CryptSetProviderExA(
      pszProvName : LPCSTR;
      dwProvType : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptSetProviderExA,"CryptSetProviderExA");
   function CryptSetProviderExW(
      pszProvName : LPCWSTR;
      dwProvType : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptSetProviderExW,"CryptSetProviderExW");
   function CryptGetDefaultProviderA(
      dwProvType : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      pszProvName : LPSTR;
      pcbProvName : access DWORD
   ) return BOOL;
   pragma import (C,CryptGetDefaultProviderA,"CryptGetDefaultProviderA");
   function CryptGetDefaultProviderW(
      dwProvType : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      pszProvName : LPWSTR;
      pcbProvName : access DWORD
   ) return BOOL;
   pragma import (C,CryptGetDefaultProviderW,"CryptGetDefaultProviderW");
   function CryptEnumProviderTypesA(
      dwIndex : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      pdwProvType : access DWORD;
      szTypeName : LPSTR;
      pcbTypeName : access DWORD
   ) return BOOL;
   pragma import (C,CryptEnumProviderTypesA,"CryptEnumProviderTypesA");
   function CryptEnumProviderTypesW(
      dwIndex : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      pdwProvType : access DWORD;
      szTypeName : LPWSTR;
      pcbTypeName : access DWORD
   ) return BOOL;
   pragma import (C,CryptEnumProviderTypesW,"CryptEnumProviderTypesW");
   function CryptEnumProvidersA(
      dwIndex : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      pdwProvType : access DWORD;
      szProvName : LPSTR;
      pcbProvName : access DWORD
   ) return BOOL;
   pragma import (C,CryptEnumProvidersA,"CryptEnumProvidersA");
   function CryptEnumProvidersW(
      dwIndex : DWORD;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      pdwProvType : access DWORD;
      szProvName : LPWSTR;
      pcbProvName : access DWORD
   ) return BOOL;
   pragma import (C,CryptEnumProvidersW,"CryptEnumProvidersW");
   function CryptContextAddRef(
      hProv : HCRYPTPROV;
      pdwReserved : access DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptContextAddRef,"CryptContextAddRef");
   function CryptDuplicateKey(
      hKey_x : HCRYPTKEY;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      phKey_x : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptDuplicateKey,"CryptDuplicateKey");
   function CryptDuplicateHash(
      hHash : HCRYPTHASH;
      pdwReserved : access DWORD;
      dwFlags : DWORD;
      phHash : access HCRYPTHASH
   ) return BOOL;
   pragma import (C,CryptDuplicateHash,"CryptDuplicateHash");
   function GetEncSChannel(
      pData : access PBYTE;
      dwDecSize : access DWORD
   ) return BOOL;
   pragma import (C,GetEncSChannel,"GetEncSChannel");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\bcrypt.h>
   subtype NTSTATUS is LONG; -- CXType_Typedef
   type PNTSTATUS is access NTSTATUS; -- CXType_Pointer - CXType_Typedef
   type BCRYPT_KEY_LENGTHS_STRUCT_x is record
      dwMinLength : ULONG;
      dwMaxLength : ULONG;
      dwIncrement : ULONG;
   end record;
   subtype BCRYPT_KEY_LENGTHS_STRUCT is BCRYPT_KEY_LENGTHS_STRUCT_x; -- CXType_Elaborated
   subtype BCRYPT_AUTH_TAG_LENGTHS_STRUCT is BCRYPT_KEY_LENGTHS_STRUCT; -- CXType_Typedef
   type BCRYPT_OID_x is record
      cbOID : ULONG;
      pbOID : PUCHAR;
   end record;
   subtype BCRYPT_OID is BCRYPT_OID_x; -- CXType_Elaborated
   type BCRYPT_OID_LIST_x is record
      dwOIDCount : ULONG;
      pOIDs : access BCRYPT_OID;
   end record;
   subtype BCRYPT_OID_LIST is BCRYPT_OID_LIST_x; -- CXType_Elaborated
   type BCRYPT_PKCS1_PADDING_INFO_x is record
      pszAlgId : LPCWSTR;
   end record;
   subtype BCRYPT_PKCS1_PADDING_INFO is BCRYPT_PKCS1_PADDING_INFO_x; -- CXType_Elaborated
   type BCRYPT_PSS_PADDING_INFO_x is record
      pszAlgId : LPCWSTR;
      cbSalt : ULONG;
   end record;
   subtype BCRYPT_PSS_PADDING_INFO is BCRYPT_PSS_PADDING_INFO_x; -- CXType_Elaborated
   type BCRYPT_OAEP_PADDING_INFO_x is record
      pszAlgId : LPCWSTR;
      pbLabel : PUCHAR;
      cbLabel : ULONG;
   end record;
   subtype BCRYPT_OAEP_PADDING_INFO is BCRYPT_OAEP_PADDING_INFO_x; -- CXType_Elaborated
   type BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_x is record
      cbSize : ULONG;
      dwInfoVersion : ULONG;
      pbNonce : PUCHAR;
      cbNonce : ULONG;
      pbAuthData : PUCHAR;
      cbAuthData : ULONG;
      pbTag : PUCHAR;
      cbTag : ULONG;
      pbMacContext : PUCHAR;
      cbMacContext : ULONG;
      cbAAD : ULONG;
      cbData : ULONGLONG;
      dwFlags : ULONG;
   end record;
   subtype BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO is BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_x; -- CXType_Elaborated
   type PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO is access BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type BCryptBuffer_x is record
      cbBuffer : ULONG;
      BufferType : ULONG;
      pvBuffer : PVOID;
   end record;
   subtype BCryptBuffer is BCryptBuffer_x; -- CXType_Elaborated
   type PBCryptBuffer is access BCryptBuffer_x; -- CXType_Pointer - CXType_Elaborated
   type BCryptBufferDesc_x is record
      ulVersion : ULONG;
      cBuffers : ULONG;
      pBuffers : PBCryptBuffer;
   end record;
   subtype BCryptBufferDesc is BCryptBufferDesc_x; -- CXType_Elaborated
   type PBCryptBufferDesc is access BCryptBufferDesc_x; -- CXType_Pointer - CXType_Elaborated
   subtype BCRYPT_HANDLE is PVOID; -- CXType_Typedef
   subtype BCRYPT_ALG_HANDLE is PVOID; -- CXType_Typedef
   subtype BCRYPT_KEY_HANDLE is PVOID; -- CXType_Typedef
   subtype BCRYPT_HASH_HANDLE is PVOID; -- CXType_Typedef
   subtype BCRYPT_SECRET_HANDLE is PVOID; -- CXType_Typedef
   type BCRYPT_KEY_BLOB_x is record
      Magic : ULONG;
   end record;
   subtype BCRYPT_KEY_BLOB is BCRYPT_KEY_BLOB_x; -- CXType_Elaborated
   type BCRYPT_RSAKEY_BLOB_x is record
      Magic : ULONG;
      BitLength : ULONG;
      cbPublicExp : ULONG;
      cbModulus : ULONG;
      cbPrime1 : ULONG;
      cbPrime2 : ULONG;
   end record;
   subtype BCRYPT_RSAKEY_BLOB is BCRYPT_RSAKEY_BLOB_x; -- CXType_Elaborated
   type BCRYPT_ECCKEY_BLOB_x is record
      dwMagic : ULONG;
      cbKey : ULONG;
   end record;
   subtype BCRYPT_ECCKEY_BLOB is BCRYPT_ECCKEY_BLOB_x; -- CXType_Elaborated
   type PBCRYPT_ECCKEY_BLOB is access BCRYPT_ECCKEY_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type SSL_ECCKEY_BLOB_x is record
      dwCurveType : ULONG;
      cbKey : ULONG;
   end record;
   subtype SSL_ECCKEY_BLOB is SSL_ECCKEY_BLOB_x; -- CXType_Elaborated
   type PSSL_ECCKEY_BLOB is access SSL_ECCKEY_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type ECC_CURVE_TYPE_ENUM is (
      BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE,
      BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE,
      BCRYPT_ECC_PRIME_MONTGOMERY_CURVE
   );
   for ECC_CURVE_TYPE_ENUM use (
      BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE => 1,
      BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE => 2,
      BCRYPT_ECC_PRIME_MONTGOMERY_CURVE => 3
   );
   for ECC_CURVE_TYPE_ENUM'Size use 32;
   type ECC_CURVE_ALG_ID_ENUM is (
      BCRYPT_NO_CURVE_GENERATION_ALG_ID
   );
   for ECC_CURVE_ALG_ID_ENUM use (
      BCRYPT_NO_CURVE_GENERATION_ALG_ID => 0
   );
   for ECC_CURVE_ALG_ID_ENUM'Size use 32;
   type BCRYPT_ECCFULLKEY_BLOB_x is record
      dwMagic : ULONG;
      dwVersion : ULONG;
      dwCurveType : ECC_CURVE_TYPE_ENUM;
      dwCurveGenerationAlgId : ECC_CURVE_ALG_ID_ENUM;
      cbFieldLength : ULONG;
      cbSubgroupOrder : ULONG;
      cbCofactor : ULONG;
      cbSeed : ULONG;
   end record;
   subtype BCRYPT_ECCFULLKEY_BLOB is BCRYPT_ECCFULLKEY_BLOB_x; -- CXType_Elaborated
   type PBCRYPT_ECCFULLKEY_BLOB is access BCRYPT_ECCFULLKEY_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type BCRYPT_DH_KEY_BLOB_x is record
      dwMagic : ULONG;
      cbKey : ULONG;
   end record;
   subtype BCRYPT_DH_KEY_BLOB is BCRYPT_DH_KEY_BLOB_x; -- CXType_Elaborated
   type PBCRYPT_DH_KEY_BLOB is access BCRYPT_DH_KEY_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type BCRYPT_DH_PARAMETER_HEADER_x is record
      cbLength : ULONG;
      dwMagic : ULONG;
      cbKeyLength : ULONG;
   end record;
   subtype BCRYPT_DH_PARAMETER_HEADER is BCRYPT_DH_PARAMETER_HEADER_x; -- CXType_Elaborated
   type BCRYPT_DSA_KEY_BLOB_x is record
      dwMagic : ULONG;
      cbKey : ULONG;
      Count : Void;
      Seed : Void;
      q : Void;
   end record;
   subtype BCRYPT_DSA_KEY_BLOB is BCRYPT_DSA_KEY_BLOB_x; -- CXType_Elaborated
   type PBCRYPT_DSA_KEY_BLOB is access BCRYPT_DSA_KEY_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type HASHALGORITHM_ENUM is (
      DSA_HASH_ALGORITHM_SHA1,
      DSA_HASH_ALGORITHM_SHA256,
      DSA_HASH_ALGORITHM_SHA512
   );
   for HASHALGORITHM_ENUM use (
      DSA_HASH_ALGORITHM_SHA1 => 0,
      DSA_HASH_ALGORITHM_SHA256 => 1,
      DSA_HASH_ALGORITHM_SHA512 => 2
   );
   for HASHALGORITHM_ENUM'Size use 32;
   type DSAFIPSVERSION_ENUM is (
      DSA_FIPS186_2,
      DSA_FIPS186_3
   );
   for DSAFIPSVERSION_ENUM use (
      DSA_FIPS186_2 => 0,
      DSA_FIPS186_3 => 1
   );
   for DSAFIPSVERSION_ENUM'Size use 32;
   type BCRYPT_DSA_KEY_BLOB_V2_x is record
      dwMagic : ULONG;
      cbKey : ULONG;
      hashAlgorithm : HASHALGORITHM_ENUM;
      standardVersion : DSAFIPSVERSION_ENUM;
      cbSeedLength : ULONG;
      cbGroupSize : ULONG;
      Count : Void;
   end record;
   subtype BCRYPT_DSA_KEY_BLOB_V2 is BCRYPT_DSA_KEY_BLOB_V2_x; -- CXType_Elaborated
   type PBCRYPT_DSA_KEY_BLOB_V2 is access BCRYPT_DSA_KEY_BLOB_V2_x; -- CXType_Pointer - CXType_Elaborated
   type BCRYPT_KEY_DATA_BLOB_HEADER_x is record
      dwMagic : ULONG;
      dwVersion : ULONG;
      cbKeyData : ULONG;
   end record;
   subtype BCRYPT_KEY_DATA_BLOB_HEADER is BCRYPT_KEY_DATA_BLOB_HEADER_x; -- CXType_Elaborated
   type PBCRYPT_KEY_DATA_BLOB_HEADER is access BCRYPT_KEY_DATA_BLOB_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type BCRYPT_DSA_PARAMETER_HEADER_x is record
      cbLength : ULONG;
      dwMagic : ULONG;
      cbKeyLength : ULONG;
      Count : Void;
      Seed : Void;
      q : Void;
   end record;
   subtype BCRYPT_DSA_PARAMETER_HEADER is BCRYPT_DSA_PARAMETER_HEADER_x; -- CXType_Elaborated
   type BCRYPT_DSA_PARAMETER_HEADER_V2_x is record
      cbLength : ULONG;
      dwMagic : ULONG;
      cbKeyLength : ULONG;
      hashAlgorithm : HASHALGORITHM_ENUM;
      standardVersion : DSAFIPSVERSION_ENUM;
      cbSeedLength : ULONG;
      cbGroupSize : ULONG;
      Count : Void;
   end record;
   subtype BCRYPT_DSA_PARAMETER_HEADER_V2 is BCRYPT_DSA_PARAMETER_HEADER_V2_x; -- CXType_Elaborated
   type BCRYPT_ECC_CURVE_NAMES_x is record
      dwEccCurveNames : ULONG;
      pEccCurveNames : access LPWSTR;
   end record;
   subtype BCRYPT_ECC_CURVE_NAMES is BCRYPT_ECC_CURVE_NAMES_x; -- CXType_Elaborated
   type BCRYPT_HASH_OPERATION_TYPE is (
      BCRYPT_HASH_OPERATION_HASH_DATA,
      BCRYPT_HASH_OPERATION_FINISH_HASH
   );
   for BCRYPT_HASH_OPERATION_TYPE use (
      BCRYPT_HASH_OPERATION_HASH_DATA => 1,
      BCRYPT_HASH_OPERATION_FINISH_HASH => 2
   );
   for BCRYPT_HASH_OPERATION_TYPE'Size use 32;
   type BCRYPT_MULTI_HASH_OPERATION_x is record
      iHash : ULONG;
      hashOperation : BCRYPT_HASH_OPERATION_TYPE;
      pbBuffer : PUCHAR;
      cbBuffer : ULONG;
   end record;
   subtype BCRYPT_MULTI_HASH_OPERATION is BCRYPT_MULTI_HASH_OPERATION_x; -- CXType_Elaborated
   type BCRYPT_MULTI_OPERATION_TYPE is (
      BCRYPT_OPERATION_TYPE_HASH
   );
   for BCRYPT_MULTI_OPERATION_TYPE use (
      BCRYPT_OPERATION_TYPE_HASH => 1
   );
   for BCRYPT_MULTI_OPERATION_TYPE'Size use 32;
   type BCRYPT_MULTI_OBJECT_LENGTH_STRUCT_x is record
      cbPerObject : ULONG;
      cbPerElement : ULONG;
   end record;
   subtype BCRYPT_MULTI_OBJECT_LENGTH_STRUCT is BCRYPT_MULTI_OBJECT_LENGTH_STRUCT_x; -- CXType_Elaborated
   function BCryptOpenAlgorithmProvider(
      phAlgorithm : access BCRYPT_ALG_HANDLE;
      pszAlgId : LPCWSTR;
      pszImplementation : LPCWSTR;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptOpenAlgorithmProvider,"BCryptOpenAlgorithmProvider");
   type BCRYPT_ALGORITHM_IDENTIFIER_x is record
      pszName : LPWSTR;
      dwClass : ULONG;
      dwFlags : ULONG;
   end record;
   subtype BCRYPT_ALGORITHM_IDENTIFIER is BCRYPT_ALGORITHM_IDENTIFIER_x; -- CXType_Elaborated
   type BCRYPT_ALGORITHM_IDENTIFIER_Ptr is access all BCRYPT_ALGORITHM_IDENTIFIER; -- Auto Generated Dependancy
   function BCryptEnumAlgorithms(
      dwAlgOperations : ULONG;
      pAlgCount : access ULONG;
      ppAlgList : access BCRYPT_ALGORITHM_IDENTIFIER_Ptr;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptEnumAlgorithms,"BCryptEnumAlgorithms");
   type BCRYPT_PROVIDER_NAME_x is record
      pszProviderName : LPWSTR;
   end record;
   subtype BCRYPT_PROVIDER_NAME is BCRYPT_PROVIDER_NAME_x; -- CXType_Elaborated
   type BCRYPT_PROVIDER_NAME_Ptr is access all BCRYPT_PROVIDER_NAME; -- Auto Generated Dependancy
   function BCryptEnumProviders(
      pszAlgId : LPCWSTR;
      pImplCount : access ULONG;
      ppImplList : access BCRYPT_PROVIDER_NAME_Ptr;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptEnumProviders,"BCryptEnumProviders");
   function BCryptGetProperty(
      hObject : BCRYPT_HANDLE;
      pszProperty : LPCWSTR;
      pbOutput : PUCHAR;
      cbOutput : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptGetProperty,"BCryptGetProperty");
   function BCryptSetProperty(
      hObject : BCRYPT_HANDLE;
      pszProperty : LPCWSTR;
      pbInput : PUCHAR;
      cbInput : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptSetProperty,"BCryptSetProperty");
   function BCryptCloseAlgorithmProvider(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptCloseAlgorithmProvider,"BCryptCloseAlgorithmProvider");
   procedure BCryptFreeBuffer(
      pvBuffer : PVOID
   );
   pragma import (C,BCryptFreeBuffer,"BCryptFreeBuffer");
   function BCryptGenerateSymmetricKey(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      phKey_x : access BCRYPT_KEY_HANDLE;
      pbKeyObject : PUCHAR;
      cbKeyObject : ULONG;
      pbSecret : PUCHAR;
      cbSecret : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptGenerateSymmetricKey,"BCryptGenerateSymmetricKey");
   function BCryptGenerateKeyPair(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      phKey_x : access BCRYPT_KEY_HANDLE;
      dwLength : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptGenerateKeyPair,"BCryptGenerateKeyPair");
   function BCryptEncrypt(
      hKey_x : BCRYPT_KEY_HANDLE;
      pbInput : PUCHAR;
      cbInput : ULONG;
      pPaddingInfo : access Void;
      pbIV : PUCHAR;
      cbIV : ULONG;
      pbOutput : PUCHAR;
      cbOutput : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptEncrypt,"BCryptEncrypt");
   function BCryptDecrypt(
      hKey_x : BCRYPT_KEY_HANDLE;
      pbInput : PUCHAR;
      cbInput : ULONG;
      pPaddingInfo : access Void;
      pbIV : PUCHAR;
      cbIV : ULONG;
      pbOutput : PUCHAR;
      cbOutput : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptDecrypt,"BCryptDecrypt");
   function BCryptExportKey(
      hKey_x : BCRYPT_KEY_HANDLE;
      hExportKey : BCRYPT_KEY_HANDLE;
      pszBlobType : LPCWSTR;
      pbOutput : PUCHAR;
      cbOutput : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptExportKey,"BCryptExportKey");
   function BCryptImportKey(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      hImportKey : BCRYPT_KEY_HANDLE;
      pszBlobType : LPCWSTR;
      phKey_x : access BCRYPT_KEY_HANDLE;
      pbKeyObject : PUCHAR;
      cbKeyObject : ULONG;
      pbInput : PUCHAR;
      cbInput : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptImportKey,"BCryptImportKey");
   function BCryptImportKeyPair(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      hImportKey : BCRYPT_KEY_HANDLE;
      pszBlobType : LPCWSTR;
      phKey_x : access BCRYPT_KEY_HANDLE;
      pbInput : PUCHAR;
      cbInput : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptImportKeyPair,"BCryptImportKeyPair");
   function BCryptDuplicateKey(
      hKey_x : BCRYPT_KEY_HANDLE;
      phNewKey : access BCRYPT_KEY_HANDLE;
      pbKeyObject : PUCHAR;
      cbKeyObject : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptDuplicateKey,"BCryptDuplicateKey");
   function BCryptFinalizeKeyPair(
      hKey_x : BCRYPT_KEY_HANDLE;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptFinalizeKeyPair,"BCryptFinalizeKeyPair");
   function BCryptDestroyKey(
      hKey_x : BCRYPT_KEY_HANDLE
   ) return NTSTATUS;
   pragma import (C,BCryptDestroyKey,"BCryptDestroyKey");
   function BCryptDestroySecret(
      hSecret : BCRYPT_SECRET_HANDLE
   ) return NTSTATUS;
   pragma import (C,BCryptDestroySecret,"BCryptDestroySecret");
   function BCryptSignHash(
      hKey_x : BCRYPT_KEY_HANDLE;
      pPaddingInfo : access Void;
      pbInput : PUCHAR;
      cbInput : ULONG;
      pbOutput : PUCHAR;
      cbOutput : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptSignHash,"BCryptSignHash");
   function BCryptVerifySignature(
      hKey_x : BCRYPT_KEY_HANDLE;
      pPaddingInfo : access Void;
      pbHash : PUCHAR;
      cbHash : ULONG;
      pbSignature : PUCHAR;
      cbSignature : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptVerifySignature,"BCryptVerifySignature");
   function BCryptSecretAgreement(
      hPrivKey : BCRYPT_KEY_HANDLE;
      hPubKey : BCRYPT_KEY_HANDLE;
      phAgreedSecret : access BCRYPT_SECRET_HANDLE;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptSecretAgreement,"BCryptSecretAgreement");
   function BCryptDeriveKey(
      hSharedSecret : BCRYPT_SECRET_HANDLE;
      pwszKDF : LPCWSTR;
      pParameterList : access BCryptBufferDesc;
      pbDerivedKey : PUCHAR;
      cbDerivedKey : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptDeriveKey,"BCryptDeriveKey");
   function BCryptKeyDerivation(
      hKey_x : BCRYPT_KEY_HANDLE;
      pParameterList : access BCryptBufferDesc;
      pbDerivedKey : PUCHAR;
      cbDerivedKey : ULONG;
      pcbResult : access ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptKeyDerivation,"BCryptKeyDerivation");
   function BCryptCreateHash(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      phHash : access BCRYPT_HASH_HANDLE;
      pbHashObject : PUCHAR;
      cbHashObject : ULONG;
      pbSecret : PUCHAR;
      cbSecret : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptCreateHash,"BCryptCreateHash");
   function BCryptHashData(
      hHash : BCRYPT_HASH_HANDLE;
      pbInput : PUCHAR;
      cbInput : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptHashData,"BCryptHashData");
   function BCryptFinishHash(
      hHash : BCRYPT_HASH_HANDLE;
      pbOutput : PUCHAR;
      cbOutput : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptFinishHash,"BCryptFinishHash");
   function BCryptCreateMultiHash(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      phHash : access BCRYPT_HASH_HANDLE;
      nHashes : ULONG;
      pbHashObject : PUCHAR;
      cbHashObject : ULONG;
      pbSecret : PUCHAR;
      cbSecret : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptCreateMultiHash,"BCryptCreateMultiHash");
   function BCryptProcessMultiOperations(
      hObject : BCRYPT_HANDLE;
      operationType : BCRYPT_MULTI_OPERATION_TYPE;
      pOperations : PVOID;
      cbOperations : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptProcessMultiOperations,"BCryptProcessMultiOperations");
   function BCryptDuplicateHash(
      hHash : BCRYPT_HASH_HANDLE;
      phNewHash : access BCRYPT_HASH_HANDLE;
      pbHashObject : PUCHAR;
      cbHashObject : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptDuplicateHash,"BCryptDuplicateHash");
   function BCryptDestroyHash(
      hHash : BCRYPT_HASH_HANDLE
   ) return NTSTATUS;
   pragma import (C,BCryptDestroyHash,"BCryptDestroyHash");
   function BCryptHash(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      pbSecret : PUCHAR;
      cbSecret : ULONG;
      pbInput : PUCHAR;
      cbInput : ULONG;
      pbOutput : PUCHAR;
      cbOutput : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptHash,"BCryptHash");
   function BCryptGenRandom(
      hAlgorithm : BCRYPT_ALG_HANDLE;
      pbBuffer : PUCHAR;
      cbBuffer : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptGenRandom,"BCryptGenRandom");
   function BCryptDeriveKeyCapi(
      hHash : BCRYPT_HASH_HANDLE;
      hTargetAlg : BCRYPT_ALG_HANDLE;
      pbDerivedKey : PUCHAR;
      cbDerivedKey : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptDeriveKeyCapi,"BCryptDeriveKeyCapi");
   function BCryptDeriveKeyPBKDF2(
      hPrf : BCRYPT_ALG_HANDLE;
      pbPassword : PUCHAR;
      cbPassword : ULONG;
      pbSalt : PUCHAR;
      cbSalt : ULONG;
      cIterations : ULONGLONG;
      pbDerivedKey : PUCHAR;
      cbDerivedKey : ULONG;
      dwFlags : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptDeriveKeyPBKDF2,"BCryptDeriveKeyPBKDF2");
   type BCRYPT_INTERFACE_VERSION_x is record
      MajorVersion : USHORT;
      MinorVersion : USHORT;
   end record;
   subtype BCRYPT_INTERFACE_VERSION is BCRYPT_INTERFACE_VERSION_x; -- CXType_Elaborated
   type PBCRYPT_INTERFACE_VERSION is access BCRYPT_INTERFACE_VERSION_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_INTERFACE_REG_x is record
      dwInterface : ULONG;
      dwFlags : ULONG;
      cFunctions : ULONG;
      rgpszFunctions : access PWSTR;
   end record;
   subtype CRYPT_INTERFACE_REG is CRYPT_INTERFACE_REG_x; -- CXType_Elaborated
   type PCRYPT_INTERFACE_REG is access CRYPT_INTERFACE_REG_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_IMAGE_REG_x is record
      pszImage : PWSTR;
      cInterfaces : ULONG;
      rgpInterfaces : access PCRYPT_INTERFACE_REG;
   end record;
   subtype CRYPT_IMAGE_REG is CRYPT_IMAGE_REG_x; -- CXType_Elaborated
   type PCRYPT_IMAGE_REG is access CRYPT_IMAGE_REG_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PROVIDER_REG_x is record
      cAliases : ULONG;
      rgpszAliases : access PWSTR;
      pUM : PCRYPT_IMAGE_REG;
      pKM : PCRYPT_IMAGE_REG;
   end record;
   subtype CRYPT_PROVIDER_REG is CRYPT_PROVIDER_REG_x; -- CXType_Elaborated
   type PCRYPT_PROVIDER_REG is access CRYPT_PROVIDER_REG_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PROVIDERS_x is record
      cProviders : ULONG;
      rgpszProviders : access PWSTR;
   end record;
   subtype CRYPT_PROVIDERS is CRYPT_PROVIDERS_x; -- CXType_Elaborated
   type PCRYPT_PROVIDERS is access CRYPT_PROVIDERS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTEXT_CONFIG_x is record
      dwFlags : ULONG;
      dwReserved : ULONG;
   end record;
   subtype CRYPT_CONTEXT_CONFIG is CRYPT_CONTEXT_CONFIG_x; -- CXType_Elaborated
   type PCRYPT_CONTEXT_CONFIG is access CRYPT_CONTEXT_CONFIG_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTEXT_FUNCTION_CONFIG_x is record
      dwFlags : ULONG;
      dwReserved : ULONG;
   end record;
   subtype CRYPT_CONTEXT_FUNCTION_CONFIG is CRYPT_CONTEXT_FUNCTION_CONFIG_x; -- CXType_Elaborated
   type PCRYPT_CONTEXT_FUNCTION_CONFIG is access CRYPT_CONTEXT_FUNCTION_CONFIG_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTEXTS_x is record
      cContexts : ULONG;
      rgpszContexts : access PWSTR;
   end record;
   subtype CRYPT_CONTEXTS is CRYPT_CONTEXTS_x; -- CXType_Elaborated
   type PCRYPT_CONTEXTS is access CRYPT_CONTEXTS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTEXT_FUNCTIONS_x is record
      cFunctions : ULONG;
      rgpszFunctions : access PWSTR;
   end record;
   subtype CRYPT_CONTEXT_FUNCTIONS is CRYPT_CONTEXT_FUNCTIONS_x; -- CXType_Elaborated
   type PCRYPT_CONTEXT_FUNCTIONS is access CRYPT_CONTEXT_FUNCTIONS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTEXT_FUNCTION_PROVIDERS_x is record
      cProviders : ULONG;
      rgpszProviders : access PWSTR;
   end record;
   subtype CRYPT_CONTEXT_FUNCTION_PROVIDERS is CRYPT_CONTEXT_FUNCTION_PROVIDERS_x; -- CXType_Elaborated
   type PCRYPT_CONTEXT_FUNCTION_PROVIDERS is access CRYPT_CONTEXT_FUNCTION_PROVIDERS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PROPERTY_REF_x is record
      pszProperty : PWSTR;
      cbValue : ULONG;
      pbValue : PUCHAR;
   end record;
   subtype CRYPT_PROPERTY_REF is CRYPT_PROPERTY_REF_x; -- CXType_Elaborated
   type PCRYPT_PROPERTY_REF is access CRYPT_PROPERTY_REF_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_IMAGE_REF_x is record
      pszImage : PWSTR;
      dwFlags : ULONG;
   end record;
   subtype CRYPT_IMAGE_REF is CRYPT_IMAGE_REF_x; -- CXType_Elaborated
   type PCRYPT_IMAGE_REF is access CRYPT_IMAGE_REF_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PROVIDER_REF_x is record
      dwInterface : ULONG;
      pszFunction : PWSTR;
      pszProvider : PWSTR;
      cProperties : ULONG;
      rgpProperties : access PCRYPT_PROPERTY_REF;
      pUM : PCRYPT_IMAGE_REF;
      pKM : PCRYPT_IMAGE_REF;
   end record;
   subtype CRYPT_PROVIDER_REF is CRYPT_PROVIDER_REF_x; -- CXType_Elaborated
   type PCRYPT_PROVIDER_REF is access CRYPT_PROVIDER_REF_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PROVIDER_REFS_x is record
      cProviders : ULONG;
      rgpProviders : access PCRYPT_PROVIDER_REF;
   end record;
   subtype CRYPT_PROVIDER_REFS is CRYPT_PROVIDER_REFS_x; -- CXType_Elaborated
   type PCRYPT_PROVIDER_REFS is access CRYPT_PROVIDER_REFS_x; -- CXType_Pointer - CXType_Elaborated
   function BCryptQueryProviderRegistration(
      pszProvider : LPCWSTR;
      dwMode : ULONG;
      dwInterface : ULONG;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_PROVIDER_REG
   ) return NTSTATUS;
   pragma import (C,BCryptQueryProviderRegistration,"BCryptQueryProviderRegistration");
   function BCryptEnumRegisteredProviders(
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_PROVIDERS
   ) return NTSTATUS;
   pragma import (C,BCryptEnumRegisteredProviders,"BCryptEnumRegisteredProviders");
   function BCryptCreateContext(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      pConfig : PCRYPT_CONTEXT_CONFIG
   ) return NTSTATUS;
   pragma import (C,BCryptCreateContext,"BCryptCreateContext");
   function BCryptDeleteContext(
      dwTable : ULONG;
      pszContext : LPCWSTR
   ) return NTSTATUS;
   pragma import (C,BCryptDeleteContext,"BCryptDeleteContext");
   function BCryptEnumContexts(
      dwTable : ULONG;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_CONTEXTS
   ) return NTSTATUS;
   pragma import (C,BCryptEnumContexts,"BCryptEnumContexts");
   function BCryptConfigureContext(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      pConfig : PCRYPT_CONTEXT_CONFIG
   ) return NTSTATUS;
   pragma import (C,BCryptConfigureContext,"BCryptConfigureContext");
   function BCryptQueryContextConfiguration(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_CONTEXT_CONFIG
   ) return NTSTATUS;
   pragma import (C,BCryptQueryContextConfiguration,"BCryptQueryContextConfiguration");
   function BCryptAddContextFunction(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      dwPosition : ULONG
   ) return NTSTATUS;
   pragma import (C,BCryptAddContextFunction,"BCryptAddContextFunction");
   function BCryptRemoveContextFunction(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR
   ) return NTSTATUS;
   pragma import (C,BCryptRemoveContextFunction,"BCryptRemoveContextFunction");
   function BCryptEnumContextFunctions(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_CONTEXT_FUNCTIONS
   ) return NTSTATUS;
   pragma import (C,BCryptEnumContextFunctions,"BCryptEnumContextFunctions");
   function BCryptConfigureContextFunction(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      pConfig : PCRYPT_CONTEXT_FUNCTION_CONFIG
   ) return NTSTATUS;
   pragma import (C,BCryptConfigureContextFunction,"BCryptConfigureContextFunction");
   function BCryptQueryContextFunctionConfiguration(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_CONTEXT_FUNCTION_CONFIG
   ) return NTSTATUS;
   pragma import (C,BCryptQueryContextFunctionConfiguration,"BCryptQueryContextFunctionConfiguration");
   function BCryptEnumContextFunctionProviders(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_CONTEXT_FUNCTION_PROVIDERS
   ) return NTSTATUS;
   pragma import (C,BCryptEnumContextFunctionProviders,"BCryptEnumContextFunctionProviders");
   function BCryptSetContextFunctionProperty(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      pszProperty : LPCWSTR;
      cbValue : ULONG;
      pbValue : PUCHAR
   ) return NTSTATUS;
   pragma import (C,BCryptSetContextFunctionProperty,"BCryptSetContextFunctionProperty");
   function BCryptQueryContextFunctionProperty(
      dwTable : ULONG;
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      pszProperty : LPCWSTR;
      pcbValue : access ULONG;
      ppbValue : access PUCHAR
   ) return NTSTATUS;
   pragma import (C,BCryptQueryContextFunctionProperty,"BCryptQueryContextFunctionProperty");
   function BCryptRegisterConfigChangeNotify(
      phEvent : access HANDLE
   ) return NTSTATUS;
   pragma import (C,BCryptRegisterConfigChangeNotify,"BCryptRegisterConfigChangeNotify");
   function BCryptUnregisterConfigChangeNotify(
      hEvent : HANDLE
   ) return NTSTATUS;
   pragma import (C,BCryptUnregisterConfigChangeNotify,"BCryptUnregisterConfigChangeNotify");
   function BCryptResolveProviders(
      pszContext : LPCWSTR;
      dwInterface : ULONG;
      pszFunction : LPCWSTR;
      pszProvider : LPCWSTR;
      dwMode : ULONG;
      dwFlags : ULONG;
      pcbBuffer : access ULONG;
      ppBuffer : access PCRYPT_PROVIDER_REFS
   ) return NTSTATUS;
   pragma import (C,BCryptResolveProviders,"BCryptResolveProviders");
   function BCryptGetFipsAlgorithmMode(
      pfEnabled : access BOOLEAN
   ) return NTSTATUS;
   pragma import (C,BCryptGetFipsAlgorithmMode,"BCryptGetFipsAlgorithmMode");
   function CngGetFipsAlgorithmMode return BOOLEAN;
   pragma import (C,CngGetFipsAlgorithmMode,"CngGetFipsAlgorithmMode");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\ncrypt.h>
   subtype SECURITY_STATUS is LONG; -- CXType_Typedef
   subtype PFN_NCRYPT_ALLOC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LPVOID (SIZE_T)
   subtype PFN_NCRYPT_FREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID)
   type NCRYPT_ALLOC_PARA is record
      cbSize : DWORD;
      pfnAlloc : PFN_NCRYPT_ALLOC;
      pfnFree : PFN_NCRYPT_FREE;
   end record;
   subtype NCryptBuffer is BCryptBuffer; -- CXType_Typedef
   type PNCryptBuffer is access BCryptBuffer; -- CXType_Pointer - CXType_Typedef
   subtype NCryptBufferDesc is BCryptBufferDesc; -- CXType_Typedef
   type PNCryptBufferDesc is access BCryptBufferDesc; -- CXType_Pointer - CXType_Typedef
   subtype NCRYPT_HANDLE is ULONG_PTR; -- CXType_Typedef
   subtype NCRYPT_PROV_HANDLE is ULONG_PTR; -- CXType_Typedef
   subtype NCRYPT_KEY_HANDLE is ULONG_PTR; -- CXType_Typedef
   subtype NCRYPT_HASH_HANDLE is ULONG_PTR; -- CXType_Typedef
   subtype NCRYPT_SECRET_HANDLE is ULONG_PTR; -- CXType_Typedef
   type NCRYPT_CIPHER_PADDING_INFO_x is record
      cbSize : ULONG;
      dwFlags : DWORD;
      pbIV : PUCHAR;
      cbIV : ULONG;
      pbOtherInfo : PUCHAR;
      cbOtherInfo : ULONG;
   end record;
   subtype NCRYPT_CIPHER_PADDING_INFO is NCRYPT_CIPHER_PADDING_INFO_x; -- CXType_Elaborated
   type PNCRYPT_CIPHER_PADDING_INFO is access NCRYPT_CIPHER_PADDING_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_PLATFORM_ATTEST_PADDING_INFO_x is record
      magic : ULONG;
      pcrMask : ULONG;
   end record;
   subtype NCRYPT_PLATFORM_ATTEST_PADDING_INFO is NCRYPT_PLATFORM_ATTEST_PADDING_INFO_x; -- CXType_Elaborated
   type NCRYPT_KEY_ATTEST_PADDING_INFO_x is record
      magic : ULONG;
      pbKeyBlob : PUCHAR;
      cbKeyBlob : ULONG;
      pbKeyAuth : PUCHAR;
      cbKeyAuth : ULONG;
   end record;
   subtype NCRYPT_KEY_ATTEST_PADDING_INFO is NCRYPT_KEY_ATTEST_PADDING_INFO_x; -- CXType_Elaborated
   type NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_x is record
      Version : ULONG;
      Flags : ULONG;
      cbPublicKeyBlob : ULONG;
   end record;
   subtype NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES is NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_x; -- CXType_Elaborated
   type PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES is access NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_x is record
      Magic : ULONG;
      Version : ULONG;
      cbSignature : ULONG;
      cbReport : ULONG;
      cbAttributes : ULONG;
   end record;
   subtype NCRYPT_VSM_KEY_ATTESTATION_STATEMENT is NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_x; -- CXType_Elaborated
   type PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT is access NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_x is record
      Version : ULONG;
      TrustletId : ULONGLONG;
      MinSvn : ULONG;
      FlagsMask : ULONG;
      FlagsExpected : ULONG;
      AllowDebugging : ULONG;
      Reserved : ULONG;
   end record;
   subtype NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS is NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_x; -- CXType_Elaborated
   type PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS is access NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_x is record
      Version : ULONG;
      KeyUsage : ULONG;
      PerBootKey : ULONG;
      Reserved : ULONG;
      cbAlgName : ULONG;
      cbNonce : ULONG;
      cbAuthTag : ULONG;
      cbWrappingKey : ULONG;
      cbIsolatedKey : ULONG;
   end record;
   subtype NCRYPT_EXPORTED_ISOLATED_KEY_HEADER is NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_x; -- CXType_Elaborated
   type PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER is access NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE_x is record
      Header : NCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
   end record;
   subtype NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE is NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE_x; -- CXType_Elaborated
   type PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE is access NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT_x is record
      Magic : UINT32;
      Version : UINT32;
      HeaderSize : UINT32;
      cbCertifyInfo : UINT32;
      cbSignature : UINT32;
      cbTpmPublic : UINT32;
   end record;
   subtype NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT is NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT_x; -- CXType_Elaborated
   type PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT is access NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT_x; -- CXType_Pointer - CXType_Elaborated
   function NCryptOpenStorageProvider(
      phProvider : access NCRYPT_PROV_HANDLE;
      pszProviderName : LPCWSTR;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptOpenStorageProvider,"NCryptOpenStorageProvider");
   type NCryptAlgorithmName_x is record
      pszName : LPWSTR;
      dwClass : DWORD;
      dwAlgOperations : DWORD;
      dwFlags : DWORD;
   end record;
   subtype NCryptAlgorithmName is NCryptAlgorithmName_x; -- CXType_Elaborated
   type NCryptAlgorithmName_Ptr is access all NCryptAlgorithmName; -- Auto Generated Dependancy
   function NCryptEnumAlgorithms(
      hProvider : NCRYPT_PROV_HANDLE;
      dwAlgOperations : DWORD;
      pdwAlgCount : access DWORD;
      ppAlgList : access NCryptAlgorithmName_Ptr;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptEnumAlgorithms,"NCryptEnumAlgorithms");
   function NCryptIsAlgSupported(
      hProvider : NCRYPT_PROV_HANDLE;
      pszAlgId : LPCWSTR;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptIsAlgSupported,"NCryptIsAlgSupported");
   type NCryptKeyName is record
      pszName : LPWSTR;
      pszAlgid : LPWSTR;
      dwLegacyKeySpec : DWORD;
      dwFlags : DWORD;
   end record;
   type NCryptKeyName_Ptr is access all NCryptKeyName; -- Auto Generated Dependancy
   function NCryptEnumKeys(
      hProvider : NCRYPT_PROV_HANDLE;
      pszScope : LPCWSTR;
      ppKeyName : access NCryptKeyName_Ptr;
      ppEnumState : access PVOID;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptEnumKeys,"NCryptEnumKeys");
   type NCryptProviderName is record
      pszName : LPWSTR;
      pszComment : LPWSTR;
   end record;
   type NCryptProviderName_Ptr is access all NCryptProviderName; -- Auto Generated Dependancy
   function NCryptEnumStorageProviders(
      pdwProviderCount : access DWORD;
      ppProviderList : access NCryptProviderName_Ptr;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptEnumStorageProviders,"NCryptEnumStorageProviders");
   function NCryptFreeBuffer(
      pvInput : PVOID
   ) return SECURITY_STATUS;
   pragma import (C,NCryptFreeBuffer,"NCryptFreeBuffer");
   function NCryptOpenKey(
      hProvider : NCRYPT_PROV_HANDLE;
      phKey_x : access NCRYPT_KEY_HANDLE;
      pszKeyName : LPCWSTR;
      dwLegacyKeySpec : DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptOpenKey,"NCryptOpenKey");
   function NCryptCreatePersistedKey(
      hProvider : NCRYPT_PROV_HANDLE;
      phKey_x : access NCRYPT_KEY_HANDLE;
      pszAlgId : LPCWSTR;
      pszKeyName : LPCWSTR;
      dwLegacyKeySpec : DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptCreatePersistedKey,"NCryptCreatePersistedKey");
   type NCRYPT_UI_POLICY_x is record
      dwVersion : DWORD;
      dwFlags : DWORD;
      pszCreationTitle : LPCWSTR;
      pszFriendlyName : LPCWSTR;
      pszDescription : LPCWSTR;
   end record;
   subtype NCRYPT_UI_POLICY is NCRYPT_UI_POLICY_x; -- CXType_Elaborated
   type NCRYPT_KEY_ACCESS_POLICY_BLOB_x is record
      dwVersion : DWORD;
      dwPolicyFlags : DWORD;
      cbUserSid : DWORD;
      cbApplicationSid : DWORD;
   end record;
   subtype NCRYPT_KEY_ACCESS_POLICY_BLOB is NCRYPT_KEY_ACCESS_POLICY_BLOB_x; -- CXType_Elaborated
   type NCRYPT_SUPPORTED_LENGTHS_x is record
      dwMinLength : DWORD;
      dwMaxLength : DWORD;
      dwIncrement : DWORD;
      dwDefaultLength : DWORD;
   end record;
   subtype NCRYPT_SUPPORTED_LENGTHS is NCRYPT_SUPPORTED_LENGTHS_x; -- CXType_Elaborated
   type NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO_x is record
      dwVersion : DWORD;
      iExpiration : INT32;
      pabNonce : Void;
      pabPolicyRef : Void;
      pabHMAC : Void;
   end record;
   subtype NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO is NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO_x; -- CXType_Elaborated
   type NCRYPT_PCP_TPM_FW_VERSION_INFO_x is record
      major1 : UINT16;
      major2 : UINT16;
      minor1 : UINT16;
      minor2 : UINT16;
   end record;
   subtype NCRYPT_PCP_TPM_FW_VERSION_INFO is NCRYPT_PCP_TPM_FW_VERSION_INFO_x; -- CXType_Elaborated
   type NCRYPT_PCP_RAW_POLICYDIGEST_x is record
      dwVersion : DWORD;
      cbDigest : DWORD;
   end record;
   subtype NCRYPT_PCP_RAW_POLICYDIGEST_INFO is NCRYPT_PCP_RAW_POLICYDIGEST_x; -- CXType_Elaborated
   function NCryptGetProperty(
      hObject : NCRYPT_HANDLE;
      pszProperty : LPCWSTR;
      pbOutput : PBYTE;
      cbOutput : DWORD;
      pcbResult : access DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptGetProperty,"NCryptGetProperty");
   function NCryptSetProperty(
      hObject : NCRYPT_HANDLE;
      pszProperty : LPCWSTR;
      pbInput : PBYTE;
      cbInput : DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptSetProperty,"NCryptSetProperty");
   function NCryptFinalizeKey(
      hKey_x : NCRYPT_KEY_HANDLE;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptFinalizeKey,"NCryptFinalizeKey");
   function NCryptEncrypt(
      hKey_x : NCRYPT_KEY_HANDLE;
      pbInput : PBYTE;
      cbInput : DWORD;
      pPaddingInfo : access Void;
      pbOutput : PBYTE;
      cbOutput : DWORD;
      pcbResult : access DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptEncrypt,"NCryptEncrypt");
   function NCryptDecrypt(
      hKey_x : NCRYPT_KEY_HANDLE;
      pbInput : PBYTE;
      cbInput : DWORD;
      pPaddingInfo : access Void;
      pbOutput : PBYTE;
      cbOutput : DWORD;
      pcbResult : access DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptDecrypt,"NCryptDecrypt");
   type NCRYPT_KEY_BLOB_HEADER_x is record
      cbSize : ULONG;
      dwMagic : ULONG;
      cbAlgName : ULONG;
      cbKeyData : ULONG;
   end record;
   subtype NCRYPT_KEY_BLOB_HEADER is NCRYPT_KEY_BLOB_HEADER_x; -- CXType_Elaborated
   type PNCRYPT_KEY_BLOB_HEADER is access NCRYPT_KEY_BLOB_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER is record
      magic : DWORD;
      cbHeader : DWORD;
      cbPublic : DWORD;
      cbPrivate : DWORD;
      cbName : DWORD;
   end record;
   type PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER is access NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER; -- CXType_Pointer - CXType_Elaborated
   function NCryptImportKey(
      hProvider : NCRYPT_PROV_HANDLE;
      hImportKey : NCRYPT_KEY_HANDLE;
      pszBlobType : LPCWSTR;
      pParameterList : access NCryptBufferDesc;
      phKey_x : access NCRYPT_KEY_HANDLE;
      pbData : PBYTE;
      cbData : DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptImportKey,"NCryptImportKey");
   function NCryptExportKey(
      hKey_x : NCRYPT_KEY_HANDLE;
      hExportKey : NCRYPT_KEY_HANDLE;
      pszBlobType : LPCWSTR;
      pParameterList : access NCryptBufferDesc;
      pbOutput : PBYTE;
      cbOutput : DWORD;
      pcbResult : access DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptExportKey,"NCryptExportKey");
   function NCryptSignHash(
      hKey_x : NCRYPT_KEY_HANDLE;
      pPaddingInfo : access Void;
      pbHashValue : PBYTE;
      cbHashValue : DWORD;
      pbSignature : PBYTE;
      cbSignature : DWORD;
      pcbResult : access DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptSignHash,"NCryptSignHash");
   function NCryptVerifySignature(
      hKey_x : NCRYPT_KEY_HANDLE;
      pPaddingInfo : access Void;
      pbHashValue : PBYTE;
      cbHashValue : DWORD;
      pbSignature : PBYTE;
      cbSignature : DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptVerifySignature,"NCryptVerifySignature");
   function NCryptDeleteKey(
      hKey_x : NCRYPT_KEY_HANDLE;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptDeleteKey,"NCryptDeleteKey");
   function NCryptFreeObject(
      hObject : NCRYPT_HANDLE
   ) return SECURITY_STATUS;
   pragma import (C,NCryptFreeObject,"NCryptFreeObject");
   function NCryptIsKeyHandle(
      hKey_x : NCRYPT_KEY_HANDLE
   ) return BOOL;
   pragma import (C,NCryptIsKeyHandle,"NCryptIsKeyHandle");
   function NCryptTranslateHandle(
      phProvider : access NCRYPT_PROV_HANDLE;
      phKey_x : access NCRYPT_KEY_HANDLE;
      hLegacyProv : HCRYPTPROV;
      hLegacyKey : HCRYPTKEY;
      dwLegacyKeySpec : DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptTranslateHandle,"NCryptTranslateHandle");
   function NCryptNotifyChangeKey(
      hProvider : NCRYPT_PROV_HANDLE;
      phEvent : access HANDLE;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptNotifyChangeKey,"NCryptNotifyChangeKey");
   function NCryptSecretAgreement(
      hPrivKey : NCRYPT_KEY_HANDLE;
      hPubKey : NCRYPT_KEY_HANDLE;
      phAgreedSecret : access NCRYPT_SECRET_HANDLE;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptSecretAgreement,"NCryptSecretAgreement");
   function NCryptDeriveKey(
      hSharedSecret : NCRYPT_SECRET_HANDLE;
      pwszKDF : LPCWSTR;
      pParameterList : access NCryptBufferDesc;
      pbDerivedKey : PBYTE;
      cbDerivedKey : DWORD;
      pcbResult : access DWORD;
      dwFlags : ULONG
   ) return SECURITY_STATUS;
   pragma import (C,NCryptDeriveKey,"NCryptDeriveKey");
   function NCryptKeyDerivation(
      hKey_x : NCRYPT_KEY_HANDLE;
      pParameterList : access NCryptBufferDesc;
      pbDerivedKey : PUCHAR;
      cbDerivedKey : DWORD;
      pcbResult : access DWORD;
      dwFlags : ULONG
   ) return SECURITY_STATUS;
   pragma import (C,NCryptKeyDerivation,"NCryptKeyDerivation");
   function NCryptCreateClaim(
      hSubjectKey : NCRYPT_KEY_HANDLE;
      hAuthorityKey : NCRYPT_KEY_HANDLE;
      dwClaimType : DWORD;
      pParameterList : access NCryptBufferDesc;
      pbClaimBlob : PBYTE;
      cbClaimBlob : DWORD;
      pcbResult : access DWORD;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptCreateClaim,"NCryptCreateClaim");
   function NCryptVerifyClaim(
      hSubjectKey : NCRYPT_KEY_HANDLE;
      hAuthorityKey : NCRYPT_KEY_HANDLE;
      dwClaimType : DWORD;
      pParameterList : access NCryptBufferDesc;
      pbClaimBlob : PBYTE;
      cbClaimBlob : DWORD;
      pOutput : access NCryptBufferDesc;
      dwFlags : DWORD
   ) return SECURITY_STATUS;
   pragma import (C,NCryptVerifyClaim,"NCryptVerifyClaim");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\wincrypt.h>
   subtype HCRYPTPROV_OR_NCRYPT_KEY_HANDLE is ULONG_PTR; -- CXType_Typedef
   subtype HCRYPTPROV_LEGACY is ULONG_PTR; -- CXType_Typedef
   type CRYPT_BIT_BLOB_x is record
      cbData : DWORD;
      pbData : access BYTE;
      cUnusedBits : DWORD;
   end record;
   subtype CRYPT_BIT_BLOB is CRYPT_BIT_BLOB_x; -- CXType_Elaborated
   type PCRYPT_BIT_BLOB is access CRYPT_BIT_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ALGORITHM_IDENTIFIER_x is record
      pszObjId : LPSTR;
      Parameters : CRYPT_OBJID_BLOB;
   end record;
   subtype CRYPT_ALGORITHM_IDENTIFIER is CRYPT_ALGORITHM_IDENTIFIER_x; -- CXType_Elaborated
   type PCRYPT_ALGORITHM_IDENTIFIER is access CRYPT_ALGORITHM_IDENTIFIER_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_OBJID_TABLE_x is record
      dwAlgId : DWORD;
      pszObjId : LPCSTR;
   end record;
   subtype CRYPT_OBJID_TABLE is CRYPT_OBJID_TABLE_x; -- CXType_Elaborated
   type PCRYPT_OBJID_TABLE is access CRYPT_OBJID_TABLE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_HASH_INFO_x is record
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      Hash : CRYPT_HASH_BLOB;
   end record;
   subtype CRYPT_HASH_INFO is CRYPT_HASH_INFO_x; -- CXType_Elaborated
   type PCRYPT_HASH_INFO is access CRYPT_HASH_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_EXTENSION_x is record
      pszObjId : LPSTR;
      fCritical : BOOL;
      Value : CRYPT_OBJID_BLOB;
   end record;
   subtype CERT_EXTENSION is CERT_EXTENSION_x; -- CXType_Elaborated
   type PCERT_EXTENSION is access CERT_EXTENSION_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_EXTENSION is access constant CERT_EXTENSION; -- CXType_Pointer - CXType_Typedef
   type CRYPT_ATTRIBUTE_TYPE_VALUE_x is record
      pszObjId : LPSTR;
      Value : CRYPT_OBJID_BLOB;
   end record;
   subtype CRYPT_ATTRIBUTE_TYPE_VALUE is CRYPT_ATTRIBUTE_TYPE_VALUE_x; -- CXType_Elaborated
   type PCRYPT_ATTRIBUTE_TYPE_VALUE is access CRYPT_ATTRIBUTE_TYPE_VALUE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ATTRIBUTE_x is record
      pszObjId : LPSTR;
      cValue : DWORD;
      rgValue : PCRYPT_ATTR_BLOB;
   end record;
   subtype CRYPT_ATTRIBUTE is CRYPT_ATTRIBUTE_x; -- CXType_Elaborated
   type PCRYPT_ATTRIBUTE is access CRYPT_ATTRIBUTE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ATTRIBUTES_x is record
      cAttr : DWORD;
      rgAttr : PCRYPT_ATTRIBUTE;
   end record;
   subtype CRYPT_ATTRIBUTES is CRYPT_ATTRIBUTES_x; -- CXType_Elaborated
   type PCRYPT_ATTRIBUTES is access CRYPT_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_RDN_ATTR_x is record
      pszObjId : LPSTR;
      dwValueType : DWORD;
      Value : CERT_RDN_VALUE_BLOB;
   end record;
   subtype CERT_RDN_ATTR is CERT_RDN_ATTR_x; -- CXType_Elaborated
   type PCERT_RDN_ATTR is access CERT_RDN_ATTR_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_RDN_x is record
      cRDNAttr : DWORD;
      rgRDNAttr : PCERT_RDN_ATTR;
   end record;
   subtype CERT_RDN is CERT_RDN_x; -- CXType_Elaborated
   type PCERT_RDN is access CERT_RDN_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_NAME_INFO_x is record
      cRDN : DWORD;
      rgRDN : PCERT_RDN;
   end record;
   subtype CERT_NAME_INFO is CERT_NAME_INFO_x; -- CXType_Elaborated
   type PCERT_NAME_INFO is access CERT_NAME_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_NAME_VALUE_x is record
      dwValueType : DWORD;
      Value : CERT_RDN_VALUE_BLOB;
   end record;
   subtype CERT_NAME_VALUE is CERT_NAME_VALUE_x; -- CXType_Elaborated
   type PCERT_NAME_VALUE is access CERT_NAME_VALUE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_PUBLIC_KEY_INFO_x is record
      Algorithm : CRYPT_ALGORITHM_IDENTIFIER;
      PublicKey : CRYPT_BIT_BLOB;
   end record;
   subtype CERT_PUBLIC_KEY_INFO is CERT_PUBLIC_KEY_INFO_x; -- CXType_Elaborated
   type PCERT_PUBLIC_KEY_INFO is access CERT_PUBLIC_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ECC_PRIVATE_KEY_INFO_x is record
      dwVersion : DWORD;
      PrivateKey : CRYPT_DER_BLOB;
      szCurveOid : LPSTR;
      PublicKey : CRYPT_BIT_BLOB;
   end record;
   subtype CRYPT_ECC_PRIVATE_KEY_INFO is CRYPT_ECC_PRIVATE_KEY_INFO_x; -- CXType_Elaborated
   type PCRYPT_ECC_PRIVATE_KEY_INFO is access CRYPT_ECC_PRIVATE_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PRIVATE_KEY_INFO_x is record
      Version : DWORD;
      Algorithm : CRYPT_ALGORITHM_IDENTIFIER;
      PrivateKey : CRYPT_DER_BLOB;
      pAttributes : PCRYPT_ATTRIBUTES;
   end record;
   subtype CRYPT_PRIVATE_KEY_INFO is CRYPT_PRIVATE_KEY_INFO_x; -- CXType_Elaborated
   type PCRYPT_PRIVATE_KEY_INFO is access CRYPT_PRIVATE_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ENCRYPTED_PRIVATE_KEY_INFO_x is record
      EncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedPrivateKey : CRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_ENCRYPTED_PRIVATE_KEY_INFO is CRYPT_ENCRYPTED_PRIVATE_KEY_INFO_x; -- CXType_Elaborated
   type PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO is access CRYPT_ENCRYPTED_PRIVATE_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PCRYPT_DECRYPT_PRIVATE_KEY_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (CRYPT_ALGORITHM_IDENTIFIER, CRYPT_DATA_BLOB, BYTE *, DWORD *, LPVOID)
   subtype PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (CRYPT_ALGORITHM_IDENTIFIER *, CRYPT_DATA_BLOB *, BYTE *, DWORD *, LPVOID)
   subtype PCRYPT_RESOLVE_HCRYPTPROV_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (CRYPT_PRIVATE_KEY_INFO *, HCRYPTPROV *, LPVOID)
   type CRYPT_PKCS8_IMPORT_PARAMS_x is record
      PrivateKey : CRYPT_DIGEST_BLOB;
      pResolvehCryptProvFunc : PCRYPT_RESOLVE_HCRYPTPROV_FUNC;
      pVoidResolveFunc : LPVOID;
      pDecryptPrivateKeyFunc : PCRYPT_DECRYPT_PRIVATE_KEY_FUNC;
      pVoidDecryptFunc : LPVOID;
   end record;
   subtype CRYPT_PKCS8_IMPORT_PARAMS is CRYPT_PKCS8_IMPORT_PARAMS_x; -- CXType_Elaborated
   type PCRYPT_PKCS8_IMPORT_PARAMS is access CRYPT_PKCS8_IMPORT_PARAMS_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS is CRYPT_PKCS8_IMPORT_PARAMS_x; -- CXType_Elaborated
   type PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS is access CRYPT_PKCS8_IMPORT_PARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PKCS8_EXPORT_PARAMS_x is record
      hCryptProv_x : HCRYPTPROV;
      dwKeySpec : DWORD;
      pszPrivateKeyObjId : LPSTR;
      pEncryptPrivateKeyFunc : PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC;
      pVoidEncryptFunc : LPVOID;
   end record;
   subtype CRYPT_PKCS8_EXPORT_PARAMS is CRYPT_PKCS8_EXPORT_PARAMS_x; -- CXType_Elaborated
   type PCRYPT_PKCS8_EXPORT_PARAMS is access CRYPT_PKCS8_EXPORT_PARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_INFO_x is record
      dwVersion : DWORD;
      SerialNumber : CRYPT_INTEGER_BLOB;
      SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      Issuer : CERT_NAME_BLOB;
      NotBefore : FILETIME;
      NotAfter : FILETIME;
      Subject : CERT_NAME_BLOB;
      SubjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO;
      IssuerUniqueId : CRYPT_BIT_BLOB;
      SubjectUniqueId : CRYPT_BIT_BLOB;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CERT_INFO is CERT_INFO_x; -- CXType_Elaborated
   type PCERT_INFO is access CERT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRL_ENTRY_x is record
      SerialNumber : CRYPT_INTEGER_BLOB;
      RevocationDate : FILETIME;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CRL_ENTRY is CRL_ENTRY_x; -- CXType_Elaborated
   type PCRL_ENTRY is access CRL_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type CRL_INFO_x is record
      dwVersion : DWORD;
      SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      Issuer : CERT_NAME_BLOB;
      ThisUpdate : FILETIME;
      NextUpdate : FILETIME;
      cCRLEntry : DWORD;
      rgCRLEntry : PCRL_ENTRY;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CRL_INFO is CRL_INFO_x; -- CXType_Elaborated
   type PCRL_INFO is access CRL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_OR_CRL_BLOB_x is record
      dwChoice : DWORD;
      cbEncoded : DWORD;
      pbEncoded : access BYTE;
   end record;
   subtype CERT_OR_CRL_BLOB is CERT_OR_CRL_BLOB_x; -- CXType_Elaborated
   type PCERT_OR_CRL_BLOB is access CERT_OR_CRL_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_OR_CRL_BUNDLE_x is record
      cItem : DWORD;
      rgItem : PCERT_OR_CRL_BLOB;
   end record;
   subtype CERT_OR_CRL_BUNDLE is CERT_OR_CRL_BUNDLE_x; -- CXType_Elaborated
   type PCERT_OR_CRL_BUNDLE is access CERT_OR_CRL_BUNDLE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REQUEST_INFO_x is record
      dwVersion : DWORD;
      Subject : CERT_NAME_BLOB;
      SubjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO;
      cAttribute : DWORD;
      rgAttribute : PCRYPT_ATTRIBUTE;
   end record;
   subtype CERT_REQUEST_INFO is CERT_REQUEST_INFO_x; -- CXType_Elaborated
   type PCERT_REQUEST_INFO is access CERT_REQUEST_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_KEYGEN_REQUEST_INFO_x is record
      dwVersion : DWORD;
      SubjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO;
      pwszChallengeString : LPWSTR;
   end record;
   subtype CERT_KEYGEN_REQUEST_INFO is CERT_KEYGEN_REQUEST_INFO_x; -- CXType_Elaborated
   type PCERT_KEYGEN_REQUEST_INFO is access CERT_KEYGEN_REQUEST_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_SIGNED_CONTENT_INFO_x is record
      ToBeSigned : CRYPT_DER_BLOB;
      SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      Signature : CRYPT_BIT_BLOB;
   end record;
   subtype CERT_SIGNED_CONTENT_INFO is CERT_SIGNED_CONTENT_INFO_x; -- CXType_Elaborated
   type PCERT_SIGNED_CONTENT_INFO is access CERT_SIGNED_CONTENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CTL_USAGE_x is record
      cUsageIdentifier : DWORD;
      rgpszUsageIdentifier : access LPSTR;
   end record;
   subtype CTL_USAGE is CTL_USAGE_x; -- CXType_Elaborated
   type PCTL_USAGE is access CTL_USAGE_x; -- CXType_Pointer - CXType_Elaborated
   subtype CERT_ENHKEY_USAGE is CTL_USAGE_x; -- CXType_Elaborated
   type PCERT_ENHKEY_USAGE is access CTL_USAGE_x; -- CXType_Pointer - CXType_Elaborated
   type PCCTL_USAGE is access constant CTL_USAGE; -- CXType_Pointer - CXType_Typedef
   type PCCERT_ENHKEY_USAGE is access constant CERT_ENHKEY_USAGE; -- CXType_Pointer - CXType_Typedef
   type CTL_ENTRY_x is record
      SubjectIdentifier : CRYPT_DATA_BLOB;
      cAttribute : DWORD;
      rgAttribute : PCRYPT_ATTRIBUTE;
   end record;
   subtype CTL_ENTRY is CTL_ENTRY_x; -- CXType_Elaborated
   type PCTL_ENTRY is access CTL_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type CTL_INFO_x is record
      dwVersion : DWORD;
      SubjectUsage : CTL_USAGE;
      ListIdentifier : CRYPT_DATA_BLOB;
      SequenceNumber : CRYPT_INTEGER_BLOB;
      ThisUpdate : FILETIME;
      NextUpdate : FILETIME;
      SubjectAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      cCTLEntry : DWORD;
      rgCTLEntry : PCTL_ENTRY;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CTL_INFO is CTL_INFO_x; -- CXType_Elaborated
   type PCTL_INFO is access CTL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_TIME_STAMP_REQUEST_INFO_x is record
      pszTimeStampAlgorithm : LPSTR;
      pszContentType : LPSTR;
      Content : CRYPT_OBJID_BLOB;
      cAttribute : DWORD;
      rgAttribute : PCRYPT_ATTRIBUTE;
   end record;
   subtype CRYPT_TIME_STAMP_REQUEST_INFO is CRYPT_TIME_STAMP_REQUEST_INFO_x; -- CXType_Elaborated
   type PCRYPT_TIME_STAMP_REQUEST_INFO is access CRYPT_TIME_STAMP_REQUEST_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ENROLLMENT_NAME_VALUE_PAIR_x is record
      pwszName : LPWSTR;
      pwszValue : LPWSTR;
   end record;
   subtype CRYPT_ENROLLMENT_NAME_VALUE_PAIR is CRYPT_ENROLLMENT_NAME_VALUE_PAIR_x; -- CXType_Elaborated
   type PCRYPT_ENROLLMENT_NAME_VALUE_PAIR is access CRYPT_ENROLLMENT_NAME_VALUE_PAIR_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CSP_PROVIDER_x is record
      dwKeySpec : DWORD;
      pwszProviderName : LPWSTR;
      Signature : CRYPT_BIT_BLOB;
   end record;
   subtype CRYPT_CSP_PROVIDER is CRYPT_CSP_PROVIDER_x; -- CXType_Elaborated
   type PCRYPT_CSP_PROVIDER is access CRYPT_CSP_PROVIDER_x; -- CXType_Pointer - CXType_Elaborated
   function CryptFormatObject(
      dwCertEncodingType : DWORD;
      dwFormatType : DWORD;
      dwFormatStrType : DWORD;
      pFormatStruct : access Void;
      lpszStructType : LPCSTR;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      pbFormat : access Void;
      pcbFormat : access DWORD
   ) return BOOL;
   pragma import (C,CryptFormatObject,"CryptFormatObject");
   subtype PFN_CRYPT_ALLOC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] LPVOID (size_t)
   subtype PFN_CRYPT_FREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID)
   type CRYPT_ENCODE_PARA_x is record
      cbSize : DWORD;
      pfnAlloc : PFN_CRYPT_ALLOC;
      pfnFree : PFN_CRYPT_FREE;
   end record;
   subtype CRYPT_ENCODE_PARA is CRYPT_ENCODE_PARA_x; -- CXType_Elaborated
   type PCRYPT_ENCODE_PARA is access CRYPT_ENCODE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CryptEncodeObjectEx(
      dwCertEncodingType : DWORD;
      lpszStructType : LPCSTR;
      pvStructInfo : access Void;
      dwFlags : DWORD;
      pEncodePara : PCRYPT_ENCODE_PARA;
      pvEncoded : access Void;
      pcbEncoded : access DWORD
   ) return BOOL;
   pragma import (C,CryptEncodeObjectEx,"CryptEncodeObjectEx");
   function CryptEncodeObject(
      dwCertEncodingType : DWORD;
      lpszStructType : LPCSTR;
      pvStructInfo : access Void;
      pbEncoded : access BYTE;
      pcbEncoded : access DWORD
   ) return BOOL;
   pragma import (C,CryptEncodeObject,"CryptEncodeObject");
   type CRYPT_DECODE_PARA_x is record
      cbSize : DWORD;
      pfnAlloc : PFN_CRYPT_ALLOC;
      pfnFree : PFN_CRYPT_FREE;
   end record;
   subtype CRYPT_DECODE_PARA is CRYPT_DECODE_PARA_x; -- CXType_Elaborated
   type PCRYPT_DECODE_PARA is access CRYPT_DECODE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CryptDecodeObjectEx(
      dwCertEncodingType : DWORD;
      lpszStructType : LPCSTR;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      dwFlags : DWORD;
      pDecodePara : PCRYPT_DECODE_PARA;
      pvStructInfo : access Void;
      pcbStructInfo : access DWORD
   ) return BOOL;
   pragma import (C,CryptDecodeObjectEx,"CryptDecodeObjectEx");
   function CryptDecodeObject(
      dwCertEncodingType : DWORD;
      lpszStructType : LPCSTR;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      dwFlags : DWORD;
      pvStructInfo : access Void;
      pcbStructInfo : access DWORD
   ) return BOOL;
   pragma import (C,CryptDecodeObject,"CryptDecodeObject");
   type CERT_EXTENSIONS_x is record
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CERT_EXTENSIONS is CERT_EXTENSIONS_x; -- CXType_Elaborated
   type PCERT_EXTENSIONS is access CERT_EXTENSIONS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_AUTHORITY_KEY_ID_INFO_x is record
      KeyId : CRYPT_DATA_BLOB;
      CertIssuer : CERT_NAME_BLOB;
      CertSerialNumber : CRYPT_INTEGER_BLOB;
   end record;
   subtype CERT_AUTHORITY_KEY_ID_INFO is CERT_AUTHORITY_KEY_ID_INFO_x; -- CXType_Elaborated
   type PCERT_AUTHORITY_KEY_ID_INFO is access CERT_AUTHORITY_KEY_ID_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_PRIVATE_KEY_VALIDITY_x is record
      NotBefore : FILETIME;
      NotAfter : FILETIME;
   end record;
   subtype CERT_PRIVATE_KEY_VALIDITY is CERT_PRIVATE_KEY_VALIDITY_x; -- CXType_Elaborated
   type PCERT_PRIVATE_KEY_VALIDITY is access CERT_PRIVATE_KEY_VALIDITY_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_KEY_ATTRIBUTES_INFO_x is record
      KeyId : CRYPT_DATA_BLOB;
      IntendedKeyUsage : CRYPT_BIT_BLOB;
      pPrivateKeyUsagePeriod : PCERT_PRIVATE_KEY_VALIDITY;
   end record;
   subtype CERT_KEY_ATTRIBUTES_INFO is CERT_KEY_ATTRIBUTES_INFO_x; -- CXType_Elaborated
   type PCERT_KEY_ATTRIBUTES_INFO is access CERT_KEY_ATTRIBUTES_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_ID_x is record
      cCertPolicyElementId : DWORD;
      rgpszCertPolicyElementId : access LPSTR;
   end record;
   subtype CERT_POLICY_ID is CERT_POLICY_ID_x; -- CXType_Elaborated
   type PCERT_POLICY_ID is access CERT_POLICY_ID_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_KEY_USAGE_RESTRICTION_INFO_x is record
      cCertPolicyId : DWORD;
      rgCertPolicyId : PCERT_POLICY_ID;
      RestrictedKeyUsage : CRYPT_BIT_BLOB;
   end record;
   subtype CERT_KEY_USAGE_RESTRICTION_INFO is CERT_KEY_USAGE_RESTRICTION_INFO_x; -- CXType_Elaborated
   type PCERT_KEY_USAGE_RESTRICTION_INFO is access CERT_KEY_USAGE_RESTRICTION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_OTHER_NAME_x is record
      pszObjId : LPSTR;
      Value : CRYPT_OBJID_BLOB;
   end record;
   subtype CERT_OTHER_NAME is CERT_OTHER_NAME_x; -- CXType_Elaborated
   type PCERT_OTHER_NAME is access CERT_OTHER_NAME_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_ALT_NAME_ENTRY_x is record
      dwAltNameChoice : DWORD;
   end record;
   subtype CERT_ALT_NAME_ENTRY is CERT_ALT_NAME_ENTRY_x; -- CXType_Elaborated
   type PCERT_ALT_NAME_ENTRY is access CERT_ALT_NAME_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_ALT_NAME_INFO_x is record
      cAltEntry : DWORD;
      rgAltEntry : PCERT_ALT_NAME_ENTRY;
   end record;
   subtype CERT_ALT_NAME_INFO is CERT_ALT_NAME_INFO_x; -- CXType_Elaborated
   type PCERT_ALT_NAME_INFO is access CERT_ALT_NAME_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_BASIC_CONSTRAINTS_INFO_x is record
      SubjectType : CRYPT_BIT_BLOB;
      fPathLenConstraint : BOOL;
      dwPathLenConstraint : DWORD;
      cSubtreesConstraint : DWORD;
      rgSubtreesConstraint : access CERT_NAME_BLOB;
   end record;
   subtype CERT_BASIC_CONSTRAINTS_INFO is CERT_BASIC_CONSTRAINTS_INFO_x; -- CXType_Elaborated
   type PCERT_BASIC_CONSTRAINTS_INFO is access CERT_BASIC_CONSTRAINTS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_BASIC_CONSTRAINTS2_INFO_x is record
      fCA : BOOL;
      fPathLenConstraint : BOOL;
      dwPathLenConstraint : DWORD;
   end record;
   subtype CERT_BASIC_CONSTRAINTS2_INFO is CERT_BASIC_CONSTRAINTS2_INFO_x; -- CXType_Elaborated
   type PCERT_BASIC_CONSTRAINTS2_INFO is access CERT_BASIC_CONSTRAINTS2_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_QUALIFIER_INFO_x is record
      pszPolicyQualifierId : LPSTR;
      Qualifier : CRYPT_OBJID_BLOB;
   end record;
   subtype CERT_POLICY_QUALIFIER_INFO is CERT_POLICY_QUALIFIER_INFO_x; -- CXType_Elaborated
   type PCERT_POLICY_QUALIFIER_INFO is access CERT_POLICY_QUALIFIER_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_INFO_x is record
      pszPolicyIdentifier : LPSTR;
      cPolicyQualifier : DWORD;
      rgPolicyQualifier : access CERT_POLICY_QUALIFIER_INFO;
   end record;
   subtype CERT_POLICY_INFO is CERT_POLICY_INFO_x; -- CXType_Elaborated
   type PCERT_POLICY_INFO is access CERT_POLICY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICIES_INFO_x is record
      cPolicyInfo : DWORD;
      rgPolicyInfo : access CERT_POLICY_INFO;
   end record;
   subtype CERT_POLICIES_INFO is CERT_POLICIES_INFO_x; -- CXType_Elaborated
   type PCERT_POLICIES_INFO is access CERT_POLICIES_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_QUALIFIER_NOTICE_REFERENCE_x is record
      pszOrganization : LPSTR;
      cNoticeNumbers : DWORD;
      rgNoticeNumbers : access Interfaces.C.Int;
   end record;
   subtype CERT_POLICY_QUALIFIER_NOTICE_REFERENCE is CERT_POLICY_QUALIFIER_NOTICE_REFERENCE_x; -- CXType_Elaborated
   type PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE is access CERT_POLICY_QUALIFIER_NOTICE_REFERENCE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_QUALIFIER_USER_NOTICE_x is record
      pNoticeReference : access CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
      pszDisplayText : LPWSTR;
   end record;
   subtype CERT_POLICY_QUALIFIER_USER_NOTICE is CERT_POLICY_QUALIFIER_USER_NOTICE_x; -- CXType_Elaborated
   type PCERT_POLICY_QUALIFIER_USER_NOTICE is access CERT_POLICY_QUALIFIER_USER_NOTICE_x; -- CXType_Pointer - CXType_Elaborated
   type CPS_URLS_x is record
      pszURL : LPWSTR;
      pAlgorithm : access CRYPT_ALGORITHM_IDENTIFIER;
      pDigest : access CRYPT_DATA_BLOB;
   end record;
   subtype CPS_URLS is CPS_URLS_x; -- CXType_Elaborated
   type PCPS_URLS is access CPS_URLS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY95_QUALIFIER1_x is record
      pszPracticesReference : LPWSTR;
      pszNoticeIdentifier : LPSTR;
      pszNSINoticeIdentifier : LPSTR;
      cCPSURLs : DWORD;
      rgCPSURLs : access CPS_URLS;
   end record;
   subtype CERT_POLICY95_QUALIFIER1 is CERT_POLICY95_QUALIFIER1_x; -- CXType_Elaborated
   type PCERT_POLICY95_QUALIFIER1 is access CERT_POLICY95_QUALIFIER1_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_MAPPING_x is record
      pszIssuerDomainPolicy : LPSTR;
      pszSubjectDomainPolicy : LPSTR;
   end record;
   subtype CERT_POLICY_MAPPING is CERT_POLICY_MAPPING_x; -- CXType_Elaborated
   type PCERT_POLICY_MAPPING is access CERT_POLICY_MAPPING_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_MAPPINGS_INFO_x is record
      cPolicyMapping : DWORD;
      rgPolicyMapping : PCERT_POLICY_MAPPING;
   end record;
   subtype CERT_POLICY_MAPPINGS_INFO is CERT_POLICY_MAPPINGS_INFO_x; -- CXType_Elaborated
   type PCERT_POLICY_MAPPINGS_INFO is access CERT_POLICY_MAPPINGS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_POLICY_CONSTRAINTS_INFO_x is record
      fRequireExplicitPolicy : BOOL;
      dwRequireExplicitPolicySkipCerts : DWORD;
      fInhibitPolicyMapping : BOOL;
      dwInhibitPolicyMappingSkipCerts : DWORD;
   end record;
   subtype CERT_POLICY_CONSTRAINTS_INFO is CERT_POLICY_CONSTRAINTS_INFO_x; -- CXType_Elaborated
   type PCERT_POLICY_CONSTRAINTS_INFO is access CERT_POLICY_CONSTRAINTS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY_x is record
      pszObjId : LPSTR;
      cValue : DWORD;
      rgValue : PCRYPT_DER_BLOB;
   end record;
   subtype CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY is CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY_x; -- CXType_Elaborated
   type PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY is access CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CONTENT_INFO_x is record
      pszObjId : LPSTR;
      Content : CRYPT_DER_BLOB;
   end record;
   subtype CRYPT_CONTENT_INFO is CRYPT_CONTENT_INFO_x; -- CXType_Elaborated
   type PCRYPT_CONTENT_INFO is access CRYPT_CONTENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_SEQUENCE_OF_ANY_x is record
      cValue : DWORD;
      rgValue : PCRYPT_DER_BLOB;
   end record;
   subtype CRYPT_SEQUENCE_OF_ANY is CRYPT_SEQUENCE_OF_ANY_x; -- CXType_Elaborated
   type PCRYPT_SEQUENCE_OF_ANY is access CRYPT_SEQUENCE_OF_ANY_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_AUTHORITY_KEY_ID2_INFO_x is record
      KeyId : CRYPT_DATA_BLOB;
      AuthorityCertIssuer : CERT_ALT_NAME_INFO;
      AuthorityCertSerialNumber : CRYPT_INTEGER_BLOB;
   end record;
   subtype CERT_AUTHORITY_KEY_ID2_INFO is CERT_AUTHORITY_KEY_ID2_INFO_x; -- CXType_Elaborated
   type PCERT_AUTHORITY_KEY_ID2_INFO is access CERT_AUTHORITY_KEY_ID2_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_ACCESS_DESCRIPTION_x is record
      pszAccessMethod : LPSTR;
      AccessLocation : CERT_ALT_NAME_ENTRY;
   end record;
   subtype CERT_ACCESS_DESCRIPTION is CERT_ACCESS_DESCRIPTION_x; -- CXType_Elaborated
   type PCERT_ACCESS_DESCRIPTION is access CERT_ACCESS_DESCRIPTION_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_AUTHORITY_INFO_ACCESS_x is record
      cAccDescr : DWORD;
      rgAccDescr : PCERT_ACCESS_DESCRIPTION;
   end record;
   subtype CERT_AUTHORITY_INFO_ACCESS is CERT_AUTHORITY_INFO_ACCESS_x; -- CXType_Elaborated
   type PCERT_AUTHORITY_INFO_ACCESS is access CERT_AUTHORITY_INFO_ACCESS_x; -- CXType_Pointer - CXType_Elaborated
   subtype CERT_SUBJECT_INFO_ACCESS is CERT_AUTHORITY_INFO_ACCESS_x; -- CXType_Elaborated
   type PCERT_SUBJECT_INFO_ACCESS is access CERT_AUTHORITY_INFO_ACCESS_x; -- CXType_Pointer - CXType_Elaborated
   type CRL_DIST_POINT_NAME_x is record
      dwDistPointNameChoice : DWORD;
   end record;
   subtype CRL_DIST_POINT_NAME is CRL_DIST_POINT_NAME_x; -- CXType_Elaborated
   type PCRL_DIST_POINT_NAME is access CRL_DIST_POINT_NAME_x; -- CXType_Pointer - CXType_Elaborated
   type CRL_DIST_POINT_x is record
      DistPointName : CRL_DIST_POINT_NAME;
      ReasonFlags : CRYPT_BIT_BLOB;
      CRLIssuer : CERT_ALT_NAME_INFO;
   end record;
   subtype CRL_DIST_POINT is CRL_DIST_POINT_x; -- CXType_Elaborated
   type PCRL_DIST_POINT is access CRL_DIST_POINT_x; -- CXType_Pointer - CXType_Elaborated
   type CRL_DIST_POINTS_INFO_x is record
      cDistPoint : DWORD;
      rgDistPoint : PCRL_DIST_POINT;
   end record;
   subtype CRL_DIST_POINTS_INFO is CRL_DIST_POINTS_INFO_x; -- CXType_Elaborated
   type PCRL_DIST_POINTS_INFO is access CRL_DIST_POINTS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CROSS_CERT_DIST_POINTS_INFO_x is record
      dwSyncDeltaTime : DWORD;
      cDistPoint : DWORD;
      rgDistPoint : PCERT_ALT_NAME_INFO;
   end record;
   subtype CROSS_CERT_DIST_POINTS_INFO is CROSS_CERT_DIST_POINTS_INFO_x; -- CXType_Elaborated
   type PCROSS_CERT_DIST_POINTS_INFO is access CROSS_CERT_DIST_POINTS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_PAIR_x is record
      Forward : CERT_BLOB;
      reverse_x : CERT_BLOB;
   end record;
   subtype CERT_PAIR is CERT_PAIR_x; -- CXType_Elaborated
   type PCERT_PAIR is access CERT_PAIR_x; -- CXType_Pointer - CXType_Elaborated
   type CRL_ISSUING_DIST_POINT_x is record
      DistPointName : CRL_DIST_POINT_NAME;
      fOnlyContainsUserCerts : BOOL;
      fOnlyContainsCACerts : BOOL;
      OnlySomeReasonFlags : CRYPT_BIT_BLOB;
      fIndirectCRL : BOOL;
   end record;
   subtype CRL_ISSUING_DIST_POINT is CRL_ISSUING_DIST_POINT_x; -- CXType_Elaborated
   type PCRL_ISSUING_DIST_POINT is access CRL_ISSUING_DIST_POINT_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_GENERAL_SUBTREE_x is record
      Base : CERT_ALT_NAME_ENTRY;
      dwMinimum : DWORD;
      fMaximum : BOOL;
      dwMaximum : DWORD;
   end record;
   subtype CERT_GENERAL_SUBTREE is CERT_GENERAL_SUBTREE_x; -- CXType_Elaborated
   type PCERT_GENERAL_SUBTREE is access CERT_GENERAL_SUBTREE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_NAME_CONSTRAINTS_INFO_x is record
      cPermittedSubtree : DWORD;
      rgPermittedSubtree : PCERT_GENERAL_SUBTREE;
      cExcludedSubtree : DWORD;
      rgExcludedSubtree : PCERT_GENERAL_SUBTREE;
   end record;
   subtype CERT_NAME_CONSTRAINTS_INFO is CERT_NAME_CONSTRAINTS_INFO_x; -- CXType_Elaborated
   type PCERT_NAME_CONSTRAINTS_INFO is access CERT_NAME_CONSTRAINTS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_DSS_PARAMETERS_x is record
      p : CRYPT_UINT_BLOB;
      q : CRYPT_UINT_BLOB;
      g : CRYPT_UINT_BLOB;
   end record;
   subtype CERT_DSS_PARAMETERS is CERT_DSS_PARAMETERS_x; -- CXType_Elaborated
   type PCERT_DSS_PARAMETERS is access CERT_DSS_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_DH_PARAMETERS_x is record
      p : CRYPT_UINT_BLOB;
      g : CRYPT_UINT_BLOB;
   end record;
   subtype CERT_DH_PARAMETERS is CERT_DH_PARAMETERS_x; -- CXType_Elaborated
   type PCERT_DH_PARAMETERS is access CERT_DH_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_ECC_SIGNATURE_x is record
      r : CRYPT_UINT_BLOB;
      s : CRYPT_UINT_BLOB;
   end record;
   subtype CERT_ECC_SIGNATURE is CERT_ECC_SIGNATURE_x; -- CXType_Elaborated
   type PCERT_ECC_SIGNATURE is access CERT_ECC_SIGNATURE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_X942_DH_VALIDATION_PARAMS_x is record
      seed : CRYPT_BIT_BLOB;
      pgenCounter : DWORD;
   end record;
   subtype CERT_X942_DH_VALIDATION_PARAMS is CERT_X942_DH_VALIDATION_PARAMS_x; -- CXType_Elaborated
   type PCERT_X942_DH_VALIDATION_PARAMS is access CERT_X942_DH_VALIDATION_PARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_X942_DH_PARAMETERS_x is record
      p : CRYPT_UINT_BLOB;
      g : CRYPT_UINT_BLOB;
      q : CRYPT_UINT_BLOB;
      j : CRYPT_UINT_BLOB;
      pValidationParams : PCERT_X942_DH_VALIDATION_PARAMS;
   end record;
   subtype CERT_X942_DH_PARAMETERS is CERT_X942_DH_PARAMETERS_x; -- CXType_Elaborated
   type PCERT_X942_DH_PARAMETERS is access CERT_X942_DH_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_X942_OTHER_INFO_x is record
      pszContentEncryptionObjId : LPSTR;
      rgbCounter : Void;
      rgbKeyLength : Void;
      PubInfo : CRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_X942_OTHER_INFO is CRYPT_X942_OTHER_INFO_x; -- CXType_Elaborated
   type PCRYPT_X942_OTHER_INFO is access CRYPT_X942_OTHER_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ECC_CMS_SHARED_INFO_x is record
      Algorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EntityUInfo : CRYPT_DATA_BLOB;
      rgbSuppPubInfo : Void;
   end record;
   subtype CRYPT_ECC_CMS_SHARED_INFO is CRYPT_ECC_CMS_SHARED_INFO_x; -- CXType_Elaborated
   type PCRYPT_ECC_CMS_SHARED_INFO is access CRYPT_ECC_CMS_SHARED_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_RC2_CBC_PARAMETERS_x is record
      dwVersion : DWORD;
      fIV : BOOL;
      rgbIV : Void;
   end record;
   subtype CRYPT_RC2_CBC_PARAMETERS is CRYPT_RC2_CBC_PARAMETERS_x; -- CXType_Elaborated
   type PCRYPT_RC2_CBC_PARAMETERS is access CRYPT_RC2_CBC_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_SMIME_CAPABILITY_x is record
      pszObjId : LPSTR;
      Parameters : CRYPT_OBJID_BLOB;
   end record;
   subtype CRYPT_SMIME_CAPABILITY is CRYPT_SMIME_CAPABILITY_x; -- CXType_Elaborated
   type PCRYPT_SMIME_CAPABILITY is access CRYPT_SMIME_CAPABILITY_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_SMIME_CAPABILITIES_x is record
      cCapability : DWORD;
      rgCapability : PCRYPT_SMIME_CAPABILITY;
   end record;
   subtype CRYPT_SMIME_CAPABILITIES is CRYPT_SMIME_CAPABILITIES_x; -- CXType_Elaborated
   type PCRYPT_SMIME_CAPABILITIES is access CRYPT_SMIME_CAPABILITIES_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_QC_STATEMENT_x is record
      pszStatementId : LPSTR;
      StatementInfo : CRYPT_OBJID_BLOB;
   end record;
   subtype CERT_QC_STATEMENT is CERT_QC_STATEMENT_x; -- CXType_Elaborated
   type PCERT_QC_STATEMENT is access CERT_QC_STATEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_QC_STATEMENTS_EXT_INFO_x is record
      cStatement : DWORD;
      rgStatement : PCERT_QC_STATEMENT;
   end record;
   subtype CERT_QC_STATEMENTS_EXT_INFO is CERT_QC_STATEMENTS_EXT_INFO_x; -- CXType_Elaborated
   type PCERT_QC_STATEMENTS_EXT_INFO is access CERT_QC_STATEMENTS_EXT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_MASK_GEN_ALGORITHM_x is record
      pszObjId : LPSTR;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
   end record;
   subtype CRYPT_MASK_GEN_ALGORITHM is CRYPT_MASK_GEN_ALGORITHM_x; -- CXType_Elaborated
   type PCRYPT_MASK_GEN_ALGORITHM is access CRYPT_MASK_GEN_ALGORITHM_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_RSA_SSA_PSS_PARAMETERS_x is record
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      MaskGenAlgorithm : CRYPT_MASK_GEN_ALGORITHM;
      dwSaltLength : DWORD;
      dwTrailerField : DWORD;
   end record;
   subtype CRYPT_RSA_SSA_PSS_PARAMETERS is CRYPT_RSA_SSA_PSS_PARAMETERS_x; -- CXType_Elaborated
   type PCRYPT_RSA_SSA_PSS_PARAMETERS is access CRYPT_RSA_SSA_PSS_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PSOURCE_ALGORITHM_x is record
      pszObjId : LPSTR;
      EncodingParameters : CRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_PSOURCE_ALGORITHM is CRYPT_PSOURCE_ALGORITHM_x; -- CXType_Elaborated
   type PCRYPT_PSOURCE_ALGORITHM is access CRYPT_PSOURCE_ALGORITHM_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_RSAES_OAEP_PARAMETERS_x is record
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      MaskGenAlgorithm : CRYPT_MASK_GEN_ALGORITHM;
      PSourceAlgorithm : CRYPT_PSOURCE_ALGORITHM;
   end record;
   subtype CRYPT_RSAES_OAEP_PARAMETERS is CRYPT_RSAES_OAEP_PARAMETERS_x; -- CXType_Elaborated
   type PCRYPT_RSAES_OAEP_PARAMETERS is access CRYPT_RSAES_OAEP_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_TAGGED_ATTRIBUTE_x is record
      dwBodyPartID : DWORD;
      Attribute : CRYPT_ATTRIBUTE;
   end record;
   subtype CMC_TAGGED_ATTRIBUTE is CMC_TAGGED_ATTRIBUTE_x; -- CXType_Elaborated
   type PCMC_TAGGED_ATTRIBUTE is access CMC_TAGGED_ATTRIBUTE_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_TAGGED_CERT_REQUEST_x is record
      dwBodyPartID : DWORD;
      SignedCertRequest : CRYPT_DER_BLOB;
   end record;
   subtype CMC_TAGGED_CERT_REQUEST is CMC_TAGGED_CERT_REQUEST_x; -- CXType_Elaborated
   type PCMC_TAGGED_CERT_REQUEST is access CMC_TAGGED_CERT_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_TAGGED_REQUEST_x is record
      dwTaggedRequestChoice : DWORD;
   end record;
   subtype CMC_TAGGED_REQUEST is CMC_TAGGED_REQUEST_x; -- CXType_Elaborated
   type PCMC_TAGGED_REQUEST is access CMC_TAGGED_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_TAGGED_CONTENT_INFO_x is record
      dwBodyPartID : DWORD;
      EncodedContentInfo : CRYPT_DER_BLOB;
   end record;
   subtype CMC_TAGGED_CONTENT_INFO is CMC_TAGGED_CONTENT_INFO_x; -- CXType_Elaborated
   type PCMC_TAGGED_CONTENT_INFO is access CMC_TAGGED_CONTENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_TAGGED_OTHER_MSG_x is record
      dwBodyPartID : DWORD;
      pszObjId : LPSTR;
      Value : CRYPT_OBJID_BLOB;
   end record;
   subtype CMC_TAGGED_OTHER_MSG is CMC_TAGGED_OTHER_MSG_x; -- CXType_Elaborated
   type PCMC_TAGGED_OTHER_MSG is access CMC_TAGGED_OTHER_MSG_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_DATA_INFO_x is record
      cTaggedAttribute : DWORD;
      rgTaggedAttribute : PCMC_TAGGED_ATTRIBUTE;
      cTaggedRequest : DWORD;
      rgTaggedRequest : PCMC_TAGGED_REQUEST;
      cTaggedContentInfo : DWORD;
      rgTaggedContentInfo : PCMC_TAGGED_CONTENT_INFO;
      cTaggedOtherMsg : DWORD;
      rgTaggedOtherMsg : PCMC_TAGGED_OTHER_MSG;
   end record;
   subtype CMC_DATA_INFO is CMC_DATA_INFO_x; -- CXType_Elaborated
   type PCMC_DATA_INFO is access CMC_DATA_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_RESPONSE_INFO_x is record
      cTaggedAttribute : DWORD;
      rgTaggedAttribute : PCMC_TAGGED_ATTRIBUTE;
      cTaggedContentInfo : DWORD;
      rgTaggedContentInfo : PCMC_TAGGED_CONTENT_INFO;
      cTaggedOtherMsg : DWORD;
      rgTaggedOtherMsg : PCMC_TAGGED_OTHER_MSG;
   end record;
   subtype CMC_RESPONSE_INFO is CMC_RESPONSE_INFO_x; -- CXType_Elaborated
   type PCMC_RESPONSE_INFO is access CMC_RESPONSE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_PEND_INFO_x is record
      PendToken : CRYPT_DATA_BLOB;
      PendTime : FILETIME;
   end record;
   subtype CMC_PEND_INFO is CMC_PEND_INFO_x; -- CXType_Elaborated
   type PCMC_PEND_INFO is access CMC_PEND_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_STATUS_INFO_x is record
      dwStatus : DWORD;
      cBodyList : DWORD;
      rgdwBodyList : access DWORD;
      pwszStatusString : LPWSTR;
      dwOtherInfoChoice : DWORD;
   end record;
   subtype CMC_STATUS_INFO is CMC_STATUS_INFO_x; -- CXType_Elaborated
   type PCMC_STATUS_INFO is access CMC_STATUS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_ADD_EXTENSIONS_INFO_x is record
      dwCmcDataReference : DWORD;
      cCertReference : DWORD;
      rgdwCertReference : access DWORD;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CMC_ADD_EXTENSIONS_INFO is CMC_ADD_EXTENSIONS_INFO_x; -- CXType_Elaborated
   type PCMC_ADD_EXTENSIONS_INFO is access CMC_ADD_EXTENSIONS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMC_ADD_ATTRIBUTES_INFO_x is record
      dwCmcDataReference : DWORD;
      cCertReference : DWORD;
      rgdwCertReference : access DWORD;
      cAttribute : DWORD;
      rgAttribute : PCRYPT_ATTRIBUTE;
   end record;
   subtype CMC_ADD_ATTRIBUTES_INFO is CMC_ADD_ATTRIBUTES_INFO_x; -- CXType_Elaborated
   type PCMC_ADD_ATTRIBUTES_INFO is access CMC_ADD_ATTRIBUTES_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_TEMPLATE_EXT_x is record
      pszObjId : LPSTR;
      dwMajorVersion : DWORD;
      fMinorVersion : BOOL;
      dwMinorVersion : DWORD;
   end record;
   subtype CERT_TEMPLATE_EXT is CERT_TEMPLATE_EXT_x; -- CXType_Elaborated
   type PCERT_TEMPLATE_EXT is access CERT_TEMPLATE_EXT_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_HASHED_URL_x is record
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      Hash : CRYPT_HASH_BLOB;
      pwszUrl : LPWSTR;
   end record;
   subtype CERT_HASHED_URL is CERT_HASHED_URL_x; -- CXType_Elaborated
   type PCERT_HASHED_URL is access CERT_HASHED_URL_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_DETAILS_x is record
      pwszMimeType : LPWSTR;
      cHashedUrl : DWORD;
      rgHashedUrl : PCERT_HASHED_URL;
   end record;
   subtype CERT_LOGOTYPE_DETAILS is CERT_LOGOTYPE_DETAILS_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_DETAILS is access CERT_LOGOTYPE_DETAILS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_REFERENCE_x is record
      cHashedUrl : DWORD;
      rgHashedUrl : PCERT_HASHED_URL;
   end record;
   subtype CERT_LOGOTYPE_REFERENCE is CERT_LOGOTYPE_REFERENCE_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_REFERENCE is access CERT_LOGOTYPE_REFERENCE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_IMAGE_INFO_x is record
      dwLogotypeImageInfoChoice : DWORD;
      dwFileSize : DWORD;
      dwXSize : DWORD;
      dwYSize : DWORD;
      dwLogotypeImageResolutionChoice : DWORD;
      pwszLanguage : LPWSTR;
   end record;
   subtype CERT_LOGOTYPE_IMAGE_INFO is CERT_LOGOTYPE_IMAGE_INFO_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_IMAGE_INFO is access CERT_LOGOTYPE_IMAGE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_IMAGE_x is record
      LogotypeDetails : CERT_LOGOTYPE_DETAILS;
      pLogotypeImageInfo : PCERT_LOGOTYPE_IMAGE_INFO;
   end record;
   subtype CERT_LOGOTYPE_IMAGE is CERT_LOGOTYPE_IMAGE_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_IMAGE is access CERT_LOGOTYPE_IMAGE_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_AUDIO_INFO_x is record
      dwFileSize : DWORD;
      dwPlayTime : DWORD;
      dwChannels : DWORD;
      dwSampleRate : DWORD;
      pwszLanguage : LPWSTR;
   end record;
   subtype CERT_LOGOTYPE_AUDIO_INFO is CERT_LOGOTYPE_AUDIO_INFO_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_AUDIO_INFO is access CERT_LOGOTYPE_AUDIO_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_AUDIO_x is record
      LogotypeDetails : CERT_LOGOTYPE_DETAILS;
      pLogotypeAudioInfo : PCERT_LOGOTYPE_AUDIO_INFO;
   end record;
   subtype CERT_LOGOTYPE_AUDIO is CERT_LOGOTYPE_AUDIO_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_AUDIO is access CERT_LOGOTYPE_AUDIO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_DATA_x is record
      cLogotypeImage : DWORD;
      rgLogotypeImage : PCERT_LOGOTYPE_IMAGE;
      cLogotypeAudio : DWORD;
      rgLogotypeAudio : PCERT_LOGOTYPE_AUDIO;
   end record;
   subtype CERT_LOGOTYPE_DATA is CERT_LOGOTYPE_DATA_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_DATA is access CERT_LOGOTYPE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_INFO_x is record
      dwLogotypeInfoChoice : DWORD;
   end record;
   subtype CERT_LOGOTYPE_INFO is CERT_LOGOTYPE_INFO_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_INFO is access CERT_LOGOTYPE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_OTHER_LOGOTYPE_INFO_x is record
      pszObjId : LPSTR;
      LogotypeInfo : CERT_LOGOTYPE_INFO;
   end record;
   subtype CERT_OTHER_LOGOTYPE_INFO is CERT_OTHER_LOGOTYPE_INFO_x; -- CXType_Elaborated
   type PCERT_OTHER_LOGOTYPE_INFO is access CERT_OTHER_LOGOTYPE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LOGOTYPE_EXT_INFO_x is record
      cCommunityLogo : DWORD;
      rgCommunityLogo : PCERT_LOGOTYPE_INFO;
      pIssuerLogo : PCERT_LOGOTYPE_INFO;
      pSubjectLogo : PCERT_LOGOTYPE_INFO;
      cOtherLogo : DWORD;
      rgOtherLogo : PCERT_OTHER_LOGOTYPE_INFO;
   end record;
   subtype CERT_LOGOTYPE_EXT_INFO is CERT_LOGOTYPE_EXT_INFO_x; -- CXType_Elaborated
   type PCERT_LOGOTYPE_EXT_INFO is access CERT_LOGOTYPE_EXT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_BIOMETRIC_DATA_x is record
      dwTypeOfBiometricDataChoice : DWORD;
      HashedUrl : CERT_HASHED_URL;
   end record;
   subtype CERT_BIOMETRIC_DATA is CERT_BIOMETRIC_DATA_x; -- CXType_Elaborated
   type PCERT_BIOMETRIC_DATA is access CERT_BIOMETRIC_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_BIOMETRIC_EXT_INFO_x is record
      cBiometricData : DWORD;
      rgBiometricData : PCERT_BIOMETRIC_DATA;
   end record;
   subtype CERT_BIOMETRIC_EXT_INFO is CERT_BIOMETRIC_EXT_INFO_x; -- CXType_Elaborated
   type PCERT_BIOMETRIC_EXT_INFO is access CERT_BIOMETRIC_EXT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_SIGNATURE_INFO_x is record
      SignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      Signature : CRYPT_BIT_BLOB;
      cCertEncoded : DWORD;
      rgCertEncoded : PCERT_BLOB;
   end record;
   subtype OCSP_SIGNATURE_INFO is OCSP_SIGNATURE_INFO_x; -- CXType_Elaborated
   type POCSP_SIGNATURE_INFO is access OCSP_SIGNATURE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_SIGNED_REQUEST_INFO_x is record
      ToBeSigned : CRYPT_DER_BLOB;
      pOptionalSignatureInfo : POCSP_SIGNATURE_INFO;
   end record;
   subtype OCSP_SIGNED_REQUEST_INFO is OCSP_SIGNED_REQUEST_INFO_x; -- CXType_Elaborated
   type POCSP_SIGNED_REQUEST_INFO is access OCSP_SIGNED_REQUEST_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_CERT_ID_x is record
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      IssuerNameHash : CRYPT_HASH_BLOB;
      IssuerKeyHash : CRYPT_HASH_BLOB;
      SerialNumber : CRYPT_INTEGER_BLOB;
   end record;
   subtype OCSP_CERT_ID is OCSP_CERT_ID_x; -- CXType_Elaborated
   type POCSP_CERT_ID is access OCSP_CERT_ID_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_REQUEST_ENTRY_x is record
      CertId : OCSP_CERT_ID;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype OCSP_REQUEST_ENTRY is OCSP_REQUEST_ENTRY_x; -- CXType_Elaborated
   type POCSP_REQUEST_ENTRY is access OCSP_REQUEST_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_REQUEST_INFO_x is record
      dwVersion : DWORD;
      pRequestorName : PCERT_ALT_NAME_ENTRY;
      cRequestEntry : DWORD;
      rgRequestEntry : POCSP_REQUEST_ENTRY;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype OCSP_REQUEST_INFO is OCSP_REQUEST_INFO_x; -- CXType_Elaborated
   type POCSP_REQUEST_INFO is access OCSP_REQUEST_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_RESPONSE_INFO_x is record
      dwStatus : DWORD;
      pszObjId : LPSTR;
      Value : CRYPT_OBJID_BLOB;
   end record;
   subtype OCSP_RESPONSE_INFO is OCSP_RESPONSE_INFO_x; -- CXType_Elaborated
   type POCSP_RESPONSE_INFO is access OCSP_RESPONSE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_BASIC_SIGNED_RESPONSE_INFO_x is record
      ToBeSigned : CRYPT_DER_BLOB;
      SignatureInfo : OCSP_SIGNATURE_INFO;
   end record;
   subtype OCSP_BASIC_SIGNED_RESPONSE_INFO is OCSP_BASIC_SIGNED_RESPONSE_INFO_x; -- CXType_Elaborated
   type POCSP_BASIC_SIGNED_RESPONSE_INFO is access OCSP_BASIC_SIGNED_RESPONSE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_BASIC_REVOKED_INFO_x is record
      RevocationDate : FILETIME;
      dwCrlReasonCode : DWORD;
   end record;
   subtype OCSP_BASIC_REVOKED_INFO is OCSP_BASIC_REVOKED_INFO_x; -- CXType_Elaborated
   type POCSP_BASIC_REVOKED_INFO is access OCSP_BASIC_REVOKED_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_BASIC_RESPONSE_ENTRY_x is record
      CertId : OCSP_CERT_ID;
      dwCertStatus : DWORD;
      ThisUpdate : FILETIME;
      NextUpdate : FILETIME;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype OCSP_BASIC_RESPONSE_ENTRY is OCSP_BASIC_RESPONSE_ENTRY_x; -- CXType_Elaborated
   type POCSP_BASIC_RESPONSE_ENTRY is access OCSP_BASIC_RESPONSE_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type OCSP_BASIC_RESPONSE_INFO_x is record
      dwVersion : DWORD;
      dwResponderIdChoice : DWORD;
      ProducedAt : FILETIME;
      cResponseEntry : DWORD;
      rgResponseEntry : POCSP_BASIC_RESPONSE_ENTRY;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype OCSP_BASIC_RESPONSE_INFO is OCSP_BASIC_RESPONSE_INFO_x; -- CXType_Elaborated
   type POCSP_BASIC_RESPONSE_INFO is access OCSP_BASIC_RESPONSE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_SUPPORTED_ALGORITHM_INFO_x is record
      Algorithm : CRYPT_ALGORITHM_IDENTIFIER;
      IntendedKeyUsage : CRYPT_BIT_BLOB;
      IntendedCertPolicies : CERT_POLICIES_INFO;
   end record;
   subtype CERT_SUPPORTED_ALGORITHM_INFO is CERT_SUPPORTED_ALGORITHM_INFO_x; -- CXType_Elaborated
   type PCERT_SUPPORTED_ALGORITHM_INFO is access CERT_SUPPORTED_ALGORITHM_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_TPM_SPECIFICATION_INFO_x is record
      pwszFamily : LPWSTR;
      dwLevel : DWORD;
      dwRevision : DWORD;
   end record;
   subtype CERT_TPM_SPECIFICATION_INFO is CERT_TPM_SPECIFICATION_INFO_x; -- CXType_Elaborated
   type PCERT_TPM_SPECIFICATION_INFO is access CERT_TPM_SPECIFICATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type HCRYPTOIDFUNCSET is access Void; -- CXType_Pointer - CXType_Void
   type HCRYPTOIDFUNCADDR is access Void; -- CXType_Pointer - CXType_Void
   type CRYPT_OID_FUNC_ENTRY_x is record
      pszOID : LPCSTR;
      pvFuncAddr : access Void;
   end record;
   subtype CRYPT_OID_FUNC_ENTRY is CRYPT_OID_FUNC_ENTRY_x; -- CXType_Elaborated
   type PCRYPT_OID_FUNC_ENTRY is access CRYPT_OID_FUNC_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   function CryptInstallOIDFunctionAddress(
      hModule_x : HMODULE;
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      cFuncEntry : DWORD;
      rgFuncEntry : Void;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptInstallOIDFunctionAddress,"CryptInstallOIDFunctionAddress");
   function CryptInitOIDFunctionSet(
      pszFuncName : LPCSTR;
      dwFlags : DWORD
   ) return HCRYPTOIDFUNCSET;
   pragma import (C,CryptInitOIDFunctionSet,"CryptInitOIDFunctionSet");
   function CryptGetOIDFunctionAddress(
      hFuncSet : HCRYPTOIDFUNCSET;
      dwEncodingType : DWORD;
      pszOID : LPCSTR;
      dwFlags : DWORD;
      ppvFuncAddr : access LPVOID;
      phFuncAddr : access HCRYPTOIDFUNCADDR
   ) return BOOL;
   pragma import (C,CryptGetOIDFunctionAddress,"CryptGetOIDFunctionAddress");
   function CryptGetDefaultOIDDllList(
      hFuncSet : HCRYPTOIDFUNCSET;
      dwEncodingType : DWORD;
      pwszDllList : access WCHAR;
      pcchDllList : access DWORD
   ) return BOOL;
   pragma import (C,CryptGetDefaultOIDDllList,"CryptGetDefaultOIDDllList");
   function CryptGetDefaultOIDFunctionAddress(
      hFuncSet : HCRYPTOIDFUNCSET;
      dwEncodingType : DWORD;
      pwszDll : LPCWSTR;
      dwFlags : DWORD;
      ppvFuncAddr : access LPVOID;
      phFuncAddr : access HCRYPTOIDFUNCADDR
   ) return BOOL;
   pragma import (C,CryptGetDefaultOIDFunctionAddress,"CryptGetDefaultOIDFunctionAddress");
   function CryptFreeOIDFunctionAddress(
      hFuncAddr : HCRYPTOIDFUNCADDR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptFreeOIDFunctionAddress,"CryptFreeOIDFunctionAddress");
   function CryptRegisterOIDFunction(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      pszOID : LPCSTR;
      pwszDll : LPCWSTR;
      pszOverrideFuncName : LPCSTR
   ) return BOOL;
   pragma import (C,CryptRegisterOIDFunction,"CryptRegisterOIDFunction");
   function CryptUnregisterOIDFunction(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      pszOID : LPCSTR
   ) return BOOL;
   pragma import (C,CryptUnregisterOIDFunction,"CryptUnregisterOIDFunction");
   function CryptRegisterDefaultOIDFunction(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      dwIndex : DWORD;
      pwszDll : LPCWSTR
   ) return BOOL;
   pragma import (C,CryptRegisterDefaultOIDFunction,"CryptRegisterDefaultOIDFunction");
   function CryptUnregisterDefaultOIDFunction(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      pwszDll : LPCWSTR
   ) return BOOL;
   pragma import (C,CryptUnregisterDefaultOIDFunction,"CryptUnregisterDefaultOIDFunction");
   function CryptSetOIDFunctionValue(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      pszOID : LPCSTR;
      pwszValueName : LPCWSTR;
      dwValueType : DWORD;
      pbValueData : access constant BYTE;
      cbValueData : DWORD
   ) return BOOL;
   pragma import (C,CryptSetOIDFunctionValue,"CryptSetOIDFunctionValue");
   function CryptGetOIDFunctionValue(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      pszOID : LPCSTR;
      pwszValueName : LPCWSTR;
      pdwValueType : access DWORD;
      pbValueData : access BYTE;
      pcbValueData : access DWORD
   ) return BOOL;
   pragma import (C,CryptGetOIDFunctionValue,"CryptGetOIDFunctionValue");
   subtype PFN_CRYPT_ENUM_OID_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, LPCSTR, LPCSTR, DWORD, const DWORD *, const LPCWSTR *, const BYTE *const *, const DWORD *, void *)
   function CryptEnumOIDFunction(
      dwEncodingType : DWORD;
      pszFuncName : LPCSTR;
      pszOID : LPCSTR;
      dwFlags : DWORD;
      pvArg : access Void;
      pfnEnumOIDFunc : PFN_CRYPT_ENUM_OID_FUNC
   ) return BOOL;
   pragma import (C,CryptEnumOIDFunction,"CryptEnumOIDFunction");
   type CRYPT_OID_INFO_x is record
      cbSize : DWORD;
      pszOID : LPCSTR;
      pwszName : LPCWSTR;
      dwGroupId : DWORD;
      ExtraInfo : CRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_OID_INFO is CRYPT_OID_INFO_x; -- CXType_Elaborated
   type PCRYPT_OID_INFO is access CRYPT_OID_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype CCRYPT_OID_INFO is CRYPT_OID_INFO; -- CXType_Typedef
   type PCCRYPT_OID_INFO is access constant CRYPT_OID_INFO; -- CXType_Pointer - CXType_Typedef
   function CryptFindOIDInfo(
      dwKeyType : DWORD;
      pvKey : access Void;
      dwGroupId : DWORD
   ) return PCCRYPT_OID_INFO;
   pragma import (C,CryptFindOIDInfo,"CryptFindOIDInfo");
   function CryptRegisterOIDInfo(
      pInfo : PCCRYPT_OID_INFO;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptRegisterOIDInfo,"CryptRegisterOIDInfo");
   function CryptUnregisterOIDInfo(
      pInfo : PCCRYPT_OID_INFO
   ) return BOOL;
   pragma import (C,CryptUnregisterOIDInfo,"CryptUnregisterOIDInfo");
   subtype PFN_CRYPT_ENUM_OID_INFO is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCCRYPT_OID_INFO, void *)
   function CryptEnumOIDInfo(
      dwGroupId : DWORD;
      dwFlags : DWORD;
      pvArg : access Void;
      pfnEnumOIDInfo : PFN_CRYPT_ENUM_OID_INFO
   ) return BOOL;
   pragma import (C,CryptEnumOIDInfo,"CryptEnumOIDInfo");
   function CryptFindLocalizedName(
      pwszCryptName : LPCWSTR
   ) return LPCWSTR;
   pragma import (C,CryptFindLocalizedName,"CryptFindLocalizedName");
   type CERT_STRONG_SIGN_SERIALIZED_INFO_x is record
      dwFlags : DWORD;
      pwszCNGSignHashAlgids : LPWSTR;
      pwszCNGPubKeyMinBitLengths : LPWSTR;
   end record;
   subtype CERT_STRONG_SIGN_SERIALIZED_INFO is CERT_STRONG_SIGN_SERIALIZED_INFO_x; -- CXType_Elaborated
   type PCERT_STRONG_SIGN_SERIALIZED_INFO is access CERT_STRONG_SIGN_SERIALIZED_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_STRONG_SIGN_PARA_x is record
      cbSize : DWORD;
      dwInfoChoice : DWORD;
   end record;
   subtype CERT_STRONG_SIGN_PARA is CERT_STRONG_SIGN_PARA_x; -- CXType_Elaborated
   type PCERT_STRONG_SIGN_PARA is access CERT_STRONG_SIGN_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_STRONG_SIGN_PARA is access constant CERT_STRONG_SIGN_PARA; -- CXType_Pointer - CXType_Typedef
   type HCRYPTMSG is access Void; -- CXType_Pointer - CXType_Void
   type CERT_ISSUER_SERIAL_NUMBER_x is record
      Issuer : CERT_NAME_BLOB;
      SerialNumber : CRYPT_INTEGER_BLOB;
   end record;
   subtype CERT_ISSUER_SERIAL_NUMBER is CERT_ISSUER_SERIAL_NUMBER_x; -- CXType_Elaborated
   type PCERT_ISSUER_SERIAL_NUMBER is access CERT_ISSUER_SERIAL_NUMBER_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_ID_x is record
      dwIdChoice : DWORD;
   end record;
   subtype CERT_ID is CERT_ID_x; -- CXType_Elaborated
   type PCERT_ID is access CERT_ID_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_SIGNER_ENCODE_INFO_x is record
      cbSize : DWORD;
      pCertInfo : PCERT_INFO;
      dwKeySpec : DWORD;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
      cAuthAttr : DWORD;
      rgAuthAttr : PCRYPT_ATTRIBUTE;
      cUnauthAttr : DWORD;
      rgUnauthAttr : PCRYPT_ATTRIBUTE;
   end record;
   subtype CMSG_SIGNER_ENCODE_INFO is CMSG_SIGNER_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_SIGNER_ENCODE_INFO is access CMSG_SIGNER_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_SIGNED_ENCODE_INFO_x is record
      cbSize : DWORD;
      cSigners : DWORD;
      rgSigners : PCMSG_SIGNER_ENCODE_INFO;
      cCertEncoded : DWORD;
      rgCertEncoded : PCERT_BLOB;
      cCrlEncoded : DWORD;
      rgCrlEncoded : PCRL_BLOB;
   end record;
   subtype CMSG_SIGNED_ENCODE_INFO is CMSG_SIGNED_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_SIGNED_ENCODE_INFO is access CMSG_SIGNED_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_RECIPIENT_ENCODE_INFO_x; -- Forward Declaration
   subtype CMSG_RECIPIENT_ENCODE_INFO is CMSG_RECIPIENT_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_RECIPIENT_ENCODE_INFO is access CMSG_RECIPIENT_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_ENVELOPED_ENCODE_INFO_x is record
      cbSize : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvEncryptionAuxInfo : access Void;
      cRecipients : DWORD;
      rgpRecipients : access PCERT_INFO;
   end record;
   subtype CMSG_ENVELOPED_ENCODE_INFO is CMSG_ENVELOPED_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_ENVELOPED_ENCODE_INFO is access CMSG_ENVELOPED_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_x is record
      cbSize : DWORD;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvKeyEncryptionAuxInfo : access Void;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      RecipientPublicKey : CRYPT_BIT_BLOB;
      RecipientId : CERT_ID;
   end record;
   subtype CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO is CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO is access CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO_x is record
      cbSize : DWORD;
      RecipientPublicKey : CRYPT_BIT_BLOB;
      RecipientId : CERT_ID;
      Date : FILETIME;
      pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE;
   end record;
   subtype CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO is CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO is access CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_x is record
      cbSize : DWORD;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvKeyEncryptionAuxInfo : access Void;
      KeyWrapAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvKeyWrapAuxInfo : access Void;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwKeySpec : DWORD;
      dwKeyChoice : DWORD;
      UserKeyingMaterial : CRYPT_DATA_BLOB;
      cRecipientEncryptedKeys : DWORD;
      rgpRecipientEncryptedKeys : access PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
   end record;
   subtype CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO is CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO is access CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_x is record
      cbSize : DWORD;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvKeyEncryptionAuxInfo : access Void;
      hCryptProv_x : HCRYPTPROV;
      dwKeyChoice : DWORD;
      KeyId : CRYPT_DATA_BLOB;
      Date : FILETIME;
      pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE;
   end record;
   subtype CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO is CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO is access CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_RECIPIENT_ENCODE_INFO_x is record
      dwRecipientChoice : DWORD;
   end record;
   type CMSG_RC2_AUX_INFO_x is record
      cbSize : DWORD;
      dwBitLen : DWORD;
   end record;
   subtype CMSG_RC2_AUX_INFO is CMSG_RC2_AUX_INFO_x; -- CXType_Elaborated
   type PCMSG_RC2_AUX_INFO is access CMSG_RC2_AUX_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_SP3_COMPATIBLE_AUX_INFO_x is record
      cbSize : DWORD;
      dwFlags : DWORD;
   end record;
   subtype CMSG_SP3_COMPATIBLE_AUX_INFO is CMSG_SP3_COMPATIBLE_AUX_INFO_x; -- CXType_Elaborated
   type PCMSG_SP3_COMPATIBLE_AUX_INFO is access CMSG_SP3_COMPATIBLE_AUX_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_RC4_AUX_INFO_x is record
      cbSize : DWORD;
      dwBitLen : DWORD;
   end record;
   subtype CMSG_RC4_AUX_INFO is CMSG_RC4_AUX_INFO_x; -- CXType_Elaborated
   type PCMSG_RC4_AUX_INFO is access CMSG_RC4_AUX_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO_x is record
      cbSize : DWORD;
      SignedInfo : CMSG_SIGNED_ENCODE_INFO;
      EnvelopedInfo : CMSG_ENVELOPED_ENCODE_INFO;
   end record;
   subtype CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO is CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO is access CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_HASHED_ENCODE_INFO_x is record
      cbSize : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
   end record;
   subtype CMSG_HASHED_ENCODE_INFO is CMSG_HASHED_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_HASHED_ENCODE_INFO is access CMSG_HASHED_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_ENCRYPTED_ENCODE_INFO_x is record
      cbSize : DWORD;
      ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvEncryptionAuxInfo : access Void;
   end record;
   subtype CMSG_ENCRYPTED_ENCODE_INFO is CMSG_ENCRYPTED_ENCODE_INFO_x; -- CXType_Elaborated
   type PCMSG_ENCRYPTED_ENCODE_INFO is access CMSG_ENCRYPTED_ENCODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CMSG_STREAM_OUTPUT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (const void *, BYTE *, DWORD, BOOL)
   type CMSG_STREAM_INFO_x is record
      cbContent : DWORD;
      pfnStreamOutput : PFN_CMSG_STREAM_OUTPUT;
      pvArg : access Void;
   end record;
   subtype CMSG_STREAM_INFO is CMSG_STREAM_INFO_x; -- CXType_Elaborated
   type PCMSG_STREAM_INFO is access CMSG_STREAM_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CryptMsgOpenToEncode(
      dwMsgEncodingType : DWORD;
      dwFlags : DWORD;
      dwMsgType : DWORD;
      pvMsgEncodeInfo : access Void;
      pszInnerContentObjID : LPSTR;
      pStreamInfo : PCMSG_STREAM_INFO
   ) return HCRYPTMSG;
   pragma import (C,CryptMsgOpenToEncode,"CryptMsgOpenToEncode");
   function CryptMsgCalculateEncodedLength(
      dwMsgEncodingType : DWORD;
      dwFlags : DWORD;
      dwMsgType : DWORD;
      pvMsgEncodeInfo : access Void;
      pszInnerContentObjID : LPSTR;
      cbData : DWORD
   ) return DWORD;
   pragma import (C,CryptMsgCalculateEncodedLength,"CryptMsgCalculateEncodedLength");
   function CryptMsgOpenToDecode(
      dwMsgEncodingType : DWORD;
      dwFlags : DWORD;
      dwMsgType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      pRecipientInfo : PCERT_INFO;
      pStreamInfo : PCMSG_STREAM_INFO
   ) return HCRYPTMSG;
   pragma import (C,CryptMsgOpenToDecode,"CryptMsgOpenToDecode");
   function CryptMsgDuplicate(
      hCryptMsg_x : HCRYPTMSG
   ) return HCRYPTMSG;
   pragma import (C,CryptMsgDuplicate,"CryptMsgDuplicate");
   function CryptMsgClose(
      hCryptMsg_x : HCRYPTMSG
   ) return BOOL;
   pragma import (C,CryptMsgClose,"CryptMsgClose");
   function CryptMsgUpdate(
      hCryptMsg_x : HCRYPTMSG;
      pbData : access constant BYTE;
      cbData : DWORD;
      fFinal : BOOL
   ) return BOOL;
   pragma import (C,CryptMsgUpdate,"CryptMsgUpdate");
   function CryptMsgGetParam(
      hCryptMsg_x : HCRYPTMSG;
      dwParamType : DWORD;
      dwIndex : DWORD;
      pvData : access Void;
      pcbData : access DWORD
   ) return BOOL;
   pragma import (C,CryptMsgGetParam,"CryptMsgGetParam");
   type CMSG_SIGNER_INFO_x is record
      dwVersion : DWORD;
      Issuer : CERT_NAME_BLOB;
      SerialNumber : CRYPT_INTEGER_BLOB;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      HashEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedHash : CRYPT_DATA_BLOB;
      AuthAttrs : CRYPT_ATTRIBUTES;
      UnauthAttrs : CRYPT_ATTRIBUTES;
   end record;
   subtype CMSG_SIGNER_INFO is CMSG_SIGNER_INFO_x; -- CXType_Elaborated
   type PCMSG_SIGNER_INFO is access CMSG_SIGNER_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CMS_SIGNER_INFO_x is record
      dwVersion : DWORD;
      SignerId : CERT_ID;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      HashEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedHash : CRYPT_DATA_BLOB;
      AuthAttrs : CRYPT_ATTRIBUTES;
      UnauthAttrs : CRYPT_ATTRIBUTES;
   end record;
   subtype CMSG_CMS_SIGNER_INFO is CMSG_CMS_SIGNER_INFO_x; -- CXType_Elaborated
   type PCMSG_CMS_SIGNER_INFO is access CMSG_CMS_SIGNER_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype CMSG_ATTR is CRYPT_ATTRIBUTES; -- CXType_Typedef
   type PCMSG_ATTR is access CRYPT_ATTRIBUTES; -- CXType_Pointer - CXType_Typedef
   type CMSG_KEY_TRANS_RECIPIENT_INFO_x is record
      dwVersion : DWORD;
      RecipientId : CERT_ID;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedKey : CRYPT_DATA_BLOB;
   end record;
   subtype CMSG_KEY_TRANS_RECIPIENT_INFO is CMSG_KEY_TRANS_RECIPIENT_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_TRANS_RECIPIENT_INFO is access CMSG_KEY_TRANS_RECIPIENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_RECIPIENT_ENCRYPTED_KEY_INFO_x is record
      RecipientId : CERT_ID;
      EncryptedKey : CRYPT_DATA_BLOB;
      Date : FILETIME;
      pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE;
   end record;
   subtype CMSG_RECIPIENT_ENCRYPTED_KEY_INFO is CMSG_RECIPIENT_ENCRYPTED_KEY_INFO_x; -- CXType_Elaborated
   type PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO is access CMSG_RECIPIENT_ENCRYPTED_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_KEY_AGREE_RECIPIENT_INFO_x is record
      dwVersion : DWORD;
      dwOriginatorChoice : DWORD;
      UserKeyingMaterial : CRYPT_DATA_BLOB;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      cRecipientEncryptedKeys : DWORD;
      rgpRecipientEncryptedKeys : access PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
   end record;
   subtype CMSG_KEY_AGREE_RECIPIENT_INFO is CMSG_KEY_AGREE_RECIPIENT_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_AGREE_RECIPIENT_INFO is access CMSG_KEY_AGREE_RECIPIENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_MAIL_LIST_RECIPIENT_INFO_x is record
      dwVersion : DWORD;
      KeyId : CRYPT_DATA_BLOB;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedKey : CRYPT_DATA_BLOB;
      Date : FILETIME;
      pOtherAttr : PCRYPT_ATTRIBUTE_TYPE_VALUE;
   end record;
   subtype CMSG_MAIL_LIST_RECIPIENT_INFO is CMSG_MAIL_LIST_RECIPIENT_INFO_x; -- CXType_Elaborated
   type PCMSG_MAIL_LIST_RECIPIENT_INFO is access CMSG_MAIL_LIST_RECIPIENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CMS_RECIPIENT_INFO_x is record
      dwRecipientChoice : DWORD;
   end record;
   subtype CMSG_CMS_RECIPIENT_INFO is CMSG_CMS_RECIPIENT_INFO_x; -- CXType_Elaborated
   type PCMSG_CMS_RECIPIENT_INFO is access CMSG_CMS_RECIPIENT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CryptMsgControl(
      hCryptMsg_x : HCRYPTMSG;
      dwFlags : DWORD;
      dwCtrlType : DWORD;
      pvCtrlPara : access Void
   ) return BOOL;
   pragma import (C,CryptMsgControl,"CryptMsgControl");
   type CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA_x is record
      cbSize : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwSignerIndex : DWORD;
      dwSignerType : DWORD;
      pvSigner : access Void;
   end record;
   subtype CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA is CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA is access CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CTRL_DECRYPT_PARA_x is record
      cbSize : DWORD;
      dwKeySpec : DWORD;
      dwRecipientIndex : DWORD;
   end record;
   subtype CMSG_CTRL_DECRYPT_PARA is CMSG_CTRL_DECRYPT_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_DECRYPT_PARA is access CMSG_CTRL_DECRYPT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_x is record
      cbSize : DWORD;
      dwKeySpec : DWORD;
      pKeyTrans : PCMSG_KEY_TRANS_RECIPIENT_INFO;
      dwRecipientIndex : DWORD;
   end record;
   subtype CMSG_CTRL_KEY_TRANS_DECRYPT_PARA is CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA is access CMSG_CTRL_KEY_TRANS_DECRYPT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_x is record
      cbSize : DWORD;
      dwKeySpec : DWORD;
      pKeyAgree : PCMSG_KEY_AGREE_RECIPIENT_INFO;
      dwRecipientIndex : DWORD;
      dwRecipientEncryptedKeyIndex : DWORD;
      OriginatorPublicKey : CRYPT_BIT_BLOB;
   end record;
   subtype CMSG_CTRL_KEY_AGREE_DECRYPT_PARA is CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA is access CMSG_CTRL_KEY_AGREE_DECRYPT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_x is record
      cbSize : DWORD;
      hCryptProv_x : HCRYPTPROV;
      pMailList : PCMSG_MAIL_LIST_RECIPIENT_INFO;
      dwRecipientIndex : DWORD;
      dwKeyChoice : DWORD;
   end record;
   subtype CMSG_CTRL_MAIL_LIST_DECRYPT_PARA is CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA is access CMSG_CTRL_MAIL_LIST_DECRYPT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA_x is record
      cbSize : DWORD;
      dwSignerIndex : DWORD;
      blob : CRYPT_DATA_BLOB;
   end record;
   subtype CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA is CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA is access CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA_x is record
      cbSize : DWORD;
      dwSignerIndex : DWORD;
      dwUnauthAttrIndex : DWORD;
   end record;
   subtype CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA is CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA_x; -- CXType_Elaborated
   type PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA is access CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CryptMsgVerifyCountersignatureEncoded(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwEncodingType : DWORD;
      pbSignerInfo : PBYTE;
      cbSignerInfo : DWORD;
      pbSignerInfoCountersignature : PBYTE;
      cbSignerInfoCountersignature : DWORD;
      pciCountersigner : PCERT_INFO
   ) return BOOL;
   pragma import (C,CryptMsgVerifyCountersignatureEncoded,"CryptMsgVerifyCountersignatureEncoded");
   function CryptMsgVerifyCountersignatureEncodedEx(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwEncodingType : DWORD;
      pbSignerInfo : PBYTE;
      cbSignerInfo : DWORD;
      pbSignerInfoCountersignature : PBYTE;
      cbSignerInfoCountersignature : DWORD;
      dwSignerType : DWORD;
      pvSigner : access Void;
      dwFlags : DWORD;
      pvExtra : access Void
   ) return BOOL;
   pragma import (C,CryptMsgVerifyCountersignatureEncodedEx,"CryptMsgVerifyCountersignatureEncodedEx");
   function CryptMsgCountersign(
      hCryptMsg_x : HCRYPTMSG;
      dwIndex : DWORD;
      cCountersigners : DWORD;
      rgCountersigners : PCMSG_SIGNER_ENCODE_INFO
   ) return BOOL;
   pragma import (C,CryptMsgCountersign,"CryptMsgCountersign");
   function CryptMsgCountersignEncoded(
      dwEncodingType : DWORD;
      pbSignerInfo : PBYTE;
      cbSignerInfo : DWORD;
      cCountersigners : DWORD;
      rgCountersigners : PCMSG_SIGNER_ENCODE_INFO;
      pbCountersignature : PBYTE;
      pcbCountersignature : PDWORD
   ) return BOOL;
   pragma import (C,CryptMsgCountersignEncoded,"CryptMsgCountersignEncoded");
   subtype PFN_CMSG_ALLOC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void *(size_t)
   subtype PFN_CMSG_FREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (void *)
   subtype PFN_CMSG_GEN_ENCRYPT_KEY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCRYPTPROV *, PCRYPT_ALGORITHM_IDENTIFIER, PVOID, PCERT_PUBLIC_KEY_INFO, PFN_CMSG_ALLOC, HCRYPTKEY *, PBYTE *, PDWORD)
   subtype PFN_CMSG_EXPORT_ENCRYPT_KEY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCRYPTPROV, HCRYPTKEY, PCERT_PUBLIC_KEY_INFO, PBYTE, PDWORD)
   subtype PFN_CMSG_IMPORT_ENCRYPT_KEY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCRYPTPROV, DWORD, PCRYPT_ALGORITHM_IDENTIFIER, PCRYPT_ALGORITHM_IDENTIFIER, PBYTE, DWORD, HCRYPTKEY *)
   type CMSG_CONTENT_ENCRYPT_INFO_x is record
      cbSize : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvEncryptionAuxInfo : access Void;
      cRecipients : DWORD;
      rgCmsRecipients : PCMSG_RECIPIENT_ENCODE_INFO;
      pfnAlloc : PFN_CMSG_ALLOC;
      pfnFree : PFN_CMSG_FREE;
      dwEncryptFlags : DWORD;
      dwFlags : DWORD;
      fCNG : BOOL;
      pbCNGContentEncryptKeyObject : access BYTE;
      pbContentEncryptKey : access BYTE;
      cbContentEncryptKey : DWORD;
   end record;
   subtype CMSG_CONTENT_ENCRYPT_INFO is CMSG_CONTENT_ENCRYPT_INFO_x; -- CXType_Elaborated
   type PCMSG_CONTENT_ENCRYPT_INFO is access CMSG_CONTENT_ENCRYPT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CONTENT_ENCRYPT_INFO, DWORD, void *)
   type CMSG_KEY_TRANS_ENCRYPT_INFO_x is record
      cbSize : DWORD;
      dwRecipientIndex : DWORD;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedKey : CRYPT_DATA_BLOB;
      dwFlags : DWORD;
   end record;
   subtype CMSG_KEY_TRANS_ENCRYPT_INFO is CMSG_KEY_TRANS_ENCRYPT_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_TRANS_ENCRYPT_INFO is access CMSG_KEY_TRANS_ENCRYPT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CMSG_EXPORT_KEY_TRANS is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CONTENT_ENCRYPT_INFO, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, PCMSG_KEY_TRANS_ENCRYPT_INFO, DWORD, void *)
   type CMSG_KEY_AGREE_KEY_ENCRYPT_INFO_x is record
      cbSize : DWORD;
      EncryptedKey : CRYPT_DATA_BLOB;
   end record;
   subtype CMSG_KEY_AGREE_KEY_ENCRYPT_INFO is CMSG_KEY_AGREE_KEY_ENCRYPT_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO is access CMSG_KEY_AGREE_KEY_ENCRYPT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CMSG_KEY_AGREE_ENCRYPT_INFO_x is record
      cbSize : DWORD;
      dwRecipientIndex : DWORD;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      UserKeyingMaterial : CRYPT_DATA_BLOB;
      dwOriginatorChoice : DWORD;
      cKeyAgreeKeyEncryptInfo : DWORD;
      rgpKeyAgreeKeyEncryptInfo : access PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
      dwFlags : DWORD;
   end record;
   subtype CMSG_KEY_AGREE_ENCRYPT_INFO is CMSG_KEY_AGREE_ENCRYPT_INFO_x; -- CXType_Elaborated
   type PCMSG_KEY_AGREE_ENCRYPT_INFO is access CMSG_KEY_AGREE_ENCRYPT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CMSG_EXPORT_KEY_AGREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CONTENT_ENCRYPT_INFO, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, PCMSG_KEY_AGREE_ENCRYPT_INFO, DWORD, void *)
   type CMSG_MAIL_LIST_ENCRYPT_INFO_x is record
      cbSize : DWORD;
      dwRecipientIndex : DWORD;
      KeyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      EncryptedKey : CRYPT_DATA_BLOB;
      dwFlags : DWORD;
   end record;
   subtype CMSG_MAIL_LIST_ENCRYPT_INFO is CMSG_MAIL_LIST_ENCRYPT_INFO_x; -- CXType_Elaborated
   type PCMSG_MAIL_LIST_ENCRYPT_INFO is access CMSG_MAIL_LIST_ENCRYPT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CMSG_EXPORT_MAIL_LIST is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CONTENT_ENCRYPT_INFO, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, PCMSG_MAIL_LIST_ENCRYPT_INFO, DWORD, void *)
   subtype PFN_CMSG_IMPORT_KEY_TRANS is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCRYPT_ALGORITHM_IDENTIFIER, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA, DWORD, void *, HCRYPTKEY *)
   subtype PFN_CMSG_IMPORT_KEY_AGREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCRYPT_ALGORITHM_IDENTIFIER, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA, DWORD, void *, HCRYPTKEY *)
   subtype PFN_CMSG_IMPORT_MAIL_LIST is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCRYPT_ALGORITHM_IDENTIFIER, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA, DWORD, void *, HCRYPTKEY *)
   type CMSG_CNG_CONTENT_DECRYPT_INFO_x is record
      cbSize : DWORD;
      ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pfnAlloc : PFN_CMSG_ALLOC;
      pfnFree : PFN_CMSG_FREE;
      hNCryptKey : NCRYPT_KEY_HANDLE;
      pbContentEncryptKey : access BYTE;
      cbContentEncryptKey : DWORD;
      hCNGContentEncryptKey : BCRYPT_KEY_HANDLE;
      pbCNGContentEncryptKeyObject : access BYTE;
   end record;
   subtype CMSG_CNG_CONTENT_DECRYPT_INFO is CMSG_CNG_CONTENT_DECRYPT_INFO_x; -- CXType_Elaborated
   type PCMSG_CNG_CONTENT_DECRYPT_INFO is access CMSG_CNG_CONTENT_DECRYPT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CMSG_CNG_IMPORT_KEY_TRANS is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CNG_CONTENT_DECRYPT_INFO, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA, DWORD, void *)
   subtype PFN_CMSG_CNG_IMPORT_KEY_AGREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CNG_CONTENT_DECRYPT_INFO, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA, DWORD, void *)
   subtype PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCMSG_CNG_CONTENT_DECRYPT_INFO, DWORD, void *)
   type HCERTSTORE is access Void; -- CXType_Pointer - CXType_Void
   type CERT_CONTEXT_x is record
      dwCertEncodingType : DWORD;
      pbCertEncoded : access BYTE;
      cbCertEncoded : DWORD;
      pCertInfo : PCERT_INFO;
      hCertStore_x : HCERTSTORE;
   end record;
   subtype CERT_CONTEXT is CERT_CONTEXT_x; -- CXType_Elaborated
   type PCERT_CONTEXT is access CERT_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_CONTEXT is access constant CERT_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type CRL_CONTEXT_x is record
      dwCertEncodingType : DWORD;
      pbCrlEncoded : access BYTE;
      cbCrlEncoded : DWORD;
      pCrlInfo : PCRL_INFO;
      hCertStore_x : HCERTSTORE;
   end record;
   subtype CRL_CONTEXT is CRL_CONTEXT_x; -- CXType_Elaborated
   type PCRL_CONTEXT is access CRL_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCRL_CONTEXT is access constant CRL_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type CTL_CONTEXT_x is record
      dwMsgAndCertEncodingType : DWORD;
      pbCtlEncoded : access BYTE;
      cbCtlEncoded : DWORD;
      pCtlInfo : PCTL_INFO;
      hCertStore_x : HCERTSTORE;
      hCryptMsg_x : HCRYPTMSG;
      pbCtlContent : access BYTE;
      cbCtlContent : DWORD;
   end record;
   subtype CTL_CONTEXT is CTL_CONTEXT_x; -- CXType_Elaborated
   type PCTL_CONTEXT is access CTL_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCTL_CONTEXT is access constant CTL_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type CertKeyType is (
      KeyTypeOther,
      KeyTypeVirtualSmartCard,
      KeyTypePhysicalSmartCard,
      KeyTypePassport,
      KeyTypePassportRemote,
      KeyTypePassportSmartCard,
      KeyTypeHardware,
      KeyTypeSoftware,
      KeyTypeSelfSigned
   );
   for CertKeyType use (
      KeyTypeOther => 0,
      KeyTypeVirtualSmartCard => 1,
      KeyTypePhysicalSmartCard => 2,
      KeyTypePassport => 3,
      KeyTypePassportRemote => 4,
      KeyTypePassportSmartCard => 5,
      KeyTypeHardware => 6,
      KeyTypeSoftware => 7,
      KeyTypeSelfSigned => 8
   );
   for CertKeyType'Size use 32;
   type CRYPT_KEY_PROV_PARAM_x is record
      dwParam : DWORD;
      pbData : access BYTE;
      cbData : DWORD;
      dwFlags : DWORD;
   end record;
   subtype CRYPT_KEY_PROV_PARAM is CRYPT_KEY_PROV_PARAM_x; -- CXType_Elaborated
   type PCRYPT_KEY_PROV_PARAM is access CRYPT_KEY_PROV_PARAM_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_KEY_PROV_INFO_x is record
      pwszContainerName : LPWSTR;
      pwszProvName : LPWSTR;
      dwProvType : DWORD;
      dwFlags : DWORD;
      cProvParam : DWORD;
      rgProvParam : PCRYPT_KEY_PROV_PARAM;
      dwKeySpec : DWORD;
   end record;
   subtype CRYPT_KEY_PROV_INFO is CRYPT_KEY_PROV_INFO_x; -- CXType_Elaborated
   type PCRYPT_KEY_PROV_INFO is access CRYPT_KEY_PROV_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_KEY_CONTEXT_x is record
      cbSize : DWORD;
      dwKeySpec : DWORD;
   end record;
   subtype CERT_KEY_CONTEXT is CERT_KEY_CONTEXT_x; -- CXType_Elaborated
   type PCERT_KEY_CONTEXT is access CERT_KEY_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type ROOT_INFO_LUID_x is record
      LowPart : DWORD;
      HighPart : LONG;
   end record;
   subtype ROOT_INFO_LUID is ROOT_INFO_LUID_x; -- CXType_Elaborated
   type PROOT_INFO_LUID is access ROOT_INFO_LUID_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_SMART_CARD_ROOT_INFO_x is record
      rgbCardID : Void;
      luid_x : ROOT_INFO_LUID;
   end record;
   subtype CRYPT_SMART_CARD_ROOT_INFO is CRYPT_SMART_CARD_ROOT_INFO_x; -- CXType_Elaborated
   type PCRYPT_SMART_CARD_ROOT_INFO is access CRYPT_SMART_CARD_ROOT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_SYSTEM_STORE_RELOCATE_PARA_x is null record;
   subtype CERT_SYSTEM_STORE_RELOCATE_PARA is CERT_SYSTEM_STORE_RELOCATE_PARA_x; -- CXType_Elaborated
   type PCERT_SYSTEM_STORE_RELOCATE_PARA is access CERT_SYSTEM_STORE_RELOCATE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REGISTRY_STORE_CLIENT_GPT_PARA_x is record
      hKeyBase : HKEY;
      pwszRegPath : LPWSTR;
   end record;
   subtype CERT_REGISTRY_STORE_CLIENT_GPT_PARA is CERT_REGISTRY_STORE_CLIENT_GPT_PARA_x; -- CXType_Elaborated
   type PCERT_REGISTRY_STORE_CLIENT_GPT_PARA is access CERT_REGISTRY_STORE_CLIENT_GPT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REGISTRY_STORE_ROAMING_PARA_x is record
      hKey_x : HKEY;
      pwszStoreDirectory : LPWSTR;
   end record;
   subtype CERT_REGISTRY_STORE_ROAMING_PARA is CERT_REGISTRY_STORE_ROAMING_PARA_x; -- CXType_Elaborated
   type PCERT_REGISTRY_STORE_ROAMING_PARA is access CERT_REGISTRY_STORE_ROAMING_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_LDAP_STORE_OPENED_PARA_x is record
      pvLdapSessionHandle : access Void;
      pwszLdapUrl : LPCWSTR;
   end record;
   subtype CERT_LDAP_STORE_OPENED_PARA is CERT_LDAP_STORE_OPENED_PARA_x; -- CXType_Elaborated
   type PCERT_LDAP_STORE_OPENED_PARA is access CERT_LDAP_STORE_OPENED_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CertOpenStore(
      lpszStoreProvider : LPCSTR;
      dwEncodingType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwFlags : DWORD;
      pvPara : access Void
   ) return HCERTSTORE;
   pragma import (C,CertOpenStore,"CertOpenStore");
   type HCERTSTOREPROV is access Void; -- CXType_Pointer - CXType_Void
   type CERT_STORE_PROV_INFO_x is record
      cbSize : DWORD;
      cStoreProvFunc : DWORD;
      rgpvStoreProvFunc : access LPVOID;
      hStoreProv : HCERTSTOREPROV;
      dwStoreProvFlags : DWORD;
      hStoreProvFuncAddr2 : HCRYPTOIDFUNCADDR;
   end record;
   subtype CERT_STORE_PROV_INFO is CERT_STORE_PROV_INFO_x; -- CXType_Elaborated
   type PCERT_STORE_PROV_INFO is access CERT_STORE_PROV_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CERT_DLL_OPEN_STORE_PROV_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPCSTR, DWORD, HCRYPTPROV_LEGACY, DWORD, const void *, HCERTSTORE, PCERT_STORE_PROV_INFO)
   subtype PFN_CERT_STORE_PROV_CLOSE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (HCERTSTOREPROV, DWORD)
   subtype PFN_CERT_STORE_PROV_READ_CERT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_CONTEXT, DWORD, PCCERT_CONTEXT *)
   subtype PFN_CERT_STORE_PROV_WRITE_CERT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_CONTEXT, DWORD)
   subtype PFN_CERT_STORE_PROV_DELETE_CERT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_CONTEXT, DWORD)
   subtype PFN_CERT_STORE_PROV_SET_CERT_PROPERTY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_CONTEXT, DWORD, DWORD, const void *)
   subtype PFN_CERT_STORE_PROV_READ_CRL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCRL_CONTEXT, DWORD, PCCRL_CONTEXT *)
   subtype PFN_CERT_STORE_PROV_WRITE_CRL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCRL_CONTEXT, DWORD)
   subtype PFN_CERT_STORE_PROV_DELETE_CRL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCRL_CONTEXT, DWORD)
   subtype PFN_CERT_STORE_PROV_SET_CRL_PROPERTY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCRL_CONTEXT, DWORD, DWORD, const void *)
   subtype PFN_CERT_STORE_PROV_READ_CTL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCTL_CONTEXT, DWORD, PCCTL_CONTEXT *)
   subtype PFN_CERT_STORE_PROV_WRITE_CTL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCTL_CONTEXT, DWORD)
   subtype PFN_CERT_STORE_PROV_DELETE_CTL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCTL_CONTEXT, DWORD)
   subtype PFN_CERT_STORE_PROV_SET_CTL_PROPERTY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCTL_CONTEXT, DWORD, DWORD, const void *)
   subtype PFN_CERT_STORE_PROV_CONTROL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, DWORD, DWORD, const void *)
   type CERT_STORE_PROV_FIND_INFO_x is record
      cbSize : DWORD;
      dwMsgAndCertEncodingType : DWORD;
      dwFindFlags : DWORD;
      dwFindType : DWORD;
      pvFindPara : access Void;
   end record;
   subtype CERT_STORE_PROV_FIND_INFO is CERT_STORE_PROV_FIND_INFO_x; -- CXType_Elaborated
   type PCERT_STORE_PROV_FIND_INFO is access CERT_STORE_PROV_FIND_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype CCERT_STORE_PROV_FIND_INFO is CERT_STORE_PROV_FIND_INFO; -- CXType_Typedef
   type PCCERT_STORE_PROV_FIND_INFO is access constant CERT_STORE_PROV_FIND_INFO; -- CXType_Pointer - CXType_Typedef
   subtype PFN_CERT_STORE_PROV_FIND_CERT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_STORE_PROV_FIND_INFO, PCCERT_CONTEXT, DWORD, void **, PCCERT_CONTEXT *)
   subtype PFN_CERT_STORE_PROV_FREE_FIND_CERT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_CONTEXT, void *, DWORD)
   subtype PFN_CERT_STORE_PROV_GET_CERT_PROPERTY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_CONTEXT, DWORD, DWORD, void *, DWORD *)
   subtype PFN_CERT_STORE_PROV_FIND_CRL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_STORE_PROV_FIND_INFO, PCCRL_CONTEXT, DWORD, void **, PCCRL_CONTEXT *)
   subtype PFN_CERT_STORE_PROV_FREE_FIND_CRL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCRL_CONTEXT, void *, DWORD)
   subtype PFN_CERT_STORE_PROV_GET_CRL_PROPERTY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCRL_CONTEXT, DWORD, DWORD, void *, DWORD *)
   subtype PFN_CERT_STORE_PROV_FIND_CTL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCERT_STORE_PROV_FIND_INFO, PCCTL_CONTEXT, DWORD, void **, PCCTL_CONTEXT *)
   subtype PFN_CERT_STORE_PROV_FREE_FIND_CTL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCTL_CONTEXT, void *, DWORD)
   subtype PFN_CERT_STORE_PROV_GET_CTL_PROPERTY is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCERTSTOREPROV, PCCTL_CONTEXT, DWORD, DWORD, void *, DWORD *)
   function CertDuplicateStore(
      hCertStore_x : HCERTSTORE
   ) return HCERTSTORE;
   pragma import (C,CertDuplicateStore,"CertDuplicateStore");
   function CertSaveStore(
      hCertStore_x : HCERTSTORE;
      dwEncodingType : DWORD;
      dwSaveAs : DWORD;
      dwSaveTo : DWORD;
      pvSaveToPara : access Void;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CertSaveStore,"CertSaveStore");
   function CertCloseStore(
      hCertStore_x : HCERTSTORE;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CertCloseStore,"CertCloseStore");
   function CertGetSubjectCertificateFromStore(
      hCertStore_x : HCERTSTORE;
      dwCertEncodingType : DWORD;
      pCertId : PCERT_INFO
   ) return PCCERT_CONTEXT;
   pragma import (C,CertGetSubjectCertificateFromStore,"CertGetSubjectCertificateFromStore");
   function CertEnumCertificatesInStore(
      hCertStore_x : HCERTSTORE;
      pPrevCertContext : PCCERT_CONTEXT
   ) return PCCERT_CONTEXT;
   pragma import (C,CertEnumCertificatesInStore,"CertEnumCertificatesInStore");
   function CertFindCertificateInStore(
      hCertStore_x : HCERTSTORE;
      dwCertEncodingType : DWORD;
      dwFindFlags : DWORD;
      dwFindType : DWORD;
      pvFindPara : access Void;
      pPrevCertContext : PCCERT_CONTEXT
   ) return PCCERT_CONTEXT;
   pragma import (C,CertFindCertificateInStore,"CertFindCertificateInStore");
   function CertGetIssuerCertificateFromStore(
      hCertStore_x : HCERTSTORE;
      pSubjectContext : PCCERT_CONTEXT;
      pPrevIssuerContext : PCCERT_CONTEXT;
      pdwFlags : access DWORD
   ) return PCCERT_CONTEXT;
   pragma import (C,CertGetIssuerCertificateFromStore,"CertGetIssuerCertificateFromStore");
   function CertVerifySubjectCertificateContext(
      pSubject : PCCERT_CONTEXT;
      pIssuer : PCCERT_CONTEXT;
      pdwFlags : access DWORD
   ) return BOOL;
   pragma import (C,CertVerifySubjectCertificateContext,"CertVerifySubjectCertificateContext");
   function CertDuplicateCertificateContext(
      pCertContext : PCCERT_CONTEXT
   ) return PCCERT_CONTEXT;
   pragma import (C,CertDuplicateCertificateContext,"CertDuplicateCertificateContext");
   function CertCreateCertificateContext(
      dwCertEncodingType : DWORD;
      pbCertEncoded : access constant BYTE;
      cbCertEncoded : DWORD
   ) return PCCERT_CONTEXT;
   pragma import (C,CertCreateCertificateContext,"CertCreateCertificateContext");
   function CertFreeCertificateContext(
      pCertContext : PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CertFreeCertificateContext,"CertFreeCertificateContext");
   function CertSetCertificateContextProperty(
      pCertContext : PCCERT_CONTEXT;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pvData : access Void
   ) return BOOL;
   pragma import (C,CertSetCertificateContextProperty,"CertSetCertificateContextProperty");
   function CertGetCertificateContextProperty(
      pCertContext : PCCERT_CONTEXT;
      dwPropId : DWORD;
      pvData : access Void;
      pcbData : access DWORD
   ) return BOOL;
   pragma import (C,CertGetCertificateContextProperty,"CertGetCertificateContextProperty");
   function CertEnumCertificateContextProperties(
      pCertContext : PCCERT_CONTEXT;
      dwPropId : DWORD
   ) return DWORD;
   pragma import (C,CertEnumCertificateContextProperties,"CertEnumCertificateContextProperties");
   function CertCreateCTLEntryFromCertificateContextProperties(
      pCertContext : PCCERT_CONTEXT;
      cOptAttr : DWORD;
      rgOptAttr : PCRYPT_ATTRIBUTE;
      dwFlags : DWORD;
      pvReserved : access Void;
      pCtlEntry : PCTL_ENTRY;
      pcbCtlEntry : access DWORD
   ) return BOOL;
   pragma import (C,CertCreateCTLEntryFromCertificateContextProperties,"CertCreateCTLEntryFromCertificateContextProperties");
   function CertSetCertificateContextPropertiesFromCTLEntry(
      pCertContext : PCCERT_CONTEXT;
      pCtlEntry : PCTL_ENTRY;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CertSetCertificateContextPropertiesFromCTLEntry,"CertSetCertificateContextPropertiesFromCTLEntry");
   function CertGetCRLFromStore(
      hCertStore_x : HCERTSTORE;
      pIssuerContext : PCCERT_CONTEXT;
      pPrevCrlContext : PCCRL_CONTEXT;
      pdwFlags : access DWORD
   ) return PCCRL_CONTEXT;
   pragma import (C,CertGetCRLFromStore,"CertGetCRLFromStore");
   function CertEnumCRLsInStore(
      hCertStore_x : HCERTSTORE;
      pPrevCrlContext : PCCRL_CONTEXT
   ) return PCCRL_CONTEXT;
   pragma import (C,CertEnumCRLsInStore,"CertEnumCRLsInStore");
   function CertFindCRLInStore(
      hCertStore_x : HCERTSTORE;
      dwCertEncodingType : DWORD;
      dwFindFlags : DWORD;
      dwFindType : DWORD;
      pvFindPara : access Void;
      pPrevCrlContext : PCCRL_CONTEXT
   ) return PCCRL_CONTEXT;
   pragma import (C,CertFindCRLInStore,"CertFindCRLInStore");
   type CRL_FIND_ISSUED_FOR_PARA_x is record
      pSubjectCert : PCCERT_CONTEXT;
      pIssuerCert : PCCERT_CONTEXT;
   end record;
   subtype CRL_FIND_ISSUED_FOR_PARA is CRL_FIND_ISSUED_FOR_PARA_x; -- CXType_Elaborated
   type PCRL_FIND_ISSUED_FOR_PARA is access CRL_FIND_ISSUED_FOR_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CertDuplicateCRLContext(
      pCrlContext : PCCRL_CONTEXT
   ) return PCCRL_CONTEXT;
   pragma import (C,CertDuplicateCRLContext,"CertDuplicateCRLContext");
   function CertCreateCRLContext(
      dwCertEncodingType : DWORD;
      pbCrlEncoded : access constant BYTE;
      cbCrlEncoded : DWORD
   ) return PCCRL_CONTEXT;
   pragma import (C,CertCreateCRLContext,"CertCreateCRLContext");
   function CertFreeCRLContext(
      pCrlContext : PCCRL_CONTEXT
   ) return BOOL;
   pragma import (C,CertFreeCRLContext,"CertFreeCRLContext");
   function CertSetCRLContextProperty(
      pCrlContext : PCCRL_CONTEXT;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pvData : access Void
   ) return BOOL;
   pragma import (C,CertSetCRLContextProperty,"CertSetCRLContextProperty");
   function CertGetCRLContextProperty(
      pCrlContext : PCCRL_CONTEXT;
      dwPropId : DWORD;
      pvData : access Void;
      pcbData : access DWORD
   ) return BOOL;
   pragma import (C,CertGetCRLContextProperty,"CertGetCRLContextProperty");
   function CertEnumCRLContextProperties(
      pCrlContext : PCCRL_CONTEXT;
      dwPropId : DWORD
   ) return DWORD;
   pragma import (C,CertEnumCRLContextProperties,"CertEnumCRLContextProperties");
   function CertFindCertificateInCRL(
      pCert : PCCERT_CONTEXT;
      pCrlContext : PCCRL_CONTEXT;
      dwFlags : DWORD;
      pvReserved : access Void;
      ppCrlEntry : access PCRL_ENTRY
   ) return BOOL;
   pragma import (C,CertFindCertificateInCRL,"CertFindCertificateInCRL");
   function CertIsValidCRLForCertificate(
      pCert : PCCERT_CONTEXT;
      pCrl : PCCRL_CONTEXT;
      dwFlags : DWORD;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CertIsValidCRLForCertificate,"CertIsValidCRLForCertificate");
   function CertAddEncodedCertificateToStore(
      hCertStore_x : HCERTSTORE;
      dwCertEncodingType : DWORD;
      pbCertEncoded : access constant BYTE;
      cbCertEncoded : DWORD;
      dwAddDisposition : DWORD;
      ppCertContext : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddEncodedCertificateToStore,"CertAddEncodedCertificateToStore");
   function CertAddCertificateContextToStore(
      hCertStore_x : HCERTSTORE;
      pCertContext : PCCERT_CONTEXT;
      dwAddDisposition : DWORD;
      ppStoreContext : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddCertificateContextToStore,"CertAddCertificateContextToStore");
   function CertAddSerializedElementToStore(
      hCertStore_x : HCERTSTORE;
      pbElement : access constant BYTE;
      cbElement : DWORD;
      dwAddDisposition : DWORD;
      dwFlags : DWORD;
      dwContextTypeFlags : DWORD;
      pdwContextType : access DWORD;
      ppvContext : access LPVOID
   ) return BOOL;
   pragma import (C,CertAddSerializedElementToStore,"CertAddSerializedElementToStore");
   function CertDeleteCertificateFromStore(
      pCertContext : PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CertDeleteCertificateFromStore,"CertDeleteCertificateFromStore");
   function CertAddEncodedCRLToStore(
      hCertStore_x : HCERTSTORE;
      dwCertEncodingType : DWORD;
      pbCrlEncoded : access constant BYTE;
      cbCrlEncoded : DWORD;
      dwAddDisposition : DWORD;
      ppCrlContext : access PCCRL_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddEncodedCRLToStore,"CertAddEncodedCRLToStore");
   function CertAddCRLContextToStore(
      hCertStore_x : HCERTSTORE;
      pCrlContext : PCCRL_CONTEXT;
      dwAddDisposition : DWORD;
      ppStoreContext : access PCCRL_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddCRLContextToStore,"CertAddCRLContextToStore");
   function CertDeleteCRLFromStore(
      pCrlContext : PCCRL_CONTEXT
   ) return BOOL;
   pragma import (C,CertDeleteCRLFromStore,"CertDeleteCRLFromStore");
   function CertSerializeCertificateStoreElement(
      pCertContext : PCCERT_CONTEXT;
      dwFlags : DWORD;
      pbElement : access BYTE;
      pcbElement : access DWORD
   ) return BOOL;
   pragma import (C,CertSerializeCertificateStoreElement,"CertSerializeCertificateStoreElement");
   function CertSerializeCRLStoreElement(
      pCrlContext : PCCRL_CONTEXT;
      dwFlags : DWORD;
      pbElement : access BYTE;
      pcbElement : access DWORD
   ) return BOOL;
   pragma import (C,CertSerializeCRLStoreElement,"CertSerializeCRLStoreElement");
   function CertDuplicateCTLContext(
      pCtlContext : PCCTL_CONTEXT
   ) return PCCTL_CONTEXT;
   pragma import (C,CertDuplicateCTLContext,"CertDuplicateCTLContext");
   function CertCreateCTLContext(
      dwMsgAndCertEncodingType : DWORD;
      pbCtlEncoded : access constant BYTE;
      cbCtlEncoded : DWORD
   ) return PCCTL_CONTEXT;
   pragma import (C,CertCreateCTLContext,"CertCreateCTLContext");
   function CertFreeCTLContext(
      pCtlContext : PCCTL_CONTEXT
   ) return BOOL;
   pragma import (C,CertFreeCTLContext,"CertFreeCTLContext");
   function CertSetCTLContextProperty(
      pCtlContext : PCCTL_CONTEXT;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pvData : access Void
   ) return BOOL;
   pragma import (C,CertSetCTLContextProperty,"CertSetCTLContextProperty");
   function CertGetCTLContextProperty(
      pCtlContext : PCCTL_CONTEXT;
      dwPropId : DWORD;
      pvData : access Void;
      pcbData : access DWORD
   ) return BOOL;
   pragma import (C,CertGetCTLContextProperty,"CertGetCTLContextProperty");
   function CertEnumCTLContextProperties(
      pCtlContext : PCCTL_CONTEXT;
      dwPropId : DWORD
   ) return DWORD;
   pragma import (C,CertEnumCTLContextProperties,"CertEnumCTLContextProperties");
   function CertEnumCTLsInStore(
      hCertStore_x : HCERTSTORE;
      pPrevCtlContext : PCCTL_CONTEXT
   ) return PCCTL_CONTEXT;
   pragma import (C,CertEnumCTLsInStore,"CertEnumCTLsInStore");
   function CertFindSubjectInCTL(
      dwEncodingType : DWORD;
      dwSubjectType : DWORD;
      pvSubject : access Void;
      pCtlContext : PCCTL_CONTEXT;
      dwFlags : DWORD
   ) return PCTL_ENTRY;
   pragma import (C,CertFindSubjectInCTL,"CertFindSubjectInCTL");
   type CTL_ANY_SUBJECT_INFO_x is record
      SubjectAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      SubjectIdentifier : CRYPT_DATA_BLOB;
   end record;
   subtype CTL_ANY_SUBJECT_INFO is CTL_ANY_SUBJECT_INFO_x; -- CXType_Elaborated
   type PCTL_ANY_SUBJECT_INFO is access CTL_ANY_SUBJECT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CertFindCTLInStore(
      hCertStore_x : HCERTSTORE;
      dwMsgAndCertEncodingType : DWORD;
      dwFindFlags : DWORD;
      dwFindType : DWORD;
      pvFindPara : access Void;
      pPrevCtlContext : PCCTL_CONTEXT
   ) return PCCTL_CONTEXT;
   pragma import (C,CertFindCTLInStore,"CertFindCTLInStore");
   type CTL_FIND_USAGE_PARA_x is record
      cbSize : DWORD;
      SubjectUsage : CTL_USAGE;
      ListIdentifier : CRYPT_DATA_BLOB;
      pSigner : PCERT_INFO;
   end record;
   subtype CTL_FIND_USAGE_PARA is CTL_FIND_USAGE_PARA_x; -- CXType_Elaborated
   type PCTL_FIND_USAGE_PARA is access CTL_FIND_USAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CTL_FIND_SUBJECT_PARA_x is record
      cbSize : DWORD;
      pUsagePara : PCTL_FIND_USAGE_PARA;
      dwSubjectType : DWORD;
      pvSubject : access Void;
   end record;
   subtype CTL_FIND_SUBJECT_PARA is CTL_FIND_SUBJECT_PARA_x; -- CXType_Elaborated
   type PCTL_FIND_SUBJECT_PARA is access CTL_FIND_SUBJECT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CertAddEncodedCTLToStore(
      hCertStore_x : HCERTSTORE;
      dwMsgAndCertEncodingType : DWORD;
      pbCtlEncoded : access constant BYTE;
      cbCtlEncoded : DWORD;
      dwAddDisposition : DWORD;
      ppCtlContext : access PCCTL_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddEncodedCTLToStore,"CertAddEncodedCTLToStore");
   function CertAddCTLContextToStore(
      hCertStore_x : HCERTSTORE;
      pCtlContext : PCCTL_CONTEXT;
      dwAddDisposition : DWORD;
      ppStoreContext : access PCCTL_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddCTLContextToStore,"CertAddCTLContextToStore");
   function CertSerializeCTLStoreElement(
      pCtlContext : PCCTL_CONTEXT;
      dwFlags : DWORD;
      pbElement : access BYTE;
      pcbElement : access DWORD
   ) return BOOL;
   pragma import (C,CertSerializeCTLStoreElement,"CertSerializeCTLStoreElement");
   function CertDeleteCTLFromStore(
      pCtlContext : PCCTL_CONTEXT
   ) return BOOL;
   pragma import (C,CertDeleteCTLFromStore,"CertDeleteCTLFromStore");
   function CertAddCertificateLinkToStore(
      hCertStore_x : HCERTSTORE;
      pCertContext : PCCERT_CONTEXT;
      dwAddDisposition : DWORD;
      ppStoreContext : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddCertificateLinkToStore,"CertAddCertificateLinkToStore");
   function CertAddCRLLinkToStore(
      hCertStore_x : HCERTSTORE;
      pCrlContext : PCCRL_CONTEXT;
      dwAddDisposition : DWORD;
      ppStoreContext : access PCCRL_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddCRLLinkToStore,"CertAddCRLLinkToStore");
   function CertAddCTLLinkToStore(
      hCertStore_x : HCERTSTORE;
      pCtlContext : PCCTL_CONTEXT;
      dwAddDisposition : DWORD;
      ppStoreContext : access PCCTL_CONTEXT
   ) return BOOL;
   pragma import (C,CertAddCTLLinkToStore,"CertAddCTLLinkToStore");
   function CertAddStoreToCollection(
      hCollectionStore : HCERTSTORE;
      hSiblingStore : HCERTSTORE;
      dwUpdateFlags : DWORD;
      dwPriority : DWORD
   ) return BOOL;
   pragma import (C,CertAddStoreToCollection,"CertAddStoreToCollection");
   procedure CertRemoveStoreFromCollection(
      hCollectionStore : HCERTSTORE;
      hSiblingStore : HCERTSTORE
   );
   pragma import (C,CertRemoveStoreFromCollection,"CertRemoveStoreFromCollection");
   function CertControlStore(
      hCertStore_x : HCERTSTORE;
      dwFlags : DWORD;
      dwCtrlType : DWORD;
      pvCtrlPara : access Void
   ) return BOOL;
   pragma import (C,CertControlStore,"CertControlStore");
   function CertSetStoreProperty(
      hCertStore_x : HCERTSTORE;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pvData : access Void
   ) return BOOL;
   pragma import (C,CertSetStoreProperty,"CertSetStoreProperty");
   function CertGetStoreProperty(
      hCertStore_x : HCERTSTORE;
      dwPropId : DWORD;
      pvData : access Void;
      pcbData : access DWORD
   ) return BOOL;
   pragma import (C,CertGetStoreProperty,"CertGetStoreProperty");
   subtype PFN_CERT_CREATE_CONTEXT_SORT_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, DWORD, DWORD, void *)
   type CERT_CREATE_CONTEXT_PARA_x is record
      cbSize : DWORD;
      pfnFree : PFN_CRYPT_FREE;
      pvFree : access Void;
      pfnSort : PFN_CERT_CREATE_CONTEXT_SORT_FUNC;
      pvSort : access Void;
   end record;
   subtype CERT_CREATE_CONTEXT_PARA is CERT_CREATE_CONTEXT_PARA_x; -- CXType_Elaborated
   type PCERT_CREATE_CONTEXT_PARA is access CERT_CREATE_CONTEXT_PARA_x; -- CXType_Pointer - CXType_Elaborated
   procedure CertCreateContext(
      dwContextType : DWORD;
      dwEncodingType : DWORD;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      dwFlags : DWORD;
      pCreatePara : PCERT_CREATE_CONTEXT_PARA
   );
   pragma import (C,CertCreateContext,"CertCreateContext");
   type CERT_SYSTEM_STORE_INFO_x is record
      cbSize : DWORD;
   end record;
   subtype CERT_SYSTEM_STORE_INFO is CERT_SYSTEM_STORE_INFO_x; -- CXType_Elaborated
   type PCERT_SYSTEM_STORE_INFO is access CERT_SYSTEM_STORE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_PHYSICAL_STORE_INFO_x is record
      cbSize : DWORD;
      pszOpenStoreProvider : LPSTR;
      dwOpenEncodingType : DWORD;
      dwOpenFlags : DWORD;
      OpenParameters : CRYPT_DATA_BLOB;
      dwFlags : DWORD;
      dwPriority : DWORD;
   end record;
   subtype CERT_PHYSICAL_STORE_INFO is CERT_PHYSICAL_STORE_INFO_x; -- CXType_Elaborated
   type PCERT_PHYSICAL_STORE_INFO is access CERT_PHYSICAL_STORE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CertRegisterSystemStore(
      pvSystemStore : access Void;
      dwFlags : DWORD;
      pStoreInfo : PCERT_SYSTEM_STORE_INFO;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CertRegisterSystemStore,"CertRegisterSystemStore");
   function CertRegisterPhysicalStore(
      pvSystemStore : access Void;
      dwFlags : DWORD;
      pwszStoreName : LPCWSTR;
      pStoreInfo : PCERT_PHYSICAL_STORE_INFO;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CertRegisterPhysicalStore,"CertRegisterPhysicalStore");
   function CertUnregisterSystemStore(
      pvSystemStore : access Void;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CertUnregisterSystemStore,"CertUnregisterSystemStore");
   function CertUnregisterPhysicalStore(
      pvSystemStore : access Void;
      dwFlags : DWORD;
      pwszStoreName : LPCWSTR
   ) return BOOL;
   pragma import (C,CertUnregisterPhysicalStore,"CertUnregisterPhysicalStore");
   subtype PFN_CERT_ENUM_SYSTEM_STORE_LOCATION is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPCWSTR, DWORD, void *, void *)
   subtype PFN_CERT_ENUM_SYSTEM_STORE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (const void *, DWORD, PCERT_SYSTEM_STORE_INFO, void *, void *)
   subtype PFN_CERT_ENUM_PHYSICAL_STORE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (const void *, DWORD, LPCWSTR, PCERT_PHYSICAL_STORE_INFO, void *, void *)
   function CertEnumSystemStoreLocation(
      dwFlags : DWORD;
      pvArg : access Void;
      pfnEnum : PFN_CERT_ENUM_SYSTEM_STORE_LOCATION
   ) return BOOL;
   pragma import (C,CertEnumSystemStoreLocation,"CertEnumSystemStoreLocation");
   function CertEnumSystemStore(
      dwFlags : DWORD;
      pvSystemStoreLocationPara : access Void;
      pvArg : access Void;
      pfnEnum : PFN_CERT_ENUM_SYSTEM_STORE
   ) return BOOL;
   pragma import (C,CertEnumSystemStore,"CertEnumSystemStore");
   function CertEnumPhysicalStore(
      pvSystemStore : access Void;
      dwFlags : DWORD;
      pvArg : access Void;
      pfnEnum : PFN_CERT_ENUM_PHYSICAL_STORE
   ) return BOOL;
   pragma import (C,CertEnumPhysicalStore,"CertEnumPhysicalStore");
   function CertGetEnhancedKeyUsage(
      pCertContext : PCCERT_CONTEXT;
      dwFlags : DWORD;
      pUsage : PCERT_ENHKEY_USAGE;
      pcbUsage : access DWORD
   ) return BOOL;
   pragma import (C,CertGetEnhancedKeyUsage,"CertGetEnhancedKeyUsage");
   function CertSetEnhancedKeyUsage(
      pCertContext : PCCERT_CONTEXT;
      pUsage : PCERT_ENHKEY_USAGE
   ) return BOOL;
   pragma import (C,CertSetEnhancedKeyUsage,"CertSetEnhancedKeyUsage");
   function CertAddEnhancedKeyUsageIdentifier(
      pCertContext : PCCERT_CONTEXT;
      pszUsageIdentifier : LPCSTR
   ) return BOOL;
   pragma import (C,CertAddEnhancedKeyUsageIdentifier,"CertAddEnhancedKeyUsageIdentifier");
   function CertRemoveEnhancedKeyUsageIdentifier(
      pCertContext : PCCERT_CONTEXT;
      pszUsageIdentifier : LPCSTR
   ) return BOOL;
   pragma import (C,CertRemoveEnhancedKeyUsageIdentifier,"CertRemoveEnhancedKeyUsageIdentifier");
   function CertGetValidUsages(
      cCerts : DWORD;
      rghCerts : access PCCERT_CONTEXT;
      cNumOIDs : access Interfaces.C.Int;
      rghOIDs : access LPSTR;
      pcbOIDs : access DWORD
   ) return BOOL;
   pragma import (C,CertGetValidUsages,"CertGetValidUsages");
   function CryptMsgGetAndVerifySigner(
      hCryptMsg_x : HCRYPTMSG;
      cSignerStore : DWORD;
      rghSignerStore : access HCERTSTORE;
      dwFlags : DWORD;
      ppSigner : access PCCERT_CONTEXT;
      pdwSignerIndex : access DWORD
   ) return BOOL;
   pragma import (C,CryptMsgGetAndVerifySigner,"CryptMsgGetAndVerifySigner");
   function CryptMsgSignCTL(
      dwMsgEncodingType : DWORD;
      pbCtlContent : access BYTE;
      cbCtlContent : DWORD;
      pSignInfo : PCMSG_SIGNED_ENCODE_INFO;
      dwFlags : DWORD;
      pbEncoded : access BYTE;
      pcbEncoded : access DWORD
   ) return BOOL;
   pragma import (C,CryptMsgSignCTL,"CryptMsgSignCTL");
   function CryptMsgEncodeAndSignCTL(
      dwMsgEncodingType : DWORD;
      pCtlInfo : PCTL_INFO;
      pSignInfo : PCMSG_SIGNED_ENCODE_INFO;
      dwFlags : DWORD;
      pbEncoded : access BYTE;
      pcbEncoded : access DWORD
   ) return BOOL;
   pragma import (C,CryptMsgEncodeAndSignCTL,"CryptMsgEncodeAndSignCTL");
   function CertFindSubjectInSortedCTL(
      pSubjectIdentifier : PCRYPT_DATA_BLOB;
      pCtlContext : PCCTL_CONTEXT;
      dwFlags : DWORD;
      pvReserved : access Void;
      pEncodedAttributes : PCRYPT_DER_BLOB
   ) return BOOL;
   pragma import (C,CertFindSubjectInSortedCTL,"CertFindSubjectInSortedCTL");
   function CertEnumSubjectInSortedCTL(
      pCtlContext : PCCTL_CONTEXT;
      ppvNextSubject : access LPVOID;
      pSubjectIdentifier : PCRYPT_DER_BLOB;
      pEncodedAttributes : PCRYPT_DER_BLOB
   ) return BOOL;
   pragma import (C,CertEnumSubjectInSortedCTL,"CertEnumSubjectInSortedCTL");
   type CTL_VERIFY_USAGE_PARA_x is record
      cbSize : DWORD;
      ListIdentifier : CRYPT_DATA_BLOB;
      cCtlStore : DWORD;
      rghCtlStore : access HCERTSTORE;
      cSignerStore : DWORD;
      rghSignerStore : access HCERTSTORE;
   end record;
   subtype CTL_VERIFY_USAGE_PARA is CTL_VERIFY_USAGE_PARA_x; -- CXType_Elaborated
   type PCTL_VERIFY_USAGE_PARA is access CTL_VERIFY_USAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CTL_VERIFY_USAGE_STATUS_x is record
      cbSize : DWORD;
      dwError : DWORD;
      dwFlags : DWORD;
      ppCtl : access PCCTL_CONTEXT;
      dwCtlEntryIndex : DWORD;
      ppSigner : access PCCERT_CONTEXT;
      dwSignerIndex : DWORD;
   end record;
   subtype CTL_VERIFY_USAGE_STATUS is CTL_VERIFY_USAGE_STATUS_x; -- CXType_Elaborated
   type PCTL_VERIFY_USAGE_STATUS is access CTL_VERIFY_USAGE_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   function CertVerifyCTLUsage(
      dwEncodingType : DWORD;
      dwSubjectType : DWORD;
      pvSubject : access Void;
      pSubjectUsage : PCTL_USAGE;
      dwFlags : DWORD;
      pVerifyUsagePara : PCTL_VERIFY_USAGE_PARA;
      pVerifyUsageStatus : PCTL_VERIFY_USAGE_STATUS
   ) return BOOL;
   pragma import (C,CertVerifyCTLUsage,"CertVerifyCTLUsage");
   type CERT_REVOCATION_CRL_INFO_x is record
      cbSize : DWORD;
      pBaseCrlContext : PCCRL_CONTEXT;
      pDeltaCrlContext : PCCRL_CONTEXT;
      pCrlEntry : PCRL_ENTRY;
      fDeltaCrlEntry : BOOL;
   end record;
   subtype CERT_REVOCATION_CRL_INFO is CERT_REVOCATION_CRL_INFO_x; -- CXType_Elaborated
   type PCERT_REVOCATION_CRL_INFO is access CERT_REVOCATION_CRL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REVOCATION_CHAIN_PARA_x; -- Forward Declaration
   subtype CERT_REVOCATION_CHAIN_PARA is CERT_REVOCATION_CHAIN_PARA_x; -- CXType_Elaborated
   type PCERT_REVOCATION_CHAIN_PARA is access CERT_REVOCATION_CHAIN_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REVOCATION_PARA_x is record
      cbSize : DWORD;
      pIssuerCert : PCCERT_CONTEXT;
      cCertStore : DWORD;
      rgCertStore : access HCERTSTORE;
      hCrlStore : HCERTSTORE;
      pftTimeToUse : LPFILETIME;
   end record;
   subtype CERT_REVOCATION_PARA is CERT_REVOCATION_PARA_x; -- CXType_Elaborated
   type PCERT_REVOCATION_PARA is access CERT_REVOCATION_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REVOCATION_STATUS_x is record
      cbSize : DWORD;
      dwIndex : DWORD;
      dwError : DWORD;
      dwReason : DWORD;
      fHasFreshnessTime : BOOL;
      dwFreshnessTime : DWORD;
   end record;
   subtype CERT_REVOCATION_STATUS is CERT_REVOCATION_STATUS_x; -- CXType_Elaborated
   type PCERT_REVOCATION_STATUS is access CERT_REVOCATION_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   function CertVerifyRevocation(
      dwEncodingType : DWORD;
      dwRevType : DWORD;
      cContext : DWORD;
      rgpvContext : Void;
      dwFlags : DWORD;
      pRevPara : PCERT_REVOCATION_PARA;
      pRevStatus : PCERT_REVOCATION_STATUS
   ) return BOOL;
   pragma import (C,CertVerifyRevocation,"CertVerifyRevocation");
   function CertCompareIntegerBlob(
      pInt1 : PCRYPT_INTEGER_BLOB;
      pInt2 : PCRYPT_INTEGER_BLOB
   ) return BOOL;
   pragma import (C,CertCompareIntegerBlob,"CertCompareIntegerBlob");
   function CertCompareCertificate(
      dwCertEncodingType : DWORD;
      pCertId1 : PCERT_INFO;
      pCertId2 : PCERT_INFO
   ) return BOOL;
   pragma import (C,CertCompareCertificate,"CertCompareCertificate");
   function CertCompareCertificateName(
      dwCertEncodingType : DWORD;
      pCertName1 : PCERT_NAME_BLOB;
      pCertName2 : PCERT_NAME_BLOB
   ) return BOOL;
   pragma import (C,CertCompareCertificateName,"CertCompareCertificateName");
   function CertIsRDNAttrsInCertificateName(
      dwCertEncodingType : DWORD;
      dwFlags : DWORD;
      pCertName : PCERT_NAME_BLOB;
      pRDN : PCERT_RDN
   ) return BOOL;
   pragma import (C,CertIsRDNAttrsInCertificateName,"CertIsRDNAttrsInCertificateName");
   function CertComparePublicKeyInfo(
      dwCertEncodingType : DWORD;
      pPublicKey1 : PCERT_PUBLIC_KEY_INFO;
      pPublicKey2 : PCERT_PUBLIC_KEY_INFO
   ) return BOOL;
   pragma import (C,CertComparePublicKeyInfo,"CertComparePublicKeyInfo");
   function CertGetPublicKeyLength(
      dwCertEncodingType : DWORD;
      pPublicKey : PCERT_PUBLIC_KEY_INFO
   ) return DWORD;
   pragma import (C,CertGetPublicKeyLength,"CertGetPublicKeyLength");
   function CryptVerifyCertificateSignature(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwCertEncodingType : DWORD;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      pPublicKey : PCERT_PUBLIC_KEY_INFO
   ) return BOOL;
   pragma import (C,CryptVerifyCertificateSignature,"CryptVerifyCertificateSignature");
   function CryptVerifyCertificateSignatureEx(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwCertEncodingType : DWORD;
      dwSubjectType : DWORD;
      pvSubject : access Void;
      dwIssuerType : DWORD;
      pvIssuer : access Void;
      dwFlags : DWORD;
      pvExtra : access Void
   ) return BOOL;
   pragma import (C,CryptVerifyCertificateSignatureEx,"CryptVerifyCertificateSignatureEx");
   type CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO_x is record
      CertSignHashCNGAlgPropData : CRYPT_DATA_BLOB;
      CertIssuerPubKeyBitLengthPropData : CRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO is CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO_x; -- CXType_Elaborated
   type PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO is access CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO_x is record
      cCNGHashAlgid : DWORD;
      rgpwszCNGHashAlgid : access PCWSTR;
      dwWeakIndex : DWORD;
   end record;
   subtype CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO is CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO_x; -- CXType_Elaborated
   type PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO is access CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CertIsStrongHashToSign(
      pStrongSignPara : PCCERT_STRONG_SIGN_PARA;
      pwszCNGHashAlgid : LPCWSTR;
      pSigningCert : PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CertIsStrongHashToSign,"CertIsStrongHashToSign");
   function CryptHashToBeSigned(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwCertEncodingType : DWORD;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptHashToBeSigned,"CryptHashToBeSigned");
   function CryptHashCertificate(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      Algid : ALG_ID;
      dwFlags : DWORD;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptHashCertificate,"CryptHashCertificate");
   function CryptHashCertificate2(
      pwszCNGHashAlgid : LPCWSTR;
      dwFlags : DWORD;
      pvReserved : access Void;
      pbEncoded : access constant BYTE;
      cbEncoded : DWORD;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptHashCertificate2,"CryptHashCertificate2");
   function CryptSignCertificate(
      hCryptProvOrNCryptKey : HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
      dwKeySpec : DWORD;
      dwCertEncodingType : DWORD;
      pbEncodedToBeSigned : access constant BYTE;
      cbEncodedToBeSigned : DWORD;
      pSignatureAlgorithm : PCRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
      pbSignature : access BYTE;
      pcbSignature : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignCertificate,"CryptSignCertificate");
   function CryptSignAndEncodeCertificate(
      hCryptProvOrNCryptKey : HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
      dwKeySpec : DWORD;
      dwCertEncodingType : DWORD;
      lpszStructType : LPCSTR;
      pvStructInfo : access Void;
      pSignatureAlgorithm : PCRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
      pbEncoded : access BYTE;
      pcbEncoded : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignAndEncodeCertificate,"CryptSignAndEncodeCertificate");
   subtype PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, PCRYPT_ALGORITHM_IDENTIFIER, void **, LPWSTR *)
   subtype PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (NCRYPT_KEY_HANDLE, DWORD, PCRYPT_ALGORITHM_IDENTIFIER, void *, LPCWSTR, LPCWSTR, BYTE *, DWORD, BYTE *, DWORD *)
   subtype PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, PCERT_PUBLIC_KEY_INFO, PCRYPT_ALGORITHM_IDENTIFIER, void *, LPCWSTR, LPCWSTR, BYTE *, DWORD, BYTE *, DWORD)
   function CertVerifyTimeValidity(
      pTimeToVerify : LPFILETIME;
      pCertInfo : PCERT_INFO
   ) return LONG;
   pragma import (C,CertVerifyTimeValidity,"CertVerifyTimeValidity");
   function CertVerifyCRLTimeValidity(
      pTimeToVerify : LPFILETIME;
      pCrlInfo : PCRL_INFO
   ) return LONG;
   pragma import (C,CertVerifyCRLTimeValidity,"CertVerifyCRLTimeValidity");
   function CertVerifyValidityNesting(
      pSubjectInfo : PCERT_INFO;
      pIssuerInfo : PCERT_INFO
   ) return BOOL;
   pragma import (C,CertVerifyValidityNesting,"CertVerifyValidityNesting");
   function CertVerifyCRLRevocation(
      dwCertEncodingType : DWORD;
      pCertId : PCERT_INFO;
      cCrlInfo : DWORD;
      rgpCrlInfo : Void
   ) return BOOL;
   pragma import (C,CertVerifyCRLRevocation,"CertVerifyCRLRevocation");
   function CertAlgIdToOID(
      dwAlgId : DWORD
   ) return LPCSTR;
   pragma import (C,CertAlgIdToOID,"CertAlgIdToOID");
   function CertOIDToAlgId(
      pszObjId : LPCSTR
   ) return DWORD;
   pragma import (C,CertOIDToAlgId,"CertOIDToAlgId");
   function CertFindExtension(
      pszObjId : LPCSTR;
      cExtensions : DWORD;
      rgExtensions : Void
   ) return PCERT_EXTENSION;
   pragma import (C,CertFindExtension,"CertFindExtension");
   function CertFindAttribute(
      pszObjId : LPCSTR;
      cAttr : DWORD;
      rgAttr : Void
   ) return PCRYPT_ATTRIBUTE;
   pragma import (C,CertFindAttribute,"CertFindAttribute");
   function CertFindRDNAttr(
      pszObjId : LPCSTR;
      pName : PCERT_NAME_INFO
   ) return PCERT_RDN_ATTR;
   pragma import (C,CertFindRDNAttr,"CertFindRDNAttr");
   function CertGetIntendedKeyUsage(
      dwCertEncodingType : DWORD;
      pCertInfo : PCERT_INFO;
      pbKeyUsage : access BYTE;
      cbKeyUsage : DWORD
   ) return BOOL;
   pragma import (C,CertGetIntendedKeyUsage,"CertGetIntendedKeyUsage");
   type HCRYPTDEFAULTCONTEXT is access Void; -- CXType_Pointer - CXType_Void
   function CryptInstallDefaultContext(
      hCryptProv_x : HCRYPTPROV;
      dwDefaultType : DWORD;
      pvDefaultPara : access Void;
      dwFlags : DWORD;
      pvReserved : access Void;
      phDefaultContext : access HCRYPTDEFAULTCONTEXT
   ) return BOOL;
   pragma import (C,CryptInstallDefaultContext,"CryptInstallDefaultContext");
   type CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA_x is record
      cOID : DWORD;
      rgpszOID : access LPSTR;
   end record;
   subtype CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA is CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA_x; -- CXType_Elaborated
   type PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA is access CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CryptUninstallDefaultContext(
      hDefaultContext : HCRYPTDEFAULTCONTEXT;
      dwFlags : DWORD;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CryptUninstallDefaultContext,"CryptUninstallDefaultContext");
   function CryptExportPublicKeyInfo(
      hCryptProvOrNCryptKey : HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
      dwKeySpec : DWORD;
      dwCertEncodingType : DWORD;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      pcbInfo : access DWORD
   ) return BOOL;
   pragma import (C,CryptExportPublicKeyInfo,"CryptExportPublicKeyInfo");
   function CryptExportPublicKeyInfoEx(
      hCryptProvOrNCryptKey : HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
      dwKeySpec : DWORD;
      dwCertEncodingType : DWORD;
      pszPublicKeyObjId : LPSTR;
      dwFlags : DWORD;
      pvAuxInfo : access Void;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      pcbInfo : access DWORD
   ) return BOOL;
   pragma import (C,CryptExportPublicKeyInfoEx,"CryptExportPublicKeyInfoEx");
   subtype PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (NCRYPT_KEY_HANDLE, DWORD, LPSTR, DWORD, void *, PCERT_PUBLIC_KEY_INFO, DWORD *)
   function CryptExportPublicKeyInfoFromBCryptKeyHandle(
      hBCryptKey : BCRYPT_KEY_HANDLE;
      dwCertEncodingType : DWORD;
      pszPublicKeyObjId : LPSTR;
      dwFlags : DWORD;
      pvAuxInfo : access Void;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      pcbInfo : access DWORD
   ) return BOOL;
   pragma import (C,CryptExportPublicKeyInfoFromBCryptKeyHandle,"CryptExportPublicKeyInfoFromBCryptKeyHandle");
   subtype PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (BCRYPT_KEY_HANDLE, DWORD, LPSTR, DWORD, void *, PCERT_PUBLIC_KEY_INFO, DWORD *)
   function CryptImportPublicKeyInfo(
      hCryptProv_x : HCRYPTPROV;
      dwCertEncodingType : DWORD;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      phKey_x : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptImportPublicKeyInfo,"CryptImportPublicKeyInfo");
   function CryptImportPublicKeyInfoEx(
      hCryptProv_x : HCRYPTPROV;
      dwCertEncodingType : DWORD;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      aiKeyAlg : ALG_ID;
      dwFlags : DWORD;
      pvAuxInfo : access Void;
      phKey_x : access HCRYPTKEY
   ) return BOOL;
   pragma import (C,CryptImportPublicKeyInfoEx,"CryptImportPublicKeyInfoEx");
   function CryptImportPublicKeyInfoEx2(
      dwCertEncodingType : DWORD;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      dwFlags : DWORD;
      pvAuxInfo : access Void;
      phKey_x : access BCRYPT_KEY_HANDLE
   ) return BOOL;
   pragma import (C,CryptImportPublicKeyInfoEx2,"CryptImportPublicKeyInfoEx2");
   subtype PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, PCERT_PUBLIC_KEY_INFO, DWORD, void *, BCRYPT_KEY_HANDLE *)
   function CryptAcquireCertificatePrivateKey(
      pCert : PCCERT_CONTEXT;
      dwFlags : DWORD;
      pvParameters : access Void;
      phCryptProvOrNCryptKey : access HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
      pdwKeySpec : access DWORD;
      pfCallerFreeProvOrNCryptKey : access BOOL
   ) return BOOL;
   pragma import (C,CryptAcquireCertificatePrivateKey,"CryptAcquireCertificatePrivateKey");
   function CryptFindCertificateKeyProvInfo(
      pCert : PCCERT_CONTEXT;
      dwFlags : DWORD;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CryptFindCertificateKeyProvInfo,"CryptFindCertificateKeyProvInfo");
   subtype PFN_IMPORT_PRIV_KEY_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCRYPTPROV, CRYPT_PRIVATE_KEY_INFO *, DWORD, void *)
   function CryptImportPKCS8(
      sPrivateKeyAndParams : CRYPT_PKCS8_IMPORT_PARAMS;
      dwFlags : DWORD;
      phCryptProv : access HCRYPTPROV;
      pvAuxInfo : access Void
   ) return BOOL;
   pragma import (C,CryptImportPKCS8,"CryptImportPKCS8");
   subtype PFN_EXPORT_PRIV_KEY_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCRYPTPROV, DWORD, LPSTR, DWORD, void *, CRYPT_PRIVATE_KEY_INFO *, DWORD *)
   function CryptExportPKCS8(
      hCryptProv_x : HCRYPTPROV;
      dwKeySpec : DWORD;
      pszPrivateKeyObjId : LPSTR;
      dwFlags : DWORD;
      pvAuxInfo : access Void;
      pbPrivateKeyBlob : access BYTE;
      pcbPrivateKeyBlob : access DWORD
   ) return BOOL;
   pragma import (C,CryptExportPKCS8,"CryptExportPKCS8");
   function CryptExportPKCS8Ex(
      psExportParams : access CRYPT_PKCS8_EXPORT_PARAMS;
      dwFlags : DWORD;
      pvAuxInfo : access Void;
      pbPrivateKeyBlob : access BYTE;
      pcbPrivateKeyBlob : access DWORD
   ) return BOOL;
   pragma import (C,CryptExportPKCS8Ex,"CryptExportPKCS8Ex");
   function CryptHashPublicKeyInfo(
      hCryptProv_x : HCRYPTPROV_LEGACY;
      Algid : ALG_ID;
      dwFlags : DWORD;
      dwCertEncodingType : DWORD;
      pInfo : PCERT_PUBLIC_KEY_INFO;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptHashPublicKeyInfo,"CryptHashPublicKeyInfo");
   function CertRDNValueToStrA(
      dwValueType : DWORD;
      pValue_x : PCERT_RDN_VALUE_BLOB;
      psz_x : LPSTR;
      csz : DWORD
   ) return DWORD;
   pragma import (C,CertRDNValueToStrA,"CertRDNValueToStrA");
   function CertRDNValueToStrW(
      dwValueType : DWORD;
      pValue_x : PCERT_RDN_VALUE_BLOB;
      psz_x : LPWSTR;
      csz : DWORD
   ) return DWORD;
   pragma import (C,CertRDNValueToStrW,"CertRDNValueToStrW");
   function CertNameToStrA(
      dwCertEncodingType : DWORD;
      pName : PCERT_NAME_BLOB;
      dwStrType : DWORD;
      psz_x : LPSTR;
      csz : DWORD
   ) return DWORD;
   pragma import (C,CertNameToStrA,"CertNameToStrA");
   function CertNameToStrW(
      dwCertEncodingType : DWORD;
      pName : PCERT_NAME_BLOB;
      dwStrType : DWORD;
      psz_x : LPWSTR;
      csz : DWORD
   ) return DWORD;
   pragma import (C,CertNameToStrW,"CertNameToStrW");
   function CertStrToNameA(
      dwCertEncodingType : DWORD;
      pszX500 : LPCSTR;
      dwStrType : DWORD;
      pvReserved : access Void;
      pbEncoded : access BYTE;
      pcbEncoded : access DWORD;
      ppszError : access LPCSTR
   ) return BOOL;
   pragma import (C,CertStrToNameA,"CertStrToNameA");
   function CertStrToNameW(
      dwCertEncodingType : DWORD;
      pszX500 : LPCWSTR;
      dwStrType : DWORD;
      pvReserved : access Void;
      pbEncoded : access BYTE;
      pcbEncoded : access DWORD;
      ppszError : access LPCWSTR
   ) return BOOL;
   pragma import (C,CertStrToNameW,"CertStrToNameW");
   function CertGetNameStringA(
      pCertContext : PCCERT_CONTEXT;
      dwType : DWORD;
      dwFlags : DWORD;
      pvTypePara : access Void;
      pszNameString : LPSTR;
      cchNameString : DWORD
   ) return DWORD;
   pragma import (C,CertGetNameStringA,"CertGetNameStringA");
   function CertGetNameStringW(
      pCertContext : PCCERT_CONTEXT;
      dwType : DWORD;
      dwFlags : DWORD;
      pvTypePara : access Void;
      pszNameString : LPWSTR;
      cchNameString : DWORD
   ) return DWORD;
   pragma import (C,CertGetNameStringW,"CertGetNameStringW");
   subtype PFN_CRYPT_GET_SIGNER_CERTIFICATE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] PCCERT_CONTEXT (void *, DWORD, PCERT_INFO, HCERTSTORE)
   type CRYPT_SIGN_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgEncodingType : DWORD;
      pSigningCert : PCCERT_CONTEXT;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
      cMsgCert : DWORD;
      rgpMsgCert : access PCCERT_CONTEXT;
      cMsgCrl : DWORD;
      rgpMsgCrl : access PCCRL_CONTEXT;
      cAuthAttr : DWORD;
      rgAuthAttr : PCRYPT_ATTRIBUTE;
      cUnauthAttr : DWORD;
      rgUnauthAttr : PCRYPT_ATTRIBUTE;
      dwFlags : DWORD;
      dwInnerContentType : DWORD;
   end record;
   subtype CRYPT_SIGN_MESSAGE_PARA is CRYPT_SIGN_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_SIGN_MESSAGE_PARA is access CRYPT_SIGN_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_VERIFY_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgAndCertEncodingType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      pfnGetSignerCertificate : PFN_CRYPT_GET_SIGNER_CERTIFICATE;
      pvGetArg : access Void;
   end record;
   subtype CRYPT_VERIFY_MESSAGE_PARA is CRYPT_VERIFY_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_VERIFY_MESSAGE_PARA is access CRYPT_VERIFY_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_ENCRYPT_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgEncodingType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      ContentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvEncryptionAuxInfo : access Void;
      dwFlags : DWORD;
      dwInnerContentType : DWORD;
   end record;
   subtype CRYPT_ENCRYPT_MESSAGE_PARA is CRYPT_ENCRYPT_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_ENCRYPT_MESSAGE_PARA is access CRYPT_ENCRYPT_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_DECRYPT_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgAndCertEncodingType : DWORD;
      cCertStore : DWORD;
      rghCertStore : access HCERTSTORE;
   end record;
   subtype CRYPT_DECRYPT_MESSAGE_PARA is CRYPT_DECRYPT_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_DECRYPT_MESSAGE_PARA is access CRYPT_DECRYPT_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_HASH_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgEncodingType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
   end record;
   subtype CRYPT_HASH_MESSAGE_PARA is CRYPT_HASH_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_HASH_MESSAGE_PARA is access CRYPT_HASH_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_KEY_SIGN_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgAndCertEncodingType : DWORD;
      dwKeySpec : DWORD;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      pvHashAuxInfo : access Void;
      PubKeyAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
   end record;
   subtype CRYPT_KEY_SIGN_MESSAGE_PARA is CRYPT_KEY_SIGN_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_KEY_SIGN_MESSAGE_PARA is access CRYPT_KEY_SIGN_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_KEY_VERIFY_MESSAGE_PARA_x is record
      cbSize : DWORD;
      dwMsgEncodingType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
   end record;
   subtype CRYPT_KEY_VERIFY_MESSAGE_PARA is CRYPT_KEY_VERIFY_MESSAGE_PARA_x; -- CXType_Elaborated
   type PCRYPT_KEY_VERIFY_MESSAGE_PARA is access CRYPT_KEY_VERIFY_MESSAGE_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CryptSignMessage(
      pSignPara : PCRYPT_SIGN_MESSAGE_PARA;
      fDetachedSignature : BOOL;
      cToBeSigned : DWORD;
      rgpbToBeSigned : Void;
      rgcbToBeSigned : Void;
      pbSignedBlob : access BYTE;
      pcbSignedBlob : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignMessage,"CryptSignMessage");
   function CryptVerifyMessageSignature(
      pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA;
      dwSignerIndex : DWORD;
      pbSignedBlob : access constant BYTE;
      cbSignedBlob : DWORD;
      pbDecoded : access BYTE;
      pcbDecoded : access DWORD;
      ppSignerCert : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CryptVerifyMessageSignature,"CryptVerifyMessageSignature");
   function CryptGetMessageSignerCount(
      dwMsgEncodingType : DWORD;
      pbSignedBlob : access constant BYTE;
      cbSignedBlob : DWORD
   ) return LONG;
   pragma import (C,CryptGetMessageSignerCount,"CryptGetMessageSignerCount");
   function CryptGetMessageCertificates(
      dwMsgAndCertEncodingType : DWORD;
      hCryptProv_x : HCRYPTPROV_LEGACY;
      dwFlags : DWORD;
      pbSignedBlob : access constant BYTE;
      cbSignedBlob : DWORD
   ) return HCERTSTORE;
   pragma import (C,CryptGetMessageCertificates,"CryptGetMessageCertificates");
   function CryptVerifyDetachedMessageSignature(
      pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA;
      dwSignerIndex : DWORD;
      pbDetachedSignBlob : access constant BYTE;
      cbDetachedSignBlob : DWORD;
      cToBeSigned : DWORD;
      rgpbToBeSigned : Void;
      rgcbToBeSigned : Void;
      ppSignerCert : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CryptVerifyDetachedMessageSignature,"CryptVerifyDetachedMessageSignature");
   function CryptEncryptMessage(
      pEncryptPara : PCRYPT_ENCRYPT_MESSAGE_PARA;
      cRecipientCert : DWORD;
      rgpRecipientCert : Void;
      pbToBeEncrypted : access constant BYTE;
      cbToBeEncrypted : DWORD;
      pbEncryptedBlob : access BYTE;
      pcbEncryptedBlob : access DWORD
   ) return BOOL;
   pragma import (C,CryptEncryptMessage,"CryptEncryptMessage");
   function CryptDecryptMessage(
      pDecryptPara : PCRYPT_DECRYPT_MESSAGE_PARA;
      pbEncryptedBlob : access constant BYTE;
      cbEncryptedBlob : DWORD;
      pbDecrypted : access BYTE;
      pcbDecrypted : access DWORD;
      ppXchgCert : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CryptDecryptMessage,"CryptDecryptMessage");
   function CryptSignAndEncryptMessage(
      pSignPara : PCRYPT_SIGN_MESSAGE_PARA;
      pEncryptPara : PCRYPT_ENCRYPT_MESSAGE_PARA;
      cRecipientCert : DWORD;
      rgpRecipientCert : Void;
      pbToBeSignedAndEncrypted : access constant BYTE;
      cbToBeSignedAndEncrypted : DWORD;
      pbSignedAndEncryptedBlob : access BYTE;
      pcbSignedAndEncryptedBlob : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignAndEncryptMessage,"CryptSignAndEncryptMessage");
   function CryptDecryptAndVerifyMessageSignature(
      pDecryptPara : PCRYPT_DECRYPT_MESSAGE_PARA;
      pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA;
      dwSignerIndex : DWORD;
      pbEncryptedBlob : access constant BYTE;
      cbEncryptedBlob : DWORD;
      pbDecrypted : access BYTE;
      pcbDecrypted : access DWORD;
      ppXchgCert : access PCCERT_CONTEXT;
      ppSignerCert : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CryptDecryptAndVerifyMessageSignature,"CryptDecryptAndVerifyMessageSignature");
   function CryptDecodeMessage(
      dwMsgTypeFlags : DWORD;
      pDecryptPara : PCRYPT_DECRYPT_MESSAGE_PARA;
      pVerifyPara : PCRYPT_VERIFY_MESSAGE_PARA;
      dwSignerIndex : DWORD;
      pbEncodedBlob : access constant BYTE;
      cbEncodedBlob : DWORD;
      dwPrevInnerContentType : DWORD;
      pdwMsgType : access DWORD;
      pdwInnerContentType : access DWORD;
      pbDecoded : access BYTE;
      pcbDecoded : access DWORD;
      ppXchgCert : access PCCERT_CONTEXT;
      ppSignerCert : access PCCERT_CONTEXT
   ) return BOOL;
   pragma import (C,CryptDecodeMessage,"CryptDecodeMessage");
   function CryptHashMessage(
      pHashPara : PCRYPT_HASH_MESSAGE_PARA;
      fDetachedHash : BOOL;
      cToBeHashed : DWORD;
      rgpbToBeHashed : Void;
      rgcbToBeHashed : Void;
      pbHashedBlob : access BYTE;
      pcbHashedBlob : access DWORD;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptHashMessage,"CryptHashMessage");
   function CryptVerifyMessageHash(
      pHashPara : PCRYPT_HASH_MESSAGE_PARA;
      pbHashedBlob : access BYTE;
      cbHashedBlob : DWORD;
      pbToBeHashed : access BYTE;
      pcbToBeHashed : access DWORD;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptVerifyMessageHash,"CryptVerifyMessageHash");
   function CryptVerifyDetachedMessageHash(
      pHashPara : PCRYPT_HASH_MESSAGE_PARA;
      pbDetachedHashBlob : access BYTE;
      cbDetachedHashBlob : DWORD;
      cToBeHashed : DWORD;
      rgpbToBeHashed : Void;
      rgcbToBeHashed : Void;
      pbComputedHash : access BYTE;
      pcbComputedHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptVerifyDetachedMessageHash,"CryptVerifyDetachedMessageHash");
   function CryptSignMessageWithKey(
      pSignPara : PCRYPT_KEY_SIGN_MESSAGE_PARA;
      pbToBeSigned : access constant BYTE;
      cbToBeSigned : DWORD;
      pbSignedBlob : access BYTE;
      pcbSignedBlob : access DWORD
   ) return BOOL;
   pragma import (C,CryptSignMessageWithKey,"CryptSignMessageWithKey");
   function CryptVerifyMessageSignatureWithKey(
      pVerifyPara : PCRYPT_KEY_VERIFY_MESSAGE_PARA;
      pPublicKeyInfo : PCERT_PUBLIC_KEY_INFO;
      pbSignedBlob : access constant BYTE;
      cbSignedBlob : DWORD;
      pbDecoded : access BYTE;
      pcbDecoded : access DWORD
   ) return BOOL;
   pragma import (C,CryptVerifyMessageSignatureWithKey,"CryptVerifyMessageSignatureWithKey");
   function CertOpenSystemStoreA(
      hProv : HCRYPTPROV_LEGACY;
      szSubsystemProtocol : LPCSTR
   ) return HCERTSTORE;
   pragma import (C,CertOpenSystemStoreA,"CertOpenSystemStoreA");
   function CertOpenSystemStoreW(
      hProv : HCRYPTPROV_LEGACY;
      szSubsystemProtocol : LPCWSTR
   ) return HCERTSTORE;
   pragma import (C,CertOpenSystemStoreW,"CertOpenSystemStoreW");
   function CertAddEncodedCertificateToSystemStoreA(
      szCertStoreName : LPCSTR;
      pbCertEncoded : access constant BYTE;
      cbCertEncoded : DWORD
   ) return BOOL;
   pragma import (C,CertAddEncodedCertificateToSystemStoreA,"CertAddEncodedCertificateToSystemStoreA");
   function CertAddEncodedCertificateToSystemStoreW(
      szCertStoreName : LPCWSTR;
      pbCertEncoded : access constant BYTE;
      cbCertEncoded : DWORD
   ) return BOOL;
   pragma import (C,CertAddEncodedCertificateToSystemStoreW,"CertAddEncodedCertificateToSystemStoreW");
   type CERT_CHAIN_x is record
      cCerts : DWORD;
      certs : PCERT_BLOB;
      keyLocatorInfo : CRYPT_KEY_PROV_INFO;
   end record;
   subtype CERT_CHAIN is CERT_CHAIN_x; -- CXType_Elaborated
   type PCERT_CHAIN is access CERT_CHAIN_x; -- CXType_Pointer - CXType_Elaborated
   function FindCertsByIssuer(
      pCertChains : PCERT_CHAIN;
      pcbCertChains : access DWORD;
      pcCertChains : access DWORD;
      pbEncodedIssuerName : access BYTE;
      cbEncodedIssuerName : DWORD;
      pwszPurpose : LPCWSTR;
      dwKeySpec : DWORD
   ) return HRESULT;
   pragma import (C,FindCertsByIssuer,"FindCertsByIssuer");
   function CryptQueryObject(
      dwObjectType : DWORD;
      pvObject : access Void;
      dwExpectedContentTypeFlags : DWORD;
      dwExpectedFormatTypeFlags : DWORD;
      dwFlags : DWORD;
      pdwMsgAndCertEncodingType : access DWORD;
      pdwContentType : access DWORD;
      pdwFormatType : access DWORD;
      phCertStore : access HCERTSTORE;
      phMsg : access HCRYPTMSG;
      ppvContext : access LPVOID
   ) return BOOL;
   pragma import (C,CryptQueryObject,"CryptQueryObject");
   procedure CryptMemAlloc(
      cbSize : ULONG
   );
   pragma import (C,CryptMemAlloc,"CryptMemAlloc");
   procedure CryptMemRealloc(
      pv : LPVOID;
      cbSize : ULONG
   );
   pragma import (C,CryptMemRealloc,"CryptMemRealloc");
   procedure CryptMemFree(
      pv : LPVOID
   );
   pragma import (C,CryptMemFree,"CryptMemFree");
   subtype HCRYPTASYNC is HANDLE; -- CXType_Typedef
   type PHCRYPTASYNC is access HANDLE; -- CXType_Pointer - CXType_Typedef
   subtype PFN_CRYPT_ASYNC_PARAM_FREE_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPSTR, LPVOID)
   function CryptCreateAsyncHandle(
      dwFlags : DWORD;
      phAsync : PHCRYPTASYNC
   ) return BOOL;
   pragma import (C,CryptCreateAsyncHandle,"CryptCreateAsyncHandle");
   function CryptSetAsyncParam(
      hAsync : HCRYPTASYNC;
      pszParamOid : LPSTR;
      pvParam : LPVOID;
      pfnFree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC
   ) return BOOL;
   pragma import (C,CryptSetAsyncParam,"CryptSetAsyncParam");
   function CryptGetAsyncParam(
      hAsync : HCRYPTASYNC;
      pszParamOid : LPSTR;
      ppvParam : access LPVOID;
      ppfnFree : access PFN_CRYPT_ASYNC_PARAM_FREE_FUNC
   ) return BOOL;
   pragma import (C,CryptGetAsyncParam,"CryptGetAsyncParam");
   function CryptCloseAsyncHandle(
      hAsync : HCRYPTASYNC
   ) return BOOL;
   pragma import (C,CryptCloseAsyncHandle,"CryptCloseAsyncHandle");
   type CRYPT_BLOB_ARRAY_x is record
      cBlob : DWORD;
      rgBlob : PCRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_BLOB_ARRAY is CRYPT_BLOB_ARRAY_x; -- CXType_Elaborated
   type PCRYPT_BLOB_ARRAY is access CRYPT_BLOB_ARRAY_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_CREDENTIALS_x is record
      cbSize : DWORD;
      pszCredentialsOid : LPCSTR;
      pvCredentials : LPVOID;
   end record;
   subtype CRYPT_CREDENTIALS is CRYPT_CREDENTIALS_x; -- CXType_Elaborated
   type PCRYPT_CREDENTIALS is access CRYPT_CREDENTIALS_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PASSWORD_CREDENTIALSA_x is record
      cbSize : DWORD;
      pszUsername : LPSTR;
      pszPassword : LPSTR;
   end record;
   subtype CRYPT_PASSWORD_CREDENTIALSA is CRYPT_PASSWORD_CREDENTIALSA_x; -- CXType_Elaborated
   type PCRYPT_PASSWORD_CREDENTIALSA is access CRYPT_PASSWORD_CREDENTIALSA_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_PASSWORD_CREDENTIALSW_x is record
      cbSize : DWORD;
      pszUsername : LPWSTR;
      pszPassword : LPWSTR;
   end record;
   subtype CRYPT_PASSWORD_CREDENTIALSW is CRYPT_PASSWORD_CREDENTIALSW_x; -- CXType_Elaborated
   type PCRYPT_PASSWORD_CREDENTIALSW is access CRYPT_PASSWORD_CREDENTIALSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype CRYPT_PASSWORD_CREDENTIALS is CRYPT_PASSWORD_CREDENTIALSA; -- CXType_Typedef
   subtype PCRYPT_PASSWORD_CREDENTIALS is PCRYPT_PASSWORD_CREDENTIALSA; -- CXType_Typedef
   subtype PFN_FREE_ENCODED_OBJECT_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPCSTR, PCRYPT_BLOB_ARRAY, LPVOID)
   type CRYPTNET_URL_CACHE_PRE_FETCH_INFO_x is record
      cbSize : DWORD;
      dwObjectType : DWORD;
      dwError : DWORD;
      dwReserved : DWORD;
      ThisUpdateTime : FILETIME;
      NextUpdateTime : FILETIME;
      PublishTime : FILETIME;
   end record;
   subtype CRYPTNET_URL_CACHE_PRE_FETCH_INFO is CRYPTNET_URL_CACHE_PRE_FETCH_INFO_x; -- CXType_Elaborated
   type PCRYPTNET_URL_CACHE_PRE_FETCH_INFO is access CRYPTNET_URL_CACHE_PRE_FETCH_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPTNET_URL_CACHE_FLUSH_INFO_x is record
      cbSize : DWORD;
      dwExemptSeconds : DWORD;
      ExpireTime : FILETIME;
   end record;
   subtype CRYPTNET_URL_CACHE_FLUSH_INFO is CRYPTNET_URL_CACHE_FLUSH_INFO_x; -- CXType_Elaborated
   type PCRYPTNET_URL_CACHE_FLUSH_INFO is access CRYPTNET_URL_CACHE_FLUSH_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPTNET_URL_CACHE_RESPONSE_INFO_x is record
      cbSize : DWORD;
      wResponseType : WORD;
      wResponseFlags : WORD;
      LastModifiedTime : FILETIME;
      dwMaxAge : DWORD;
      pwszETag : LPCWSTR;
      dwProxyId : DWORD;
   end record;
   subtype CRYPTNET_URL_CACHE_RESPONSE_INFO is CRYPTNET_URL_CACHE_RESPONSE_INFO_x; -- CXType_Elaborated
   type PCRYPTNET_URL_CACHE_RESPONSE_INFO is access CRYPTNET_URL_CACHE_RESPONSE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_RETRIEVE_AUX_INFO_x is record
      cbSize : DWORD;
      pLastSyncTime : access FILETIME;
      dwMaxUrlRetrievalByteCount : DWORD;
      pPreFetchInfo : PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
      pFlushInfo : PCRYPTNET_URL_CACHE_FLUSH_INFO;
      ppResponseInfo : access PCRYPTNET_URL_CACHE_RESPONSE_INFO;
      pwszCacheFileNamePrefix : LPWSTR;
      pftCacheResync : LPFILETIME;
      fProxyCacheRetrieval : BOOL;
      dwHttpStatusCode : DWORD;
      ppwszErrorResponseHeaders : access LPWSTR;
      ppErrorContentBlob : access PCRYPT_DATA_BLOB;
   end record;
   subtype CRYPT_RETRIEVE_AUX_INFO is CRYPT_RETRIEVE_AUX_INFO_x; -- CXType_Elaborated
   type PCRYPT_RETRIEVE_AUX_INFO is access CRYPT_RETRIEVE_AUX_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CryptRetrieveObjectByUrlA(
      pszUrl : LPCSTR;
      pszObjectOid : LPCSTR;
      dwRetrievalFlags : DWORD;
      dwTimeout : DWORD;
      ppvObject : access LPVOID;
      hAsyncRetrieve : HCRYPTASYNC;
      pCredentials : PCRYPT_CREDENTIALS;
      pvVerify : LPVOID;
      pAuxInfo : PCRYPT_RETRIEVE_AUX_INFO
   ) return BOOL;
   pragma import (C,CryptRetrieveObjectByUrlA,"CryptRetrieveObjectByUrlA");
   function CryptRetrieveObjectByUrlW(
      pszUrl : LPCWSTR;
      pszObjectOid : LPCSTR;
      dwRetrievalFlags : DWORD;
      dwTimeout : DWORD;
      ppvObject : access LPVOID;
      hAsyncRetrieve : HCRYPTASYNC;
      pCredentials : PCRYPT_CREDENTIALS;
      pvVerify : LPVOID;
      pAuxInfo : PCRYPT_RETRIEVE_AUX_INFO
   ) return BOOL;
   pragma import (C,CryptRetrieveObjectByUrlW,"CryptRetrieveObjectByUrlW");
   subtype PFN_CRYPT_CANCEL_RETRIEVAL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, void *)
   function CryptInstallCancelRetrieval(
      pfnCancel : PFN_CRYPT_CANCEL_RETRIEVAL;
      pvArg : access Void;
      dwFlags : DWORD;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CryptInstallCancelRetrieval,"CryptInstallCancelRetrieval");
   function CryptUninstallCancelRetrieval(
      dwFlags : DWORD;
      pvReserved : access Void
   ) return BOOL;
   pragma import (C,CryptUninstallCancelRetrieval,"CryptUninstallCancelRetrieval");
   function CryptCancelAsyncRetrieval(
      hAsyncRetrieval : HCRYPTASYNC
   ) return BOOL;
   pragma import (C,CryptCancelAsyncRetrieval,"CryptCancelAsyncRetrieval");
   subtype PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID, DWORD, LPCSTR, LPSTR, LPVOID)
   type CRYPT_ASYNC_RETRIEVAL_COMPLETION_x is record
      pfnCompletion : PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC;
      pvCompletion : LPVOID;
   end record;
   subtype CRYPT_ASYNC_RETRIEVAL_COMPLETION is CRYPT_ASYNC_RETRIEVAL_COMPLETION_x; -- CXType_Elaborated
   type PCRYPT_ASYNC_RETRIEVAL_COMPLETION is access CRYPT_ASYNC_RETRIEVAL_COMPLETION_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CANCEL_ASYNC_RETRIEVAL_FUNC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HCRYPTASYNC)
   type CRYPT_URL_ARRAY_x is record
      cUrl : DWORD;
      rgwszUrl : access LPWSTR;
   end record;
   subtype CRYPT_URL_ARRAY is CRYPT_URL_ARRAY_x; -- CXType_Elaborated
   type PCRYPT_URL_ARRAY is access CRYPT_URL_ARRAY_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_URL_INFO_x is record
      cbSize : DWORD;
      dwSyncDeltaTime : DWORD;
      cGroup : DWORD;
      rgcGroupEntry : access DWORD;
   end record;
   subtype CRYPT_URL_INFO is CRYPT_URL_INFO_x; -- CXType_Elaborated
   type PCRYPT_URL_INFO is access CRYPT_URL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CryptGetObjectUrl(
      pszUrlOid : LPCSTR;
      pvPara : LPVOID;
      dwFlags : DWORD;
      pUrlArray : PCRYPT_URL_ARRAY;
      pcbUrlArray : access DWORD;
      pUrlInfo : PCRYPT_URL_INFO;
      pcbUrlInfo : access DWORD;
      pvReserved : LPVOID
   ) return BOOL;
   pragma import (C,CryptGetObjectUrl,"CryptGetObjectUrl");
   type CERT_CRL_CONTEXT_PAIR_x is record
      pCertContext : PCCERT_CONTEXT;
      pCrlContext : PCCRL_CONTEXT;
   end record;
   subtype CERT_CRL_CONTEXT_PAIR is CERT_CRL_CONTEXT_PAIR_x; -- CXType_Elaborated
   type PCERT_CRL_CONTEXT_PAIR is access CERT_CRL_CONTEXT_PAIR_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_CRL_CONTEXT_PAIR is access constant CERT_CRL_CONTEXT_PAIR; -- CXType_Pointer - CXType_Typedef
   type CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO_x is record
      cbSize : DWORD;
      iDeltaCrlIndicator : Interfaces.C.Int;
      pftCacheResync : LPFILETIME;
      pLastSyncTime : LPFILETIME;
      pMaxAgeTime : LPFILETIME;
      pChainPara : PCERT_REVOCATION_CHAIN_PARA;
      pDeltaCrlIndicator : PCRYPT_INTEGER_BLOB;
   end record;
   subtype CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO is CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO_x; -- CXType_Elaborated
   type PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO is access CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CryptGetTimeValidObject(
      pszTimeValidOid : LPCSTR;
      pvPara : LPVOID;
      pIssuer : PCCERT_CONTEXT;
      pftValidFor : LPFILETIME;
      dwFlags : DWORD;
      dwTimeout : DWORD;
      ppvObject : access LPVOID;
      pCredentials : PCRYPT_CREDENTIALS;
      pExtraInfo : PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
   ) return BOOL;
   pragma import (C,CryptGetTimeValidObject,"CryptGetTimeValidObject");
   function CryptFlushTimeValidObject(
      pszFlushTimeValidOid : LPCSTR;
      pvPara : LPVOID;
      pIssuer : PCCERT_CONTEXT;
      dwFlags : DWORD;
      pvReserved : LPVOID
   ) return BOOL;
   pragma import (C,CryptFlushTimeValidObject,"CryptFlushTimeValidObject");
   function CertCreateSelfSignCertificate(
      hCryptProvOrNCryptKey : HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
      pSubjectIssuerBlob : PCERT_NAME_BLOB;
      dwFlags : DWORD;
      pKeyProvInfo : PCRYPT_KEY_PROV_INFO;
      pSignatureAlgorithm : PCRYPT_ALGORITHM_IDENTIFIER;
      pStartTime : PSYSTEMTIME;
      pEndTime : PSYSTEMTIME;
      pExtensions : PCERT_EXTENSIONS
   ) return PCCERT_CONTEXT;
   pragma import (C,CertCreateSelfSignCertificate,"CertCreateSelfSignCertificate");
   function CryptGetKeyIdentifierProperty(
      pKeyIdentifier : access constant CRYPT_HASH_BLOB;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pwszComputerName : LPCWSTR;
      pvReserved : access Void;
      pvData : access Void;
      pcbData : access DWORD
   ) return BOOL;
   pragma import (C,CryptGetKeyIdentifierProperty,"CryptGetKeyIdentifierProperty");
   function CryptSetKeyIdentifierProperty(
      pKeyIdentifier : access constant CRYPT_HASH_BLOB;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pwszComputerName : LPCWSTR;
      pvReserved : access Void;
      pvData : access Void
   ) return BOOL;
   pragma import (C,CryptSetKeyIdentifierProperty,"CryptSetKeyIdentifierProperty");
   subtype PFN_CRYPT_ENUM_KEYID_PROP is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (const CRYPT_HASH_BLOB *, DWORD, void *, void *, DWORD, DWORD *, void **, DWORD *)
   function CryptEnumKeyIdentifierProperties(
      pKeyIdentifier : access constant CRYPT_HASH_BLOB;
      dwPropId : DWORD;
      dwFlags : DWORD;
      pwszComputerName : LPCWSTR;
      pvReserved : access Void;
      pvArg : access Void;
      pfnEnum : PFN_CRYPT_ENUM_KEYID_PROP
   ) return BOOL;
   pragma import (C,CryptEnumKeyIdentifierProperties,"CryptEnumKeyIdentifierProperties");
   function CryptCreateKeyIdentifierFromCSP(
      dwCertEncodingType : DWORD;
      pszPubKeyOID : LPCSTR;
      pPubKeyStruc : access constant PUBLICKEYSTRUC;
      cbPubKeyStruc : DWORD;
      dwFlags : DWORD;
      pvReserved : access Void;
      pbHash : access BYTE;
      pcbHash : access DWORD
   ) return BOOL;
   pragma import (C,CryptCreateKeyIdentifierFromCSP,"CryptCreateKeyIdentifierFromCSP");
   subtype HCERTCHAINENGINE is HANDLE; -- CXType_Typedef
   type CERT_CHAIN_ENGINE_CONFIG_x is record
      cbSize : DWORD;
      hRestrictedRoot : HCERTSTORE;
      hRestrictedTrust : HCERTSTORE;
      hRestrictedOther : HCERTSTORE;
      cAdditionalStore : DWORD;
      rghAdditionalStore : access HCERTSTORE;
      dwFlags : DWORD;
      dwUrlRetrievalTimeout : DWORD;
      MaximumCachedCertificates : DWORD;
      CycleDetectionModulus : DWORD;
      hExclusiveRoot : HCERTSTORE;
      hExclusiveTrustedPeople : HCERTSTORE;
      dwExclusiveFlags : DWORD;
   end record;
   subtype CERT_CHAIN_ENGINE_CONFIG is CERT_CHAIN_ENGINE_CONFIG_x; -- CXType_Elaborated
   type PCERT_CHAIN_ENGINE_CONFIG is access CERT_CHAIN_ENGINE_CONFIG_x; -- CXType_Pointer - CXType_Elaborated
   function CertCreateCertificateChainEngine(
      pConfig : PCERT_CHAIN_ENGINE_CONFIG;
      phChainEngine : access HCERTCHAINENGINE
   ) return BOOL;
   pragma import (C,CertCreateCertificateChainEngine,"CertCreateCertificateChainEngine");
   procedure CertFreeCertificateChainEngine(
      hChainEngine : HCERTCHAINENGINE
   );
   pragma import (C,CertFreeCertificateChainEngine,"CertFreeCertificateChainEngine");
   function CertResyncCertificateChainEngine(
      hChainEngine : HCERTCHAINENGINE
   ) return BOOL;
   pragma import (C,CertResyncCertificateChainEngine,"CertResyncCertificateChainEngine");
   type CERT_TRUST_STATUS_x is record
      dwErrorStatus : DWORD;
      dwInfoStatus : DWORD;
   end record;
   subtype CERT_TRUST_STATUS is CERT_TRUST_STATUS_x; -- CXType_Elaborated
   type PCERT_TRUST_STATUS is access CERT_TRUST_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_REVOCATION_INFO_x is record
      cbSize : DWORD;
      dwRevocationResult : DWORD;
      pszRevocationOid : LPCSTR;
      pvOidSpecificInfo : LPVOID;
      fHasFreshnessTime : BOOL;
      dwFreshnessTime : DWORD;
      pCrlInfo : PCERT_REVOCATION_CRL_INFO;
   end record;
   subtype CERT_REVOCATION_INFO is CERT_REVOCATION_INFO_x; -- CXType_Elaborated
   type PCERT_REVOCATION_INFO is access CERT_REVOCATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_TRUST_LIST_INFO_x is record
      cbSize : DWORD;
      pCtlEntry : PCTL_ENTRY;
      pCtlContext : PCCTL_CONTEXT;
   end record;
   subtype CERT_TRUST_LIST_INFO is CERT_TRUST_LIST_INFO_x; -- CXType_Elaborated
   type PCERT_TRUST_LIST_INFO is access CERT_TRUST_LIST_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_CHAIN_ELEMENT_x is record
      cbSize : DWORD;
      pCertContext : PCCERT_CONTEXT;
      TrustStatus : CERT_TRUST_STATUS;
      pRevocationInfo : PCERT_REVOCATION_INFO;
      pIssuanceUsage : PCERT_ENHKEY_USAGE;
      pApplicationUsage : PCERT_ENHKEY_USAGE;
      pwszExtendedErrorInfo : LPCWSTR;
   end record;
   subtype CERT_CHAIN_ELEMENT is CERT_CHAIN_ELEMENT_x; -- CXType_Elaborated
   type PCERT_CHAIN_ELEMENT is access CERT_CHAIN_ELEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_CHAIN_ELEMENT is access constant CERT_CHAIN_ELEMENT; -- CXType_Pointer - CXType_Typedef
   type CERT_SIMPLE_CHAIN_x is record
      cbSize : DWORD;
      TrustStatus : CERT_TRUST_STATUS;
      cElement : DWORD;
      rgpElement : access PCERT_CHAIN_ELEMENT;
      pTrustListInfo : PCERT_TRUST_LIST_INFO;
      fHasRevocationFreshnessTime : BOOL;
      dwRevocationFreshnessTime : DWORD;
   end record;
   subtype CERT_SIMPLE_CHAIN is CERT_SIMPLE_CHAIN_x; -- CXType_Elaborated
   type PCERT_SIMPLE_CHAIN is access CERT_SIMPLE_CHAIN_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_SIMPLE_CHAIN is access constant CERT_SIMPLE_CHAIN; -- CXType_Pointer - CXType_Typedef
   type CERT_CHAIN_CONTEXT_x; -- Forward Declaration
   subtype CERT_CHAIN_CONTEXT is CERT_CHAIN_CONTEXT_x; -- CXType_Elaborated
   type PCERT_CHAIN_CONTEXT is access CERT_CHAIN_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_CHAIN_CONTEXT is access constant CERT_CHAIN_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type CERT_CHAIN_CONTEXT_x is record
      cbSize : DWORD;
      TrustStatus : CERT_TRUST_STATUS;
      cChain : DWORD;
      rgpChain : access PCERT_SIMPLE_CHAIN;
      cLowerQualityChainContext : DWORD;
      rgpLowerQualityChainContext : access PCCERT_CHAIN_CONTEXT;
      fHasRevocationFreshnessTime : BOOL;
      dwRevocationFreshnessTime : DWORD;
      dwCreateFlags : DWORD;
      ChainId : GUID;
   end record;
   type CERT_USAGE_MATCH_x is record
      dwType : DWORD;
      Usage : CERT_ENHKEY_USAGE;
   end record;
   subtype CERT_USAGE_MATCH is CERT_USAGE_MATCH_x; -- CXType_Elaborated
   type PCERT_USAGE_MATCH is access CERT_USAGE_MATCH_x; -- CXType_Pointer - CXType_Elaborated
   type CTL_USAGE_MATCH_x is record
      dwType : DWORD;
      Usage : CTL_USAGE;
   end record;
   subtype CTL_USAGE_MATCH is CTL_USAGE_MATCH_x; -- CXType_Elaborated
   type PCTL_USAGE_MATCH is access CTL_USAGE_MATCH_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_CHAIN_PARA_x is record
      cbSize : DWORD;
      RequestedUsage : CERT_USAGE_MATCH;
   end record;
   subtype CERT_CHAIN_PARA is CERT_CHAIN_PARA_x; -- CXType_Elaborated
   type PCERT_CHAIN_PARA is access CERT_CHAIN_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CertGetCertificateChain(
      hChainEngine : HCERTCHAINENGINE;
      pCertContext : PCCERT_CONTEXT;
      pTime : LPFILETIME;
      hAdditionalStore : HCERTSTORE;
      pChainPara : PCERT_CHAIN_PARA;
      dwFlags : DWORD;
      pvReserved : LPVOID;
      ppChainContext : access PCCERT_CHAIN_CONTEXT
   ) return BOOL;
   pragma import (C,CertGetCertificateChain,"CertGetCertificateChain");
   procedure CertFreeCertificateChain(
      pChainContext : PCCERT_CHAIN_CONTEXT
   );
   pragma import (C,CertFreeCertificateChain,"CertFreeCertificateChain");
   function CertDuplicateCertificateChain(
      pChainContext : PCCERT_CHAIN_CONTEXT
   ) return PCCERT_CHAIN_CONTEXT;
   pragma import (C,CertDuplicateCertificateChain,"CertDuplicateCertificateChain");
   type CERT_REVOCATION_CHAIN_PARA_x is record
      cbSize : DWORD;
      hChainEngine : HCERTCHAINENGINE;
      hAdditionalStore : HCERTSTORE;
      dwChainFlags : DWORD;
      dwUrlRetrievalTimeout : DWORD;
      pftCurrentTime : LPFILETIME;
      pftCacheResync : LPFILETIME;
      cbMaxUrlRetrievalByteCount : DWORD;
   end record;
   type CRL_REVOCATION_INFO_x is record
      pCrlEntry : PCRL_ENTRY;
      pCrlContext : PCCRL_CONTEXT;
      pCrlIssuerChain : PCCERT_CHAIN_CONTEXT;
   end record;
   subtype CRL_REVOCATION_INFO is CRL_REVOCATION_INFO_x; -- CXType_Elaborated
   type PCRL_REVOCATION_INFO is access CRL_REVOCATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function CertFindChainInStore(
      hCertStore_x : HCERTSTORE;
      dwCertEncodingType : DWORD;
      dwFindFlags : DWORD;
      dwFindType : DWORD;
      pvFindPara : access Void;
      pPrevChainContext : PCCERT_CHAIN_CONTEXT
   ) return PCCERT_CHAIN_CONTEXT;
   pragma import (C,CertFindChainInStore,"CertFindChainInStore");
   subtype PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PCCERT_CONTEXT, void *)
   type CERT_CHAIN_FIND_BY_ISSUER_PARA_x is record
      cbSize : DWORD;
      pszUsageIdentifier : LPCSTR;
      dwKeySpec : DWORD;
      dwAcquirePrivateKeyFlags : DWORD;
      cIssuer : DWORD;
      rgIssuer : access CERT_NAME_BLOB;
      pfnFindCallback : PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK;
      pvFindArg : access Void;
   end record;
   subtype CERT_CHAIN_FIND_ISSUER_PARA is CERT_CHAIN_FIND_BY_ISSUER_PARA_x; -- CXType_Elaborated
   type PCERT_CHAIN_FIND_ISSUER_PARA is access CERT_CHAIN_FIND_BY_ISSUER_PARA_x; -- CXType_Pointer - CXType_Elaborated
   subtype CERT_CHAIN_FIND_BY_ISSUER_PARA is CERT_CHAIN_FIND_BY_ISSUER_PARA_x; -- CXType_Elaborated
   type PCERT_CHAIN_FIND_BY_ISSUER_PARA is access CERT_CHAIN_FIND_BY_ISSUER_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_CHAIN_POLICY_PARA_x is record
      cbSize : DWORD;
      dwFlags : DWORD;
      pvExtraPolicyPara : access Void;
   end record;
   subtype CERT_CHAIN_POLICY_PARA is CERT_CHAIN_POLICY_PARA_x; -- CXType_Elaborated
   type PCERT_CHAIN_POLICY_PARA is access CERT_CHAIN_POLICY_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type CERT_CHAIN_POLICY_STATUS_x is record
      cbSize : DWORD;
      dwError : DWORD;
      lChainIndex : LONG;
      lElementIndex : LONG;
      pvExtraPolicyStatus : access Void;
   end record;
   subtype CERT_CHAIN_POLICY_STATUS is CERT_CHAIN_POLICY_STATUS_x; -- CXType_Elaborated
   type PCERT_CHAIN_POLICY_STATUS is access CERT_CHAIN_POLICY_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   function CertVerifyCertificateChainPolicy(
      pszPolicyOID : LPCSTR;
      pChainContext : PCCERT_CHAIN_CONTEXT;
      pPolicyPara : PCERT_CHAIN_POLICY_PARA;
      pPolicyStatus : PCERT_CHAIN_POLICY_STATUS
   ) return BOOL;
   pragma import (C,CertVerifyCertificateChainPolicy,"CertVerifyCertificateChainPolicy");
   type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA_x is record
      cbSize : DWORD;
      dwRegPolicySettings : DWORD;
      pSignerInfo : PCMSG_SIGNER_INFO;
   end record;
   subtype AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA is AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Elaborated
   type PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA is access AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS_x is record
      cbSize : DWORD;
      fCommercial : BOOL;
   end record;
   subtype AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS is AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Elaborated
   type PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS is access AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA_x is record
      cbSize : DWORD;
      dwRegPolicySettings : DWORD;
      fCommercial : BOOL;
   end record;
   subtype AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA is AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Elaborated
   type PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA is access AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type HTTPSPolicyCallbackData_x is record
      dwAuthType : DWORD;
      fdwChecks : DWORD;
      pwszServerName : access WCHAR;
   end record;
   subtype HTTPSPolicyCallbackData is HTTPSPolicyCallbackData_x; -- CXType_Elaborated
   type PHTTPSPolicyCallbackData is access HTTPSPolicyCallbackData_x; -- CXType_Pointer - CXType_Elaborated
   subtype SSL_EXTRA_CERT_CHAIN_POLICY_PARA is HTTPSPolicyCallbackData_x; -- CXType_Elaborated
   type PSSL_EXTRA_CERT_CHAIN_POLICY_PARA is access HTTPSPolicyCallbackData_x; -- CXType_Pointer - CXType_Elaborated
   type EV_EXTRA_CERT_CHAIN_POLICY_PARA_x is record
      cbSize : DWORD;
      dwRootProgramQualifierFlags : DWORD;
   end record;
   subtype EV_EXTRA_CERT_CHAIN_POLICY_PARA is EV_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Elaborated
   type PEV_EXTRA_CERT_CHAIN_POLICY_PARA is access EV_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type EV_EXTRA_CERT_CHAIN_POLICY_STATUS_x is record
      cbSize : DWORD;
      dwQualifiers : DWORD;
      dwIssuanceUsageIndex : DWORD;
   end record;
   subtype EV_EXTRA_CERT_CHAIN_POLICY_STATUS is EV_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Elaborated
   type PEV_EXTRA_CERT_CHAIN_POLICY_STATUS is access EV_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS_x is record
      cbSize : DWORD;
      dwErrorLevel : DWORD;
      dwErrorCategory : DWORD;
      dwReserved : DWORD;
      wszErrorText : Void;
   end record;
   subtype SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS is SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Elaborated
   type PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS is access SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA_x is record
      cbSize : DWORD;
      dwReserved : DWORD;
      pwszServerName : LPWSTR;
      rgpszHpkpValue : Void;
   end record;
   subtype SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA is SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Elaborated
   type PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA is access SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA_x is record
      cbSize : DWORD;
      dwReserved : DWORD;
      pwszServerName : PCWSTR;
   end record;
   subtype SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA is SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Elaborated
   type PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA is access SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS_x is record
      cbSize : DWORD;
      lError : LONG;
      wszErrorText : Void;
   end record;
   subtype SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS is SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Elaborated
   type PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS is access SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   function CryptStringToBinaryA(
      pszString : LPCSTR;
      cchString : DWORD;
      dwFlags : DWORD;
      pbBinary : access BYTE;
      pcbBinary : access DWORD;
      pdwSkip : access DWORD;
      pdwFlags : access DWORD
   ) return BOOL;
   pragma import (C,CryptStringToBinaryA,"CryptStringToBinaryA");
   function CryptStringToBinaryW(
      pszString : LPCWSTR;
      cchString : DWORD;
      dwFlags : DWORD;
      pbBinary : access BYTE;
      pcbBinary : access DWORD;
      pdwSkip : access DWORD;
      pdwFlags : access DWORD
   ) return BOOL;
   pragma import (C,CryptStringToBinaryW,"CryptStringToBinaryW");
   function CryptBinaryToStringA(
      pbBinary : access constant BYTE;
      cbBinary : DWORD;
      dwFlags : DWORD;
      pszString : LPSTR;
      pcchString : access DWORD
   ) return BOOL;
   pragma import (C,CryptBinaryToStringA,"CryptBinaryToStringA");
   function CryptBinaryToStringW(
      pbBinary : access constant BYTE;
      cbBinary : DWORD;
      dwFlags : DWORD;
      pszString : LPWSTR;
      pcchString : access DWORD
   ) return BOOL;
   pragma import (C,CryptBinaryToStringW,"CryptBinaryToStringW");
   type CRYPT_PKCS12_PBE_PARAMS_x is record
      iIterations : Interfaces.C.Int;
      cbSalt : ULONG;
   end record;
   subtype CRYPT_PKCS12_PBE_PARAMS is CRYPT_PKCS12_PBE_PARAMS_x; -- CXType_Elaborated
   function PFXImportCertStore(
      pPFX : access CRYPT_DATA_BLOB;
      szPassword : LPCWSTR;
      dwFlags : DWORD
   ) return HCERTSTORE;
   pragma import (C,PFXImportCertStore,"PFXImportCertStore");
   function PFXIsPFXBlob(
      pPFX : access CRYPT_DATA_BLOB
   ) return BOOL;
   pragma import (C,PFXIsPFXBlob,"PFXIsPFXBlob");
   function PFXVerifyPassword(
      pPFX : access CRYPT_DATA_BLOB;
      szPassword : LPCWSTR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,PFXVerifyPassword,"PFXVerifyPassword");
   function PFXExportCertStoreEx(
      hStore : HCERTSTORE;
      pPFX : access CRYPT_DATA_BLOB;
      szPassword : LPCWSTR;
      pvPara : access Void;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,PFXExportCertStoreEx,"PFXExportCertStoreEx");
   type PKCS12_PBES2_EXPORT_PARAMS_x is record
      dwSize : DWORD;
      hNcryptDescriptor : PVOID;
      pwszPbes2Alg : LPWSTR;
   end record;
   subtype PKCS12_PBES2_EXPORT_PARAMS is PKCS12_PBES2_EXPORT_PARAMS_x; -- CXType_Elaborated
   type PPKCS12_PBES2_EXPORT_PARAMS is access PKCS12_PBES2_EXPORT_PARAMS_x; -- CXType_Pointer - CXType_Elaborated
   function PFXExportCertStore(
      hStore : HCERTSTORE;
      pPFX : access CRYPT_DATA_BLOB;
      szPassword : LPCWSTR;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,PFXExportCertStore,"PFXExportCertStore");
   type HCERT_SERVER_OCSP_RESPONSE is access Void; -- CXType_Pointer - CXType_Void
   type CERT_SERVER_OCSP_RESPONSE_CONTEXT_x; -- Forward Declaration
   subtype CERT_SERVER_OCSP_RESPONSE_CONTEXT is CERT_SERVER_OCSP_RESPONSE_CONTEXT_x; -- CXType_Elaborated
   type PCERT_SERVER_OCSP_RESPONSE_CONTEXT is access CERT_SERVER_OCSP_RESPONSE_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_SERVER_OCSP_RESPONSE_CONTEXT is access constant CERT_SERVER_OCSP_RESPONSE_CONTEXT; -- CXType_Pointer - CXType_Typedef
   type CERT_SERVER_OCSP_RESPONSE_CONTEXT_x is record
      cbSize : DWORD;
      pbEncodedOcspResponse : access BYTE;
      cbEncodedOcspResponse : DWORD;
   end record;
   subtype PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PCCERT_CHAIN_CONTEXT, PCCERT_SERVER_OCSP_RESPONSE_CONTEXT, PCCRL_CONTEXT, PCCRL_CONTEXT, PVOID, DWORD)
   type CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_x is record
      cbSize : DWORD;
      dwFlags : DWORD;
      pcbUsedSize : access DWORD;
      pwszOcspDirectory : PWSTR;
      pfnUpdateCallback : PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK;
      pvUpdateCallbackArg : PVOID;
   end record;
   subtype CERT_SERVER_OCSP_RESPONSE_OPEN_PARA is CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_x; -- CXType_Elaborated
   type PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA is access CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CertOpenServerOcspResponse(
      pChainContext : PCCERT_CHAIN_CONTEXT;
      dwFlags : DWORD;
      pOpenPara : PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA
   ) return HCERT_SERVER_OCSP_RESPONSE;
   pragma import (C,CertOpenServerOcspResponse,"CertOpenServerOcspResponse");
   procedure CertAddRefServerOcspResponse(
      hServerOcspResponse : HCERT_SERVER_OCSP_RESPONSE
   );
   pragma import (C,CertAddRefServerOcspResponse,"CertAddRefServerOcspResponse");
   procedure CertCloseServerOcspResponse(
      hServerOcspResponse : HCERT_SERVER_OCSP_RESPONSE;
      dwFlags : DWORD
   );
   pragma import (C,CertCloseServerOcspResponse,"CertCloseServerOcspResponse");
   function CertGetServerOcspResponseContext(
      hServerOcspResponse : HCERT_SERVER_OCSP_RESPONSE;
      dwFlags : DWORD;
      pvReserved : LPVOID
   ) return PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;
   pragma import (C,CertGetServerOcspResponseContext,"CertGetServerOcspResponseContext");
   procedure CertAddRefServerOcspResponseContext(
      pServerOcspResponseContext : PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
   );
   pragma import (C,CertAddRefServerOcspResponseContext,"CertAddRefServerOcspResponseContext");
   procedure CertFreeServerOcspResponseContext(
      pServerOcspResponseContext : PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
   );
   pragma import (C,CertFreeServerOcspResponseContext,"CertFreeServerOcspResponseContext");
   function CertRetrieveLogoOrBiometricInfo(
      pCertContext : PCCERT_CONTEXT;
      lpszLogoOrBiometricType : LPCSTR;
      dwRetrievalFlags : DWORD;
      dwTimeout : DWORD;
      dwFlags : DWORD;
      pvReserved : access Void;
      ppbData : access PBYTE;
      pcbData : access DWORD;
      ppwszMimeType : access LPWSTR
   ) return BOOL;
   pragma import (C,CertRetrieveLogoOrBiometricInfo,"CertRetrieveLogoOrBiometricInfo");
   type CERT_SELECT_CHAIN_PARA_x is record
      hChainEngine : HCERTCHAINENGINE;
      pTime : PFILETIME;
      hAdditionalStore : HCERTSTORE;
      pChainPara : PCERT_CHAIN_PARA;
      dwFlags : DWORD;
   end record;
   subtype CERT_SELECT_CHAIN_PARA is CERT_SELECT_CHAIN_PARA_x; -- CXType_Elaborated
   type PCERT_SELECT_CHAIN_PARA is access CERT_SELECT_CHAIN_PARA_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_SELECT_CHAIN_PARA is access constant CERT_SELECT_CHAIN_PARA; -- CXType_Pointer - CXType_Typedef
   type CERT_SELECT_CRITERIA_x is record
      dwType : DWORD;
      cPara : DWORD;
      ppPara : access LPVOID;
   end record;
   subtype CERT_SELECT_CRITERIA is CERT_SELECT_CRITERIA_x; -- CXType_Elaborated
   type PCERT_SELECT_CRITERIA is access CERT_SELECT_CRITERIA_x; -- CXType_Pointer - CXType_Elaborated
   type PCCERT_SELECT_CRITERIA is access constant CERT_SELECT_CRITERIA; -- CXType_Pointer - CXType_Typedef
   type PCCERT_CHAIN_CONTEXT_Ptr is access all PCCERT_CHAIN_CONTEXT; -- Auto Generated Dependancy
   function CertSelectCertificateChains(
      pSelectionContext : LPCGUID;
      dwFlags : DWORD;
      pChainParameters : PCCERT_SELECT_CHAIN_PARA;
      cCriteria : DWORD;
      rgpCriteria : PCCERT_SELECT_CRITERIA;
      hStore : HCERTSTORE;
      pcSelection : PDWORD;
      pprgpSelection : access PCCERT_CHAIN_CONTEXT_Ptr
   ) return BOOL;
   pragma import (C,CertSelectCertificateChains,"CertSelectCertificateChains");
   procedure CertFreeCertificateChainList(
      prgpSelection : access PCCERT_CHAIN_CONTEXT
   );
   pragma import (C,CertFreeCertificateChainList,"CertFreeCertificateChainList");
   type CRYPT_TIMESTAMP_REQUEST_x is record
      dwVersion : DWORD;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      HashedMessage : CRYPT_DER_BLOB;
      pszTSAPolicyId : LPSTR;
      Nonce : CRYPT_INTEGER_BLOB;
      fCertReq : BOOL;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CRYPT_TIMESTAMP_REQUEST is CRYPT_TIMESTAMP_REQUEST_x; -- CXType_Elaborated
   type PCRYPT_TIMESTAMP_REQUEST is access CRYPT_TIMESTAMP_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_TIMESTAMP_RESPONSE_x is record
      dwStatus : DWORD;
      cFreeText : DWORD;
      rgFreeText : access LPWSTR;
      FailureInfo : CRYPT_BIT_BLOB;
      ContentInfo : CRYPT_DER_BLOB;
   end record;
   subtype CRYPT_TIMESTAMP_RESPONSE is CRYPT_TIMESTAMP_RESPONSE_x; -- CXType_Elaborated
   type PCRYPT_TIMESTAMP_RESPONSE is access CRYPT_TIMESTAMP_RESPONSE_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_TIMESTAMP_ACCURACY_x is record
      dwSeconds : DWORD;
      dwMillis : DWORD;
      dwMicros : DWORD;
   end record;
   subtype CRYPT_TIMESTAMP_ACCURACY is CRYPT_TIMESTAMP_ACCURACY_x; -- CXType_Elaborated
   type PCRYPT_TIMESTAMP_ACCURACY is access CRYPT_TIMESTAMP_ACCURACY_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_TIMESTAMP_INFO_x is record
      dwVersion : DWORD;
      pszTSAPolicyId : LPSTR;
      HashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER;
      HashedMessage : CRYPT_DER_BLOB;
      SerialNumber : CRYPT_INTEGER_BLOB;
      ftTime : FILETIME;
      pvAccuracy : PCRYPT_TIMESTAMP_ACCURACY;
      fOrdering : BOOL;
      Nonce : CRYPT_DER_BLOB;
      Tsa : CRYPT_DER_BLOB;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CRYPT_TIMESTAMP_INFO is CRYPT_TIMESTAMP_INFO_x; -- CXType_Elaborated
   type PCRYPT_TIMESTAMP_INFO is access CRYPT_TIMESTAMP_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_TIMESTAMP_CONTEXT_x is record
      cbEncoded : DWORD;
      pbEncoded : access BYTE;
      pTimeStamp : PCRYPT_TIMESTAMP_INFO;
   end record;
   subtype CRYPT_TIMESTAMP_CONTEXT is CRYPT_TIMESTAMP_CONTEXT_x; -- CXType_Elaborated
   type PCRYPT_TIMESTAMP_CONTEXT is access CRYPT_TIMESTAMP_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type CRYPT_TIMESTAMP_PARA_x is record
      pszTSAPolicyId : LPCSTR;
      fRequestCerts : BOOL;
      Nonce : CRYPT_INTEGER_BLOB;
      cExtension : DWORD;
      rgExtension : PCERT_EXTENSION;
   end record;
   subtype CRYPT_TIMESTAMP_PARA is CRYPT_TIMESTAMP_PARA_x; -- CXType_Elaborated
   type PCRYPT_TIMESTAMP_PARA is access CRYPT_TIMESTAMP_PARA_x; -- CXType_Pointer - CXType_Elaborated
   function CryptRetrieveTimeStamp(
      wszUrl : LPCWSTR;
      dwRetrievalFlags : DWORD;
      dwTimeout : DWORD;
      pszHashId : LPCSTR;
      pPara : access constant CRYPT_TIMESTAMP_PARA;
      pbData : access constant BYTE;
      cbData : DWORD;
      ppTsContext : access PCRYPT_TIMESTAMP_CONTEXT;
      ppTsSigner : access PCCERT_CONTEXT;
      phStore : access HCERTSTORE
   ) return BOOL;
   pragma import (C,CryptRetrieveTimeStamp,"CryptRetrieveTimeStamp");
   function CryptVerifyTimeStampSignature(
      pbTSContentInfo : access constant BYTE;
      cbTSContentInfo : DWORD;
      pbData : access constant BYTE;
      cbData : DWORD;
      hAdditionalStore : HCERTSTORE;
      ppTsContext : access PCRYPT_TIMESTAMP_CONTEXT;
      ppTsSigner : access PCCERT_CONTEXT;
      phStore : access HCERTSTORE
   ) return BOOL;
   pragma import (C,CryptVerifyTimeStampSignature,"CryptVerifyTimeStampSignature");
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPVOID, PCERT_NAME_BLOB *, DWORD)
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPVOID, PCRYPT_DATA_BLOB, DWORD, PCERT_NAME_BLOB, PBYTE *, DWORD *, PCWSTR *, PCRYPT_DATA_BLOB *)
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (DWORD, LPVOID)
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID, PCWSTR)
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID, PBYTE)
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (LPVOID, PCRYPT_DATA_BLOB)
   type CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE_x is record
      cbSize : DWORD;
      pfnGet : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET;
      pfnRelease : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE;
      pfnFreePassword : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD;
      pfnFree : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE;
      pfnFreeIdentifier : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER;
   end record;
   subtype CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE is CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE_x; -- CXType_Elaborated
   type PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE is access CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE_x; -- CXType_Pointer - CXType_Elaborated
   subtype PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH, LPVOID, DWORD *, PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *, void **)
   function CertIsWeakHash(
      dwHashUseType : DWORD;
      pwszCNGHashAlgid : LPCWSTR;
      dwChainFlags : DWORD;
      pSignerChainContext : PCCERT_CHAIN_CONTEXT;
      pTimeStamp : LPFILETIME;
      pwszFileName : LPCWSTR
   ) return BOOL;
   pragma import (C,CertIsWeakHash,"CertIsWeakHash");
   subtype PFN_CERT_IS_WEAK_HASH is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (DWORD, LPCWSTR, DWORD, PCCERT_CHAIN_CONTEXT, LPFILETIME, LPCWSTR)
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\dpapi.h>
   type CRYPTPROTECT_PROMPTSTRUCT_x is record
      cbSize : DWORD;
      dwPromptFlags : DWORD;
      hwndApp : HWND;
      szPrompt : LPCWSTR;
   end record;
   subtype CRYPTPROTECT_PROMPTSTRUCT is CRYPTPROTECT_PROMPTSTRUCT_x; -- CXType_Elaborated
   type PCRYPTPROTECT_PROMPTSTRUCT is access CRYPTPROTECT_PROMPTSTRUCT_x; -- CXType_Pointer - CXType_Elaborated
   function CryptProtectData(
      pDataIn : access DATA_BLOB;
      szDataDescr : LPCWSTR;
      pOptionalEntropy : access DATA_BLOB;
      pvReserved : PVOID;
      pPromptStruct : access CRYPTPROTECT_PROMPTSTRUCT;
      dwFlags : DWORD;
      pDataOut : access DATA_BLOB
   ) return BOOL;
   pragma import (C,CryptProtectData,"CryptProtectData");
   function CryptUnprotectData(
      pDataIn : access DATA_BLOB;
      ppszDataDescr : access LPWSTR;
      pOptionalEntropy : access DATA_BLOB;
      pvReserved : PVOID;
      pPromptStruct : access CRYPTPROTECT_PROMPTSTRUCT;
      dwFlags : DWORD;
      pDataOut : access DATA_BLOB
   ) return BOOL;
   pragma import (C,CryptUnprotectData,"CryptUnprotectData");
   function CryptProtectDataNoUI(
      pDataIn : access DATA_BLOB;
      szDataDescr : LPCWSTR;
      pOptionalEntropy : access DATA_BLOB;
      pvReserved : PVOID;
      pPromptStruct : access CRYPTPROTECT_PROMPTSTRUCT;
      dwFlags : DWORD;
      pbOptionalPassword : access constant BYTE;
      cbOptionalPassword : DWORD;
      pDataOut : access DATA_BLOB
   ) return BOOL;
   pragma import (C,CryptProtectDataNoUI,"CryptProtectDataNoUI");
   function CryptUnprotectDataNoUI(
      pDataIn : access DATA_BLOB;
      ppszDataDescr : access LPWSTR;
      pOptionalEntropy : access DATA_BLOB;
      pvReserved : PVOID;
      pPromptStruct : access CRYPTPROTECT_PROMPTSTRUCT;
      dwFlags : DWORD;
      pbOptionalPassword : access constant BYTE;
      cbOptionalPassword : DWORD;
      pDataOut : access DATA_BLOB
   ) return BOOL;
   pragma import (C,CryptUnprotectDataNoUI,"CryptUnprotectDataNoUI");
   function CryptUpdateProtectedState(
      pOldSid : PSID;
      pwszOldPassword : LPCWSTR;
      dwFlags : DWORD;
      pdwSuccessCount : access DWORD;
      pdwFailureCount : access DWORD
   ) return BOOL;
   pragma import (C,CryptUpdateProtectedState,"CryptUpdateProtectedState");
   function CryptProtectMemory(
      pDataIn : LPVOID;
      cbDataIn : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptProtectMemory,"CryptProtectMemory");
   function CryptUnprotectMemory(
      pDataIn : LPVOID;
      cbDataIn : DWORD;
      dwFlags : DWORD
   ) return BOOL;
   pragma import (C,CryptUnprotectMemory,"CryptUnprotectMemory");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winefs.h>
   type CERTIFICATE_BLOB_x is record
      dwCertEncodingType : DWORD;
      cbData : DWORD;
      pbData : PBYTE;
   end record;
   subtype EFS_CERTIFICATE_BLOB is CERTIFICATE_BLOB_x; -- CXType_Elaborated
   type PEFS_CERTIFICATE_BLOB is access CERTIFICATE_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_HASH_BLOB_x is record
      cbData : DWORD;
      pbData : PBYTE;
   end record;
   subtype EFS_HASH_BLOB is EFS_HASH_BLOB_x; -- CXType_Elaborated
   type PEFS_HASH_BLOB is access EFS_HASH_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_RPC_BLOB_x is record
      cbData : DWORD;
      pbData : PBYTE;
   end record;
   subtype EFS_RPC_BLOB is EFS_RPC_BLOB_x; -- CXType_Elaborated
   type PEFS_RPC_BLOB is access EFS_RPC_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_PIN_BLOB_x is record
      cbPadding : DWORD;
      cbData : DWORD;
      pbData : PBYTE;
   end record;
   subtype EFS_PIN_BLOB is EFS_PIN_BLOB_x; -- CXType_Elaborated
   type PEFS_PIN_BLOB is access EFS_PIN_BLOB_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_KEY_INFO_x is record
      dwVersion : DWORD;
      Entropy : ULONG;
      Algorithm : ALG_ID;
      KeyLength : ULONG;
   end record;
   subtype EFS_KEY_INFO is EFS_KEY_INFO_x; -- CXType_Elaborated
   type PEFS_KEY_INFO is access EFS_KEY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_COMPATIBILITY_INFO_x is record
      EfsVersion : DWORD;
   end record;
   subtype EFS_COMPATIBILITY_INFO is EFS_COMPATIBILITY_INFO_x; -- CXType_Elaborated
   type PEFS_COMPATIBILITY_INFO is access EFS_COMPATIBILITY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_VERSION_INFO_x is record
      EfsVersion : DWORD;
      SubVersion : DWORD;
   end record;
   subtype EFS_VERSION_INFO is EFS_VERSION_INFO_x; -- CXType_Elaborated
   type PEFS_VERSION_INFO is access EFS_VERSION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_DECRYPTION_STATUS_INFO_x is record
      dwDecryptionError : DWORD;
      dwHashOffset : DWORD;
      cbHash : DWORD;
   end record;
   subtype EFS_DECRYPTION_STATUS_INFO is EFS_DECRYPTION_STATUS_INFO_x; -- CXType_Elaborated
   type PEFS_DECRYPTION_STATUS_INFO is access EFS_DECRYPTION_STATUS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EFS_ENCRYPTION_STATUS_INFO_x is record
      bHasCurrentKey : BOOL;
      dwEncryptionError : DWORD;
   end record;
   subtype EFS_ENCRYPTION_STATUS_INFO is EFS_ENCRYPTION_STATUS_INFO_x; -- CXType_Elaborated
   type PEFS_ENCRYPTION_STATUS_INFO is access EFS_ENCRYPTION_STATUS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_CERTIFICATE_x is record
      cbTotalLength : DWORD;
      pUserSid : access SID;
      pCertBlob : PEFS_CERTIFICATE_BLOB;
   end record;
   subtype ENCRYPTION_CERTIFICATE is ENCRYPTION_CERTIFICATE_x; -- CXType_Elaborated
   type PENCRYPTION_CERTIFICATE is access ENCRYPTION_CERTIFICATE_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_CERTIFICATE_HASH_x is record
      cbTotalLength : DWORD;
      pUserSid : access SID;
      pHash : PEFS_HASH_BLOB;
      lpDisplayInformation : LPWSTR;
   end record;
   subtype ENCRYPTION_CERTIFICATE_HASH is ENCRYPTION_CERTIFICATE_HASH_x; -- CXType_Elaborated
   type PENCRYPTION_CERTIFICATE_HASH is access ENCRYPTION_CERTIFICATE_HASH_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_CERTIFICATE_HASH_LIST_x is record
      nCert_Hash : DWORD;
      pUsers : access PENCRYPTION_CERTIFICATE_HASH;
   end record;
   subtype ENCRYPTION_CERTIFICATE_HASH_LIST is ENCRYPTION_CERTIFICATE_HASH_LIST_x; -- CXType_Elaborated
   type PENCRYPTION_CERTIFICATE_HASH_LIST is access ENCRYPTION_CERTIFICATE_HASH_LIST_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_CERTIFICATE_LIST_x is record
      nUsers : DWORD;
      pUsers : access PENCRYPTION_CERTIFICATE;
   end record;
   subtype ENCRYPTION_CERTIFICATE_LIST is ENCRYPTION_CERTIFICATE_LIST_x; -- CXType_Elaborated
   type PENCRYPTION_CERTIFICATE_LIST is access ENCRYPTION_CERTIFICATE_LIST_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTED_FILE_METADATA_SIGNATURE_x is record
      dwEfsAccessType : DWORD;
      pCertificatesAdded : PENCRYPTION_CERTIFICATE_HASH_LIST;
      pEncryptionCertificate : PENCRYPTION_CERTIFICATE;
      pEfsStreamSignature : PEFS_RPC_BLOB;
   end record;
   subtype ENCRYPTED_FILE_METADATA_SIGNATURE is ENCRYPTED_FILE_METADATA_SIGNATURE_x; -- CXType_Elaborated
   type PENCRYPTED_FILE_METADATA_SIGNATURE is access ENCRYPTED_FILE_METADATA_SIGNATURE_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_PROTECTOR_x is record
      cbTotalLength : DWORD;
      pUserSid : access SID;
      lpProtectorDescriptor : LPWSTR;
   end record;
   subtype ENCRYPTION_PROTECTOR is ENCRYPTION_PROTECTOR_x; -- CXType_Elaborated
   type PENCRYPTION_PROTECTOR is access ENCRYPTION_PROTECTOR_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_PROTECTOR_LIST_x is record
      nProtectors : DWORD;
      pProtectors : access PENCRYPTION_PROTECTOR;
   end record;
   subtype ENCRYPTION_PROTECTOR_LIST is ENCRYPTION_PROTECTOR_LIST_x; -- CXType_Elaborated
   type PENCRYPTION_PROTECTOR_LIST is access ENCRYPTION_PROTECTOR_LIST_x; -- CXType_Pointer - CXType_Elaborated
   function QueryUsersOnEncryptedFile(
      lpFileName : LPCWSTR;
      pUsers : access PENCRYPTION_CERTIFICATE_HASH_LIST
   ) return DWORD;
   pragma import (C,QueryUsersOnEncryptedFile,"QueryUsersOnEncryptedFile");
   function QueryRecoveryAgentsOnEncryptedFile(
      lpFileName : LPCWSTR;
      pRecoveryAgents : access PENCRYPTION_CERTIFICATE_HASH_LIST
   ) return DWORD;
   pragma import (C,QueryRecoveryAgentsOnEncryptedFile,"QueryRecoveryAgentsOnEncryptedFile");
   function RemoveUsersFromEncryptedFile(
      lpFileName : LPCWSTR;
      pHashes : PENCRYPTION_CERTIFICATE_HASH_LIST
   ) return DWORD;
   pragma import (C,RemoveUsersFromEncryptedFile,"RemoveUsersFromEncryptedFile");
   function AddUsersToEncryptedFile(
      lpFileName : LPCWSTR;
      pEncryptionCertificates : PENCRYPTION_CERTIFICATE_LIST
   ) return DWORD;
   pragma import (C,AddUsersToEncryptedFile,"AddUsersToEncryptedFile");
   function SetUserFileEncryptionKey(
      pEncryptionCertificate : PENCRYPTION_CERTIFICATE
   ) return DWORD;
   pragma import (C,SetUserFileEncryptionKey,"SetUserFileEncryptionKey");
   function SetUserFileEncryptionKeyEx(
      pEncryptionCertificate : PENCRYPTION_CERTIFICATE;
      dwCapabilities : DWORD;
      dwFlags : DWORD;
      pvReserved : LPVOID
   ) return DWORD;
   pragma import (C,SetUserFileEncryptionKeyEx,"SetUserFileEncryptionKeyEx");
   procedure FreeEncryptionCertificateHashList(
      pUsers : PENCRYPTION_CERTIFICATE_HASH_LIST
   );
   pragma import (C,FreeEncryptionCertificateHashList,"FreeEncryptionCertificateHashList");
   function EncryptionDisable(
      DirPath : LPCWSTR;
      Disable : BOOL
   ) return BOOL;
   pragma import (C,EncryptionDisable,"EncryptionDisable");
   function DuplicateEncryptionInfoFile(
      SrcFileName : LPCWSTR;
      DstFileName : LPCWSTR;
      dwCreationDistribution : DWORD;
      dwAttributes : DWORD;
      lpSecurityAttributes : LPSECURITY_ATTRIBUTES
   ) return DWORD;
   pragma import (C,DuplicateEncryptionInfoFile,"DuplicateEncryptionInfoFile");
   function GetEncryptedFileMetadata(
      lpFileName : LPCWSTR;
      pcbMetadata : PDWORD;
      ppbMetadata : access PBYTE
   ) return DWORD;
   pragma import (C,GetEncryptedFileMetadata,"GetEncryptedFileMetadata");
   function SetEncryptedFileMetadata(
      lpFileName : LPCWSTR;
      pbOldMetadata : PBYTE;
      pbNewMetadata : PBYTE;
      pOwnerHash : PENCRYPTION_CERTIFICATE_HASH;
      dwOperation : DWORD;
      pCertificatesAdded : PENCRYPTION_CERTIFICATE_HASH_LIST
   ) return DWORD;
   pragma import (C,SetEncryptedFileMetadata,"SetEncryptedFileMetadata");
   procedure FreeEncryptedFileMetadata(
      pbMetadata : PBYTE
   );
   pragma import (C,FreeEncryptedFileMetadata,"FreeEncryptedFileMetadata");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\rpcnsip.h>
   type RPC_IMPORT_CONTEXT_P is record
      LookupContext : RPC_NS_HANDLE;
      ProposedHandle : RPC_BINDING_HANDLE;
      Bindings : access RPC_BINDING_VECTOR;
   end record;
   type PRPC_IMPORT_CONTEXT_P is access RPC_IMPORT_CONTEXT_P; -- CXType_Pointer - CXType_Elaborated
   function I_RpcNsGetBuffer(
      Message : PRPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcNsGetBuffer,"I_RpcNsGetBuffer");
   function I_RpcNsSendReceive(
      Message : PRPC_MESSAGE;
      Handle_x : access RPC_BINDING_HANDLE
   ) return RPC_STATUS;
   pragma import (C,I_RpcNsSendReceive,"I_RpcNsSendReceive");
   procedure I_RpcNsRaiseException(
      Message : PRPC_MESSAGE;
      Status : RPC_STATUS
   );
   pragma import (C,I_RpcNsRaiseException,"I_RpcNsRaiseException");
   function I_RpcReBindBuffer(
      Message : PRPC_MESSAGE
   ) return RPC_STATUS;
   pragma import (C,I_RpcReBindBuffer,"I_RpcReBindBuffer");
   function I_NsServerBindSearch return RPC_STATUS;
   pragma import (C,I_NsServerBindSearch,"I_NsServerBindSearch");
   function I_NsClientBindSearch return RPC_STATUS;
   pragma import (C,I_NsClientBindSearch,"I_NsClientBindSearch");
   procedure I_NsClientBindDone;
   pragma import (C,I_NsClientBindDone,"I_NsClientBindDone");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\rpcsal.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\rpcndr.h>
   -- subtype byte is Interfaces.C.unsigned_char; -- CXType_UChar [Note: Type already defined (case sensitive issue)]
   subtype cs_byte is byte; -- CXType_Typedef
   -- subtype boolean is Interfaces.C.unsigned_char; -- CXType_UChar [Note: Type already defined (case sensitive issue)]
   procedure MIDL_user_allocate(
      size_x : size_t
   );
   pragma import (C,MIDL_user_allocate,"MIDL_user_allocate");
   procedure MIDL_user_free(
      param1 : access Void
   );
   pragma import (C,MIDL_user_free,"MIDL_user_free");
   procedure I_RpcDefaultAllocate(
      bh : handle_t;
      size_x : size_t;
      RealAlloc : access System.Address
   );
   pragma import (C,I_RpcDefaultAllocate,"I_RpcDefaultAllocate");
   procedure I_RpcDefaultFree(
      bh : handle_t;
      param2 : access Void;
      RealFree : access System.Address
   );
   pragma import (C,I_RpcDefaultFree,"I_RpcDefaultFree");
   type NDR_CCONTEXT is access Void; -- CXType_Pointer - CXType_Void
   type NDR_SCONTEXT_Record is record
      pad : Void;
      userContext : access Void;
   end record;
   type NDR_SCONTEXT is access NDR_SCONTEXT_Record; -- CXType_Pointer - CXType_Elaborated
   subtype NDR_RUNDOWN is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (void *)
   subtype NDR_NOTIFY_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void ()
   subtype NDR_NOTIFY2_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (boolean)
   type SCONTEXT_QUEUE_x is record
      NumberOfObjects : Interfaces.C.unsigned_long;
      ArrayOfObjects : access NDR_SCONTEXT;
   end record;
   subtype SCONTEXT_QUEUE is SCONTEXT_QUEUE_x; -- CXType_Elaborated
   type PSCONTEXT_QUEUE is access SCONTEXT_QUEUE_x; -- CXType_Pointer - CXType_Elaborated
   function NDRCContextBinding(
      CContext : NDR_CCONTEXT
   ) return RPC_BINDING_HANDLE;
   pragma import (C,NDRCContextBinding,"NDRCContextBinding");
   procedure NDRCContextMarshall(
      CContext : NDR_CCONTEXT;
      pBuff : access Void
   );
   pragma import (C,NDRCContextMarshall,"NDRCContextMarshall");
   procedure NDRCContextUnmarshall(
      pCContext : access NDR_CCONTEXT;
      hBinding : RPC_BINDING_HANDLE;
      pBuff : access Void;
      DataRepresentation : Interfaces.C.unsigned_long
   );
   pragma import (C,NDRCContextUnmarshall,"NDRCContextUnmarshall");
   procedure NDRCContextUnmarshall2(
      pCContext : access NDR_CCONTEXT;
      hBinding : RPC_BINDING_HANDLE;
      pBuff : access Void;
      DataRepresentation : Interfaces.C.unsigned_long
   );
   pragma import (C,NDRCContextUnmarshall2,"NDRCContextUnmarshall2");
   procedure NDRSContextMarshall(
      CContext : NDR_SCONTEXT;
      pBuff : access Void;
      userRunDownIn : NDR_RUNDOWN
   );
   pragma import (C,NDRSContextMarshall,"NDRSContextMarshall");
   function NDRSContextUnmarshall(
      pBuff : access Void;
      DataRepresentation : Interfaces.C.unsigned_long
   ) return NDR_SCONTEXT;
   pragma import (C,NDRSContextUnmarshall,"NDRSContextUnmarshall");
   procedure NDRSContextMarshallEx(
      BindingHandle : RPC_BINDING_HANDLE;
      CContext : NDR_SCONTEXT;
      pBuff : access Void;
      userRunDownIn : NDR_RUNDOWN
   );
   pragma import (C,NDRSContextMarshallEx,"NDRSContextMarshallEx");
   procedure NDRSContextMarshall2(
      BindingHandle : RPC_BINDING_HANDLE;
      CContext : NDR_SCONTEXT;
      pBuff : access Void;
      userRunDownIn : NDR_RUNDOWN;
      CtxGuard : access Void;
      Flags : Interfaces.C.unsigned_long
   );
   pragma import (C,NDRSContextMarshall2,"NDRSContextMarshall2");
   function NDRSContextUnmarshallEx(
      BindingHandle : RPC_BINDING_HANDLE;
      pBuff : access Void;
      DataRepresentation : Interfaces.C.unsigned_long
   ) return NDR_SCONTEXT;
   pragma import (C,NDRSContextUnmarshallEx,"NDRSContextUnmarshallEx");
   function NDRSContextUnmarshall2(
      BindingHandle : RPC_BINDING_HANDLE;
      pBuff : access Void;
      DataRepresentation : Interfaces.C.unsigned_long;
      CtxGuard : access Void;
      Flags : Interfaces.C.unsigned_long
   ) return NDR_SCONTEXT;
   pragma import (C,NDRSContextUnmarshall2,"NDRSContextUnmarshall2");
   procedure RpcSsDestroyClientContext(
      ContextHandle : access LPVOID
   );
   pragma import (C,RpcSsDestroyClientContext,"RpcSsDestroyClientContext");
   subtype error_status_t is Interfaces.C.unsigned_long; -- CXType_ULong
   type MIDL_STUB_MESSAGE_x; -- Forward Declaration
   type MIDL_STUB_DESC_x; -- Forward Declaration
   type FULL_PTR_XLAT_TABLES_x; -- Forward Declaration
   type RPC_BUFPTR is access Interfaces.C.unsigned_char; -- CXType_Pointer - CXType_UChar
   subtype RPC_LENGTH is Interfaces.C.unsigned_long; -- CXType_ULong
   subtype EXPR_EVAL is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (struct _MIDL_STUB_MESSAGE *)
   type PFORMAT_STRING is access constant Interfaces.C.unsigned_char; -- CXType_Pointer - CXType_UChar
   type ARRAY_INFO is record
      Dimension : Interfaces.C.Long;
      BufferConformanceMark : access Interfaces.C.unsigned_long;
      BufferVarianceMark : access Interfaces.C.unsigned_long;
      MaxCountArray : access Interfaces.C.unsigned_long;
      OffsetArray : access Interfaces.C.unsigned_long;
      ActualCountArray : access Interfaces.C.unsigned_long;
   end record;
   type PARRAY_INFO is access ARRAY_INFO; -- CXType_Pointer - CXType_Elaborated
   type NDR_ASYNC_MESSAGE_x; -- Forward Declaration
   type PNDR_ASYNC_MESSAGE is access NDR_ASYNC_MESSAGE_x; -- CXType_Pointer - CXType_Elaborated
   type NDR_CORRELATION_INFO_x; -- Forward Declaration
   type PNDR_CORRELATION_INFO is access NDR_CORRELATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type MIDL_SYNTAX_INFO_x; -- Forward Declaration
   subtype MIDL_SYNTAX_INFO is MIDL_SYNTAX_INFO_x; -- CXType_Elaborated
   type PMIDL_SYNTAX_INFO is access MIDL_SYNTAX_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type NDR_ALLOC_ALL_NODES_CONTEXT; -- Forward Declaration
   type NDR_POINTER_QUEUE_STATE; -- Forward Declaration
   type NDR_PROC_CONTEXT_x; -- Forward Declaration
   type MIDL_STUB_MESSAGE_x is record
      RpcMsg : PRPC_MESSAGE;
      Buffer : access Interfaces.C.unsigned_char;
      BufferStart : access Interfaces.C.unsigned_char;
      BufferEnd : access Interfaces.C.unsigned_char;
      BufferMark : access Interfaces.C.unsigned_char;
      BufferLength : Interfaces.C.unsigned_long;
      MemorySize : Interfaces.C.unsigned_long;
      Memory : access Interfaces.C.unsigned_char;
      IsClient : Interfaces.C.unsigned_char;
      Pad : Interfaces.C.unsigned_char;
      uFlags2 : Interfaces.C.unsigned_short;
      ReuseBuffer : Interfaces.C.Int;
      pAllocAllNodesContext : access Void;
      pPointerQueueState : access Void;
      IgnoreEmbeddedPointers : Interfaces.C.Int;
      PointerBufferMark : access Interfaces.C.unsigned_char;
      CorrDespIncrement : Interfaces.C.unsigned_char;
      uFlags : Interfaces.C.unsigned_char;
      UniquePtrCount : Interfaces.C.unsigned_short;
      MaxCount : ULONG_PTR;
      Offset : Interfaces.C.unsigned_long;
      ActualCount : Interfaces.C.unsigned_long;
      pfnAllocate : access System.Address;
      pfnFree : access System.Address;
      StackTop : access Interfaces.C.unsigned_char;
      pPresentedType : access Interfaces.C.unsigned_char;
      pTransmitType : access Interfaces.C.unsigned_char;
      SavedHandle : handle_t;
      StubDesc : access Void;
      FullPtrXlatTables : access Void;
      FullPtrRefId : Interfaces.C.unsigned_long;
      PointerLength : Interfaces.C.unsigned_long;
      fInDontFree : Interfaces.C.Int;
      fDontCallFreeInst : Interfaces.C.Int;
      fUnused1 : Interfaces.C.Int;
      fHasReturn : Interfaces.C.Int;
      fHasExtensions : Interfaces.C.Int;
      fHasNewCorrDesc : Interfaces.C.Int;
      fIsIn : Interfaces.C.Int;
      fIsOut : Interfaces.C.Int;
      fIsOicf : Interfaces.C.Int;
      fBufferValid : Interfaces.C.Int;
      fHasMemoryValidateCallback : Interfaces.C.Int;
      fInFree : Interfaces.C.Int;
      fNeedMCCP : Interfaces.C.Int;
      fUnused2 : Interfaces.C.Int;
      fUnused3 : Interfaces.C.Int;
      dwDestContext : Interfaces.C.unsigned_long;
      pvDestContext : access Void;
      SavedContextHandles : access NDR_SCONTEXT;
      ParamNumber : Interfaces.C.Long;
      pRpcChannelBuffer : access Void;
      pArrayInfo : PARRAY_INFO;
      SizePtrCountArray : access Interfaces.C.unsigned_long;
      SizePtrOffsetArray : access Interfaces.C.unsigned_long;
      SizePtrLengthArray : access Interfaces.C.unsigned_long;
      pArgQueue : access Void;
      dwStubPhase : Interfaces.C.unsigned_long;
      LowStackMark : access Void;
      pAsyncMsg : PNDR_ASYNC_MESSAGE;
      pCorrInfo : PNDR_CORRELATION_INFO;
      pCorrMemory : access Interfaces.C.unsigned_char;
      pMemoryList : access Void;
      pCSInfo : INT_PTR;
      ConformanceMark : access Interfaces.C.unsigned_char;
      VarianceMark : access Interfaces.C.unsigned_char;
      Unused : INT_PTR;
      pContext_x : access Void;
      ContextHandleHash : access Void;
      pUserMarshalList : access Void;
      Reserved51_3 : INT_PTR;
      Reserved51_4 : INT_PTR;
      Reserved51_5 : INT_PTR;
   end record;
   type IRpcChannelBuffer; -- Forward Declaration
   subtype MIDL_STUB_MESSAGE is MIDL_STUB_MESSAGE_x; -- CXType_Elaborated
   type PMIDL_STUB_MESSAGE is access MIDL_STUB_MESSAGE_x; -- CXType_Pointer - CXType_Elaborated
   subtype GENERIC_BINDING_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void *(void *)
   subtype GENERIC_UNBIND_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (void *, unsigned char *)
   type GENERIC_BINDING_ROUTINE_PAIR_x is record
      pfnBind : GENERIC_BINDING_ROUTINE;
      pfnUnbind : GENERIC_UNBIND_ROUTINE;
   end record;
   subtype GENERIC_BINDING_ROUTINE_PAIR is GENERIC_BINDING_ROUTINE_PAIR_x; -- CXType_Elaborated
   type PGENERIC_BINDING_ROUTINE_PAIR is access GENERIC_BINDING_ROUTINE_PAIR_x; -- CXType_Pointer - CXType_Elaborated
   type GENERIC_BINDING_INFO_x is record
      pObj : access Void;
      Size_x : Interfaces.C.unsigned;
      pfnBind : GENERIC_BINDING_ROUTINE;
      pfnUnbind : GENERIC_UNBIND_ROUTINE;
   end record;
   subtype GENERIC_BINDING_INFO is GENERIC_BINDING_INFO_x; -- CXType_Elaborated
   type PGENERIC_BINDING_INFO is access GENERIC_BINDING_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype XMIT_HELPER_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PMIDL_STUB_MESSAGE)
   type XMIT_ROUTINE_QUINTUPLE_x is record
      pfnTranslateToXmit : XMIT_HELPER_ROUTINE;
      pfnTranslateFromXmit : XMIT_HELPER_ROUTINE;
      pfnFreeXmit : XMIT_HELPER_ROUTINE;
      pfnFreeInst : XMIT_HELPER_ROUTINE;
   end record;
   subtype XMIT_ROUTINE_QUINTUPLE is XMIT_ROUTINE_QUINTUPLE_x; -- CXType_Elaborated
   type PXMIT_ROUTINE_QUINTUPLE is access XMIT_ROUTINE_QUINTUPLE_x; -- CXType_Pointer - CXType_Elaborated
   subtype USER_MARSHAL_SIZING_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] unsigned long (unsigned long *, unsigned long, void *)
   subtype USER_MARSHAL_MARSHALLING_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] unsigned char *(unsigned long *, unsigned char *, void *)
   subtype USER_MARSHAL_UNMARSHALLING_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] unsigned char *(unsigned long *, unsigned char *, void *)
   subtype USER_MARSHAL_FREEING_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (unsigned long *, void *)
   type USER_MARSHAL_ROUTINE_QUADRUPLE_x is record
      pfnBufferSize : USER_MARSHAL_SIZING_ROUTINE;
      pfnMarshall : USER_MARSHAL_MARSHALLING_ROUTINE;
      pfnUnmarshall : USER_MARSHAL_UNMARSHALLING_ROUTINE;
      pfnFree : USER_MARSHAL_FREEING_ROUTINE;
   end record;
   subtype USER_MARSHAL_ROUTINE_QUADRUPLE is USER_MARSHAL_ROUTINE_QUADRUPLE_x; -- CXType_Elaborated
   type USER_MARSHAL_CB_TYPE_x is (
      USER_MARSHAL_CB_BUFFER_SIZE,
      USER_MARSHAL_CB_MARSHALL,
      USER_MARSHAL_CB_UNMARSHALL,
      USER_MARSHAL_CB_FREE
   );
   for USER_MARSHAL_CB_TYPE_x use (
      USER_MARSHAL_CB_BUFFER_SIZE => 0,
      USER_MARSHAL_CB_MARSHALL => 1,
      USER_MARSHAL_CB_UNMARSHALL => 2,
      USER_MARSHAL_CB_FREE => 3
   );
   for USER_MARSHAL_CB_TYPE_x'Size use 32;
   subtype USER_MARSHAL_CB_TYPE is USER_MARSHAL_CB_TYPE_x; -- CXType_Elaborated
   type USER_MARSHAL_CB_x is record
      Flags : Interfaces.C.unsigned_long;
      pStubMsg : PMIDL_STUB_MESSAGE;
      pReserve : PFORMAT_STRING;
      Signature : Interfaces.C.unsigned_long;
      CBType : USER_MARSHAL_CB_TYPE;
      pFormat : PFORMAT_STRING;
      pTypeFormat : PFORMAT_STRING;
   end record;
   subtype USER_MARSHAL_CB is USER_MARSHAL_CB_x; -- CXType_Elaborated
   type MALLOC_FREE_STRUCT_x is record
      pfnAllocate : access System.Address;
      pfnFree : access System.Address;
   end record;
   subtype MALLOC_FREE_STRUCT is MALLOC_FREE_STRUCT_x; -- CXType_Elaborated
   type COMM_FAULT_OFFSETS_x is record
      CommOffset : Interfaces.C.Short;
      FaultOffset : Interfaces.C.Short;
   end record;
   subtype COMM_FAULT_OFFSETS is COMM_FAULT_OFFSETS_x; -- CXType_Elaborated
   type IDL_CS_CONVERT_x is (
      IDL_CS_NO_CONVERT,
      IDL_CS_IN_PLACE_CONVERT,
      IDL_CS_NEW_BUFFER_CONVERT
   );
   for IDL_CS_CONVERT_x use (
      IDL_CS_NO_CONVERT => 0,
      IDL_CS_IN_PLACE_CONVERT => 1,
      IDL_CS_NEW_BUFFER_CONVERT => 2
   );
   for IDL_CS_CONVERT_x'Size use 32;
   subtype IDL_CS_CONVERT is IDL_CS_CONVERT_x; -- CXType_Elaborated
   subtype CS_TYPE_NET_SIZE_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPC_BINDING_HANDLE, unsigned long, unsigned long, IDL_CS_CONVERT *, unsigned long *, error_status_t *)
   subtype CS_TYPE_LOCAL_SIZE_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPC_BINDING_HANDLE, unsigned long, unsigned long, IDL_CS_CONVERT *, unsigned long *, error_status_t *)
   subtype CS_TYPE_TO_NETCS_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPC_BINDING_HANDLE, unsigned long, void *, unsigned long, byte *, unsigned long *, error_status_t *)
   subtype CS_TYPE_FROM_NETCS_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPC_BINDING_HANDLE, unsigned long, byte *, unsigned long, unsigned long, void *, unsigned long *, error_status_t *)
   subtype CS_TAG_GETTING_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (RPC_BINDING_HANDLE, int, unsigned long *, unsigned long *, unsigned long *, error_status_t *)
   procedure RpcCsGetTags(
      hBinding : RPC_BINDING_HANDLE;
      fServerSide : Interfaces.C.Int;
      pulSendingTag : access Interfaces.C.unsigned_long;
      pulDesiredReceivingTag : access Interfaces.C.unsigned_long;
      pulReceivingTag : access Interfaces.C.unsigned_long;
      pStatus : access error_status_t
   );
   pragma import (C,RpcCsGetTags,"RpcCsGetTags");
   type NDR_CS_SIZE_CONVERT_ROUTINES_x is record
      pfnNetSize : CS_TYPE_NET_SIZE_ROUTINE;
      pfnToNetCs : CS_TYPE_TO_NETCS_ROUTINE;
      pfnLocalSize : CS_TYPE_LOCAL_SIZE_ROUTINE;
      pfnFromNetCs : CS_TYPE_FROM_NETCS_ROUTINE;
   end record;
   subtype NDR_CS_SIZE_CONVERT_ROUTINES is NDR_CS_SIZE_CONVERT_ROUTINES_x; -- CXType_Elaborated
   type NDR_CS_ROUTINES_x is record
      pSizeConvertRoutines : access NDR_CS_SIZE_CONVERT_ROUTINES;
      pTagGettingRoutines : access CS_TAG_GETTING_ROUTINE;
   end record;
   subtype NDR_CS_ROUTINES is NDR_CS_ROUTINES_x; -- CXType_Elaborated
   type NDR_EXPR_DESC_x is record
      pOffset : access Interfaces.C.unsigned_short;
      pFormatExpr : PFORMAT_STRING;
   end record;
   subtype NDR_EXPR_DESC is NDR_EXPR_DESC_x; -- CXType_Elaborated
   type MIDL_STUB_DESC_x is record
      RpcInterfaceInformation : access Void;
      pfnAllocate : access System.Address;
      pfnFree : access System.Address;
      IMPLICIT_HANDLE_INFO : Void;
      apfnNdrRundownRoutines : access constant NDR_RUNDOWN;
      aGenericBindingRoutinePairs : access constant GENERIC_BINDING_ROUTINE_PAIR;
      apfnExprEval : access constant EXPR_EVAL;
      aXmitQuintuple : access constant XMIT_ROUTINE_QUINTUPLE;
      pFormatTypes : access Interfaces.C.unsigned_char;
      fCheckBounds : Interfaces.C.Int;
      Version : Interfaces.C.unsigned_long;
      pMallocFreeStruct : access MALLOC_FREE_STRUCT;
      MIDLVersion : Interfaces.C.Long;
      CommFaultOffsets : access constant COMM_FAULT_OFFSETS;
      aUserMarshalQuadruple : access constant USER_MARSHAL_ROUTINE_QUADRUPLE;
      NotifyRoutineTable : access constant NDR_NOTIFY_ROUTINE;
      mFlags : ULONG_PTR;
      CsRoutineTables : access constant NDR_CS_ROUTINES;
      ProxyServerInfo : access Void;
      pExprInfo : access constant NDR_EXPR_DESC;
   end record;
   subtype MIDL_STUB_DESC is MIDL_STUB_DESC_x; -- CXType_Elaborated
   type PMIDL_STUB_DESC is access constant MIDL_STUB_DESC; -- CXType_Pointer - CXType_Typedef
   type PMIDL_XMIT_TYPE is access Void; -- CXType_Pointer - CXType_Void
   type MIDL_FORMAT_STRING_x is record
      Pad : Interfaces.C.Short;
      Format : Void;
   end record;
   subtype MIDL_FORMAT_STRING is MIDL_FORMAT_STRING_x; -- CXType_Elaborated
   subtype STUB_THUNK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PMIDL_STUB_MESSAGE)
   subtype SERVER_ROUTINE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] long ()
   type MIDL_METHOD_PROPERTY_x is record
      Id : Interfaces.C.unsigned_long;
      Value : ULONG_PTR;
   end record;
   subtype MIDL_METHOD_PROPERTY is MIDL_METHOD_PROPERTY_x; -- CXType_Elaborated
   type PMIDL_METHOD_PROPERTY is access MIDL_METHOD_PROPERTY_x; -- CXType_Pointer - CXType_Elaborated
   type MIDL_METHOD_PROPERTY_MAP_x is record
      Count : Interfaces.C.unsigned_long;
      Properties : access constant MIDL_METHOD_PROPERTY;
   end record;
   subtype MIDL_METHOD_PROPERTY_MAP is MIDL_METHOD_PROPERTY_MAP_x; -- CXType_Elaborated
   type PMIDL_METHOD_PROPERTY_MAP is access MIDL_METHOD_PROPERTY_MAP_x; -- CXType_Pointer - CXType_Elaborated
   type MIDL_METHOD_PROPERTY_MAP_Ptr is access all MIDL_METHOD_PROPERTY_MAP; -- Auto Generated Dependancy
   type MIDL_INTERFACE_METHOD_PROPERTIES_x is record
      MethodCount : Interfaces.C.unsigned_short;
      MethodProperties : access constant MIDL_METHOD_PROPERTY_MAP_Ptr;
   end record;
   subtype MIDL_INTERFACE_METHOD_PROPERTIES is MIDL_INTERFACE_METHOD_PROPERTIES_x; -- CXType_Elaborated
   type MIDL_SERVER_INFO_x_x is record
      pStubDesc : PMIDL_STUB_DESC;
      DispatchTable : access constant SERVER_ROUTINE;
      ProcString : PFORMAT_STRING;
      FmtStringOffset : access Interfaces.C.unsigned_short;
      ThunkTable : access constant STUB_THUNK;
      pTransferSyntax : PRPC_SYNTAX_IDENTIFIER;
      nCount : ULONG_PTR;
      pSyntaxInfo : PMIDL_SYNTAX_INFO;
   end record;
   subtype MIDL_SERVER_INFO is MIDL_SERVER_INFO_x_x; -- CXType_Elaborated
   type PMIDL_SERVER_INFO is access MIDL_SERVER_INFO_x_x; -- CXType_Pointer - CXType_Elaborated
   type MIDL_STUBLESS_PROXY_INFO_x is record
      pStubDesc : PMIDL_STUB_DESC;
      ProcFormatString : PFORMAT_STRING;
      FormatStringOffset : access Interfaces.C.unsigned_short;
      pTransferSyntax : PRPC_SYNTAX_IDENTIFIER;
      nCount : ULONG_PTR;
      pSyntaxInfo : PMIDL_SYNTAX_INFO;
   end record;
   subtype MIDL_STUBLESS_PROXY_INFO is MIDL_STUBLESS_PROXY_INFO_x; -- CXType_Elaborated
   type PMIDL_STUBLESS_PROXY_INFO is access MIDL_STUBLESS_PROXY_INFO; -- CXType_Pointer - CXType_Typedef
   type MIDL_SYNTAX_INFO_x is record
      TransferSyntax : RPC_SYNTAX_IDENTIFIER;
      DispatchTable : access RPC_DISPATCH_TABLE;
      ProcString : PFORMAT_STRING;
      FmtStringOffset : access Interfaces.C.unsigned_short;
      TypeString : PFORMAT_STRING;
      aUserMarshalQuadruple : access Void;
      pMethodProperties : access constant MIDL_INTERFACE_METHOD_PROPERTIES;
      pReserved2 : ULONG_PTR;
   end record;
   type PARAM_OFFSETTABLE is access Interfaces.C.unsigned_short; -- CXType_Pointer - CXType_UShort
   type PPARAM_OFFSETTABLE is access Interfaces.C.unsigned_short; -- CXType_Pointer - CXType_UShort
   type CLIENT_CALL_RETURN_x is null record; -- Union Placeholder [FIXME]
   subtype CLIENT_CALL_RETURN is CLIENT_CALL_RETURN_x; -- CXType_Elaborated
   type XLAT_SIDE is (
      XLAT_SERVER,
      XLAT_CLIENT
   );
   for XLAT_SIDE use (
      XLAT_SERVER => 1,
      XLAT_CLIENT => 2
   );
   for XLAT_SIDE'Size use 32;
   type FULL_PTR_XLAT_TABLES_x is record
      RefIdToPointer : access Void;
      PointerToRefId : access Void;
      NextRefId : Interfaces.C.unsigned_long;
      XlatSide : XLAT_SIDE;
   end record;
   subtype FULL_PTR_XLAT_TABLES is FULL_PTR_XLAT_TABLES_x; -- CXType_Elaborated
   type PFULL_PTR_XLAT_TABLES is access FULL_PTR_XLAT_TABLES_x; -- CXType_Pointer - CXType_Elaborated
   type system_handle_t_x is (
      SYSTEM_HANDLE_FILE,
      SYSTEM_HANDLE_SEMAPHORE,
      SYSTEM_HANDLE_EVENT,
      SYSTEM_HANDLE_MUTEX,
      SYSTEM_HANDLE_PROCESS,
      SYSTEM_HANDLE_TOKEN,
      SYSTEM_HANDLE_SECTION,
      SYSTEM_HANDLE_REG_KEY,
      SYSTEM_HANDLE_THREAD,
      SYSTEM_HANDLE_COMPOSITION_OBJECT,
      SYSTEM_HANDLE_SOCKET,
      SYSTEM_HANDLE_JOB,
      SYSTEM_HANDLE_PIPE,
      SYSTEM_HANDLE_INVALID
   );
   for system_handle_t_x use (
      SYSTEM_HANDLE_FILE => 0,
      SYSTEM_HANDLE_SEMAPHORE => 1,
      SYSTEM_HANDLE_EVENT => 2,
      SYSTEM_HANDLE_MUTEX => 3,
      SYSTEM_HANDLE_PROCESS => 4,
      SYSTEM_HANDLE_TOKEN => 5,
      SYSTEM_HANDLE_SECTION => 6,
      SYSTEM_HANDLE_REG_KEY => 7,
      SYSTEM_HANDLE_THREAD => 8,
      SYSTEM_HANDLE_COMPOSITION_OBJECT => 9,
      SYSTEM_HANDLE_SOCKET => 10,
      SYSTEM_HANDLE_JOB => 11,
      SYSTEM_HANDLE_PIPE => 12,
      SYSTEM_HANDLE_INVALID => 255
   );
   for system_handle_t_x'Size use 32;
   subtype system_handle_t is system_handle_t_x; -- CXType_Elaborated
   type MIDL_INTERCEPTION_INFO_x is record
      Version : Interfaces.C.unsigned_long;
      ProcString : PFORMAT_STRING;
      ProcFormatOffsetTable : access Interfaces.C.unsigned_short;
      ProcCount : Interfaces.C.unsigned_long;
      TypeString : PFORMAT_STRING;
   end record;
   subtype MIDL_INTERCEPTION_INFO is MIDL_INTERCEPTION_INFO_x; -- CXType_Elaborated
   type PMIDL_INTERCEPTION_INFO is access MIDL_INTERCEPTION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type MIDL_WINRT_TYPE_SERIALIZATION_INFO_x is record
      Version : Interfaces.C.unsigned_long;
      TypeFormatString : PFORMAT_STRING;
      FormatStringSize : Interfaces.C.unsigned_short;
      TypeOffset : Interfaces.C.unsigned_short;
      StubDesc : PMIDL_STUB_DESC;
   end record;
   subtype MIDL_WINRT_TYPE_SERIALIZATION_INFO is MIDL_WINRT_TYPE_SERIALIZATION_INFO_x; -- CXType_Elaborated
   type PMIDL_WINRT_TYPE_SERIALIZATION_INFO is access MIDL_WINRT_TYPE_SERIALIZATION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type MIDL_SYNTAX_INFO_Ptr is access all MIDL_SYNTAX_INFO; -- Auto Generated Dependancy
   function NdrClientGetSupportedSyntaxes(
      pInf : access RPC_CLIENT_INTERFACE;
      pCount : access Interfaces.C.unsigned_long;
      pArr : access MIDL_SYNTAX_INFO_Ptr
   ) return RPC_STATUS;
   pragma import (C,NdrClientGetSupportedSyntaxes,"NdrClientGetSupportedSyntaxes");
   function NdrServerGetSupportedSyntaxes(
      pInf : access RPC_SERVER_INTERFACE;
      pCount : access Interfaces.C.unsigned_long;
      pArr : access MIDL_SYNTAX_INFO_Ptr;
      pPreferSyntaxIndex : access Interfaces.C.unsigned_long
   ) return RPC_STATUS;
   pragma import (C,NdrServerGetSupportedSyntaxes,"NdrServerGetSupportedSyntaxes");
   procedure NdrSimpleTypeMarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      FormatChar : Interfaces.C.unsigned_char
   );
   pragma import (C,NdrSimpleTypeMarshall,"NdrSimpleTypeMarshall");
   procedure NdrClientContextMarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      ContextHandle : NDR_CCONTEXT;
      fCheck : Interfaces.C.Int
   );
   pragma import (C,NdrClientContextMarshall,"NdrClientContextMarshall");
   procedure NdrServerContextMarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      ContextHandle : NDR_SCONTEXT;
      RundownRoutine : NDR_RUNDOWN
   );
   pragma import (C,NdrServerContextMarshall,"NdrServerContextMarshall");
   procedure NdrServerContextNewMarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      ContextHandle : NDR_SCONTEXT;
      RundownRoutine : NDR_RUNDOWN;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrServerContextNewMarshall,"NdrServerContextNewMarshall");
   procedure NdrSimpleTypeUnmarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      FormatChar : Interfaces.C.unsigned_char
   );
   pragma import (C,NdrSimpleTypeUnmarshall,"NdrSimpleTypeUnmarshall");
   procedure NdrCorrelationInitialize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Void;
      CacheSize : Interfaces.C.unsigned_long;
      flags : Interfaces.C.unsigned_long
   );
   pragma import (C,NdrCorrelationInitialize,"NdrCorrelationInitialize");
   procedure NdrCorrelationPass(
      pStubMsg : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrCorrelationPass,"NdrCorrelationPass");
   procedure NdrCorrelationFree(
      pStubMsg : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrCorrelationFree,"NdrCorrelationFree");
   procedure NdrClientContextUnmarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pContextHandle : access NDR_CCONTEXT;
      BindHandle : RPC_BINDING_HANDLE
   );
   pragma import (C,NdrClientContextUnmarshall,"NdrClientContextUnmarshall");
   function NdrServerContextUnmarshall(
      pStubMsg : PMIDL_STUB_MESSAGE
   ) return NDR_SCONTEXT;
   pragma import (C,NdrServerContextUnmarshall,"NdrServerContextUnmarshall");
   function NdrContextHandleInitialize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return NDR_SCONTEXT;
   pragma import (C,NdrContextHandleInitialize,"NdrContextHandleInitialize");
   function NdrServerContextNewUnmarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return NDR_SCONTEXT;
   pragma import (C,NdrServerContextNewUnmarshall,"NdrServerContextNewUnmarshall");
   procedure NdrPointerBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrPointerBufferSize,"NdrPointerBufferSize");
   procedure NdrCsArrayBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrCsArrayBufferSize,"NdrCsArrayBufferSize");
   procedure NdrCsTagBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrCsTagBufferSize,"NdrCsTagBufferSize");
   procedure NdrSimpleStructBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrSimpleStructBufferSize,"NdrSimpleStructBufferSize");
   procedure NdrConformantStructBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantStructBufferSize,"NdrConformantStructBufferSize");
   procedure NdrConformantVaryingStructBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantVaryingStructBufferSize,"NdrConformantVaryingStructBufferSize");
   procedure NdrComplexStructBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrComplexStructBufferSize,"NdrComplexStructBufferSize");
   procedure NdrFixedArrayBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrFixedArrayBufferSize,"NdrFixedArrayBufferSize");
   procedure NdrConformantArrayBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantArrayBufferSize,"NdrConformantArrayBufferSize");
   procedure NdrConformantVaryingArrayBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantVaryingArrayBufferSize,"NdrConformantVaryingArrayBufferSize");
   procedure NdrVaryingArrayBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrVaryingArrayBufferSize,"NdrVaryingArrayBufferSize");
   procedure NdrComplexArrayBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrComplexArrayBufferSize,"NdrComplexArrayBufferSize");
   procedure NdrConformantStringBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantStringBufferSize,"NdrConformantStringBufferSize");
   procedure NdrNonConformantStringBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrNonConformantStringBufferSize,"NdrNonConformantStringBufferSize");
   procedure NdrEncapsulatedUnionBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrEncapsulatedUnionBufferSize,"NdrEncapsulatedUnionBufferSize");
   procedure NdrNonEncapsulatedUnionBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrNonEncapsulatedUnionBufferSize,"NdrNonEncapsulatedUnionBufferSize");
   procedure NdrByteCountPointerBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrByteCountPointerBufferSize,"NdrByteCountPointerBufferSize");
   procedure NdrXmitOrRepAsBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrXmitOrRepAsBufferSize,"NdrXmitOrRepAsBufferSize");
   procedure NdrUserMarshalBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrUserMarshalBufferSize,"NdrUserMarshalBufferSize");
   procedure NdrInterfacePointerBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrInterfacePointerBufferSize,"NdrInterfacePointerBufferSize");
   procedure NdrContextHandleSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrContextHandleSize,"NdrContextHandleSize");
   function NdrPointerMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrPointerMemorySize,"NdrPointerMemorySize");
   function NdrContextHandleMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrContextHandleMemorySize,"NdrContextHandleMemorySize");
   function NdrCsArrayMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrCsArrayMemorySize,"NdrCsArrayMemorySize");
   function NdrCsTagMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrCsTagMemorySize,"NdrCsTagMemorySize");
   function NdrSimpleStructMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrSimpleStructMemorySize,"NdrSimpleStructMemorySize");
   function NdrConformantStructMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrConformantStructMemorySize,"NdrConformantStructMemorySize");
   function NdrConformantVaryingStructMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrConformantVaryingStructMemorySize,"NdrConformantVaryingStructMemorySize");
   function NdrComplexStructMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrComplexStructMemorySize,"NdrComplexStructMemorySize");
   function NdrFixedArrayMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrFixedArrayMemorySize,"NdrFixedArrayMemorySize");
   function NdrConformantArrayMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrConformantArrayMemorySize,"NdrConformantArrayMemorySize");
   function NdrConformantVaryingArrayMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrConformantVaryingArrayMemorySize,"NdrConformantVaryingArrayMemorySize");
   function NdrVaryingArrayMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrVaryingArrayMemorySize,"NdrVaryingArrayMemorySize");
   function NdrComplexArrayMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrComplexArrayMemorySize,"NdrComplexArrayMemorySize");
   function NdrConformantStringMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrConformantStringMemorySize,"NdrConformantStringMemorySize");
   function NdrNonConformantStringMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrNonConformantStringMemorySize,"NdrNonConformantStringMemorySize");
   function NdrEncapsulatedUnionMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrEncapsulatedUnionMemorySize,"NdrEncapsulatedUnionMemorySize");
   function NdrNonEncapsulatedUnionMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrNonEncapsulatedUnionMemorySize,"NdrNonEncapsulatedUnionMemorySize");
   function NdrXmitOrRepAsMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrXmitOrRepAsMemorySize,"NdrXmitOrRepAsMemorySize");
   function NdrUserMarshalMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrUserMarshalMemorySize,"NdrUserMarshalMemorySize");
   function NdrInterfacePointerMemorySize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   ) return Interfaces.C.unsigned_long;
   pragma import (C,NdrInterfacePointerMemorySize,"NdrInterfacePointerMemorySize");
   procedure NdrPointerFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrPointerFree,"NdrPointerFree");
   procedure NdrCsArrayFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrCsArrayFree,"NdrCsArrayFree");
   procedure NdrSimpleStructFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrSimpleStructFree,"NdrSimpleStructFree");
   procedure NdrConformantStructFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantStructFree,"NdrConformantStructFree");
   procedure NdrConformantVaryingStructFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantVaryingStructFree,"NdrConformantVaryingStructFree");
   procedure NdrComplexStructFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrComplexStructFree,"NdrComplexStructFree");
   procedure NdrFixedArrayFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrFixedArrayFree,"NdrFixedArrayFree");
   procedure NdrConformantArrayFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantArrayFree,"NdrConformantArrayFree");
   procedure NdrConformantVaryingArrayFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConformantVaryingArrayFree,"NdrConformantVaryingArrayFree");
   procedure NdrVaryingArrayFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrVaryingArrayFree,"NdrVaryingArrayFree");
   procedure NdrComplexArrayFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrComplexArrayFree,"NdrComplexArrayFree");
   procedure NdrEncapsulatedUnionFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrEncapsulatedUnionFree,"NdrEncapsulatedUnionFree");
   procedure NdrNonEncapsulatedUnionFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrNonEncapsulatedUnionFree,"NdrNonEncapsulatedUnionFree");
   procedure NdrByteCountPointerFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrByteCountPointerFree,"NdrByteCountPointerFree");
   procedure NdrXmitOrRepAsFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrXmitOrRepAsFree,"NdrXmitOrRepAsFree");
   procedure NdrUserMarshalFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrUserMarshalFree,"NdrUserMarshalFree");
   procedure NdrInterfacePointerFree(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Interfaces.C.unsigned_char;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrInterfacePointerFree,"NdrInterfacePointerFree");
   procedure NdrConvert2(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING;
      NumberParams : Interfaces.C.Long
   );
   pragma import (C,NdrConvert2,"NdrConvert2");
   procedure NdrConvert(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrConvert,"NdrConvert");
   procedure NdrClientInitializeNew(
      pRpcMsg : PRPC_MESSAGE;
      pStubMsg : PMIDL_STUB_MESSAGE;
      pStubDescriptor : PMIDL_STUB_DESC;
      ProcNum : Interfaces.C.unsigned
   );
   pragma import (C,NdrClientInitializeNew,"NdrClientInitializeNew");
   procedure NdrServerInitializePartial(
      pRpcMsg : PRPC_MESSAGE;
      pStubMsg : PMIDL_STUB_MESSAGE;
      pStubDescriptor : PMIDL_STUB_DESC;
      RequestedBufferSize : Interfaces.C.unsigned_long
   );
   pragma import (C,NdrServerInitializePartial,"NdrServerInitializePartial");
   procedure NdrClientInitialize(
      pRpcMsg : PRPC_MESSAGE;
      pStubMsg : PMIDL_STUB_MESSAGE;
      pStubDescriptor : PMIDL_STUB_DESC;
      ProcNum : Interfaces.C.unsigned
   );
   pragma import (C,NdrClientInitialize,"NdrClientInitialize");
   procedure NdrServerInitializeMarshall(
      pRpcMsg : PRPC_MESSAGE;
      pStubMsg : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrServerInitializeMarshall,"NdrServerInitializeMarshall");
   procedure NdrFreeBuffer(
      pStubMsg : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrFreeBuffer,"NdrFreeBuffer");
   function NdrGetDcomProtocolVersion(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pVersion : access RPC_VERSION
   ) return HRESULT;
   pragma import (C,NdrGetDcomProtocolVersion,"NdrGetDcomProtocolVersion");
   -- NdrClientCall2(...); -- variadic function not supported
   -- NdrClientCall(...); -- variadic function not supported
   -- NdrAsyncClientCall(...); -- variadic function not supported
   -- NdrDcomAsyncClientCall(...); -- variadic function not supported
   type STUB_PHASE is (
      STUB_UNMARSHAL,
      STUB_CALL_SERVER,
      STUB_MARSHAL,
      STUB_CALL_SERVER_NO_HRESULT
   );
   for STUB_PHASE use (
      STUB_UNMARSHAL => 0,
      STUB_CALL_SERVER => 1,
      STUB_MARSHAL => 2,
      STUB_CALL_SERVER_NO_HRESULT => 3
   );
   for STUB_PHASE'Size use 32;
   type PROXY_PHASE is (
      PROXY_CALCSIZE,
      PROXY_GETBUFFER,
      PROXY_MARSHAL,
      PROXY_SENDRECEIVE,
      PROXY_UNMARSHAL
   );
   for PROXY_PHASE use (
      PROXY_CALCSIZE => 0,
      PROXY_GETBUFFER => 1,
      PROXY_MARSHAL => 2,
      PROXY_SENDRECEIVE => 3,
      PROXY_UNMARSHAL => 4
   );
   for PROXY_PHASE'Size use 32;
   type IRpcStubBuffer; -- Forward Declaration
   procedure NdrAsyncServerCall(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,NdrAsyncServerCall,"NdrAsyncServerCall");
   function NdrAsyncStubCall(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,NdrAsyncStubCall,"NdrAsyncStubCall");
   function NdrDcomAsyncStubCall(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,NdrDcomAsyncStubCall,"NdrDcomAsyncStubCall");
   function NdrStubCall2(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,NdrStubCall2,"NdrStubCall2");
   procedure NdrServerCall2(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,NdrServerCall2,"NdrServerCall2");
   function NdrStubCall(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,NdrStubCall,"NdrStubCall");
   procedure NdrServerCall(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,NdrServerCall,"NdrServerCall");
   function NdrServerUnmarshall(
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pStubMsg : PMIDL_STUB_MESSAGE;
      pStubDescriptor : PMIDL_STUB_DESC;
      pFormat : PFORMAT_STRING;
      pParamList : access Void
   ) return Interfaces.C.Int;
   pragma import (C,NdrServerUnmarshall,"NdrServerUnmarshall");
   procedure NdrServerMarshall(
      pThis : access Void;
      pChannel : access Void;
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrServerMarshall,"NdrServerMarshall");
   function NdrMapCommAndFaultStatus(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pCommStatus : access Interfaces.C.unsigned_long;
      pFaultStatus : access Interfaces.C.unsigned_long;
      Status : RPC_STATUS
   ) return RPC_STATUS;
   pragma import (C,NdrMapCommAndFaultStatus,"NdrMapCommAndFaultStatus");
   type RPC_SS_THREAD_HANDLE is access Void; -- CXType_Pointer - CXType_Void
   subtype RPC_CLIENT_ALLOC is System.Address; -- [FIXME - CXType_FunctionProto] void *(size_t)
   subtype RPC_CLIENT_FREE is System.Address; -- [FIXME - CXType_FunctionProto] void (void *)
   procedure RpcSsAllocate(
      Size_x : size_t
   );
   pragma import (C,RpcSsAllocate,"RpcSsAllocate");
   procedure RpcSsDisableAllocate;
   pragma import (C,RpcSsDisableAllocate,"RpcSsDisableAllocate");
   procedure RpcSsEnableAllocate;
   pragma import (C,RpcSsEnableAllocate,"RpcSsEnableAllocate");
   procedure RpcSsFree(
      NodeToFree : access Void
   );
   pragma import (C,RpcSsFree,"RpcSsFree");
   function RpcSsGetThreadHandle return RPC_SS_THREAD_HANDLE;
   pragma import (C,RpcSsGetThreadHandle,"RpcSsGetThreadHandle");
   procedure RpcSsSetClientAllocFree(
      ClientAlloc : access Void;
      ClientFree : access Void
   );
   pragma import (C,RpcSsSetClientAllocFree,"RpcSsSetClientAllocFree");
   procedure RpcSsSetThreadHandle(
      Id : RPC_SS_THREAD_HANDLE
   );
   pragma import (C,RpcSsSetThreadHandle,"RpcSsSetThreadHandle");
   procedure RpcSsSwapClientAllocFree(
      ClientAlloc : access Void;
      ClientFree : access Void;
      OldClientAlloc : access LPVOID;
      OldClientFree : access LPVOID
   );
   pragma import (C,RpcSsSwapClientAllocFree,"RpcSsSwapClientAllocFree");
   procedure RpcSmAllocate(
      Size_x : size_t;
      pStatus : access RPC_STATUS
   );
   pragma import (C,RpcSmAllocate,"RpcSmAllocate");
   function RpcSmClientFree(
      pNodeToFree : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcSmClientFree,"RpcSmClientFree");
   function RpcSmDestroyClientContext(
      ContextHandle : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,RpcSmDestroyClientContext,"RpcSmDestroyClientContext");
   function RpcSmDisableAllocate return RPC_STATUS;
   pragma import (C,RpcSmDisableAllocate,"RpcSmDisableAllocate");
   function RpcSmEnableAllocate return RPC_STATUS;
   pragma import (C,RpcSmEnableAllocate,"RpcSmEnableAllocate");
   function RpcSmFree(
      NodeToFree : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcSmFree,"RpcSmFree");
   function RpcSmGetThreadHandle(
      pStatus : access RPC_STATUS
   ) return RPC_SS_THREAD_HANDLE;
   pragma import (C,RpcSmGetThreadHandle,"RpcSmGetThreadHandle");
   function RpcSmSetClientAllocFree(
      ClientAlloc : access Void;
      ClientFree : access Void
   ) return RPC_STATUS;
   pragma import (C,RpcSmSetClientAllocFree,"RpcSmSetClientAllocFree");
   function RpcSmSetThreadHandle(
      Id : RPC_SS_THREAD_HANDLE
   ) return RPC_STATUS;
   pragma import (C,RpcSmSetThreadHandle,"RpcSmSetThreadHandle");
   function RpcSmSwapClientAllocFree(
      ClientAlloc : access Void;
      ClientFree : access Void;
      OldClientAlloc : access LPVOID;
      OldClientFree : access LPVOID
   ) return RPC_STATUS;
   pragma import (C,RpcSmSwapClientAllocFree,"RpcSmSwapClientAllocFree");
   procedure NdrRpcSsEnableAllocate(
      pMessage : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrRpcSsEnableAllocate,"NdrRpcSsEnableAllocate");
   procedure NdrRpcSsDisableAllocate(
      pMessage : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrRpcSsDisableAllocate,"NdrRpcSsDisableAllocate");
   procedure NdrRpcSmSetClientToOsf(
      pMessage : PMIDL_STUB_MESSAGE
   );
   pragma import (C,NdrRpcSmSetClientToOsf,"NdrRpcSmSetClientToOsf");
   procedure NdrRpcSmClientAllocate(
      Size_x : size_t
   );
   pragma import (C,NdrRpcSmClientAllocate,"NdrRpcSmClientAllocate");
   procedure NdrRpcSmClientFree(
      NodeToFree : access Void
   );
   pragma import (C,NdrRpcSmClientFree,"NdrRpcSmClientFree");
   procedure NdrRpcSsDefaultAllocate(
      Size_x : size_t
   );
   pragma import (C,NdrRpcSsDefaultAllocate,"NdrRpcSsDefaultAllocate");
   procedure NdrRpcSsDefaultFree(
      NodeToFree : access Void
   );
   pragma import (C,NdrRpcSsDefaultFree,"NdrRpcSsDefaultFree");
   function NdrFullPointerXlatInit(
      NumberOfPointers : Interfaces.C.unsigned_long;
      XlatSide : XLAT_SIDE
   ) return PFULL_PTR_XLAT_TABLES;
   pragma import (C,NdrFullPointerXlatInit,"NdrFullPointerXlatInit");
   procedure NdrFullPointerXlatFree(
      pXlatTables : PFULL_PTR_XLAT_TABLES
   );
   pragma import (C,NdrFullPointerXlatFree,"NdrFullPointerXlatFree");
   procedure NdrAllocate(
      pStubMsg : PMIDL_STUB_MESSAGE;
      Len : size_t
   );
   pragma import (C,NdrAllocate,"NdrAllocate");
   procedure NdrClearOutParameters(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pFormat : PFORMAT_STRING;
      ArgAddr : access Void
   );
   pragma import (C,NdrClearOutParameters,"NdrClearOutParameters");
   procedure NdrOleAllocate(
      Size_x : size_t
   );
   pragma import (C,NdrOleAllocate,"NdrOleAllocate");
   procedure NdrOleFree(
      NodeToFree : access Void
   );
   pragma import (C,NdrOleFree,"NdrOleFree");
   type NDR_USER_MARSHAL_INFO_LEVEL1_x is record
      Buffer : access Void;
      BufferSize : Interfaces.C.unsigned_long;
      pfnAllocate : access System.Address;
      pfnFree : access System.Address;
      pRpcChannelBuffer : access Void;
      Reserved : Void;
   end record;
   subtype NDR_USER_MARSHAL_INFO_LEVEL1 is NDR_USER_MARSHAL_INFO_LEVEL1_x; -- CXType_Elaborated
   type NDR_USER_MARSHAL_INFO_x is record
      InformationLevel : Interfaces.C.unsigned_long;
   end record;
   subtype NDR_USER_MARSHAL_INFO is NDR_USER_MARSHAL_INFO_x; -- CXType_Elaborated
   function NdrGetUserMarshalInfo(
      pFlags : access Interfaces.C.unsigned_long;
      InformationLevel : Interfaces.C.unsigned_long;
      pMarshalInfo : access NDR_USER_MARSHAL_INFO
   ) return RPC_STATUS;
   pragma import (C,NdrGetUserMarshalInfo,"NdrGetUserMarshalInfo");
   function NdrCreateServerInterfaceFromStub(
      pStub : access Void;
      pServerIf : access RPC_SERVER_INTERFACE
   ) return RPC_STATUS;
   pragma import (C,NdrCreateServerInterfaceFromStub,"NdrCreateServerInterfaceFromStub");
   -- NdrClientCall3(...); -- variadic function not supported
   -- Ndr64AsyncClientCall(...); -- variadic function not supported
   -- Ndr64DcomAsyncClientCall(...); -- variadic function not supported
   procedure Ndr64AsyncServerCall(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,Ndr64AsyncServerCall,"Ndr64AsyncServerCall");
   procedure Ndr64AsyncServerCall64(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,Ndr64AsyncServerCall64,"Ndr64AsyncServerCall64");
   procedure Ndr64AsyncServerCallAll(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,Ndr64AsyncServerCallAll,"Ndr64AsyncServerCallAll");
   function Ndr64AsyncStubCall(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,Ndr64AsyncStubCall,"Ndr64AsyncStubCall");
   function Ndr64DcomAsyncStubCall(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,Ndr64DcomAsyncStubCall,"Ndr64DcomAsyncStubCall");
   function NdrStubCall3(
      pThis : access Void;
      pChannel : access Void;
      pRpcMsg : PRPC_MESSAGE;
      pdwStubPhase : access Interfaces.C.unsigned_long
   ) return Interfaces.C.Long;
   pragma import (C,NdrStubCall3,"NdrStubCall3");
   procedure NdrServerCallAll(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,NdrServerCallAll,"NdrServerCallAll");
   procedure NdrServerCallNdr64(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,NdrServerCallNdr64,"NdrServerCallNdr64");
   procedure NdrServerCall3(
      pRpcMsg : PRPC_MESSAGE
   );
   pragma import (C,NdrServerCall3,"NdrServerCall3");
   procedure NdrPartialIgnoreClientMarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Void
   );
   pragma import (C,NdrPartialIgnoreClientMarshall,"NdrPartialIgnoreClientMarshall");
   procedure NdrPartialIgnoreServerUnmarshall(
      pStubMsg : PMIDL_STUB_MESSAGE;
      ppMemory : access LPVOID
   );
   pragma import (C,NdrPartialIgnoreServerUnmarshall,"NdrPartialIgnoreServerUnmarshall");
   procedure NdrPartialIgnoreClientBufferSize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      pMemory : access Void
   );
   pragma import (C,NdrPartialIgnoreClientBufferSize,"NdrPartialIgnoreClientBufferSize");
   procedure NdrPartialIgnoreServerInitialize(
      pStubMsg : PMIDL_STUB_MESSAGE;
      ppMemory : access LPVOID;
      pFormat : PFORMAT_STRING
   );
   pragma import (C,NdrPartialIgnoreServerInitialize,"NdrPartialIgnoreServerInitialize");
   procedure RpcUserFree(
      AsyncHandle : handle_t;
      pBuffer : access Void
   );
   pragma import (C,RpcUserFree,"RpcUserFree");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\wtypesbase.h>
   subtype OLECHAR is WCHAR; -- CXType_Typedef
   type LPOLESTR is access OLECHAR; -- CXType_Pointer - CXType_Typedef
   type LPCOLESTR is access constant OLECHAR; -- CXType_Pointer - CXType_Typedef
   subtype DOUBLE is Long_Float; -- CXType_Double
   type COAUTHIDENTITY_x is record
      User : access USHORT;
      UserLength : ULONG;
      Domain : access USHORT;
      DomainLength : ULONG;
      Password : access USHORT;
      PasswordLength : ULONG;
      Flags : ULONG;
   end record;
   subtype COAUTHIDENTITY is COAUTHIDENTITY_x; -- CXType_Elaborated
   type COAUTHINFO_x is record
      dwAuthnSvc : DWORD;
      dwAuthzSvc : DWORD;
      pwszServerPrincName : LPWSTR;
      dwAuthnLevel : DWORD;
      dwImpersonationLevel : DWORD;
      pAuthIdentityData : access COAUTHIDENTITY;
      dwCapabilities : DWORD;
   end record;
   subtype COAUTHINFO is COAUTHINFO_x; -- CXType_Elaborated
   subtype SCODE is LONG; -- CXType_Typedef
   type PSCODE is access SCODE; -- CXType_Pointer - CXType_Typedef
   type tagMEMCTX is (
      MEMCTX_SAME,
      MEMCTX_UNKNOWN,
      MEMCTX_TASK,
      MEMCTX_SHARED,
      MEMCTX_MACSYSTEM
   );
   for tagMEMCTX use (
      MEMCTX_SAME => -2,
      MEMCTX_UNKNOWN => -1,
      MEMCTX_TASK => 1,
      MEMCTX_SHARED => 2,
      MEMCTX_MACSYSTEM => 3
   );
   for tagMEMCTX'Size use 32;
   subtype MEMCTX is tagMEMCTX; -- CXType_Elaborated
   type tagCLSCTX is (
      CLSCTX_PS_DLL,
      CLSCTX_INPROC_SERVER,
      CLSCTX_INPROC_HANDLER,
      CLSCTX_LOCAL_SERVER,
      CLSCTX_INPROC_SERVER16,
      CLSCTX_REMOTE_SERVER,
      CLSCTX_INPROC_HANDLER16,
      CLSCTX_RESERVED1,
      CLSCTX_RESERVED2,
      CLSCTX_RESERVED3,
      CLSCTX_RESERVED4,
      CLSCTX_NO_CODE_DOWNLOAD,
      CLSCTX_RESERVED5,
      CLSCTX_NO_CUSTOM_MARSHAL,
      CLSCTX_ENABLE_CODE_DOWNLOAD,
      CLSCTX_NO_FAILURE_LOG,
      CLSCTX_DISABLE_AAA,
      CLSCTX_ENABLE_AAA,
      CLSCTX_FROM_DEFAULT_CONTEXT,
      CLSCTX_ACTIVATE_X86_SERVER,
      CLSCTX_ACTIVATE_64_BIT_SERVER,
      CLSCTX_ENABLE_CLOAKING,
      CLSCTX_APPCONTAINER,
      CLSCTX_ACTIVATE_AAA_AS_IU,
      CLSCTX_RESERVED6,
      CLSCTX_ACTIVATE_ARM32_SERVER
   );
   for tagCLSCTX use (
      CLSCTX_PS_DLL => -2147483648,
      CLSCTX_INPROC_SERVER => 1,
      CLSCTX_INPROC_HANDLER => 2,
      CLSCTX_LOCAL_SERVER => 4,
      CLSCTX_INPROC_SERVER16 => 8,
      CLSCTX_REMOTE_SERVER => 16,
      CLSCTX_INPROC_HANDLER16 => 32,
      CLSCTX_RESERVED1 => 64,
      CLSCTX_RESERVED2 => 128,
      CLSCTX_RESERVED3 => 256,
      CLSCTX_RESERVED4 => 512,
      CLSCTX_NO_CODE_DOWNLOAD => 1024,
      CLSCTX_RESERVED5 => 2048,
      CLSCTX_NO_CUSTOM_MARSHAL => 4096,
      CLSCTX_ENABLE_CODE_DOWNLOAD => 8192,
      CLSCTX_NO_FAILURE_LOG => 16384,
      CLSCTX_DISABLE_AAA => 32768,
      CLSCTX_ENABLE_AAA => 65536,
      CLSCTX_FROM_DEFAULT_CONTEXT => 131072,
      CLSCTX_ACTIVATE_X86_SERVER => 262144,
      CLSCTX_ACTIVATE_64_BIT_SERVER => 524288,
      CLSCTX_ENABLE_CLOAKING => 1048576,
      CLSCTX_APPCONTAINER => 4194304,
      CLSCTX_ACTIVATE_AAA_AS_IU => 8388608,
      CLSCTX_RESERVED6 => 16777216,
      CLSCTX_ACTIVATE_ARM32_SERVER => 33554432
   );
   for tagCLSCTX'Size use 32;
   subtype CLSCTX is tagCLSCTX; -- CXType_Elaborated
   type tagMSHLFLAGS is (
      MSHLFLAGS_NORMAL,
      MSHLFLAGS_TABLESTRONG,
      MSHLFLAGS_TABLEWEAK,
      MSHLFLAGS_NOPING,
      MSHLFLAGS_RESERVED1,
      MSHLFLAGS_RESERVED2,
      MSHLFLAGS_RESERVED3,
      MSHLFLAGS_RESERVED4
   );
   for tagMSHLFLAGS use (
      MSHLFLAGS_NORMAL => 0,
      MSHLFLAGS_TABLESTRONG => 1,
      MSHLFLAGS_TABLEWEAK => 2,
      MSHLFLAGS_NOPING => 4,
      MSHLFLAGS_RESERVED1 => 8,
      MSHLFLAGS_RESERVED2 => 16,
      MSHLFLAGS_RESERVED3 => 32,
      MSHLFLAGS_RESERVED4 => 64
   );
   for tagMSHLFLAGS'Size use 32;
   subtype MSHLFLAGS is tagMSHLFLAGS; -- CXType_Elaborated
   type tagMSHCTX is (
      MSHCTX_LOCAL,
      MSHCTX_NOSHAREDMEM,
      MSHCTX_DIFFERENTMACHINE,
      MSHCTX_INPROC,
      MSHCTX_CROSSCTX,
      MSHCTX_RESERVED1
   );
   for tagMSHCTX use (
      MSHCTX_LOCAL => 0,
      MSHCTX_NOSHAREDMEM => 1,
      MSHCTX_DIFFERENTMACHINE => 2,
      MSHCTX_INPROC => 3,
      MSHCTX_CROSSCTX => 4,
      MSHCTX_RESERVED1 => 5
   );
   for tagMSHCTX'Size use 32;
   subtype MSHCTX is tagMSHCTX; -- CXType_Elaborated
   type BYTE_BLOB_x is record
      clSize : ULONG;
      abData : Void;
   end record;
   subtype BYTE_BLOB is BYTE_BLOB_x; -- CXType_Elaborated
   type UP_BYTE_BLOB is access BYTE_BLOB; -- CXType_Pointer - CXType_Typedef
   type WORD_BLOB_x is record
      clSize : ULONG;
      asData : Void;
   end record;
   subtype WORD_BLOB is WORD_BLOB_x; -- CXType_Elaborated
   type UP_WORD_BLOB is access WORD_BLOB; -- CXType_Pointer - CXType_Typedef
   type DWORD_BLOB_x is record
      clSize : ULONG;
      alData : Void;
   end record;
   subtype DWORD_BLOB is DWORD_BLOB_x; -- CXType_Elaborated
   type UP_DWORD_BLOB is access DWORD_BLOB; -- CXType_Pointer - CXType_Typedef
   type FLAGGED_BYTE_BLOB_x is record
      fFlags : ULONG;
      clSize : ULONG;
      abData : Void;
   end record;
   subtype FLAGGED_BYTE_BLOB is FLAGGED_BYTE_BLOB_x; -- CXType_Elaborated
   type UP_FLAGGED_BYTE_BLOB is access FLAGGED_BYTE_BLOB; -- CXType_Pointer - CXType_Typedef
   type FLAGGED_WORD_BLOB_x is record
      fFlags : ULONG;
      clSize : ULONG;
      asData : Void;
   end record;
   subtype FLAGGED_WORD_BLOB is FLAGGED_WORD_BLOB_x; -- CXType_Elaborated
   type UP_FLAGGED_WORD_BLOB is access FLAGGED_WORD_BLOB; -- CXType_Pointer - CXType_Typedef
   type BYTE_SIZEDARR_x is record
      clSize : ULONG;
      pData : access byte;
   end record;
   subtype BYTE_SIZEDARR is BYTE_SIZEDARR_x; -- CXType_Elaborated
   type SHORT_SIZEDARR_x is record
      clSize : ULONG;
      pData : access Interfaces.C.unsigned_short;
   end record;
   subtype WORD_SIZEDARR is SHORT_SIZEDARR_x; -- CXType_Elaborated
   type LONG_SIZEDARR_x is record
      clSize : ULONG;
      pData : access ULONG;
   end record;
   subtype DWORD_SIZEDARR is LONG_SIZEDARR_x; -- CXType_Elaborated
   type HYPER_SIZEDARR_x is record
      clSize : ULONG;
      pData : access Interfaces.C.Extensions.long_long;
   end record;
   subtype HYPER_SIZEDARR is HYPER_SIZEDARR_x; -- CXType_Elaborated
   type tagBLOB is record
      cbSize : ULONG;
      pBlobData : access BYTE;
   end record;
   subtype BLOB is tagBLOB; -- CXType_Elaborated
   type LPBLOB is access tagBLOB; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\wtypes.h>
   type tagRemHGLOBAL is record
      fNullHGlobal : LONG;
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemHGLOBAL is tagRemHGLOBAL; -- CXType_Elaborated
   type tagRemHMETAFILEPICT is record
      mm : LONG;
      xExt : LONG;
      yExt : LONG;
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemHMETAFILEPICT is tagRemHMETAFILEPICT; -- CXType_Elaborated
   type tagRemHENHMETAFILE is record
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemHENHMETAFILE is tagRemHENHMETAFILE; -- CXType_Elaborated
   type tagRemHBITMAP is record
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemHBITMAP is tagRemHBITMAP; -- CXType_Elaborated
   type tagRemHPALETTE is record
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemHPALETTE is tagRemHPALETTE; -- CXType_Elaborated
   type tagRemBRUSH is record
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemHBRUSH is tagRemBRUSH; -- CXType_Elaborated
   type tagDVASPECT is (
      DVASPECT_CONTENT,
      DVASPECT_THUMBNAIL,
      DVASPECT_ICON,
      DVASPECT_DOCPRINT
   );
   for tagDVASPECT use (
      DVASPECT_CONTENT => 1,
      DVASPECT_THUMBNAIL => 2,
      DVASPECT_ICON => 4,
      DVASPECT_DOCPRINT => 8
   );
   for tagDVASPECT'Size use 32;
   subtype DVASPECT is tagDVASPECT; -- CXType_Elaborated
   type tagSTGC is (
      STGC_DEFAULT,
      STGC_OVERWRITE,
      STGC_ONLYIFCURRENT,
      STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE,
      STGC_CONSOLIDATE
   );
   for tagSTGC use (
      STGC_DEFAULT => 0,
      STGC_OVERWRITE => 1,
      STGC_ONLYIFCURRENT => 2,
      STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE => 4,
      STGC_CONSOLIDATE => 8
   );
   for tagSTGC'Size use 32;
   subtype STGC is tagSTGC; -- CXType_Elaborated
   type tagSTGMOVE is (
      STGMOVE_MOVE,
      STGMOVE_COPY,
      STGMOVE_SHALLOWCOPY
   );
   for tagSTGMOVE use (
      STGMOVE_MOVE => 0,
      STGMOVE_COPY => 1,
      STGMOVE_SHALLOWCOPY => 2
   );
   for tagSTGMOVE'Size use 32;
   subtype STGMOVE is tagSTGMOVE; -- CXType_Elaborated
   type tagSTATFLAG is (
      STATFLAG_DEFAULT,
      STATFLAG_NONAME,
      STATFLAG_NOOPEN
   );
   for tagSTATFLAG use (
      STATFLAG_DEFAULT => 0,
      STATFLAG_NONAME => 1,
      STATFLAG_NOOPEN => 2
   );
   for tagSTATFLAG'Size use 32;
   subtype STATFLAG is tagSTATFLAG; -- CXType_Elaborated
   type HCONTEXT is access Void; -- CXType_Pointer - CXType_Void
   type userCLIPFORMAT_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0001_x is null record; -- Union Placeholder [FIXME]
   subtype userCLIPFORMAT is userCLIPFORMAT_x; -- CXType_Elaborated
   type wireCLIPFORMAT is access userCLIPFORMAT; -- CXType_Pointer - CXType_Typedef
   subtype CLIPFORMAT is WORD; -- CXType_Typedef
   type GDI_NONREMOTE_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0002_x is null record; -- Union Placeholder [FIXME]
   subtype GDI_NONREMOTE is GDI_NONREMOTE_x; -- CXType_Elaborated
   type userHGLOBAL_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0003_x is null record; -- Union Placeholder [FIXME]
   subtype userHGLOBAL is userHGLOBAL_x; -- CXType_Elaborated
   type wireHGLOBAL is access userHGLOBAL; -- CXType_Pointer - CXType_Typedef
   type userHMETAFILE_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0004_x is null record; -- Union Placeholder [FIXME]
   subtype userHMETAFILE is userHMETAFILE_x; -- CXType_Elaborated
   type remoteMETAFILEPICT_x is record
      mm : LONG;
      xExt : LONG;
      yExt : LONG;
      hMF : access userHMETAFILE;
   end record;
   subtype remoteMETAFILEPICT is remoteMETAFILEPICT_x; -- CXType_Elaborated
   type userHMETAFILEPICT_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0005_x is null record; -- Union Placeholder [FIXME]
   subtype userHMETAFILEPICT is userHMETAFILEPICT_x; -- CXType_Elaborated
   type userHENHMETAFILE_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0006_x is null record; -- Union Placeholder [FIXME]
   subtype userHENHMETAFILE is userHENHMETAFILE_x; -- CXType_Elaborated
   type userBITMAP_x is record
      bmType : LONG;
      bmWidth : LONG;
      bmHeight : LONG;
      bmWidthBytes : LONG;
      bmPlanes : WORD;
      bmBitsPixel : WORD;
      cbSize : ULONG;
      pBuffer : Void;
   end record;
   subtype userBITMAP is userBITMAP_x; -- CXType_Elaborated
   type userHBITMAP_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0007_x is null record; -- Union Placeholder [FIXME]
   subtype userHBITMAP is userHBITMAP_x; -- CXType_Elaborated
   type userHPALETTE_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0008_x is null record; -- Union Placeholder [FIXME]
   subtype userHPALETTE is userHPALETTE_x; -- CXType_Elaborated
   type RemotableHandle_x is record
      fContext : LONG;
      u : Void;
   end record;
   type MIDL_IWinTypes_0009_x is null record; -- Union Placeholder [FIXME]
   subtype RemotableHandle is RemotableHandle_x; -- CXType_Elaborated
   type wireHWND is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHMENU is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHACCEL is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHBRUSH is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHFONT is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHDC is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHICON is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHRGN is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHMONITOR is access RemotableHandle; -- CXType_Pointer - CXType_Typedef
   type wireHBITMAP is access userHBITMAP; -- CXType_Pointer - CXType_Typedef
   type wireHPALETTE is access userHPALETTE; -- CXType_Pointer - CXType_Typedef
   type wireHENHMETAFILE is access userHENHMETAFILE; -- CXType_Pointer - CXType_Typedef
   type wireHMETAFILE is access userHMETAFILE; -- CXType_Pointer - CXType_Typedef
   type wireHMETAFILEPICT is access userHMETAFILEPICT; -- CXType_Pointer - CXType_Typedef
   type HMETAFILEPICT is access Void; -- CXType_Pointer - CXType_Void
   subtype DATE is Long_Float; -- CXType_Double
   type tagCY is null record; -- Union Placeholder [FIXME]
   subtype CY is tagCY; -- CXType_Elaborated
   type LPCY is access CY; -- CXType_Pointer - CXType_Typedef
   type tagDEC is record
      wReserved : USHORT;
      Hi32 : ULONG;
   end record;
   subtype DECIMAL is tagDEC; -- CXType_Elaborated
   type LPDECIMAL is access DECIMAL; -- CXType_Pointer - CXType_Typedef
   type wireBSTR is access FLAGGED_WORD_BLOB; -- CXType_Pointer - CXType_Typedef
   type BSTR is access OLECHAR; -- CXType_Pointer - CXType_Typedef
   type LPBSTR is access BSTR; -- CXType_Pointer - CXType_Typedef
   subtype VARIANT_BOOL is Interfaces.C.Short; -- CXType_Short
   type tagBSTRBLOB is record
      cbSize : ULONG;
      pData : access BYTE;
   end record;
   subtype BSTRBLOB is tagBSTRBLOB; -- CXType_Elaborated
   type LPBSTRBLOB is access tagBSTRBLOB; -- CXType_Pointer - CXType_Elaborated
   type tagCLIPDATA is record
      cbSize : ULONG;
      ulClipFmt : LONG;
      pClipData : access BYTE;
   end record;
   subtype CLIPDATA is tagCLIPDATA; -- CXType_Elaborated
   subtype VARTYPE is Interfaces.C.unsigned_short; -- CXType_UShort
   type VARENUM is (
      VT_EMPTY,
      VT_NULL,
      VT_I2,
      VT_I4,
      VT_R4,
      VT_R8,
      VT_CY,
      VT_DATE,
      VT_BSTR,
      VT_DISPATCH,
      VT_ERROR,
      VT_BOOL,
      VT_VARIANT,
      VT_UNKNOWN,
      VT_DECIMAL,
      VT_I1,
      VT_UI1,
      VT_UI2,
      VT_UI4,
      VT_I8,
      VT_UI8,
      VT_INT,
      VT_UINT,
      VT_VOID,
      VT_HRESULT,
      VT_PTR,
      VT_SAFEARRAY,
      VT_CARRAY,
      VT_USERDEFINED,
      VT_LPSTR,
      VT_LPWSTR,
      VT_RECORD,
      VT_INT_PTR,
      VT_UINT_PTR,
      VT_FILETIME,
      VT_BLOB,
      VT_STREAM,
      VT_STORAGE,
      VT_STREAMED_OBJECT,
      VT_STORED_OBJECT,
      VT_BLOB_OBJECT,
      VT_CF,
      VT_CLSID,
      VT_VERSIONED_STREAM,
      VT_BSTR_BLOB,
      VT_VECTOR,
      VT_ARRAY,
      VT_BYREF,
      VT_RESERVED,
      VT_ILLEGAL
   );
   for VARENUM use (
      VT_EMPTY => 0,
      VT_NULL => 1,
      VT_I2 => 2,
      VT_I4 => 3,
      VT_R4 => 4,
      VT_R8 => 5,
      VT_CY => 6,
      VT_DATE => 7,
      VT_BSTR => 8,
      VT_DISPATCH => 9,
      VT_ERROR => 10,
      VT_BOOL => 11,
      VT_VARIANT => 12,
      VT_UNKNOWN => 13,
      VT_DECIMAL => 14,
      VT_I1 => 16,
      VT_UI1 => 17,
      VT_UI2 => 18,
      VT_UI4 => 19,
      VT_I8 => 20,
      VT_UI8 => 21,
      VT_INT => 22,
      VT_UINT => 23,
      VT_VOID => 24,
      VT_HRESULT => 25,
      VT_PTR => 26,
      VT_SAFEARRAY => 27,
      VT_CARRAY => 28,
      VT_USERDEFINED => 29,
      VT_LPSTR => 30,
      VT_LPWSTR => 31,
      VT_RECORD => 36,
      VT_INT_PTR => 37,
      VT_UINT_PTR => 38,
      VT_FILETIME => 64,
      VT_BLOB => 65,
      VT_STREAM => 66,
      VT_STORAGE => 67,
      VT_STREAMED_OBJECT => 68,
      VT_STORED_OBJECT => 69,
      VT_BLOB_OBJECT => 70,
      VT_CF => 71,
      VT_CLSID => 72,
      VT_VERSIONED_STREAM => 73,
      VT_BSTR_BLOB => 4095,
      VT_VECTOR => 4096,
      VT_ARRAY => 8192,
      VT_BYREF => 16384,
      VT_RESERVED => 32768,
      VT_ILLEGAL => 65535
   );
   for VARENUM'Size use 32;
   subtype PROPID is ULONG; -- CXType_Typedef
   type tagpropertykey_x is record
      fmtid_x : GUID;
      pid : DWORD;
   end record;
   subtype PROPERTYKEY is tagpropertykey_x; -- CXType_Elaborated
   type tagCSPLATFORM is record
      dwPlatformId : DWORD;
      dwVersionHi : DWORD;
      dwVersionLo : DWORD;
      dwProcessorArch : DWORD;
   end record;
   subtype CSPLATFORM is tagCSPLATFORM; -- CXType_Elaborated
   type tagQUERYCONTEXT is record
      dwContext : DWORD;
      Platform : CSPLATFORM;
      Locale : LCID;
      dwVersionHi : DWORD;
      dwVersionLo : DWORD;
   end record;
   subtype QUERYCONTEXT is tagQUERYCONTEXT; -- CXType_Elaborated
   type tagTYSPEC is (
      TYSPEC_CLSID,
      TYSPEC_FILEEXT,
      TYSPEC_MIMETYPE,
      TYSPEC_FILENAME,
      TYSPEC_PROGID,
      TYSPEC_PACKAGENAME,
      TYSPEC_OBJECTID
   );
   for tagTYSPEC use (
      TYSPEC_CLSID => 0,
      TYSPEC_FILEEXT => 1,
      TYSPEC_MIMETYPE => 2,
      TYSPEC_FILENAME => 3,
      TYSPEC_PROGID => 4,
      TYSPEC_PACKAGENAME => 5,
      TYSPEC_OBJECTID => 6
   );
   for tagTYSPEC'Size use 32;
   subtype TYSPEC is tagTYSPEC; -- CXType_Elaborated
   type MIDL_MIDL_itf_wtypes_0000_0001_0001_x is record
      tyspec_x : DWORD;
      tagged_union : Void;
   end record;
   type MIDL_MIDL_itf_wtypes_0000_0001_0005_x is null record; -- Union Placeholder [FIXME]
   subtype uCLSSPEC is MIDL_MIDL_itf_wtypes_0000_0001_0001_x; -- CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winioctl.h>
   type STORAGE_HOTPLUG_INFO_x is record
      Size_x : DWORD;
      MediaRemovable : BOOLEAN;
      MediaHotplug : BOOLEAN;
      DeviceHotplug : BOOLEAN;
      WriteCacheEnableOverride : BOOLEAN;
   end record;
   subtype STORAGE_HOTPLUG_INFO is STORAGE_HOTPLUG_INFO_x; -- CXType_Elaborated
   type PSTORAGE_HOTPLUG_INFO is access STORAGE_HOTPLUG_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_NUMBER_x is record
      DeviceType : DWORD;
      DeviceNumber : DWORD;
      PartitionNumber : DWORD;
   end record;
   subtype STORAGE_DEVICE_NUMBER is STORAGE_DEVICE_NUMBER_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_NUMBER is access STORAGE_DEVICE_NUMBER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_NUMBERS_x is record
      NumberOfDevices : DWORD;
      Devices : Void;
   end record;
   subtype STORAGE_DEVICE_NUMBERS is STORAGE_DEVICE_NUMBERS_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_NUMBERS is access STORAGE_DEVICE_NUMBERS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_NUMBER_EX_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      DeviceType : DWORD;
      DeviceNumber : DWORD;
      DeviceGuid : GUID;
      PartitionNumber : DWORD;
   end record;
   subtype STORAGE_DEVICE_NUMBER_EX is STORAGE_DEVICE_NUMBER_EX_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_NUMBER_EX is access STORAGE_DEVICE_NUMBER_EX_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_BUS_RESET_REQUEST_x is record
      PathId : BYTE;
   end record;
   subtype STORAGE_BUS_RESET_REQUEST is STORAGE_BUS_RESET_REQUEST_x; -- CXType_Elaborated
   type PSTORAGE_BUS_RESET_REQUEST is access STORAGE_BUS_RESET_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_BREAK_RESERVATION_REQUEST is record
      Length : DWORD;
      unused : BYTE;
      PathId : BYTE;
      TargetId : BYTE;
      Lun : BYTE;
   end record;
   type PSTORAGE_BREAK_RESERVATION_REQUEST is access STORAGE_BREAK_RESERVATION_REQUEST; -- CXType_Pointer - CXType_Elaborated
   type PREVENT_MEDIA_REMOVAL_x is record
      PreventMediaRemoval : BOOLEAN;
   end record;
   subtype PREVENT_MEDIA_REMOVAL is PREVENT_MEDIA_REMOVAL_x; -- CXType_Elaborated
   type PPREVENT_MEDIA_REMOVAL is access PREVENT_MEDIA_REMOVAL_x; -- CXType_Pointer - CXType_Elaborated
   type CLASS_MEDIA_CHANGE_CONTEXT_x is record
      MediaChangeCount : DWORD;
      NewState : DWORD;
   end record;
   subtype CLASS_MEDIA_CHANGE_CONTEXT is CLASS_MEDIA_CHANGE_CONTEXT_x; -- CXType_Elaborated
   type PCLASS_MEDIA_CHANGE_CONTEXT is access CLASS_MEDIA_CHANGE_CONTEXT_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_STATISTICS_x is record
      Version : DWORD;
      Flags : DWORD;
      RecoveredWrites : LARGE_INTEGER;
      UnrecoveredWrites : LARGE_INTEGER;
      RecoveredReads : LARGE_INTEGER;
      UnrecoveredReads : LARGE_INTEGER;
      CompressionRatioReads : BYTE;
      CompressionRatioWrites : BYTE;
   end record;
   subtype TAPE_STATISTICS is TAPE_STATISTICS_x; -- CXType_Elaborated
   type PTAPE_STATISTICS is access TAPE_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type TAPE_GET_STATISTICS_x is record
      Operation : DWORD;
   end record;
   subtype TAPE_GET_STATISTICS is TAPE_GET_STATISTICS_x; -- CXType_Elaborated
   type PTAPE_GET_STATISTICS is access TAPE_GET_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_MEDIA_TYPE_x is (
      DDS_4mm,
      MiniQic,
      Travan,
      QIC,
      MP_8mm,
      AME_8mm,
      AIT1_8mm,
      DLT,
      NCTP,
      IBM_3480,
      IBM_3490E,
      IBM_Magstar_3590,
      IBM_Magstar_MP,
      STK_DATA_D3,
      SONY_DTF,
      DV_6mm,
      DMI,
      SONY_D2,
      CLEANER_CARTRIDGE,
      CD_ROM,
      CD_R,
      CD_RW,
      DVD_ROM,
      DVD_R,
      DVD_RW,
      MO_3_RW,
      MO_5_WO,
      MO_5_RW,
      MO_5_LIMDOW,
      PC_5_WO,
      PC_5_RW,
      PD_5_RW,
      ABL_5_WO,
      PINNACLE_APEX_5_RW,
      SONY_12_WO,
      PHILIPS_12_WO,
      HITACHI_12_WO,
      CYGNET_12_WO,
      KODAK_14_WO,
      MO_NFR_525,
      NIKON_12_RW,
      IOMEGA_ZIP,
      IOMEGA_JAZ,
      SYQUEST_EZ135,
      SYQUEST_EZFLYER,
      SYQUEST_SYJET,
      AVATAR_F2,
      MP2_8mm,
      DST_S,
      DST_M,
      DST_L,
      VXATape_1,
      VXATape_2,
      STK_9840,
      LTO_Ultrium,
      LTO_Accelis,
      DVD_RAM,
      AIT_8mm,
      ADR_1,
      ADR_2,
      STK_9940,
      SAIT,
      VXATape
   );
   for STORAGE_MEDIA_TYPE_x use (
      DDS_4mm => 32,
      MiniQic => 33,
      Travan => 34,
      QIC => 35,
      MP_8mm => 36,
      AME_8mm => 37,
      AIT1_8mm => 38,
      DLT => 39,
      NCTP => 40,
      IBM_3480 => 41,
      IBM_3490E => 42,
      IBM_Magstar_3590 => 43,
      IBM_Magstar_MP => 44,
      STK_DATA_D3 => 45,
      SONY_DTF => 46,
      DV_6mm => 47,
      DMI => 48,
      SONY_D2 => 49,
      CLEANER_CARTRIDGE => 50,
      CD_ROM => 51,
      CD_R => 52,
      CD_RW => 53,
      DVD_ROM => 54,
      DVD_R => 55,
      DVD_RW => 56,
      MO_3_RW => 57,
      MO_5_WO => 58,
      MO_5_RW => 59,
      MO_5_LIMDOW => 60,
      PC_5_WO => 61,
      PC_5_RW => 62,
      PD_5_RW => 63,
      ABL_5_WO => 64,
      PINNACLE_APEX_5_RW => 65,
      SONY_12_WO => 66,
      PHILIPS_12_WO => 67,
      HITACHI_12_WO => 68,
      CYGNET_12_WO => 69,
      KODAK_14_WO => 70,
      MO_NFR_525 => 71,
      NIKON_12_RW => 72,
      IOMEGA_ZIP => 73,
      IOMEGA_JAZ => 74,
      SYQUEST_EZ135 => 75,
      SYQUEST_EZFLYER => 76,
      SYQUEST_SYJET => 77,
      AVATAR_F2 => 78,
      MP2_8mm => 79,
      DST_S => 80,
      DST_M => 81,
      DST_L => 82,
      VXATape_1 => 83,
      VXATape_2 => 84,
      STK_9840 => 85,
      LTO_Ultrium => 86,
      LTO_Accelis => 87,
      DVD_RAM => 88,
      AIT_8mm => 89,
      ADR_1 => 90,
      ADR_2 => 91,
      STK_9940 => 92,
      SAIT => 93,
      VXATape => 94
   );
   for STORAGE_MEDIA_TYPE_x'Size use 32;
   subtype STORAGE_MEDIA_TYPE is STORAGE_MEDIA_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_MEDIA_TYPE is access STORAGE_MEDIA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_BUS_TYPE_x is (
      BusTypeUnknown,
      BusTypeScsi,
      BusTypeAtapi,
      BusTypeAta,
      BusType1394,
      BusTypeSsa,
      BusTypeFibre,
      BusTypeUsb,
      BusTypeRAID,
      BusTypeiScsi,
      BusTypeSas,
      BusTypeSata,
      BusTypeSd,
      BusTypeMmc,
      BusTypeVirtual,
      BusTypeFileBackedVirtual,
      BusTypeSpaces,
      BusTypeNvme,
      BusTypeSCM,
      BusTypeUfs,
      BusTypeMax,
      BusTypeMaxReserved
   );
   for STORAGE_BUS_TYPE_x use (
      BusTypeUnknown => 0,
      BusTypeScsi => 1,
      BusTypeAtapi => 2,
      BusTypeAta => 3,
      BusType1394 => 4,
      BusTypeSsa => 5,
      BusTypeFibre => 6,
      BusTypeUsb => 7,
      BusTypeRAID => 8,
      BusTypeiScsi => 9,
      BusTypeSas => 10,
      BusTypeSata => 11,
      BusTypeSd => 12,
      BusTypeMmc => 13,
      BusTypeVirtual => 14,
      BusTypeFileBackedVirtual => 15,
      BusTypeSpaces => 16,
      BusTypeNvme => 17,
      BusTypeSCM => 18,
      BusTypeUfs => 19,
      BusTypeMax => 20,
      BusTypeMaxReserved => 127
   );
   for STORAGE_BUS_TYPE_x'Size use 32;
   subtype STORAGE_BUS_TYPE is STORAGE_BUS_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_BUS_TYPE is access STORAGE_BUS_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_MEDIA_INFO_x is record
      DeviceSpecific : Void;
   end record;
   subtype DEVICE_MEDIA_INFO is DEVICE_MEDIA_INFO_x; -- CXType_Elaborated
   type PDEVICE_MEDIA_INFO is access DEVICE_MEDIA_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type GET_MEDIA_TYPES_x is record
      DeviceType : DWORD;
      MediaInfoCount : DWORD;
      MediaInfo : Void;
   end record;
   subtype GET_MEDIA_TYPES is GET_MEDIA_TYPES_x; -- CXType_Elaborated
   type PGET_MEDIA_TYPES is access GET_MEDIA_TYPES_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PREDICT_FAILURE_x is record
      PredictFailure : DWORD;
      VendorSpecific : Void;
   end record;
   subtype STORAGE_PREDICT_FAILURE is STORAGE_PREDICT_FAILURE_x; -- CXType_Elaborated
   type PSTORAGE_PREDICT_FAILURE is access STORAGE_PREDICT_FAILURE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_FAILURE_PREDICTION_CONFIG_x is record
      Version : DWORD;
      Size_x : DWORD;
      Set : BOOLEAN;
      Enabled : BOOLEAN;
      Reserved : WORD;
   end record;
   subtype STORAGE_FAILURE_PREDICTION_CONFIG is STORAGE_FAILURE_PREDICTION_CONFIG_x; -- CXType_Elaborated
   type PSTORAGE_FAILURE_PREDICTION_CONFIG is access STORAGE_FAILURE_PREDICTION_CONFIG_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_QUERY_TYPE_x is (
      PropertyStandardQuery,
      PropertyExistsQuery,
      PropertyMaskQuery,
      PropertyQueryMaxDefined
   );
   for STORAGE_QUERY_TYPE_x use (
      PropertyStandardQuery => 0,
      PropertyExistsQuery => 1,
      PropertyMaskQuery => 2,
      PropertyQueryMaxDefined => 3
   );
   for STORAGE_QUERY_TYPE_x'Size use 32;
   subtype STORAGE_QUERY_TYPE is STORAGE_QUERY_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_QUERY_TYPE is access STORAGE_QUERY_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROPERTY_ID_x is (
      StorageDeviceProperty,
      StorageAdapterProperty,
      StorageDeviceIdProperty,
      StorageDeviceUniqueIdProperty,
      StorageDeviceWriteCacheProperty,
      StorageMiniportProperty,
      StorageAccessAlignmentProperty,
      StorageDeviceSeekPenaltyProperty,
      StorageDeviceTrimProperty,
      StorageDeviceWriteAggregationProperty,
      StorageDeviceDeviceTelemetryProperty,
      StorageDeviceLBProvisioningProperty,
      StorageDevicePowerProperty,
      StorageDeviceCopyOffloadProperty,
      StorageDeviceResiliencyProperty,
      StorageDeviceMediumProductType,
      StorageAdapterRpmbProperty,
      StorageAdapterCryptoProperty,
      StorageDeviceIoCapabilityProperty,
      StorageAdapterProtocolSpecificProperty,
      StorageDeviceProtocolSpecificProperty,
      StorageAdapterTemperatureProperty,
      StorageDeviceTemperatureProperty,
      StorageAdapterPhysicalTopologyProperty,
      StorageDevicePhysicalTopologyProperty,
      StorageDeviceAttributesProperty,
      StorageDeviceManagementStatus,
      StorageAdapterSerialNumberProperty,
      StorageDeviceLocationProperty,
      StorageDeviceNumaProperty,
      StorageDeviceZonedDeviceProperty,
      StorageDeviceUnsafeShutdownCount
   );
   for STORAGE_PROPERTY_ID_x use (
      StorageDeviceProperty => 0,
      StorageAdapterProperty => 1,
      StorageDeviceIdProperty => 2,
      StorageDeviceUniqueIdProperty => 3,
      StorageDeviceWriteCacheProperty => 4,
      StorageMiniportProperty => 5,
      StorageAccessAlignmentProperty => 6,
      StorageDeviceSeekPenaltyProperty => 7,
      StorageDeviceTrimProperty => 8,
      StorageDeviceWriteAggregationProperty => 9,
      StorageDeviceDeviceTelemetryProperty => 10,
      StorageDeviceLBProvisioningProperty => 11,
      StorageDevicePowerProperty => 12,
      StorageDeviceCopyOffloadProperty => 13,
      StorageDeviceResiliencyProperty => 14,
      StorageDeviceMediumProductType => 15,
      StorageAdapterRpmbProperty => 16,
      StorageAdapterCryptoProperty => 17,
      StorageDeviceIoCapabilityProperty => 48,
      StorageAdapterProtocolSpecificProperty => 49,
      StorageDeviceProtocolSpecificProperty => 50,
      StorageAdapterTemperatureProperty => 51,
      StorageDeviceTemperatureProperty => 52,
      StorageAdapterPhysicalTopologyProperty => 53,
      StorageDevicePhysicalTopologyProperty => 54,
      StorageDeviceAttributesProperty => 55,
      StorageDeviceManagementStatus => 56,
      StorageAdapterSerialNumberProperty => 57,
      StorageDeviceLocationProperty => 58,
      StorageDeviceNumaProperty => 59,
      StorageDeviceZonedDeviceProperty => 60,
      StorageDeviceUnsafeShutdownCount => 61
   );
   for STORAGE_PROPERTY_ID_x'Size use 32;
   subtype STORAGE_PROPERTY_ID is STORAGE_PROPERTY_ID_x; -- CXType_Elaborated
   type PSTORAGE_PROPERTY_ID is access STORAGE_PROPERTY_ID_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROPERTY_QUERY_x is record
      PropertyId : STORAGE_PROPERTY_ID;
      QueryType : STORAGE_QUERY_TYPE;
      AdditionalParameters : Void;
   end record;
   subtype STORAGE_PROPERTY_QUERY is STORAGE_PROPERTY_QUERY_x; -- CXType_Elaborated
   type PSTORAGE_PROPERTY_QUERY is access STORAGE_PROPERTY_QUERY_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DESCRIPTOR_HEADER_x is record
      Version : DWORD;
      Size_x : DWORD;
   end record;
   subtype STORAGE_DESCRIPTOR_HEADER is STORAGE_DESCRIPTOR_HEADER_x; -- CXType_Elaborated
   type PSTORAGE_DESCRIPTOR_HEADER is access STORAGE_DESCRIPTOR_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      DeviceType : BYTE;
      DeviceTypeModifier : BYTE;
      RemovableMedia : BOOLEAN;
      CommandQueueing : BOOLEAN;
      VendorIdOffset : DWORD;
      ProductIdOffset : DWORD;
      ProductRevisionOffset : DWORD;
      SerialNumberOffset : DWORD;
      BusType : STORAGE_BUS_TYPE;
      RawPropertiesLength : DWORD;
      RawDeviceProperties : Void;
   end record;
   subtype STORAGE_DEVICE_DESCRIPTOR is STORAGE_DEVICE_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_DESCRIPTOR is access STORAGE_DEVICE_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ADAPTER_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      MaximumTransferLength : DWORD;
      MaximumPhysicalPages : DWORD;
      AlignmentMask : DWORD;
      AdapterUsesPio : BOOLEAN;
      AdapterScansDown : BOOLEAN;
      CommandQueueing : BOOLEAN;
      AcceleratedTransfer : BOOLEAN;
      BusType : BYTE;
      BusMajorVersion : WORD;
      BusMinorVersion : WORD;
      SrbType : BYTE;
      AddressType : BYTE;
   end record;
   subtype STORAGE_ADAPTER_DESCRIPTOR is STORAGE_ADAPTER_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_ADAPTER_DESCRIPTOR is access STORAGE_ADAPTER_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      BytesPerCacheLine : DWORD;
      BytesOffsetForCacheAlignment : DWORD;
      BytesPerLogicalSector : DWORD;
      BytesPerPhysicalSector : DWORD;
      BytesOffsetForSectorAlignment : DWORD;
   end record;
   subtype STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR is STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR is access STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      MediumProductType : DWORD;
   end record;
   subtype STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR is STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR is access STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PORT_CODE_SET_x is (
      StoragePortCodeSetReserved,
      StoragePortCodeSetStorport,
      StoragePortCodeSetSCSIport,
      StoragePortCodeSetSpaceport,
      StoragePortCodeSetATAport,
      StoragePortCodeSetUSBport,
      StoragePortCodeSetSBP2port,
      StoragePortCodeSetSDport
   );
   for STORAGE_PORT_CODE_SET_x use (
      StoragePortCodeSetReserved => 0,
      StoragePortCodeSetStorport => 1,
      StoragePortCodeSetSCSIport => 2,
      StoragePortCodeSetSpaceport => 3,
      StoragePortCodeSetATAport => 4,
      StoragePortCodeSetUSBport => 5,
      StoragePortCodeSetSBP2port => 6,
      StoragePortCodeSetSDport => 7
   );
   for STORAGE_PORT_CODE_SET_x'Size use 32;
   subtype STORAGE_PORT_CODE_SET is STORAGE_PORT_CODE_SET_x; -- CXType_Elaborated
   type PSTORAGE_PORT_CODE_SET is access STORAGE_PORT_CODE_SET_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_MINIPORT_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      Portdriver : STORAGE_PORT_CODE_SET;
      LUNResetSupported : BOOLEAN;
      TargetResetSupported : BOOLEAN;
      IoTimeoutValue : WORD;
      ExtraIoInfoSupported : BOOLEAN;
      Reserved0 : Void;
      Reserved1 : DWORD;
   end record;
   subtype STORAGE_MINIPORT_DESCRIPTOR is STORAGE_MINIPORT_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_MINIPORT_DESCRIPTOR is access STORAGE_MINIPORT_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_IDENTIFIER_CODE_SET_x is (
      StorageIdCodeSetReserved,
      StorageIdCodeSetBinary,
      StorageIdCodeSetAscii,
      StorageIdCodeSetUtf8
   );
   for STORAGE_IDENTIFIER_CODE_SET_x use (
      StorageIdCodeSetReserved => 0,
      StorageIdCodeSetBinary => 1,
      StorageIdCodeSetAscii => 2,
      StorageIdCodeSetUtf8 => 3
   );
   for STORAGE_IDENTIFIER_CODE_SET_x'Size use 32;
   subtype STORAGE_IDENTIFIER_CODE_SET is STORAGE_IDENTIFIER_CODE_SET_x; -- CXType_Elaborated
   type PSTORAGE_IDENTIFIER_CODE_SET is access STORAGE_IDENTIFIER_CODE_SET_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_IDENTIFIER_TYPE_x is (
      StorageIdTypeVendorSpecific,
      StorageIdTypeVendorId,
      StorageIdTypeEUI64,
      StorageIdTypeFCPHName,
      StorageIdTypePortRelative,
      StorageIdTypeTargetPortGroup,
      StorageIdTypeLogicalUnitGroup,
      StorageIdTypeMD5LogicalUnitIdentifier,
      StorageIdTypeScsiNameString
   );
   for STORAGE_IDENTIFIER_TYPE_x use (
      StorageIdTypeVendorSpecific => 0,
      StorageIdTypeVendorId => 1,
      StorageIdTypeEUI64 => 2,
      StorageIdTypeFCPHName => 3,
      StorageIdTypePortRelative => 4,
      StorageIdTypeTargetPortGroup => 5,
      StorageIdTypeLogicalUnitGroup => 6,
      StorageIdTypeMD5LogicalUnitIdentifier => 7,
      StorageIdTypeScsiNameString => 8
   );
   for STORAGE_IDENTIFIER_TYPE_x'Size use 32;
   subtype STORAGE_IDENTIFIER_TYPE is STORAGE_IDENTIFIER_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_IDENTIFIER_TYPE is access STORAGE_IDENTIFIER_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ID_NAA_FORMAT_x is (
      StorageIdNAAFormatIEEEExtended,
      StorageIdNAAFormatIEEERegistered,
      StorageIdNAAFormatIEEEERegisteredExtended
   );
   for STORAGE_ID_NAA_FORMAT_x use (
      StorageIdNAAFormatIEEEExtended => 2,
      StorageIdNAAFormatIEEERegistered => 3,
      StorageIdNAAFormatIEEEERegisteredExtended => 5
   );
   for STORAGE_ID_NAA_FORMAT_x'Size use 32;
   subtype STORAGE_ID_NAA_FORMAT is STORAGE_ID_NAA_FORMAT_x; -- CXType_Elaborated
   type PSTORAGE_ID_NAA_FORMAT is access STORAGE_ID_NAA_FORMAT_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ASSOCIATION_TYPE_x is (
      StorageIdAssocDevice,
      StorageIdAssocPort,
      StorageIdAssocTarget
   );
   for STORAGE_ASSOCIATION_TYPE_x use (
      StorageIdAssocDevice => 0,
      StorageIdAssocPort => 1,
      StorageIdAssocTarget => 2
   );
   for STORAGE_ASSOCIATION_TYPE_x'Size use 32;
   subtype STORAGE_ASSOCIATION_TYPE is STORAGE_ASSOCIATION_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_ASSOCIATION_TYPE is access STORAGE_ASSOCIATION_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_IDENTIFIER_x is record
      CodeSet : STORAGE_IDENTIFIER_CODE_SET;
      type_x : STORAGE_IDENTIFIER_TYPE;
      IdentifierSize : WORD;
      NextOffset : WORD;
      Association : STORAGE_ASSOCIATION_TYPE;
      Identifier : Void;
   end record;
   subtype STORAGE_IDENTIFIER is STORAGE_IDENTIFIER_x; -- CXType_Elaborated
   type PSTORAGE_IDENTIFIER is access STORAGE_IDENTIFIER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_ID_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      NumberOfIdentifiers : DWORD;
      Identifiers : Void;
   end record;
   subtype STORAGE_DEVICE_ID_DESCRIPTOR is STORAGE_DEVICE_ID_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_ID_DESCRIPTOR is access STORAGE_DEVICE_ID_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_SEEK_PENALTY_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      IncursSeekPenalty : BOOLEAN;
   end record;
   subtype DEVICE_SEEK_PENALTY_DESCRIPTOR is DEVICE_SEEK_PENALTY_DESCRIPTOR_x; -- CXType_Elaborated
   type PDEVICE_SEEK_PENALTY_DESCRIPTOR is access DEVICE_SEEK_PENALTY_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_WRITE_AGGREGATION_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      BenefitsFromWriteAggregation : BOOLEAN;
   end record;
   subtype DEVICE_WRITE_AGGREGATION_DESCRIPTOR is DEVICE_WRITE_AGGREGATION_DESCRIPTOR_x; -- CXType_Elaborated
   type PDEVICE_WRITE_AGGREGATION_DESCRIPTOR is access DEVICE_WRITE_AGGREGATION_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_TRIM_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      TrimEnabled : BOOLEAN;
   end record;
   subtype DEVICE_TRIM_DESCRIPTOR is DEVICE_TRIM_DESCRIPTOR_x; -- CXType_Elaborated
   type PDEVICE_TRIM_DESCRIPTOR is access DEVICE_TRIM_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_LB_PROVISIONING_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      ThinProvisioningEnabled : BYTE;
      ThinProvisioningReadZeros : BYTE;
      AnchorSupported : BYTE;
      UnmapGranularityAlignmentValid : BYTE;
      Reserved0 : BYTE;
      Reserved1 : Void;
      OptimalUnmapGranularity : DWORDLONG;
      UnmapGranularityAlignment : DWORDLONG;
      MaxUnmapLbaCount : DWORD;
      MaxUnmapBlockDescriptorCount : DWORD;
   end record;
   subtype DEVICE_LB_PROVISIONING_DESCRIPTOR is DEVICE_LB_PROVISIONING_DESCRIPTOR_x; -- CXType_Elaborated
   type PDEVICE_LB_PROVISIONING_DESCRIPTOR is access DEVICE_LB_PROVISIONING_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_LB_PROVISIONING_MAP_RESOURCES_x is record
      Size_x : DWORD;
      Version : DWORD;
      AvailableMappingResourcesValid : BYTE;
      UsedMappingResourcesValid : BYTE;
      Reserved0 : BYTE;
      Reserved1 : Void;
      AvailableMappingResourcesScope : BYTE;
      UsedMappingResourcesScope : BYTE;
      Reserved2 : BYTE;
      Reserved3 : Void;
      AvailableMappingResources : DWORDLONG;
      UsedMappingResources : DWORDLONG;
   end record;
   subtype STORAGE_LB_PROVISIONING_MAP_RESOURCES is STORAGE_LB_PROVISIONING_MAP_RESOURCES_x; -- CXType_Elaborated
   type PSTORAGE_LB_PROVISIONING_MAP_RESOURCES is access STORAGE_LB_PROVISIONING_MAP_RESOURCES_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_POWER_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      DeviceAttentionSupported : BOOLEAN;
      AsynchronousNotificationSupported : BOOLEAN;
      IdlePowerManagementEnabled : BOOLEAN;
      D3ColdEnabled : BOOLEAN;
      D3ColdSupported : BOOLEAN;
      NoVerifyDuringIdlePower : BOOLEAN;
      Reserved : Void;
      IdleTimeoutInMS : DWORD;
   end record;
   subtype DEVICE_POWER_DESCRIPTOR is DEVICE_POWER_DESCRIPTOR_x; -- CXType_Elaborated
   type PDEVICE_POWER_DESCRIPTOR is access DEVICE_POWER_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_COPY_OFFLOAD_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      MaximumTokenLifetime : DWORD;
      DefaultTokenLifetime : DWORD;
      MaximumTransferSize : DWORDLONG;
      OptimalTransferCount : DWORDLONG;
      MaximumDataDescriptors : DWORD;
      MaximumTransferLengthPerDescriptor : DWORD;
      OptimalTransferLengthPerDescriptor : DWORD;
      OptimalTransferLengthGranularity : WORD;
      Reserved : Void;
   end record;
   subtype DEVICE_COPY_OFFLOAD_DESCRIPTOR is DEVICE_COPY_OFFLOAD_DESCRIPTOR_x; -- CXType_Elaborated
   type PDEVICE_COPY_OFFLOAD_DESCRIPTOR is access DEVICE_COPY_OFFLOAD_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_RESILIENCY_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      NameOffset : DWORD;
      NumberOfLogicalCopies : DWORD;
      NumberOfPhysicalCopies : DWORD;
      PhysicalDiskRedundancy : DWORD;
      NumberOfColumns : DWORD;
      Interleave : DWORD;
   end record;
   subtype STORAGE_DEVICE_RESILIENCY_DESCRIPTOR is STORAGE_DEVICE_RESILIENCY_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR is access STORAGE_DEVICE_RESILIENCY_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_RPMB_FRAME_TYPE_x is (
      StorageRpmbFrameTypeUnknown,
      StorageRpmbFrameTypeStandard,
      StorageRpmbFrameTypeMax
   );
   for STORAGE_RPMB_FRAME_TYPE_x use (
      StorageRpmbFrameTypeUnknown => 0,
      StorageRpmbFrameTypeStandard => 1,
      StorageRpmbFrameTypeMax => 2
   );
   for STORAGE_RPMB_FRAME_TYPE_x'Size use 32;
   subtype STORAGE_RPMB_FRAME_TYPE is STORAGE_RPMB_FRAME_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_RPMB_FRAME_TYPE is access STORAGE_RPMB_FRAME_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_RPMB_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      SizeInBytes : DWORD;
      MaxReliableWriteSizeInBytes : DWORD;
      FrameFormat : STORAGE_RPMB_FRAME_TYPE;
   end record;
   subtype STORAGE_RPMB_DESCRIPTOR is STORAGE_RPMB_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_RPMB_DESCRIPTOR is access STORAGE_RPMB_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_CRYPTO_ALGORITHM_ID_x is (
      StorageCryptoAlgorithmUnknown,
      StorageCryptoAlgorithmXTSAES,
      StorageCryptoAlgorithmBitlockerAESCBC,
      StorageCryptoAlgorithmAESECB,
      StorageCryptoAlgorithmESSIVAESCBC,
      StorageCryptoAlgorithmMax
   );
   for STORAGE_CRYPTO_ALGORITHM_ID_x use (
      StorageCryptoAlgorithmUnknown => 0,
      StorageCryptoAlgorithmXTSAES => 1,
      StorageCryptoAlgorithmBitlockerAESCBC => 2,
      StorageCryptoAlgorithmAESECB => 3,
      StorageCryptoAlgorithmESSIVAESCBC => 4,
      StorageCryptoAlgorithmMax => 5
   );
   for STORAGE_CRYPTO_ALGORITHM_ID_x'Size use 32;
   subtype STORAGE_CRYPTO_ALGORITHM_ID is STORAGE_CRYPTO_ALGORITHM_ID_x; -- CXType_Elaborated
   type PSTORAGE_CRYPTO_ALGORITHM_ID is access STORAGE_CRYPTO_ALGORITHM_ID_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_CRYPTO_KEY_SIZE_x is (
      StorageCryptoKeySizeUnknown,
      StorageCryptoKeySize128Bits,
      StorageCryptoKeySize192Bits,
      StorageCryptoKeySize256Bits,
      StorageCryptoKeySize512Bits
   );
   for STORAGE_CRYPTO_KEY_SIZE_x use (
      StorageCryptoKeySizeUnknown => 0,
      StorageCryptoKeySize128Bits => 1,
      StorageCryptoKeySize192Bits => 2,
      StorageCryptoKeySize256Bits => 3,
      StorageCryptoKeySize512Bits => 4
   );
   for STORAGE_CRYPTO_KEY_SIZE_x'Size use 32;
   subtype STORAGE_CRYPTO_KEY_SIZE is STORAGE_CRYPTO_KEY_SIZE_x; -- CXType_Elaborated
   type PSTORAGE_CRYPTO_KEY_SIZE is access STORAGE_CRYPTO_KEY_SIZE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_CRYPTO_CAPABILITY_x is record
      Version : DWORD;
      Size_x : DWORD;
      CryptoCapabilityIndex : DWORD;
      AlgorithmId : STORAGE_CRYPTO_ALGORITHM_ID;
      KeySize : STORAGE_CRYPTO_KEY_SIZE;
      DataUnitSizeBitmask : DWORD;
   end record;
   subtype STORAGE_CRYPTO_CAPABILITY is STORAGE_CRYPTO_CAPABILITY_x; -- CXType_Elaborated
   type PSTORAGE_CRYPTO_CAPABILITY is access STORAGE_CRYPTO_CAPABILITY_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_CRYPTO_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      NumKeysSupported : DWORD;
      NumCryptoCapabilities : DWORD;
      CryptoCapabilities : Void;
   end record;
   subtype STORAGE_CRYPTO_DESCRIPTOR is STORAGE_CRYPTO_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_CRYPTO_DESCRIPTOR is access STORAGE_CRYPTO_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TIER_MEDIA_TYPE_x is (
      StorageTierMediaTypeUnspecified,
      StorageTierMediaTypeDisk,
      StorageTierMediaTypeSsd,
      StorageTierMediaTypeScm,
      StorageTierMediaTypeMax
   );
   for STORAGE_TIER_MEDIA_TYPE_x use (
      StorageTierMediaTypeUnspecified => 0,
      StorageTierMediaTypeDisk => 1,
      StorageTierMediaTypeSsd => 2,
      StorageTierMediaTypeScm => 4,
      StorageTierMediaTypeMax => 5
   );
   for STORAGE_TIER_MEDIA_TYPE_x'Size use 32;
   subtype STORAGE_TIER_MEDIA_TYPE is STORAGE_TIER_MEDIA_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_TIER_MEDIA_TYPE is access STORAGE_TIER_MEDIA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TIER_CLASS_x is (
      StorageTierClassUnspecified,
      StorageTierClassCapacity,
      StorageTierClassPerformance,
      StorageTierClassMax
   );
   for STORAGE_TIER_CLASS_x use (
      StorageTierClassUnspecified => 0,
      StorageTierClassCapacity => 1,
      StorageTierClassPerformance => 2,
      StorageTierClassMax => 3
   );
   for STORAGE_TIER_CLASS_x'Size use 32;
   subtype STORAGE_TIER_CLASS is STORAGE_TIER_CLASS_x; -- CXType_Elaborated
   type PSTORAGE_TIER_CLASS is access STORAGE_TIER_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TIER_x is record
      Id : GUID;
      Name : Void;
      Description : Void;
      Flags : DWORDLONG;
      ProvisionedCapacity : DWORDLONG;
      MediaType : STORAGE_TIER_MEDIA_TYPE;
      Class : STORAGE_TIER_CLASS;
   end record;
   subtype STORAGE_TIER is STORAGE_TIER_x; -- CXType_Elaborated
   type PSTORAGE_TIER is access STORAGE_TIER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_TIERING_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      TotalNumberOfTiers : DWORD;
      NumberOfTiersReturned : DWORD;
      Tiers : Void;
   end record;
   subtype STORAGE_DEVICE_TIERING_DESCRIPTOR is STORAGE_DEVICE_TIERING_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_TIERING_DESCRIPTOR is access STORAGE_DEVICE_TIERING_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      NumberOfFaultDomains : DWORD;
      FaultDomainIds : Void;
   end record;
   subtype STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR is STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR is access STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_TYPE_x is (
      ProtocolTypeUnknown,
      ProtocolTypeScsi,
      ProtocolTypeAta,
      ProtocolTypeNvme,
      ProtocolTypeSd,
      ProtocolTypeUfs,
      ProtocolTypeProprietary,
      ProtocolTypeMaxReserved
   );
   for STORAGE_PROTOCOL_TYPE_x use (
      ProtocolTypeUnknown => 0,
      ProtocolTypeScsi => 1,
      ProtocolTypeAta => 2,
      ProtocolTypeNvme => 3,
      ProtocolTypeSd => 4,
      ProtocolTypeUfs => 5,
      ProtocolTypeProprietary => 126,
      ProtocolTypeMaxReserved => 127
   );
   for STORAGE_PROTOCOL_TYPE_x'Size use 32;
   subtype STORAGE_PROTOCOL_TYPE is STORAGE_PROTOCOL_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_TYPE is access STORAGE_PROTOCOL_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_NVME_DATA_TYPE_x is (
      NVMeDataTypeUnknown,
      NVMeDataTypeIdentify,
      NVMeDataTypeLogPage,
      NVMeDataTypeFeature
   );
   for STORAGE_PROTOCOL_NVME_DATA_TYPE_x use (
      NVMeDataTypeUnknown => 0,
      NVMeDataTypeIdentify => 1,
      NVMeDataTypeLogPage => 2,
      NVMeDataTypeFeature => 3
   );
   for STORAGE_PROTOCOL_NVME_DATA_TYPE_x'Size use 32;
   subtype STORAGE_PROTOCOL_NVME_DATA_TYPE is STORAGE_PROTOCOL_NVME_DATA_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_NVME_DATA_TYPE is access STORAGE_PROTOCOL_NVME_DATA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_ATA_DATA_TYPE_x is (
      AtaDataTypeUnknown,
      AtaDataTypeIdentify,
      AtaDataTypeLogPage
   );
   for STORAGE_PROTOCOL_ATA_DATA_TYPE_x use (
      AtaDataTypeUnknown => 0,
      AtaDataTypeIdentify => 1,
      AtaDataTypeLogPage => 2
   );
   for STORAGE_PROTOCOL_ATA_DATA_TYPE_x'Size use 32;
   subtype STORAGE_PROTOCOL_ATA_DATA_TYPE is STORAGE_PROTOCOL_ATA_DATA_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_ATA_DATA_TYPE is access STORAGE_PROTOCOL_ATA_DATA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_UFS_DATA_TYPE_x is (
      UfsDataTypeUnknown,
      UfsDataTypeQueryDescriptor,
      UfsDataTypeMax
   );
   for STORAGE_PROTOCOL_UFS_DATA_TYPE_x use (
      UfsDataTypeUnknown => 0,
      UfsDataTypeQueryDescriptor => 1,
      UfsDataTypeMax => 2
   );
   for STORAGE_PROTOCOL_UFS_DATA_TYPE_x'Size use 32;
   subtype STORAGE_PROTOCOL_UFS_DATA_TYPE is STORAGE_PROTOCOL_UFS_DATA_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_UFS_DATA_TYPE is access STORAGE_PROTOCOL_UFS_DATA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_SPECIFIC_DATA_x is record
      ProtocolType : STORAGE_PROTOCOL_TYPE;
      DataType : DWORD;
      ProtocolDataRequestValue : DWORD;
      ProtocolDataRequestSubValue : DWORD;
      ProtocolDataOffset : DWORD;
      ProtocolDataLength : DWORD;
      FixedProtocolReturnData : DWORD;
      Reserved : Void;
   end record;
   subtype STORAGE_PROTOCOL_SPECIFIC_DATA is STORAGE_PROTOCOL_SPECIFIC_DATA_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_SPECIFIC_DATA is access STORAGE_PROTOCOL_SPECIFIC_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_DATA_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      ProtocolSpecificData : STORAGE_PROTOCOL_SPECIFIC_DATA;
   end record;
   subtype STORAGE_PROTOCOL_DATA_DESCRIPTOR is STORAGE_PROTOCOL_DATA_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_DATA_DESCRIPTOR is access STORAGE_PROTOCOL_DATA_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TEMPERATURE_INFO_x is record
      Index : WORD;
      Temperature : SHORT;
      OverThreshold : SHORT;
      UnderThreshold : SHORT;
      OverThresholdChangable : BOOLEAN;
      UnderThresholdChangable : BOOLEAN;
      EventGenerated : BOOLEAN;
      Reserved0 : BYTE;
      Reserved1 : DWORD;
   end record;
   subtype STORAGE_TEMPERATURE_INFO is STORAGE_TEMPERATURE_INFO_x; -- CXType_Elaborated
   type PSTORAGE_TEMPERATURE_INFO is access STORAGE_TEMPERATURE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TEMPERATURE_DATA_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      CriticalTemperature : SHORT;
      WarningTemperature : SHORT;
      InfoCount : WORD;
      Reserved0 : Void;
      Reserved1 : Void;
      TemperatureInfo : Void;
   end record;
   subtype STORAGE_TEMPERATURE_DATA_DESCRIPTOR is STORAGE_TEMPERATURE_DATA_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR is access STORAGE_TEMPERATURE_DATA_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TEMPERATURE_THRESHOLD_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : WORD;
      Index : WORD;
      Threshold : SHORT;
      OverThreshold : BOOLEAN;
      Reserved : BYTE;
   end record;
   subtype STORAGE_TEMPERATURE_THRESHOLD is STORAGE_TEMPERATURE_THRESHOLD_x; -- CXType_Elaborated
   type PSTORAGE_TEMPERATURE_THRESHOLD is access STORAGE_TEMPERATURE_THRESHOLD_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_QUEUE_HEADER_x is record
      Version : DWORD;
      Size_x : DWORD;
   end record;
   subtype NVME_RESERVED_QUEUE_HEADER is NVME_RESERVED_QUEUE_HEADER_x; -- CXType_Elaborated
   type PNVME_RESERVED_QUEUE_HEADER is access NVME_RESERVED_QUEUE_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_SQ_CREATE_REQUEST_x is record
      PhysicalAddress : DWORD64;
      QueuePriority : WORD;
      QueueDepth : WORD;
      PhysicalContiguous : BOOLEAN;
   end record;
   subtype NVME_RESERVED_SQ_CREATE_REQUEST is NVME_RESERVED_SQ_CREATE_REQUEST_x; -- CXType_Elaborated
   type PNVME_RESERVED_SQ_CREATE_REQUEST is access NVME_RESERVED_SQ_CREATE_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_CQ_CREATE_REQUEST_x is record
      PhysicalAddress : DWORD64;
      InterruptVector : DWORD;
      QueueDepth : WORD;
      InterruptEnabled : BOOLEAN;
      PhysicalContiguous : BOOLEAN;
   end record;
   subtype NVME_RESERVED_CQ_CREATE_REQUEST is NVME_RESERVED_CQ_CREATE_REQUEST_x; -- CXType_Elaborated
   type PNVME_RESERVED_CQ_CREATE_REQUEST is access NVME_RESERVED_CQ_CREATE_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_QUEUES_CREATE_REQUEST_x is record
      Header : NVME_RESERVED_QUEUE_HEADER;
      CompletionQueue : NVME_RESERVED_CQ_CREATE_REQUEST;
      SubmissionQueueCount : WORD;
      SubmissionQueue : Void;
   end record;
   subtype NVME_RESERVED_QUEUES_CREATE_REQUEST is NVME_RESERVED_QUEUES_CREATE_REQUEST_x; -- CXType_Elaborated
   type PNVME_RESERVED_QUEUES_CREATE_REQUEST is access NVME_RESERVED_QUEUES_CREATE_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_SQ_INFO_x is record
      PhysicalAddress : DWORD64;
      DoorbellRegisterAddress : DWORD64;
      QueueID : WORD;
      QueueDepth : WORD;
      PhysicalContiguous : BOOLEAN;
      CompletionQueueID : WORD;
      QueuePriority : BYTE;
   end record;
   subtype NVME_RESERVED_SQ_INFO is NVME_RESERVED_SQ_INFO_x; -- CXType_Elaborated
   type PNVME_RESERVED_SQ_INFO is access NVME_RESERVED_SQ_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_CQ_INFO_x is record
      PhysicalAddress : DWORD64;
      DoorbellRegisterAddress : DWORD64;
      QueueID : WORD;
      QueueDepth : WORD;
      InterruptEnabled : BOOLEAN;
      PhysicalContiguous : BOOLEAN;
      InterruptVector : DWORD;
   end record;
   subtype NVME_RESERVED_CQ_INFO is NVME_RESERVED_CQ_INFO_x; -- CXType_Elaborated
   type PNVME_RESERVED_CQ_INFO is access NVME_RESERVED_CQ_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_QUEUES_CREATE_RESPONSE_x is record
      Header : NVME_RESERVED_QUEUE_HEADER;
      CompletionQueue : NVME_RESERVED_CQ_INFO;
      SubmissionQueueCount : WORD;
      SubmissionQueue : Void;
   end record;
   subtype NVME_RESERVED_QUEUES_CREATE_RESPONSE is NVME_RESERVED_QUEUES_CREATE_RESPONSE_x; -- CXType_Elaborated
   type PNVME_RESERVED_QUEUES_CREATE_RESPONSE is access NVME_RESERVED_QUEUES_CREATE_RESPONSE_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_QUEUES_DELETE_REQUEST_x is record
      Header : NVME_RESERVED_QUEUE_HEADER;
      QueueID : WORD;
   end record;
   subtype NVME_RESERVED_QUEUES_DELETE_REQUEST is NVME_RESERVED_QUEUES_DELETE_REQUEST_x; -- CXType_Elaborated
   type PNVME_RESERVED_QUEUES_DELETE_REQUEST is access NVME_RESERVED_QUEUES_DELETE_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type NVME_RESERVED_QUEUES_PROPERTIES_x is record
      Header : NVME_RESERVED_QUEUE_HEADER;
      QueuePairCount : WORD;
      QueueMapping : Void;
   end record;
   subtype NVME_RESERVED_QUEUES_PROPERTIES is NVME_RESERVED_QUEUES_PROPERTIES_x; -- CXType_Elaborated
   type PNVME_RESERVED_QUEUES_PROPERTIES is access NVME_RESERVED_QUEUES_PROPERTIES_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_FORM_FACTOR_x is (
      FormFactorUnknown,
      FormFactor3_5,
      FormFactor2_5,
      FormFactor1_8,
      FormFactor1_8Less,
      FormFactorEmbedded,
      FormFactorMemoryCard,
      FormFactormSata,
      FormFactorM_2,
      FormFactorPCIeBoard,
      FormFactorDimm
   );
   for STORAGE_DEVICE_FORM_FACTOR_x use (
      FormFactorUnknown => 0,
      FormFactor3_5 => 1,
      FormFactor2_5 => 2,
      FormFactor1_8 => 3,
      FormFactor1_8Less => 4,
      FormFactorEmbedded => 5,
      FormFactorMemoryCard => 6,
      FormFactormSata => 7,
      FormFactorM_2 => 8,
      FormFactorPCIeBoard => 9,
      FormFactorDimm => 10
   );
   for STORAGE_DEVICE_FORM_FACTOR_x'Size use 32;
   subtype STORAGE_DEVICE_FORM_FACTOR is STORAGE_DEVICE_FORM_FACTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_FORM_FACTOR is access STORAGE_DEVICE_FORM_FACTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_COMPONENT_HEALTH_STATUS_x is (
      HealthStatusUnknown,
      HealthStatusNormal,
      HealthStatusThrottled,
      HealthStatusWarning,
      HealthStatusDisabled,
      HealthStatusFailed
   );
   for STORAGE_COMPONENT_HEALTH_STATUS_x use (
      HealthStatusUnknown => 0,
      HealthStatusNormal => 1,
      HealthStatusThrottled => 2,
      HealthStatusWarning => 3,
      HealthStatusDisabled => 4,
      HealthStatusFailed => 5
   );
   for STORAGE_COMPONENT_HEALTH_STATUS_x'Size use 32;
   subtype STORAGE_COMPONENT_HEALTH_STATUS is STORAGE_COMPONENT_HEALTH_STATUS_x; -- CXType_Elaborated
   type PSTORAGE_COMPONENT_HEALTH_STATUS is access STORAGE_COMPONENT_HEALTH_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_SPEC_VERSION_x is null record; -- Union Placeholder [FIXME]
   subtype STORAGE_SPEC_VERSION is STORAGE_SPEC_VERSION_x; -- CXType_Elaborated
   type PSTORAGE_SPEC_VERSION is access STORAGE_SPEC_VERSION_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PHYSICAL_DEVICE_DATA_x is record
      DeviceId : DWORD;
      Role : DWORD;
      HealthStatus : STORAGE_COMPONENT_HEALTH_STATUS;
      CommandProtocol : STORAGE_PROTOCOL_TYPE;
      SpecVersion : STORAGE_SPEC_VERSION;
      FormFactor : STORAGE_DEVICE_FORM_FACTOR;
      Vendor : Void;
      Model : Void;
      FirmwareRevision : Void;
      Capacity : DWORDLONG;
      PhysicalLocation : Void;
      Reserved : Void;
   end record;
   subtype STORAGE_PHYSICAL_DEVICE_DATA is STORAGE_PHYSICAL_DEVICE_DATA_x; -- CXType_Elaborated
   type PSTORAGE_PHYSICAL_DEVICE_DATA is access STORAGE_PHYSICAL_DEVICE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PHYSICAL_ADAPTER_DATA_x is record
      AdapterId : DWORD;
      HealthStatus : STORAGE_COMPONENT_HEALTH_STATUS;
      CommandProtocol : STORAGE_PROTOCOL_TYPE;
      SpecVersion : STORAGE_SPEC_VERSION;
      Vendor : Void;
      Model : Void;
      FirmwareRevision : Void;
      PhysicalLocation : Void;
      ExpanderConnected : BOOLEAN;
      Reserved0 : Void;
      Reserved1 : Void;
   end record;
   subtype STORAGE_PHYSICAL_ADAPTER_DATA is STORAGE_PHYSICAL_ADAPTER_DATA_x; -- CXType_Elaborated
   type PSTORAGE_PHYSICAL_ADAPTER_DATA is access STORAGE_PHYSICAL_ADAPTER_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PHYSICAL_NODE_DATA_x is record
      NodeId : DWORD;
      AdapterCount : DWORD;
      AdapterDataLength : DWORD;
      AdapterDataOffset : DWORD;
      DeviceCount : DWORD;
      DeviceDataLength : DWORD;
      DeviceDataOffset : DWORD;
      Reserved : Void;
   end record;
   subtype STORAGE_PHYSICAL_NODE_DATA is STORAGE_PHYSICAL_NODE_DATA_x; -- CXType_Elaborated
   type PSTORAGE_PHYSICAL_NODE_DATA is access STORAGE_PHYSICAL_NODE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      NodeCount : DWORD;
      Reserved : DWORD;
      Node : Void;
   end record;
   subtype STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR is STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR is access STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      LunMaxIoCount : DWORD;
      AdapterMaxIoCount : DWORD;
   end record;
   subtype STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR is STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR is access STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      Attributes : DWORD64;
   end record;
   subtype STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR is STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR is access STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DISK_HEALTH_STATUS_x is (
      DiskHealthUnknown,
      DiskHealthUnhealthy,
      DiskHealthWarning,
      DiskHealthHealthy,
      DiskHealthMax
   );
   for STORAGE_DISK_HEALTH_STATUS_x use (
      DiskHealthUnknown => 0,
      DiskHealthUnhealthy => 1,
      DiskHealthWarning => 2,
      DiskHealthHealthy => 3,
      DiskHealthMax => 4
   );
   for STORAGE_DISK_HEALTH_STATUS_x'Size use 32;
   subtype STORAGE_DISK_HEALTH_STATUS is STORAGE_DISK_HEALTH_STATUS_x; -- CXType_Elaborated
   type PSTORAGE_DISK_HEALTH_STATUS is access STORAGE_DISK_HEALTH_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DISK_OPERATIONAL_STATUS_x is (
      DiskOpStatusNone,
      DiskOpStatusUnknown,
      DiskOpStatusOk,
      DiskOpStatusPredictingFailure,
      DiskOpStatusInService,
      DiskOpStatusHardwareError,
      DiskOpStatusNotUsable,
      DiskOpStatusTransientError,
      DiskOpStatusMissing
   );
   for STORAGE_DISK_OPERATIONAL_STATUS_x use (
      DiskOpStatusNone => 0,
      DiskOpStatusUnknown => 1,
      DiskOpStatusOk => 2,
      DiskOpStatusPredictingFailure => 3,
      DiskOpStatusInService => 4,
      DiskOpStatusHardwareError => 5,
      DiskOpStatusNotUsable => 6,
      DiskOpStatusTransientError => 7,
      DiskOpStatusMissing => 8
   );
   for STORAGE_DISK_OPERATIONAL_STATUS_x'Size use 32;
   subtype STORAGE_DISK_OPERATIONAL_STATUS is STORAGE_DISK_OPERATIONAL_STATUS_x; -- CXType_Elaborated
   type PSTORAGE_DISK_OPERATIONAL_STATUS is access STORAGE_DISK_OPERATIONAL_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_OPERATIONAL_STATUS_REASON_x is (
      DiskOpReasonUnknown,
      DiskOpReasonScsiSenseCode,
      DiskOpReasonMedia,
      DiskOpReasonIo,
      DiskOpReasonThresholdExceeded,
      DiskOpReasonLostData,
      DiskOpReasonEnergySource,
      DiskOpReasonConfiguration,
      DiskOpReasonDeviceController,
      DiskOpReasonMediaController,
      DiskOpReasonComponent,
      DiskOpReasonNVDIMM_N,
      DiskOpReasonBackgroundOperation,
      DiskOpReasonInvalidFirmware,
      DiskOpReasonHealthCheck,
      DiskOpReasonLostDataPersistence,
      DiskOpReasonDisabledByPlatform,
      DiskOpReasonLostWritePersistence,
      DiskOpReasonDataPersistenceLossImminent,
      DiskOpReasonWritePersistenceLossImminent,
      DiskOpReasonMax
   );
   for STORAGE_OPERATIONAL_STATUS_REASON_x use (
      DiskOpReasonUnknown => 0,
      DiskOpReasonScsiSenseCode => 1,
      DiskOpReasonMedia => 2,
      DiskOpReasonIo => 3,
      DiskOpReasonThresholdExceeded => 4,
      DiskOpReasonLostData => 5,
      DiskOpReasonEnergySource => 6,
      DiskOpReasonConfiguration => 7,
      DiskOpReasonDeviceController => 8,
      DiskOpReasonMediaController => 9,
      DiskOpReasonComponent => 10,
      DiskOpReasonNVDIMM_N => 11,
      DiskOpReasonBackgroundOperation => 12,
      DiskOpReasonInvalidFirmware => 13,
      DiskOpReasonHealthCheck => 14,
      DiskOpReasonLostDataPersistence => 15,
      DiskOpReasonDisabledByPlatform => 16,
      DiskOpReasonLostWritePersistence => 17,
      DiskOpReasonDataPersistenceLossImminent => 18,
      DiskOpReasonWritePersistenceLossImminent => 19,
      DiskOpReasonMax => 20
   );
   for STORAGE_OPERATIONAL_STATUS_REASON_x'Size use 32;
   subtype STORAGE_OPERATIONAL_STATUS_REASON is STORAGE_OPERATIONAL_STATUS_REASON_x; -- CXType_Elaborated
   type PSTORAGE_OPERATIONAL_STATUS_REASON is access STORAGE_OPERATIONAL_STATUS_REASON_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_OPERATIONAL_REASON_x is record
      Version : DWORD;
      Size_x : DWORD;
      Reason : STORAGE_OPERATIONAL_STATUS_REASON;
      RawBytes : Void;
   end record;
   subtype STORAGE_OPERATIONAL_REASON is STORAGE_OPERATIONAL_REASON_x; -- CXType_Elaborated
   type PSTORAGE_OPERATIONAL_REASON is access STORAGE_OPERATIONAL_REASON_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_MANAGEMENT_STATUS_x is record
      Version : DWORD;
      Size_x : DWORD;
      Health : STORAGE_DISK_HEALTH_STATUS;
      NumberOfOperationalStatus : DWORD;
      NumberOfAdditionalReasons : DWORD;
      OperationalStatus : Void;
      AdditionalReasons : Void;
   end record;
   subtype STORAGE_DEVICE_MANAGEMENT_STATUS is STORAGE_DEVICE_MANAGEMENT_STATUS_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_MANAGEMENT_STATUS is access STORAGE_DEVICE_MANAGEMENT_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ADAPTER_SERIAL_NUMBER_x is record
      Version : DWORD;
      Size_x : DWORD;
      SerialNumber : Void;
   end record;
   subtype STORAGE_ADAPTER_SERIAL_NUMBER is STORAGE_ADAPTER_SERIAL_NUMBER_x; -- CXType_Elaborated
   type PSTORAGE_ADAPTER_SERIAL_NUMBER is access STORAGE_ADAPTER_SERIAL_NUMBER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONED_DEVICE_TYPES_x is (
      ZonedDeviceTypeUnknown,
      ZonedDeviceTypeHostManaged,
      ZonedDeviceTypeHostAware,
      ZonedDeviceTypeDeviceManaged
   );
   for STORAGE_ZONED_DEVICE_TYPES_x use (
      ZonedDeviceTypeUnknown => 0,
      ZonedDeviceTypeHostManaged => 1,
      ZonedDeviceTypeHostAware => 2,
      ZonedDeviceTypeDeviceManaged => 3
   );
   for STORAGE_ZONED_DEVICE_TYPES_x'Size use 32;
   subtype STORAGE_ZONED_DEVICE_TYPES is STORAGE_ZONED_DEVICE_TYPES_x; -- CXType_Elaborated
   type PSTORAGE_ZONED_DEVICE_TYPES is access STORAGE_ZONED_DEVICE_TYPES_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONE_TYPES_x is (
      ZoneTypeUnknown,
      ZoneTypeConventional,
      ZoneTypeSequentialWriteRequired,
      ZoneTypeSequentialWritePreferred,
      ZoneTypeMax
   );
   for STORAGE_ZONE_TYPES_x use (
      ZoneTypeUnknown => 0,
      ZoneTypeConventional => 1,
      ZoneTypeSequentialWriteRequired => 2,
      ZoneTypeSequentialWritePreferred => 3,
      ZoneTypeMax => 4
   );
   for STORAGE_ZONE_TYPES_x'Size use 32;
   subtype STORAGE_ZONE_TYPES is STORAGE_ZONE_TYPES_x; -- CXType_Elaborated
   type PSTORAGE_ZONE_TYPES is access STORAGE_ZONE_TYPES_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONE_GROUP_x is record
      ZoneCount : DWORD;
      ZoneType : STORAGE_ZONE_TYPES;
      ZoneSize : DWORDLONG;
   end record;
   subtype STORAGE_ZONE_GROUP is STORAGE_ZONE_GROUP_x; -- CXType_Elaborated
   type PSTORAGE_ZONE_GROUP is access STORAGE_ZONE_GROUP_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONED_DEVICE_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      DeviceType : STORAGE_ZONED_DEVICE_TYPES;
      ZoneCount : DWORD;
      ZoneAttributes : Void;
      ZoneGroupCount : DWORD;
      ZoneGroup : Void;
   end record;
   subtype STORAGE_ZONED_DEVICE_DESCRIPTOR is STORAGE_ZONED_DEVICE_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_ZONED_DEVICE_DESCRIPTOR is access STORAGE_ZONED_DEVICE_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_LOCATION_x is record
      Socket_x : DWORD;
      Slot : DWORD;
      Adapter : DWORD;
      Port : DWORD;
   end record;
   subtype DEVICE_LOCATION is DEVICE_LOCATION_x; -- CXType_Elaborated
   type PDEVICE_LOCATION is access DEVICE_LOCATION_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_LOCATION_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      Location : DEVICE_LOCATION;
      StringOffset : DWORD;
   end record;
   subtype STORAGE_DEVICE_LOCATION_DESCRIPTOR is STORAGE_DEVICE_LOCATION_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_LOCATION_DESCRIPTOR is access STORAGE_DEVICE_LOCATION_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_NUMA_PROPERTY_x is record
      Version : DWORD;
      Size_x : DWORD;
      NumaNode : DWORD;
   end record;
   subtype STORAGE_DEVICE_NUMA_PROPERTY is STORAGE_DEVICE_NUMA_PROPERTY_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_NUMA_PROPERTY is access STORAGE_DEVICE_NUMA_PROPERTY_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT_x is record
      Version : DWORD;
      Size_x : DWORD;
      UnsafeShutdownCount : DWORD;
   end record;
   subtype STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT is STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT is access STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DATA_MANAGEMENT_SET_ACTION is DWORD; -- CXType_Typedef
   subtype DEVICE_DSM_ACTION is DWORD; -- CXType_Typedef
   type DEVICE_DATA_SET_RANGE_x is record
      StartingOffset : LONGLONG;
      LengthInBytes : DWORDLONG;
   end record;
   subtype DEVICE_DATA_SET_RANGE is DEVICE_DATA_SET_RANGE_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_RANGE is access DEVICE_DATA_SET_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_RANGE is DEVICE_DATA_SET_RANGE_x; -- CXType_Elaborated
   type PDEVICE_DSM_RANGE is access DEVICE_DATA_SET_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_MANAGE_DATA_SET_ATTRIBUTES_x is record
      Size_x : DWORD;
      Action : DEVICE_DSM_ACTION;
      Flags : DWORD;
      ParameterBlockOffset : DWORD;
      ParameterBlockLength : DWORD;
      DataSetRangesOffset : DWORD;
      DataSetRangesLength : DWORD;
   end record;
   subtype DEVICE_MANAGE_DATA_SET_ATTRIBUTES is DEVICE_MANAGE_DATA_SET_ATTRIBUTES_x; -- CXType_Elaborated
   type PDEVICE_MANAGE_DATA_SET_ATTRIBUTES is access DEVICE_MANAGE_DATA_SET_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_INPUT is DEVICE_MANAGE_DATA_SET_ATTRIBUTES_x; -- CXType_Elaborated
   type PDEVICE_DSM_INPUT is access DEVICE_MANAGE_DATA_SET_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT_x is record
      Size_x : DWORD;
      Action : DEVICE_DSM_ACTION;
      Flags : DWORD;
      OperationStatus : DWORD;
      ExtendedError : DWORD;
      TargetDetailedError : DWORD;
      ReservedStatus : DWORD;
      OutputBlockOffset : DWORD;
      OutputBlockLength : DWORD;
   end record;
   subtype DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT is DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT is access DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_OUTPUT is DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_OUTPUT is access DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_DEFINITION_x is record
      Action : DEVICE_DSM_ACTION;
      SingleRange : BOOLEAN;
      ParameterBlockAlignment : DWORD;
      ParameterBlockLength : DWORD;
      HasOutput : BOOLEAN;
      OutputBlockAlignment : DWORD;
      OutputBlockLength : DWORD;
   end record;
   subtype DEVICE_DSM_DEFINITION is DEVICE_DSM_DEFINITION_x; -- CXType_Elaborated
   type PDEVICE_DSM_DEFINITION is access DEVICE_DSM_DEFINITION_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_NOTIFICATION_PARAMETERS_x is record
      Size_x : DWORD;
      Flags : DWORD;
      NumFileTypeIDs : DWORD;
      FileTypeID : Void;
   end record;
   subtype DEVICE_DSM_NOTIFICATION_PARAMETERS is DEVICE_DSM_NOTIFICATION_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_NOTIFICATION_PARAMETERS is access DEVICE_DSM_NOTIFICATION_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_OFFLOAD_TOKEN_x is record
      TokenType : Void;
      Reserved : Void;
      TokenIdLength : Void;
   end record;
   subtype STORAGE_OFFLOAD_TOKEN is STORAGE_OFFLOAD_TOKEN_x; -- CXType_Elaborated
   type PSTORAGE_OFFLOAD_TOKEN is access STORAGE_OFFLOAD_TOKEN_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_OFFLOAD_READ_PARAMETERS_x is record
      Flags : DWORD;
      TimeToLive : DWORD;
      Reserved : Void;
   end record;
   subtype DEVICE_DSM_OFFLOAD_READ_PARAMETERS is DEVICE_DSM_OFFLOAD_READ_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_OFFLOAD_READ_PARAMETERS is access DEVICE_DSM_OFFLOAD_READ_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_OFFLOAD_READ_OUTPUT_x is record
      OffloadReadFlags : DWORD;
      Reserved : DWORD;
      LengthProtected : DWORDLONG;
      TokenLength : DWORD;
      Token : STORAGE_OFFLOAD_TOKEN;
   end record;
   subtype STORAGE_OFFLOAD_READ_OUTPUT is STORAGE_OFFLOAD_READ_OUTPUT_x; -- CXType_Elaborated
   type PSTORAGE_OFFLOAD_READ_OUTPUT is access STORAGE_OFFLOAD_READ_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS_x is record
      Flags : DWORD;
      Reserved : DWORD;
      TokenOffset : DWORDLONG;
      Token : STORAGE_OFFLOAD_TOKEN;
   end record;
   subtype DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS is DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS is access DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_OFFLOAD_WRITE_OUTPUT_x is record
      OffloadWriteFlags : DWORD;
      Reserved : DWORD;
      LengthCopied : DWORDLONG;
   end record;
   subtype STORAGE_OFFLOAD_WRITE_OUTPUT is STORAGE_OFFLOAD_WRITE_OUTPUT_x; -- CXType_Elaborated
   type PSTORAGE_OFFLOAD_WRITE_OUTPUT is access STORAGE_OFFLOAD_WRITE_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_LBP_STATE_PARAMETERS_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      OutputVersion : DWORD;
   end record;
   subtype DEVICE_DATA_SET_LBP_STATE_PARAMETERS is DEVICE_DATA_SET_LBP_STATE_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_LBP_STATE_PARAMETERS is access DEVICE_DATA_SET_LBP_STATE_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_ALLOCATION_PARAMETERS is DEVICE_DATA_SET_LBP_STATE_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_ALLOCATION_PARAMETERS is access DEVICE_DATA_SET_LBP_STATE_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_LB_PROVISIONING_STATE_x is record
      Size_x : DWORD;
      Version : DWORD;
      SlabSizeInBytes : DWORDLONG;
      SlabOffsetDeltaInBytes : DWORD;
      SlabAllocationBitMapBitCount : DWORD;
      SlabAllocationBitMapLength : DWORD;
      SlabAllocationBitMap : Void;
   end record;
   subtype DEVICE_DATA_SET_LB_PROVISIONING_STATE is DEVICE_DATA_SET_LB_PROVISIONING_STATE_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_LB_PROVISIONING_STATE is access DEVICE_DATA_SET_LB_PROVISIONING_STATE_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_ALLOCATION_OUTPUT is DEVICE_DATA_SET_LB_PROVISIONING_STATE_x; -- CXType_Elaborated
   type PDEVICE_DSM_ALLOCATION_OUTPUT is access DEVICE_DATA_SET_LB_PROVISIONING_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2_x is record
      Size_x : DWORD;
      Version : DWORD;
      SlabSizeInBytes : DWORDLONG;
      SlabOffsetDeltaInBytes : DWORDLONG;
      SlabAllocationBitMapBitCount : DWORD;
      SlabAllocationBitMapLength : DWORD;
      SlabAllocationBitMap : Void;
   end record;
   subtype DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 is DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 is access DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_ALLOCATION_OUTPUT2 is DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2_x; -- CXType_Elaborated
   type PDEVICE_DSM_ALLOCATION_OUTPUT2 is access DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_REPAIR_PARAMETERS_x is record
      NumberOfRepairCopies : DWORD;
      SourceCopy : DWORD;
      RepairCopies : Void;
   end record;
   subtype DEVICE_DATA_SET_REPAIR_PARAMETERS is DEVICE_DATA_SET_REPAIR_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_REPAIR_PARAMETERS is access DEVICE_DATA_SET_REPAIR_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_REPAIR_PARAMETERS is DEVICE_DATA_SET_REPAIR_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_REPAIR_PARAMETERS is access DEVICE_DATA_SET_REPAIR_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_REPAIR_OUTPUT_x is record
      ParityExtent : DEVICE_DSM_RANGE;
   end record;
   subtype DEVICE_DATA_SET_REPAIR_OUTPUT is DEVICE_DATA_SET_REPAIR_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_REPAIR_OUTPUT is access DEVICE_DATA_SET_REPAIR_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_REPAIR_OUTPUT is DEVICE_DATA_SET_REPAIR_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_REPAIR_OUTPUT is access DEVICE_DATA_SET_REPAIR_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_SCRUB_OUTPUT_x is record
      BytesProcessed : DWORDLONG;
      BytesRepaired : DWORDLONG;
      BytesFailed : DWORDLONG;
   end record;
   subtype DEVICE_DATA_SET_SCRUB_OUTPUT is DEVICE_DATA_SET_SCRUB_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_SCRUB_OUTPUT is access DEVICE_DATA_SET_SCRUB_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_SCRUB_OUTPUT is DEVICE_DATA_SET_SCRUB_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_SCRUB_OUTPUT is access DEVICE_DATA_SET_SCRUB_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_SCRUB_EX_OUTPUT_x is record
      BytesProcessed : DWORDLONG;
      BytesRepaired : DWORDLONG;
      BytesFailed : DWORDLONG;
      ParityExtent : DEVICE_DSM_RANGE;
   end record;
   subtype DEVICE_DATA_SET_SCRUB_EX_OUTPUT is DEVICE_DATA_SET_SCRUB_EX_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_SCRUB_EX_OUTPUT is access DEVICE_DATA_SET_SCRUB_EX_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_SCRUB_OUTPUT2 is DEVICE_DATA_SET_SCRUB_EX_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_SCRUB_OUTPUT2 is access DEVICE_DATA_SET_SCRUB_EX_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_TIERING_QUERY_INPUT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      NumberOfTierIds : DWORD;
      TierIds : Void;
   end record;
   subtype DEVICE_DSM_TIERING_QUERY_INPUT is DEVICE_DSM_TIERING_QUERY_INPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_TIERING_QUERY_INPUT is access DEVICE_DSM_TIERING_QUERY_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_TIERING_QUERY_PARAMETERS is DEVICE_DSM_TIERING_QUERY_INPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_TIERING_QUERY_PARAMETERS is access DEVICE_DSM_TIERING_QUERY_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_TIER_REGION_x is record
      TierId : GUID;
      Offset : DWORDLONG;
      Length : DWORDLONG;
   end record;
   subtype STORAGE_TIER_REGION is STORAGE_TIER_REGION_x; -- CXType_Elaborated
   type PSTORAGE_TIER_REGION is access STORAGE_TIER_REGION_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_TIERING_QUERY_OUTPUT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      Reserved : DWORD;
      Alignment : DWORDLONG;
      TotalNumberOfRegions : DWORD;
      NumberOfRegionsReturned : DWORD;
      Regions : Void;
   end record;
   subtype DEVICE_DSM_TIERING_QUERY_OUTPUT is DEVICE_DSM_TIERING_QUERY_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_TIERING_QUERY_OUTPUT is access DEVICE_DSM_TIERING_QUERY_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS_x is record
      Size_x : DWORD;
      TargetPriority : BYTE;
      Reserved : Void;
   end record;
   subtype DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS is DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS is access DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT_x is record
      TopologyRangeBytes : DWORDLONG;
      TopologyId : Void;
   end record;
   subtype DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT is DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT is access DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT is DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT is access DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_STORAGE_ADDRESS_RANGE_x is record
      StartAddress : LONGLONG;
      LengthInBytes : DWORDLONG;
   end record;
   subtype DEVICE_STORAGE_ADDRESS_RANGE is DEVICE_STORAGE_ADDRESS_RANGE_x; -- CXType_Elaborated
   type PDEVICE_STORAGE_ADDRESS_RANGE is access DEVICE_STORAGE_ADDRESS_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_x is record
      Version : DWORD;
      Flags : DWORD;
      TotalNumberOfRanges : DWORD;
      NumberOfRangesReturned : DWORD;
      Ranges : Void;
   end record;
   subtype DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT is DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT is access DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_REPORT_ZONES_PARAMETERS_x is record
      Size_x : DWORD;
      ReportOption : BYTE;
      Partial : BYTE;
      Reserved : Void;
   end record;
   subtype DEVICE_DSM_REPORT_ZONES_PARAMETERS is DEVICE_DSM_REPORT_ZONES_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_REPORT_ZONES_PARAMETERS is access DEVICE_DSM_REPORT_ZONES_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONES_ATTRIBUTES_x is (
      ZonesAttributeTypeAndLengthMayDifferent,
      ZonesAttributeTypeSameLengthSame,
      ZonesAttributeTypeSameLastZoneLengthDifferent,
      ZonesAttributeTypeMayDifferentLengthSame
   );
   for STORAGE_ZONES_ATTRIBUTES_x use (
      ZonesAttributeTypeAndLengthMayDifferent => 0,
      ZonesAttributeTypeSameLengthSame => 1,
      ZonesAttributeTypeSameLastZoneLengthDifferent => 2,
      ZonesAttributeTypeMayDifferentLengthSame => 3
   );
   for STORAGE_ZONES_ATTRIBUTES_x'Size use 32;
   subtype STORAGE_ZONES_ATTRIBUTES is STORAGE_ZONES_ATTRIBUTES_x; -- CXType_Elaborated
   type PSTORAGE_ZONES_ATTRIBUTES is access STORAGE_ZONES_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONE_CONDITION_x is (
      ZoneConditionConventional,
      ZoneConditionEmpty,
      ZoneConditionImplicitlyOpened,
      ZoneConditionExplicitlyOpened,
      ZoneConditionClosed,
      ZoneConditionReadOnly,
      ZoneConditionFull,
      ZoneConditionOffline
   );
   for STORAGE_ZONE_CONDITION_x use (
      ZoneConditionConventional => 0,
      ZoneConditionEmpty => 1,
      ZoneConditionImplicitlyOpened => 2,
      ZoneConditionExplicitlyOpened => 3,
      ZoneConditionClosed => 4,
      ZoneConditionReadOnly => 13,
      ZoneConditionFull => 14,
      ZoneConditionOffline => 15
   );
   for STORAGE_ZONE_CONDITION_x'Size use 32;
   subtype STORAGE_ZONE_CONDITION is STORAGE_ZONE_CONDITION_x; -- CXType_Elaborated
   type PSTORAGE_ZONE_CONDITION is access STORAGE_ZONE_CONDITION_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ZONE_DESCRIPTOR_x is record
      Size_x : DWORD;
      ZoneType : STORAGE_ZONE_TYPES;
      ZoneCondition : STORAGE_ZONE_CONDITION;
      ResetWritePointerRecommend : BOOLEAN;
      Reserved0 : Void;
      ZoneSize : DWORDLONG;
      WritePointerOffset : DWORDLONG;
   end record;
   subtype STORAGE_ZONE_DESCRIPTOR is STORAGE_ZONE_DESCRIPTOR_x; -- CXType_Elaborated
   type PSTORAGE_ZONE_DESCRIPTOR is access STORAGE_ZONE_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_REPORT_ZONES_DATA_x is record
      Size_x : DWORD;
      ZoneCount : DWORD;
      Attributes : STORAGE_ZONES_ATTRIBUTES;
      Reserved0 : DWORD;
      ZoneDescriptors : Void;
   end record;
   subtype DEVICE_DSM_REPORT_ZONES_DATA is DEVICE_DSM_REPORT_ZONES_DATA_x; -- CXType_Elaborated
   type PDEVICE_DSM_REPORT_ZONES_DATA is access DEVICE_DSM_REPORT_ZONES_DATA_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_REPORT_ZONES_OUTPUT is DEVICE_DSM_REPORT_ZONES_DATA_x; -- CXType_Elaborated
   type PDEVICE_DSM_REPORT_ZONES_OUTPUT is access DEVICE_DSM_REPORT_ZONES_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_STORAGE_RANGE_ATTRIBUTES_x is record
      LengthInBytes : DWORDLONG;
      Reserved : DWORD;
   end record;
   subtype DEVICE_STORAGE_RANGE_ATTRIBUTES is DEVICE_STORAGE_RANGE_ATTRIBUTES_x; -- CXType_Elaborated
   type PDEVICE_STORAGE_RANGE_ATTRIBUTES is access DEVICE_STORAGE_RANGE_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_RANGE_ERROR_INFO_x is record
      Version : DWORD;
      Flags : DWORD;
      TotalNumberOfRanges : DWORD;
      NumberOfRangesReturned : DWORD;
      Ranges : Void;
   end record;
   subtype DEVICE_DSM_RANGE_ERROR_INFO is DEVICE_DSM_RANGE_ERROR_INFO_x; -- CXType_Elaborated
   type PDEVICE_DSM_RANGE_ERROR_INFO is access DEVICE_DSM_RANGE_ERROR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   subtype DEVICE_DSM_RANGE_ERROR_OUTPUT is DEVICE_DSM_RANGE_ERROR_INFO_x; -- CXType_Elaborated
   type PDEVICE_DSM_RANGE_ERROR_OUTPUT is access DEVICE_DSM_RANGE_ERROR_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_LOST_QUERY_PARAMETERS_x is record
      Version : DWORD;
      Granularity : DWORDLONG;
   end record;
   subtype DEVICE_DSM_LOST_QUERY_PARAMETERS is DEVICE_DSM_LOST_QUERY_PARAMETERS_x; -- CXType_Elaborated
   type PDEVICE_DSM_LOST_QUERY_PARAMETERS is access DEVICE_DSM_LOST_QUERY_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_LOST_QUERY_OUTPUT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Alignment : DWORDLONG;
      NumberOfBits : DWORD;
      BitMap_x : Void;
   end record;
   subtype DEVICE_DSM_LOST_QUERY_OUTPUT is DEVICE_DSM_LOST_QUERY_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_LOST_QUERY_OUTPUT is access DEVICE_DSM_LOST_QUERY_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICE_DSM_FREE_SPACE_OUTPUT_x is record
      Version : DWORD;
      FreeSpace : DWORDLONG;
   end record;
   subtype DEVICE_DSM_FREE_SPACE_OUTPUT is DEVICE_DSM_FREE_SPACE_OUTPUT_x; -- CXType_Elaborated
   type PDEVICE_DSM_FREE_SPACE_OUTPUT is access DEVICE_DSM_FREE_SPACE_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   -- DeviceDsmParameterBlock(); -- inlined function not supported
   -- DeviceDsmDataSetRanges(); -- inlined function not supported
   -- DeviceDsmNumberOfDataSetRanges(); -- inlined function not supported
   -- DeviceDsmGetInputLength(); -- inlined function not supported
   -- DeviceDsmGetNumberOfDataSetRanges(); -- inlined function not supported
   -- DeviceDsmInitializeInput(); -- inlined function not supported
   -- DeviceDsmAddDataSetRange(); -- inlined function not supported
   -- DeviceDsmValidateInput(); -- inlined function not supported
   -- DeviceDsmOutputBlock(); -- inlined function not supported
   -- DeviceDsmGetOutputLength(); -- inlined function not supported
   -- DeviceDsmGetOutputBlockLength(); -- inlined function not supported
   -- DeviceDsmInitializeOutput(); -- inlined function not supported
   -- DeviceDsmValidateOutput(); -- inlined function not supported
   type STORAGE_GET_BC_PROPERTIES_OUTPUT_x is record
      MaximumRequestsPerPeriod : DWORD;
      MinimumPeriod : DWORD;
      MaximumRequestSize : DWORDLONG;
      EstimatedTimePerRequest : DWORD;
      NumOutStandingRequests : DWORD;
      RequestSize : DWORDLONG;
   end record;
   subtype STORAGE_GET_BC_PROPERTIES_OUTPUT is STORAGE_GET_BC_PROPERTIES_OUTPUT_x; -- CXType_Elaborated
   type PSTORAGE_GET_BC_PROPERTIES_OUTPUT is access STORAGE_GET_BC_PROPERTIES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ALLOCATE_BC_STREAM_INPUT_x is record
      Version : DWORD;
      RequestsPerPeriod : DWORD;
      Period : DWORD;
      RetryFailures : BOOLEAN;
      Discardable : BOOLEAN;
      Reserved1 : Void;
      AccessType : DWORD;
      AccessMode : DWORD;
   end record;
   subtype STORAGE_ALLOCATE_BC_STREAM_INPUT is STORAGE_ALLOCATE_BC_STREAM_INPUT_x; -- CXType_Elaborated
   type PSTORAGE_ALLOCATE_BC_STREAM_INPUT is access STORAGE_ALLOCATE_BC_STREAM_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ALLOCATE_BC_STREAM_OUTPUT_x is record
      RequestSize : DWORDLONG;
      NumOutStandingRequests : DWORD;
   end record;
   subtype STORAGE_ALLOCATE_BC_STREAM_OUTPUT is STORAGE_ALLOCATE_BC_STREAM_OUTPUT_x; -- CXType_Elaborated
   type PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT is access STORAGE_ALLOCATE_BC_STREAM_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PRIORITY_HINT_SUPPORT_x is record
      SupportFlags : DWORD;
   end record;
   subtype STORAGE_PRIORITY_HINT_SUPPORT is STORAGE_PRIORITY_HINT_SUPPORT_x; -- CXType_Elaborated
   type PSTORAGE_PRIORITY_HINT_SUPPORT is access STORAGE_PRIORITY_HINT_SUPPORT_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DIAGNOSTIC_LEVEL_x is (
      StorageDiagnosticLevelDefault,
      StorageDiagnosticLevelMax
   );
   for STORAGE_DIAGNOSTIC_LEVEL_x use (
      StorageDiagnosticLevelDefault => 0,
      StorageDiagnosticLevelMax => 1
   );
   for STORAGE_DIAGNOSTIC_LEVEL_x'Size use 32;
   subtype STORAGE_DIAGNOSTIC_LEVEL is STORAGE_DIAGNOSTIC_LEVEL_x; -- CXType_Elaborated
   type PSTORAGE_DIAGNOSTIC_LEVEL is access STORAGE_DIAGNOSTIC_LEVEL_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DIAGNOSTIC_TARGET_TYPE_x is (
      StorageDiagnosticTargetTypeUndefined,
      StorageDiagnosticTargetTypePort,
      StorageDiagnosticTargetTypeMiniport,
      StorageDiagnosticTargetTypeHbaFirmware,
      StorageDiagnosticTargetTypeMax
   );
   for STORAGE_DIAGNOSTIC_TARGET_TYPE_x use (
      StorageDiagnosticTargetTypeUndefined => 0,
      StorageDiagnosticTargetTypePort => 1,
      StorageDiagnosticTargetTypeMiniport => 2,
      StorageDiagnosticTargetTypeHbaFirmware => 3,
      StorageDiagnosticTargetTypeMax => 4
   );
   for STORAGE_DIAGNOSTIC_TARGET_TYPE_x'Size use 32;
   subtype STORAGE_DIAGNOSTIC_TARGET_TYPE is STORAGE_DIAGNOSTIC_TARGET_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_DIAGNOSTIC_TARGET_TYPE is access STORAGE_DIAGNOSTIC_TARGET_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DIAGNOSTIC_REQUEST_x is record
      Version : DWORD;
      Size_x : DWORD;
      Reserved : DWORD;
      TargetType : STORAGE_DIAGNOSTIC_TARGET_TYPE;
      Level : STORAGE_DIAGNOSTIC_LEVEL;
   end record;
   subtype STORAGE_DIAGNOSTIC_REQUEST is STORAGE_DIAGNOSTIC_REQUEST_x; -- CXType_Elaborated
   type PSTORAGE_DIAGNOSTIC_REQUEST is access STORAGE_DIAGNOSTIC_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DIAGNOSTIC_DATA_x is record
      Version : DWORD;
      Size_x : DWORD;
      ProviderId : GUID;
      BufferSize : DWORD;
      Reserved : DWORD;
      DiagnosticDataBuffer : Void;
   end record;
   subtype STORAGE_DIAGNOSTIC_DATA is STORAGE_DIAGNOSTIC_DATA_x; -- CXType_Elaborated
   type PSTORAGE_DIAGNOSTIC_DATA is access STORAGE_DIAGNOSTIC_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type PHYSICAL_ELEMENT_STATUS_REQUEST_x is record
      Version : DWORD;
      Size_x : DWORD;
      StartingElement : DWORD;
      Filter : BYTE;
      ReportType : BYTE;
      Reserved : Void;
   end record;
   subtype PHYSICAL_ELEMENT_STATUS_REQUEST is PHYSICAL_ELEMENT_STATUS_REQUEST_x; -- CXType_Elaborated
   type PPHYSICAL_ELEMENT_STATUS_REQUEST is access PHYSICAL_ELEMENT_STATUS_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type PHYSICAL_ELEMENT_STATUS_DESCRIPTOR_x is record
      Version : DWORD;
      Size_x : DWORD;
      ElementIdentifier : DWORD;
      PhysicalElementType : BYTE;
      PhysicalElementHealth : BYTE;
      Reserved1 : Void;
      AssociatedCapacity : DWORDLONG;
      Reserved2 : Void;
   end record;
   subtype PHYSICAL_ELEMENT_STATUS_DESCRIPTOR is PHYSICAL_ELEMENT_STATUS_DESCRIPTOR_x; -- CXType_Elaborated
   type PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR is access PHYSICAL_ELEMENT_STATUS_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type PHYSICAL_ELEMENT_STATUS_x is record
      Version : DWORD;
      Size_x : DWORD;
      DescriptorCount : DWORD;
      ReturnedDescriptorCount : DWORD;
      ElementIdentifierBeingDepoped : DWORD;
      Reserved : DWORD;
      Descriptors : Void;
   end record;
   subtype PHYSICAL_ELEMENT_STATUS is PHYSICAL_ELEMENT_STATUS_x; -- CXType_Elaborated
   type PPHYSICAL_ELEMENT_STATUS is access PHYSICAL_ELEMENT_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type REMOVE_ELEMENT_AND_TRUNCATE_REQUEST_x is record
      Version : DWORD;
      Size_x : DWORD;
      RequestCapacity : DWORDLONG;
      ElementIdentifier : DWORD;
      Reserved : DWORD;
   end record;
   subtype REMOVE_ELEMENT_AND_TRUNCATE_REQUEST is REMOVE_ELEMENT_AND_TRUNCATE_REQUEST_x; -- CXType_Elaborated
   type PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST is access REMOVE_ELEMENT_AND_TRUNCATE_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_MEDIA_SERIAL_NUMBER_DATA_x is record
      Reserved : WORD;
      SerialNumberLength : WORD;
      SerialNumber : Void;
   end record;
   subtype STORAGE_MEDIA_SERIAL_NUMBER_DATA is STORAGE_MEDIA_SERIAL_NUMBER_DATA_x; -- CXType_Elaborated
   type PSTORAGE_MEDIA_SERIAL_NUMBER_DATA is access STORAGE_MEDIA_SERIAL_NUMBER_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_READ_CAPACITY_x is record
      Version : DWORD;
      Size_x : DWORD;
      BlockLength : DWORD;
      NumberOfBlocks : LARGE_INTEGER;
      DiskLength : LARGE_INTEGER;
   end record;
   subtype STORAGE_READ_CAPACITY is STORAGE_READ_CAPACITY_x; -- CXType_Elaborated
   type PSTORAGE_READ_CAPACITY is access STORAGE_READ_CAPACITY_x; -- CXType_Pointer - CXType_Elaborated
   type WRITE_CACHE_TYPE_x is (
      WriteCacheTypeUnknown,
      WriteCacheTypeNone,
      WriteCacheTypeWriteBack,
      WriteCacheTypeWriteThrough
   );
   for WRITE_CACHE_TYPE_x use (
      WriteCacheTypeUnknown => 0,
      WriteCacheTypeNone => 1,
      WriteCacheTypeWriteBack => 2,
      WriteCacheTypeWriteThrough => 3
   );
   for WRITE_CACHE_TYPE_x'Size use 32;
   subtype WRITE_CACHE_TYPE is WRITE_CACHE_TYPE_x; -- CXType_Elaborated
   type WRITE_CACHE_ENABLE_x is (
      WriteCacheEnableUnknown,
      WriteCacheDisabled,
      WriteCacheEnabled
   );
   for WRITE_CACHE_ENABLE_x use (
      WriteCacheEnableUnknown => 0,
      WriteCacheDisabled => 1,
      WriteCacheEnabled => 2
   );
   for WRITE_CACHE_ENABLE_x'Size use 32;
   subtype WRITE_CACHE_ENABLE is WRITE_CACHE_ENABLE_x; -- CXType_Elaborated
   type WRITE_CACHE_CHANGE_x is (
      WriteCacheChangeUnknown,
      WriteCacheNotChangeable,
      WriteCacheChangeable
   );
   for WRITE_CACHE_CHANGE_x use (
      WriteCacheChangeUnknown => 0,
      WriteCacheNotChangeable => 1,
      WriteCacheChangeable => 2
   );
   for WRITE_CACHE_CHANGE_x'Size use 32;
   subtype WRITE_CACHE_CHANGE is WRITE_CACHE_CHANGE_x; -- CXType_Elaborated
   type WRITE_THROUGH_x is (
      WriteThroughUnknown,
      WriteThroughNotSupported,
      WriteThroughSupported
   );
   for WRITE_THROUGH_x use (
      WriteThroughUnknown => 0,
      WriteThroughNotSupported => 1,
      WriteThroughSupported => 2
   );
   for WRITE_THROUGH_x'Size use 32;
   subtype WRITE_THROUGH is WRITE_THROUGH_x; -- CXType_Elaborated
   type STORAGE_WRITE_CACHE_PROPERTY_x is record
      Version : DWORD;
      Size_x : DWORD;
      WriteCacheType : WRITE_CACHE_TYPE;
      WriteCacheEnabled : WRITE_CACHE_ENABLE;
      WriteCacheChangeable : WRITE_CACHE_CHANGE;
      WriteThroughSupported : WRITE_THROUGH;
      FlushCacheSupported : BOOLEAN;
      UserDefinedPowerProtection : BOOLEAN;
      NVCacheEnabled : BOOLEAN;
   end record;
   subtype STORAGE_WRITE_CACHE_PROPERTY is STORAGE_WRITE_CACHE_PROPERTY_x; -- CXType_Elaborated
   type PSTORAGE_WRITE_CACHE_PROPERTY is access STORAGE_WRITE_CACHE_PROPERTY_x; -- CXType_Pointer - CXType_Elaborated
   type PERSISTENT_RESERVE_COMMAND_x is record
      Version : DWORD;
      Size_x : DWORD;
   end record;
   subtype PERSISTENT_RESERVE_COMMAND is PERSISTENT_RESERVE_COMMAND_x; -- CXType_Elaborated
   type PPERSISTENT_RESERVE_COMMAND is access PERSISTENT_RESERVE_COMMAND_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_COLLECTION_TYPE_x is (
      TCCollectionBugCheck,
      TCCollectionApplicationRequested,
      TCCollectionDeviceRequested
   );
   for DEVICEDUMP_COLLECTION_TYPE_x use (
      TCCollectionBugCheck => 1,
      TCCollectionApplicationRequested => 2,
      TCCollectionDeviceRequested => 3
   );
   for DEVICEDUMP_COLLECTION_TYPE_x'Size use 32;
   subtype DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE is DEVICEDUMP_COLLECTION_TYPE_x; -- CXType_Elaborated
   type PDEVICEDUMP_COLLECTION_TYPE is access DEVICEDUMP_COLLECTION_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_SUBSECTION_POINTER_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      dwOffset : DWORD;
   end record;
   subtype DEVICEDUMP_SUBSECTION_POINTER is DEVICEDUMP_SUBSECTION_POINTER_x; -- CXType_Elaborated
   type PDEVICEDUMP_SUBSECTION_POINTER is access DEVICEDUMP_SUBSECTION_POINTER_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_STRUCTURE_VERSION_x is record
      dwSignature : DWORD;
      dwVersion : DWORD;
      dwSize : DWORD;
   end record;
   subtype DEVICEDUMP_STRUCTURE_VERSION is DEVICEDUMP_STRUCTURE_VERSION_x; -- CXType_Elaborated
   type PDEVICEDUMP_STRUCTURE_VERSION is access DEVICEDUMP_STRUCTURE_VERSION_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_SECTION_HEADER_x is record
      guidDeviceDataId : GUID;
      sOrganizationID : Void;
      dwFirmwareRevision : DWORD;
      sModelNumber : Void;
      szDeviceManufacturingID : Void;
      dwFlags : DWORD;
      bRestrictedPrivateDataVersion : DWORD;
      dwFirmwareIssueId : DWORD;
      szIssueDescriptionString : Void;
   end record;
   subtype DEVICEDUMP_SECTION_HEADER is DEVICEDUMP_SECTION_HEADER_x; -- CXType_Elaborated
   type PDEVICEDUMP_SECTION_HEADER is access DEVICEDUMP_SECTION_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   type GP_LOG_PAGE_DESCRIPTOR_x is record
      LogAddress : WORD;
      LogSectors : WORD;
   end record;
   subtype GP_LOG_PAGE_DESCRIPTOR is GP_LOG_PAGE_DESCRIPTOR_x; -- CXType_Elaborated
   type PGP_LOG_PAGE_DESCRIPTOR is access GP_LOG_PAGE_DESCRIPTOR_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_PUBLIC_SUBSECTION_x is record
      dwFlags : DWORD;
      GPLogTable : Void;
      szDescription : Void;
      bData : Void;
   end record;
   subtype DEVICEDUMP_PUBLIC_SUBSECTION is DEVICEDUMP_PUBLIC_SUBSECTION_x; -- CXType_Elaborated
   type PDEVICEDUMP_PUBLIC_SUBSECTION is access DEVICEDUMP_PUBLIC_SUBSECTION_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_RESTRICTED_SUBSECTION_x is record
      bData : Void;
   end record;
   subtype DEVICEDUMP_RESTRICTED_SUBSECTION is DEVICEDUMP_RESTRICTED_SUBSECTION_x; -- CXType_Elaborated
   type PDEVICEDUMP_RESTRICTED_SUBSECTION is access DEVICEDUMP_RESTRICTED_SUBSECTION_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_PRIVATE_SUBSECTION_x is record
      dwFlags : DWORD;
      GPLogId : GP_LOG_PAGE_DESCRIPTOR;
      bData : Void;
   end record;
   subtype DEVICEDUMP_PRIVATE_SUBSECTION is DEVICEDUMP_PRIVATE_SUBSECTION_x; -- CXType_Elaborated
   type PDEVICEDUMP_PRIVATE_SUBSECTION is access DEVICEDUMP_PRIVATE_SUBSECTION_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_STORAGEDEVICE_DATA_x is record
      Descriptor : DEVICEDUMP_STRUCTURE_VERSION;
      SectionHeader : DEVICEDUMP_SECTION_HEADER;
      dwBufferSize : DWORD;
      dwReasonForCollection : DWORD;
      PublicData : DEVICEDUMP_SUBSECTION_POINTER;
      RestrictedData : DEVICEDUMP_SUBSECTION_POINTER;
      PrivateData : DEVICEDUMP_SUBSECTION_POINTER;
   end record;
   subtype DEVICEDUMP_STORAGEDEVICE_DATA is DEVICEDUMP_STORAGEDEVICE_DATA_x; -- CXType_Elaborated
   type PDEVICEDUMP_STORAGEDEVICE_DATA is access DEVICEDUMP_STORAGEDEVICE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD_x is record
      Cdb : Void;
      Command : Void;
      StartTime : DWORDLONG;
      EndTime : DWORDLONG;
      OperationStatus : DWORD;
      OperationError : DWORD;
      StackSpecific : Void;
   end record;
   subtype DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD is DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD_x; -- CXType_Elaborated
   type PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD is access DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP_x is record
      Descriptor : DEVICEDUMP_STRUCTURE_VERSION;
      dwReasonForCollection : DWORD;
      cDriverName : Void;
      uiNumRecords : DWORD;
      RecordArray : Void;
   end record;
   subtype DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP is DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP_x; -- CXType_Elaborated
   type PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP is access DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_IDLE_POWER_x is record
      Version : DWORD;
      Size_x : DWORD;
      WakeCapableHint : DWORD;
      D3ColdSupported : DWORD;
      Reserved : DWORD;
      D3IdleTimeout : DWORD;
   end record;
   subtype STORAGE_IDLE_POWER is STORAGE_IDLE_POWER_x; -- CXType_Elaborated
   type PSTORAGE_IDLE_POWER is access STORAGE_IDLE_POWER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_POWERUP_REASON_TYPE_x is (
      StoragePowerupUnknown,
      StoragePowerupIO,
      StoragePowerupDeviceAttention
   );
   for STORAGE_POWERUP_REASON_TYPE_x use (
      StoragePowerupUnknown => 0,
      StoragePowerupIO => 1,
      StoragePowerupDeviceAttention => 2
   );
   for STORAGE_POWERUP_REASON_TYPE_x'Size use 32;
   subtype STORAGE_POWERUP_REASON_TYPE is STORAGE_POWERUP_REASON_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_POWERUP_REASON_TYPE is access STORAGE_POWERUP_REASON_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_IDLE_POWERUP_REASON_x is record
      Version : DWORD;
      Size_x : DWORD;
      PowerupReason : STORAGE_POWERUP_REASON_TYPE;
   end record;
   subtype STORAGE_IDLE_POWERUP_REASON is STORAGE_IDLE_POWERUP_REASON_x; -- CXType_Elaborated
   type PSTORAGE_IDLE_POWERUP_REASON is access STORAGE_IDLE_POWERUP_REASON_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_POWER_CAP_UNITS_x is (
      StorageDevicePowerCapUnitsPercent,
      StorageDevicePowerCapUnitsMilliwatts
   );
   for STORAGE_DEVICE_POWER_CAP_UNITS_x use (
      StorageDevicePowerCapUnitsPercent => 0,
      StorageDevicePowerCapUnitsMilliwatts => 1
   );
   for STORAGE_DEVICE_POWER_CAP_UNITS_x'Size use 32;
   subtype STORAGE_DEVICE_POWER_CAP_UNITS is STORAGE_DEVICE_POWER_CAP_UNITS_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_POWER_CAP_UNITS is access STORAGE_DEVICE_POWER_CAP_UNITS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_DEVICE_POWER_CAP_x is record
      Version : DWORD;
      Size_x : DWORD;
      Units : STORAGE_DEVICE_POWER_CAP_UNITS;
      MaxPower : DWORDLONG;
   end record;
   subtype STORAGE_DEVICE_POWER_CAP is STORAGE_DEVICE_POWER_CAP_x; -- CXType_Elaborated
   type PSTORAGE_DEVICE_POWER_CAP is access STORAGE_DEVICE_POWER_CAP_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_RPMB_DATA_FRAME_x is record
      Stuff : Void;
      KeyOrMAC : Void;
      Data : Void;
      Nonce : Void;
      WriteCounter : Void;
      Address : Void;
      BlockCount : Void;
      OperationResult : Void;
      RequestOrResponseType : Void;
   end record;
   subtype STORAGE_RPMB_DATA_FRAME is STORAGE_RPMB_DATA_FRAME_x; -- CXType_Elaborated
   type PSTORAGE_RPMB_DATA_FRAME is access STORAGE_RPMB_DATA_FRAME_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_RPMB_COMMAND_TYPE_x is (
      StorRpmbProgramAuthKey,
      StorRpmbQueryWriteCounter,
      StorRpmbAuthenticatedWrite,
      StorRpmbAuthenticatedRead,
      StorRpmbReadResultRequest,
      StorRpmbAuthenticatedDeviceConfigWrite,
      StorRpmbAuthenticatedDeviceConfigRead
   );
   for STORAGE_RPMB_COMMAND_TYPE_x use (
      StorRpmbProgramAuthKey => 1,
      StorRpmbQueryWriteCounter => 2,
      StorRpmbAuthenticatedWrite => 3,
      StorRpmbAuthenticatedRead => 4,
      StorRpmbReadResultRequest => 5,
      StorRpmbAuthenticatedDeviceConfigWrite => 6,
      StorRpmbAuthenticatedDeviceConfigRead => 7
   );
   for STORAGE_RPMB_COMMAND_TYPE_x'Size use 32;
   subtype STORAGE_RPMB_COMMAND_TYPE is STORAGE_RPMB_COMMAND_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_RPMB_COMMAND_TYPE is access STORAGE_RPMB_COMMAND_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_EVENT_NOTIFICATION_x is record
      Version : DWORD;
      Size_x : DWORD;
      Events : DWORDLONG;
   end record;
   subtype STORAGE_EVENT_NOTIFICATION is STORAGE_EVENT_NOTIFICATION_x; -- CXType_Elaborated
   type PSTORAGE_EVENT_NOTIFICATION is access STORAGE_EVENT_NOTIFICATION_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_COUNTER_TYPE_x is (
      StorageCounterTypeUnknown,
      StorageCounterTypeTemperatureCelsius,
      StorageCounterTypeTemperatureCelsiusMax,
      StorageCounterTypeReadErrorsTotal,
      StorageCounterTypeReadErrorsCorrected,
      StorageCounterTypeReadErrorsUncorrected,
      StorageCounterTypeWriteErrorsTotal,
      StorageCounterTypeWriteErrorsCorrected,
      StorageCounterTypeWriteErrorsUncorrected,
      StorageCounterTypeManufactureDate,
      StorageCounterTypeStartStopCycleCount,
      StorageCounterTypeStartStopCycleCountMax,
      StorageCounterTypeLoadUnloadCycleCount,
      StorageCounterTypeLoadUnloadCycleCountMax,
      StorageCounterTypeWearPercentage,
      StorageCounterTypeWearPercentageWarning,
      StorageCounterTypeWearPercentageMax,
      StorageCounterTypePowerOnHours,
      StorageCounterTypeReadLatency100NSMax,
      StorageCounterTypeWriteLatency100NSMax,
      StorageCounterTypeFlushLatency100NSMax,
      StorageCounterTypeMax
   );
   for STORAGE_COUNTER_TYPE_x use (
      StorageCounterTypeUnknown => 0,
      StorageCounterTypeTemperatureCelsius => 1,
      StorageCounterTypeTemperatureCelsiusMax => 2,
      StorageCounterTypeReadErrorsTotal => 3,
      StorageCounterTypeReadErrorsCorrected => 4,
      StorageCounterTypeReadErrorsUncorrected => 5,
      StorageCounterTypeWriteErrorsTotal => 6,
      StorageCounterTypeWriteErrorsCorrected => 7,
      StorageCounterTypeWriteErrorsUncorrected => 8,
      StorageCounterTypeManufactureDate => 9,
      StorageCounterTypeStartStopCycleCount => 10,
      StorageCounterTypeStartStopCycleCountMax => 11,
      StorageCounterTypeLoadUnloadCycleCount => 12,
      StorageCounterTypeLoadUnloadCycleCountMax => 13,
      StorageCounterTypeWearPercentage => 14,
      StorageCounterTypeWearPercentageWarning => 15,
      StorageCounterTypeWearPercentageMax => 16,
      StorageCounterTypePowerOnHours => 17,
      StorageCounterTypeReadLatency100NSMax => 18,
      StorageCounterTypeWriteLatency100NSMax => 19,
      StorageCounterTypeFlushLatency100NSMax => 20,
      StorageCounterTypeMax => 21
   );
   for STORAGE_COUNTER_TYPE_x'Size use 32;
   subtype STORAGE_COUNTER_TYPE is STORAGE_COUNTER_TYPE_x; -- CXType_Elaborated
   type PSTORAGE_COUNTER_TYPE is access STORAGE_COUNTER_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_COUNTER_x is record
      type_x : STORAGE_COUNTER_TYPE;
      Value : Void;
   end record;
   subtype STORAGE_COUNTER is STORAGE_COUNTER_x; -- CXType_Elaborated
   type PSTORAGE_COUNTER is access STORAGE_COUNTER_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_COUNTERS_x is record
      Version : DWORD;
      Size_x : DWORD;
      NumberOfCounters : DWORD;
      Counters : Void;
   end record;
   subtype STORAGE_COUNTERS is STORAGE_COUNTERS_x; -- CXType_Elaborated
   type PSTORAGE_COUNTERS is access STORAGE_COUNTERS_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_HW_FIRMWARE_INFO_QUERY_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      Reserved : DWORD;
   end record;
   subtype STORAGE_HW_FIRMWARE_INFO_QUERY is STORAGE_HW_FIRMWARE_INFO_QUERY_x; -- CXType_Elaborated
   type PSTORAGE_HW_FIRMWARE_INFO_QUERY is access STORAGE_HW_FIRMWARE_INFO_QUERY_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_HW_FIRMWARE_SLOT_INFO_x is record
      Version : DWORD;
      Size_x : DWORD;
      SlotNumber : BYTE;
      ReadOnly : BYTE;
      Reserved0 : BYTE;
      Reserved1 : Void;
      Revision : Void;
   end record;
   subtype STORAGE_HW_FIRMWARE_SLOT_INFO is STORAGE_HW_FIRMWARE_SLOT_INFO_x; -- CXType_Elaborated
   type PSTORAGE_HW_FIRMWARE_SLOT_INFO is access STORAGE_HW_FIRMWARE_SLOT_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_HW_FIRMWARE_INFO_x is record
      Version : DWORD;
      Size_x : DWORD;
      SupportUpgrade : BYTE;
      Reserved0 : BYTE;
      SlotCount : BYTE;
      ActiveSlot : BYTE;
      PendingActivateSlot : BYTE;
      FirmwareShared : BOOLEAN;
      Reserved : Void;
      ImagePayloadAlignment : DWORD;
      ImagePayloadMaxSize : DWORD;
      Slot : Void;
   end record;
   subtype STORAGE_HW_FIRMWARE_INFO is STORAGE_HW_FIRMWARE_INFO_x; -- CXType_Elaborated
   type PSTORAGE_HW_FIRMWARE_INFO is access STORAGE_HW_FIRMWARE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_HW_FIRMWARE_DOWNLOAD_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      Slot : BYTE;
      Reserved : Void;
      Offset : DWORDLONG;
      BufferSize : DWORDLONG;
      ImageBuffer : Void;
   end record;
   subtype STORAGE_HW_FIRMWARE_DOWNLOAD is STORAGE_HW_FIRMWARE_DOWNLOAD_x; -- CXType_Elaborated
   type PSTORAGE_HW_FIRMWARE_DOWNLOAD is access STORAGE_HW_FIRMWARE_DOWNLOAD_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_HW_FIRMWARE_DOWNLOAD_V2_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      Slot : BYTE;
      Reserved : Void;
      Offset : DWORDLONG;
      BufferSize : DWORDLONG;
      ImageSize : DWORD;
      Reserved2 : DWORD;
      ImageBuffer : Void;
   end record;
   subtype STORAGE_HW_FIRMWARE_DOWNLOAD_V2 is STORAGE_HW_FIRMWARE_DOWNLOAD_V2_x; -- CXType_Elaborated
   type PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 is access STORAGE_HW_FIRMWARE_DOWNLOAD_V2_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_HW_FIRMWARE_ACTIVATE_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      Slot : BYTE;
      Reserved0 : Void;
   end record;
   subtype STORAGE_HW_FIRMWARE_ACTIVATE is STORAGE_HW_FIRMWARE_ACTIVATE_x; -- CXType_Elaborated
   type PSTORAGE_HW_FIRMWARE_ACTIVATE is access STORAGE_HW_FIRMWARE_ACTIVATE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_PROTOCOL_COMMAND_x is record
      Version : DWORD;
      Length : DWORD;
      ProtocolType : STORAGE_PROTOCOL_TYPE;
      Flags : DWORD;
      ReturnStatus : DWORD;
      ErrorCode : DWORD;
      CommandLength : DWORD;
      ErrorInfoLength : DWORD;
      DataToDeviceTransferLength : DWORD;
      DataFromDeviceTransferLength : DWORD;
      TimeOutValue : DWORD;
      ErrorInfoOffset : DWORD;
      DataToDeviceBufferOffset : DWORD;
      DataFromDeviceBufferOffset : DWORD;
      CommandSpecific : DWORD;
      Reserved0 : DWORD;
      FixedProtocolReturnData : DWORD;
      Reserved1 : Void;
      Command : Void;
   end record;
   subtype STORAGE_PROTOCOL_COMMAND is STORAGE_PROTOCOL_COMMAND_x; -- CXType_Elaborated
   type PSTORAGE_PROTOCOL_COMMAND is access STORAGE_PROTOCOL_COMMAND_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ATTRIBUTE_MGMT_ACTION_x is (
      StorAttributeMgmt_ClearAttribute,
      StorAttributeMgmt_SetAttribute,
      StorAttributeMgmt_ResetAttribute
   );
   for STORAGE_ATTRIBUTE_MGMT_ACTION_x use (
      StorAttributeMgmt_ClearAttribute => 0,
      StorAttributeMgmt_SetAttribute => 1,
      StorAttributeMgmt_ResetAttribute => 2
   );
   for STORAGE_ATTRIBUTE_MGMT_ACTION_x'Size use 32;
   subtype STORAGE_ATTRIBUTE_MGMT_ACTION is STORAGE_ATTRIBUTE_MGMT_ACTION_x; -- CXType_Elaborated
   type PSTORAGE_ATTRIBUTE_MGMT_ACTION is access STORAGE_ATTRIBUTE_MGMT_ACTION_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_ATTRIBUTE_MGMT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Action : STORAGE_ATTRIBUTE_MGMT_ACTION;
      Attribute : DWORD;
   end record;
   subtype STORAGE_ATTRIBUTE_MGMT is STORAGE_ATTRIBUTE_MGMT_x; -- CXType_Elaborated
   type PSTORAGE_ATTRIBUTE_MGMT is access STORAGE_ATTRIBUTE_MGMT_x; -- CXType_Pointer - CXType_Elaborated
   type MEDIA_TYPE_x is (
      Unknown,
      F5_1Pt2_512,
      F3_1Pt44_512,
      F3_2Pt88_512,
      F3_20Pt8_512,
      F3_720_512,
      F5_360_512,
      F5_320_512,
      F5_320_1024,
      F5_180_512,
      F5_160_512,
      RemovableMedia,
      FixedMedia,
      F3_120M_512,
      F3_640_512,
      F5_640_512,
      F5_720_512,
      F3_1Pt2_512,
      F3_1Pt23_1024,
      F5_1Pt23_1024,
      F3_128Mb_512,
      F3_230Mb_512,
      F8_256_128,
      F3_200Mb_512,
      F3_240M_512,
      F3_32M_512
   );
   for MEDIA_TYPE_x use (
      Unknown => 0,
      F5_1Pt2_512 => 1,
      F3_1Pt44_512 => 2,
      F3_2Pt88_512 => 3,
      F3_20Pt8_512 => 4,
      F3_720_512 => 5,
      F5_360_512 => 6,
      F5_320_512 => 7,
      F5_320_1024 => 8,
      F5_180_512 => 9,
      F5_160_512 => 10,
      RemovableMedia => 11,
      FixedMedia => 12,
      F3_120M_512 => 13,
      F3_640_512 => 14,
      F5_640_512 => 15,
      F5_720_512 => 16,
      F3_1Pt2_512 => 17,
      F3_1Pt23_1024 => 18,
      F5_1Pt23_1024 => 19,
      F3_128Mb_512 => 20,
      F3_230Mb_512 => 21,
      F8_256_128 => 22,
      F3_200Mb_512 => 23,
      F3_240M_512 => 24,
      F3_32M_512 => 25
   );
   for MEDIA_TYPE_x'Size use 32;
   subtype MEDIA_TYPE is MEDIA_TYPE_x; -- CXType_Elaborated
   type PMEDIA_TYPE is access MEDIA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type FORMAT_PARAMETERS_x is record
      MediaType : MEDIA_TYPE;
      StartCylinderNumber : DWORD;
      EndCylinderNumber : DWORD;
      StartHeadNumber : DWORD;
      EndHeadNumber : DWORD;
   end record;
   subtype FORMAT_PARAMETERS is FORMAT_PARAMETERS_x; -- CXType_Elaborated
   type PFORMAT_PARAMETERS is access FORMAT_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   subtype BAD_TRACK_NUMBER is WORD; -- CXType_Typedef
   type PBAD_TRACK_NUMBER is access WORD; -- CXType_Pointer - CXType_Typedef
   type FORMAT_EX_PARAMETERS_x is record
      MediaType : MEDIA_TYPE;
      StartCylinderNumber : DWORD;
      EndCylinderNumber : DWORD;
      StartHeadNumber : DWORD;
      EndHeadNumber : DWORD;
      FormatGapLength : WORD;
      SectorsPerTrack : WORD;
      SectorNumber : Void;
   end record;
   subtype FORMAT_EX_PARAMETERS is FORMAT_EX_PARAMETERS_x; -- CXType_Elaborated
   type PFORMAT_EX_PARAMETERS is access FORMAT_EX_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_GEOMETRY_x is record
      Cylinders : LARGE_INTEGER;
      MediaType : MEDIA_TYPE;
      TracksPerCylinder : DWORD;
      SectorsPerTrack : DWORD;
      BytesPerSector : DWORD;
   end record;
   subtype DISK_GEOMETRY is DISK_GEOMETRY_x; -- CXType_Elaborated
   type PDISK_GEOMETRY is access DISK_GEOMETRY_x; -- CXType_Pointer - CXType_Elaborated
   type PARTITION_INFORMATION_x is record
      StartingOffset : LARGE_INTEGER;
      PartitionLength : LARGE_INTEGER;
      HiddenSectors : DWORD;
      PartitionNumber : DWORD;
      PartitionType : BYTE;
      BootIndicator : BOOLEAN;
      RecognizedPartition : BOOLEAN;
      RewritePartition : BOOLEAN;
   end record;
   subtype PARTITION_INFORMATION is PARTITION_INFORMATION_x; -- CXType_Elaborated
   type PPARTITION_INFORMATION is access PARTITION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type SET_PARTITION_INFORMATION_x is record
      PartitionType : BYTE;
   end record;
   subtype SET_PARTITION_INFORMATION is SET_PARTITION_INFORMATION_x; -- CXType_Elaborated
   type PSET_PARTITION_INFORMATION is access SET_PARTITION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVE_LAYOUT_INFORMATION_x is record
      PartitionCount : DWORD;
      Signature : DWORD;
      PartitionEntry : Void;
   end record;
   subtype DRIVE_LAYOUT_INFORMATION is DRIVE_LAYOUT_INFORMATION_x; -- CXType_Elaborated
   type PDRIVE_LAYOUT_INFORMATION is access DRIVE_LAYOUT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type VERIFY_INFORMATION_x is record
      StartingOffset : LARGE_INTEGER;
      Length : DWORD;
   end record;
   subtype VERIFY_INFORMATION is VERIFY_INFORMATION_x; -- CXType_Elaborated
   type PVERIFY_INFORMATION is access VERIFY_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type REASSIGN_BLOCKS_x is record
      Reserved : WORD;
      Count : WORD;
      BlockNumber : Void;
   end record;
   subtype REASSIGN_BLOCKS is REASSIGN_BLOCKS_x; -- CXType_Elaborated
   type PREASSIGN_BLOCKS is access REASSIGN_BLOCKS_x; -- CXType_Pointer - CXType_Elaborated
   type REASSIGN_BLOCKS_EX_x is record
      Reserved : WORD;
      Count : WORD;
      BlockNumber : Void;
   end record;
   subtype REASSIGN_BLOCKS_EX is REASSIGN_BLOCKS_EX_x; -- CXType_Elaborated
   type PREASSIGN_BLOCKS_EX is access REASSIGN_BLOCKS_EX_x; -- CXType_Pointer - CXType_Elaborated
   type PARTITION_STYLE_x is (
      PARTITION_STYLE_MBR,
      PARTITION_STYLE_GPT,
      PARTITION_STYLE_RAW
   );
   for PARTITION_STYLE_x use (
      PARTITION_STYLE_MBR => 0,
      PARTITION_STYLE_GPT => 1,
      PARTITION_STYLE_RAW => 2
   );
   for PARTITION_STYLE_x'Size use 32;
   subtype PARTITION_STYLE is PARTITION_STYLE_x; -- CXType_Elaborated
   type PARTITION_INFORMATION_GPT_x is record
      PartitionType : GUID;
      PartitionId : GUID;
      Attributes : DWORD64;
      Name : Void;
   end record;
   subtype PARTITION_INFORMATION_GPT is PARTITION_INFORMATION_GPT_x; -- CXType_Elaborated
   type PPARTITION_INFORMATION_GPT is access PARTITION_INFORMATION_GPT_x; -- CXType_Pointer - CXType_Elaborated
   type PARTITION_INFORMATION_MBR_x is record
      PartitionType : BYTE;
      BootIndicator : BOOLEAN;
      RecognizedPartition : BOOLEAN;
      HiddenSectors : DWORD;
      PartitionId : GUID;
   end record;
   subtype PARTITION_INFORMATION_MBR is PARTITION_INFORMATION_MBR_x; -- CXType_Elaborated
   type PPARTITION_INFORMATION_MBR is access PARTITION_INFORMATION_MBR_x; -- CXType_Pointer - CXType_Elaborated
   subtype SET_PARTITION_INFORMATION_MBR is SET_PARTITION_INFORMATION; -- CXType_Typedef
   subtype SET_PARTITION_INFORMATION_GPT is PARTITION_INFORMATION_GPT; -- CXType_Typedef
   type SET_PARTITION_INFORMATION_EX_x is record
      PartitionStyle : PARTITION_STYLE;
   end record;
   subtype SET_PARTITION_INFORMATION_EX is SET_PARTITION_INFORMATION_EX_x; -- CXType_Elaborated
   type PSET_PARTITION_INFORMATION_EX is access SET_PARTITION_INFORMATION_EX_x; -- CXType_Pointer - CXType_Elaborated
   type CREATE_DISK_GPT_x is record
      DiskId : GUID;
      MaxPartitionCount : DWORD;
   end record;
   subtype CREATE_DISK_GPT is CREATE_DISK_GPT_x; -- CXType_Elaborated
   type PCREATE_DISK_GPT is access CREATE_DISK_GPT_x; -- CXType_Pointer - CXType_Elaborated
   type CREATE_DISK_MBR_x is record
      Signature : DWORD;
   end record;
   subtype CREATE_DISK_MBR is CREATE_DISK_MBR_x; -- CXType_Elaborated
   type PCREATE_DISK_MBR is access CREATE_DISK_MBR_x; -- CXType_Pointer - CXType_Elaborated
   type CREATE_DISK_x is record
      PartitionStyle : PARTITION_STYLE;
   end record;
   subtype CREATE_DISK is CREATE_DISK_x; -- CXType_Elaborated
   type PCREATE_DISK is access CREATE_DISK_x; -- CXType_Pointer - CXType_Elaborated
   type GET_LENGTH_INFORMATION_x is record
      Length : LARGE_INTEGER;
   end record;
   subtype GET_LENGTH_INFORMATION is GET_LENGTH_INFORMATION_x; -- CXType_Elaborated
   type PGET_LENGTH_INFORMATION is access GET_LENGTH_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type PARTITION_INFORMATION_EX_x is record
      PartitionStyle : PARTITION_STYLE;
      StartingOffset : LARGE_INTEGER;
      PartitionLength : LARGE_INTEGER;
      PartitionNumber : DWORD;
      RewritePartition : BOOLEAN;
      IsServicePartition : BOOLEAN;
   end record;
   subtype PARTITION_INFORMATION_EX is PARTITION_INFORMATION_EX_x; -- CXType_Elaborated
   type PPARTITION_INFORMATION_EX is access PARTITION_INFORMATION_EX_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVE_LAYOUT_INFORMATION_GPT_x is record
      DiskId : GUID;
      StartingUsableOffset : LARGE_INTEGER;
      UsableLength : LARGE_INTEGER;
      MaxPartitionCount : DWORD;
   end record;
   subtype DRIVE_LAYOUT_INFORMATION_GPT is DRIVE_LAYOUT_INFORMATION_GPT_x; -- CXType_Elaborated
   type PDRIVE_LAYOUT_INFORMATION_GPT is access DRIVE_LAYOUT_INFORMATION_GPT_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVE_LAYOUT_INFORMATION_MBR_x is record
      Signature : DWORD;
      CheckSum : DWORD;
   end record;
   subtype DRIVE_LAYOUT_INFORMATION_MBR is DRIVE_LAYOUT_INFORMATION_MBR_x; -- CXType_Elaborated
   type PDRIVE_LAYOUT_INFORMATION_MBR is access DRIVE_LAYOUT_INFORMATION_MBR_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVE_LAYOUT_INFORMATION_EX_x is record
      PartitionStyle : DWORD;
      PartitionCount : DWORD;
      PartitionEntry : Void;
   end record;
   subtype DRIVE_LAYOUT_INFORMATION_EX is DRIVE_LAYOUT_INFORMATION_EX_x; -- CXType_Elaborated
   type PDRIVE_LAYOUT_INFORMATION_EX is access DRIVE_LAYOUT_INFORMATION_EX_x; -- CXType_Pointer - CXType_Elaborated
   type DETECTION_TYPE_x is (
      DetectNone,
      DetectInt13,
      DetectExInt13
   );
   for DETECTION_TYPE_x use (
      DetectNone => 0,
      DetectInt13 => 1,
      DetectExInt13 => 2
   );
   for DETECTION_TYPE_x'Size use 32;
   subtype DETECTION_TYPE is DETECTION_TYPE_x; -- CXType_Elaborated
   type DISK_INT13_INFO_x is record
      DriveSelect : WORD;
      MaxCylinders : DWORD;
      SectorsPerTrack : WORD;
      MaxHeads : WORD;
      NumberDrives : WORD;
   end record;
   subtype DISK_INT13_INFO is DISK_INT13_INFO_x; -- CXType_Elaborated
   type PDISK_INT13_INFO is access DISK_INT13_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_EX_INT13_INFO_x is record
      ExBufferSize : WORD;
      ExFlags : WORD;
      ExCylinders : DWORD;
      ExHeads : DWORD;
      ExSectorsPerTrack : DWORD;
      ExSectorsPerDrive : DWORD64;
      ExSectorSize : WORD;
      ExReserved : WORD;
   end record;
   subtype DISK_EX_INT13_INFO is DISK_EX_INT13_INFO_x; -- CXType_Elaborated
   type PDISK_EX_INT13_INFO is access DISK_EX_INT13_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_DETECTION_INFO_x is record
      SizeOfDetectInfo : DWORD;
      DetectionType : DETECTION_TYPE;
   end record;
   subtype DISK_DETECTION_INFO is DISK_DETECTION_INFO_x; -- CXType_Elaborated
   type PDISK_DETECTION_INFO is access DISK_DETECTION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_PARTITION_INFO_x is record
      SizeOfPartitionInfo : DWORD;
      PartitionStyle : PARTITION_STYLE;
   end record;
   subtype DISK_PARTITION_INFO is DISK_PARTITION_INFO_x; -- CXType_Elaborated
   type PDISK_PARTITION_INFO is access DISK_PARTITION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_GEOMETRY_EX_x is record
      Geometry : DISK_GEOMETRY;
      DiskSize : LARGE_INTEGER;
      Data : Void;
   end record;
   subtype DISK_GEOMETRY_EX is DISK_GEOMETRY_EX_x; -- CXType_Elaborated
   type PDISK_GEOMETRY_EX is access DISK_GEOMETRY_EX_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_CONTROLLER_NUMBER_x is record
      ControllerNumber : DWORD;
      DiskNumber : DWORD;
   end record;
   subtype DISK_CONTROLLER_NUMBER is DISK_CONTROLLER_NUMBER_x; -- CXType_Elaborated
   type PDISK_CONTROLLER_NUMBER is access DISK_CONTROLLER_NUMBER_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_CACHE_RETENTION_PRIORITY is (
      EqualPriority,
      KeepPrefetchedData,
      KeepReadData
   );
   for DISK_CACHE_RETENTION_PRIORITY use (
      EqualPriority => 0,
      KeepPrefetchedData => 1,
      KeepReadData => 2
   );
   for DISK_CACHE_RETENTION_PRIORITY'Size use 32;
   type DISK_CACHE_INFORMATION_x is record
      ParametersSavable : BOOLEAN;
      ReadCacheEnabled : BOOLEAN;
      WriteCacheEnabled : BOOLEAN;
      ReadRetentionPriority : DISK_CACHE_RETENTION_PRIORITY;
      WriteRetentionPriority : DISK_CACHE_RETENTION_PRIORITY;
      DisablePrefetchTransferLength : WORD;
      PrefetchScalar : BOOLEAN;
   end record;
   subtype DISK_CACHE_INFORMATION is DISK_CACHE_INFORMATION_x; -- CXType_Elaborated
   type PDISK_CACHE_INFORMATION is access DISK_CACHE_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_GROW_PARTITION_x is record
      PartitionNumber : DWORD;
      BytesToGrow : LARGE_INTEGER;
   end record;
   subtype DISK_GROW_PARTITION is DISK_GROW_PARTITION_x; -- CXType_Elaborated
   type PDISK_GROW_PARTITION is access DISK_GROW_PARTITION_x; -- CXType_Pointer - CXType_Elaborated
   type HISTOGRAM_BUCKET_x is record
      Reads : DWORD;
      Writes : DWORD;
   end record;
   subtype HISTOGRAM_BUCKET is HISTOGRAM_BUCKET_x; -- CXType_Elaborated
   type PHISTOGRAM_BUCKET is access HISTOGRAM_BUCKET_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_HISTOGRAM_x is record
      DiskSize : LARGE_INTEGER;
      Start : LARGE_INTEGER;
      end_x : LARGE_INTEGER;
      Average : LARGE_INTEGER;
      AverageRead : LARGE_INTEGER;
      AverageWrite : LARGE_INTEGER;
      Granularity : DWORD;
      Size_x : DWORD;
      ReadCount : DWORD;
      WriteCount : DWORD;
      Histogram : PHISTOGRAM_BUCKET;
   end record;
   subtype DISK_HISTOGRAM is DISK_HISTOGRAM_x; -- CXType_Elaborated
   type PDISK_HISTOGRAM is access DISK_HISTOGRAM_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_PERFORMANCE_x is record
      BytesRead : LARGE_INTEGER;
      BytesWritten : LARGE_INTEGER;
      ReadTime : LARGE_INTEGER;
      WriteTime : LARGE_INTEGER;
      IdleTime : LARGE_INTEGER;
      ReadCount : DWORD;
      WriteCount : DWORD;
      QueueDepth : DWORD;
      SplitCount : DWORD;
      QueryTime : LARGE_INTEGER;
      StorageDeviceNumber : DWORD;
      StorageManagerName : Void;
   end record;
   subtype DISK_PERFORMANCE is DISK_PERFORMANCE_x; -- CXType_Elaborated
   type PDISK_PERFORMANCE is access DISK_PERFORMANCE_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_RECORD_x is record
      ByteOffset : LARGE_INTEGER;
      StartTime : LARGE_INTEGER;
      EndTime : LARGE_INTEGER;
      VirtualAddress : PVOID;
      NumberOfBytes : DWORD;
      DeviceNumber : BYTE;
      ReadRequest : BOOLEAN;
   end record;
   subtype DISK_RECORD is DISK_RECORD_x; -- CXType_Elaborated
   type PDISK_RECORD is access DISK_RECORD_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_LOGGING_x is record
      function_x : BYTE;
      BufferAddress : PVOID;
      BufferSize : DWORD;
   end record;
   subtype DISK_LOGGING is DISK_LOGGING_x; -- CXType_Elaborated
   type PDISK_LOGGING is access DISK_LOGGING_x; -- CXType_Pointer - CXType_Elaborated
   type BIN_TYPES_x is (
      RequestSize,
      RequestLocation
   );
   for BIN_TYPES_x use (
      RequestSize => 0,
      RequestLocation => 1
   );
   for BIN_TYPES_x'Size use 32;
   subtype BIN_TYPES is BIN_TYPES_x; -- CXType_Elaborated
   type BIN_RANGE_x is record
      StartValue : LARGE_INTEGER;
      Length : LARGE_INTEGER;
   end record;
   subtype BIN_RANGE is BIN_RANGE_x; -- CXType_Elaborated
   type PBIN_RANGE is access BIN_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type PERF_BIN_x is record
      NumberOfBins : DWORD;
      TypeOfBin : DWORD;
      BinsRanges : Void;
   end record;
   subtype PERF_BIN is PERF_BIN_x; -- CXType_Elaborated
   type PPERF_BIN is access PERF_BIN_x; -- CXType_Pointer - CXType_Elaborated
   type BIN_COUNT_x is record
      BinRange : BIN_RANGE;
      BinCount : DWORD;
   end record;
   subtype BIN_COUNT is BIN_COUNT_x; -- CXType_Elaborated
   type PBIN_COUNT is access BIN_COUNT_x; -- CXType_Pointer - CXType_Elaborated
   type BIN_RESULTS_x is record
      NumberOfBins : DWORD;
      BinCounts : Void;
   end record;
   subtype BIN_RESULTS is BIN_RESULTS_x; -- CXType_Elaborated
   type PBIN_RESULTS is access BIN_RESULTS_x; -- CXType_Pointer - CXType_Elaborated
   type GETVERSIONINPARAMS_x is record
      bVersion : BYTE;
      bRevision : BYTE;
      bReserved : BYTE;
      bIDEDeviceMap : BYTE;
      fCapabilities : DWORD;
      dwReserved : Void;
   end record;
   subtype GETVERSIONINPARAMS is GETVERSIONINPARAMS_x; -- CXType_Elaborated
   type PGETVERSIONINPARAMS is access GETVERSIONINPARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type LPGETVERSIONINPARAMS is access GETVERSIONINPARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type IDEREGS_x is record
      bFeaturesReg : BYTE;
      bSectorCountReg : BYTE;
      bSectorNumberReg : BYTE;
      bCylLowReg : BYTE;
      bCylHighReg : BYTE;
      bDriveHeadReg : BYTE;
      bCommandReg : BYTE;
      bReserved : BYTE;
   end record;
   subtype IDEREGS is IDEREGS_x; -- CXType_Elaborated
   type PIDEREGS is access IDEREGS_x; -- CXType_Pointer - CXType_Elaborated
   type LPIDEREGS is access IDEREGS_x; -- CXType_Pointer - CXType_Elaborated
   type SENDCMDINPARAMS_x is record
      cBufferSize : DWORD;
      irDriveRegs : IDEREGS;
      bDriveNumber : BYTE;
      bReserved : Void;
      dwReserved : Void;
      bBuffer : Void;
   end record;
   subtype SENDCMDINPARAMS is SENDCMDINPARAMS_x; -- CXType_Elaborated
   type PSENDCMDINPARAMS is access SENDCMDINPARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type LPSENDCMDINPARAMS is access SENDCMDINPARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVERSTATUS_x is record
      bDriverError : BYTE;
      bIDEError : BYTE;
      bReserved : Void;
      dwReserved : Void;
   end record;
   subtype DRIVERSTATUS is DRIVERSTATUS_x; -- CXType_Elaborated
   type PDRIVERSTATUS is access DRIVERSTATUS_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVERSTATUS is access DRIVERSTATUS_x; -- CXType_Pointer - CXType_Elaborated
   type SENDCMDOUTPARAMS_x is record
      cBufferSize : DWORD;
      DriverStatus_x : DRIVERSTATUS;
      bBuffer : Void;
   end record;
   subtype SENDCMDOUTPARAMS is SENDCMDOUTPARAMS_x; -- CXType_Elaborated
   type PSENDCMDOUTPARAMS is access SENDCMDOUTPARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type LPSENDCMDOUTPARAMS is access SENDCMDOUTPARAMS_x; -- CXType_Pointer - CXType_Elaborated
   type GET_DISK_ATTRIBUTES_x is record
      Version : DWORD;
      Reserved1 : DWORD;
      Attributes : DWORDLONG;
   end record;
   subtype GET_DISK_ATTRIBUTES is GET_DISK_ATTRIBUTES_x; -- CXType_Elaborated
   type PGET_DISK_ATTRIBUTES is access GET_DISK_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type SET_DISK_ATTRIBUTES_x is record
      Version : DWORD;
      Persist : BOOLEAN;
      Reserved1 : Void;
      Attributes : DWORDLONG;
      AttributesMask : DWORDLONG;
      Reserved2 : Void;
   end record;
   subtype SET_DISK_ATTRIBUTES is SET_DISK_ATTRIBUTES_x; -- CXType_Elaborated
   type PSET_DISK_ATTRIBUTES is access SET_DISK_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type ELEMENT_TYPE_x is (
      AllElements,
      ChangerTransport,
      ChangerSlot,
      ChangerIEPort,
      ChangerDrive,
      ChangerDoor,
      ChangerKeypad,
      ChangerMaxElement
   );
   for ELEMENT_TYPE_x use (
      AllElements => 0,
      ChangerTransport => 1,
      ChangerSlot => 2,
      ChangerIEPort => 3,
      ChangerDrive => 4,
      ChangerDoor => 5,
      ChangerKeypad => 6,
      ChangerMaxElement => 7
   );
   for ELEMENT_TYPE_x'Size use 32;
   subtype ELEMENT_TYPE is ELEMENT_TYPE_x; -- CXType_Elaborated
   type PELEMENT_TYPE is access ELEMENT_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_ELEMENT_x is record
      ElementType : ELEMENT_TYPE;
      ElementAddress : DWORD;
   end record;
   subtype CHANGER_ELEMENT is CHANGER_ELEMENT_x; -- CXType_Elaborated
   type PCHANGER_ELEMENT is access CHANGER_ELEMENT_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_ELEMENT_LIST_x is record
      Element : CHANGER_ELEMENT;
      NumberOfElements : DWORD;
   end record;
   subtype CHANGER_ELEMENT_LIST is CHANGER_ELEMENT_LIST_x; -- CXType_Elaborated
   type PCHANGER_ELEMENT_LIST is access CHANGER_ELEMENT_LIST_x; -- CXType_Pointer - CXType_Elaborated
   type GET_CHANGER_PARAMETERS_x is record
      Size_x : DWORD;
      NumberTransportElements : WORD;
      NumberStorageElements : WORD;
      NumberCleanerSlots : WORD;
      NumberIEElements : WORD;
      NumberDataTransferElements : WORD;
      NumberOfDoors : WORD;
      FirstSlotNumber : WORD;
      FirstDriveNumber : WORD;
      FirstTransportNumber : WORD;
      FirstIEPortNumber : WORD;
      FirstCleanerSlotAddress : WORD;
      MagazineSize : WORD;
      DriveCleanTimeout : DWORD;
      Features0 : DWORD;
      Features1 : DWORD;
      MoveFromTransport : BYTE;
      MoveFromSlot : BYTE;
      MoveFromIePort : BYTE;
      MoveFromDrive : BYTE;
      ExchangeFromTransport : BYTE;
      ExchangeFromSlot : BYTE;
      ExchangeFromIePort : BYTE;
      ExchangeFromDrive : BYTE;
      LockUnlockCapabilities : BYTE;
      PositionCapabilities : BYTE;
      Reserved1 : Void;
      Reserved2 : Void;
   end record;
   subtype GET_CHANGER_PARAMETERS is GET_CHANGER_PARAMETERS_x; -- CXType_Elaborated
   type PGET_CHANGER_PARAMETERS is access GET_CHANGER_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_PRODUCT_DATA_x is record
      VendorId : Void;
      ProductId : Void;
      Revision : Void;
      SerialNumber : Void;
      DeviceType : BYTE;
   end record;
   subtype CHANGER_PRODUCT_DATA is CHANGER_PRODUCT_DATA_x; -- CXType_Elaborated
   type PCHANGER_PRODUCT_DATA is access CHANGER_PRODUCT_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_SET_ACCESS_x is record
      Element : CHANGER_ELEMENT;
      Control : DWORD;
   end record;
   subtype CHANGER_SET_ACCESS is CHANGER_SET_ACCESS_x; -- CXType_Elaborated
   type PCHANGER_SET_ACCESS is access CHANGER_SET_ACCESS_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_READ_ELEMENT_STATUS_x is record
      ElementList : CHANGER_ELEMENT_LIST;
      VolumeTagInfo : BOOLEAN;
   end record;
   subtype CHANGER_READ_ELEMENT_STATUS is CHANGER_READ_ELEMENT_STATUS_x; -- CXType_Elaborated
   type PCHANGER_READ_ELEMENT_STATUS is access CHANGER_READ_ELEMENT_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_ELEMENT_STATUS_x is record
      Element : CHANGER_ELEMENT;
      SrcElementAddress : CHANGER_ELEMENT;
      Flags : DWORD;
      ExceptionCode : DWORD;
      TargetId : BYTE;
      Lun : BYTE;
      Reserved : WORD;
      PrimaryVolumeID : Void;
      AlternateVolumeID : Void;
   end record;
   subtype CHANGER_ELEMENT_STATUS is CHANGER_ELEMENT_STATUS_x; -- CXType_Elaborated
   type PCHANGER_ELEMENT_STATUS is access CHANGER_ELEMENT_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_ELEMENT_STATUS_EX_x is record
      Element : CHANGER_ELEMENT;
      SrcElementAddress : CHANGER_ELEMENT;
      Flags : DWORD;
      ExceptionCode : DWORD;
      TargetId : BYTE;
      Lun : BYTE;
      Reserved : WORD;
      PrimaryVolumeID : Void;
      AlternateVolumeID : Void;
      VendorIdentification : Void;
      ProductIdentification : Void;
      SerialNumber : Void;
   end record;
   subtype CHANGER_ELEMENT_STATUS_EX is CHANGER_ELEMENT_STATUS_EX_x; -- CXType_Elaborated
   type PCHANGER_ELEMENT_STATUS_EX is access CHANGER_ELEMENT_STATUS_EX_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_INITIALIZE_ELEMENT_STATUS_x is record
      ElementList : CHANGER_ELEMENT_LIST;
      BarCodeScan : BOOLEAN;
   end record;
   subtype CHANGER_INITIALIZE_ELEMENT_STATUS is CHANGER_INITIALIZE_ELEMENT_STATUS_x; -- CXType_Elaborated
   type PCHANGER_INITIALIZE_ELEMENT_STATUS is access CHANGER_INITIALIZE_ELEMENT_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_SET_POSITION_x is record
      Transport : CHANGER_ELEMENT;
      Destination : CHANGER_ELEMENT;
      Flip : BOOLEAN;
   end record;
   subtype CHANGER_SET_POSITION is CHANGER_SET_POSITION_x; -- CXType_Elaborated
   type PCHANGER_SET_POSITION is access CHANGER_SET_POSITION_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_EXCHANGE_MEDIUM_x is record
      Transport : CHANGER_ELEMENT;
      Source : CHANGER_ELEMENT;
      Destination1 : CHANGER_ELEMENT;
      Destination2 : CHANGER_ELEMENT;
      Flip1 : BOOLEAN;
      Flip2 : BOOLEAN;
   end record;
   subtype CHANGER_EXCHANGE_MEDIUM is CHANGER_EXCHANGE_MEDIUM_x; -- CXType_Elaborated
   type PCHANGER_EXCHANGE_MEDIUM is access CHANGER_EXCHANGE_MEDIUM_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_MOVE_MEDIUM_x is record
      Transport : CHANGER_ELEMENT;
      Source : CHANGER_ELEMENT;
      Destination : CHANGER_ELEMENT;
      Flip : BOOLEAN;
   end record;
   subtype CHANGER_MOVE_MEDIUM is CHANGER_MOVE_MEDIUM_x; -- CXType_Elaborated
   type PCHANGER_MOVE_MEDIUM is access CHANGER_MOVE_MEDIUM_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_SEND_VOLUME_TAG_INFORMATION_x is record
      StartingElement : CHANGER_ELEMENT;
      ActionCode : DWORD;
      VolumeIDTemplate : Void;
   end record;
   subtype CHANGER_SEND_VOLUME_TAG_INFORMATION is CHANGER_SEND_VOLUME_TAG_INFORMATION_x; -- CXType_Elaborated
   type PCHANGER_SEND_VOLUME_TAG_INFORMATION is access CHANGER_SEND_VOLUME_TAG_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type READ_ELEMENT_ADDRESS_INFO_x is record
      NumberOfElements : DWORD;
      ElementStatus : Void;
   end record;
   subtype READ_ELEMENT_ADDRESS_INFO is READ_ELEMENT_ADDRESS_INFO_x; -- CXType_Elaborated
   type PREAD_ELEMENT_ADDRESS_INFO is access READ_ELEMENT_ADDRESS_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CHANGER_DEVICE_PROBLEM_TYPE_x is (
      DeviceProblemNone,
      DeviceProblemHardware,
      DeviceProblemCHMError,
      DeviceProblemDoorOpen,
      DeviceProblemCalibrationError,
      DeviceProblemTargetFailure,
      DeviceProblemCHMMoveError,
      DeviceProblemCHMZeroError,
      DeviceProblemCartridgeInsertError,
      DeviceProblemPositionError,
      DeviceProblemSensorError,
      DeviceProblemCartridgeEjectError,
      DeviceProblemGripperError,
      DeviceProblemDriveError
   );
   for CHANGER_DEVICE_PROBLEM_TYPE_x use (
      DeviceProblemNone => 0,
      DeviceProblemHardware => 1,
      DeviceProblemCHMError => 2,
      DeviceProblemDoorOpen => 3,
      DeviceProblemCalibrationError => 4,
      DeviceProblemTargetFailure => 5,
      DeviceProblemCHMMoveError => 6,
      DeviceProblemCHMZeroError => 7,
      DeviceProblemCartridgeInsertError => 8,
      DeviceProblemPositionError => 9,
      DeviceProblemSensorError => 10,
      DeviceProblemCartridgeEjectError => 11,
      DeviceProblemGripperError => 12,
      DeviceProblemDriveError => 13
   );
   for CHANGER_DEVICE_PROBLEM_TYPE_x'Size use 32;
   subtype CHANGER_DEVICE_PROBLEM_TYPE is CHANGER_DEVICE_PROBLEM_TYPE_x; -- CXType_Elaborated
   type PCHANGER_DEVICE_PROBLEM_TYPE is access CHANGER_DEVICE_PROBLEM_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type PATHNAME_BUFFER_x is record
      PathNameLength : DWORD;
      Name : Void;
   end record;
   subtype PATHNAME_BUFFER is PATHNAME_BUFFER_x; -- CXType_Elaborated
   type PPATHNAME_BUFFER is access PATHNAME_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_QUERY_FAT_BPB_BUFFER_x is record
      First0x24BytesOfBootSector : Void;
   end record;
   subtype FSCTL_QUERY_FAT_BPB_BUFFER is FSCTL_QUERY_FAT_BPB_BUFFER_x; -- CXType_Elaborated
   type PFSCTL_QUERY_FAT_BPB_BUFFER is access FSCTL_QUERY_FAT_BPB_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type NTFS_VOLUME_DATA_BUFFER is record
      VolumeSerialNumber : LARGE_INTEGER;
      NumberSectors : LARGE_INTEGER;
      TotalClusters : LARGE_INTEGER;
      FreeClusters : LARGE_INTEGER;
      TotalReserved : LARGE_INTEGER;
      BytesPerSector : DWORD;
      BytesPerCluster : DWORD;
      BytesPerFileRecordSegment : DWORD;
      ClustersPerFileRecordSegment : DWORD;
      MftValidDataLength : LARGE_INTEGER;
      MftStartLcn : LARGE_INTEGER;
      Mft2StartLcn : LARGE_INTEGER;
      MftZoneStart : LARGE_INTEGER;
      MftZoneEnd : LARGE_INTEGER;
   end record;
   type PNTFS_VOLUME_DATA_BUFFER is access NTFS_VOLUME_DATA_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type NTFS_EXTENDED_VOLUME_DATA is record
      ByteCount : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      BytesPerPhysicalSector : DWORD;
      LfsMajorVersion : WORD;
      LfsMinorVersion : WORD;
      MaxDeviceTrimExtentCount : DWORD;
      MaxDeviceTrimByteCount : DWORD;
      MaxVolumeTrimExtentCount : DWORD;
      MaxVolumeTrimByteCount : DWORD;
   end record;
   type PNTFS_EXTENDED_VOLUME_DATA is access NTFS_EXTENDED_VOLUME_DATA; -- CXType_Pointer - CXType_Elaborated
   type REFS_VOLUME_DATA_BUFFER is record
      ByteCount : DWORD;
      MajorVersion : DWORD;
      MinorVersion : DWORD;
      BytesPerPhysicalSector : DWORD;
      VolumeSerialNumber : LARGE_INTEGER;
      NumberSectors : LARGE_INTEGER;
      TotalClusters : LARGE_INTEGER;
      FreeClusters : LARGE_INTEGER;
      TotalReserved : LARGE_INTEGER;
      BytesPerSector : DWORD;
      BytesPerCluster : DWORD;
      MaximumSizeOfResidentFile : LARGE_INTEGER;
      Reserved : Void;
   end record;
   type PREFS_VOLUME_DATA_BUFFER is access REFS_VOLUME_DATA_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type STARTING_LCN_INPUT_BUFFER is record
      StartingLcn : LARGE_INTEGER;
   end record;
   type PSTARTING_LCN_INPUT_BUFFER is access STARTING_LCN_INPUT_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type STARTING_LCN_INPUT_BUFFER_EX is record
      StartingLcn : LARGE_INTEGER;
      Flags : DWORD;
   end record;
   type PSTARTING_LCN_INPUT_BUFFER_EX is access STARTING_LCN_INPUT_BUFFER_EX; -- CXType_Pointer - CXType_Elaborated
   type VOLUME_BITMAP_BUFFER is record
      StartingLcn : LARGE_INTEGER;
      BitmapSize : LARGE_INTEGER;
      Buffer : Void;
   end record;
   type PVOLUME_BITMAP_BUFFER is access VOLUME_BITMAP_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type STARTING_VCN_INPUT_BUFFER is record
      StartingVcn : LARGE_INTEGER;
   end record;
   type PSTARTING_VCN_INPUT_BUFFER is access STARTING_VCN_INPUT_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type RETRIEVAL_POINTERS_BUFFER is record
      ExtentCount : DWORD;
      StartingVcn : LARGE_INTEGER;
      Extents : Void;
   end record;
   type PRETRIEVAL_POINTERS_BUFFER is access RETRIEVAL_POINTERS_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER is record
      ExtentCount : DWORD;
      StartingVcn : LARGE_INTEGER;
      Extents : Void;
   end record;
   type PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER is access RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type NTFS_FILE_RECORD_INPUT_BUFFER is record
      FileReferenceNumber : LARGE_INTEGER;
   end record;
   type PNTFS_FILE_RECORD_INPUT_BUFFER is access NTFS_FILE_RECORD_INPUT_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type NTFS_FILE_RECORD_OUTPUT_BUFFER is record
      FileReferenceNumber : LARGE_INTEGER;
      FileRecordLength : DWORD;
      FileRecordBuffer : Void;
   end record;
   type PNTFS_FILE_RECORD_OUTPUT_BUFFER is access NTFS_FILE_RECORD_OUTPUT_BUFFER; -- CXType_Pointer - CXType_Elaborated
   type MOVE_FILE_DATA is record
      FileHandle : HANDLE;
      StartingVcn : LARGE_INTEGER;
      StartingLcn : LARGE_INTEGER;
      ClusterCount : DWORD;
   end record;
   type PMOVE_FILE_DATA is access MOVE_FILE_DATA; -- CXType_Pointer - CXType_Elaborated
   type MOVE_FILE_RECORD_DATA is record
      FileHandle : HANDLE;
      SourceFileRecord : LARGE_INTEGER;
      TargetFileRecord : LARGE_INTEGER;
   end record;
   type PMOVE_FILE_RECORD_DATA is access MOVE_FILE_RECORD_DATA; -- CXType_Pointer - CXType_Elaborated
   type MOVE_FILE_DATA32_x is record
      FileHandle : UINT32;
      StartingVcn : LARGE_INTEGER;
      StartingLcn : LARGE_INTEGER;
      ClusterCount : DWORD;
   end record;
   subtype MOVE_FILE_DATA32 is MOVE_FILE_DATA32_x; -- CXType_Elaborated
   type PMOVE_FILE_DATA32 is access MOVE_FILE_DATA32_x; -- CXType_Pointer - CXType_Elaborated
   type FIND_BY_SID_DATA is record
      Restart : DWORD;
      Sid_x : SID;
   end record;
   type PFIND_BY_SID_DATA is access FIND_BY_SID_DATA; -- CXType_Pointer - CXType_Elaborated
   type FIND_BY_SID_OUTPUT is record
      NextEntryOffset : DWORD;
      FileIndex : DWORD;
      FileNameLength : DWORD;
      FileName : Void;
   end record;
   type PFIND_BY_SID_OUTPUT is access FIND_BY_SID_OUTPUT; -- CXType_Pointer - CXType_Elaborated
   type MFT_ENUM_DATA_V0 is record
      StartFileReferenceNumber : DWORDLONG;
      LowUsn : USN;
      HighUsn : USN;
   end record;
   type PMFT_ENUM_DATA_V0 is access MFT_ENUM_DATA_V0; -- CXType_Pointer - CXType_Elaborated
   type MFT_ENUM_DATA_V1 is record
      StartFileReferenceNumber : DWORDLONG;
      LowUsn : USN;
      HighUsn : USN;
      MinMajorVersion : WORD;
      MaxMajorVersion : WORD;
   end record;
   type PMFT_ENUM_DATA_V1 is access MFT_ENUM_DATA_V1; -- CXType_Pointer - CXType_Elaborated
   subtype MFT_ENUM_DATA is MFT_ENUM_DATA_V1; -- CXType_Typedef
   type PMFT_ENUM_DATA is access MFT_ENUM_DATA_V1; -- CXType_Pointer - CXType_Typedef
   type CREATE_USN_JOURNAL_DATA is record
      MaximumSize : DWORDLONG;
      AllocationDelta : DWORDLONG;
   end record;
   type PCREATE_USN_JOURNAL_DATA is access CREATE_USN_JOURNAL_DATA; -- CXType_Pointer - CXType_Elaborated
   type READ_FILE_USN_DATA is record
      MinMajorVersion : WORD;
      MaxMajorVersion : WORD;
   end record;
   type PREAD_FILE_USN_DATA is access READ_FILE_USN_DATA; -- CXType_Pointer - CXType_Elaborated
   type READ_USN_JOURNAL_DATA_V0 is record
      StartUsn : USN;
      ReasonMask : DWORD;
      ReturnOnlyOnClose : DWORD;
      Timeout : DWORDLONG;
      BytesToWaitFor : DWORDLONG;
      UsnJournalID : DWORDLONG;
   end record;
   type PREAD_USN_JOURNAL_DATA_V0 is access READ_USN_JOURNAL_DATA_V0; -- CXType_Pointer - CXType_Elaborated
   type READ_USN_JOURNAL_DATA_V1 is record
      StartUsn : USN;
      ReasonMask : DWORD;
      ReturnOnlyOnClose : DWORD;
      Timeout : DWORDLONG;
      BytesToWaitFor : DWORDLONG;
      UsnJournalID : DWORDLONG;
      MinMajorVersion : WORD;
      MaxMajorVersion : WORD;
   end record;
   type PREAD_USN_JOURNAL_DATA_V1 is access READ_USN_JOURNAL_DATA_V1; -- CXType_Pointer - CXType_Elaborated
   subtype READ_USN_JOURNAL_DATA is READ_USN_JOURNAL_DATA_V1; -- CXType_Typedef
   type PREAD_USN_JOURNAL_DATA is access READ_USN_JOURNAL_DATA_V1; -- CXType_Pointer - CXType_Typedef
   type USN_TRACK_MODIFIED_RANGES is record
      Flags : DWORD;
      Unused : DWORD;
      ChunkSize : DWORDLONG;
      FileSizeThreshold : LONGLONG;
   end record;
   type PUSN_TRACK_MODIFIED_RANGES is access USN_TRACK_MODIFIED_RANGES; -- CXType_Pointer - CXType_Elaborated
   type USN_RANGE_TRACK_OUTPUT is record
      Usn_x : USN;
   end record;
   type PUSN_RANGE_TRACK_OUTPUT is access USN_RANGE_TRACK_OUTPUT; -- CXType_Pointer - CXType_Elaborated
   type USN_RECORD_V2 is record
      RecordLength : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      FileReferenceNumber : DWORDLONG;
      ParentFileReferenceNumber : DWORDLONG;
      Usn_x : USN;
      TimeStamp : LARGE_INTEGER;
      Reason : DWORD;
      SourceInfo : DWORD;
      SecurityId : DWORD;
      FileAttributes : DWORD;
      FileNameLength : WORD;
      FileNameOffset : WORD;
      FileName : Void;
   end record;
   type PUSN_RECORD_V2 is access USN_RECORD_V2; -- CXType_Pointer - CXType_Elaborated
   type USN_RECORD_V3 is record
      RecordLength : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
      FileReferenceNumber : FILE_ID_128;
      ParentFileReferenceNumber : FILE_ID_128;
      Usn_x : USN;
      TimeStamp : LARGE_INTEGER;
      Reason : DWORD;
      SourceInfo : DWORD;
      SecurityId : DWORD;
      FileAttributes : DWORD;
      FileNameLength : WORD;
      FileNameOffset : WORD;
      FileName : Void;
   end record;
   type PUSN_RECORD_V3 is access USN_RECORD_V3; -- CXType_Pointer - CXType_Elaborated
   subtype USN_RECORD is USN_RECORD_V2; -- CXType_Typedef
   type PUSN_RECORD is access USN_RECORD_V2; -- CXType_Pointer - CXType_Typedef
   type USN_RECORD_COMMON_HEADER is record
      RecordLength : DWORD;
      MajorVersion : WORD;
      MinorVersion : WORD;
   end record;
   type PUSN_RECORD_COMMON_HEADER is access USN_RECORD_COMMON_HEADER; -- CXType_Pointer - CXType_Elaborated
   type USN_RECORD_EXTENT is record
      Offset : LONGLONG;
      Length : LONGLONG;
   end record;
   type PUSN_RECORD_EXTENT is access USN_RECORD_EXTENT; -- CXType_Pointer - CXType_Elaborated
   type USN_RECORD_V4 is record
      Header : USN_RECORD_COMMON_HEADER;
      FileReferenceNumber : FILE_ID_128;
      ParentFileReferenceNumber : FILE_ID_128;
      Usn_x : USN;
      Reason : DWORD;
      SourceInfo : DWORD;
      RemainingExtents : DWORD;
      NumberOfExtents : WORD;
      ExtentSize : WORD;
      Extents : Void;
   end record;
   type PUSN_RECORD_V4 is access USN_RECORD_V4; -- CXType_Pointer - CXType_Elaborated
   type USN_RECORD_UNION is null record; -- Union Placeholder [FIXME]
   type PUSN_RECORD_UNION is access USN_RECORD_UNION; -- CXType_Pointer - CXType_Elaborated
   type USN_JOURNAL_DATA_V0 is record
      UsnJournalID : DWORDLONG;
      FirstUsn : USN;
      NextUsn : USN;
      LowestValidUsn : USN;
      MaxUsn : USN;
      MaximumSize : DWORDLONG;
      AllocationDelta : DWORDLONG;
   end record;
   type PUSN_JOURNAL_DATA_V0 is access USN_JOURNAL_DATA_V0; -- CXType_Pointer - CXType_Elaborated
   type USN_JOURNAL_DATA_V1 is record
      UsnJournalID : DWORDLONG;
      FirstUsn : USN;
      NextUsn : USN;
      LowestValidUsn : USN;
      MaxUsn : USN;
      MaximumSize : DWORDLONG;
      AllocationDelta : DWORDLONG;
      MinSupportedMajorVersion : WORD;
      MaxSupportedMajorVersion : WORD;
   end record;
   type PUSN_JOURNAL_DATA_V1 is access USN_JOURNAL_DATA_V1; -- CXType_Pointer - CXType_Elaborated
   type USN_JOURNAL_DATA_V2 is record
      UsnJournalID : DWORDLONG;
      FirstUsn : USN;
      NextUsn : USN;
      LowestValidUsn : USN;
      MaxUsn : USN;
      MaximumSize : DWORDLONG;
      AllocationDelta : DWORDLONG;
      MinSupportedMajorVersion : WORD;
      MaxSupportedMajorVersion : WORD;
      Flags : DWORD;
      RangeTrackChunkSize : DWORDLONG;
      RangeTrackFileSizeThreshold : LONGLONG;
   end record;
   type PUSN_JOURNAL_DATA_V2 is access USN_JOURNAL_DATA_V2; -- CXType_Pointer - CXType_Elaborated
   subtype USN_JOURNAL_DATA is USN_JOURNAL_DATA_V1; -- CXType_Typedef
   type PUSN_JOURNAL_DATA is access USN_JOURNAL_DATA_V1; -- CXType_Pointer - CXType_Typedef
   type DELETE_USN_JOURNAL_DATA is record
      UsnJournalID : DWORDLONG;
      DeleteFlags : DWORD;
   end record;
   type PDELETE_USN_JOURNAL_DATA is access DELETE_USN_JOURNAL_DATA; -- CXType_Pointer - CXType_Elaborated
   type MARK_HANDLE_INFO is record
      VolumeHandle : HANDLE;
      HandleInfo : DWORD;
   end record;
   type PMARK_HANDLE_INFO is access MARK_HANDLE_INFO; -- CXType_Pointer - CXType_Elaborated
   type MARK_HANDLE_INFO32 is record
      VolumeHandle : UINT32;
      HandleInfo : DWORD;
   end record;
   type PMARK_HANDLE_INFO32 is access MARK_HANDLE_INFO32; -- CXType_Pointer - CXType_Elaborated
   type BULK_SECURITY_TEST_DATA is record
      DesiredAccess : ACCESS_MASK;
      SecurityIds : Void;
   end record;
   type PBULK_SECURITY_TEST_DATA is access BULK_SECURITY_TEST_DATA; -- CXType_Pointer - CXType_Elaborated
   type FILE_PREFETCH_x is record
      type_x : DWORD;
      Count : DWORD;
      Prefetch : Void;
   end record;
   subtype FILE_PREFETCH is FILE_PREFETCH_x; -- CXType_Elaborated
   type PFILE_PREFETCH is access FILE_PREFETCH_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_PREFETCH_EX_x is record
      type_x : DWORD;
      Count : DWORD;
      Context_x : PVOID;
      Prefetch : Void;
   end record;
   subtype FILE_PREFETCH_EX is FILE_PREFETCH_EX_x; -- CXType_Elaborated
   type PFILE_PREFETCH_EX is access FILE_PREFETCH_EX_x; -- CXType_Pointer - CXType_Elaborated
   type FILESYSTEM_STATISTICS_x is record
      FileSystemType : WORD;
      Version : WORD;
      SizeOfCompleteStructure : DWORD;
      UserFileReads : DWORD;
      UserFileReadBytes : DWORD;
      UserDiskReads : DWORD;
      UserFileWrites : DWORD;
      UserFileWriteBytes : DWORD;
      UserDiskWrites : DWORD;
      MetaDataReads : DWORD;
      MetaDataReadBytes : DWORD;
      MetaDataDiskReads : DWORD;
      MetaDataWrites : DWORD;
      MetaDataWriteBytes : DWORD;
      MetaDataDiskWrites : DWORD;
   end record;
   subtype FILESYSTEM_STATISTICS is FILESYSTEM_STATISTICS_x; -- CXType_Elaborated
   type PFILESYSTEM_STATISTICS is access FILESYSTEM_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type FAT_STATISTICS_x is record
      CreateHits : DWORD;
      SuccessfulCreates : DWORD;
      FailedCreates : DWORD;
      NonCachedReads : DWORD;
      NonCachedReadBytes : DWORD;
      NonCachedWrites : DWORD;
      NonCachedWriteBytes : DWORD;
      NonCachedDiskReads : DWORD;
      NonCachedDiskWrites : DWORD;
   end record;
   subtype FAT_STATISTICS is FAT_STATISTICS_x; -- CXType_Elaborated
   type PFAT_STATISTICS is access FAT_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type EXFAT_STATISTICS_x is record
      CreateHits : DWORD;
      SuccessfulCreates : DWORD;
      FailedCreates : DWORD;
      NonCachedReads : DWORD;
      NonCachedReadBytes : DWORD;
      NonCachedWrites : DWORD;
      NonCachedWriteBytes : DWORD;
      NonCachedDiskReads : DWORD;
      NonCachedDiskWrites : DWORD;
   end record;
   subtype EXFAT_STATISTICS is EXFAT_STATISTICS_x; -- CXType_Elaborated
   type PEXFAT_STATISTICS is access EXFAT_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type NTFS_STATISTICS_x is record
      LogFileFullExceptions : DWORD;
      OtherExceptions : DWORD;
      MftReads : DWORD;
      MftReadBytes : DWORD;
      MftWrites : DWORD;
      MftWriteBytes : DWORD;
      MftWritesUserLevel : Void;
      MftWritesFlushForLogFileFull : WORD;
      MftWritesLazyWriter : WORD;
      MftWritesUserRequest : WORD;
      Mft2Writes : DWORD;
      Mft2WriteBytes : DWORD;
      Mft2WritesUserLevel : Void;
      Mft2WritesFlushForLogFileFull : WORD;
      Mft2WritesLazyWriter : WORD;
      Mft2WritesUserRequest : WORD;
      RootIndexReads : DWORD;
      RootIndexReadBytes : DWORD;
      RootIndexWrites : DWORD;
      RootIndexWriteBytes : DWORD;
      BitmapReads : DWORD;
      BitmapReadBytes : DWORD;
      BitmapWrites : DWORD;
      BitmapWriteBytes : DWORD;
      BitmapWritesFlushForLogFileFull : WORD;
      BitmapWritesLazyWriter : WORD;
      BitmapWritesUserRequest : WORD;
      BitmapWritesUserLevel : Void;
      MftBitmapReads : DWORD;
      MftBitmapReadBytes : DWORD;
      MftBitmapWrites : DWORD;
      MftBitmapWriteBytes : DWORD;
      MftBitmapWritesFlushForLogFileFull : WORD;
      MftBitmapWritesLazyWriter : WORD;
      MftBitmapWritesUserRequest : WORD;
      MftBitmapWritesUserLevel : Void;
      UserIndexReads : DWORD;
      UserIndexReadBytes : DWORD;
      UserIndexWrites : DWORD;
      UserIndexWriteBytes : DWORD;
      LogFileReads : DWORD;
      LogFileReadBytes : DWORD;
      LogFileWrites : DWORD;
      LogFileWriteBytes : DWORD;
      Allocate : Void;
      DiskResourcesExhausted : DWORD;
   end record;
   subtype NTFS_STATISTICS is NTFS_STATISTICS_x; -- CXType_Elaborated
   type PNTFS_STATISTICS is access NTFS_STATISTICS_x; -- CXType_Pointer - CXType_Elaborated
   type FILESYSTEM_STATISTICS_EX_x is record
      FileSystemType : WORD;
      Version : WORD;
      SizeOfCompleteStructure : DWORD;
      UserFileReads : DWORDLONG;
      UserFileReadBytes : DWORDLONG;
      UserDiskReads : DWORDLONG;
      UserFileWrites : DWORDLONG;
      UserFileWriteBytes : DWORDLONG;
      UserDiskWrites : DWORDLONG;
      MetaDataReads : DWORDLONG;
      MetaDataReadBytes : DWORDLONG;
      MetaDataDiskReads : DWORDLONG;
      MetaDataWrites : DWORDLONG;
      MetaDataWriteBytes : DWORDLONG;
      MetaDataDiskWrites : DWORDLONG;
   end record;
   subtype FILESYSTEM_STATISTICS_EX is FILESYSTEM_STATISTICS_EX_x; -- CXType_Elaborated
   type PFILESYSTEM_STATISTICS_EX is access FILESYSTEM_STATISTICS_EX_x; -- CXType_Pointer - CXType_Elaborated
   type NTFS_STATISTICS_EX_x is record
      LogFileFullExceptions : DWORD;
      OtherExceptions : DWORD;
      MftReads : DWORDLONG;
      MftReadBytes : DWORDLONG;
      MftWrites : DWORDLONG;
      MftWriteBytes : DWORDLONG;
      MftWritesUserLevel : Void;
      MftWritesFlushForLogFileFull : DWORD;
      MftWritesLazyWriter : DWORD;
      MftWritesUserRequest : DWORD;
      Mft2Writes : DWORDLONG;
      Mft2WriteBytes : DWORDLONG;
      Mft2WritesUserLevel : Void;
      Mft2WritesFlushForLogFileFull : DWORD;
      Mft2WritesLazyWriter : DWORD;
      Mft2WritesUserRequest : DWORD;
      RootIndexReads : DWORDLONG;
      RootIndexReadBytes : DWORDLONG;
      RootIndexWrites : DWORDLONG;
      RootIndexWriteBytes : DWORDLONG;
      BitmapReads : DWORDLONG;
      BitmapReadBytes : DWORDLONG;
      BitmapWrites : DWORDLONG;
      BitmapWriteBytes : DWORDLONG;
      BitmapWritesFlushForLogFileFull : DWORD;
      BitmapWritesLazyWriter : DWORD;
      BitmapWritesUserRequest : DWORD;
      BitmapWritesUserLevel : Void;
      MftBitmapReads : DWORDLONG;
      MftBitmapReadBytes : DWORDLONG;
      MftBitmapWrites : DWORDLONG;
      MftBitmapWriteBytes : DWORDLONG;
      MftBitmapWritesFlushForLogFileFull : DWORD;
      MftBitmapWritesLazyWriter : DWORD;
      MftBitmapWritesUserRequest : DWORD;
      MftBitmapWritesUserLevel : Void;
      UserIndexReads : DWORDLONG;
      UserIndexReadBytes : DWORDLONG;
      UserIndexWrites : DWORDLONG;
      UserIndexWriteBytes : DWORDLONG;
      LogFileReads : DWORDLONG;
      LogFileReadBytes : DWORDLONG;
      LogFileWrites : DWORDLONG;
      LogFileWriteBytes : DWORDLONG;
      Allocate : Void;
      DiskResourcesExhausted : DWORD;
      VolumeTrimCount : DWORDLONG;
      VolumeTrimTime : DWORDLONG;
      VolumeTrimByteCount : DWORDLONG;
      FileLevelTrimCount : DWORDLONG;
      FileLevelTrimTime : DWORDLONG;
      FileLevelTrimByteCount : DWORDLONG;
      VolumeTrimSkippedCount : DWORDLONG;
      VolumeTrimSkippedByteCount : DWORDLONG;
      NtfsFillStatInfoFromMftRecordCalledCount : DWORDLONG;
      NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount : DWORDLONG;
      NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount : DWORDLONG;
   end record;
   subtype NTFS_STATISTICS_EX is NTFS_STATISTICS_EX_x; -- CXType_Elaborated
   type PNTFS_STATISTICS_EX is access NTFS_STATISTICS_EX_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_OBJECTID_BUFFER_x is record
      ObjectId_x : Void;
   end record;
   subtype FILE_OBJECTID_BUFFER is FILE_OBJECTID_BUFFER_x; -- CXType_Elaborated
   type PFILE_OBJECTID_BUFFER is access FILE_OBJECTID_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_SET_SPARSE_BUFFER_x is record
      SetSparse : BOOLEAN;
   end record;
   subtype FILE_SET_SPARSE_BUFFER is FILE_SET_SPARSE_BUFFER_x; -- CXType_Elaborated
   type PFILE_SET_SPARSE_BUFFER is access FILE_SET_SPARSE_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ZERO_DATA_INFORMATION_x is record
      FileOffset : LARGE_INTEGER;
      BeyondFinalZero : LARGE_INTEGER;
   end record;
   subtype FILE_ZERO_DATA_INFORMATION is FILE_ZERO_DATA_INFORMATION_x; -- CXType_Elaborated
   type PFILE_ZERO_DATA_INFORMATION is access FILE_ZERO_DATA_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ZERO_DATA_INFORMATION_EX_x is record
      FileOffset : LARGE_INTEGER;
      BeyondFinalZero : LARGE_INTEGER;
      Flags : DWORD;
   end record;
   subtype FILE_ZERO_DATA_INFORMATION_EX is FILE_ZERO_DATA_INFORMATION_EX_x; -- CXType_Elaborated
   type PFILE_ZERO_DATA_INFORMATION_EX is access FILE_ZERO_DATA_INFORMATION_EX_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_ALLOCATED_RANGE_BUFFER_x is record
      FileOffset : LARGE_INTEGER;
      Length : LARGE_INTEGER;
   end record;
   subtype FILE_ALLOCATED_RANGE_BUFFER is FILE_ALLOCATED_RANGE_BUFFER_x; -- CXType_Elaborated
   type PFILE_ALLOCATED_RANGE_BUFFER is access FILE_ALLOCATED_RANGE_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_BUFFER_x is record
      EncryptionOperation : DWORD;
      private_x : Void;
   end record;
   subtype ENCRYPTION_BUFFER is ENCRYPTION_BUFFER_x; -- CXType_Elaborated
   type PENCRYPTION_BUFFER is access ENCRYPTION_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type DECRYPTION_STATUS_BUFFER_x is record
      NoEncryptedStreams : BOOLEAN;
   end record;
   subtype DECRYPTION_STATUS_BUFFER is DECRYPTION_STATUS_BUFFER_x; -- CXType_Elaborated
   type PDECRYPTION_STATUS_BUFFER is access DECRYPTION_STATUS_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type REQUEST_RAW_ENCRYPTED_DATA_x is record
      FileOffset : LONGLONG;
      Length : DWORD;
   end record;
   subtype REQUEST_RAW_ENCRYPTED_DATA is REQUEST_RAW_ENCRYPTED_DATA_x; -- CXType_Elaborated
   type PREQUEST_RAW_ENCRYPTED_DATA is access REQUEST_RAW_ENCRYPTED_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTED_DATA_INFO_x is record
      StartingFileOffset : DWORDLONG;
      OutputBufferOffset : DWORD;
      BytesWithinFileSize : DWORD;
      BytesWithinValidDataLength : DWORD;
      CompressionFormat : WORD;
      DataUnitShift : BYTE;
      ChunkShift : BYTE;
      ClusterShift : BYTE;
      EncryptionFormat : BYTE;
      NumberOfDataBlocks : WORD;
      DataBlockSize : Void;
   end record;
   subtype ENCRYPTED_DATA_INFO is ENCRYPTED_DATA_INFO_x; -- CXType_Elaborated
   type PENCRYPTED_DATA_INFO is access ENCRYPTED_DATA_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type EXTENDED_ENCRYPTED_DATA_INFO_x is record
      ExtendedCode : DWORD;
      Length : DWORD;
      Flags : DWORD;
      Reserved : DWORD;
   end record;
   subtype EXTENDED_ENCRYPTED_DATA_INFO is EXTENDED_ENCRYPTED_DATA_INFO_x; -- CXType_Elaborated
   type PEXTENDED_ENCRYPTED_DATA_INFO is access EXTENDED_ENCRYPTED_DATA_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type PLEX_READ_DATA_REQUEST_x is record
      ByteOffset : LARGE_INTEGER;
      ByteLength : DWORD;
      PlexNumber : DWORD;
   end record;
   subtype PLEX_READ_DATA_REQUEST is PLEX_READ_DATA_REQUEST_x; -- CXType_Elaborated
   type PPLEX_READ_DATA_REQUEST is access PLEX_READ_DATA_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type SI_COPYFILE_x is record
      SourceFileNameLength : DWORD;
      DestinationFileNameLength : DWORD;
      Flags : DWORD;
      FileNameBuffer : Void;
   end record;
   subtype SI_COPYFILE is SI_COPYFILE_x; -- CXType_Elaborated
   type PSI_COPYFILE is access SI_COPYFILE_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_MAKE_COMPATIBLE_BUFFER_x is record
      CloseDisc : BOOLEAN;
   end record;
   subtype FILE_MAKE_COMPATIBLE_BUFFER is FILE_MAKE_COMPATIBLE_BUFFER_x; -- CXType_Elaborated
   type PFILE_MAKE_COMPATIBLE_BUFFER is access FILE_MAKE_COMPATIBLE_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_SET_DEFECT_MGMT_BUFFER_x is record
      Disable : BOOLEAN;
   end record;
   subtype FILE_SET_DEFECT_MGMT_BUFFER is FILE_SET_DEFECT_MGMT_BUFFER_x; -- CXType_Elaborated
   type PFILE_SET_DEFECT_MGMT_BUFFER is access FILE_SET_DEFECT_MGMT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_QUERY_SPARING_BUFFER_x is record
      SparingUnitBytes : DWORD;
      SoftwareSparing : BOOLEAN;
      TotalSpareBlocks : DWORD;
      FreeSpareBlocks : DWORD;
   end record;
   subtype FILE_QUERY_SPARING_BUFFER is FILE_QUERY_SPARING_BUFFER_x; -- CXType_Elaborated
   type PFILE_QUERY_SPARING_BUFFER is access FILE_QUERY_SPARING_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_QUERY_ON_DISK_VOL_INFO_BUFFER_x is record
      DirectoryCount : LARGE_INTEGER;
      FileCount : LARGE_INTEGER;
      FsFormatMajVersion : WORD;
      FsFormatMinVersion : WORD;
      FsFormatName : Void;
      FormatTime : LARGE_INTEGER;
      LastUpdateTime : LARGE_INTEGER;
      CopyrightInfo : Void;
      AbstractInfo : Void;
      FormattingImplementationInfo : Void;
      LastModifyingImplementationInfo : Void;
   end record;
   subtype FILE_QUERY_ON_DISK_VOL_INFO_BUFFER is FILE_QUERY_ON_DISK_VOL_INFO_BUFFER_x; -- CXType_Elaborated
   type PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER is access FILE_QUERY_ON_DISK_VOL_INFO_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   subtype CLSN is DWORDLONG; -- CXType_Typedef
   type FILE_INITIATE_REPAIR_OUTPUT_BUFFER_x is record
      Hint1 : DWORDLONG;
      Hint2 : DWORDLONG;
      Clsn_x : CLSN;
      Status : DWORD;
   end record;
   subtype FILE_INITIATE_REPAIR_OUTPUT_BUFFER is FILE_INITIATE_REPAIR_OUTPUT_BUFFER_x; -- CXType_Elaborated
   type PFILE_INITIATE_REPAIR_OUTPUT_BUFFER is access FILE_INITIATE_REPAIR_OUTPUT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type SHRINK_VOLUME_REQUEST_TYPES_x is (
      ShrinkPrepare,
      ShrinkCommit,
      ShrinkAbort
   );
   for SHRINK_VOLUME_REQUEST_TYPES_x use (
      ShrinkPrepare => 1,
      ShrinkCommit => 2,
      ShrinkAbort => 3
   );
   for SHRINK_VOLUME_REQUEST_TYPES_x'Size use 32;
   subtype SHRINK_VOLUME_REQUEST_TYPES is SHRINK_VOLUME_REQUEST_TYPES_x; -- CXType_Elaborated
   type PSHRINK_VOLUME_REQUEST_TYPES is access SHRINK_VOLUME_REQUEST_TYPES_x; -- CXType_Pointer - CXType_Elaborated
   type SHRINK_VOLUME_INFORMATION_x is record
      ShrinkRequestType : SHRINK_VOLUME_REQUEST_TYPES;
      Flags : DWORDLONG;
      NewNumberOfSectors : LONGLONG;
   end record;
   subtype SHRINK_VOLUME_INFORMATION is SHRINK_VOLUME_INFORMATION_x; -- CXType_Elaborated
   type PSHRINK_VOLUME_INFORMATION is access SHRINK_VOLUME_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_MODIFY_RM_x is record
      Flags : DWORD;
      LogContainerCountMax : DWORD;
      LogContainerCountMin : DWORD;
      LogContainerCount : DWORD;
      LogGrowthIncrement : DWORD;
      LogAutoShrinkPercentage : DWORD;
      Reserved : DWORDLONG;
      LoggingMode : WORD;
   end record;
   subtype TXFS_MODIFY_RM is TXFS_MODIFY_RM_x; -- CXType_Elaborated
   type PTXFS_MODIFY_RM is access TXFS_MODIFY_RM_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_QUERY_RM_INFORMATION_x is record
      BytesRequired : DWORD;
      TailLsn : DWORDLONG;
      CurrentLsn : DWORDLONG;
      ArchiveTailLsn : DWORDLONG;
      LogContainerSize : DWORDLONG;
      HighestVirtualClock : LARGE_INTEGER;
      LogContainerCount : DWORD;
      LogContainerCountMax : DWORD;
      LogContainerCountMin : DWORD;
      LogGrowthIncrement : DWORD;
      LogAutoShrinkPercentage : DWORD;
      Flags : DWORD;
      LoggingMode : WORD;
      Reserved : WORD;
      RmState : DWORD;
      LogCapacity : DWORDLONG;
      LogFree : DWORDLONG;
      TopsSize : DWORDLONG;
      TopsUsed : DWORDLONG;
      TransactionCount : DWORDLONG;
      OnePCCount : DWORDLONG;
      TwoPCCount : DWORDLONG;
      NumberLogFileFull : DWORDLONG;
      OldestTransactionAge : DWORDLONG;
      RMName : GUID;
      TmLogPathOffset : DWORD;
   end record;
   subtype TXFS_QUERY_RM_INFORMATION is TXFS_QUERY_RM_INFORMATION_x; -- CXType_Elaborated
   type PTXFS_QUERY_RM_INFORMATION is access TXFS_QUERY_RM_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_ROLLFORWARD_REDO_INFORMATION_x is record
      LastVirtualClock : LARGE_INTEGER;
      LastRedoLsn : DWORDLONG;
      HighestRecoveryLsn : DWORDLONG;
      Flags : DWORD;
   end record;
   subtype TXFS_ROLLFORWARD_REDO_INFORMATION is TXFS_ROLLFORWARD_REDO_INFORMATION_x; -- CXType_Elaborated
   type PTXFS_ROLLFORWARD_REDO_INFORMATION is access TXFS_ROLLFORWARD_REDO_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_START_RM_INFORMATION_x is record
      Flags : DWORD;
      LogContainerSize : DWORDLONG;
      LogContainerCountMin : DWORD;
      LogContainerCountMax : DWORD;
      LogGrowthIncrement : DWORD;
      LogAutoShrinkPercentage : DWORD;
      TmLogPathOffset : DWORD;
      TmLogPathLength : WORD;
      LoggingMode : WORD;
      LogPathLength : WORD;
      Reserved : WORD;
      LogPath : Void;
   end record;
   subtype TXFS_START_RM_INFORMATION is TXFS_START_RM_INFORMATION_x; -- CXType_Elaborated
   type PTXFS_START_RM_INFORMATION is access TXFS_START_RM_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_GET_METADATA_INFO_OUT_x is record
      TxfFileId : Void;
      LockingTransaction : GUID;
      LastLsn : DWORDLONG;
      TransactionState : DWORD;
   end record;
   subtype TXFS_GET_METADATA_INFO_OUT is TXFS_GET_METADATA_INFO_OUT_x; -- CXType_Elaborated
   type PTXFS_GET_METADATA_INFO_OUT is access TXFS_GET_METADATA_INFO_OUT_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_x is record
      Offset : DWORDLONG;
      NameFlags : DWORD;
      FileId : LONGLONG;
      Reserved1 : DWORD;
      Reserved2 : DWORD;
      Reserved3 : LONGLONG;
      FileName : Void;
   end record;
   subtype TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY is TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_x; -- CXType_Elaborated
   type PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY is access TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_LIST_TRANSACTION_LOCKED_FILES_x is record
      KtmTransaction : GUID;
      NumberOfFiles : DWORDLONG;
      BufferSizeRequired : DWORDLONG;
      Offset : DWORDLONG;
   end record;
   subtype TXFS_LIST_TRANSACTION_LOCKED_FILES is TXFS_LIST_TRANSACTION_LOCKED_FILES_x; -- CXType_Elaborated
   type PTXFS_LIST_TRANSACTION_LOCKED_FILES is access TXFS_LIST_TRANSACTION_LOCKED_FILES_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_LIST_TRANSACTIONS_ENTRY_x is record
      TransactionId : GUID;
      TransactionState : DWORD;
      Reserved1 : DWORD;
      Reserved2 : DWORD;
      Reserved3 : LONGLONG;
   end record;
   subtype TXFS_LIST_TRANSACTIONS_ENTRY is TXFS_LIST_TRANSACTIONS_ENTRY_x; -- CXType_Elaborated
   type PTXFS_LIST_TRANSACTIONS_ENTRY is access TXFS_LIST_TRANSACTIONS_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_LIST_TRANSACTIONS_x is record
      NumberOfTransactions : DWORDLONG;
      BufferSizeRequired : DWORDLONG;
   end record;
   subtype TXFS_LIST_TRANSACTIONS is TXFS_LIST_TRANSACTIONS_x; -- CXType_Elaborated
   type PTXFS_LIST_TRANSACTIONS is access TXFS_LIST_TRANSACTIONS_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_READ_BACKUP_INFORMATION_OUT_x is null record;
   subtype TXFS_READ_BACKUP_INFORMATION_OUT is TXFS_READ_BACKUP_INFORMATION_OUT_x; -- CXType_Elaborated
   type PTXFS_READ_BACKUP_INFORMATION_OUT is access TXFS_READ_BACKUP_INFORMATION_OUT_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_WRITE_BACKUP_INFORMATION_x is record
      Buffer : Void;
   end record;
   subtype TXFS_WRITE_BACKUP_INFORMATION is TXFS_WRITE_BACKUP_INFORMATION_x; -- CXType_Elaborated
   type PTXFS_WRITE_BACKUP_INFORMATION is access TXFS_WRITE_BACKUP_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_GET_TRANSACTED_VERSION_x is record
      ThisBaseVersion : DWORD;
      LatestVersion : DWORD;
      ThisMiniVersion : WORD;
      FirstMiniVersion : WORD;
      LatestMiniVersion : WORD;
   end record;
   subtype TXFS_GET_TRANSACTED_VERSION is TXFS_GET_TRANSACTED_VERSION_x; -- CXType_Elaborated
   type PTXFS_GET_TRANSACTED_VERSION is access TXFS_GET_TRANSACTED_VERSION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_SAVEPOINT_INFORMATION_x is record
      KtmTransaction : HANDLE;
      ActionCode : DWORD;
      SavepointId : DWORD;
   end record;
   subtype TXFS_SAVEPOINT_INFORMATION is TXFS_SAVEPOINT_INFORMATION_x; -- CXType_Elaborated
   type PTXFS_SAVEPOINT_INFORMATION is access TXFS_SAVEPOINT_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_CREATE_MINIVERSION_INFO_x is record
      StructureVersion : WORD;
      StructureLength : WORD;
      BaseVersion : DWORD;
      MiniVersion : WORD;
   end record;
   subtype TXFS_CREATE_MINIVERSION_INFO is TXFS_CREATE_MINIVERSION_INFO_x; -- CXType_Elaborated
   type PTXFS_CREATE_MINIVERSION_INFO is access TXFS_CREATE_MINIVERSION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type TXFS_TRANSACTION_ACTIVE_INFO_x is record
      TransactionsActiveAtSnapshot : BOOLEAN;
   end record;
   subtype TXFS_TRANSACTION_ACTIVE_INFO is TXFS_TRANSACTION_ACTIVE_INFO_x; -- CXType_Elaborated
   type PTXFS_TRANSACTION_ACTIVE_INFO is access TXFS_TRANSACTION_ACTIVE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type BOOT_AREA_INFO_x is record
      BootSectorCount : DWORD;
      BootSectors : Void;
   end record;
   subtype BOOT_AREA_INFO is BOOT_AREA_INFO_x; -- CXType_Elaborated
   type PBOOT_AREA_INFO is access BOOT_AREA_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type RETRIEVAL_POINTER_BASE_x is record
      FileAreaOffset : LARGE_INTEGER;
   end record;
   subtype RETRIEVAL_POINTER_BASE is RETRIEVAL_POINTER_BASE_x; -- CXType_Elaborated
   type PRETRIEVAL_POINTER_BASE is access RETRIEVAL_POINTER_BASE_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_FS_PERSISTENT_VOLUME_INFORMATION_x is record
      VolumeFlags : DWORD;
      FlagMask : DWORD;
      Version : DWORD;
      Reserved : DWORD;
   end record;
   subtype FILE_FS_PERSISTENT_VOLUME_INFORMATION is FILE_FS_PERSISTENT_VOLUME_INFORMATION_x; -- CXType_Elaborated
   type PFILE_FS_PERSISTENT_VOLUME_INFORMATION is access FILE_FS_PERSISTENT_VOLUME_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_SYSTEM_RECOGNITION_INFORMATION_x is record
      FileSystem : Void;
   end record;
   subtype FILE_SYSTEM_RECOGNITION_INFORMATION is FILE_SYSTEM_RECOGNITION_INFORMATION_x; -- CXType_Elaborated
   type PFILE_SYSTEM_RECOGNITION_INFORMATION is access FILE_SYSTEM_RECOGNITION_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type REQUEST_OPLOCK_INPUT_BUFFER_x is record
      StructureVersion : WORD;
      StructureLength : WORD;
      RequestedOplockLevel : DWORD;
      Flags : DWORD;
   end record;
   subtype REQUEST_OPLOCK_INPUT_BUFFER is REQUEST_OPLOCK_INPUT_BUFFER_x; -- CXType_Elaborated
   type PREQUEST_OPLOCK_INPUT_BUFFER is access REQUEST_OPLOCK_INPUT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type REQUEST_OPLOCK_OUTPUT_BUFFER_x is record
      StructureVersion : WORD;
      StructureLength : WORD;
      OriginalOplockLevel : DWORD;
      NewOplockLevel : DWORD;
      Flags : DWORD;
      AccessMode : ACCESS_MASK;
      ShareMode : WORD;
   end record;
   subtype REQUEST_OPLOCK_OUTPUT_BUFFER is REQUEST_OPLOCK_OUTPUT_BUFFER_x; -- CXType_Elaborated
   type PREQUEST_OPLOCK_OUTPUT_BUFFER is access REQUEST_OPLOCK_OUTPUT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type VIRTUAL_STORAGE_TYPE_x is record
      DeviceId : DWORD;
      VendorId : GUID;
   end record;
   subtype VIRTUAL_STORAGE_TYPE is VIRTUAL_STORAGE_TYPE_x; -- CXType_Elaborated
   type PVIRTUAL_STORAGE_TYPE is access VIRTUAL_STORAGE_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST_x is record
      RequestLevel : DWORD;
      RequestFlags : DWORD;
   end record;
   subtype STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST is STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST_x; -- CXType_Elaborated
   type PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST is access STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY_x is record
      EntryLength : DWORD;
      DependencyTypeFlags : DWORD;
      ProviderSpecificFlags : DWORD;
      VirtualStorageType : VIRTUAL_STORAGE_TYPE;
   end record;
   subtype STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY is STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY_x; -- CXType_Elaborated
   type PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY is access STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY_x is record
      EntryLength : DWORD;
      DependencyTypeFlags : DWORD;
      ProviderSpecificFlags : DWORD;
      VirtualStorageType : VIRTUAL_STORAGE_TYPE;
      AncestorLevel : DWORD;
      HostVolumeNameOffset : DWORD;
      HostVolumeNameSize : DWORD;
      DependentVolumeNameOffset : DWORD;
      DependentVolumeNameSize : DWORD;
      RelativePathOffset : DWORD;
      RelativePathSize : DWORD;
      DependentDeviceNameOffset : DWORD;
      DependentDeviceNameSize : DWORD;
   end record;
   subtype STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY is STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY_x; -- CXType_Elaborated
   type PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY is access STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE_x is record
      ResponseLevel : DWORD;
      NumberEntries : DWORD;
   end record;
   subtype STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE is STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE_x; -- CXType_Elaborated
   type PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE is access STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE_x; -- CXType_Pointer - CXType_Elaborated
   type SD_CHANGE_MACHINE_SID_INPUT_x is record
      CurrentMachineSIDOffset : WORD;
      CurrentMachineSIDLength : WORD;
      NewMachineSIDOffset : WORD;
      NewMachineSIDLength : WORD;
   end record;
   subtype SD_CHANGE_MACHINE_SID_INPUT is SD_CHANGE_MACHINE_SID_INPUT_x; -- CXType_Elaborated
   type PSD_CHANGE_MACHINE_SID_INPUT is access SD_CHANGE_MACHINE_SID_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_CHANGE_MACHINE_SID_OUTPUT_x is record
      NumSDChangedSuccess : DWORDLONG;
      NumSDChangedFail : DWORDLONG;
      NumSDUnused : DWORDLONG;
      NumSDTotal : DWORDLONG;
      NumMftSDChangedSuccess : DWORDLONG;
      NumMftSDChangedFail : DWORDLONG;
      NumMftSDTotal : DWORDLONG;
   end record;
   subtype SD_CHANGE_MACHINE_SID_OUTPUT is SD_CHANGE_MACHINE_SID_OUTPUT_x; -- CXType_Elaborated
   type PSD_CHANGE_MACHINE_SID_OUTPUT is access SD_CHANGE_MACHINE_SID_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_QUERY_STATS_INPUT_x is record
      Reserved : DWORD;
   end record;
   subtype SD_QUERY_STATS_INPUT is SD_QUERY_STATS_INPUT_x; -- CXType_Elaborated
   type PSD_QUERY_STATS_INPUT is access SD_QUERY_STATS_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_QUERY_STATS_OUTPUT_x is record
      SdsStreamSize : DWORDLONG;
      SdsAllocationSize : DWORDLONG;
      SiiStreamSize : DWORDLONG;
      SiiAllocationSize : DWORDLONG;
      SdhStreamSize : DWORDLONG;
      SdhAllocationSize : DWORDLONG;
      NumSDTotal : DWORDLONG;
      NumSDUnused : DWORDLONG;
   end record;
   subtype SD_QUERY_STATS_OUTPUT is SD_QUERY_STATS_OUTPUT_x; -- CXType_Elaborated
   type PSD_QUERY_STATS_OUTPUT is access SD_QUERY_STATS_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_ENUM_SDS_INPUT_x is record
      StartingOffset : DWORDLONG;
      MaxSDEntriesToReturn : DWORDLONG;
   end record;
   subtype SD_ENUM_SDS_INPUT is SD_ENUM_SDS_INPUT_x; -- CXType_Elaborated
   type PSD_ENUM_SDS_INPUT is access SD_ENUM_SDS_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_ENUM_SDS_ENTRY_x is record
      Hash : DWORD;
      SecurityId : DWORD;
      Offset : DWORDLONG;
      Length : DWORD;
      Descriptor : Void;
   end record;
   subtype SD_ENUM_SDS_ENTRY is SD_ENUM_SDS_ENTRY_x; -- CXType_Elaborated
   type PSD_ENUM_SDS_ENTRY is access SD_ENUM_SDS_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type SD_ENUM_SDS_OUTPUT_x is record
      NextOffset : DWORDLONG;
      NumSDEntriesReturned : DWORDLONG;
      NumSDBytesReturned : DWORDLONG;
      SDEntry : Void;
   end record;
   subtype SD_ENUM_SDS_OUTPUT is SD_ENUM_SDS_OUTPUT_x; -- CXType_Elaborated
   type PSD_ENUM_SDS_OUTPUT is access SD_ENUM_SDS_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_GLOBAL_CHANGE_INPUT_x is record
      Flags : DWORD;
      ChangeType : DWORD;
   end record;
   subtype SD_GLOBAL_CHANGE_INPUT is SD_GLOBAL_CHANGE_INPUT_x; -- CXType_Elaborated
   type PSD_GLOBAL_CHANGE_INPUT is access SD_GLOBAL_CHANGE_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SD_GLOBAL_CHANGE_OUTPUT_x is record
      Flags : DWORD;
      ChangeType : DWORD;
   end record;
   subtype SD_GLOBAL_CHANGE_OUTPUT is SD_GLOBAL_CHANGE_OUTPUT_x; -- CXType_Elaborated
   type PSD_GLOBAL_CHANGE_OUTPUT is access SD_GLOBAL_CHANGE_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type LOOKUP_STREAM_FROM_CLUSTER_INPUT_x is record
      Flags : DWORD;
      NumberOfClusters : DWORD;
      Cluster : Void;
   end record;
   subtype LOOKUP_STREAM_FROM_CLUSTER_INPUT is LOOKUP_STREAM_FROM_CLUSTER_INPUT_x; -- CXType_Elaborated
   type PLOOKUP_STREAM_FROM_CLUSTER_INPUT is access LOOKUP_STREAM_FROM_CLUSTER_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type LOOKUP_STREAM_FROM_CLUSTER_OUTPUT_x is record
      Offset : DWORD;
      NumberOfMatches : DWORD;
      BufferSizeRequired : DWORD;
   end record;
   subtype LOOKUP_STREAM_FROM_CLUSTER_OUTPUT is LOOKUP_STREAM_FROM_CLUSTER_OUTPUT_x; -- CXType_Elaborated
   type PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT is access LOOKUP_STREAM_FROM_CLUSTER_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type LOOKUP_STREAM_FROM_CLUSTER_ENTRY_x is record
      OffsetToNext : DWORD;
      Flags : DWORD;
      Reserved : LARGE_INTEGER;
      Cluster : LARGE_INTEGER;
      FileName : Void;
   end record;
   subtype LOOKUP_STREAM_FROM_CLUSTER_ENTRY is LOOKUP_STREAM_FROM_CLUSTER_ENTRY_x; -- CXType_Elaborated
   type PLOOKUP_STREAM_FROM_CLUSTER_ENTRY is access LOOKUP_STREAM_FROM_CLUSTER_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_TYPE_NOTIFICATION_INPUT_x is record
      Flags : DWORD;
      NumFileTypeIDs : DWORD;
      FileTypeID : Void;
   end record;
   subtype FILE_TYPE_NOTIFICATION_INPUT is FILE_TYPE_NOTIFICATION_INPUT_x; -- CXType_Elaborated
   type PFILE_TYPE_NOTIFICATION_INPUT is access FILE_TYPE_NOTIFICATION_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_MGMT_LOCK_x is record
      Flags : DWORD;
   end record;
   subtype CSV_MGMT_LOCK is CSV_MGMT_LOCK_x; -- CXType_Elaborated
   type PCSV_MGMT_LOCK is access CSV_MGMT_LOCK_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_NAMESPACE_INFO_x is record
      Version : DWORD;
      DeviceNumber : DWORD;
      StartingOffset : LARGE_INTEGER;
      SectorSize : DWORD;
   end record;
   subtype CSV_NAMESPACE_INFO is CSV_NAMESPACE_INFO_x; -- CXType_Elaborated
   type PCSV_NAMESPACE_INFO is access CSV_NAMESPACE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_CONTROL_OP_x is (
      CsvControlStartRedirectFile,
      CsvControlStopRedirectFile,
      CsvControlQueryRedirectState,
      CsvControlQueryFileRevision,
      CsvControlQueryMdsPath,
      CsvControlQueryFileRevisionFileId128,
      CsvControlQueryVolumeRedirectState,
      CsvControlEnableUSNRangeModificationTracking,
      CsvControlMarkHandleLocalVolumeMount,
      CsvControlUnmarkHandleLocalVolumeMount,
      CsvControlGetCsvFsMdsPathV2,
      CsvControlDisableCaching,
      CsvControlEnableCaching
   );
   for CSV_CONTROL_OP_x use (
      CsvControlStartRedirectFile => 2,
      CsvControlStopRedirectFile => 3,
      CsvControlQueryRedirectState => 4,
      CsvControlQueryFileRevision => 6,
      CsvControlQueryMdsPath => 8,
      CsvControlQueryFileRevisionFileId128 => 9,
      CsvControlQueryVolumeRedirectState => 10,
      CsvControlEnableUSNRangeModificationTracking => 13,
      CsvControlMarkHandleLocalVolumeMount => 14,
      CsvControlUnmarkHandleLocalVolumeMount => 15,
      CsvControlGetCsvFsMdsPathV2 => 18,
      CsvControlDisableCaching => 19,
      CsvControlEnableCaching => 20
   );
   for CSV_CONTROL_OP_x'Size use 32;
   subtype CSV_CONTROL_OP is CSV_CONTROL_OP_x; -- CXType_Elaborated
   type PCSV_CONTROL_OP is access CSV_CONTROL_OP_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_CONTROL_PARAM_x is record
      Operation : CSV_CONTROL_OP;
      Unused : LONGLONG;
   end record;
   subtype CSV_CONTROL_PARAM is CSV_CONTROL_PARAM_x; -- CXType_Elaborated
   type PCSV_CONTROL_PARAM is access CSV_CONTROL_PARAM_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_REDIRECT_STATE_x is record
      MdsNodeId : DWORD;
      DsNodeId : DWORD;
      FileRedirected : BOOLEAN;
   end record;
   subtype CSV_QUERY_REDIRECT_STATE is CSV_QUERY_REDIRECT_STATE_x; -- CXType_Elaborated
   type PCSV_QUERY_REDIRECT_STATE is access CSV_QUERY_REDIRECT_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_FILE_REVISION_x is record
      FileId : LONGLONG;
      FileRevision : Void;
   end record;
   subtype CSV_QUERY_FILE_REVISION is CSV_QUERY_FILE_REVISION_x; -- CXType_Elaborated
   type PCSV_QUERY_FILE_REVISION is access CSV_QUERY_FILE_REVISION_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_FILE_REVISION_FILE_ID_128_x is record
      FileId : FILE_ID_128;
      FileRevision : Void;
   end record;
   subtype CSV_QUERY_FILE_REVISION_FILE_ID_128 is CSV_QUERY_FILE_REVISION_FILE_ID_128_x; -- CXType_Elaborated
   type PCSV_QUERY_FILE_REVISION_FILE_ID_128 is access CSV_QUERY_FILE_REVISION_FILE_ID_128_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_MDS_PATH_x is record
      MdsNodeId : DWORD;
      DsNodeId : DWORD;
      PathLength : DWORD;
      Path : Void;
   end record;
   subtype CSV_QUERY_MDS_PATH is CSV_QUERY_MDS_PATH_x; -- CXType_Elaborated
   type PCSV_QUERY_MDS_PATH is access CSV_QUERY_MDS_PATH_x; -- CXType_Pointer - CXType_Elaborated
   type CSVFS_DISK_CONNECTIVITY_x is (
      CsvFsDiskConnectivityNone,
      CsvFsDiskConnectivityMdsNodeOnly,
      CsvFsDiskConnectivitySubsetOfNodes,
      CsvFsDiskConnectivityAllNodes
   );
   for CSVFS_DISK_CONNECTIVITY_x use (
      CsvFsDiskConnectivityNone => 0,
      CsvFsDiskConnectivityMdsNodeOnly => 1,
      CsvFsDiskConnectivitySubsetOfNodes => 2,
      CsvFsDiskConnectivityAllNodes => 3
   );
   for CSVFS_DISK_CONNECTIVITY_x'Size use 32;
   subtype CSVFS_DISK_CONNECTIVITY is CSVFS_DISK_CONNECTIVITY_x; -- CXType_Elaborated
   type PCSVFS_DISK_CONNECTIVITY is access CSVFS_DISK_CONNECTIVITY_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_VOLUME_REDIRECT_STATE_x is record
      MdsNodeId : DWORD;
      DsNodeId : DWORD;
      IsDiskConnected : BOOLEAN;
      ClusterEnableDirectIo : BOOLEAN;
      DiskConnectivity : CSVFS_DISK_CONNECTIVITY;
   end record;
   subtype CSV_QUERY_VOLUME_REDIRECT_STATE is CSV_QUERY_VOLUME_REDIRECT_STATE_x; -- CXType_Elaborated
   type PCSV_QUERY_VOLUME_REDIRECT_STATE is access CSV_QUERY_VOLUME_REDIRECT_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_MDS_PATH_V2_x is record
      Version : LONGLONG;
      RequiredSize : DWORD;
      MdsNodeId : DWORD;
      DsNodeId : DWORD;
      Flags : DWORD;
      DiskConnectivity : CSVFS_DISK_CONNECTIVITY;
      VolumeId : GUID;
      IpAddressOffset : DWORD;
      IpAddressLength : DWORD;
      PathOffset : DWORD;
      PathLength : DWORD;
   end record;
   subtype CSV_QUERY_MDS_PATH_V2 is CSV_QUERY_MDS_PATH_V2_x; -- CXType_Elaborated
   type PCSV_QUERY_MDS_PATH_V2 is access CSV_QUERY_MDS_PATH_V2_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT_x is record
      VetoedFromAltitudeIntegral : DWORDLONG;
      VetoedFromAltitudeDecimal : DWORDLONG;
      Reason : Void;
   end record;
   subtype CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT is CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT_x; -- CXType_Elaborated
   type PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT is access CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type CSV_IS_OWNED_BY_CSVFS_x is record
      OwnedByCSVFS : BOOLEAN;
   end record;
   subtype CSV_IS_OWNED_BY_CSVFS is CSV_IS_OWNED_BY_CSVFS_x; -- CXType_Elaborated
   type PCSV_IS_OWNED_BY_CSVFS is access CSV_IS_OWNED_BY_CSVFS_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_LEVEL_TRIM_RANGE_x is record
      Offset : DWORDLONG;
      Length : DWORDLONG;
   end record;
   subtype FILE_LEVEL_TRIM_RANGE is FILE_LEVEL_TRIM_RANGE_x; -- CXType_Elaborated
   type PFILE_LEVEL_TRIM_RANGE is access FILE_LEVEL_TRIM_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_LEVEL_TRIM_x is record
      Key : DWORD;
      NumRanges : DWORD;
      Ranges : Void;
   end record;
   subtype FILE_LEVEL_TRIM is FILE_LEVEL_TRIM_x; -- CXType_Elaborated
   type PFILE_LEVEL_TRIM is access FILE_LEVEL_TRIM_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_LEVEL_TRIM_OUTPUT_x is record
      NumRangesProcessed : DWORD;
   end record;
   subtype FILE_LEVEL_TRIM_OUTPUT is FILE_LEVEL_TRIM_OUTPUT_x; -- CXType_Elaborated
   type PFILE_LEVEL_TRIM_OUTPUT is access FILE_LEVEL_TRIM_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_FILE_LAYOUT_FILTER_TYPE_x is (
      QUERY_FILE_LAYOUT_FILTER_TYPE_NONE,
      QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS,
      QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID,
      QUERY_FILE_LAYOUT_NUM_FILTER_TYPES
   );
   for QUERY_FILE_LAYOUT_FILTER_TYPE_x use (
      QUERY_FILE_LAYOUT_FILTER_TYPE_NONE => 0,
      QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS => 1,
      QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID => 2,
      QUERY_FILE_LAYOUT_NUM_FILTER_TYPES => 3
   );
   for QUERY_FILE_LAYOUT_FILTER_TYPE_x'Size use 32;
   subtype QUERY_FILE_LAYOUT_FILTER_TYPE is QUERY_FILE_LAYOUT_FILTER_TYPE_x; -- CXType_Elaborated
   type CLUSTER_RANGE_x is record
      StartingCluster : LARGE_INTEGER;
      ClusterCount : LARGE_INTEGER;
   end record;
   subtype CLUSTER_RANGE is CLUSTER_RANGE_x; -- CXType_Elaborated
   type PCLUSTER_RANGE is access CLUSTER_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_REFERENCE_RANGE_x is record
      StartingFileReferenceNumber : DWORDLONG;
      EndingFileReferenceNumber : DWORDLONG;
   end record;
   subtype FILE_REFERENCE_RANGE is FILE_REFERENCE_RANGE_x; -- CXType_Elaborated
   type PFILE_REFERENCE_RANGE is access FILE_REFERENCE_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_FILE_LAYOUT_INPUT_x is record
      NumberOfPairs : DWORD;
      Flags : DWORD;
      FilterType : QUERY_FILE_LAYOUT_FILTER_TYPE;
      Reserved : DWORD;
      Filter : Void;
   end record;
   subtype QUERY_FILE_LAYOUT_INPUT is QUERY_FILE_LAYOUT_INPUT_x; -- CXType_Elaborated
   type PQUERY_FILE_LAYOUT_INPUT is access QUERY_FILE_LAYOUT_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_FILE_LAYOUT_OUTPUT_x is record
      FileEntryCount : DWORD;
      FirstFileOffset : DWORD;
      Flags : DWORD;
      Reserved : DWORD;
   end record;
   subtype QUERY_FILE_LAYOUT_OUTPUT is QUERY_FILE_LAYOUT_OUTPUT_x; -- CXType_Elaborated
   type PQUERY_FILE_LAYOUT_OUTPUT is access QUERY_FILE_LAYOUT_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_LAYOUT_ENTRY_x is record
      Version : DWORD;
      NextFileOffset : DWORD;
      Flags : DWORD;
      FileAttributes : DWORD;
      FileReferenceNumber : DWORDLONG;
      FirstNameOffset : DWORD;
      FirstStreamOffset : DWORD;
      ExtraInfoOffset : DWORD;
      Reserved : DWORD;
   end record;
   subtype FILE_LAYOUT_ENTRY is FILE_LAYOUT_ENTRY_x; -- CXType_Elaborated
   type PFILE_LAYOUT_ENTRY is access FILE_LAYOUT_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_LAYOUT_NAME_ENTRY_x is record
      NextNameOffset : DWORD;
      Flags : DWORD;
      ParentFileReferenceNumber : DWORDLONG;
      FileNameLength : DWORD;
      Reserved : DWORD;
      FileName : Void;
   end record;
   subtype FILE_LAYOUT_NAME_ENTRY is FILE_LAYOUT_NAME_ENTRY_x; -- CXType_Elaborated
   type PFILE_LAYOUT_NAME_ENTRY is access FILE_LAYOUT_NAME_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_LAYOUT_INFO_ENTRY_x is record
      BasicInformation : Void;
      OwnerId : DWORD;
      SecurityId : DWORD;
      Usn_x : USN;
   end record;
   subtype FILE_LAYOUT_INFO_ENTRY is FILE_LAYOUT_INFO_ENTRY_x; -- CXType_Elaborated
   type PFILE_LAYOUT_INFO_ENTRY is access FILE_LAYOUT_INFO_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type STREAM_LAYOUT_ENTRY_x is record
      Version : DWORD;
      NextStreamOffset : DWORD;
      Flags : DWORD;
      ExtentInformationOffset : DWORD;
      AllocationSize : LARGE_INTEGER;
      EndOfFile : LARGE_INTEGER;
      StreamInformationOffset : DWORD;
      AttributeTypeCode : DWORD;
      AttributeFlags : DWORD;
      StreamIdentifierLength : DWORD;
      StreamIdentifier : Void;
   end record;
   subtype STREAM_LAYOUT_ENTRY is STREAM_LAYOUT_ENTRY_x; -- CXType_Elaborated
   type PSTREAM_LAYOUT_ENTRY is access STREAM_LAYOUT_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type STREAM_EXTENT_ENTRY_x is record
      Flags : DWORD;
      ExtentInformation : Void;
   end record;
   subtype STREAM_EXTENT_ENTRY is STREAM_EXTENT_ENTRY_x; -- CXType_Elaborated
   type PSTREAM_EXTENT_ENTRY is access STREAM_EXTENT_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_GET_INTEGRITY_INFORMATION_BUFFER_x is record
      ChecksumAlgorithm : WORD;
      Reserved : WORD;
      Flags : DWORD;
      ChecksumChunkSizeInBytes : DWORD;
      ClusterSizeInBytes : DWORD;
   end record;
   subtype FSCTL_GET_INTEGRITY_INFORMATION_BUFFER is FSCTL_GET_INTEGRITY_INFORMATION_BUFFER_x; -- CXType_Elaborated
   type PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER is access FSCTL_GET_INTEGRITY_INFORMATION_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_x is record
      ChecksumAlgorithm : WORD;
      Reserved : WORD;
      Flags : DWORD;
   end record;
   subtype FSCTL_SET_INTEGRITY_INFORMATION_BUFFER is FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_x; -- CXType_Elaborated
   type PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER is access FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX_x is record
      EnableIntegrity : BYTE;
      KeepIntegrityStateUnchanged : BYTE;
      Reserved : WORD;
      Flags : DWORD;
      Version : BYTE;
      Reserved2 : Void;
   end record;
   subtype FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX is FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX_x; -- CXType_Elaborated
   type PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX is access FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_OFFLOAD_READ_INPUT_x is record
      Size_x : DWORD;
      Flags : DWORD;
      TokenTimeToLive : DWORD;
      Reserved : DWORD;
      FileOffset : DWORDLONG;
      CopyLength : DWORDLONG;
   end record;
   subtype FSCTL_OFFLOAD_READ_INPUT is FSCTL_OFFLOAD_READ_INPUT_x; -- CXType_Elaborated
   type PFSCTL_OFFLOAD_READ_INPUT is access FSCTL_OFFLOAD_READ_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_OFFLOAD_READ_OUTPUT_x is record
      Size_x : DWORD;
      Flags : DWORD;
      TransferLength : DWORDLONG;
      Token : Void;
   end record;
   subtype FSCTL_OFFLOAD_READ_OUTPUT is FSCTL_OFFLOAD_READ_OUTPUT_x; -- CXType_Elaborated
   type PFSCTL_OFFLOAD_READ_OUTPUT is access FSCTL_OFFLOAD_READ_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_OFFLOAD_WRITE_INPUT_x is record
      Size_x : DWORD;
      Flags : DWORD;
      FileOffset : DWORDLONG;
      CopyLength : DWORDLONG;
      TransferOffset : DWORDLONG;
      Token : Void;
   end record;
   subtype FSCTL_OFFLOAD_WRITE_INPUT is FSCTL_OFFLOAD_WRITE_INPUT_x; -- CXType_Elaborated
   type PFSCTL_OFFLOAD_WRITE_INPUT is access FSCTL_OFFLOAD_WRITE_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_OFFLOAD_WRITE_OUTPUT_x is record
      Size_x : DWORD;
      Flags : DWORD;
      LengthWritten : DWORDLONG;
   end record;
   subtype FSCTL_OFFLOAD_WRITE_OUTPUT is FSCTL_OFFLOAD_WRITE_OUTPUT_x; -- CXType_Elaborated
   type PFSCTL_OFFLOAD_WRITE_OUTPUT is access FSCTL_OFFLOAD_WRITE_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SET_PURGE_FAILURE_MODE_INPUT_x is record
      Flags : DWORD;
   end record;
   subtype SET_PURGE_FAILURE_MODE_INPUT is SET_PURGE_FAILURE_MODE_INPUT_x; -- CXType_Elaborated
   type PSET_PURGE_FAILURE_MODE_INPUT is access SET_PURGE_FAILURE_MODE_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type REPAIR_COPIES_INPUT_x is record
      Size_x : DWORD;
      Flags : DWORD;
      FileOffset : LARGE_INTEGER;
      Length : DWORD;
      SourceCopy : DWORD;
      NumberOfRepairCopies : DWORD;
      RepairCopies : Void;
   end record;
   subtype REPAIR_COPIES_INPUT is REPAIR_COPIES_INPUT_x; -- CXType_Elaborated
   type PREPAIR_COPIES_INPUT is access REPAIR_COPIES_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type REPAIR_COPIES_OUTPUT_x is record
      Size_x : DWORD;
      Status : DWORD;
      ResumeFileOffset : LARGE_INTEGER;
   end record;
   subtype REPAIR_COPIES_OUTPUT is REPAIR_COPIES_OUTPUT_x; -- CXType_Elaborated
   type PREPAIR_COPIES_OUTPUT is access REPAIR_COPIES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_REGION_INFO_x is record
      FileOffset : LONGLONG;
      Length : LONGLONG;
      Usage : DWORD;
      Reserved : DWORD;
   end record;
   subtype FILE_REGION_INFO is FILE_REGION_INFO_x; -- CXType_Elaborated
   type PFILE_REGION_INFO is access FILE_REGION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_REGION_OUTPUT_x is record
      Flags : DWORD;
      TotalRegionEntryCount : DWORD;
      RegionEntryCount : DWORD;
      Reserved : DWORD;
      Region : Void;
   end record;
   subtype FILE_REGION_OUTPUT is FILE_REGION_OUTPUT_x; -- CXType_Elaborated
   type PFILE_REGION_OUTPUT is access FILE_REGION_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_REGION_INPUT_x is record
      FileOffset : LONGLONG;
      Length : LONGLONG;
      DesiredUsage : DWORD;
   end record;
   subtype FILE_REGION_INPUT is FILE_REGION_INPUT_x; -- CXType_Elaborated
   type PFILE_REGION_INPUT is access FILE_REGION_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type WRITE_USN_REASON_INPUT_x is record
      Flags : DWORD;
      UsnReasonToWrite : DWORD;
   end record;
   subtype WRITE_USN_REASON_INPUT is WRITE_USN_REASON_INPUT_x; -- CXType_Elaborated
   type PWRITE_USN_REASON_INPUT is access WRITE_USN_REASON_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STORAGE_TIER_MEDIA_TYPE_x is (
      FileStorageTierMediaTypeUnspecified,
      FileStorageTierMediaTypeDisk,
      FileStorageTierMediaTypeSsd,
      FileStorageTierMediaTypeScm,
      FileStorageTierMediaTypeMax
   );
   for FILE_STORAGE_TIER_MEDIA_TYPE_x use (
      FileStorageTierMediaTypeUnspecified => 0,
      FileStorageTierMediaTypeDisk => 1,
      FileStorageTierMediaTypeSsd => 2,
      FileStorageTierMediaTypeScm => 4,
      FileStorageTierMediaTypeMax => 5
   );
   for FILE_STORAGE_TIER_MEDIA_TYPE_x'Size use 32;
   subtype FILE_STORAGE_TIER_MEDIA_TYPE is FILE_STORAGE_TIER_MEDIA_TYPE_x; -- CXType_Elaborated
   type PFILE_STORAGE_TIER_MEDIA_TYPE is access FILE_STORAGE_TIER_MEDIA_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STORAGE_TIER_CLASS_x is (
      FileStorageTierClassUnspecified,
      FileStorageTierClassCapacity,
      FileStorageTierClassPerformance,
      FileStorageTierClassMax
   );
   for FILE_STORAGE_TIER_CLASS_x use (
      FileStorageTierClassUnspecified => 0,
      FileStorageTierClassCapacity => 1,
      FileStorageTierClassPerformance => 2,
      FileStorageTierClassMax => 3
   );
   for FILE_STORAGE_TIER_CLASS_x'Size use 32;
   subtype FILE_STORAGE_TIER_CLASS is FILE_STORAGE_TIER_CLASS_x; -- CXType_Elaborated
   type PFILE_STORAGE_TIER_CLASS is access FILE_STORAGE_TIER_CLASS_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STORAGE_TIER_x is record
      Id : GUID;
      Name : Void;
      Description : Void;
      Flags : DWORDLONG;
      ProvisionedCapacity : DWORDLONG;
      MediaType : FILE_STORAGE_TIER_MEDIA_TYPE;
      Class : FILE_STORAGE_TIER_CLASS;
   end record;
   subtype FILE_STORAGE_TIER is FILE_STORAGE_TIER_x; -- CXType_Elaborated
   type PFILE_STORAGE_TIER is access FILE_STORAGE_TIER_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      TotalNumberOfTiers : DWORD;
      NumberOfTiersReturned : DWORD;
      Tiers : Void;
   end record;
   subtype FSCTL_QUERY_STORAGE_CLASSES_OUTPUT is FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_x; -- CXType_Elaborated
   type PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT is access FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type STREAM_INFORMATION_ENTRY_x is record
      Version : DWORD;
      Flags : DWORD;
      StreamInformation : Void;
   end record;
   type StreamInformation_x is null record; -- Union Placeholder [FIXME]
   type DesiredStorageClass_x is record
      Class : FILE_STORAGE_TIER_CLASS;
      Flags : DWORD;
   end record;
   subtype STREAM_INFORMATION_ENTRY is STREAM_INFORMATION_ENTRY_x; -- CXType_Elaborated
   type PSTREAM_INFORMATION_ENTRY is access STREAM_INFORMATION_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_QUERY_REGION_INFO_INPUT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      NumberOfTierIds : DWORD;
      TierIds : Void;
   end record;
   subtype FSCTL_QUERY_REGION_INFO_INPUT is FSCTL_QUERY_REGION_INFO_INPUT_x; -- CXType_Elaborated
   type PFSCTL_QUERY_REGION_INFO_INPUT is access FSCTL_QUERY_REGION_INFO_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_STORAGE_TIER_REGION_x is record
      TierId : GUID;
      Offset : DWORDLONG;
      Length : DWORDLONG;
   end record;
   subtype FILE_STORAGE_TIER_REGION is FILE_STORAGE_TIER_REGION_x; -- CXType_Elaborated
   type PFILE_STORAGE_TIER_REGION is access FILE_STORAGE_TIER_REGION_x; -- CXType_Pointer - CXType_Elaborated
   type FSCTL_QUERY_REGION_INFO_OUTPUT_x is record
      Version : DWORD;
      Size_x : DWORD;
      Flags : DWORD;
      Reserved : DWORD;
      Alignment : DWORDLONG;
      TotalNumberOfRegions : DWORD;
      NumberOfRegionsReturned : DWORD;
      Regions : Void;
   end record;
   subtype FSCTL_QUERY_REGION_INFO_OUTPUT is FSCTL_QUERY_REGION_INFO_OUTPUT_x; -- CXType_Elaborated
   type PFSCTL_QUERY_REGION_INFO_OUTPUT is access FSCTL_QUERY_REGION_INFO_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_DESIRED_STORAGE_CLASS_INFORMATION_x is record
      Class : FILE_STORAGE_TIER_CLASS;
      Flags : DWORD;
   end record;
   subtype FILE_DESIRED_STORAGE_CLASS_INFORMATION is FILE_DESIRED_STORAGE_CLASS_INFORMATION_x; -- CXType_Elaborated
   type PFILE_DESIRED_STORAGE_CLASS_INFORMATION is access FILE_DESIRED_STORAGE_CLASS_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type DUPLICATE_EXTENTS_DATA_x is record
      FileHandle : HANDLE;
      SourceFileOffset : LARGE_INTEGER;
      TargetFileOffset : LARGE_INTEGER;
      ByteCount : LARGE_INTEGER;
   end record;
   subtype DUPLICATE_EXTENTS_DATA is DUPLICATE_EXTENTS_DATA_x; -- CXType_Elaborated
   type PDUPLICATE_EXTENTS_DATA is access DUPLICATE_EXTENTS_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type DUPLICATE_EXTENTS_DATA32_x is record
      FileHandle : UINT32;
      SourceFileOffset : LARGE_INTEGER;
      TargetFileOffset : LARGE_INTEGER;
      ByteCount : LARGE_INTEGER;
   end record;
   subtype DUPLICATE_EXTENTS_DATA32 is DUPLICATE_EXTENTS_DATA32_x; -- CXType_Elaborated
   type PDUPLICATE_EXTENTS_DATA32 is access DUPLICATE_EXTENTS_DATA32_x; -- CXType_Pointer - CXType_Elaborated
   type DUPLICATE_EXTENTS_DATA_EX_x is record
      Size_x : SIZE_T;
      FileHandle : HANDLE;
      SourceFileOffset : LARGE_INTEGER;
      TargetFileOffset : LARGE_INTEGER;
      ByteCount : LARGE_INTEGER;
      Flags : DWORD;
   end record;
   subtype DUPLICATE_EXTENTS_DATA_EX is DUPLICATE_EXTENTS_DATA_EX_x; -- CXType_Elaborated
   type PDUPLICATE_EXTENTS_DATA_EX is access DUPLICATE_EXTENTS_DATA_EX_x; -- CXType_Pointer - CXType_Elaborated
   type DUPLICATE_EXTENTS_DATA_EX32_x is record
      Size_x : DWORD32;
      FileHandle : DWORD32;
      SourceFileOffset : LARGE_INTEGER;
      TargetFileOffset : LARGE_INTEGER;
      ByteCount : LARGE_INTEGER;
      Flags : DWORD;
   end record;
   subtype DUPLICATE_EXTENTS_DATA_EX32 is DUPLICATE_EXTENTS_DATA_EX32_x; -- CXType_Elaborated
   type PDUPLICATE_EXTENTS_DATA_EX32 is access DUPLICATE_EXTENTS_DATA_EX32_x; -- CXType_Pointer - CXType_Elaborated
   type REFS_SMR_VOLUME_GC_STATE_x is (
      SmrGcStateInactive,
      SmrGcStatePaused,
      SmrGcStateActive,
      SmrGcStateActiveFullSpeed
   );
   for REFS_SMR_VOLUME_GC_STATE_x use (
      SmrGcStateInactive => 0,
      SmrGcStatePaused => 1,
      SmrGcStateActive => 2,
      SmrGcStateActiveFullSpeed => 3
   );
   for REFS_SMR_VOLUME_GC_STATE_x'Size use 32;
   subtype REFS_SMR_VOLUME_GC_STATE is REFS_SMR_VOLUME_GC_STATE_x; -- CXType_Elaborated
   type PREFS_SMR_VOLUME_GC_STATE is access REFS_SMR_VOLUME_GC_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type REFS_SMR_VOLUME_INFO_OUTPUT_x is record
      Version : DWORD;
      Flags : DWORD;
      SizeOfRandomlyWritableTier : LARGE_INTEGER;
      FreeSpaceInRandomlyWritableTier : LARGE_INTEGER;
      SizeofSMRTier : LARGE_INTEGER;
      FreeSpaceInSMRTier : LARGE_INTEGER;
      UsableFreeSpaceInSMRTier : LARGE_INTEGER;
      VolumeGcState : REFS_SMR_VOLUME_GC_STATE;
      VolumeGcLastStatus : DWORD;
      Unused : Void;
   end record;
   subtype REFS_SMR_VOLUME_INFO_OUTPUT is REFS_SMR_VOLUME_INFO_OUTPUT_x; -- CXType_Elaborated
   type PREFS_SMR_VOLUME_INFO_OUTPUT is access REFS_SMR_VOLUME_INFO_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type REFS_SMR_VOLUME_GC_ACTION_x is (
      SmrGcActionStart,
      SmrGcActionStartFullSpeed,
      SmrGcActionPause,
      SmrGcActionStop
   );
   for REFS_SMR_VOLUME_GC_ACTION_x use (
      SmrGcActionStart => 1,
      SmrGcActionStartFullSpeed => 2,
      SmrGcActionPause => 3,
      SmrGcActionStop => 4
   );
   for REFS_SMR_VOLUME_GC_ACTION_x'Size use 32;
   subtype REFS_SMR_VOLUME_GC_ACTION is REFS_SMR_VOLUME_GC_ACTION_x; -- CXType_Elaborated
   type PREFS_SMR_VOLUME_GC_ACTION is access REFS_SMR_VOLUME_GC_ACTION_x; -- CXType_Pointer - CXType_Elaborated
   type REFS_SMR_VOLUME_GC_METHOD_x is (
      SmrGcMethodCompaction,
      SmrGcMethodCompression,
      SmrGcMethodRotation
   );
   for REFS_SMR_VOLUME_GC_METHOD_x use (
      SmrGcMethodCompaction => 1,
      SmrGcMethodCompression => 2,
      SmrGcMethodRotation => 3
   );
   for REFS_SMR_VOLUME_GC_METHOD_x'Size use 32;
   subtype REFS_SMR_VOLUME_GC_METHOD is REFS_SMR_VOLUME_GC_METHOD_x; -- CXType_Elaborated
   type PREFS_SMR_VOLUME_GC_METHOD is access REFS_SMR_VOLUME_GC_METHOD_x; -- CXType_Pointer - CXType_Elaborated
   type REFS_SMR_VOLUME_GC_PARAMETERS_x is record
      Version : DWORD;
      Flags : DWORD;
      Action : REFS_SMR_VOLUME_GC_ACTION;
      Method : REFS_SMR_VOLUME_GC_METHOD;
      IoGranularity : DWORD;
      CompressionFormat : DWORD;
      Unused : Void;
   end record;
   subtype REFS_SMR_VOLUME_GC_PARAMETERS is REFS_SMR_VOLUME_GC_PARAMETERS_x; -- CXType_Elaborated
   type PREFS_SMR_VOLUME_GC_PARAMETERS is access REFS_SMR_VOLUME_GC_PARAMETERS_x; -- CXType_Pointer - CXType_Elaborated
   type STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER_x is record
      OptimalWriteSize : DWORD;
      StreamGranularitySize : DWORD;
      StreamIdMin : DWORD;
      StreamIdMax : DWORD;
   end record;
   subtype STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER is STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER_x; -- CXType_Elaborated
   type PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER is access STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type STREAMS_ASSOCIATE_ID_INPUT_BUFFER_x is record
      Flags : DWORD;
      StreamId : DWORD;
   end record;
   subtype STREAMS_ASSOCIATE_ID_INPUT_BUFFER is STREAMS_ASSOCIATE_ID_INPUT_BUFFER_x; -- CXType_Elaborated
   type PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER is access STREAMS_ASSOCIATE_ID_INPUT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type STREAMS_QUERY_ID_OUTPUT_BUFFER_x is record
      StreamId : DWORD;
   end record;
   subtype STREAMS_QUERY_ID_OUTPUT_BUFFER is STREAMS_QUERY_ID_OUTPUT_BUFFER_x; -- CXType_Elaborated
   type PSTREAMS_QUERY_ID_OUTPUT_BUFFER is access STREAMS_QUERY_ID_OUTPUT_BUFFER_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_BAD_RANGES_INPUT_RANGE_x is record
      StartOffset : DWORDLONG;
      LengthInBytes : DWORDLONG;
   end record;
   subtype QUERY_BAD_RANGES_INPUT_RANGE is QUERY_BAD_RANGES_INPUT_RANGE_x; -- CXType_Elaborated
   type PQUERY_BAD_RANGES_INPUT_RANGE is access QUERY_BAD_RANGES_INPUT_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_BAD_RANGES_INPUT_x is record
      Flags : DWORD;
      NumRanges : DWORD;
      Ranges : Void;
   end record;
   subtype QUERY_BAD_RANGES_INPUT is QUERY_BAD_RANGES_INPUT_x; -- CXType_Elaborated
   type PQUERY_BAD_RANGES_INPUT is access QUERY_BAD_RANGES_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_BAD_RANGES_OUTPUT_RANGE_x is record
      Flags : DWORD;
      Reserved : DWORD;
      StartOffset : DWORDLONG;
      LengthInBytes : DWORDLONG;
   end record;
   subtype QUERY_BAD_RANGES_OUTPUT_RANGE is QUERY_BAD_RANGES_OUTPUT_RANGE_x; -- CXType_Elaborated
   type PQUERY_BAD_RANGES_OUTPUT_RANGE is access QUERY_BAD_RANGES_OUTPUT_RANGE_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_BAD_RANGES_OUTPUT_x is record
      Flags : DWORD;
      NumBadRanges : DWORD;
      NextOffsetToLookUp : DWORDLONG;
      BadRanges : Void;
   end record;
   subtype QUERY_BAD_RANGES_OUTPUT is QUERY_BAD_RANGES_OUTPUT_x; -- CXType_Elaborated
   type PQUERY_BAD_RANGES_OUTPUT is access QUERY_BAD_RANGES_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT_x is record
      Flags : DWORD;
      AlignmentShift : DWORD;
      FileOffsetToAlign : DWORDLONG;
      FallbackAlignmentShift : DWORD;
   end record;
   subtype SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT is SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT_x; -- CXType_Elaborated
   type PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT is access SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type VIRTUAL_STORAGE_BEHAVIOR_CODE_x is (
      VirtualStorageBehaviorUndefined,
      VirtualStorageBehaviorCacheWriteThrough,
      VirtualStorageBehaviorCacheWriteBack
   );
   for VIRTUAL_STORAGE_BEHAVIOR_CODE_x use (
      VirtualStorageBehaviorUndefined => 0,
      VirtualStorageBehaviorCacheWriteThrough => 1,
      VirtualStorageBehaviorCacheWriteBack => 2
   );
   for VIRTUAL_STORAGE_BEHAVIOR_CODE_x'Size use 32;
   subtype VIRTUAL_STORAGE_BEHAVIOR_CODE is VIRTUAL_STORAGE_BEHAVIOR_CODE_x; -- CXType_Elaborated
   type PVIRTUAL_STORAGE_BEHAVIOR_CODE is access VIRTUAL_STORAGE_BEHAVIOR_CODE_x; -- CXType_Pointer - CXType_Elaborated
   type VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT_x is record
      Size_x : DWORD;
      BehaviorCode : VIRTUAL_STORAGE_BEHAVIOR_CODE;
   end record;
   subtype VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT is VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT_x; -- CXType_Elaborated
   type PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT is access VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type ENCRYPTION_KEY_CTRL_INPUT_x is record
      IsProtect : BOOLEAN;
   end record;
   subtype ENCRYPTION_KEY_CTRL_INPUT is ENCRYPTION_KEY_CTRL_INPUT_x; -- CXType_Elaborated
   type PENCRYPTION_KEY_CTRL_INPUT is access ENCRYPTION_KEY_CTRL_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type WOF_EXTERNAL_INFO_x is record
      Version : DWORD;
      Provider : DWORD;
   end record;
   subtype WOF_EXTERNAL_INFO is WOF_EXTERNAL_INFO_x; -- CXType_Elaborated
   type PWOF_EXTERNAL_INFO is access WOF_EXTERNAL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type WOF_EXTERNAL_FILE_ID_x is record
      FileId : FILE_ID_128;
   end record;
   subtype WOF_EXTERNAL_FILE_ID is WOF_EXTERNAL_FILE_ID_x; -- CXType_Elaborated
   type PWOF_EXTERNAL_FILE_ID is access WOF_EXTERNAL_FILE_ID_x; -- CXType_Pointer - CXType_Elaborated
   type WOF_VERSION_INFO_x is record
      WofVersion : DWORD;
   end record;
   subtype WOF_VERSION_INFO is WOF_VERSION_INFO_x; -- CXType_Elaborated
   type PWOF_VERSION_INFO is access WOF_VERSION_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type WIM_PROVIDER_EXTERNAL_INFO_x is record
      Version : DWORD;
      Flags : DWORD;
      DataSourceId : LARGE_INTEGER;
      ResourceHash : Void;
   end record;
   subtype WIM_PROVIDER_EXTERNAL_INFO is WIM_PROVIDER_EXTERNAL_INFO_x; -- CXType_Elaborated
   type PWIM_PROVIDER_EXTERNAL_INFO is access WIM_PROVIDER_EXTERNAL_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type WIM_PROVIDER_ADD_OVERLAY_INPUT_x is record
      WimType : DWORD;
      WimIndex : DWORD;
      WimFileNameOffset : DWORD;
      WimFileNameLength : DWORD;
   end record;
   subtype WIM_PROVIDER_ADD_OVERLAY_INPUT is WIM_PROVIDER_ADD_OVERLAY_INPUT_x; -- CXType_Elaborated
   type PWIM_PROVIDER_ADD_OVERLAY_INPUT is access WIM_PROVIDER_ADD_OVERLAY_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type WIM_PROVIDER_UPDATE_OVERLAY_INPUT_x is record
      DataSourceId : LARGE_INTEGER;
      WimFileNameOffset : DWORD;
      WimFileNameLength : DWORD;
   end record;
   subtype WIM_PROVIDER_UPDATE_OVERLAY_INPUT is WIM_PROVIDER_UPDATE_OVERLAY_INPUT_x; -- CXType_Elaborated
   type PWIM_PROVIDER_UPDATE_OVERLAY_INPUT is access WIM_PROVIDER_UPDATE_OVERLAY_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type WIM_PROVIDER_REMOVE_OVERLAY_INPUT_x is record
      DataSourceId : LARGE_INTEGER;
   end record;
   subtype WIM_PROVIDER_REMOVE_OVERLAY_INPUT is WIM_PROVIDER_REMOVE_OVERLAY_INPUT_x; -- CXType_Elaborated
   type PWIM_PROVIDER_REMOVE_OVERLAY_INPUT is access WIM_PROVIDER_REMOVE_OVERLAY_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type WIM_PROVIDER_SUSPEND_OVERLAY_INPUT_x is record
      DataSourceId : LARGE_INTEGER;
   end record;
   subtype WIM_PROVIDER_SUSPEND_OVERLAY_INPUT is WIM_PROVIDER_SUSPEND_OVERLAY_INPUT_x; -- CXType_Elaborated
   type PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT is access WIM_PROVIDER_SUSPEND_OVERLAY_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type WIM_PROVIDER_OVERLAY_ENTRY_x is record
      NextEntryOffset : DWORD;
      DataSourceId : LARGE_INTEGER;
      WimGuid : GUID;
      WimFileNameOffset : DWORD;
      WimType : DWORD;
      WimIndex : DWORD;
      Flags : DWORD;
   end record;
   subtype WIM_PROVIDER_OVERLAY_ENTRY is WIM_PROVIDER_OVERLAY_ENTRY_x; -- CXType_Elaborated
   type PWIM_PROVIDER_OVERLAY_ENTRY is access WIM_PROVIDER_OVERLAY_ENTRY_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_PROVIDER_EXTERNAL_INFO_V0_x is record
      Version : DWORD;
      Algorithm : DWORD;
   end record;
   subtype FILE_PROVIDER_EXTERNAL_INFO_V0 is FILE_PROVIDER_EXTERNAL_INFO_V0_x; -- CXType_Elaborated
   type PFILE_PROVIDER_EXTERNAL_INFO_V0 is access FILE_PROVIDER_EXTERNAL_INFO_V0_x; -- CXType_Pointer - CXType_Elaborated
   type FILE_PROVIDER_EXTERNAL_INFO_V1_x is record
      Version : DWORD;
      Algorithm : DWORD;
      Flags : DWORD;
   end record;
   subtype FILE_PROVIDER_EXTERNAL_INFO_V1 is FILE_PROVIDER_EXTERNAL_INFO_V1_x; -- CXType_Elaborated
   type PFILE_PROVIDER_EXTERNAL_INFO_V1 is access FILE_PROVIDER_EXTERNAL_INFO_V1_x; -- CXType_Pointer - CXType_Elaborated
   subtype FILE_PROVIDER_EXTERNAL_INFO is FILE_PROVIDER_EXTERNAL_INFO_V1; -- CXType_Typedef
   subtype PFILE_PROVIDER_EXTERNAL_INFO is PFILE_PROVIDER_EXTERNAL_INFO_V1; -- CXType_Typedef
   type CONTAINER_VOLUME_STATE_x is record
      Flags : DWORD;
   end record;
   subtype CONTAINER_VOLUME_STATE is CONTAINER_VOLUME_STATE_x; -- CXType_Elaborated
   type PCONTAINER_VOLUME_STATE is access CONTAINER_VOLUME_STATE_x; -- CXType_Pointer - CXType_Elaborated
   type CONTAINER_ROOT_INFO_INPUT_x is record
      Flags : DWORD;
   end record;
   subtype CONTAINER_ROOT_INFO_INPUT is CONTAINER_ROOT_INFO_INPUT_x; -- CXType_Elaborated
   type PCONTAINER_ROOT_INFO_INPUT is access CONTAINER_ROOT_INFO_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type CONTAINER_ROOT_INFO_OUTPUT_x is record
      ContainerRootIdLength : WORD;
      ContainerRootId : Void;
   end record;
   subtype CONTAINER_ROOT_INFO_OUTPUT is CONTAINER_ROOT_INFO_OUTPUT_x; -- CXType_Elaborated
   type PCONTAINER_ROOT_INFO_OUTPUT is access CONTAINER_ROOT_INFO_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type VIRTUALIZATION_INSTANCE_INFO_INPUT_x is record
      NumberOfWorkerThreads : DWORD;
      Flags : DWORD;
   end record;
   subtype VIRTUALIZATION_INSTANCE_INFO_INPUT is VIRTUALIZATION_INSTANCE_INFO_INPUT_x; -- CXType_Elaborated
   type PVIRTUALIZATION_INSTANCE_INFO_INPUT is access VIRTUALIZATION_INSTANCE_INFO_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type VIRTUALIZATION_INSTANCE_INFO_INPUT_EX_x is record
      HeaderSize : WORD;
      Flags : DWORD;
      NotificationInfoSize : DWORD;
      NotificationInfoOffset : WORD;
      ProviderMajorVersion : WORD;
   end record;
   subtype VIRTUALIZATION_INSTANCE_INFO_INPUT_EX is VIRTUALIZATION_INSTANCE_INFO_INPUT_EX_x; -- CXType_Elaborated
   type PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX is access VIRTUALIZATION_INSTANCE_INFO_INPUT_EX_x; -- CXType_Pointer - CXType_Elaborated
   type VIRTUALIZATION_INSTANCE_INFO_OUTPUT_x is record
      VirtualizationInstanceID : GUID;
   end record;
   subtype VIRTUALIZATION_INSTANCE_INFO_OUTPUT is VIRTUALIZATION_INSTANCE_INFO_OUTPUT_x; -- CXType_Elaborated
   type PVIRTUALIZATION_INSTANCE_INFO_OUTPUT is access VIRTUALIZATION_INSTANCE_INFO_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type GET_FILTER_FILE_IDENTIFIER_INPUT_x is record
      AltitudeLength : WORD;
      Altitude : Void;
   end record;
   subtype GET_FILTER_FILE_IDENTIFIER_INPUT is GET_FILTER_FILE_IDENTIFIER_INPUT_x; -- CXType_Elaborated
   type PGET_FILTER_FILE_IDENTIFIER_INPUT is access GET_FILTER_FILE_IDENTIFIER_INPUT_x; -- CXType_Pointer - CXType_Elaborated
   type GET_FILTER_FILE_IDENTIFIER_OUTPUT_x is record
      FilterFileIdentifierLength : WORD;
      FilterFileIdentifier : Void;
   end record;
   subtype GET_FILTER_FILE_IDENTIFIER_OUTPUT is GET_FILTER_FILE_IDENTIFIER_OUTPUT_x; -- CXType_Elaborated
   type PGET_FILTER_FILE_IDENTIFIER_OUTPUT is access GET_FILTER_FILE_IDENTIFIER_OUTPUT_x; -- CXType_Pointer - CXType_Elaborated
   type DISK_EXTENT_x is record
      DiskNumber : DWORD;
      StartingOffset : LARGE_INTEGER;
      ExtentLength : LARGE_INTEGER;
   end record;
   subtype DISK_EXTENT is DISK_EXTENT_x; -- CXType_Elaborated
   type PDISK_EXTENT is access DISK_EXTENT_x; -- CXType_Pointer - CXType_Elaborated
   type VOLUME_DISK_EXTENTS_x is record
      NumberOfDiskExtents : DWORD;
      Extents : Void;
   end record;
   subtype VOLUME_DISK_EXTENTS is VOLUME_DISK_EXTENTS_x; -- CXType_Elaborated
   type PVOLUME_DISK_EXTENTS is access VOLUME_DISK_EXTENTS_x; -- CXType_Pointer - CXType_Elaborated
   type VOLUME_GET_GPT_ATTRIBUTES_INFORMATION_x is record
      GptAttributes : DWORDLONG;
   end record;
   subtype VOLUME_GET_GPT_ATTRIBUTES_INFORMATION is VOLUME_GET_GPT_ATTRIBUTES_INFORMATION_x; -- CXType_Elaborated
   type PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION is access VOLUME_GET_GPT_ATTRIBUTES_INFORMATION_x; -- CXType_Pointer - CXType_Elaborated
   type IO_IRP_EXT_TRACK_OFFSET_HEADER_x; -- Forward Declaration
   subtype PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *, struct _IO_IRP_EXT_TRACK_OFFSET_HEADER *, LONGLONG)
   type IO_IRP_EXT_TRACK_OFFSET_HEADER_x is record
      Validation : WORD;
      Flags : WORD;
      TrackedOffsetCallback : PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK;
   end record;
   subtype IO_IRP_EXT_TRACK_OFFSET_HEADER is IO_IRP_EXT_TRACK_OFFSET_HEADER_x; -- CXType_Elaborated
   type PIO_IRP_EXT_TRACK_OFFSET_HEADER is access IO_IRP_EXT_TRACK_OFFSET_HEADER_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\winsmcrd.h>
   subtype UWORD is WORD; -- CXType_Typedef
   type SCARD_IO_REQUEST_x is record
      dwProtocol : DWORD;
      cbPciLength : DWORD;
   end record;
   subtype SCARD_IO_REQUEST is SCARD_IO_REQUEST_x; -- CXType_Elaborated
   type PSCARD_IO_REQUEST is access SCARD_IO_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type LPSCARD_IO_REQUEST is access SCARD_IO_REQUEST_x; -- CXType_Pointer - CXType_Elaborated
   type LPCSCARD_IO_REQUEST is access constant SCARD_IO_REQUEST; -- CXType_Pointer - CXType_Typedef
   type SCARD_T0_COMMAND_x is record
      bCla : BYTE;
      bIns : BYTE;
      bP1 : BYTE;
      bP2 : BYTE;
      bP3 : BYTE;
   end record;
   subtype SCARD_T0_COMMAND is SCARD_T0_COMMAND_x; -- CXType_Elaborated
   type LPSCARD_T0_COMMAND is access SCARD_T0_COMMAND_x; -- CXType_Pointer - CXType_Elaborated
   type SCARD_T0_REQUEST_x is record
      ioRequest : SCARD_IO_REQUEST;
      bSw1 : BYTE;
      bSw2 : BYTE;
   end record;
   subtype SCARD_T0_REQUEST is SCARD_T0_REQUEST_x; -- CXType_Elaborated
   type PSCARD_T0_REQUEST is access SCARD_T0_REQUEST; -- CXType_Pointer - CXType_Typedef
   type LPSCARD_T0_REQUEST is access SCARD_T0_REQUEST; -- CXType_Pointer - CXType_Typedef
   type SCARD_T1_REQUEST_x is record
      ioRequest : SCARD_IO_REQUEST;
   end record;
   subtype SCARD_T1_REQUEST is SCARD_T1_REQUEST_x; -- CXType_Elaborated
   type PSCARD_T1_REQUEST is access SCARD_T1_REQUEST; -- CXType_Pointer - CXType_Typedef
   type LPSCARD_T1_REQUEST is access SCARD_T1_REQUEST; -- CXType_Pointer - CXType_Typedef
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winscard.h>
   type LPCBYTE is access constant BYTE; -- CXType_Pointer - CXType_Typedef
   subtype SCARDCONTEXT is ULONG_PTR; -- CXType_Typedef
   type PSCARDCONTEXT is access SCARDCONTEXT; -- CXType_Pointer - CXType_Typedef
   type LPSCARDCONTEXT is access SCARDCONTEXT; -- CXType_Pointer - CXType_Typedef
   subtype SCARDHANDLE is ULONG_PTR; -- CXType_Typedef
   type PSCARDHANDLE is access SCARDHANDLE; -- CXType_Pointer - CXType_Typedef
   type LPSCARDHANDLE is access SCARDHANDLE; -- CXType_Pointer - CXType_Typedef
   function SCardEstablishContext(
      dwScope : DWORD;
      pvReserved1 : LPCVOID;
      pvReserved2 : LPCVOID;
      phContext : LPSCARDCONTEXT
   ) return LONG;
   pragma import (C,SCardEstablishContext,"SCardEstablishContext");
   function SCardReleaseContext(
      hContext_x : SCARDCONTEXT
   ) return LONG;
   pragma import (C,SCardReleaseContext,"SCardReleaseContext");
   function SCardIsValidContext(
      hContext_x : SCARDCONTEXT
   ) return LONG;
   pragma import (C,SCardIsValidContext,"SCardIsValidContext");
   function SCardListReaderGroupsA(
      hContext_x : SCARDCONTEXT;
      mszGroups : LPSTR;
      pcchGroups : LPDWORD
   ) return LONG;
   pragma import (C,SCardListReaderGroupsA,"SCardListReaderGroupsA");
   function SCardListReaderGroupsW(
      hContext_x : SCARDCONTEXT;
      mszGroups : LPWSTR;
      pcchGroups : LPDWORD
   ) return LONG;
   pragma import (C,SCardListReaderGroupsW,"SCardListReaderGroupsW");
   function SCardListReadersA(
      hContext_x : SCARDCONTEXT;
      mszGroups : LPCSTR;
      mszReaders : LPSTR;
      pcchReaders : LPDWORD
   ) return LONG;
   pragma import (C,SCardListReadersA,"SCardListReadersA");
   function SCardListReadersW(
      hContext_x : SCARDCONTEXT;
      mszGroups : LPCWSTR;
      mszReaders : LPWSTR;
      pcchReaders : LPDWORD
   ) return LONG;
   pragma import (C,SCardListReadersW,"SCardListReadersW");
   function SCardListCardsA(
      hContext_x : SCARDCONTEXT;
      pbAtr : LPCBYTE;
      rgquidInterfaces : LPCGUID;
      cguidInterfaceCount : DWORD;
      mszCards : access CHAR;
      pcchCards : LPDWORD
   ) return LONG;
   pragma import (C,SCardListCardsA,"SCardListCardsA");
   function SCardListCardsW(
      hContext_x : SCARDCONTEXT;
      pbAtr : LPCBYTE;
      rgquidInterfaces : LPCGUID;
      cguidInterfaceCount : DWORD;
      mszCards : access WCHAR;
      pcchCards : LPDWORD
   ) return LONG;
   pragma import (C,SCardListCardsW,"SCardListCardsW");
   function SCardListInterfacesA(
      hContext_x : SCARDCONTEXT;
      szCard : LPCSTR;
      pguidInterfaces : LPGUID;
      pcguidInterfaces : LPDWORD
   ) return LONG;
   pragma import (C,SCardListInterfacesA,"SCardListInterfacesA");
   function SCardListInterfacesW(
      hContext_x : SCARDCONTEXT;
      szCard : LPCWSTR;
      pguidInterfaces : LPGUID;
      pcguidInterfaces : LPDWORD
   ) return LONG;
   pragma import (C,SCardListInterfacesW,"SCardListInterfacesW");
   function SCardGetProviderIdA(
      hContext_x : SCARDCONTEXT;
      szCard : LPCSTR;
      pguidProviderId : LPGUID
   ) return LONG;
   pragma import (C,SCardGetProviderIdA,"SCardGetProviderIdA");
   function SCardGetProviderIdW(
      hContext_x : SCARDCONTEXT;
      szCard : LPCWSTR;
      pguidProviderId : LPGUID
   ) return LONG;
   pragma import (C,SCardGetProviderIdW,"SCardGetProviderIdW");
   function SCardGetCardTypeProviderNameA(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCSTR;
      dwProviderId : DWORD;
      szProvider : access CHAR;
      pcchProvider : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetCardTypeProviderNameA,"SCardGetCardTypeProviderNameA");
   function SCardGetCardTypeProviderNameW(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCWSTR;
      dwProviderId : DWORD;
      szProvider : access WCHAR;
      pcchProvider : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetCardTypeProviderNameW,"SCardGetCardTypeProviderNameW");
   function SCardIntroduceReaderGroupA(
      hContext_x : SCARDCONTEXT;
      szGroupName : LPCSTR
   ) return LONG;
   pragma import (C,SCardIntroduceReaderGroupA,"SCardIntroduceReaderGroupA");
   function SCardIntroduceReaderGroupW(
      hContext_x : SCARDCONTEXT;
      szGroupName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardIntroduceReaderGroupW,"SCardIntroduceReaderGroupW");
   function SCardForgetReaderGroupA(
      hContext_x : SCARDCONTEXT;
      szGroupName : LPCSTR
   ) return LONG;
   pragma import (C,SCardForgetReaderGroupA,"SCardForgetReaderGroupA");
   function SCardForgetReaderGroupW(
      hContext_x : SCARDCONTEXT;
      szGroupName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardForgetReaderGroupW,"SCardForgetReaderGroupW");
   function SCardIntroduceReaderA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR;
      szDeviceName : LPCSTR
   ) return LONG;
   pragma import (C,SCardIntroduceReaderA,"SCardIntroduceReaderA");
   function SCardIntroduceReaderW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR;
      szDeviceName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardIntroduceReaderW,"SCardIntroduceReaderW");
   function SCardForgetReaderA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR
   ) return LONG;
   pragma import (C,SCardForgetReaderA,"SCardForgetReaderA");
   function SCardForgetReaderW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardForgetReaderW,"SCardForgetReaderW");
   function SCardAddReaderToGroupA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR;
      szGroupName : LPCSTR
   ) return LONG;
   pragma import (C,SCardAddReaderToGroupA,"SCardAddReaderToGroupA");
   function SCardAddReaderToGroupW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR;
      szGroupName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardAddReaderToGroupW,"SCardAddReaderToGroupW");
   function SCardRemoveReaderFromGroupA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR;
      szGroupName : LPCSTR
   ) return LONG;
   pragma import (C,SCardRemoveReaderFromGroupA,"SCardRemoveReaderFromGroupA");
   function SCardRemoveReaderFromGroupW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR;
      szGroupName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardRemoveReaderFromGroupW,"SCardRemoveReaderFromGroupW");
   function SCardIntroduceCardTypeA(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCSTR;
      pguidPrimaryProvider : LPCGUID;
      rgguidInterfaces : LPCGUID;
      dwInterfaceCount : DWORD;
      pbAtr : LPCBYTE;
      pbAtrMask : LPCBYTE;
      cbAtrLen : DWORD
   ) return LONG;
   pragma import (C,SCardIntroduceCardTypeA,"SCardIntroduceCardTypeA");
   function SCardIntroduceCardTypeW(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCWSTR;
      pguidPrimaryProvider : LPCGUID;
      rgguidInterfaces : LPCGUID;
      dwInterfaceCount : DWORD;
      pbAtr : LPCBYTE;
      pbAtrMask : LPCBYTE;
      cbAtrLen : DWORD
   ) return LONG;
   pragma import (C,SCardIntroduceCardTypeW,"SCardIntroduceCardTypeW");
   function SCardSetCardTypeProviderNameA(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCSTR;
      dwProviderId : DWORD;
      szProvider : LPCSTR
   ) return LONG;
   pragma import (C,SCardSetCardTypeProviderNameA,"SCardSetCardTypeProviderNameA");
   function SCardSetCardTypeProviderNameW(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCWSTR;
      dwProviderId : DWORD;
      szProvider : LPCWSTR
   ) return LONG;
   pragma import (C,SCardSetCardTypeProviderNameW,"SCardSetCardTypeProviderNameW");
   function SCardForgetCardTypeA(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCSTR
   ) return LONG;
   pragma import (C,SCardForgetCardTypeA,"SCardForgetCardTypeA");
   function SCardForgetCardTypeW(
      hContext_x : SCARDCONTEXT;
      szCardName : LPCWSTR
   ) return LONG;
   pragma import (C,SCardForgetCardTypeW,"SCardForgetCardTypeW");
   function SCardFreeMemory(
      hContext_x : SCARDCONTEXT;
      pvMem : LPCVOID
   ) return LONG;
   pragma import (C,SCardFreeMemory,"SCardFreeMemory");
   function SCardAccessStartedEvent return HANDLE;
   pragma import (C,SCardAccessStartedEvent,"SCardAccessStartedEvent");
   procedure SCardReleaseStartedEvent;
   pragma import (C,SCardReleaseStartedEvent,"SCardReleaseStartedEvent");
   type SCARD_READERSTATEA is record
      szReader : LPCSTR;
      pvUserData : LPVOID;
      dwCurrentState : DWORD;
      dwEventState : DWORD;
      cbAtr : DWORD;
      rgbAtr : Void;
   end record;
   type PSCARD_READERSTATEA is access SCARD_READERSTATEA; -- CXType_Pointer - CXType_Elaborated
   type LPSCARD_READERSTATEA is access SCARD_READERSTATEA; -- CXType_Pointer - CXType_Elaborated
   type SCARD_READERSTATEW is record
      szReader : LPCWSTR;
      pvUserData : LPVOID;
      dwCurrentState : DWORD;
      dwEventState : DWORD;
      cbAtr : DWORD;
      rgbAtr : Void;
   end record;
   type PSCARD_READERSTATEW is access SCARD_READERSTATEW; -- CXType_Pointer - CXType_Elaborated
   type LPSCARD_READERSTATEW is access SCARD_READERSTATEW; -- CXType_Pointer - CXType_Elaborated
   subtype SCARD_READERSTATE is SCARD_READERSTATEA; -- CXType_Typedef
   subtype PSCARD_READERSTATE is PSCARD_READERSTATEA; -- CXType_Typedef
   subtype LPSCARD_READERSTATE is LPSCARD_READERSTATEA; -- CXType_Typedef
   function SCardLocateCardsA(
      hContext_x : SCARDCONTEXT;
      mszCards : LPCSTR;
      rgReaderStates : LPSCARD_READERSTATEA;
      cReaders : DWORD
   ) return LONG;
   pragma import (C,SCardLocateCardsA,"SCardLocateCardsA");
   function SCardLocateCardsW(
      hContext_x : SCARDCONTEXT;
      mszCards : LPCWSTR;
      rgReaderStates : LPSCARD_READERSTATEW;
      cReaders : DWORD
   ) return LONG;
   pragma import (C,SCardLocateCardsW,"SCardLocateCardsW");
   type SCARD_ATRMASK_x is record
      cbAtr : DWORD;
      rgbAtr : Void;
      rgbMask : Void;
   end record;
   subtype SCARD_ATRMASK is SCARD_ATRMASK_x; -- CXType_Elaborated
   type PSCARD_ATRMASK is access SCARD_ATRMASK_x; -- CXType_Pointer - CXType_Elaborated
   type LPSCARD_ATRMASK is access SCARD_ATRMASK_x; -- CXType_Pointer - CXType_Elaborated
   function SCardLocateCardsByATRA(
      hContext_x : SCARDCONTEXT;
      rgAtrMasks : LPSCARD_ATRMASK;
      cAtrs : DWORD;
      rgReaderStates : LPSCARD_READERSTATEA;
      cReaders : DWORD
   ) return LONG;
   pragma import (C,SCardLocateCardsByATRA,"SCardLocateCardsByATRA");
   function SCardLocateCardsByATRW(
      hContext_x : SCARDCONTEXT;
      rgAtrMasks : LPSCARD_ATRMASK;
      cAtrs : DWORD;
      rgReaderStates : LPSCARD_READERSTATEW;
      cReaders : DWORD
   ) return LONG;
   pragma import (C,SCardLocateCardsByATRW,"SCardLocateCardsByATRW");
   function SCardGetStatusChangeA(
      hContext_x : SCARDCONTEXT;
      dwTimeout : DWORD;
      rgReaderStates : LPSCARD_READERSTATEA;
      cReaders : DWORD
   ) return LONG;
   pragma import (C,SCardGetStatusChangeA,"SCardGetStatusChangeA");
   function SCardGetStatusChangeW(
      hContext_x : SCARDCONTEXT;
      dwTimeout : DWORD;
      rgReaderStates : LPSCARD_READERSTATEW;
      cReaders : DWORD
   ) return LONG;
   pragma import (C,SCardGetStatusChangeW,"SCardGetStatusChangeW");
   function SCardCancel(
      hContext_x : SCARDCONTEXT
   ) return LONG;
   pragma import (C,SCardCancel,"SCardCancel");
   function SCardConnectA(
      hContext_x : SCARDCONTEXT;
      szReader : LPCSTR;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      phCard : LPSCARDHANDLE;
      pdwActiveProtocol : LPDWORD
   ) return LONG;
   pragma import (C,SCardConnectA,"SCardConnectA");
   function SCardConnectW(
      hContext_x : SCARDCONTEXT;
      szReader : LPCWSTR;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      phCard : LPSCARDHANDLE;
      pdwActiveProtocol : LPDWORD
   ) return LONG;
   pragma import (C,SCardConnectW,"SCardConnectW");
   function SCardReconnect(
      hCard : SCARDHANDLE;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      dwInitialization : DWORD;
      pdwActiveProtocol : LPDWORD
   ) return LONG;
   pragma import (C,SCardReconnect,"SCardReconnect");
   function SCardDisconnect(
      hCard : SCARDHANDLE;
      dwDisposition : DWORD
   ) return LONG;
   pragma import (C,SCardDisconnect,"SCardDisconnect");
   function SCardBeginTransaction(
      hCard : SCARDHANDLE
   ) return LONG;
   pragma import (C,SCardBeginTransaction,"SCardBeginTransaction");
   function SCardEndTransaction(
      hCard : SCARDHANDLE;
      dwDisposition : DWORD
   ) return LONG;
   pragma import (C,SCardEndTransaction,"SCardEndTransaction");
   function SCardCancelTransaction(
      hCard : SCARDHANDLE
   ) return LONG;
   pragma import (C,SCardCancelTransaction,"SCardCancelTransaction");
   function SCardState(
      hCard : SCARDHANDLE;
      pdwState : LPDWORD;
      pdwProtocol : LPDWORD;
      pbAtr : LPBYTE;
      pcbAtrLen : LPDWORD
   ) return LONG;
   pragma import (C,SCardState,"SCardState");
   function SCardStatusA(
      hCard : SCARDHANDLE;
      mszReaderNames : LPSTR;
      pcchReaderLen : LPDWORD;
      pdwState : LPDWORD;
      pdwProtocol : LPDWORD;
      pbAtr : LPBYTE;
      pcbAtrLen : LPDWORD
   ) return LONG;
   pragma import (C,SCardStatusA,"SCardStatusA");
   function SCardStatusW(
      hCard : SCARDHANDLE;
      mszReaderNames : LPWSTR;
      pcchReaderLen : LPDWORD;
      pdwState : LPDWORD;
      pdwProtocol : LPDWORD;
      pbAtr : LPBYTE;
      pcbAtrLen : LPDWORD
   ) return LONG;
   pragma import (C,SCardStatusW,"SCardStatusW");
   function SCardTransmit(
      hCard : SCARDHANDLE;
      pioSendPci : LPCSCARD_IO_REQUEST;
      pbSendBuffer : LPCBYTE;
      cbSendLength : DWORD;
      pioRecvPci : LPSCARD_IO_REQUEST;
      pbRecvBuffer : LPBYTE;
      pcbRecvLength : LPDWORD
   ) return LONG;
   pragma import (C,SCardTransmit,"SCardTransmit");
   function SCardGetTransmitCount(
      hCard : SCARDHANDLE;
      pcTransmitCount : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetTransmitCount,"SCardGetTransmitCount");
   function SCardControl(
      hCard : SCARDHANDLE;
      dwControlCode : DWORD;
      lpInBuffer : LPCVOID;
      cbInBufferSize : DWORD;
      lpOutBuffer : LPVOID;
      cbOutBufferSize : DWORD;
      lpBytesReturned : LPDWORD
   ) return LONG;
   pragma import (C,SCardControl,"SCardControl");
   function SCardGetAttrib(
      hCard : SCARDHANDLE;
      dwAttrId : DWORD;
      pbAttr : LPBYTE;
      pcbAttrLen : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetAttrib,"SCardGetAttrib");
   function SCardSetAttrib(
      hCard : SCARDHANDLE;
      dwAttrId : DWORD;
      pbAttr : LPCBYTE;
      cbAttrLen : DWORD
   ) return LONG;
   pragma import (C,SCardSetAttrib,"SCardSetAttrib");
   subtype LPOCNCONNPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] SCARDHANDLE (SCARDCONTEXT, LPSTR, LPSTR, PVOID)
   subtype LPOCNCONNPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] SCARDHANDLE (SCARDCONTEXT, LPWSTR, LPWSTR, PVOID)
   subtype LPOCNCHKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (SCARDCONTEXT, SCARDHANDLE, PVOID)
   subtype LPOCNDSCPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (SCARDCONTEXT, SCARDHANDLE, PVOID)
   type OPENCARD_SEARCH_CRITERIAA is record
      dwStructSize : DWORD;
      lpstrGroupNames : LPSTR;
      nMaxGroupNames : DWORD;
      rgguidInterfaces : LPCGUID;
      cguidInterfaces : DWORD;
      lpstrCardNames : LPSTR;
      nMaxCardNames : DWORD;
      lpfnCheck : LPOCNCHKPROC;
      lpfnConnect : LPOCNCONNPROCA;
      lpfnDisconnect : LPOCNDSCPROC;
      pvUserData : LPVOID;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
   end record;
   type POPENCARD_SEARCH_CRITERIAA is access OPENCARD_SEARCH_CRITERIAA; -- CXType_Pointer - CXType_Elaborated
   type LPOPENCARD_SEARCH_CRITERIAA is access OPENCARD_SEARCH_CRITERIAA; -- CXType_Pointer - CXType_Elaborated
   type OPENCARD_SEARCH_CRITERIAW is record
      dwStructSize : DWORD;
      lpstrGroupNames : LPWSTR;
      nMaxGroupNames : DWORD;
      rgguidInterfaces : LPCGUID;
      cguidInterfaces : DWORD;
      lpstrCardNames : LPWSTR;
      nMaxCardNames : DWORD;
      lpfnCheck : LPOCNCHKPROC;
      lpfnConnect : LPOCNCONNPROCW;
      lpfnDisconnect : LPOCNDSCPROC;
      pvUserData : LPVOID;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
   end record;
   type POPENCARD_SEARCH_CRITERIAW is access OPENCARD_SEARCH_CRITERIAW; -- CXType_Pointer - CXType_Elaborated
   type LPOPENCARD_SEARCH_CRITERIAW is access OPENCARD_SEARCH_CRITERIAW; -- CXType_Pointer - CXType_Elaborated
   subtype OPENCARD_SEARCH_CRITERIA is OPENCARD_SEARCH_CRITERIAA; -- CXType_Typedef
   subtype POPENCARD_SEARCH_CRITERIA is POPENCARD_SEARCH_CRITERIAA; -- CXType_Typedef
   subtype LPOPENCARD_SEARCH_CRITERIA is LPOPENCARD_SEARCH_CRITERIAA; -- CXType_Typedef
   type OPENCARDNAME_EXA is record
      dwStructSize : DWORD;
      hSCardContext : SCARDCONTEXT;
      hwndOwner : HWND;
      dwFlags : DWORD;
      lpstrTitle : LPCSTR;
      lpstrSearchDesc : LPCSTR;
      hIcon_x : HICON;
      pOpenCardSearchCriteria : POPENCARD_SEARCH_CRITERIAA;
      lpfnConnect : LPOCNCONNPROCA;
      pvUserData : LPVOID;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      lpstrRdr : LPSTR;
      nMaxRdr : DWORD;
      lpstrCard : LPSTR;
      nMaxCard : DWORD;
      dwActiveProtocol : DWORD;
      hCardHandle : SCARDHANDLE;
   end record;
   type POPENCARDNAME_EXA is access OPENCARDNAME_EXA; -- CXType_Pointer - CXType_Elaborated
   type LPOPENCARDNAME_EXA is access OPENCARDNAME_EXA; -- CXType_Pointer - CXType_Elaborated
   type OPENCARDNAME_EXW is record
      dwStructSize : DWORD;
      hSCardContext : SCARDCONTEXT;
      hwndOwner : HWND;
      dwFlags : DWORD;
      lpstrTitle : LPCWSTR;
      lpstrSearchDesc : LPCWSTR;
      hIcon_x : HICON;
      pOpenCardSearchCriteria : POPENCARD_SEARCH_CRITERIAW;
      lpfnConnect : LPOCNCONNPROCW;
      pvUserData : LPVOID;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      lpstrRdr : LPWSTR;
      nMaxRdr : DWORD;
      lpstrCard : LPWSTR;
      nMaxCard : DWORD;
      dwActiveProtocol : DWORD;
      hCardHandle : SCARDHANDLE;
   end record;
   type POPENCARDNAME_EXW is access OPENCARDNAME_EXW; -- CXType_Pointer - CXType_Elaborated
   type LPOPENCARDNAME_EXW is access OPENCARDNAME_EXW; -- CXType_Pointer - CXType_Elaborated
   subtype OPENCARDNAME_EX is OPENCARDNAME_EXA; -- CXType_Typedef
   subtype POPENCARDNAME_EX is POPENCARDNAME_EXA; -- CXType_Typedef
   subtype LPOPENCARDNAME_EX is LPOPENCARDNAME_EXA; -- CXType_Typedef
   type READER_SEL_REQUEST_MATCH_TYPE is (
      RSR_MATCH_TYPE_READER_AND_CONTAINER,
      RSR_MATCH_TYPE_SERIAL_NUMBER,
      RSR_MATCH_TYPE_ALL_CARDS
   );
   for READER_SEL_REQUEST_MATCH_TYPE use (
      RSR_MATCH_TYPE_READER_AND_CONTAINER => 1,
      RSR_MATCH_TYPE_SERIAL_NUMBER => 2,
      RSR_MATCH_TYPE_ALL_CARDS => 3
   );
   for READER_SEL_REQUEST_MATCH_TYPE'Size use 32;
   type READER_SEL_REQUEST is record
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      MatchType : READER_SEL_REQUEST_MATCH_TYPE;
   end record;
   type PREADER_SEL_REQUEST is access READER_SEL_REQUEST; -- CXType_Pointer - CXType_Elaborated
   type READER_SEL_RESPONSE is record
      cbReaderNameOffset : DWORD;
      cchReaderNameLength : DWORD;
      cbCardNameOffset : DWORD;
      cchCardNameLength : DWORD;
   end record;
   type PREADER_SEL_RESPONSE is access READER_SEL_RESPONSE; -- CXType_Pointer - CXType_Elaborated
   function SCardUIDlgSelectCardA(
      param1 : LPOPENCARDNAME_EXA
   ) return LONG;
   pragma import (C,SCardUIDlgSelectCardA,"SCardUIDlgSelectCardA");
   function SCardUIDlgSelectCardW(
      param1 : LPOPENCARDNAME_EXW
   ) return LONG;
   pragma import (C,SCardUIDlgSelectCardW,"SCardUIDlgSelectCardW");
   type OPENCARDNAMEA is record
      dwStructSize : DWORD;
      hwndOwner : HWND;
      hSCardContext : SCARDCONTEXT;
      lpstrGroupNames : LPSTR;
      nMaxGroupNames : DWORD;
      lpstrCardNames : LPSTR;
      nMaxCardNames : DWORD;
      rgguidInterfaces : LPCGUID;
      cguidInterfaces : DWORD;
      lpstrRdr : LPSTR;
      nMaxRdr : DWORD;
      lpstrCard : LPSTR;
      nMaxCard : DWORD;
      lpstrTitle : LPCSTR;
      dwFlags : DWORD;
      pvUserData : LPVOID;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      dwActiveProtocol : DWORD;
      lpfnConnect : LPOCNCONNPROCA;
      lpfnCheck : LPOCNCHKPROC;
      lpfnDisconnect : LPOCNDSCPROC;
      hCardHandle : SCARDHANDLE;
   end record;
   type POPENCARDNAMEA is access OPENCARDNAMEA; -- CXType_Pointer - CXType_Elaborated
   type LPOPENCARDNAMEA is access OPENCARDNAMEA; -- CXType_Pointer - CXType_Elaborated
   type OPENCARDNAMEW is record
      dwStructSize : DWORD;
      hwndOwner : HWND;
      hSCardContext : SCARDCONTEXT;
      lpstrGroupNames : LPWSTR;
      nMaxGroupNames : DWORD;
      lpstrCardNames : LPWSTR;
      nMaxCardNames : DWORD;
      rgguidInterfaces : LPCGUID;
      cguidInterfaces : DWORD;
      lpstrRdr : LPWSTR;
      nMaxRdr : DWORD;
      lpstrCard : LPWSTR;
      nMaxCard : DWORD;
      lpstrTitle : LPCWSTR;
      dwFlags : DWORD;
      pvUserData : LPVOID;
      dwShareMode : DWORD;
      dwPreferredProtocols : DWORD;
      dwActiveProtocol : DWORD;
      lpfnConnect : LPOCNCONNPROCW;
      lpfnCheck : LPOCNCHKPROC;
      lpfnDisconnect : LPOCNDSCPROC;
      hCardHandle : SCARDHANDLE;
   end record;
   type POPENCARDNAMEW is access OPENCARDNAMEW; -- CXType_Pointer - CXType_Elaborated
   type LPOPENCARDNAMEW is access OPENCARDNAMEW; -- CXType_Pointer - CXType_Elaborated
   subtype OPENCARDNAME is OPENCARDNAMEA; -- CXType_Typedef
   subtype POPENCARDNAME is POPENCARDNAMEA; -- CXType_Typedef
   subtype LPOPENCARDNAME is LPOPENCARDNAMEA; -- CXType_Typedef
   function GetOpenCardNameA(
      param1 : LPOPENCARDNAMEA
   ) return LONG;
   pragma import (C,GetOpenCardNameA,"GetOpenCardNameA");
   function GetOpenCardNameW(
      param1 : LPOPENCARDNAMEW
   ) return LONG;
   pragma import (C,GetOpenCardNameW,"GetOpenCardNameW");
   function SCardDlgExtendedError return LONG;
   pragma import (C,SCardDlgExtendedError,"SCardDlgExtendedError");
   function SCardReadCacheA(
      hContext_x : SCARDCONTEXT;
      CardIdentifier : access UUID;
      FreshnessCounter : DWORD;
      LookupName : LPSTR;
      Data : PBYTE;
      DataLen : access DWORD
   ) return LONG;
   pragma import (C,SCardReadCacheA,"SCardReadCacheA");
   function SCardReadCacheW(
      hContext_x : SCARDCONTEXT;
      CardIdentifier : access UUID;
      FreshnessCounter : DWORD;
      LookupName : LPWSTR;
      Data : PBYTE;
      DataLen : access DWORD
   ) return LONG;
   pragma import (C,SCardReadCacheW,"SCardReadCacheW");
   function SCardWriteCacheA(
      hContext_x : SCARDCONTEXT;
      CardIdentifier : access UUID;
      FreshnessCounter : DWORD;
      LookupName : LPSTR;
      Data : PBYTE;
      DataLen : DWORD
   ) return LONG;
   pragma import (C,SCardWriteCacheA,"SCardWriteCacheA");
   function SCardWriteCacheW(
      hContext_x : SCARDCONTEXT;
      CardIdentifier : access UUID;
      FreshnessCounter : DWORD;
      LookupName : LPWSTR;
      Data : PBYTE;
      DataLen : DWORD
   ) return LONG;
   pragma import (C,SCardWriteCacheW,"SCardWriteCacheW");
   function SCardGetReaderIconA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR;
      pbIcon : LPBYTE;
      pcbIcon : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetReaderIconA,"SCardGetReaderIconA");
   function SCardGetReaderIconW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR;
      pbIcon : LPBYTE;
      pcbIcon : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetReaderIconW,"SCardGetReaderIconW");
   function SCardGetDeviceTypeIdA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR;
      pdwDeviceTypeId : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetDeviceTypeIdA,"SCardGetDeviceTypeIdA");
   function SCardGetDeviceTypeIdW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR;
      pdwDeviceTypeId : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetDeviceTypeIdW,"SCardGetDeviceTypeIdW");
   function SCardGetReaderDeviceInstanceIdA(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCSTR;
      szDeviceInstanceId : LPSTR;
      pcchDeviceInstanceId : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetReaderDeviceInstanceIdA,"SCardGetReaderDeviceInstanceIdA");
   function SCardGetReaderDeviceInstanceIdW(
      hContext_x : SCARDCONTEXT;
      szReaderName : LPCWSTR;
      szDeviceInstanceId : LPWSTR;
      pcchDeviceInstanceId : LPDWORD
   ) return LONG;
   pragma import (C,SCardGetReaderDeviceInstanceIdW,"SCardGetReaderDeviceInstanceIdW");
   function SCardListReadersWithDeviceInstanceIdA(
      hContext_x : SCARDCONTEXT;
      szDeviceInstanceId : LPCSTR;
      mszReaders : LPSTR;
      pcchReaders : LPDWORD
   ) return LONG;
   pragma import (C,SCardListReadersWithDeviceInstanceIdA,"SCardListReadersWithDeviceInstanceIdA");
   function SCardListReadersWithDeviceInstanceIdW(
      hContext_x : SCARDCONTEXT;
      szDeviceInstanceId : LPCWSTR;
      mszReaders : LPWSTR;
      pcchReaders : LPDWORD
   ) return LONG;
   pragma import (C,SCardListReadersWithDeviceInstanceIdW,"SCardListReadersWithDeviceInstanceIdW");
   function SCardAudit(
      hContext_x : SCARDCONTEXT;
      dwEvent : DWORD
   ) return LONG;
   pragma import (C,SCardAudit,"SCardAudit");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\prsht.h>
   type PSP_x; -- Forward Declaration
   type HPROPSHEETPAGE is access PSP_x; -- CXType_Pointer - CXType_Elaborated
   type PROPSHEETPAGEA_x; -- Forward Declaration
   type PROPSHEETPAGEW_x; -- Forward Declaration
   subtype LPFNPSPCALLBACKA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT (HWND, UINT, struct _PROPSHEETPAGEA *)
   subtype LPFNPSPCALLBACKW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT (HWND, UINT, struct _PROPSHEETPAGEW *)
   subtype PROPSHEETPAGE_RESOURCE is LPCDLGTEMPLATE; -- CXType_Typedef
   type PROPSHEETPAGEA_V1_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKA;
      pcRefParent : access UINT;
   end record;
   subtype PROPSHEETPAGEA_V1 is PROPSHEETPAGEA_V1_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEA_V1 is access PROPSHEETPAGEA_V1_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEA_V1 is access constant PROPSHEETPAGEA_V1; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEA_V2_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKA;
      pcRefParent : access UINT;
      pszHeaderTitle : LPCSTR;
      pszHeaderSubTitle : LPCSTR;
   end record;
   subtype PROPSHEETPAGEA_V2 is PROPSHEETPAGEA_V2_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEA_V2 is access PROPSHEETPAGEA_V2_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEA_V2 is access constant PROPSHEETPAGEA_V2; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEA_V3_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKA;
      pcRefParent : access UINT;
      pszHeaderTitle : LPCSTR;
      pszHeaderSubTitle : LPCSTR;
      hActCtx : HANDLE;
   end record;
   subtype PROPSHEETPAGEA_V3 is PROPSHEETPAGEA_V3_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEA_V3 is access PROPSHEETPAGEA_V3_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEA_V3 is access constant PROPSHEETPAGEA_V3; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEA_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKA;
      pcRefParent : access UINT;
      pszHeaderTitle : LPCSTR;
      pszHeaderSubTitle : LPCSTR;
      hActCtx : HANDLE;
   end record;
   subtype PROPSHEETPAGEA_V4 is PROPSHEETPAGEA_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEA_V4 is access PROPSHEETPAGEA_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEA_V4 is access constant PROPSHEETPAGEA_V4; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEW_V1_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCWSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKW;
      pcRefParent : access UINT;
   end record;
   subtype PROPSHEETPAGEW_V1 is PROPSHEETPAGEW_V1_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEW_V1 is access PROPSHEETPAGEW_V1_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEW_V1 is access constant PROPSHEETPAGEW_V1; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEW_V2_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCWSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKW;
      pcRefParent : access UINT;
      pszHeaderTitle : LPCWSTR;
      pszHeaderSubTitle : LPCWSTR;
   end record;
   subtype PROPSHEETPAGEW_V2 is PROPSHEETPAGEW_V2_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEW_V2 is access PROPSHEETPAGEW_V2_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEW_V2 is access constant PROPSHEETPAGEW_V2; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEW_V3_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCWSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKW;
      pcRefParent : access UINT;
      pszHeaderTitle : LPCWSTR;
      pszHeaderSubTitle : LPCWSTR;
      hActCtx : HANDLE;
   end record;
   subtype PROPSHEETPAGEW_V3 is PROPSHEETPAGEW_V3_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEW_V3 is access PROPSHEETPAGEW_V3_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEW_V3 is access constant PROPSHEETPAGEW_V3; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETPAGEW_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hInstance_x : HINSTANCE;
      pszTitle : LPCWSTR;
      pfnDlgProc : DLGPROC;
      lParam_x : LPARAM;
      pfnCallback_x : LPFNPSPCALLBACKW;
      pcRefParent : access UINT;
      pszHeaderTitle : LPCWSTR;
      pszHeaderSubTitle : LPCWSTR;
      hActCtx : HANDLE;
   end record;
   subtype PROPSHEETPAGEW_V4 is PROPSHEETPAGEW_x; -- CXType_Elaborated
   type LPPROPSHEETPAGEW_V4 is access PROPSHEETPAGEW_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETPAGEW_V4 is access constant PROPSHEETPAGEW_V4; -- CXType_Pointer - CXType_Typedef
   subtype PROPSHEETPAGEA_LATEST is PROPSHEETPAGEA_V4; -- CXType_Typedef
   subtype PROPSHEETPAGEW_LATEST is PROPSHEETPAGEW_V4; -- CXType_Typedef
   subtype LPPROPSHEETPAGEA_LATEST is LPPROPSHEETPAGEA_V4; -- CXType_Typedef
   subtype LPPROPSHEETPAGEW_LATEST is LPPROPSHEETPAGEW_V4; -- CXType_Typedef
   subtype LPCPROPSHEETPAGEA_LATEST is LPCPROPSHEETPAGEA_V4; -- CXType_Typedef
   subtype LPCPROPSHEETPAGEW_LATEST is LPCPROPSHEETPAGEW_V4; -- CXType_Typedef
   subtype PROPSHEETPAGEA is PROPSHEETPAGEA_V4; -- CXType_Typedef
   subtype PROPSHEETPAGEW is PROPSHEETPAGEW_V4; -- CXType_Typedef
   subtype LPPROPSHEETPAGEA is LPPROPSHEETPAGEA_V4; -- CXType_Typedef
   subtype LPPROPSHEETPAGEW is LPPROPSHEETPAGEW_V4; -- CXType_Typedef
   subtype LPCPROPSHEETPAGEA is LPCPROPSHEETPAGEA_V4; -- CXType_Typedef
   subtype LPCPROPSHEETPAGEW is LPCPROPSHEETPAGEW_V4; -- CXType_Typedef
   subtype PFNPROPSHEETCALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (HWND, UINT, LPARAM)
   type PROPSHEETHEADERA_V1_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hwndParent : HWND;
      hInstance_x : HINSTANCE;
      pszCaption : LPCSTR;
      nPages : UINT;
      pfnCallback_x : PFNPROPSHEETCALLBACK;
   end record;
   subtype PROPSHEETHEADERA_V1 is PROPSHEETHEADERA_V1_x; -- CXType_Elaborated
   type LPPROPSHEETHEADERA_V1 is access PROPSHEETHEADERA_V1_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETHEADERA_V1 is access constant PROPSHEETHEADERA_V1; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETHEADERA_V2_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hwndParent : HWND;
      hInstance_x : HINSTANCE;
      pszCaption : LPCSTR;
      nPages : UINT;
      pfnCallback_x : PFNPROPSHEETCALLBACK;
      hplWatermark : HPALETTE;
   end record;
   subtype PROPSHEETHEADERA_V2 is PROPSHEETHEADERA_V2_x; -- CXType_Elaborated
   type LPPROPSHEETHEADERA_V2 is access PROPSHEETHEADERA_V2_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETHEADERA_V2 is access constant PROPSHEETHEADERA_V2; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETHEADERW_V1_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hwndParent : HWND;
      hInstance_x : HINSTANCE;
      pszCaption : LPCWSTR;
      nPages : UINT;
      pfnCallback_x : PFNPROPSHEETCALLBACK;
   end record;
   subtype PROPSHEETHEADERW_V1 is PROPSHEETHEADERW_V1_x; -- CXType_Elaborated
   type LPPROPSHEETHEADERW_V1 is access PROPSHEETHEADERW_V1_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETHEADERW_V1 is access constant PROPSHEETHEADERW_V1; -- CXType_Pointer - CXType_Typedef
   type PROPSHEETHEADERW_V2_x is record
      dwSize : DWORD;
      dwFlags : DWORD;
      hwndParent : HWND;
      hInstance_x : HINSTANCE;
      pszCaption : LPCWSTR;
      nPages : UINT;
      pfnCallback_x : PFNPROPSHEETCALLBACK;
      hplWatermark : HPALETTE;
   end record;
   subtype PROPSHEETHEADERW_V2 is PROPSHEETHEADERW_V2_x; -- CXType_Elaborated
   type LPPROPSHEETHEADERW_V2 is access PROPSHEETHEADERW_V2_x; -- CXType_Pointer - CXType_Elaborated
   type LPCPROPSHEETHEADERW_V2 is access constant PROPSHEETHEADERW_V2; -- CXType_Pointer - CXType_Typedef
   subtype PROPSHEETHEADERA is PROPSHEETHEADERA_V2; -- CXType_Typedef
   subtype PROPSHEETHEADERW is PROPSHEETHEADERW_V2; -- CXType_Typedef
   subtype LPPROPSHEETHEADERA is LPPROPSHEETHEADERA_V2; -- CXType_Typedef
   subtype LPPROPSHEETHEADERW is LPPROPSHEETHEADERW_V2; -- CXType_Typedef
   subtype LPCPROPSHEETHEADERA is LPCPROPSHEETHEADERA_V2; -- CXType_Typedef
   subtype LPCPROPSHEETHEADERW is LPCPROPSHEETHEADERW_V2; -- CXType_Typedef
   function CreatePropertySheetPageA(
      constPropSheetPagePointer : LPCPROPSHEETPAGEA
   ) return HPROPSHEETPAGE;
   pragma import (C,CreatePropertySheetPageA,"CreatePropertySheetPageA");
   function CreatePropertySheetPageW(
      constPropSheetPagePointer : LPCPROPSHEETPAGEW
   ) return HPROPSHEETPAGE;
   pragma import (C,CreatePropertySheetPageW,"CreatePropertySheetPageW");
   function DestroyPropertySheetPage(
      param1 : HPROPSHEETPAGE
   ) return BOOL;
   pragma import (C,DestroyPropertySheetPage,"DestroyPropertySheetPage");
   function PropertySheetA(
      param1 : LPCPROPSHEETHEADERA
   ) return INT_PTR;
   pragma import (C,PropertySheetA,"PropertySheetA");
   function PropertySheetW(
      param1 : LPCPROPSHEETHEADERW
   ) return INT_PTR;
   pragma import (C,PropertySheetW,"PropertySheetW");
   subtype LPFNADDPROPSHEETPAGE is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HPROPSHEETPAGE, LPARAM)
   subtype LPFNADDPROPSHEETPAGES is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (LPVOID, LPFNADDPROPSHEETPAGE, LPARAM)
   type PSHNOTIFY_x is record
      hdr : NMHDR;
      lParam_x : LPARAM;
   end record;
   subtype PSHNOTIFY is PSHNOTIFY_x; -- CXType_Elaborated
   type LPPSHNOTIFY is access PSHNOTIFY_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winspool.h>
   type PRINTER_INFO_1A_x is record
      Flags : DWORD;
      pDescription : LPSTR;
      pName : LPSTR;
      pComment : LPSTR;
   end record;
   subtype PRINTER_INFO_1A is PRINTER_INFO_1A_x; -- CXType_Elaborated
   type PPRINTER_INFO_1A is access PRINTER_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_1A is access PRINTER_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_1W_x is record
      Flags : DWORD;
      pDescription : LPWSTR;
      pName : LPWSTR;
      pComment : LPWSTR;
   end record;
   subtype PRINTER_INFO_1W is PRINTER_INFO_1W_x; -- CXType_Elaborated
   type PPRINTER_INFO_1W is access PRINTER_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_1W is access PRINTER_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_1 is PRINTER_INFO_1A; -- CXType_Typedef
   subtype PPRINTER_INFO_1 is PPRINTER_INFO_1A; -- CXType_Typedef
   subtype LPPRINTER_INFO_1 is LPPRINTER_INFO_1A; -- CXType_Typedef
   type PRINTER_INFO_2A_x is record
      pServerName : LPSTR;
      pPrinterName : LPSTR;
      pShareName : LPSTR;
      pPortName : LPSTR;
      pDriverName : LPSTR;
      pComment : LPSTR;
      pLocation : LPSTR;
      pDevMode_x : LPDEVMODEA;
      pSepFile : LPSTR;
      pPrintProcessor : LPSTR;
      pDatatype : LPSTR;
      pParameters : LPSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      Attributes : DWORD;
      Priority : DWORD;
      DefaultPriority : DWORD;
      StartTime : DWORD;
      UntilTime : DWORD;
      Status : DWORD;
      cJobs : DWORD;
      AveragePPM : DWORD;
   end record;
   subtype PRINTER_INFO_2A is PRINTER_INFO_2A_x; -- CXType_Elaborated
   type PPRINTER_INFO_2A is access PRINTER_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_2A is access PRINTER_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_2W_x is record
      pServerName : LPWSTR;
      pPrinterName : LPWSTR;
      pShareName : LPWSTR;
      pPortName : LPWSTR;
      pDriverName : LPWSTR;
      pComment : LPWSTR;
      pLocation : LPWSTR;
      pDevMode_x : LPDEVMODEW;
      pSepFile : LPWSTR;
      pPrintProcessor : LPWSTR;
      pDatatype : LPWSTR;
      pParameters : LPWSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      Attributes : DWORD;
      Priority : DWORD;
      DefaultPriority : DWORD;
      StartTime : DWORD;
      UntilTime : DWORD;
      Status : DWORD;
      cJobs : DWORD;
      AveragePPM : DWORD;
   end record;
   subtype PRINTER_INFO_2W is PRINTER_INFO_2W_x; -- CXType_Elaborated
   type PPRINTER_INFO_2W is access PRINTER_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_2W is access PRINTER_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_2 is PRINTER_INFO_2A; -- CXType_Typedef
   subtype PPRINTER_INFO_2 is PPRINTER_INFO_2A; -- CXType_Typedef
   subtype LPPRINTER_INFO_2 is LPPRINTER_INFO_2A; -- CXType_Typedef
   type PRINTER_INFO_3_x is record
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
   end record;
   subtype PRINTER_INFO_3 is PRINTER_INFO_3_x; -- CXType_Elaborated
   type PPRINTER_INFO_3 is access PRINTER_INFO_3_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_3 is access PRINTER_INFO_3_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_4A_x is record
      pPrinterName : LPSTR;
      pServerName : LPSTR;
      Attributes : DWORD;
   end record;
   subtype PRINTER_INFO_4A is PRINTER_INFO_4A_x; -- CXType_Elaborated
   type PPRINTER_INFO_4A is access PRINTER_INFO_4A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_4A is access PRINTER_INFO_4A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_4W_x is record
      pPrinterName : LPWSTR;
      pServerName : LPWSTR;
      Attributes : DWORD;
   end record;
   subtype PRINTER_INFO_4W is PRINTER_INFO_4W_x; -- CXType_Elaborated
   type PPRINTER_INFO_4W is access PRINTER_INFO_4W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_4W is access PRINTER_INFO_4W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_4 is PRINTER_INFO_4A; -- CXType_Typedef
   subtype PPRINTER_INFO_4 is PPRINTER_INFO_4A; -- CXType_Typedef
   subtype LPPRINTER_INFO_4 is LPPRINTER_INFO_4A; -- CXType_Typedef
   type PRINTER_INFO_5A_x is record
      pPrinterName : LPSTR;
      pPortName : LPSTR;
      Attributes : DWORD;
      DeviceNotSelectedTimeout : DWORD;
      TransmissionRetryTimeout : DWORD;
   end record;
   subtype PRINTER_INFO_5A is PRINTER_INFO_5A_x; -- CXType_Elaborated
   type PPRINTER_INFO_5A is access PRINTER_INFO_5A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_5A is access PRINTER_INFO_5A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_5W_x is record
      pPrinterName : LPWSTR;
      pPortName : LPWSTR;
      Attributes : DWORD;
      DeviceNotSelectedTimeout : DWORD;
      TransmissionRetryTimeout : DWORD;
   end record;
   subtype PRINTER_INFO_5W is PRINTER_INFO_5W_x; -- CXType_Elaborated
   type PPRINTER_INFO_5W is access PRINTER_INFO_5W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_5W is access PRINTER_INFO_5W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_5 is PRINTER_INFO_5A; -- CXType_Typedef
   subtype PPRINTER_INFO_5 is PPRINTER_INFO_5A; -- CXType_Typedef
   subtype LPPRINTER_INFO_5 is LPPRINTER_INFO_5A; -- CXType_Typedef
   type PRINTER_INFO_6_x is record
      dwStatus : DWORD;
   end record;
   subtype PRINTER_INFO_6 is PRINTER_INFO_6_x; -- CXType_Elaborated
   type PPRINTER_INFO_6 is access PRINTER_INFO_6_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_6 is access PRINTER_INFO_6_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_7A_x is record
      pszObjectGUID : LPSTR;
      dwAction : DWORD;
   end record;
   subtype PRINTER_INFO_7A is PRINTER_INFO_7A_x; -- CXType_Elaborated
   type PPRINTER_INFO_7A is access PRINTER_INFO_7A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_7A is access PRINTER_INFO_7A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_7W_x is record
      pszObjectGUID : LPWSTR;
      dwAction : DWORD;
   end record;
   subtype PRINTER_INFO_7W is PRINTER_INFO_7W_x; -- CXType_Elaborated
   type PPRINTER_INFO_7W is access PRINTER_INFO_7W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_7W is access PRINTER_INFO_7W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_7 is PRINTER_INFO_7A; -- CXType_Typedef
   subtype PPRINTER_INFO_7 is PPRINTER_INFO_7A; -- CXType_Typedef
   subtype LPPRINTER_INFO_7 is LPPRINTER_INFO_7A; -- CXType_Typedef
   type PRINTER_INFO_8A_x is record
      pDevMode_x : LPDEVMODEA;
   end record;
   subtype PRINTER_INFO_8A is PRINTER_INFO_8A_x; -- CXType_Elaborated
   type PPRINTER_INFO_8A is access PRINTER_INFO_8A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_8A is access PRINTER_INFO_8A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_8W_x is record
      pDevMode_x : LPDEVMODEW;
   end record;
   subtype PRINTER_INFO_8W is PRINTER_INFO_8W_x; -- CXType_Elaborated
   type PPRINTER_INFO_8W is access PRINTER_INFO_8W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_8W is access PRINTER_INFO_8W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_8 is PRINTER_INFO_8A; -- CXType_Typedef
   subtype PPRINTER_INFO_8 is PPRINTER_INFO_8A; -- CXType_Typedef
   subtype LPPRINTER_INFO_8 is LPPRINTER_INFO_8A; -- CXType_Typedef
   type PRINTER_INFO_9A_x is record
      pDevMode_x : LPDEVMODEA;
   end record;
   subtype PRINTER_INFO_9A is PRINTER_INFO_9A_x; -- CXType_Elaborated
   type PPRINTER_INFO_9A is access PRINTER_INFO_9A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_9A is access PRINTER_INFO_9A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_INFO_9W_x is record
      pDevMode_x : LPDEVMODEW;
   end record;
   subtype PRINTER_INFO_9W is PRINTER_INFO_9W_x; -- CXType_Elaborated
   type PPRINTER_INFO_9W is access PRINTER_INFO_9W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_INFO_9W is access PRINTER_INFO_9W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_INFO_9 is PRINTER_INFO_9A; -- CXType_Typedef
   subtype PPRINTER_INFO_9 is PPRINTER_INFO_9A; -- CXType_Typedef
   subtype LPPRINTER_INFO_9 is LPPRINTER_INFO_9A; -- CXType_Typedef
   type JOB_INFO_1A_x is record
      JobId : DWORD;
      pPrinterName : LPSTR;
      pMachineName : LPSTR;
      pUserName : LPSTR;
      pDocument : LPSTR;
      pDatatype : LPSTR;
      pStatus : LPSTR;
      Status : DWORD;
      Priority : DWORD;
      Position : DWORD;
      TotalPages : DWORD;
      PagesPrinted : DWORD;
      Submitted : SYSTEMTIME;
   end record;
   subtype JOB_INFO_1A is JOB_INFO_1A_x; -- CXType_Elaborated
   type PJOB_INFO_1A is access JOB_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_1A is access JOB_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type JOB_INFO_1W_x is record
      JobId : DWORD;
      pPrinterName : LPWSTR;
      pMachineName : LPWSTR;
      pUserName : LPWSTR;
      pDocument : LPWSTR;
      pDatatype : LPWSTR;
      pStatus : LPWSTR;
      Status : DWORD;
      Priority : DWORD;
      Position : DWORD;
      TotalPages : DWORD;
      PagesPrinted : DWORD;
      Submitted : SYSTEMTIME;
   end record;
   subtype JOB_INFO_1W is JOB_INFO_1W_x; -- CXType_Elaborated
   type PJOB_INFO_1W is access JOB_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_1W is access JOB_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype JOB_INFO_1 is JOB_INFO_1A; -- CXType_Typedef
   subtype PJOB_INFO_1 is PJOB_INFO_1A; -- CXType_Typedef
   subtype LPJOB_INFO_1 is LPJOB_INFO_1A; -- CXType_Typedef
   type JOB_INFO_2A_x is record
      JobId : DWORD;
      pPrinterName : LPSTR;
      pMachineName : LPSTR;
      pUserName : LPSTR;
      pDocument : LPSTR;
      pNotifyName : LPSTR;
      pDatatype : LPSTR;
      pPrintProcessor : LPSTR;
      pParameters : LPSTR;
      pDriverName : LPSTR;
      pDevMode_x : LPDEVMODEA;
      pStatus : LPSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      Status : DWORD;
      Priority : DWORD;
      Position : DWORD;
      StartTime : DWORD;
      UntilTime : DWORD;
      TotalPages : DWORD;
      Size_x : DWORD;
      Submitted : SYSTEMTIME;
      Time : DWORD;
      PagesPrinted : DWORD;
   end record;
   subtype JOB_INFO_2A is JOB_INFO_2A_x; -- CXType_Elaborated
   type PJOB_INFO_2A is access JOB_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_2A is access JOB_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type JOB_INFO_2W_x is record
      JobId : DWORD;
      pPrinterName : LPWSTR;
      pMachineName : LPWSTR;
      pUserName : LPWSTR;
      pDocument : LPWSTR;
      pNotifyName : LPWSTR;
      pDatatype : LPWSTR;
      pPrintProcessor : LPWSTR;
      pParameters : LPWSTR;
      pDriverName : LPWSTR;
      pDevMode_x : LPDEVMODEW;
      pStatus : LPWSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      Status : DWORD;
      Priority : DWORD;
      Position : DWORD;
      StartTime : DWORD;
      UntilTime : DWORD;
      TotalPages : DWORD;
      Size_x : DWORD;
      Submitted : SYSTEMTIME;
      Time : DWORD;
      PagesPrinted : DWORD;
   end record;
   subtype JOB_INFO_2W is JOB_INFO_2W_x; -- CXType_Elaborated
   type PJOB_INFO_2W is access JOB_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_2W is access JOB_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype JOB_INFO_2 is JOB_INFO_2A; -- CXType_Typedef
   subtype PJOB_INFO_2 is PJOB_INFO_2A; -- CXType_Typedef
   subtype LPJOB_INFO_2 is LPJOB_INFO_2A; -- CXType_Typedef
   type JOB_INFO_3_x is record
      JobId : DWORD;
      NextJobId : DWORD;
      Reserved : DWORD;
   end record;
   subtype JOB_INFO_3 is JOB_INFO_3_x; -- CXType_Elaborated
   type PJOB_INFO_3 is access JOB_INFO_3_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_3 is access JOB_INFO_3_x; -- CXType_Pointer - CXType_Elaborated
   type JOB_INFO_4A_x is record
      JobId : DWORD;
      pPrinterName : LPSTR;
      pMachineName : LPSTR;
      pUserName : LPSTR;
      pDocument : LPSTR;
      pNotifyName : LPSTR;
      pDatatype : LPSTR;
      pPrintProcessor : LPSTR;
      pParameters : LPSTR;
      pDriverName : LPSTR;
      pDevMode_x : LPDEVMODEA;
      pStatus : LPSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      Status : DWORD;
      Priority : DWORD;
      Position : DWORD;
      StartTime : DWORD;
      UntilTime : DWORD;
      TotalPages : DWORD;
      Size_x : DWORD;
      Submitted : SYSTEMTIME;
      Time : DWORD;
      PagesPrinted : DWORD;
      SizeHigh : LONG;
   end record;
   subtype JOB_INFO_4A is JOB_INFO_4A_x; -- CXType_Elaborated
   type PJOB_INFO_4A is access JOB_INFO_4A_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_4A is access JOB_INFO_4A_x; -- CXType_Pointer - CXType_Elaborated
   type JOB_INFO_4W_x is record
      JobId : DWORD;
      pPrinterName : LPWSTR;
      pMachineName : LPWSTR;
      pUserName : LPWSTR;
      pDocument : LPWSTR;
      pNotifyName : LPWSTR;
      pDatatype : LPWSTR;
      pPrintProcessor : LPWSTR;
      pParameters : LPWSTR;
      pDriverName : LPWSTR;
      pDevMode_x : LPDEVMODEW;
      pStatus : LPWSTR;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      Status : DWORD;
      Priority : DWORD;
      Position : DWORD;
      StartTime : DWORD;
      UntilTime : DWORD;
      TotalPages : DWORD;
      Size_x : DWORD;
      Submitted : SYSTEMTIME;
      Time : DWORD;
      PagesPrinted : DWORD;
      SizeHigh : LONG;
   end record;
   subtype JOB_INFO_4W is JOB_INFO_4W_x; -- CXType_Elaborated
   type PJOB_INFO_4W is access JOB_INFO_4W_x; -- CXType_Pointer - CXType_Elaborated
   type LPJOB_INFO_4W is access JOB_INFO_4W_x; -- CXType_Pointer - CXType_Elaborated
   subtype JOB_INFO_4 is JOB_INFO_4A; -- CXType_Typedef
   subtype PJOB_INFO_4 is PJOB_INFO_4A; -- CXType_Typedef
   subtype LPJOB_INFO_4 is LPJOB_INFO_4A; -- CXType_Typedef
   type ADDJOB_INFO_1A_x is record
      Path : LPSTR;
      JobId : DWORD;
   end record;
   subtype ADDJOB_INFO_1A is ADDJOB_INFO_1A_x; -- CXType_Elaborated
   type PADDJOB_INFO_1A is access ADDJOB_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPADDJOB_INFO_1A is access ADDJOB_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type ADDJOB_INFO_1W_x is record
      Path : LPWSTR;
      JobId : DWORD;
   end record;
   subtype ADDJOB_INFO_1W is ADDJOB_INFO_1W_x; -- CXType_Elaborated
   type PADDJOB_INFO_1W is access ADDJOB_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPADDJOB_INFO_1W is access ADDJOB_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype ADDJOB_INFO_1 is ADDJOB_INFO_1A; -- CXType_Typedef
   subtype PADDJOB_INFO_1 is PADDJOB_INFO_1A; -- CXType_Typedef
   subtype LPADDJOB_INFO_1 is LPADDJOB_INFO_1A; -- CXType_Typedef
   type DRIVER_INFO_1A_x is record
      pName : LPSTR;
   end record;
   subtype DRIVER_INFO_1A is DRIVER_INFO_1A_x; -- CXType_Elaborated
   type PDRIVER_INFO_1A is access DRIVER_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_1A is access DRIVER_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_1W_x is record
      pName : LPWSTR;
   end record;
   subtype DRIVER_INFO_1W is DRIVER_INFO_1W_x; -- CXType_Elaborated
   type PDRIVER_INFO_1W is access DRIVER_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_1W is access DRIVER_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_1 is DRIVER_INFO_1A; -- CXType_Typedef
   subtype PDRIVER_INFO_1 is PDRIVER_INFO_1A; -- CXType_Typedef
   subtype LPDRIVER_INFO_1 is LPDRIVER_INFO_1A; -- CXType_Typedef
   type DRIVER_INFO_2A_x is record
      cVersion : DWORD;
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverPath : LPSTR;
      pDataFile : LPSTR;
      pConfigFile : LPSTR;
   end record;
   subtype DRIVER_INFO_2A is DRIVER_INFO_2A_x; -- CXType_Elaborated
   type PDRIVER_INFO_2A is access DRIVER_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_2A is access DRIVER_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_2W_x is record
      cVersion : DWORD;
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverPath : LPWSTR;
      pDataFile : LPWSTR;
      pConfigFile : LPWSTR;
   end record;
   subtype DRIVER_INFO_2W is DRIVER_INFO_2W_x; -- CXType_Elaborated
   type PDRIVER_INFO_2W is access DRIVER_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_2W is access DRIVER_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_2 is DRIVER_INFO_2A; -- CXType_Typedef
   subtype PDRIVER_INFO_2 is PDRIVER_INFO_2A; -- CXType_Typedef
   subtype LPDRIVER_INFO_2 is LPDRIVER_INFO_2A; -- CXType_Typedef
   type DRIVER_INFO_3A_x is record
      cVersion : DWORD;
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverPath : LPSTR;
      pDataFile : LPSTR;
      pConfigFile : LPSTR;
      pHelpFile : LPSTR;
      pDependentFiles : LPSTR;
      pMonitorName : LPSTR;
      pDefaultDataType : LPSTR;
   end record;
   subtype DRIVER_INFO_3A is DRIVER_INFO_3A_x; -- CXType_Elaborated
   type PDRIVER_INFO_3A is access DRIVER_INFO_3A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_3A is access DRIVER_INFO_3A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_3W_x is record
      cVersion : DWORD;
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverPath : LPWSTR;
      pDataFile : LPWSTR;
      pConfigFile : LPWSTR;
      pHelpFile : LPWSTR;
      pDependentFiles : LPWSTR;
      pMonitorName : LPWSTR;
      pDefaultDataType : LPWSTR;
   end record;
   subtype DRIVER_INFO_3W is DRIVER_INFO_3W_x; -- CXType_Elaborated
   type PDRIVER_INFO_3W is access DRIVER_INFO_3W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_3W is access DRIVER_INFO_3W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_3 is DRIVER_INFO_3A; -- CXType_Typedef
   subtype PDRIVER_INFO_3 is PDRIVER_INFO_3A; -- CXType_Typedef
   subtype LPDRIVER_INFO_3 is LPDRIVER_INFO_3A; -- CXType_Typedef
   type DRIVER_INFO_4A_x is record
      cVersion : DWORD;
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverPath : LPSTR;
      pDataFile : LPSTR;
      pConfigFile : LPSTR;
      pHelpFile : LPSTR;
      pDependentFiles : LPSTR;
      pMonitorName : LPSTR;
      pDefaultDataType : LPSTR;
      pszzPreviousNames : LPSTR;
   end record;
   subtype DRIVER_INFO_4A is DRIVER_INFO_4A_x; -- CXType_Elaborated
   type PDRIVER_INFO_4A is access DRIVER_INFO_4A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_4A is access DRIVER_INFO_4A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_4W_x is record
      cVersion : DWORD;
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverPath : LPWSTR;
      pDataFile : LPWSTR;
      pConfigFile : LPWSTR;
      pHelpFile : LPWSTR;
      pDependentFiles : LPWSTR;
      pMonitorName : LPWSTR;
      pDefaultDataType : LPWSTR;
      pszzPreviousNames : LPWSTR;
   end record;
   subtype DRIVER_INFO_4W is DRIVER_INFO_4W_x; -- CXType_Elaborated
   type PDRIVER_INFO_4W is access DRIVER_INFO_4W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_4W is access DRIVER_INFO_4W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_4 is DRIVER_INFO_4A; -- CXType_Typedef
   subtype PDRIVER_INFO_4 is PDRIVER_INFO_4A; -- CXType_Typedef
   subtype LPDRIVER_INFO_4 is LPDRIVER_INFO_4A; -- CXType_Typedef
   type DRIVER_INFO_5A_x is record
      cVersion : DWORD;
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverPath : LPSTR;
      pDataFile : LPSTR;
      pConfigFile : LPSTR;
      dwDriverAttributes : DWORD;
      dwConfigVersion : DWORD;
      dwDriverVersion : DWORD;
   end record;
   subtype DRIVER_INFO_5A is DRIVER_INFO_5A_x; -- CXType_Elaborated
   type PDRIVER_INFO_5A is access DRIVER_INFO_5A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_5A is access DRIVER_INFO_5A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_5W_x is record
      cVersion : DWORD;
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverPath : LPWSTR;
      pDataFile : LPWSTR;
      pConfigFile : LPWSTR;
      dwDriverAttributes : DWORD;
      dwConfigVersion : DWORD;
      dwDriverVersion : DWORD;
   end record;
   subtype DRIVER_INFO_5W is DRIVER_INFO_5W_x; -- CXType_Elaborated
   type PDRIVER_INFO_5W is access DRIVER_INFO_5W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_5W is access DRIVER_INFO_5W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_5 is DRIVER_INFO_5A; -- CXType_Typedef
   subtype PDRIVER_INFO_5 is PDRIVER_INFO_5A; -- CXType_Typedef
   subtype LPDRIVER_INFO_5 is LPDRIVER_INFO_5A; -- CXType_Typedef
   type DRIVER_INFO_6A_x is record
      cVersion : DWORD;
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverPath : LPSTR;
      pDataFile : LPSTR;
      pConfigFile : LPSTR;
      pHelpFile : LPSTR;
      pDependentFiles : LPSTR;
      pMonitorName : LPSTR;
      pDefaultDataType : LPSTR;
      pszzPreviousNames : LPSTR;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      pszMfgName : LPSTR;
      pszOEMUrl : LPSTR;
      pszHardwareID : LPSTR;
      pszProvider : LPSTR;
   end record;
   subtype DRIVER_INFO_6A is DRIVER_INFO_6A_x; -- CXType_Elaborated
   type PDRIVER_INFO_6A is access DRIVER_INFO_6A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_6A is access DRIVER_INFO_6A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_6W_x is record
      cVersion : DWORD;
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverPath : LPWSTR;
      pDataFile : LPWSTR;
      pConfigFile : LPWSTR;
      pHelpFile : LPWSTR;
      pDependentFiles : LPWSTR;
      pMonitorName : LPWSTR;
      pDefaultDataType : LPWSTR;
      pszzPreviousNames : LPWSTR;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      pszMfgName : LPWSTR;
      pszOEMUrl : LPWSTR;
      pszHardwareID : LPWSTR;
      pszProvider : LPWSTR;
   end record;
   subtype DRIVER_INFO_6W is DRIVER_INFO_6W_x; -- CXType_Elaborated
   type PDRIVER_INFO_6W is access DRIVER_INFO_6W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_6W is access DRIVER_INFO_6W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_6 is DRIVER_INFO_6A; -- CXType_Typedef
   subtype PDRIVER_INFO_6 is PDRIVER_INFO_6A; -- CXType_Typedef
   subtype LPDRIVER_INFO_6 is LPDRIVER_INFO_6A; -- CXType_Typedef
   type DRIVER_INFO_8A_x is record
      cVersion : DWORD;
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverPath : LPSTR;
      pDataFile : LPSTR;
      pConfigFile : LPSTR;
      pHelpFile : LPSTR;
      pDependentFiles : LPSTR;
      pMonitorName : LPSTR;
      pDefaultDataType : LPSTR;
      pszzPreviousNames : LPSTR;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      pszMfgName : LPSTR;
      pszOEMUrl : LPSTR;
      pszHardwareID : LPSTR;
      pszProvider : LPSTR;
      pszPrintProcessor : LPSTR;
      pszVendorSetup : LPSTR;
      pszzColorProfiles : LPSTR;
      pszInfPath : LPSTR;
      dwPrinterDriverAttributes : DWORD;
      pszzCoreDriverDependencies : LPSTR;
      ftMinInboxDriverVerDate : FILETIME;
      dwlMinInboxDriverVerVersion : DWORDLONG;
   end record;
   subtype DRIVER_INFO_8A is DRIVER_INFO_8A_x; -- CXType_Elaborated
   type PDRIVER_INFO_8A is access DRIVER_INFO_8A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_8A is access DRIVER_INFO_8A_x; -- CXType_Pointer - CXType_Elaborated
   type DRIVER_INFO_8W_x is record
      cVersion : DWORD;
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverPath : LPWSTR;
      pDataFile : LPWSTR;
      pConfigFile : LPWSTR;
      pHelpFile : LPWSTR;
      pDependentFiles : LPWSTR;
      pMonitorName : LPWSTR;
      pDefaultDataType : LPWSTR;
      pszzPreviousNames : LPWSTR;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      pszMfgName : LPWSTR;
      pszOEMUrl : LPWSTR;
      pszHardwareID : LPWSTR;
      pszProvider : LPWSTR;
      pszPrintProcessor : LPWSTR;
      pszVendorSetup : LPWSTR;
      pszzColorProfiles : LPWSTR;
      pszInfPath : LPWSTR;
      dwPrinterDriverAttributes : DWORD;
      pszzCoreDriverDependencies : LPWSTR;
      ftMinInboxDriverVerDate : FILETIME;
      dwlMinInboxDriverVerVersion : DWORDLONG;
   end record;
   subtype DRIVER_INFO_8W is DRIVER_INFO_8W_x; -- CXType_Elaborated
   type PDRIVER_INFO_8W is access DRIVER_INFO_8W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDRIVER_INFO_8W is access DRIVER_INFO_8W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DRIVER_INFO_8 is DRIVER_INFO_8A; -- CXType_Typedef
   subtype PDRIVER_INFO_8 is PDRIVER_INFO_8A; -- CXType_Typedef
   subtype LPDRIVER_INFO_8 is LPDRIVER_INFO_8A; -- CXType_Typedef
   type DOC_INFO_1A_x is record
      pDocName : LPSTR;
      pOutputFile : LPSTR;
      pDatatype : LPSTR;
   end record;
   subtype DOC_INFO_1A is DOC_INFO_1A_x; -- CXType_Elaborated
   type PDOC_INFO_1A is access DOC_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDOC_INFO_1A is access DOC_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type DOC_INFO_1W_x is record
      pDocName : LPWSTR;
      pOutputFile : LPWSTR;
      pDatatype : LPWSTR;
   end record;
   subtype DOC_INFO_1W is DOC_INFO_1W_x; -- CXType_Elaborated
   type PDOC_INFO_1W is access DOC_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDOC_INFO_1W is access DOC_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DOC_INFO_1 is DOC_INFO_1A; -- CXType_Typedef
   subtype PDOC_INFO_1 is PDOC_INFO_1A; -- CXType_Typedef
   subtype LPDOC_INFO_1 is LPDOC_INFO_1A; -- CXType_Typedef
   type FORM_INFO_1A_x is record
      Flags : DWORD;
      pName : LPSTR;
      Size_x : SIZEL;
      ImageableArea : RECTL;
   end record;
   subtype FORM_INFO_1A is FORM_INFO_1A_x; -- CXType_Elaborated
   type PFORM_INFO_1A is access FORM_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPFORM_INFO_1A is access FORM_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type FORM_INFO_1W_x is record
      Flags : DWORD;
      pName : LPWSTR;
      Size_x : SIZEL;
      ImageableArea : RECTL;
   end record;
   subtype FORM_INFO_1W is FORM_INFO_1W_x; -- CXType_Elaborated
   type PFORM_INFO_1W is access FORM_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPFORM_INFO_1W is access FORM_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype FORM_INFO_1 is FORM_INFO_1A; -- CXType_Typedef
   subtype PFORM_INFO_1 is PFORM_INFO_1A; -- CXType_Typedef
   subtype LPFORM_INFO_1 is LPFORM_INFO_1A; -- CXType_Typedef
   type FORM_INFO_2A_x is record
      Flags : DWORD;
      pName : LPCSTR;
      Size_x : SIZEL;
      ImageableArea : RECTL;
      pKeyword : LPCSTR;
      StringType : DWORD;
      pMuiDll : LPCSTR;
      dwResourceId : DWORD;
      pDisplayName : LPCSTR;
      wLangId : LANGID;
   end record;
   subtype FORM_INFO_2A is FORM_INFO_2A_x; -- CXType_Elaborated
   type PFORM_INFO_2A is access FORM_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPFORM_INFO_2A is access FORM_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type FORM_INFO_2W_x is record
      Flags : DWORD;
      pName : LPCWSTR;
      Size_x : SIZEL;
      ImageableArea : RECTL;
      pKeyword : LPCSTR;
      StringType : DWORD;
      pMuiDll : LPCWSTR;
      dwResourceId : DWORD;
      pDisplayName : LPCWSTR;
      wLangId : LANGID;
   end record;
   subtype FORM_INFO_2W is FORM_INFO_2W_x; -- CXType_Elaborated
   type PFORM_INFO_2W is access FORM_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPFORM_INFO_2W is access FORM_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype FORM_INFO_2 is FORM_INFO_2A; -- CXType_Typedef
   subtype PFORM_INFO_2 is PFORM_INFO_2A; -- CXType_Typedef
   subtype LPFORM_INFO_2 is LPFORM_INFO_2A; -- CXType_Typedef
   type DOC_INFO_2A_x is record
      pDocName : LPSTR;
      pOutputFile : LPSTR;
      pDatatype : LPSTR;
      dwMode : DWORD;
      JobId : DWORD;
   end record;
   subtype DOC_INFO_2A is DOC_INFO_2A_x; -- CXType_Elaborated
   type PDOC_INFO_2A is access DOC_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDOC_INFO_2A is access DOC_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type DOC_INFO_2W_x is record
      pDocName : LPWSTR;
      pOutputFile : LPWSTR;
      pDatatype : LPWSTR;
      dwMode : DWORD;
      JobId : DWORD;
   end record;
   subtype DOC_INFO_2W is DOC_INFO_2W_x; -- CXType_Elaborated
   type PDOC_INFO_2W is access DOC_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDOC_INFO_2W is access DOC_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DOC_INFO_2 is DOC_INFO_2A; -- CXType_Typedef
   subtype PDOC_INFO_2 is PDOC_INFO_2A; -- CXType_Typedef
   subtype LPDOC_INFO_2 is LPDOC_INFO_2A; -- CXType_Typedef
   type DOC_INFO_3A_x is record
      pDocName : LPSTR;
      pOutputFile : LPSTR;
      pDatatype : LPSTR;
      dwFlags : DWORD;
   end record;
   subtype DOC_INFO_3A is DOC_INFO_3A_x; -- CXType_Elaborated
   type PDOC_INFO_3A is access DOC_INFO_3A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDOC_INFO_3A is access DOC_INFO_3A_x; -- CXType_Pointer - CXType_Elaborated
   type DOC_INFO_3W_x is record
      pDocName : LPWSTR;
      pOutputFile : LPWSTR;
      pDatatype : LPWSTR;
      dwFlags : DWORD;
   end record;
   subtype DOC_INFO_3W is DOC_INFO_3W_x; -- CXType_Elaborated
   type PDOC_INFO_3W is access DOC_INFO_3W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDOC_INFO_3W is access DOC_INFO_3W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DOC_INFO_3 is DOC_INFO_3A; -- CXType_Typedef
   subtype PDOC_INFO_3 is PDOC_INFO_3A; -- CXType_Typedef
   subtype LPDOC_INFO_3 is LPDOC_INFO_3A; -- CXType_Typedef
   type PRINTPROCESSOR_INFO_1A_x is record
      pName : LPSTR;
   end record;
   subtype PRINTPROCESSOR_INFO_1A is PRINTPROCESSOR_INFO_1A_x; -- CXType_Elaborated
   type PPRINTPROCESSOR_INFO_1A is access PRINTPROCESSOR_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTPROCESSOR_INFO_1A is access PRINTPROCESSOR_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTPROCESSOR_INFO_1W_x is record
      pName : LPWSTR;
   end record;
   subtype PRINTPROCESSOR_INFO_1W is PRINTPROCESSOR_INFO_1W_x; -- CXType_Elaborated
   type PPRINTPROCESSOR_INFO_1W is access PRINTPROCESSOR_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTPROCESSOR_INFO_1W is access PRINTPROCESSOR_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTPROCESSOR_INFO_1 is PRINTPROCESSOR_INFO_1A; -- CXType_Typedef
   subtype PPRINTPROCESSOR_INFO_1 is PPRINTPROCESSOR_INFO_1A; -- CXType_Typedef
   subtype LPPRINTPROCESSOR_INFO_1 is LPPRINTPROCESSOR_INFO_1A; -- CXType_Typedef
   type PRINTPROCESSOR_CAPS_1_x is record
      dwLevel : DWORD;
      dwNupOptions : DWORD;
      dwPageOrderFlags : DWORD;
      dwNumberOfCopies : DWORD;
   end record;
   subtype PRINTPROCESSOR_CAPS_1 is PRINTPROCESSOR_CAPS_1_x; -- CXType_Elaborated
   type PPRINTPROCESSOR_CAPS_1 is access PRINTPROCESSOR_CAPS_1_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTPROCESSOR_CAPS_2_x is record
      dwLevel : DWORD;
      dwNupOptions : DWORD;
      dwPageOrderFlags : DWORD;
      dwNumberOfCopies : DWORD;
      dwDuplexHandlingCaps : DWORD;
      dwNupDirectionCaps : DWORD;
      dwNupBorderCaps : DWORD;
      dwBookletHandlingCaps : DWORD;
      dwScalingCaps : DWORD;
   end record;
   subtype PRINTPROCESSOR_CAPS_2 is PRINTPROCESSOR_CAPS_2_x; -- CXType_Elaborated
   type PPRINTPROCESSOR_CAPS_2 is access PRINTPROCESSOR_CAPS_2_x; -- CXType_Pointer - CXType_Elaborated
   type PORT_INFO_1A_x is record
      pName : LPSTR;
   end record;
   subtype PORT_INFO_1A is PORT_INFO_1A_x; -- CXType_Elaborated
   type PPORT_INFO_1A is access PORT_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPORT_INFO_1A is access PORT_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type PORT_INFO_1W_x is record
      pName : LPWSTR;
   end record;
   subtype PORT_INFO_1W is PORT_INFO_1W_x; -- CXType_Elaborated
   type PPORT_INFO_1W is access PORT_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPORT_INFO_1W is access PORT_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PORT_INFO_1 is PORT_INFO_1A; -- CXType_Typedef
   subtype PPORT_INFO_1 is PPORT_INFO_1A; -- CXType_Typedef
   subtype LPPORT_INFO_1 is LPPORT_INFO_1A; -- CXType_Typedef
   type PORT_INFO_2A_x is record
      pPortName : LPSTR;
      pMonitorName : LPSTR;
      pDescription : LPSTR;
      fPortType : DWORD;
      Reserved : DWORD;
   end record;
   subtype PORT_INFO_2A is PORT_INFO_2A_x; -- CXType_Elaborated
   type PPORT_INFO_2A is access PORT_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPORT_INFO_2A is access PORT_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type PORT_INFO_2W_x is record
      pPortName : LPWSTR;
      pMonitorName : LPWSTR;
      pDescription : LPWSTR;
      fPortType : DWORD;
      Reserved : DWORD;
   end record;
   subtype PORT_INFO_2W is PORT_INFO_2W_x; -- CXType_Elaborated
   type PPORT_INFO_2W is access PORT_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPORT_INFO_2W is access PORT_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PORT_INFO_2 is PORT_INFO_2A; -- CXType_Typedef
   subtype PPORT_INFO_2 is PPORT_INFO_2A; -- CXType_Typedef
   subtype LPPORT_INFO_2 is LPPORT_INFO_2A; -- CXType_Typedef
   type PORT_INFO_3A_x is record
      dwStatus : DWORD;
      pszStatus : LPSTR;
      dwSeverity : DWORD;
   end record;
   subtype PORT_INFO_3A is PORT_INFO_3A_x; -- CXType_Elaborated
   type PPORT_INFO_3A is access PORT_INFO_3A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPORT_INFO_3A is access PORT_INFO_3A_x; -- CXType_Pointer - CXType_Elaborated
   type PORT_INFO_3W_x is record
      dwStatus : DWORD;
      pszStatus : LPWSTR;
      dwSeverity : DWORD;
   end record;
   subtype PORT_INFO_3W is PORT_INFO_3W_x; -- CXType_Elaborated
   type PPORT_INFO_3W is access PORT_INFO_3W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPORT_INFO_3W is access PORT_INFO_3W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PORT_INFO_3 is PORT_INFO_3A; -- CXType_Typedef
   subtype PPORT_INFO_3 is PPORT_INFO_3A; -- CXType_Typedef
   subtype LPPORT_INFO_3 is LPPORT_INFO_3A; -- CXType_Typedef
   type MONITOR_INFO_1A_x is record
      pName : LPSTR;
   end record;
   subtype MONITOR_INFO_1A is MONITOR_INFO_1A_x; -- CXType_Elaborated
   type PMONITOR_INFO_1A is access MONITOR_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPMONITOR_INFO_1A is access MONITOR_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type MONITOR_INFO_1W_x is record
      pName : LPWSTR;
   end record;
   subtype MONITOR_INFO_1W is MONITOR_INFO_1W_x; -- CXType_Elaborated
   type PMONITOR_INFO_1W is access MONITOR_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPMONITOR_INFO_1W is access MONITOR_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype MONITOR_INFO_1 is MONITOR_INFO_1A; -- CXType_Typedef
   subtype PMONITOR_INFO_1 is PMONITOR_INFO_1A; -- CXType_Typedef
   subtype LPMONITOR_INFO_1 is LPMONITOR_INFO_1A; -- CXType_Typedef
   type MONITOR_INFO_2A_x is record
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDLLName : LPSTR;
   end record;
   subtype MONITOR_INFO_2A is MONITOR_INFO_2A_x; -- CXType_Elaborated
   type PMONITOR_INFO_2A is access MONITOR_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPMONITOR_INFO_2A is access MONITOR_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type MONITOR_INFO_2W_x is record
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDLLName : LPWSTR;
   end record;
   subtype MONITOR_INFO_2W is MONITOR_INFO_2W_x; -- CXType_Elaborated
   type PMONITOR_INFO_2W is access MONITOR_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPMONITOR_INFO_2W is access MONITOR_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype MONITOR_INFO_2 is MONITOR_INFO_2A; -- CXType_Typedef
   subtype PMONITOR_INFO_2 is PMONITOR_INFO_2A; -- CXType_Typedef
   subtype LPMONITOR_INFO_2 is LPMONITOR_INFO_2A; -- CXType_Typedef
   type DATATYPES_INFO_1A_x is record
      pName : LPSTR;
   end record;
   subtype DATATYPES_INFO_1A is DATATYPES_INFO_1A_x; -- CXType_Elaborated
   type PDATATYPES_INFO_1A is access DATATYPES_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPDATATYPES_INFO_1A is access DATATYPES_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type DATATYPES_INFO_1W_x is record
      pName : LPWSTR;
   end record;
   subtype DATATYPES_INFO_1W is DATATYPES_INFO_1W_x; -- CXType_Elaborated
   type PDATATYPES_INFO_1W is access DATATYPES_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPDATATYPES_INFO_1W is access DATATYPES_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype DATATYPES_INFO_1 is DATATYPES_INFO_1A; -- CXType_Typedef
   subtype PDATATYPES_INFO_1 is PDATATYPES_INFO_1A; -- CXType_Typedef
   subtype LPDATATYPES_INFO_1 is LPDATATYPES_INFO_1A; -- CXType_Typedef
   type PRINTER_DEFAULTSA_x is record
      pDatatype : LPSTR;
      pDevMode_x : LPDEVMODEA;
      DesiredAccess : ACCESS_MASK;
   end record;
   subtype PRINTER_DEFAULTSA is PRINTER_DEFAULTSA_x; -- CXType_Elaborated
   type PPRINTER_DEFAULTSA is access PRINTER_DEFAULTSA_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_DEFAULTSA is access PRINTER_DEFAULTSA_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_DEFAULTSW_x is record
      pDatatype : LPWSTR;
      pDevMode_x : LPDEVMODEW;
      DesiredAccess : ACCESS_MASK;
   end record;
   subtype PRINTER_DEFAULTSW is PRINTER_DEFAULTSW_x; -- CXType_Elaborated
   type PPRINTER_DEFAULTSW is access PRINTER_DEFAULTSW_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_DEFAULTSW is access PRINTER_DEFAULTSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_DEFAULTS is PRINTER_DEFAULTSA; -- CXType_Typedef
   subtype PPRINTER_DEFAULTS is PPRINTER_DEFAULTSA; -- CXType_Typedef
   subtype LPPRINTER_DEFAULTS is LPPRINTER_DEFAULTSA; -- CXType_Typedef
   type PRINTER_ENUM_VALUESA_x is record
      pValueName : LPSTR;
      cbValueName : DWORD;
      dwType : DWORD;
      pData : LPBYTE;
      cbData : DWORD;
   end record;
   subtype PRINTER_ENUM_VALUESA is PRINTER_ENUM_VALUESA_x; -- CXType_Elaborated
   type PPRINTER_ENUM_VALUESA is access PRINTER_ENUM_VALUESA_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_ENUM_VALUESA is access PRINTER_ENUM_VALUESA_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_ENUM_VALUESW_x is record
      pValueName : LPWSTR;
      cbValueName : DWORD;
      dwType : DWORD;
      pData : LPBYTE;
      cbData : DWORD;
   end record;
   subtype PRINTER_ENUM_VALUESW is PRINTER_ENUM_VALUESW_x; -- CXType_Elaborated
   type PPRINTER_ENUM_VALUESW is access PRINTER_ENUM_VALUESW_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_ENUM_VALUESW is access PRINTER_ENUM_VALUESW_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_ENUM_VALUES is PRINTER_ENUM_VALUESA; -- CXType_Typedef
   subtype PPRINTER_ENUM_VALUES is PPRINTER_ENUM_VALUESA; -- CXType_Typedef
   subtype LPPRINTER_ENUM_VALUES is LPPRINTER_ENUM_VALUESA; -- CXType_Typedef
   function EnumPrintersA(
      Flags : DWORD;
      Name : LPSTR;
      Level : DWORD;
      pPrinterEnum : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrintersA,"EnumPrintersA");
   function EnumPrintersW(
      Flags : DWORD;
      Name : LPWSTR;
      Level : DWORD;
      pPrinterEnum : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrintersW,"EnumPrintersW");
   function GetSpoolFileHandle(
      hPrinter : HANDLE
   ) return HANDLE;
   pragma import (C,GetSpoolFileHandle,"GetSpoolFileHandle");
   function CommitSpoolData(
      hPrinter : HANDLE;
      hSpoolFile : HANDLE;
      cbCommit : DWORD
   ) return HANDLE;
   pragma import (C,CommitSpoolData,"CommitSpoolData");
   function CloseSpoolFileHandle(
      hPrinter : HANDLE;
      hSpoolFile : HANDLE
   ) return BOOL;
   pragma import (C,CloseSpoolFileHandle,"CloseSpoolFileHandle");
   function OpenPrinterA(
      pPrinterName : LPSTR;
      phPrinter : LPHANDLE;
      pDefault : LPPRINTER_DEFAULTSA
   ) return BOOL;
   pragma import (C,OpenPrinterA,"OpenPrinterA");
   function OpenPrinterW(
      pPrinterName : LPWSTR;
      phPrinter : LPHANDLE;
      pDefault : LPPRINTER_DEFAULTSW
   ) return BOOL;
   pragma import (C,OpenPrinterW,"OpenPrinterW");
   function ResetPrinterA(
      hPrinter : HANDLE;
      pDefault : LPPRINTER_DEFAULTSA
   ) return BOOL;
   pragma import (C,ResetPrinterA,"ResetPrinterA");
   function ResetPrinterW(
      hPrinter : HANDLE;
      pDefault : LPPRINTER_DEFAULTSW
   ) return BOOL;
   pragma import (C,ResetPrinterW,"ResetPrinterW");
   function SetJobA(
      hPrinter : HANDLE;
      JobId : DWORD;
      Level : DWORD;
      pJob : LPBYTE;
      Command : DWORD
   ) return BOOL;
   pragma import (C,SetJobA,"SetJobA");
   function SetJobW(
      hPrinter : HANDLE;
      JobId : DWORD;
      Level : DWORD;
      pJob : LPBYTE;
      Command : DWORD
   ) return BOOL;
   pragma import (C,SetJobW,"SetJobW");
   function GetJobA(
      hPrinter : HANDLE;
      JobId : DWORD;
      Level : DWORD;
      pJob : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetJobA,"GetJobA");
   function GetJobW(
      hPrinter : HANDLE;
      JobId : DWORD;
      Level : DWORD;
      pJob : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetJobW,"GetJobW");
   function EnumJobsA(
      hPrinter : HANDLE;
      FirstJob : DWORD;
      NoJobs : DWORD;
      Level : DWORD;
      pJob : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumJobsA,"EnumJobsA");
   function EnumJobsW(
      hPrinter : HANDLE;
      FirstJob : DWORD;
      NoJobs : DWORD;
      Level : DWORD;
      pJob : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumJobsW,"EnumJobsW");
   function AddPrinterA(
      pName : LPSTR;
      Level : DWORD;
      pPrinter : LPBYTE
   ) return HANDLE;
   pragma import (C,AddPrinterA,"AddPrinterA");
   function AddPrinterW(
      pName : LPWSTR;
      Level : DWORD;
      pPrinter : LPBYTE
   ) return HANDLE;
   pragma import (C,AddPrinterW,"AddPrinterW");
   function DeletePrinter(
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,DeletePrinter,"DeletePrinter");
   function SetPrinterA(
      hPrinter : HANDLE;
      Level : DWORD;
      pPrinter : LPBYTE;
      Command : DWORD
   ) return BOOL;
   pragma import (C,SetPrinterA,"SetPrinterA");
   function SetPrinterW(
      hPrinter : HANDLE;
      Level : DWORD;
      pPrinter : LPBYTE;
      Command : DWORD
   ) return BOOL;
   pragma import (C,SetPrinterW,"SetPrinterW");
   function GetPrinterA(
      hPrinter : HANDLE;
      Level : DWORD;
      pPrinter : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterA,"GetPrinterA");
   function GetPrinterW(
      hPrinter : HANDLE;
      Level : DWORD;
      pPrinter : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterW,"GetPrinterW");
   function AddPrinterDriverA(
      pName : LPSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE
   ) return BOOL;
   pragma import (C,AddPrinterDriverA,"AddPrinterDriverA");
   function AddPrinterDriverW(
      pName : LPWSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE
   ) return BOOL;
   pragma import (C,AddPrinterDriverW,"AddPrinterDriverW");
   function AddPrinterDriverExA(
      pName : LPSTR;
      Level : DWORD;
      lpbDriverInfo : PBYTE;
      dwFileCopyFlags : DWORD
   ) return BOOL;
   pragma import (C,AddPrinterDriverExA,"AddPrinterDriverExA");
   function AddPrinterDriverExW(
      pName : LPWSTR;
      Level : DWORD;
      lpbDriverInfo : PBYTE;
      dwFileCopyFlags : DWORD
   ) return BOOL;
   pragma import (C,AddPrinterDriverExW,"AddPrinterDriverExW");
   function EnumPrinterDriversA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrinterDriversA,"EnumPrinterDriversA");
   function EnumPrinterDriversW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrinterDriversW,"EnumPrinterDriversW");
   function GetPrinterDriverA(
      hPrinter : HANDLE;
      pEnvironment : LPSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterDriverA,"GetPrinterDriverA");
   function GetPrinterDriverW(
      hPrinter : HANDLE;
      pEnvironment : LPWSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterDriverW,"GetPrinterDriverW");
   function GetPrinterDriverDirectoryA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      Level : DWORD;
      pDriverDirectory : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterDriverDirectoryA,"GetPrinterDriverDirectoryA");
   function GetPrinterDriverDirectoryW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      Level : DWORD;
      pDriverDirectory : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterDriverDirectoryW,"GetPrinterDriverDirectoryW");
   function DeletePrinterDriverA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverName : LPSTR
   ) return BOOL;
   pragma import (C,DeletePrinterDriverA,"DeletePrinterDriverA");
   function DeletePrinterDriverW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverName : LPWSTR
   ) return BOOL;
   pragma import (C,DeletePrinterDriverW,"DeletePrinterDriverW");
   function DeletePrinterDriverExA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDriverName : LPSTR;
      dwDeleteFlag : DWORD;
      dwVersionFlag : DWORD
   ) return BOOL;
   pragma import (C,DeletePrinterDriverExA,"DeletePrinterDriverExA");
   function DeletePrinterDriverExW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDriverName : LPWSTR;
      dwDeleteFlag : DWORD;
      dwVersionFlag : DWORD
   ) return BOOL;
   pragma import (C,DeletePrinterDriverExW,"DeletePrinterDriverExW");
   function AddPrintProcessorA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      pPathName : LPSTR;
      pPrintProcessorName : LPSTR
   ) return BOOL;
   pragma import (C,AddPrintProcessorA,"AddPrintProcessorA");
   function AddPrintProcessorW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pPathName : LPWSTR;
      pPrintProcessorName : LPWSTR
   ) return BOOL;
   pragma import (C,AddPrintProcessorW,"AddPrintProcessorW");
   function EnumPrintProcessorsA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      Level : DWORD;
      pPrintProcessorInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrintProcessorsA,"EnumPrintProcessorsA");
   function EnumPrintProcessorsW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      Level : DWORD;
      pPrintProcessorInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrintProcessorsW,"EnumPrintProcessorsW");
   function GetPrintProcessorDirectoryA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      Level : DWORD;
      pPrintProcessorInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrintProcessorDirectoryA,"GetPrintProcessorDirectoryA");
   function GetPrintProcessorDirectoryW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      Level : DWORD;
      pPrintProcessorInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrintProcessorDirectoryW,"GetPrintProcessorDirectoryW");
   function EnumPrintProcessorDatatypesA(
      pName : LPSTR;
      pPrintProcessorName : LPSTR;
      Level : DWORD;
      pDatatypes : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrintProcessorDatatypesA,"EnumPrintProcessorDatatypesA");
   function EnumPrintProcessorDatatypesW(
      pName : LPWSTR;
      pPrintProcessorName : LPWSTR;
      Level : DWORD;
      pDatatypes : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPrintProcessorDatatypesW,"EnumPrintProcessorDatatypesW");
   function DeletePrintProcessorA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      pPrintProcessorName : LPSTR
   ) return BOOL;
   pragma import (C,DeletePrintProcessorA,"DeletePrintProcessorA");
   function DeletePrintProcessorW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pPrintProcessorName : LPWSTR
   ) return BOOL;
   pragma import (C,DeletePrintProcessorW,"DeletePrintProcessorW");
   function StartDocPrinterA(
      hPrinter : HANDLE;
      Level : DWORD;
      pDocInfo : LPBYTE
   ) return DWORD;
   pragma import (C,StartDocPrinterA,"StartDocPrinterA");
   function StartDocPrinterW(
      hPrinter : HANDLE;
      Level : DWORD;
      pDocInfo : LPBYTE
   ) return DWORD;
   pragma import (C,StartDocPrinterW,"StartDocPrinterW");
   function StartPagePrinter(
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,StartPagePrinter,"StartPagePrinter");
   function WritePrinter(
      hPrinter : HANDLE;
      pBuf : LPVOID;
      cbBuf : DWORD;
      pcWritten : LPDWORD
   ) return BOOL;
   pragma import (C,WritePrinter,"WritePrinter");
   function FlushPrinter(
      hPrinter : HANDLE;
      pBuf : LPVOID;
      cbBuf : DWORD;
      pcWritten : LPDWORD;
      cSleep : DWORD
   ) return BOOL;
   pragma import (C,FlushPrinter,"FlushPrinter");
   function EndPagePrinter(
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,EndPagePrinter,"EndPagePrinter");
   function AbortPrinter(
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,AbortPrinter,"AbortPrinter");
   function ReadPrinter(
      hPrinter : HANDLE;
      pBuf : LPVOID;
      cbBuf : DWORD;
      pNoBytesRead : LPDWORD
   ) return BOOL;
   pragma import (C,ReadPrinter,"ReadPrinter");
   function EndDocPrinter(
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,EndDocPrinter,"EndDocPrinter");
   function AddJobA(
      hPrinter : HANDLE;
      Level : DWORD;
      pData : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,AddJobA,"AddJobA");
   function AddJobW(
      hPrinter : HANDLE;
      Level : DWORD;
      pData : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,AddJobW,"AddJobW");
   function ScheduleJob(
      hPrinter : HANDLE;
      JobId : DWORD
   ) return BOOL;
   pragma import (C,ScheduleJob,"ScheduleJob");
   function PrinterProperties(
      hWnd_x : HWND;
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,PrinterProperties,"PrinterProperties");
   function DocumentPropertiesA(
      hWnd_x : HWND;
      hPrinter : HANDLE;
      pDeviceName : LPSTR;
      pDevModeOutput : PDEVMODEA;
      pDevModeInput : PDEVMODEA;
      fMode : DWORD
   ) return LONG;
   pragma import (C,DocumentPropertiesA,"DocumentPropertiesA");
   function DocumentPropertiesW(
      hWnd_x : HWND;
      hPrinter : HANDLE;
      pDeviceName : LPWSTR;
      pDevModeOutput : PDEVMODEW;
      pDevModeInput : PDEVMODEW;
      fMode : DWORD
   ) return LONG;
   pragma import (C,DocumentPropertiesW,"DocumentPropertiesW");
   function AdvancedDocumentPropertiesA(
      hWnd_x : HWND;
      hPrinter : HANDLE;
      pDeviceName : LPSTR;
      pDevModeOutput : PDEVMODEA;
      pDevModeInput : PDEVMODEA
   ) return LONG;
   pragma import (C,AdvancedDocumentPropertiesA,"AdvancedDocumentPropertiesA");
   function AdvancedDocumentPropertiesW(
      hWnd_x : HWND;
      hPrinter : HANDLE;
      pDeviceName : LPWSTR;
      pDevModeOutput : PDEVMODEW;
      pDevModeInput : PDEVMODEW
   ) return LONG;
   pragma import (C,AdvancedDocumentPropertiesW,"AdvancedDocumentPropertiesW");
   function ExtDeviceMode(
      hWnd_x : HWND;
      hInst : HANDLE;
      pDevModeOutput : LPDEVMODEA;
      pDeviceName : LPSTR;
      pPort : LPSTR;
      pDevModeInput : LPDEVMODEA;
      pProfile : LPSTR;
      fMode : DWORD
   ) return LONG;
   pragma import (C,ExtDeviceMode,"ExtDeviceMode");
   function GetPrinterDataA(
      hPrinter : HANDLE;
      pValueName : LPSTR;
      pType : LPDWORD;
      pData : LPBYTE;
      nSize : DWORD;
      pcbNeeded : LPDWORD
   ) return DWORD;
   pragma import (C,GetPrinterDataA,"GetPrinterDataA");
   function GetPrinterDataW(
      hPrinter : HANDLE;
      pValueName : LPWSTR;
      pType : LPDWORD;
      pData : LPBYTE;
      nSize : DWORD;
      pcbNeeded : LPDWORD
   ) return DWORD;
   pragma import (C,GetPrinterDataW,"GetPrinterDataW");
   function GetPrinterDataExA(
      hPrinter : HANDLE;
      pKeyName : LPCSTR;
      pValueName : LPCSTR;
      pType : LPDWORD;
      pData : LPBYTE;
      nSize : DWORD;
      pcbNeeded : LPDWORD
   ) return DWORD;
   pragma import (C,GetPrinterDataExA,"GetPrinterDataExA");
   function GetPrinterDataExW(
      hPrinter : HANDLE;
      pKeyName : LPCWSTR;
      pValueName : LPCWSTR;
      pType : LPDWORD;
      pData : LPBYTE;
      nSize : DWORD;
      pcbNeeded : LPDWORD
   ) return DWORD;
   pragma import (C,GetPrinterDataExW,"GetPrinterDataExW");
   function EnumPrinterDataA(
      hPrinter : HANDLE;
      dwIndex : DWORD;
      pValueName : LPSTR;
      cbValueName : DWORD;
      pcbValueName : LPDWORD;
      pType : LPDWORD;
      pData : LPBYTE;
      cbData : DWORD;
      pcbData : LPDWORD
   ) return DWORD;
   pragma import (C,EnumPrinterDataA,"EnumPrinterDataA");
   function EnumPrinterDataW(
      hPrinter : HANDLE;
      dwIndex : DWORD;
      pValueName : LPWSTR;
      cbValueName : DWORD;
      pcbValueName : LPDWORD;
      pType : LPDWORD;
      pData : LPBYTE;
      cbData : DWORD;
      pcbData : LPDWORD
   ) return DWORD;
   pragma import (C,EnumPrinterDataW,"EnumPrinterDataW");
   function EnumPrinterDataExA(
      hPrinter : HANDLE;
      pKeyName : LPCSTR;
      pEnumValues : LPBYTE;
      cbEnumValues : DWORD;
      pcbEnumValues : LPDWORD;
      pnEnumValues : LPDWORD
   ) return DWORD;
   pragma import (C,EnumPrinterDataExA,"EnumPrinterDataExA");
   function EnumPrinterDataExW(
      hPrinter : HANDLE;
      pKeyName : LPCWSTR;
      pEnumValues : LPBYTE;
      cbEnumValues : DWORD;
      pcbEnumValues : LPDWORD;
      pnEnumValues : LPDWORD
   ) return DWORD;
   pragma import (C,EnumPrinterDataExW,"EnumPrinterDataExW");
   function EnumPrinterKeyA(
      hPrinter : HANDLE;
      pKeyName : LPCSTR;
      pSubkey : LPSTR;
      cbSubkey : DWORD;
      pcbSubkey : LPDWORD
   ) return DWORD;
   pragma import (C,EnumPrinterKeyA,"EnumPrinterKeyA");
   function EnumPrinterKeyW(
      hPrinter : HANDLE;
      pKeyName : LPCWSTR;
      pSubkey : LPWSTR;
      cbSubkey : DWORD;
      pcbSubkey : LPDWORD
   ) return DWORD;
   pragma import (C,EnumPrinterKeyW,"EnumPrinterKeyW");
   function SetPrinterDataA(
      hPrinter : HANDLE;
      pValueName : LPSTR;
      type_x : DWORD;
      pData : LPBYTE;
      cbData : DWORD
   ) return DWORD;
   pragma import (C,SetPrinterDataA,"SetPrinterDataA");
   function SetPrinterDataW(
      hPrinter : HANDLE;
      pValueName : LPWSTR;
      type_x : DWORD;
      pData : LPBYTE;
      cbData : DWORD
   ) return DWORD;
   pragma import (C,SetPrinterDataW,"SetPrinterDataW");
   function SetPrinterDataExA(
      hPrinter : HANDLE;
      pKeyName : LPCSTR;
      pValueName : LPCSTR;
      type_x : DWORD;
      pData : LPBYTE;
      cbData : DWORD
   ) return DWORD;
   pragma import (C,SetPrinterDataExA,"SetPrinterDataExA");
   function SetPrinterDataExW(
      hPrinter : HANDLE;
      pKeyName : LPCWSTR;
      pValueName : LPCWSTR;
      type_x : DWORD;
      pData : LPBYTE;
      cbData : DWORD
   ) return DWORD;
   pragma import (C,SetPrinterDataExW,"SetPrinterDataExW");
   function DeletePrinterDataA(
      hPrinter : HANDLE;
      pValueName : LPSTR
   ) return DWORD;
   pragma import (C,DeletePrinterDataA,"DeletePrinterDataA");
   function DeletePrinterDataW(
      hPrinter : HANDLE;
      pValueName : LPWSTR
   ) return DWORD;
   pragma import (C,DeletePrinterDataW,"DeletePrinterDataW");
   function DeletePrinterDataExA(
      hPrinter : HANDLE;
      pKeyName : LPCSTR;
      pValueName : LPCSTR
   ) return DWORD;
   pragma import (C,DeletePrinterDataExA,"DeletePrinterDataExA");
   function DeletePrinterDataExW(
      hPrinter : HANDLE;
      pKeyName : LPCWSTR;
      pValueName : LPCWSTR
   ) return DWORD;
   pragma import (C,DeletePrinterDataExW,"DeletePrinterDataExW");
   function DeletePrinterKeyA(
      hPrinter : HANDLE;
      pKeyName : LPCSTR
   ) return DWORD;
   pragma import (C,DeletePrinterKeyA,"DeletePrinterKeyA");
   function DeletePrinterKeyW(
      hPrinter : HANDLE;
      pKeyName : LPCWSTR
   ) return DWORD;
   pragma import (C,DeletePrinterKeyW,"DeletePrinterKeyW");
   type PRINTER_NOTIFY_OPTIONS_TYPE_x is record
      type_x : WORD;
      Reserved0 : WORD;
      Reserved1 : DWORD;
      Reserved2 : DWORD;
      Count : DWORD;
      pFields : PWORD;
   end record;
   subtype PRINTER_NOTIFY_OPTIONS_TYPE is PRINTER_NOTIFY_OPTIONS_TYPE_x; -- CXType_Elaborated
   type PPRINTER_NOTIFY_OPTIONS_TYPE is access PRINTER_NOTIFY_OPTIONS_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_NOTIFY_OPTIONS_TYPE is access PRINTER_NOTIFY_OPTIONS_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_NOTIFY_OPTIONS_x is record
      Version : DWORD;
      Flags : DWORD;
      Count : DWORD;
      pTypes : PPRINTER_NOTIFY_OPTIONS_TYPE;
   end record;
   subtype PRINTER_NOTIFY_OPTIONS is PRINTER_NOTIFY_OPTIONS_x; -- CXType_Elaborated
   type PPRINTER_NOTIFY_OPTIONS is access PRINTER_NOTIFY_OPTIONS_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_NOTIFY_OPTIONS is access PRINTER_NOTIFY_OPTIONS_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_NOTIFY_INFO_DATA_x is record
      type_x : WORD;
      Field : WORD;
      Reserved : DWORD;
      Id : DWORD;
      NotifyData : Void;
   end record;
   subtype PRINTER_NOTIFY_INFO_DATA is PRINTER_NOTIFY_INFO_DATA_x; -- CXType_Elaborated
   type PPRINTER_NOTIFY_INFO_DATA is access PRINTER_NOTIFY_INFO_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_NOTIFY_INFO_DATA is access PRINTER_NOTIFY_INFO_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_NOTIFY_INFO_x is record
      Version : DWORD;
      Flags : DWORD;
      Count : DWORD;
      aData : Void;
   end record;
   subtype PRINTER_NOTIFY_INFO is PRINTER_NOTIFY_INFO_x; -- CXType_Elaborated
   type PPRINTER_NOTIFY_INFO is access PRINTER_NOTIFY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_NOTIFY_INFO is access PRINTER_NOTIFY_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type BINARY_CONTAINER_x is record
      cbBuf : DWORD;
      pData : LPBYTE;
   end record;
   subtype BINARY_CONTAINER is BINARY_CONTAINER_x; -- CXType_Elaborated
   type PBINARY_CONTAINER is access BINARY_CONTAINER_x; -- CXType_Pointer - CXType_Elaborated
   type BIDI_DATA_x is record
      dwBidiType : DWORD;
      u : Void;
   end record;
   subtype BIDI_DATA is BIDI_DATA_x; -- CXType_Elaborated
   type PBIDI_DATA is access BIDI_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type LPBIDI_DATA is access BIDI_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type BIDI_REQUEST_DATA_x is record
      dwReqNumber : DWORD;
      pSchema : LPWSTR;
      data : BIDI_DATA;
   end record;
   subtype BIDI_REQUEST_DATA is BIDI_REQUEST_DATA_x; -- CXType_Elaborated
   type PBIDI_REQUEST_DATA is access BIDI_REQUEST_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type LPBIDI_REQUEST_DATA is access BIDI_REQUEST_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type BIDI_REQUEST_CONTAINER_x is record
      Version : DWORD;
      Flags : DWORD;
      Count : DWORD;
      aData : Void;
   end record;
   subtype BIDI_REQUEST_CONTAINER is BIDI_REQUEST_CONTAINER_x; -- CXType_Elaborated
   type PBIDI_REQUEST_CONTAINER is access BIDI_REQUEST_CONTAINER_x; -- CXType_Pointer - CXType_Elaborated
   type LPBIDI_REQUEST_CONTAINER is access BIDI_REQUEST_CONTAINER_x; -- CXType_Pointer - CXType_Elaborated
   type BIDI_RESPONSE_DATA_x is record
      dwResult : DWORD;
      dwReqNumber : DWORD;
      pSchema : LPWSTR;
      data : BIDI_DATA;
   end record;
   subtype BIDI_RESPONSE_DATA is BIDI_RESPONSE_DATA_x; -- CXType_Elaborated
   type PBIDI_RESPONSE_DATA is access BIDI_RESPONSE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type LPBIDI_RESPONSE_DATA is access BIDI_RESPONSE_DATA_x; -- CXType_Pointer - CXType_Elaborated
   type BIDI_RESPONSE_CONTAINER_x is record
      Version : DWORD;
      Flags : DWORD;
      Count : DWORD;
      aData : Void;
   end record;
   subtype BIDI_RESPONSE_CONTAINER is BIDI_RESPONSE_CONTAINER_x; -- CXType_Elaborated
   type PBIDI_RESPONSE_CONTAINER is access BIDI_RESPONSE_CONTAINER_x; -- CXType_Pointer - CXType_Elaborated
   type LPBIDI_RESPONSE_CONTAINER is access BIDI_RESPONSE_CONTAINER_x; -- CXType_Pointer - CXType_Elaborated
   type BIDI_TYPE is (
      BIDI_NULL,
      BIDI_INT,
      BIDI_FLOAT,
      BIDI_BOOL,
      BIDI_STRING,
      BIDI_TEXT,
      BIDI_ENUM,
      BIDI_BLOB
   );
   for BIDI_TYPE use (
      BIDI_NULL => 0,
      BIDI_INT => 1,
      BIDI_FLOAT => 2,
      BIDI_BOOL => 3,
      BIDI_STRING => 4,
      BIDI_TEXT => 5,
      BIDI_ENUM => 6,
      BIDI_BLOB => 7
   );
   for BIDI_TYPE'Size use 32;
   function WaitForPrinterChange(
      hPrinter : HANDLE;
      Flags : DWORD
   ) return DWORD;
   pragma import (C,WaitForPrinterChange,"WaitForPrinterChange");
   function FindFirstPrinterChangeNotification(
      hPrinter : HANDLE;
      fdwFilter : DWORD;
      fdwOptions : DWORD;
      pPrinterNotifyOptions : PVOID
   ) return HANDLE;
   pragma import (C,FindFirstPrinterChangeNotification,"FindFirstPrinterChangeNotification");
   function FindNextPrinterChangeNotification(
      hChange : HANDLE;
      pdwChange : PDWORD;
      pvReserved : LPVOID;
      ppPrinterNotifyInfo : access LPVOID
   ) return BOOL;
   pragma import (C,FindNextPrinterChangeNotification,"FindNextPrinterChangeNotification");
   function FreePrinterNotifyInfo(
      pPrinterNotifyInfo : PPRINTER_NOTIFY_INFO
   ) return BOOL;
   pragma import (C,FreePrinterNotifyInfo,"FreePrinterNotifyInfo");
   function FindClosePrinterChangeNotification(
      hChange : HANDLE
   ) return BOOL;
   pragma import (C,FindClosePrinterChangeNotification,"FindClosePrinterChangeNotification");
   function PrinterMessageBoxA(
      hPrinter : HANDLE;
      Error : DWORD;
      hWnd_x : HWND;
      pText : LPSTR;
      pCaption : LPSTR;
      dwType : DWORD
   ) return DWORD;
   pragma import (C,PrinterMessageBoxA,"PrinterMessageBoxA");
   function PrinterMessageBoxW(
      hPrinter : HANDLE;
      Error : DWORD;
      hWnd_x : HWND;
      pText : LPWSTR;
      pCaption : LPWSTR;
      dwType : DWORD
   ) return DWORD;
   pragma import (C,PrinterMessageBoxW,"PrinterMessageBoxW");
   function ClosePrinter(
      hPrinter : HANDLE
   ) return BOOL;
   pragma import (C,ClosePrinter,"ClosePrinter");
   function AddFormA(
      hPrinter : HANDLE;
      Level : DWORD;
      pForm : LPBYTE
   ) return BOOL;
   pragma import (C,AddFormA,"AddFormA");
   function AddFormW(
      hPrinter : HANDLE;
      Level : DWORD;
      pForm : LPBYTE
   ) return BOOL;
   pragma import (C,AddFormW,"AddFormW");
   function DeleteFormA(
      hPrinter : HANDLE;
      pFormName : LPSTR
   ) return BOOL;
   pragma import (C,DeleteFormA,"DeleteFormA");
   function DeleteFormW(
      hPrinter : HANDLE;
      pFormName : LPWSTR
   ) return BOOL;
   pragma import (C,DeleteFormW,"DeleteFormW");
   function GetFormA(
      hPrinter : HANDLE;
      pFormName : LPSTR;
      Level : DWORD;
      pForm : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetFormA,"GetFormA");
   function GetFormW(
      hPrinter : HANDLE;
      pFormName : LPWSTR;
      Level : DWORD;
      pForm : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetFormW,"GetFormW");
   function SetFormA(
      hPrinter : HANDLE;
      pFormName : LPSTR;
      Level : DWORD;
      pForm : LPBYTE
   ) return BOOL;
   pragma import (C,SetFormA,"SetFormA");
   function SetFormW(
      hPrinter : HANDLE;
      pFormName : LPWSTR;
      Level : DWORD;
      pForm : LPBYTE
   ) return BOOL;
   pragma import (C,SetFormW,"SetFormW");
   function EnumFormsA(
      hPrinter : HANDLE;
      Level : DWORD;
      pForm : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumFormsA,"EnumFormsA");
   function EnumFormsW(
      hPrinter : HANDLE;
      Level : DWORD;
      pForm : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumFormsW,"EnumFormsW");
   function EnumMonitorsA(
      pName : LPSTR;
      Level : DWORD;
      pMonitor : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumMonitorsA,"EnumMonitorsA");
   function EnumMonitorsW(
      pName : LPWSTR;
      Level : DWORD;
      pMonitor : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumMonitorsW,"EnumMonitorsW");
   function AddMonitorA(
      pName : LPSTR;
      Level : DWORD;
      pMonitors : LPBYTE
   ) return BOOL;
   pragma import (C,AddMonitorA,"AddMonitorA");
   function AddMonitorW(
      pName : LPWSTR;
      Level : DWORD;
      pMonitors : LPBYTE
   ) return BOOL;
   pragma import (C,AddMonitorW,"AddMonitorW");
   function DeleteMonitorA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      pMonitorName : LPSTR
   ) return BOOL;
   pragma import (C,DeleteMonitorA,"DeleteMonitorA");
   function DeleteMonitorW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pMonitorName : LPWSTR
   ) return BOOL;
   pragma import (C,DeleteMonitorW,"DeleteMonitorW");
   function EnumPortsA(
      pName : LPSTR;
      Level : DWORD;
      pPort : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPortsA,"EnumPortsA");
   function EnumPortsW(
      pName : LPWSTR;
      Level : DWORD;
      pPort : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD;
      pcReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumPortsW,"EnumPortsW");
   function AddPortA(
      pName : LPSTR;
      hWnd_x : HWND;
      pMonitorName : LPSTR
   ) return BOOL;
   pragma import (C,AddPortA,"AddPortA");
   function AddPortW(
      pName : LPWSTR;
      hWnd_x : HWND;
      pMonitorName : LPWSTR
   ) return BOOL;
   pragma import (C,AddPortW,"AddPortW");
   function ConfigurePortA(
      pName : LPSTR;
      hWnd_x : HWND;
      pPortName : LPSTR
   ) return BOOL;
   pragma import (C,ConfigurePortA,"ConfigurePortA");
   function ConfigurePortW(
      pName : LPWSTR;
      hWnd_x : HWND;
      pPortName : LPWSTR
   ) return BOOL;
   pragma import (C,ConfigurePortW,"ConfigurePortW");
   function DeletePortA(
      pName : LPSTR;
      hWnd_x : HWND;
      pPortName : LPSTR
   ) return BOOL;
   pragma import (C,DeletePortA,"DeletePortA");
   function DeletePortW(
      pName : LPWSTR;
      hWnd_x : HWND;
      pPortName : LPWSTR
   ) return BOOL;
   pragma import (C,DeletePortW,"DeletePortW");
   function XcvDataW(
      hXcv : HANDLE;
      pszDataName : PCWSTR;
      pInputData : PBYTE;
      cbInputData : DWORD;
      pOutputData : PBYTE;
      cbOutputData : DWORD;
      pcbOutputNeeded : PDWORD;
      pdwStatus : PDWORD
   ) return BOOL;
   pragma import (C,XcvDataW,"XcvDataW");
   function GetDefaultPrinterA(
      pszBuffer : LPSTR;
      pcchBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetDefaultPrinterA,"GetDefaultPrinterA");
   function GetDefaultPrinterW(
      pszBuffer : LPWSTR;
      pcchBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetDefaultPrinterW,"GetDefaultPrinterW");
   function SetDefaultPrinterA(
      pszPrinter : LPCSTR
   ) return BOOL;
   pragma import (C,SetDefaultPrinterA,"SetDefaultPrinterA");
   function SetDefaultPrinterW(
      pszPrinter : LPCWSTR
   ) return BOOL;
   pragma import (C,SetDefaultPrinterW,"SetDefaultPrinterW");
   function SetPortA(
      pName : LPSTR;
      pPortName : LPSTR;
      dwLevel : DWORD;
      pPortInfo : LPBYTE
   ) return BOOL;
   pragma import (C,SetPortA,"SetPortA");
   function SetPortW(
      pName : LPWSTR;
      pPortName : LPWSTR;
      dwLevel : DWORD;
      pPortInfo : LPBYTE
   ) return BOOL;
   pragma import (C,SetPortW,"SetPortW");
   function AddPrinterConnectionA(
      pName : LPSTR
   ) return BOOL;
   pragma import (C,AddPrinterConnectionA,"AddPrinterConnectionA");
   function AddPrinterConnectionW(
      pName : LPWSTR
   ) return BOOL;
   pragma import (C,AddPrinterConnectionW,"AddPrinterConnectionW");
   function DeletePrinterConnectionA(
      pName : LPSTR
   ) return BOOL;
   pragma import (C,DeletePrinterConnectionA,"DeletePrinterConnectionA");
   function DeletePrinterConnectionW(
      pName : LPWSTR
   ) return BOOL;
   pragma import (C,DeletePrinterConnectionW,"DeletePrinterConnectionW");
   function ConnectToPrinterDlg(
      hwnd_x : HWND;
      Flags : DWORD
   ) return HANDLE;
   pragma import (C,ConnectToPrinterDlg,"ConnectToPrinterDlg");
   type PROVIDOR_INFO_1A_x is record
      pName : LPSTR;
      pEnvironment : LPSTR;
      pDLLName : LPSTR;
   end record;
   subtype PROVIDOR_INFO_1A is PROVIDOR_INFO_1A_x; -- CXType_Elaborated
   type PPROVIDOR_INFO_1A is access PROVIDOR_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPROVIDOR_INFO_1A is access PROVIDOR_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type PROVIDOR_INFO_1W_x is record
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pDLLName : LPWSTR;
   end record;
   subtype PROVIDOR_INFO_1W is PROVIDOR_INFO_1W_x; -- CXType_Elaborated
   type PPROVIDOR_INFO_1W is access PROVIDOR_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPROVIDOR_INFO_1W is access PROVIDOR_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PROVIDOR_INFO_1 is PROVIDOR_INFO_1A; -- CXType_Typedef
   subtype PPROVIDOR_INFO_1 is PPROVIDOR_INFO_1A; -- CXType_Typedef
   subtype LPPROVIDOR_INFO_1 is LPPROVIDOR_INFO_1A; -- CXType_Typedef
   type PROVIDOR_INFO_2A_x is record
      pOrder : LPSTR;
   end record;
   subtype PROVIDOR_INFO_2A is PROVIDOR_INFO_2A_x; -- CXType_Elaborated
   type PPROVIDOR_INFO_2A is access PROVIDOR_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type LPPROVIDOR_INFO_2A is access PROVIDOR_INFO_2A_x; -- CXType_Pointer - CXType_Elaborated
   type PROVIDOR_INFO_2W_x is record
      pOrder : LPWSTR;
   end record;
   subtype PROVIDOR_INFO_2W is PROVIDOR_INFO_2W_x; -- CXType_Elaborated
   type PPROVIDOR_INFO_2W is access PROVIDOR_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   type LPPROVIDOR_INFO_2W is access PROVIDOR_INFO_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PROVIDOR_INFO_2 is PROVIDOR_INFO_2A; -- CXType_Typedef
   subtype PPROVIDOR_INFO_2 is PPROVIDOR_INFO_2A; -- CXType_Typedef
   subtype LPPROVIDOR_INFO_2 is LPPROVIDOR_INFO_2A; -- CXType_Typedef
   function AddPrintProvidorA(
      pName : LPSTR;
      Level : DWORD;
      pProvidorInfo : LPBYTE
   ) return BOOL;
   pragma import (C,AddPrintProvidorA,"AddPrintProvidorA");
   function AddPrintProvidorW(
      pName : LPWSTR;
      Level : DWORD;
      pProvidorInfo : LPBYTE
   ) return BOOL;
   pragma import (C,AddPrintProvidorW,"AddPrintProvidorW");
   function DeletePrintProvidorA(
      pName : LPSTR;
      pEnvironment : LPSTR;
      pPrintProvidorName : LPSTR
   ) return BOOL;
   pragma import (C,DeletePrintProvidorA,"DeletePrintProvidorA");
   function DeletePrintProvidorW(
      pName : LPWSTR;
      pEnvironment : LPWSTR;
      pPrintProvidorName : LPWSTR
   ) return BOOL;
   pragma import (C,DeletePrintProvidorW,"DeletePrintProvidorW");
   function IsValidDevmodeA(
      pDevmode_x : PDEVMODEA;
      DevmodeSize : size_t
   ) return BOOL;
   pragma import (C,IsValidDevmodeA,"IsValidDevmodeA");
   function IsValidDevmodeW(
      pDevmode_x : PDEVMODEW;
      DevmodeSize : size_t
   ) return BOOL;
   pragma import (C,IsValidDevmodeW,"IsValidDevmodeW");
   type PRINTER_OPTION_FLAGS_x is (
      PRINTER_OPTION_NO_CACHE,
      PRINTER_OPTION_CACHE,
      PRINTER_OPTION_CLIENT_CHANGE,
      PRINTER_OPTION_NO_CLIENT_DATA
   );
   for PRINTER_OPTION_FLAGS_x use (
      PRINTER_OPTION_NO_CACHE => 1,
      PRINTER_OPTION_CACHE => 2,
      PRINTER_OPTION_CLIENT_CHANGE => 4,
      PRINTER_OPTION_NO_CLIENT_DATA => 8
   );
   for PRINTER_OPTION_FLAGS_x'Size use 32;
   subtype PRINTER_OPTION_FLAGS is PRINTER_OPTION_FLAGS_x; -- CXType_Elaborated
   type PRINTER_OPTIONSA_x is record
      cbSize : UINT;
      dwFlags : DWORD;
   end record;
   subtype PRINTER_OPTIONSA is PRINTER_OPTIONSA_x; -- CXType_Elaborated
   type PPRINTER_OPTIONSA is access PRINTER_OPTIONSA_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_OPTIONSA is access PRINTER_OPTIONSA_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_OPTIONSW_x is record
      cbSize : UINT;
      dwFlags : DWORD;
   end record;
   subtype PRINTER_OPTIONSW is PRINTER_OPTIONSW_x; -- CXType_Elaborated
   type PPRINTER_OPTIONSW is access PRINTER_OPTIONSW_x; -- CXType_Pointer - CXType_Elaborated
   type LPPRINTER_OPTIONSW is access PRINTER_OPTIONSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_OPTIONS is PRINTER_OPTIONSA; -- CXType_Typedef
   subtype PPRINTER_OPTIONS is PPRINTER_OPTIONSA; -- CXType_Typedef
   subtype LPPRINTER_OPTIONS is LPPRINTER_OPTIONSA; -- CXType_Typedef
   function OpenPrinter2A(
      pPrinterName : LPCSTR;
      phPrinter : LPHANDLE;
      pDefault : PPRINTER_DEFAULTSA;
      pOptions : PPRINTER_OPTIONSA
   ) return BOOL;
   pragma import (C,OpenPrinter2A,"OpenPrinter2A");
   function OpenPrinter2W(
      pPrinterName : LPCWSTR;
      phPrinter : LPHANDLE;
      pDefault : PPRINTER_DEFAULTSW;
      pOptions : PPRINTER_OPTIONSW
   ) return BOOL;
   pragma import (C,OpenPrinter2W,"OpenPrinter2W");
   type PRINTER_CONNECTION_INFO_1A_x is record
      dwFlags : DWORD;
      pszDriverName : LPSTR;
   end record;
   subtype PRINTER_CONNECTION_INFO_1A is PRINTER_CONNECTION_INFO_1A_x; -- CXType_Elaborated
   type PPRINTER_CONNECTION_INFO_1A is access PRINTER_CONNECTION_INFO_1A_x; -- CXType_Pointer - CXType_Elaborated
   type PRINTER_CONNECTION_INFO_1W_x is record
      dwFlags : DWORD;
      pszDriverName : LPWSTR;
   end record;
   subtype PRINTER_CONNECTION_INFO_1W is PRINTER_CONNECTION_INFO_1W_x; -- CXType_Elaborated
   type PPRINTER_CONNECTION_INFO_1W is access PRINTER_CONNECTION_INFO_1W_x; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTER_CONNECTION_INFO_1 is PRINTER_CONNECTION_INFO_1A; -- CXType_Typedef
   subtype PPRINTER_CONNECTION_INFO_1 is PPRINTER_CONNECTION_INFO_1A; -- CXType_Typedef
   function AddPrinterConnection2A(
      hWnd_x : HWND;
      pszName : LPCSTR;
      dwLevel : DWORD;
      pConnectionInfo : PVOID
   ) return BOOL;
   pragma import (C,AddPrinterConnection2A,"AddPrinterConnection2A");
   function AddPrinterConnection2W(
      hWnd_x : HWND;
      pszName : LPCWSTR;
      dwLevel : DWORD;
      pConnectionInfo : PVOID
   ) return BOOL;
   pragma import (C,AddPrinterConnection2W,"AddPrinterConnection2W");
   function InstallPrinterDriverFromPackageA(
      pszServer : LPCSTR;
      pszInfPath : LPCSTR;
      pszDriverName : LPCSTR;
      pszEnvironment : LPCSTR;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,InstallPrinterDriverFromPackageA,"InstallPrinterDriverFromPackageA");
   function InstallPrinterDriverFromPackageW(
      pszServer : LPCWSTR;
      pszInfPath : LPCWSTR;
      pszDriverName : LPCWSTR;
      pszEnvironment : LPCWSTR;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,InstallPrinterDriverFromPackageW,"InstallPrinterDriverFromPackageW");
   function UploadPrinterDriverPackageA(
      pszServer : LPCSTR;
      pszInfPath : LPCSTR;
      pszEnvironment : LPCSTR;
      dwFlags : DWORD;
      hwnd_x : HWND;
      pszDestInfPath : LPSTR;
      pcchDestInfPath : PULONG
   ) return HRESULT;
   pragma import (C,UploadPrinterDriverPackageA,"UploadPrinterDriverPackageA");
   function UploadPrinterDriverPackageW(
      pszServer : LPCWSTR;
      pszInfPath : LPCWSTR;
      pszEnvironment : LPCWSTR;
      dwFlags : DWORD;
      hwnd_x : HWND;
      pszDestInfPath : LPWSTR;
      pcchDestInfPath : PULONG
   ) return HRESULT;
   pragma import (C,UploadPrinterDriverPackageW,"UploadPrinterDriverPackageW");
   type CORE_PRINTER_DRIVERA_x is record
      CoreDriverGUID : GUID;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      szPackageID : Void;
   end record;
   subtype CORE_PRINTER_DRIVERA is CORE_PRINTER_DRIVERA_x; -- CXType_Elaborated
   type PCORE_PRINTER_DRIVERA is access CORE_PRINTER_DRIVERA_x; -- CXType_Pointer - CXType_Elaborated
   type CORE_PRINTER_DRIVERW_x is record
      CoreDriverGUID : GUID;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      szPackageID : Void;
   end record;
   subtype CORE_PRINTER_DRIVERW is CORE_PRINTER_DRIVERW_x; -- CXType_Elaborated
   type PCORE_PRINTER_DRIVERW is access CORE_PRINTER_DRIVERW_x; -- CXType_Pointer - CXType_Elaborated
   subtype CORE_PRINTER_DRIVER is CORE_PRINTER_DRIVERA; -- CXType_Typedef
   subtype PCORE_PRINTER_DRIVER is PCORE_PRINTER_DRIVERA; -- CXType_Typedef
   function GetCorePrinterDriversA(
      pszServer : LPCSTR;
      pszEnvironment : LPCSTR;
      pszzCoreDriverDependencies : LPCSTR;
      cCorePrinterDrivers : DWORD;
      pCorePrinterDrivers : PCORE_PRINTER_DRIVERA
   ) return HRESULT;
   pragma import (C,GetCorePrinterDriversA,"GetCorePrinterDriversA");
   function GetCorePrinterDriversW(
      pszServer : LPCWSTR;
      pszEnvironment : LPCWSTR;
      pszzCoreDriverDependencies : LPCWSTR;
      cCorePrinterDrivers : DWORD;
      pCorePrinterDrivers : PCORE_PRINTER_DRIVERW
   ) return HRESULT;
   pragma import (C,GetCorePrinterDriversW,"GetCorePrinterDriversW");
   function CorePrinterDriverInstalledA(
      pszServer : LPCSTR;
      pszEnvironment : LPCSTR;
      CoreDriverGUID : GUID;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      pbDriverInstalled : access BOOL
   ) return HRESULT;
   pragma import (C,CorePrinterDriverInstalledA,"CorePrinterDriverInstalledA");
   function CorePrinterDriverInstalledW(
      pszServer : LPCWSTR;
      pszEnvironment : LPCWSTR;
      CoreDriverGUID : GUID;
      ftDriverDate : FILETIME;
      dwlDriverVersion : DWORDLONG;
      pbDriverInstalled : access BOOL
   ) return HRESULT;
   pragma import (C,CorePrinterDriverInstalledW,"CorePrinterDriverInstalledW");
   function GetPrinterDriverPackagePathA(
      pszServer : LPCSTR;
      pszEnvironment : LPCSTR;
      pszLanguage : LPCSTR;
      pszPackageID : LPCSTR;
      pszDriverPackageCab : LPSTR;
      cchDriverPackageCab : DWORD;
      pcchRequiredSize : LPDWORD
   ) return HRESULT;
   pragma import (C,GetPrinterDriverPackagePathA,"GetPrinterDriverPackagePathA");
   function GetPrinterDriverPackagePathW(
      pszServer : LPCWSTR;
      pszEnvironment : LPCWSTR;
      pszLanguage : LPCWSTR;
      pszPackageID : LPCWSTR;
      pszDriverPackageCab : LPWSTR;
      cchDriverPackageCab : DWORD;
      pcchRequiredSize : LPDWORD
   ) return HRESULT;
   pragma import (C,GetPrinterDriverPackagePathW,"GetPrinterDriverPackagePathW");
   function DeletePrinterDriverPackageA(
      pszServer : LPCSTR;
      pszInfPath : LPCSTR;
      pszEnvironment : LPCSTR
   ) return HRESULT;
   pragma import (C,DeletePrinterDriverPackageA,"DeletePrinterDriverPackageA");
   function DeletePrinterDriverPackageW(
      pszServer : LPCWSTR;
      pszInfPath : LPCWSTR;
      pszEnvironment : LPCWSTR
   ) return HRESULT;
   pragma import (C,DeletePrinterDriverPackageW,"DeletePrinterDriverPackageW");
   type EPrintPropertyType is (
      kPropertyTypeString,
      kPropertyTypeInt32,
      kPropertyTypeInt64,
      kPropertyTypeByte,
      kPropertyTypeTime,
      kPropertyTypeDevMode,
      kPropertyTypeSD,
      kPropertyTypeNotificationReply,
      kPropertyTypeNotificationOptions,
      kPropertyTypeBuffer
   );
   for EPrintPropertyType use (
      kPropertyTypeString => 1,
      kPropertyTypeInt32 => 2,
      kPropertyTypeInt64 => 3,
      kPropertyTypeByte => 4,
      kPropertyTypeTime => 5,
      kPropertyTypeDevMode => 6,
      kPropertyTypeSD => 7,
      kPropertyTypeNotificationReply => 8,
      kPropertyTypeNotificationOptions => 9,
      kPropertyTypeBuffer => 10
   );
   for EPrintPropertyType'Size use 32;
   type EPrintXPSJobProgress is (
      kAddingDocumentSequence,
      kDocumentSequenceAdded,
      kAddingFixedDocument,
      kFixedDocumentAdded,
      kAddingFixedPage,
      kFixedPageAdded,
      kResourceAdded,
      kFontAdded,
      kImageAdded,
      kXpsDocumentCommitted
   );
   for EPrintXPSJobProgress use (
      kAddingDocumentSequence => 0,
      kDocumentSequenceAdded => 1,
      kAddingFixedDocument => 2,
      kFixedDocumentAdded => 3,
      kAddingFixedPage => 4,
      kFixedPageAdded => 5,
      kResourceAdded => 6,
      kFontAdded => 7,
      kImageAdded => 8,
      kXpsDocumentCommitted => 9
   );
   for EPrintXPSJobProgress'Size use 32;
   type EPrintXPSJobOperation is (
      kJobProduction,
      kJobConsumption
   );
   for EPrintXPSJobOperation use (
      kJobProduction => 1,
      kJobConsumption => 2
   );
   for EPrintXPSJobOperation'Size use 32;
   type PrintPropertyValue is record
      ePropertyType : EPrintPropertyType;
      value : Void;
   end record;
   type PrintNamedProperty is record
      propertyName : access WCHAR;
      propertyValue : PrintPropertyValue;
   end record;
   type PrintPropertiesCollection is record
      numberOfProperties : ULONG;
      propertiesCollection : access PrintNamedProperty;
   end record;
   function ReportJobProcessingProgress(
      printerHandle : HANDLE;
      jobId : ULONG;
      jobOperation : EPrintXPSJobOperation;
      jobProgress : EPrintXPSJobProgress
   ) return HRESULT;
   pragma import (C,ReportJobProcessingProgress,"ReportJobProcessingProgress");
   function GetPrinterDriver2A(
      hWnd_x : HWND;
      hPrinter : HANDLE;
      pEnvironment : LPSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterDriver2A,"GetPrinterDriver2A");
   function GetPrinterDriver2W(
      hWnd_x : HWND;
      hPrinter : HANDLE;
      pEnvironment : LPWSTR;
      Level : DWORD;
      pDriverInfo : LPBYTE;
      cbBuf : DWORD;
      pcbNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,GetPrinterDriver2W,"GetPrinterDriver2W");
   type PRINT_EXECUTION_CONTEXT is (
      PRINT_EXECUTION_CONTEXT_APPLICATION,
      PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE,
      PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST,
      PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE,
      PRINT_EXECUTION_CONTEXT_WOW64
   );
   for PRINT_EXECUTION_CONTEXT use (
      PRINT_EXECUTION_CONTEXT_APPLICATION => 0,
      PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE => 1,
      PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST => 2,
      PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE => 3,
      PRINT_EXECUTION_CONTEXT_WOW64 => 4
   );
   for PRINT_EXECUTION_CONTEXT'Size use 32;
   type PRINT_EXECUTION_DATA is record
      context_x : PRINT_EXECUTION_CONTEXT;
      clientAppPID : DWORD;
   end record;
   function GetPrintExecutionData(
      pData : access PRINT_EXECUTION_DATA
   ) return BOOL;
   pragma import (C,GetPrintExecutionData,"GetPrintExecutionData");
   function GetJobNamedPropertyValue(
      hPrinter : HANDLE;
      JobId : DWORD;
      pszName : PCWSTR;
      pValue_x : access PrintPropertyValue
   ) return DWORD;
   pragma import (C,GetJobNamedPropertyValue,"GetJobNamedPropertyValue");
   procedure FreePrintPropertyValue(
      pValue_x : access PrintPropertyValue
   );
   pragma import (C,FreePrintPropertyValue,"FreePrintPropertyValue");
   type PrintNamedProperty_Ptr is access all PrintNamedProperty; -- Auto Generated Dependancy
   procedure FreePrintNamedPropertyArray(
      cProperties : DWORD;
      ppProperties : access PrintNamedProperty_Ptr
   );
   pragma import (C,FreePrintNamedPropertyArray,"FreePrintNamedPropertyArray");
   function SetJobNamedProperty(
      hPrinter : HANDLE;
      JobId : DWORD;
      pProperty : access constant PrintNamedProperty
   ) return DWORD;
   pragma import (C,SetJobNamedProperty,"SetJobNamedProperty");
   function DeleteJobNamedProperty(
      hPrinter : HANDLE;
      JobId : DWORD;
      pszName : PCWSTR
   ) return DWORD;
   pragma import (C,DeleteJobNamedProperty,"DeleteJobNamedProperty");
   function EnumJobNamedProperties(
      hPrinter : HANDLE;
      JobId : DWORD;
      pcProperties : access DWORD;
      ppProperties : access PrintNamedProperty_Ptr
   ) return DWORD;
   pragma import (C,EnumJobNamedProperties,"EnumJobNamedProperties");
   function GetPrintOutputInfo(
      hWnd_x : HWND;
      pszPrinter : PCWSTR;
      phFile : access HANDLE;
      ppszOutputFile : access PWSTR
   ) return HRESULT;
   pragma import (C,GetPrintOutputInfo,"GetPrintOutputInfo");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\combaseapi.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_malloc.h>
   procedure calloc_base(
      Count : size_t;
      Size_x : size_t
   );
   pragma import (C,calloc_base,"_calloc_base");
   procedure calloc(
      Count : size_t;
      Size_x : size_t
   );
   pragma import (C,calloc,"calloc");
   function callnewh(
      Size_x : size_t
   ) return Interfaces.C.Int;
   pragma import (C,callnewh,"_callnewh");
   procedure expand(
      Block : access Void;
      Size_x : size_t
   );
   pragma import (C,expand,"_expand");
   procedure free_base(
      Block : access Void
   );
   pragma import (C,free_base,"_free_base");
   procedure free(
      Block : access Void
   );
   pragma import (C,free,"free");
   procedure malloc_base(
      Size_x : size_t
   );
   pragma import (C,malloc_base,"_malloc_base");
   procedure malloc(
      Size_x : size_t
   );
   pragma import (C,malloc,"malloc");
   function msize_base(
      Block : access Void
   ) return size_t;
   pragma import (C,msize_base,"_msize_base");
   function msize(
      Block : access Void
   ) return size_t;
   pragma import (C,msize,"_msize");
   procedure realloc_base(
      Block : access Void;
      Size_x : size_t
   );
   pragma import (C,realloc_base,"_realloc_base");
   procedure realloc(
      Block : access Void;
      Size_x : size_t
   );
   pragma import (C,realloc,"realloc");
   procedure recalloc_base(
      Block : access Void;
      Count : size_t;
      Size_x : size_t
   );
   pragma import (C,recalloc_base,"_recalloc_base");
   procedure recalloc(
      Block : access Void;
      Count : size_t;
      Size_x : size_t
   );
   pragma import (C,recalloc,"_recalloc");
   procedure aligned_free(
      Block : access Void
   );
   pragma import (C,aligned_free,"_aligned_free");
   procedure aligned_malloc(
      Size_x : size_t;
      Alignment : size_t
   );
   pragma import (C,aligned_malloc,"_aligned_malloc");
   procedure aligned_offset_malloc(
      Size_x : size_t;
      Alignment : size_t;
      Offset : size_t
   );
   pragma import (C,aligned_offset_malloc,"_aligned_offset_malloc");
   function aligned_msize(
      Block : access Void;
      Alignment : size_t;
      Offset : size_t
   ) return size_t;
   pragma import (C,aligned_msize,"_aligned_msize");
   procedure aligned_offset_realloc(
      Block : access Void;
      Size_x : size_t;
      Alignment : size_t;
      Offset : size_t
   );
   pragma import (C,aligned_offset_realloc,"_aligned_offset_realloc");
   procedure aligned_offset_recalloc(
      Block : access Void;
      Count : size_t;
      Size_x : size_t;
      Alignment : size_t;
      Offset : size_t
   );
   pragma import (C,aligned_offset_recalloc,"_aligned_offset_recalloc");
   procedure aligned_realloc(
      Block : access Void;
      Size_x : size_t;
      Alignment : size_t
   );
   pragma import (C,aligned_realloc,"_aligned_realloc");
   procedure aligned_recalloc(
      Block : access Void;
      Count : size_t;
      Size_x : size_t;
      Alignment : size_t
   );
   pragma import (C,aligned_recalloc,"_aligned_recalloc");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\stddef.h>
   subtype nullptr_t is System.Address; -- [FIXME - CXType_Unexposed]
   function threadid return Interfaces.C.unsigned_long;
   pragma import (C,threadid,"__threadid");
   function threadhandle return uintptr_t;
   pragma import (C,threadhandle,"__threadhandle");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_search.h>
   subtype CoreCrtSecureSearchSortCompareFunction_x is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (void *, const void *, const void *)
   subtype CoreCrtNonSecureSearchSortCompareFunction_x is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (const void *, const void *)
   procedure bsearch_s(
      Key : access Void;
      Base : access Void;
      NumOfElements : rsize_t;
      SizeOfElements : rsize_t;
      CompareFunction : CoreCrtSecureSearchSortCompareFunction_x;
      Context_x : access Void
   );
   pragma import (C,bsearch_s,"bsearch_s");
   procedure qsort_s(
      Base : access Void;
      NumOfElements : rsize_t;
      SizeOfElements : rsize_t;
      CompareFunction : CoreCrtSecureSearchSortCompareFunction_x;
      Context_x : access Void
   );
   pragma import (C,qsort_s,"qsort_s");
   procedure bsearch(
      Key : access Void;
      Base : access Void;
      NumOfElements : size_t;
      SizeOfElements : size_t;
      CompareFunction : CoreCrtNonSecureSearchSortCompareFunction_x
   );
   pragma import (C,bsearch,"bsearch");
   procedure qsort(
      Base : access Void;
      NumOfElements : size_t;
      SizeOfElements : size_t;
      CompareFunction : CoreCrtNonSecureSearchSortCompareFunction_x
   );
   pragma import (C,qsort,"qsort");
   procedure lfind_s(
      Key : access Void;
      Base : access Void;
      NumOfElements : access Interfaces.C.unsigned;
      SizeOfElements : size_t;
      CompareFunction : CoreCrtSecureSearchSortCompareFunction_x;
      Context_x : access Void
   );
   pragma import (C,lfind_s,"_lfind_s");
   procedure lfind(
      Key : access Void;
      Base : access Void;
      NumOfElements : access Interfaces.C.unsigned;
      SizeOfElements : Interfaces.C.unsigned;
      CompareFunction : CoreCrtNonSecureSearchSortCompareFunction_x
   );
   pragma import (C,lfind,"_lfind");
   procedure lsearch_s(
      Key : access Void;
      Base : access Void;
      NumOfElements : access Interfaces.C.unsigned;
      SizeOfElements : size_t;
      CompareFunction : CoreCrtSecureSearchSortCompareFunction_x;
      Context_x : access Void
   );
   pragma import (C,lsearch_s,"_lsearch_s");
   procedure lsearch(
      Key : access Void;
      Base : access Void;
      NumOfElements : access Interfaces.C.unsigned;
      SizeOfElements : Interfaces.C.unsigned;
      CompareFunction : CoreCrtNonSecureSearchSortCompareFunction_x
   );
   pragma import (C,lsearch,"_lsearch");
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\corecrt_wstdlib.h>
   function itow_s(
      Value : Interfaces.C.Int;
      Buffer : access Wide_Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,itow_s,"_itow_s");
   function ltow_s(
      Value : Interfaces.C.Long;
      Buffer : access Wide_Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ltow_s,"_ltow_s");
   function ultow_s(
      Value : Interfaces.C.unsigned_long;
      Buffer : access Wide_Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ultow_s,"_ultow_s");
   function wcstod(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr
   ) return Long_Float;
   pragma import (C,wcstod,"wcstod");
   function wcstod_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Locale : locale_t_x
   ) return Long_Float;
   pragma import (C,wcstod_l,"_wcstod_l");
   function wcstol(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Long;
   pragma import (C,wcstol,"wcstol");
   function wcstol_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Long;
   pragma import (C,wcstol_l,"_wcstol_l");
   function wcstoll(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wcstoll,"wcstoll");
   function wcstoll_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wcstoll_l,"_wcstoll_l");
   function wcstoul(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.unsigned_long;
   pragma import (C,wcstoul,"wcstoul");
   function wcstoul_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.unsigned_long;
   pragma import (C,wcstoul_l,"_wcstoul_l");
   function wcstoull(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,wcstoull,"wcstoull");
   function wcstoull_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,wcstoull_l,"_wcstoull_l");
   function wcstold(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr
   ) return Long_Long_Float;
   pragma import (C,wcstold,"wcstold");
   function wcstold_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Locale : locale_t_x
   ) return Long_Long_Float;
   pragma import (C,wcstold_l,"_wcstold_l");
   function wcstof(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr
   ) return Standard.Float;
   pragma import (C,wcstof,"wcstof");
   function wcstof_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Locale : locale_t_x
   ) return Standard.Float;
   pragma import (C,wcstof_l,"_wcstof_l");
   function wtof(
      String : access Wide_Character
   ) return Long_Float;
   pragma import (C,wtof,"_wtof");
   function wtof_l(
      String : access Wide_Character;
      Locale : locale_t_x
   ) return Long_Float;
   pragma import (C,wtof_l,"_wtof_l");
   function wtoi(
      String : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wtoi,"_wtoi");
   function wtoi_l(
      String : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wtoi_l,"_wtoi_l");
   function wtol(
      String : access Wide_Character
   ) return Interfaces.C.Long;
   pragma import (C,wtol,"_wtol");
   function wtol_l(
      String : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Long;
   pragma import (C,wtol_l,"_wtol_l");
   function wtoll(
      String : access Wide_Character
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wtoll,"_wtoll");
   function wtoll_l(
      String : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wtoll_l,"_wtoll_l");
   function i64tow_s(
      Value : Interfaces.C.Extensions.long_long;
      Buffer : access Wide_Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,i64tow_s,"_i64tow_s");
   function ui64tow_s(
      Value : Interfaces.C.Extensions.unsigned_long_long;
      Buffer : access Wide_Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ui64tow_s,"_ui64tow_s");
   function wtoi64(
      String : access Wide_Character
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wtoi64,"_wtoi64");
   function wtoi64_l(
      String : access Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wtoi64_l,"_wtoi64_l");
   function wcstoi64(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wcstoi64,"_wcstoi64");
   function wcstoi64_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,wcstoi64_l,"_wcstoi64_l");
   function wcstoui64(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,wcstoui64,"_wcstoui64");
   function wcstoui64_l(
      String : access Wide_Character;
      EndPtr : access Wide_Character_Ptr;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,wcstoui64_l,"_wcstoui64_l");
   function wmakepath_s(
      Buffer : access Wide_Character;
      BufferCount : size_t;
      Drive : access Wide_Character;
      Dir : access Wide_Character;
      Filename : access Wide_Character;
      Ext : access Wide_Character
   ) return errno_t;
   pragma import (C,wmakepath_s,"_wmakepath_s");
   procedure wmakepath(
      Buffer : access Wide_Character;
      Drive : access Wide_Character;
      Dir : access Wide_Character;
      Filename : access Wide_Character;
      Ext : access Wide_Character
   );
   pragma import (C,wmakepath,"_wmakepath");
   procedure wperror(
      ErrorMessage : access Wide_Character
   );
   pragma import (C,wperror,"_wperror");
   procedure wsplitpath(
      FullPath : access Wide_Character;
      Drive : access Wide_Character;
      Dir : access Wide_Character;
      Filename : access Wide_Character;
      Ext : access Wide_Character
   );
   pragma import (C,wsplitpath,"_wsplitpath");
   function wsplitpath_s(
      FullPath : access Wide_Character;
      Drive : access Wide_Character;
      DriveCount : size_t;
      Dir : access Wide_Character;
      DirCount : size_t;
      Filename : access Wide_Character;
      FilenameCount : size_t;
      Ext : access Wide_Character;
      ExtCount : size_t
   ) return errno_t;
   pragma import (C,wsplitpath_s,"_wsplitpath_s");
   function wdupenv_s(
      Buffer : access Wide_Character_Ptr;
      BufferCount : access size_t;
      VarName : access Wide_Character
   ) return errno_t;
   pragma import (C,wdupenv_s,"_wdupenv_s");
   function wgetenv_s(
      RequiredCount : access size_t;
      Buffer : access Wide_Character;
      BufferCount : size_t;
      VarName : access Wide_Character
   ) return errno_t;
   pragma import (C,wgetenv_s,"_wgetenv_s");
   function wputenv(
      EnvString : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wputenv,"_wputenv");
   function wputenv_s(
      Name : access Wide_Character;
      Value : access Wide_Character
   ) return errno_t;
   pragma import (C,wputenv_s,"_wputenv_s");
   function wsearchenv_s(
      Filename : access Wide_Character;
      VarName : access Wide_Character;
      Buffer : access Wide_Character;
      BufferCount : size_t
   ) return errno_t;
   pragma import (C,wsearchenv_s,"_wsearchenv_s");
   procedure wsearchenv(
      Filename : access Wide_Character;
      VarName : access Wide_Character;
      ResultPath : access Wide_Character
   );
   pragma import (C,wsearchenv,"_wsearchenv");
   function wsystem(
      Command : access Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wsystem,"_wsystem");
   -- #include <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\include\limits.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\stdlib.h>
   procedure swab(
      Buf1 : access Character;
      Buf2 : access Character;
      SizeInBytes : Interfaces.C.Int
   );
   pragma import (C,swab,"_swab");
   procedure exit_x(
      Code : Interfaces.C.Int
   );
   pragma import (C,exit_x,"exit");
   procedure quick_exit(
      Code : Interfaces.C.Int
   );
   pragma import (C,quick_exit,"quick_exit");
   procedure abort_x;
   pragma import (C,abort_x,"abort");
   function set_abort_behavior(
      Flags : Interfaces.C.unsigned;
      Mask : Interfaces.C.unsigned
   ) return Interfaces.C.unsigned;
   pragma import (C,set_abort_behavior,"_set_abort_behavior");
   subtype onexit_t_x is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int ()
   function atexit(
      param1 : access System.Address
   ) return Interfaces.C.Int;
   pragma import (C,atexit,"atexit");
   function onexit(
      Func : onexit_t_x
   ) return onexit_t_x;
   pragma import (C,onexit,"_onexit");
   function at_quick_exit(
      param1 : access System.Address
   ) return Interfaces.C.Int;
   pragma import (C,at_quick_exit,"at_quick_exit");
   subtype purecall_handler_x is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void ()
   subtype invalid_parameter_handler_x is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)
   function set_purecall_handler(
      Handler : purecall_handler_x
   ) return purecall_handler_x;
   pragma import (C,set_purecall_handler,"_set_purecall_handler");
   function get_purecall_handler return purecall_handler_x;
   pragma import (C,get_purecall_handler,"_get_purecall_handler");
   function set_invalid_parameter_handler(
      Handler : invalid_parameter_handler_x
   ) return invalid_parameter_handler_x;
   pragma import (C,set_invalid_parameter_handler,"_set_invalid_parameter_handler");
   function get_invalid_parameter_handler return invalid_parameter_handler_x;
   pragma import (C,get_invalid_parameter_handler,"_get_invalid_parameter_handler");
   function set_thread_local_invalid_parameter_handler(
      Handler : invalid_parameter_handler_x
   ) return invalid_parameter_handler_x;
   pragma import (C,set_thread_local_invalid_parameter_handler,"_set_thread_local_invalid_parameter_handler");
   function get_thread_local_invalid_parameter_handler return invalid_parameter_handler_x;
   pragma import (C,get_thread_local_invalid_parameter_handler,"_get_thread_local_invalid_parameter_handler");
   function set_error_mode(
      Mode : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,set_error_mode,"_set_error_mode");
   -- function sys_errlist return char **;
   function sys_nerr return PINT;
   pragma import (C,sys_nerr,"__sys_nerr");
   procedure perror(
      ErrMsg : access Character
   );
   pragma import (C,perror,"perror");
   -- function p_pgmptr return char **;
   -- function p_wpgmptr return wchar_t **;
   function p_fmode return PINT;
   pragma import (C,p_fmode,"__p__fmode");
   function get_pgmptr(
      Value : access va_list
   ) return errno_t;
   pragma import (C,get_pgmptr,"_get_pgmptr");
   function get_wpgmptr(
      Value : access Wide_Character_Ptr
   ) return errno_t;
   pragma import (C,get_wpgmptr,"_get_wpgmptr");
   function set_fmode(
      Mode : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,set_fmode,"_set_fmode");
   function get_fmode(
      PMode : access Interfaces.C.Int
   ) return errno_t;
   pragma import (C,get_fmode,"_get_fmode");
   type div_t_x is record
      quot : Interfaces.C.Int;
      rem_x : Interfaces.C.Int;
   end record;
   subtype div_t is div_t_x; -- CXType_Elaborated
   type ldiv_t_x is record
      quot : Interfaces.C.Long;
      rem_x : Interfaces.C.Long;
   end record;
   subtype ldiv_t is ldiv_t_x; -- CXType_Elaborated
   type lldiv_t_x is record
      quot : Interfaces.C.Extensions.long_long;
      rem_x : Interfaces.C.Extensions.long_long;
   end record;
   subtype lldiv_t is lldiv_t_x; -- CXType_Elaborated
   function abs_x(
      Number : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,abs_x,"abs");
   function labs(
      Number : Interfaces.C.Long
   ) return Interfaces.C.Long;
   pragma import (C,labs,"labs");
   function llabs(
      Number : Interfaces.C.Extensions.long_long
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,llabs,"llabs");
   function abs64(
      Number : Interfaces.C.Extensions.long_long
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,abs64,"_abs64");
   function byteswap_ushort(
      Number : Interfaces.C.unsigned_short
   ) return Interfaces.C.unsigned_short;
   pragma import (C,byteswap_ushort,"_byteswap_ushort");
   function byteswap_ulong(
      Number : Interfaces.C.unsigned_long
   ) return Interfaces.C.unsigned_long;
   pragma import (C,byteswap_ulong,"_byteswap_ulong");
   function byteswap_uint64(
      Number : Interfaces.C.Extensions.unsigned_long_long
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,byteswap_uint64,"_byteswap_uint64");
   function div(
      Numerator : Interfaces.C.Int;
      Denominator : Interfaces.C.Int
   ) return div_t;
   pragma import (C,div,"div");
   function ldiv(
      Numerator : Interfaces.C.Long;
      Denominator : Interfaces.C.Long
   ) return ldiv_t;
   pragma import (C,ldiv,"ldiv");
   function lldiv(
      Numerator : Interfaces.C.Extensions.long_long;
      Denominator : Interfaces.C.Extensions.long_long
   ) return lldiv_t;
   pragma import (C,lldiv,"lldiv");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\stdlib.h>
   function lrotl(
      Value : Interfaces.C.unsigned_long;
      Shift : Interfaces.C.Int
   ) return Interfaces.C.unsigned_long;
   pragma import (C,lrotl,"_lrotl");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\stdlib.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\stdlib.h>
   function lrotr(
      Value : Interfaces.C.unsigned_long;
      Shift : Interfaces.C.Int
   ) return Interfaces.C.unsigned_long;
   pragma import (C,lrotr,"_lrotr");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winnt.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\ucrt\stdlib.h>
   procedure srand(
      Seed : Interfaces.C.unsigned
   );
   pragma import (C,srand,"srand");
   function rand return Interfaces.C.Int;
   pragma import (C,rand,"rand");
   type LDOUBLE_x is record
      ld : Void;
   end record;
   type CRT_DOUBLE_x is record
      x : Long_Float;
   end record;
   type CRT_FLOAT_x is record
      f : Standard.Float;
   end record;
   type LONGDOUBLE_x is record
      x : Long_Long_Float;
   end record;
   type LDBL12_x is record
      ld12 : Void;
   end record;
   function atof(
      String : access Character
   ) return Long_Float;
   pragma import (C,atof,"atof");
   function atoi(
      String : access Character
   ) return Interfaces.C.Int;
   pragma import (C,atoi,"atoi");
   function atol(
      String : access Character
   ) return Interfaces.C.Long;
   pragma import (C,atol,"atol");
   function atoll(
      String : access Character
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,atoll,"atoll");
   function atoi64(
      String : access Character
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,atoi64,"_atoi64");
   function atof_l(
      String : access Character;
      Locale : locale_t_x
   ) return Long_Float;
   pragma import (C,atof_l,"_atof_l");
   function atoi_l(
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,atoi_l,"_atoi_l");
   function atol_l(
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Long;
   pragma import (C,atol_l,"_atol_l");
   function atoll_l(
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,atoll_l,"_atoll_l");
   function atoi64_l(
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,atoi64_l,"_atoi64_l");
   function atoflt(
      Result : access CRT_FLOAT_x;
      String : access Character
   ) return Interfaces.C.Int;
   pragma import (C,atoflt,"_atoflt");
   function atodbl(
      Result : access CRT_DOUBLE_x;
      String : access Character
   ) return Interfaces.C.Int;
   pragma import (C,atodbl,"_atodbl");
   function atoldbl(
      Result : access LDOUBLE_x;
      String : access Character
   ) return Interfaces.C.Int;
   pragma import (C,atoldbl,"_atoldbl");
   function atoflt_l(
      Result : access CRT_FLOAT_x;
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,atoflt_l,"_atoflt_l");
   function atodbl_l(
      Result : access CRT_DOUBLE_x;
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,atodbl_l,"_atodbl_l");
   function atoldbl_l(
      Result : access LDOUBLE_x;
      String : access Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,atoldbl_l,"_atoldbl_l");
   function strtof(
      String : access Character;
      EndPtr : access va_list
   ) return Standard.Float;
   pragma import (C,strtof,"strtof");
   function strtof_l(
      String : access Character;
      EndPtr : access va_list;
      Locale : locale_t_x
   ) return Standard.Float;
   pragma import (C,strtof_l,"_strtof_l");
   function strtod(
      String : access Character;
      EndPtr : access va_list
   ) return Long_Float;
   pragma import (C,strtod,"strtod");
   function strtod_l(
      String : access Character;
      EndPtr : access va_list;
      Locale : locale_t_x
   ) return Long_Float;
   pragma import (C,strtod_l,"_strtod_l");
   function strtold(
      String : access Character;
      EndPtr : access va_list
   ) return Long_Long_Float;
   pragma import (C,strtold,"strtold");
   function strtold_l(
      String : access Character;
      EndPtr : access va_list;
      Locale : locale_t_x
   ) return Long_Long_Float;
   pragma import (C,strtold_l,"_strtold_l");
   function strtol(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Long;
   pragma import (C,strtol,"strtol");
   function strtol_l(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Long;
   pragma import (C,strtol_l,"_strtol_l");
   function strtoll(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,strtoll,"strtoll");
   function strtoll_l(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,strtoll_l,"_strtoll_l");
   function strtoul(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.unsigned_long;
   pragma import (C,strtoul,"strtoul");
   function strtoul_l(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.unsigned_long;
   pragma import (C,strtoul_l,"_strtoul_l");
   function strtoull(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,strtoull,"strtoull");
   function strtoull_l(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,strtoull_l,"_strtoull_l");
   function strtoi64(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,strtoi64,"_strtoi64");
   function strtoi64_l(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.long_long;
   pragma import (C,strtoi64_l,"_strtoi64_l");
   function strtoui64(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,strtoui64,"_strtoui64");
   function strtoui64_l(
      String : access Character;
      EndPtr : access va_list;
      Radix : Interfaces.C.Int;
      Locale : locale_t_x
   ) return Interfaces.C.Extensions.unsigned_long_long;
   pragma import (C,strtoui64_l,"_strtoui64_l");
   function itoa_s(
      Value : Interfaces.C.Int;
      Buffer : access Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,itoa_s,"_itoa_s");
   function ltoa_s(
      Value : Interfaces.C.Long;
      Buffer : access Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ltoa_s,"_ltoa_s");
   function ultoa_s(
      Value : Interfaces.C.unsigned_long;
      Buffer : access Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ultoa_s,"_ultoa_s");
   function i64toa_s(
      Value : Interfaces.C.Extensions.long_long;
      Buffer : access Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,i64toa_s,"_i64toa_s");
   function ui64toa_s(
      Value : Interfaces.C.Extensions.unsigned_long_long;
      Buffer : access Character;
      BufferCount : size_t;
      Radix : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ui64toa_s,"_ui64toa_s");
   function ecvt_s(
      Buffer : access Character;
      BufferCount : size_t;
      Value : Long_Float;
      DigitCount : Interfaces.C.Int;
      PtDec : access Interfaces.C.Int;
      PtSign : access Interfaces.C.Int
   ) return errno_t;
   pragma import (C,ecvt_s,"_ecvt_s");
   function fcvt_s(
      Buffer : access Character;
      BufferCount : size_t;
      Value : Long_Float;
      FractionalDigitCount : Interfaces.C.Int;
      PtDec : access Interfaces.C.Int;
      PtSign : access Interfaces.C.Int
   ) return errno_t;
   pragma import (C,fcvt_s,"_fcvt_s");
   function gcvt_s(
      Buffer : access Character;
      BufferCount : size_t;
      Value : Long_Float;
      DigitCount : Interfaces.C.Int
   ) return errno_t;
   pragma import (C,gcvt_s,"_gcvt_s");
   function mblen(
      Ch : access Character;
      MaxCount : size_t
   ) return Interfaces.C.Int;
   pragma import (C,mblen,"mblen");
   function mblen_l(
      Ch : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,mblen_l,"_mblen_l");
   function mbstrlen(
      String : access Character
   ) return size_t;
   pragma import (C,mbstrlen,"_mbstrlen");
   function mbstrlen_l(
      String : access Character;
      Locale : locale_t_x
   ) return size_t;
   pragma import (C,mbstrlen_l,"_mbstrlen_l");
   function mbstrnlen(
      String : access Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,mbstrnlen,"_mbstrnlen");
   function mbstrnlen_l(
      String : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return size_t;
   pragma import (C,mbstrnlen_l,"_mbstrnlen_l");
   function mbtowc(
      DstCh : access Wide_Character;
      SrcCh : access Character;
      SrcSizeInBytes : size_t
   ) return Interfaces.C.Int;
   pragma import (C,mbtowc,"mbtowc");
   function mbtowc_l(
      DstCh : access Wide_Character;
      SrcCh : access Character;
      SrcSizeInBytes : size_t;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,mbtowc_l,"_mbtowc_l");
   function mbstowcs_s(
      PtNumOfCharConverted : access size_t;
      DstBuf : access Wide_Character;
      SizeInWords : size_t;
      SrcBuf : access Character;
      MaxCount : size_t
   ) return errno_t;
   pragma import (C,mbstowcs_s,"mbstowcs_s");
   function mbstowcs(
      Dest : access Wide_Character;
      Source : access Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,mbstowcs,"mbstowcs");
   function mbstowcs_s_l(
      PtNumOfCharConverted : access size_t;
      DstBuf : access Wide_Character;
      SizeInWords : size_t;
      SrcBuf : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,mbstowcs_s_l,"_mbstowcs_s_l");
   function mbstowcs_l(
      Dest : access Wide_Character;
      Source : access Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return size_t;
   pragma import (C,mbstowcs_l,"_mbstowcs_l");
   function wctomb(
      MbCh : access Character;
      WCh : Wide_Character
   ) return Interfaces.C.Int;
   pragma import (C,wctomb,"wctomb");
   function wctomb_l(
      MbCh : access Character;
      WCh : Wide_Character;
      Locale : locale_t_x
   ) return Interfaces.C.Int;
   pragma import (C,wctomb_l,"_wctomb_l");
   function wctomb_s(
      SizeConverted : access Interfaces.C.Int;
      MbCh : access Character;
      SizeInBytes : rsize_t;
      WCh : Wide_Character
   ) return errno_t;
   pragma import (C,wctomb_s,"wctomb_s");
   function wctomb_s_l(
      SizeConverted : access Interfaces.C.Int;
      MbCh : access Character;
      SizeInBytes : size_t;
      WCh : Wide_Character;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,wctomb_s_l,"_wctomb_s_l");
   function wcstombs_s(
      PtNumOfCharConverted : access size_t;
      Dst : access Character;
      DstSizeInBytes : size_t;
      Src : access Wide_Character;
      MaxCountInBytes : size_t
   ) return errno_t;
   pragma import (C,wcstombs_s,"wcstombs_s");
   function wcstombs(
      Dest : access Character;
      Source : access Wide_Character;
      MaxCount : size_t
   ) return size_t;
   pragma import (C,wcstombs,"wcstombs");
   function wcstombs_s_l(
      PtNumOfCharConverted : access size_t;
      Dst : access Character;
      DstSizeInBytes : size_t;
      Src : access Wide_Character;
      MaxCountInBytes : size_t;
      Locale : locale_t_x
   ) return errno_t;
   pragma import (C,wcstombs_s_l,"_wcstombs_s_l");
   function wcstombs_l(
      Dest : access Character;
      Source : access Wide_Character;
      MaxCount : size_t;
      Locale : locale_t_x
   ) return size_t;
   pragma import (C,wcstombs_l,"_wcstombs_l");
   function makepath_s(
      Buffer : access Character;
      BufferCount : size_t;
      Drive : access Character;
      Dir : access Character;
      Filename : access Character;
      Ext : access Character
   ) return errno_t;
   pragma import (C,makepath_s,"_makepath_s");
   procedure makepath(
      Buffer : access Character;
      Drive : access Character;
      Dir : access Character;
      Filename : access Character;
      Ext : access Character
   );
   pragma import (C,makepath,"_makepath");
   procedure splitpath(
      FullPath : access Character;
      Drive : access Character;
      Dir : access Character;
      Filename : access Character;
      Ext : access Character
   );
   pragma import (C,splitpath,"_splitpath");
   function splitpath_s(
      FullPath : access Character;
      Drive : access Character;
      DriveCount : size_t;
      Dir : access Character;
      DirCount : size_t;
      Filename : access Character;
      FilenameCount : size_t;
      Ext : access Character;
      ExtCount : size_t
   ) return errno_t;
   pragma import (C,splitpath_s,"_splitpath_s");
   function getenv_s(
      RequiredCount : access size_t;
      Buffer : access Character;
      BufferCount : rsize_t;
      VarName : access Character
   ) return errno_t;
   pragma import (C,getenv_s,"getenv_s");
   function p_argc return PINT;
   pragma import (C,p_argc,"__p___argc");
   -- function p_argv return char ***;
   -- function p_wargv return wchar_t ***;
   -- function p_environ return char ***;
   -- function p_wenviron return wchar_t ***;
   function dupenv_s(
      Buffer : access va_list;
      BufferCount : access size_t;
      VarName : access Character
   ) return errno_t;
   pragma import (C,dupenv_s,"_dupenv_s");
   function system_x(
      Command : access Character
   ) return Interfaces.C.Int;
   pragma import (C,system_x,"system");
   function putenv(
      EnvString : access Character
   ) return Interfaces.C.Int;
   pragma import (C,putenv,"_putenv");
   function putenv_s(
      Name : access Character;
      Value : access Character
   ) return errno_t;
   pragma import (C,putenv_s,"_putenv_s");
   function searchenv_s(
      Filename : access Character;
      VarName : access Character;
      Buffer : access Character;
      BufferCount : size_t
   ) return errno_t;
   pragma import (C,searchenv_s,"_searchenv_s");
   procedure searchenv(
      Filename : access Character;
      VarName : access Character;
      Buffer : access Character
   );
   pragma import (C,searchenv,"_searchenv");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\combaseapi.h>
   type tagREGCLS is (
      REGCLS_SINGLEUSE,
      REGCLS_MULTIPLEUSE,
      REGCLS_MULTI_SEPARATE,
      REGCLS_SUSPENDED,
      REGCLS_SURROGATE,
      REGCLS_AGILE
   );
   for tagREGCLS use (
      REGCLS_SINGLEUSE => 0,
      REGCLS_MULTIPLEUSE => 1,
      REGCLS_MULTI_SEPARATE => 2,
      REGCLS_SUSPENDED => 4,
      REGCLS_SURROGATE => 8,
      REGCLS_AGILE => 16
   );
   for tagREGCLS'Size use 32;
   subtype REGCLS is tagREGCLS; -- CXType_Elaborated
   type tagCOINITBASE is (
      COINITBASE_MULTITHREADED
   );
   for tagCOINITBASE use (
      COINITBASE_MULTITHREADED => 0
   );
   for tagCOINITBASE'Size use 32;
   subtype COINITBASE is tagCOINITBASE; -- CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/unknwnbase.h>
   type IUnknown; -- Forward Declaration
   type AsyncIUnknown; -- Forward Declaration
   type IClassFactory; -- Forward Declaration
   type LPUNKNOWN is access IUnknown; -- CXType_Pointer - CXType_Typedef
   type IUnknown_Interface is interface;
      function QueryInterface(
         This : access IUnknown_Interface;
         riid : access constant IID;
         ppvObject : access LPVOID
      ) return HRESULT is abstract;
      function AddRef(This : access IUnknown_Interface) return ULONG is abstract;
      function Release(This : access IUnknown_Interface) return ULONG is abstract;
   type IUnknown is access IUnknown_Interface'Class;
   type IUnknown_Ptr is access IUnknown;
   function IUnknown_QueryInterface_Proxy(
      This : access IUnknown;
      riid : access constant IID;
      ppvObject : access LPVOID
   ) return HRESULT;
   pragma import (C,IUnknown_QueryInterface_Proxy,"IUnknown_QueryInterface_Proxy");
   procedure IUnknown_QueryInterface_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IUnknown_QueryInterface_Stub,"IUnknown_QueryInterface_Stub");
   function IUnknown_AddRef_Proxy(
      This : access IUnknown
   ) return ULONG;
   pragma import (C,IUnknown_AddRef_Proxy,"IUnknown_AddRef_Proxy");
   procedure IUnknown_AddRef_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IUnknown_AddRef_Stub,"IUnknown_AddRef_Stub");
   function IUnknown_Release_Proxy(
      This : access IUnknown
   ) return ULONG;
   pragma import (C,IUnknown_Release_Proxy,"IUnknown_Release_Proxy");
   procedure IUnknown_Release_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IUnknown_Release_Stub,"IUnknown_Release_Stub");
   type AsyncIUnknown_Interface is interface and IUnknown_Interface;
      function Begin_QueryInterface(
         This : access AsyncIUnknown_Interface;
         riid : access constant IID
      ) return HRESULT is abstract;
      function Finish_QueryInterface(
         This : access AsyncIUnknown_Interface;
         ppvObject : access LPVOID
      ) return HRESULT is abstract;
      function Begin_AddRef(This : access AsyncIUnknown_Interface) return HRESULT is abstract;
      function Finish_AddRef(This : access AsyncIUnknown_Interface) return ULONG is abstract;
      function Begin_Release(This : access AsyncIUnknown_Interface) return HRESULT is abstract;
      function Finish_Release(This : access AsyncIUnknown_Interface) return ULONG is abstract;
   type AsyncIUnknown is access AsyncIUnknown_Interface'Class;
   type AsyncIUnknown_Ptr is access AsyncIUnknown;
   type LPCLASSFACTORY is access IClassFactory; -- CXType_Pointer - CXType_Typedef
   type IClassFactory_Interface is interface and IUnknown_Interface;
      function CreateInstance(
         This : access IClassFactory_Interface;
         pUnkOuter : access Void;
         riid : access constant IID;
         ppvObject : access LPVOID
      ) return HRESULT is abstract;
      function LockServer(
         This : access IClassFactory_Interface;
         fLock : BOOL
      ) return HRESULT is abstract;
   type IClassFactory is access IClassFactory_Interface'Class;
   type IClassFactory_Ptr is access IClassFactory;
   function IClassFactory_RemoteCreateInstance_Proxy(
      This : access IClassFactory;
      riid : access constant IID;
      ppvObject : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IClassFactory_RemoteCreateInstance_Proxy,"IClassFactory_RemoteCreateInstance_Proxy");
   procedure IClassFactory_RemoteCreateInstance_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IClassFactory_RemoteCreateInstance_Stub,"IClassFactory_RemoteCreateInstance_Stub");
   function IClassFactory_RemoteLockServer_Proxy(
      This : access IClassFactory;
      fLock : BOOL
   ) return HRESULT;
   pragma import (C,IClassFactory_RemoteLockServer_Proxy,"IClassFactory_RemoteLockServer_Proxy");
   procedure IClassFactory_RemoteLockServer_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IClassFactory_RemoteLockServer_Stub,"IClassFactory_RemoteLockServer_Stub");
   function IClassFactory_CreateInstance_Proxy(
      This : access IClassFactory;
      pUnkOuter : access IUnknown;
      riid : access constant IID;
      ppvObject : access LPVOID
   ) return HRESULT;
   pragma import (C,IClassFactory_CreateInstance_Proxy,"IClassFactory_CreateInstance_Proxy");
   function IClassFactory_CreateInstance_Stub(
      This : access IClassFactory;
      riid : access constant IID;
      ppvObject : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IClassFactory_CreateInstance_Stub,"IClassFactory_CreateInstance_Stub");
   function IClassFactory_LockServer_Proxy(
      This : access IClassFactory;
      fLock : BOOL
   ) return HRESULT;
   pragma import (C,IClassFactory_LockServer_Proxy,"IClassFactory_LockServer_Proxy");
   function IClassFactory_LockServer_Stub(
      This : access IClassFactory;
      fLock : BOOL
   ) return HRESULT;
   pragma import (C,IClassFactory_LockServer_Stub,"IClassFactory_LockServer_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\combaseapi.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\objidlbase.h>
   type IMarshal; -- Forward Declaration
   type INoMarshal; -- Forward Declaration
   type IAgileObject; -- Forward Declaration
   type IActivationFilter; -- Forward Declaration
   type IMarshal2; -- Forward Declaration
   type IMalloc; -- Forward Declaration
   type IStdMarshalInfo; -- Forward Declaration
   type IExternalConnection; -- Forward Declaration
   type IMultiQI; -- Forward Declaration
   type AsyncIMultiQI; -- Forward Declaration
   type IInternalUnknown; -- Forward Declaration
   type IEnumUnknown; -- Forward Declaration
   type IEnumString; -- Forward Declaration
   type ISequentialStream; -- Forward Declaration
   type IStream; -- Forward Declaration
   type IRpcChannelBuffer2; -- Forward Declaration
   type IAsyncRpcChannelBuffer; -- Forward Declaration
   type IRpcChannelBuffer3; -- Forward Declaration
   type IRpcSyntaxNegotiate; -- Forward Declaration
   type IRpcProxyBuffer; -- Forward Declaration
   type IPSFactoryBuffer; -- Forward Declaration
   type IChannelHook; -- Forward Declaration
   type IClientSecurity; -- Forward Declaration
   type IServerSecurity; -- Forward Declaration
   type IRpcOptions; -- Forward Declaration
   type IGlobalOptions; -- Forward Declaration
   type ISurrogate; -- Forward Declaration
   type IGlobalInterfaceTable; -- Forward Declaration
   type ISynchronize; -- Forward Declaration
   type ISynchronizeHandle; -- Forward Declaration
   type ISynchronizeEvent; -- Forward Declaration
   type ISynchronizeContainer; -- Forward Declaration
   type ISynchronizeMutex; -- Forward Declaration
   type ICancelMethodCalls; -- Forward Declaration
   type IAsyncManager; -- Forward Declaration
   type ICallFactory; -- Forward Declaration
   type IRpcHelper; -- Forward Declaration
   type IReleaseMarshalBuffers; -- Forward Declaration
   type IWaitMultiple; -- Forward Declaration
   type IAddrTrackingControl; -- Forward Declaration
   type IAddrExclusionControl; -- Forward Declaration
   type IPipeByte; -- Forward Declaration
   type AsyncIPipeByte; -- Forward Declaration
   type IPipeLong; -- Forward Declaration
   type AsyncIPipeLong; -- Forward Declaration
   type IPipeDouble; -- Forward Declaration
   type AsyncIPipeDouble; -- Forward Declaration
   type IEnumContextProps; -- Forward Declaration
   type IContext; -- Forward Declaration
   type IObjContext; -- Forward Declaration
   type IComThreadingInfo; -- Forward Declaration
   type IProcessInitControl; -- Forward Declaration
   type IFastRundown; -- Forward Declaration
   type IMarshalingStream; -- Forward Declaration
   type IAgileReference; -- Forward Declaration
   type COSERVERINFO_x is record
      dwReserved1 : DWORD;
      pwszName : LPWSTR;
      pAuthInfo : access COAUTHINFO;
      dwReserved2 : DWORD;
   end record;
   subtype COSERVERINFO is COSERVERINFO_x; -- CXType_Elaborated
   type LPMARSHAL is access IMarshal; -- CXType_Pointer - CXType_Typedef
   type IMarshal_Interface is interface and IUnknown_Interface;
      function GetUnmarshalClass(
         This : access IMarshal_Interface;
         riid : access constant IID;
         pv : access Void;
         dwDestContext : DWORD;
         pvDestContext : access Void;
         mshlflags_x : DWORD;
         pCid : access CLSID
      ) return HRESULT is abstract;
      function GetMarshalSizeMax(
         This : access IMarshal_Interface;
         riid : access constant IID;
         pv : access Void;
         dwDestContext : DWORD;
         pvDestContext : access Void;
         mshlflags_x : DWORD;
         pSize_x : access DWORD
      ) return HRESULT is abstract;
      function MarshalInterface(
         This : access IMarshal_Interface;
         pStm : access IStream;
         riid : access constant IID;
         pv : access Void;
         dwDestContext : DWORD;
         pvDestContext : access Void;
         mshlflags_x : DWORD
      ) return HRESULT is abstract;
      function UnmarshalInterface(
         This : access IMarshal_Interface;
         pStm : access IStream;
         riid : access constant IID;
         ppv : access LPVOID
      ) return HRESULT is abstract;
      function ReleaseMarshalData(
         This : access IMarshal_Interface;
         pStm : access IStream
      ) return HRESULT is abstract;
      function DisconnectObject(
         This : access IMarshal_Interface;
         dwReserved : DWORD
      ) return HRESULT is abstract;
   type IMarshal is access IMarshal_Interface'Class;
   type IMarshal_Ptr is access IMarshal;
   type tagACTIVATIONTYPE is (
      ACTIVATIONTYPE_UNCATEGORIZED,
      ACTIVATIONTYPE_FROM_MONIKER,
      ACTIVATIONTYPE_FROM_DATA,
      ACTIVATIONTYPE_FROM_STORAGE,
      ACTIVATIONTYPE_FROM_STREAM,
      ACTIVATIONTYPE_FROM_FILE
   );
   for tagACTIVATIONTYPE use (
      ACTIVATIONTYPE_UNCATEGORIZED => 0,
      ACTIVATIONTYPE_FROM_MONIKER => 1,
      ACTIVATIONTYPE_FROM_DATA => 2,
      ACTIVATIONTYPE_FROM_STORAGE => 4,
      ACTIVATIONTYPE_FROM_STREAM => 8,
      ACTIVATIONTYPE_FROM_FILE => 16
   );
   for tagACTIVATIONTYPE'Size use 32;
   subtype ACTIVATIONTYPE is tagACTIVATIONTYPE; -- CXType_Elaborated
   type IActivationFilter_Interface is interface and IUnknown_Interface;
      function HandleActivation(
         This : access IActivationFilter_Interface;
         dwActivationType : DWORD;
         rclsid : access constant IID;
         pReplacementClsId : access CLSID
      ) return HRESULT is abstract;
   type IActivationFilter is access IActivationFilter_Interface'Class;
   type IActivationFilter_Ptr is access IActivationFilter;
   type LPMARSHAL2 is access IMarshal2; -- CXType_Pointer - CXType_Typedef
   type LPMALLOC is access IMalloc; -- CXType_Pointer - CXType_Typedef
   type IMalloc_Interface is interface and IUnknown_Interface;
      procedure Alloc(
         This : access IMalloc_Interface;
         cb : SIZE_T
      ) is abstract;
      procedure Realloc(
         This : access IMalloc_Interface;
         pv : access Void;
         cb : SIZE_T
      ) is abstract;
      procedure Free(
         This : access IMalloc_Interface;
         pv : access Void
      ) is abstract;
      function GetSize(
         This : access IMalloc_Interface;
         pv : access Void
      ) return SIZE_T is abstract;
      function DidAlloc(
         This : access IMalloc_Interface;
         pv : access Void
      ) return Interfaces.C.Int is abstract;
      procedure HeapMinimize(This : access IMalloc_Interface) is abstract;
   type IMalloc is access IMalloc_Interface'Class;
   type IMalloc_Ptr is access IMalloc;
   type LPSTDMARSHALINFO is access IStdMarshalInfo; -- CXType_Pointer - CXType_Typedef
   type IStdMarshalInfo_Interface is interface and IUnknown_Interface;
      function GetClassForHandler(
         This : access IStdMarshalInfo_Interface;
         dwDestContext : DWORD;
         pvDestContext : access Void;
         pClsid : access CLSID
      ) return HRESULT is abstract;
   type IStdMarshalInfo is access IStdMarshalInfo_Interface'Class;
   type IStdMarshalInfo_Ptr is access IStdMarshalInfo;
   type LPEXTERNALCONNECTION is access IExternalConnection; -- CXType_Pointer - CXType_Typedef
   type tagEXTCONN is (
      EXTCONN_STRONG,
      EXTCONN_WEAK,
      EXTCONN_CALLABLE
   );
   for tagEXTCONN use (
      EXTCONN_STRONG => 1,
      EXTCONN_WEAK => 2,
      EXTCONN_CALLABLE => 4
   );
   for tagEXTCONN'Size use 32;
   subtype EXTCONN is tagEXTCONN; -- CXType_Elaborated
   type IExternalConnection_Interface is interface and IUnknown_Interface;
      function AddConnection(
         This : access IExternalConnection_Interface;
         extconn_x : DWORD;
         reserved : DWORD
      ) return DWORD is abstract;
      function ReleaseConnection(
         This : access IExternalConnection_Interface;
         extconn_x : DWORD;
         reserved : DWORD;
         fLastReleaseCloses : BOOL
      ) return DWORD is abstract;
   type IExternalConnection is access IExternalConnection_Interface'Class;
   type IExternalConnection_Ptr is access IExternalConnection;
   type LPMULTIQI is access IMultiQI; -- CXType_Pointer - CXType_Typedef
   type tagMULTI_QI is record
      pIID : access constant IID;
      pItf : access IUnknown;
      hr : HRESULT;
   end record;
   subtype MULTI_QI is tagMULTI_QI; -- CXType_Elaborated
   type IMultiQI_Interface is interface and IUnknown_Interface;
      function QueryMultipleInterfaces(
         This : access IMultiQI_Interface;
         cMQIs : ULONG;
         pMQIs : access MULTI_QI
      ) return HRESULT is abstract;
   type IMultiQI is access IMultiQI_Interface'Class;
   type IMultiQI_Ptr is access IMultiQI;
   type AsyncIMultiQI_Interface is interface and IUnknown_Interface;
      function Begin_QueryMultipleInterfaces(
         This : access AsyncIMultiQI_Interface;
         cMQIs : ULONG;
         pMQIs : access MULTI_QI
      ) return HRESULT is abstract;
      function Finish_QueryMultipleInterfaces(
         This : access AsyncIMultiQI_Interface;
         pMQIs : access MULTI_QI
      ) return HRESULT is abstract;
   type AsyncIMultiQI is access AsyncIMultiQI_Interface'Class;
   type AsyncIMultiQI_Ptr is access AsyncIMultiQI;
   type IInternalUnknown_Interface is interface and IUnknown_Interface;
      function QueryInternalInterface(
         This : access IInternalUnknown_Interface;
         riid : access constant IID;
         ppv : access LPVOID
      ) return HRESULT is abstract;
   type IInternalUnknown is access IInternalUnknown_Interface'Class;
   type IInternalUnknown_Ptr is access IInternalUnknown;
   type LPENUMUNKNOWN is access IEnumUnknown; -- CXType_Pointer - CXType_Typedef
   type IEnumUnknown_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumUnknown_Interface;
         celt : ULONG;
         rgelt : access LPVOID;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumUnknown_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumUnknown_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumUnknown_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumUnknown is access IEnumUnknown_Interface'Class;
   type IEnumUnknown_Ptr is access IEnumUnknown;
   function IEnumUnknown_RemoteNext_Proxy(
      This : access IEnumUnknown;
      celt : ULONG;
      rgelt : access LPUNKNOWN;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumUnknown_RemoteNext_Proxy,"IEnumUnknown_RemoteNext_Proxy");
   procedure IEnumUnknown_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumUnknown_RemoteNext_Stub,"IEnumUnknown_RemoteNext_Stub");
   type LPENUMSTRING is access IEnumString; -- CXType_Pointer - CXType_Typedef
   type IEnumString_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumString_Interface;
         celt : ULONG;
         rgelt : access LPOLESTR;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumString_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumString_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumString_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumString is access IEnumString_Interface'Class;
   type IEnumString_Ptr is access IEnumString;
   function IEnumString_RemoteNext_Proxy(
      This : access IEnumString;
      celt : ULONG;
      rgelt : access LPOLESTR;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumString_RemoteNext_Proxy,"IEnumString_RemoteNext_Proxy");
   procedure IEnumString_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumString_RemoteNext_Stub,"IEnumString_RemoteNext_Stub");
   type ISequentialStream_Interface is interface and IUnknown_Interface;
      function Read(
         This : access ISequentialStream_Interface;
         pv : access Void;
         cb : ULONG;
         pcbRead : access ULONG
      ) return HRESULT is abstract;
      function Write(
         This : access ISequentialStream_Interface;
         pv : access Void;
         cb : ULONG;
         pcbWritten : access ULONG
      ) return HRESULT is abstract;
   type ISequentialStream is access ISequentialStream_Interface'Class;
   type ISequentialStream_Ptr is access ISequentialStream;
   function ISequentialStream_RemoteRead_Proxy(
      This : access ISequentialStream;
      pv : access byte;
      cb : ULONG;
      pcbRead : access ULONG
   ) return HRESULT;
   pragma import (C,ISequentialStream_RemoteRead_Proxy,"ISequentialStream_RemoteRead_Proxy");
   procedure ISequentialStream_RemoteRead_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ISequentialStream_RemoteRead_Stub,"ISequentialStream_RemoteRead_Stub");
   function ISequentialStream_RemoteWrite_Proxy(
      This : access ISequentialStream;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,ISequentialStream_RemoteWrite_Proxy,"ISequentialStream_RemoteWrite_Proxy");
   procedure ISequentialStream_RemoteWrite_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ISequentialStream_RemoteWrite_Stub,"ISequentialStream_RemoteWrite_Stub");
   type LPSTREAM is access IStream; -- CXType_Pointer - CXType_Typedef
   type tagSTATSTG is record
      pwcsName : LPOLESTR;
      type_x : DWORD;
      cbSize : ULARGE_INTEGER;
      mtime : FILETIME;
      ctime : FILETIME;
      atime : FILETIME;
      grfMode : DWORD;
      grfLocksSupported : DWORD;
      clsid_x : CLSID;
      grfStateBits : DWORD;
      reserved : DWORD;
   end record;
   subtype STATSTG is tagSTATSTG; -- CXType_Elaborated
   type tagSTGTY is (
      STGTY_STORAGE,
      STGTY_STREAM,
      STGTY_LOCKBYTES,
      STGTY_PROPERTY
   );
   for tagSTGTY use (
      STGTY_STORAGE => 1,
      STGTY_STREAM => 2,
      STGTY_LOCKBYTES => 3,
      STGTY_PROPERTY => 4
   );
   for tagSTGTY'Size use 32;
   subtype STGTY is tagSTGTY; -- CXType_Elaborated
   type tagSTREAM_SEEK is (
      STREAM_SEEK_SET,
      STREAM_SEEK_CUR,
      STREAM_SEEK_END
   );
   for tagSTREAM_SEEK use (
      STREAM_SEEK_SET => 0,
      STREAM_SEEK_CUR => 1,
      STREAM_SEEK_END => 2
   );
   for tagSTREAM_SEEK'Size use 32;
   subtype STREAM_SEEK is tagSTREAM_SEEK; -- CXType_Elaborated
   type tagLOCKTYPE is (
      LOCK_WRITE,
      LOCK_EXCLUSIVE,
      LOCK_ONLYONCE
   );
   for tagLOCKTYPE use (
      LOCK_WRITE => 1,
      LOCK_EXCLUSIVE => 2,
      LOCK_ONLYONCE => 4
   );
   for tagLOCKTYPE'Size use 32;
   subtype LOCKTYPE is tagLOCKTYPE; -- CXType_Elaborated
   type IStream_Interface is interface and ISequentialStream_Interface;
      function Seek(
         This : access IStream_Interface;
         dlibMove : LARGE_INTEGER;
         dwOrigin : DWORD;
         plibNewPosition : access ULARGE_INTEGER
      ) return HRESULT is abstract;
      function SetSize(
         This : access IStream_Interface;
         libNewSize : ULARGE_INTEGER
      ) return HRESULT is abstract;
      function CopyTo(
         This : access IStream_Interface;
         pstm : access Void;
         cb : ULARGE_INTEGER;
         pcbRead : access ULARGE_INTEGER;
         pcbWritten : access ULARGE_INTEGER
      ) return HRESULT is abstract;
      function Commit(
         This : access IStream_Interface;
         grfCommitFlags : DWORD
      ) return HRESULT is abstract;
      function Revert(This : access IStream_Interface) return HRESULT is abstract;
      function LockRegion(
         This : access IStream_Interface;
         libOffset : ULARGE_INTEGER;
         cb : ULARGE_INTEGER;
         dwLockType : DWORD
      ) return HRESULT is abstract;
      function UnlockRegion(
         This : access IStream_Interface;
         libOffset : ULARGE_INTEGER;
         cb : ULARGE_INTEGER;
         dwLockType : DWORD
      ) return HRESULT is abstract;
      function Stat(
         This : access IStream_Interface;
         pstatstg : access STATSTG;
         grfStatFlag : DWORD
      ) return HRESULT is abstract;
      function Clone(
         This : access IStream_Interface;
         ppstm : access LPVOID
      ) return HRESULT is abstract;
   type IStream is access IStream_Interface'Class;
   type IStream_Ptr is access IStream;
   function IStream_RemoteSeek_Proxy(
      This : access IStream;
      dlibMove : LARGE_INTEGER;
      dwOrigin : DWORD;
      plibNewPosition : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,IStream_RemoteSeek_Proxy,"IStream_RemoteSeek_Proxy");
   procedure IStream_RemoteSeek_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IStream_RemoteSeek_Stub,"IStream_RemoteSeek_Stub");
   function IStream_RemoteCopyTo_Proxy(
      This : access IStream;
      pstm : access IStream;
      cb : ULARGE_INTEGER;
      pcbRead : access ULARGE_INTEGER;
      pcbWritten : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,IStream_RemoteCopyTo_Proxy,"IStream_RemoteCopyTo_Proxy");
   procedure IStream_RemoteCopyTo_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IStream_RemoteCopyTo_Stub,"IStream_RemoteCopyTo_Stub");
   subtype RPCOLEDATAREP is ULONG; -- CXType_Typedef
   type tagRPCOLEMESSAGE is record
      reserved1 : access Void;
      dataRepresentation : RPCOLEDATAREP;
      Buffer : access Void;
      cbBuffer : ULONG;
      iMethod : ULONG;
      reserved2 : Void;
      rpcFlags : ULONG;
   end record;
   subtype RPCOLEMESSAGE is tagRPCOLEMESSAGE; -- CXType_Elaborated
   type PRPCOLEMESSAGE is access RPCOLEMESSAGE; -- CXType_Pointer - CXType_Typedef
   type IRpcChannelBuffer_Interface is interface and IUnknown_Interface;
      function GetBuffer(
         This : access IRpcChannelBuffer_Interface;
         pMessage : access RPCOLEMESSAGE;
         riid : access constant IID
      ) return HRESULT is abstract;
      function SendReceive(
         This : access IRpcChannelBuffer_Interface;
         pMessage : access RPCOLEMESSAGE;
         pStatus : access ULONG
      ) return HRESULT is abstract;
      function FreeBuffer(
         This : access IRpcChannelBuffer_Interface;
         pMessage : access RPCOLEMESSAGE
      ) return HRESULT is abstract;
      function GetDestCtx(
         This : access IRpcChannelBuffer_Interface;
         pdwDestContext : access DWORD;
         ppvDestContext : access LPVOID
      ) return HRESULT is abstract;
      function IsConnected(This : access IRpcChannelBuffer_Interface) return HRESULT is abstract;
   type IRpcChannelBuffer is access IRpcChannelBuffer_Interface'Class;
   type IRpcChannelBuffer_Ptr is access IRpcChannelBuffer;
   type IRpcChannelBuffer2_Interface is interface and IRpcChannelBuffer_Interface;
      function GetProtocolVersion(
         This : access IRpcChannelBuffer2_Interface;
         pdwVersion : access DWORD
      ) return HRESULT is abstract;
   type IRpcChannelBuffer2 is access IRpcChannelBuffer2_Interface'Class;
   type IRpcChannelBuffer2_Ptr is access IRpcChannelBuffer2;
   type IAsyncRpcChannelBuffer_Interface is interface and IRpcChannelBuffer2_Interface;
      function Send(
         This : access IAsyncRpcChannelBuffer_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pSync : access ISynchronize;
         pulStatus : access ULONG
      ) return HRESULT is abstract;
      function Receive(
         This : access IAsyncRpcChannelBuffer_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pulStatus : access ULONG
      ) return HRESULT is abstract;
      function GetDestCtxEx(
         This : access IAsyncRpcChannelBuffer_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pdwDestContext : access DWORD;
         ppvDestContext : access LPVOID
      ) return HRESULT is abstract;
   type IAsyncRpcChannelBuffer is access IAsyncRpcChannelBuffer_Interface'Class;
   type IAsyncRpcChannelBuffer_Ptr is access IAsyncRpcChannelBuffer;
   type IRpcChannelBuffer3_Interface is interface and IRpcChannelBuffer2_Interface;
      function Send(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pulStatus : access ULONG
      ) return HRESULT is abstract;
      function Receive(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         ulSize : ULONG;
         pulStatus : access ULONG
      ) return HRESULT is abstract;
      function Cancel(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE
      ) return HRESULT is abstract;
      function GetCallContext(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         riid : access constant IID;
         pInterface : access LPVOID
      ) return HRESULT is abstract;
      function GetDestCtxEx(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pdwDestContext : access DWORD;
         ppvDestContext : access LPVOID
      ) return HRESULT is abstract;
      function GetState(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pState : access DWORD
      ) return HRESULT is abstract;
      function RegisterAsync(
         This : access IRpcChannelBuffer3_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         pAsyncMgr : access IAsyncManager
      ) return HRESULT is abstract;
   type IRpcChannelBuffer3 is access IRpcChannelBuffer3_Interface'Class;
   type IRpcChannelBuffer3_Ptr is access IRpcChannelBuffer3;
   type IRpcSyntaxNegotiate_Interface is interface and IUnknown_Interface;
      function NegotiateSyntax(
         This : access IRpcSyntaxNegotiate_Interface;
         pMsg_x : access RPCOLEMESSAGE
      ) return HRESULT is abstract;
   type IRpcSyntaxNegotiate is access IRpcSyntaxNegotiate_Interface'Class;
   type IRpcSyntaxNegotiate_Ptr is access IRpcSyntaxNegotiate;
   type IRpcProxyBuffer_Interface is interface and IUnknown_Interface;
      function Connect(
         This : access IRpcProxyBuffer_Interface;
         pRpcChannelBuffer : access IRpcChannelBuffer
      ) return HRESULT is abstract;
      procedure Disconnect(This : access IRpcProxyBuffer_Interface) is abstract;
   type IRpcProxyBuffer is access IRpcProxyBuffer_Interface'Class;
   type IRpcProxyBuffer_Ptr is access IRpcProxyBuffer;
   type IRpcStubBuffer_Interface is interface and IUnknown_Interface;
      function Connect(
         This : access IRpcStubBuffer_Interface;
         pUnkServer : access Void
      ) return HRESULT is abstract;
      procedure Disconnect(This : access IRpcStubBuffer_Interface) is abstract;
      function Invoke(
         This : access IRpcStubBuffer_Interface;
         prpcmsg : access RPCOLEMESSAGE;
         pRpcChannelBuffer : access IRpcChannelBuffer
      ) return HRESULT is abstract;
      function CountRefs(This : access IRpcStubBuffer_Interface) return ULONG is abstract;
      function DebugServerQueryInterface(
         This : access IRpcStubBuffer_Interface;
         ppv : access LPVOID
      ) return HRESULT is abstract;
      procedure DebugServerRelease(
         This : access IRpcStubBuffer_Interface;
         pv : access Void
      ) is abstract;
   type IRpcStubBuffer is access IRpcStubBuffer_Interface'Class;
   type IRpcStubBuffer_Ptr is access IRpcStubBuffer;
   type IPSFactoryBuffer_Interface is interface and IUnknown_Interface;
      function CreateProxy(
         This : access IPSFactoryBuffer_Interface;
         pUnkOuter : access Void;
         riid : access constant IID;
         ppProxy : access IRpcProxyBuffer_Ptr;
         ppv : access LPVOID
      ) return HRESULT is abstract;
      function CreateStub(
         This : access IPSFactoryBuffer_Interface;
         riid : access constant IID;
         pUnkServer : access Void;
         ppStub : access IRpcStubBuffer_Ptr
      ) return HRESULT is abstract;
   type IPSFactoryBuffer is access IPSFactoryBuffer_Interface'Class;
   type IPSFactoryBuffer_Ptr is access IPSFactoryBuffer;
   type SChannelHookCallInfo is record
      iid_x : IID;
      cbSize : DWORD;
      uCausality : GUID;
      dwServerPid : DWORD;
      iMethod : DWORD;
      pObject : access Void;
   end record;
   type IChannelHook_Interface is interface and IUnknown_Interface;
      procedure ClientGetSize(
         This : access IChannelHook_Interface;
         uExtent : access constant GUID;
         riid : access constant IID;
         pDataSize : access ULONG
      ) is abstract;
      procedure ClientFillBuffer(
         This : access IChannelHook_Interface;
         uExtent : access constant GUID;
         riid : access constant IID;
         pDataSize : access ULONG;
         pDataBuffer : access Void
      ) is abstract;
      procedure ClientNotify(
         This : access IChannelHook_Interface;
         uExtent : access constant GUID;
         riid : access constant IID;
         cbDataSize : ULONG;
         pDataBuffer : access Void;
         lDataRep : DWORD;
         hrFault : HRESULT
      ) is abstract;
      procedure ServerNotify(
         This : access IChannelHook_Interface;
         uExtent : access constant GUID;
         riid : access constant IID;
         cbDataSize : ULONG;
         pDataBuffer : access Void;
         lDataRep : DWORD
      ) is abstract;
      procedure ServerGetSize(
         This : access IChannelHook_Interface;
         uExtent : access constant GUID;
         riid : access constant IID;
         hrFault : HRESULT;
         pDataSize : access ULONG
      ) is abstract;
      procedure ServerFillBuffer(
         This : access IChannelHook_Interface;
         uExtent : access constant GUID;
         riid : access constant IID;
         pDataSize : access ULONG;
         pDataBuffer : access Void;
         hrFault : HRESULT
      ) is abstract;
   type IChannelHook is access IChannelHook_Interface'Class;
   type IChannelHook_Ptr is access IChannelHook;
   type tagSOLE_AUTHENTICATION_SERVICE is record
      dwAuthnSvc : DWORD;
      dwAuthzSvc : DWORD;
      pPrincipalName : access OLECHAR;
      hr : HRESULT;
   end record;
   subtype SOLE_AUTHENTICATION_SERVICE is tagSOLE_AUTHENTICATION_SERVICE; -- CXType_Elaborated
   type PSOLE_AUTHENTICATION_SERVICE is access SOLE_AUTHENTICATION_SERVICE; -- CXType_Pointer - CXType_Typedef
   type tagEOLE_AUTHENTICATION_CAPABILITIES is (
      EOAC_NONE,
      EOAC_MUTUAL_AUTH,
      EOAC_SECURE_REFS,
      EOAC_ACCESS_CONTROL,
      EOAC_APPID,
      EOAC_DYNAMIC,
      EOAC_STATIC_CLOAKING,
      EOAC_DYNAMIC_CLOAKING,
      EOAC_ANY_AUTHORITY,
      EOAC_MAKE_FULLSIC,
      EOAC_REQUIRE_FULLSIC,
      EOAC_AUTO_IMPERSONATE,
      EOAC_DEFAULT,
      EOAC_DISABLE_AAA,
      EOAC_NO_CUSTOM_MARSHAL,
      EOAC_RESERVED1
   );
   for tagEOLE_AUTHENTICATION_CAPABILITIES use (
      EOAC_NONE => 0,
      EOAC_MUTUAL_AUTH => 1,
      EOAC_SECURE_REFS => 2,
      EOAC_ACCESS_CONTROL => 4,
      EOAC_APPID => 8,
      EOAC_DYNAMIC => 16,
      EOAC_STATIC_CLOAKING => 32,
      EOAC_DYNAMIC_CLOAKING => 64,
      EOAC_ANY_AUTHORITY => 128,
      EOAC_MAKE_FULLSIC => 256,
      EOAC_REQUIRE_FULLSIC => 512,
      EOAC_AUTO_IMPERSONATE => 1024,
      EOAC_DEFAULT => 2048,
      EOAC_DISABLE_AAA => 4096,
      EOAC_NO_CUSTOM_MARSHAL => 8192,
      EOAC_RESERVED1 => 16384
   );
   for tagEOLE_AUTHENTICATION_CAPABILITIES'Size use 32;
   subtype EOLE_AUTHENTICATION_CAPABILITIES is tagEOLE_AUTHENTICATION_CAPABILITIES; -- CXType_Elaborated
   type tagSOLE_AUTHENTICATION_INFO is record
      dwAuthnSvc : DWORD;
      dwAuthzSvc : DWORD;
      pAuthInfo : access Void;
   end record;
   subtype SOLE_AUTHENTICATION_INFO is tagSOLE_AUTHENTICATION_INFO; -- CXType_Elaborated
   type PSOLE_AUTHENTICATION_INFO is access tagSOLE_AUTHENTICATION_INFO; -- CXType_Pointer - CXType_Elaborated
   type tagSOLE_AUTHENTICATION_LIST is record
      cAuthInfo : DWORD;
      aAuthInfo : access SOLE_AUTHENTICATION_INFO;
   end record;
   subtype SOLE_AUTHENTICATION_LIST is tagSOLE_AUTHENTICATION_LIST; -- CXType_Elaborated
   type PSOLE_AUTHENTICATION_LIST is access tagSOLE_AUTHENTICATION_LIST; -- CXType_Pointer - CXType_Elaborated
   type IClientSecurity_Interface is interface and IUnknown_Interface;
      function QueryBlanket(
         This : access IClientSecurity_Interface;
         pProxy : access Void;
         pAuthnSvc : access DWORD;
         pAuthzSvc : access DWORD;
         pServerPrincName : access LPOLESTR;
         pAuthnLevel : access DWORD;
         pImpLevel : access DWORD;
         pAuthInfo : access LPVOID;
         pCapabilites : access DWORD
      ) return HRESULT is abstract;
      function SetBlanket(
         This : access IClientSecurity_Interface;
         pProxy : access Void;
         dwAuthnSvc : DWORD;
         dwAuthzSvc : DWORD;
         pServerPrincName : access OLECHAR;
         dwAuthnLevel : DWORD;
         dwImpLevel : DWORD;
         pAuthInfo : access Void;
         dwCapabilities : DWORD
      ) return HRESULT is abstract;
      function CopyProxy(
         This : access IClientSecurity_Interface;
         pProxy : access Void;
         ppCopy : access LPVOID
      ) return HRESULT is abstract;
   type IClientSecurity is access IClientSecurity_Interface'Class;
   type IClientSecurity_Ptr is access IClientSecurity;
   type IServerSecurity_Interface is interface and IUnknown_Interface;
      function QueryBlanket(
         This : access IServerSecurity_Interface;
         pAuthnSvc : access DWORD;
         pAuthzSvc : access DWORD;
         pServerPrincName : access LPOLESTR;
         pAuthnLevel : access DWORD;
         pImpLevel : access DWORD;
         pPrivs : access LPVOID;
         pCapabilities : access DWORD
      ) return HRESULT is abstract;
      function ImpersonateClient(This : access IServerSecurity_Interface) return HRESULT is abstract;
      function RevertToSelf(This : access IServerSecurity_Interface) return HRESULT is abstract;
      function IsImpersonating(This : access IServerSecurity_Interface) return BOOL is abstract;
   type IServerSecurity is access IServerSecurity_Interface'Class;
   type IServerSecurity_Ptr is access IServerSecurity;
   type tagRPCOPT_PROPERTIES is (
      COMBND_RPCTIMEOUT,
      COMBND_SERVER_LOCALITY,
      COMBND_RESERVED1,
      COMBND_RESERVED2,
      COMBND_RESERVED3,
      COMBND_RESERVED4
   );
   for tagRPCOPT_PROPERTIES use (
      COMBND_RPCTIMEOUT => 1,
      COMBND_SERVER_LOCALITY => 2,
      COMBND_RESERVED1 => 4,
      COMBND_RESERVED2 => 5,
      COMBND_RESERVED3 => 8,
      COMBND_RESERVED4 => 16
   );
   for tagRPCOPT_PROPERTIES'Size use 32;
   subtype RPCOPT_PROPERTIES is tagRPCOPT_PROPERTIES; -- CXType_Elaborated
   type tagRPCOPT_SERVER_LOCALITY_VALUES is (
      SERVER_LOCALITY_PROCESS_LOCAL,
      SERVER_LOCALITY_MACHINE_LOCAL,
      SERVER_LOCALITY_REMOTE
   );
   for tagRPCOPT_SERVER_LOCALITY_VALUES use (
      SERVER_LOCALITY_PROCESS_LOCAL => 0,
      SERVER_LOCALITY_MACHINE_LOCAL => 1,
      SERVER_LOCALITY_REMOTE => 2
   );
   for tagRPCOPT_SERVER_LOCALITY_VALUES'Size use 32;
   subtype RPCOPT_SERVER_LOCALITY_VALUES is tagRPCOPT_SERVER_LOCALITY_VALUES; -- CXType_Elaborated
   type IRpcOptions_Interface is interface and IUnknown_Interface;
      function Set(
         This : access IRpcOptions_Interface;
         pPrx : access Void;
         dwProperty : RPCOPT_PROPERTIES;
         dwValue : ULONG_PTR
      ) return HRESULT is abstract;
      function Query(
         This : access IRpcOptions_Interface;
         pPrx : access Void;
         dwProperty : RPCOPT_PROPERTIES;
         pdwValue : access ULONG_PTR
      ) return HRESULT is abstract;
   type IRpcOptions is access IRpcOptions_Interface'Class;
   type IRpcOptions_Ptr is access IRpcOptions;
   type tagGLOBALOPT_PROPERTIES is (
      COMGLB_EXCEPTION_HANDLING,
      COMGLB_APPID,
      COMGLB_RPC_THREADPOOL_SETTING,
      COMGLB_RO_SETTINGS,
      COMGLB_UNMARSHALING_POLICY,
      COMGLB_PROPERTIES_RESERVED1,
      COMGLB_PROPERTIES_RESERVED2
   );
   for tagGLOBALOPT_PROPERTIES use (
      COMGLB_EXCEPTION_HANDLING => 1,
      COMGLB_APPID => 2,
      COMGLB_RPC_THREADPOOL_SETTING => 3,
      COMGLB_RO_SETTINGS => 4,
      COMGLB_UNMARSHALING_POLICY => 5,
      COMGLB_PROPERTIES_RESERVED1 => 6,
      COMGLB_PROPERTIES_RESERVED2 => 7
   );
   for tagGLOBALOPT_PROPERTIES'Size use 32;
   subtype GLOBALOPT_PROPERTIES is tagGLOBALOPT_PROPERTIES; -- CXType_Elaborated
   type tagGLOBALOPT_EH_VALUES is (
      COMGLB_EXCEPTION_HANDLE,
      COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
      COMGLB_EXCEPTION_DONOT_HANDLE_ANY
   );
   for tagGLOBALOPT_EH_VALUES use (
      COMGLB_EXCEPTION_HANDLE => 0,
      COMGLB_EXCEPTION_DONOT_HANDLE_FATAL => 1,
      COMGLB_EXCEPTION_DONOT_HANDLE_ANY => 2
   );
   for tagGLOBALOPT_EH_VALUES'Size use 32;
   subtype GLOBALOPT_EH_VALUES is tagGLOBALOPT_EH_VALUES; -- CXType_Elaborated
   type tagGLOBALOPT_RPCTP_VALUES is (
      COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL,
      COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL
   );
   for tagGLOBALOPT_RPCTP_VALUES use (
      COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL => 0,
      COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL => 1
   );
   for tagGLOBALOPT_RPCTP_VALUES'Size use 32;
   subtype GLOBALOPT_RPCTP_VALUES is tagGLOBALOPT_RPCTP_VALUES; -- CXType_Elaborated
   type tagGLOBALOPT_RO_FLAGS is (
      COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES,
      COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES,
      COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES,
      COMGLB_FAST_RUNDOWN,
      COMGLB_RESERVED1,
      COMGLB_RESERVED2,
      COMGLB_RESERVED3,
      COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES,
      COMGLB_RESERVED4,
      COMGLB_RESERVED5,
      COMGLB_RESERVED6
   );
   for tagGLOBALOPT_RO_FLAGS use (
      COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES => 1,
      COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES => 2,
      COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES => 4,
      COMGLB_FAST_RUNDOWN => 8,
      COMGLB_RESERVED1 => 16,
      COMGLB_RESERVED2 => 32,
      COMGLB_RESERVED3 => 64,
      COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES => 128,
      COMGLB_RESERVED4 => 256,
      COMGLB_RESERVED5 => 512,
      COMGLB_RESERVED6 => 1024
   );
   for tagGLOBALOPT_RO_FLAGS'Size use 32;
   subtype GLOBALOPT_RO_FLAGS is tagGLOBALOPT_RO_FLAGS; -- CXType_Elaborated
   type tagGLOBALOPT_UNMARSHALING_POLICY_VALUES is (
      COMGLB_UNMARSHALING_POLICY_NORMAL,
      COMGLB_UNMARSHALING_POLICY_STRONG,
      COMGLB_UNMARSHALING_POLICY_HYBRID
   );
   for tagGLOBALOPT_UNMARSHALING_POLICY_VALUES use (
      COMGLB_UNMARSHALING_POLICY_NORMAL => 0,
      COMGLB_UNMARSHALING_POLICY_STRONG => 1,
      COMGLB_UNMARSHALING_POLICY_HYBRID => 2
   );
   for tagGLOBALOPT_UNMARSHALING_POLICY_VALUES'Size use 32;
   subtype GLOBALOPT_UNMARSHALING_POLICY_VALUES is tagGLOBALOPT_UNMARSHALING_POLICY_VALUES; -- CXType_Elaborated
   type IGlobalOptions_Interface is interface and IUnknown_Interface;
      function Set(
         This : access IGlobalOptions_Interface;
         dwProperty : GLOBALOPT_PROPERTIES;
         dwValue : ULONG_PTR
      ) return HRESULT is abstract;
      function Query(
         This : access IGlobalOptions_Interface;
         dwProperty : GLOBALOPT_PROPERTIES;
         pdwValue : access ULONG_PTR
      ) return HRESULT is abstract;
   type IGlobalOptions is access IGlobalOptions_Interface'Class;
   type IGlobalOptions_Ptr is access IGlobalOptions;
   type LPSURROGATE is access ISurrogate; -- CXType_Pointer - CXType_Typedef
   type ISurrogate_Interface is interface and IUnknown_Interface;
      function LoadDllServer(
         This : access ISurrogate_Interface;
         Clsid_x : access constant IID
      ) return HRESULT is abstract;
      function FreeSurrogate(This : access ISurrogate_Interface) return HRESULT is abstract;
   type ISurrogate is access ISurrogate_Interface'Class;
   type ISurrogate_Ptr is access ISurrogate;
   type LPGLOBALINTERFACETABLE is access IGlobalInterfaceTable; -- CXType_Pointer - CXType_Typedef
   type IGlobalInterfaceTable_Interface is interface and IUnknown_Interface;
      function RegisterInterfaceInGlobal(
         This : access IGlobalInterfaceTable_Interface;
         pUnk : access Void;
         riid : access constant IID;
         pdwCookie : access DWORD
      ) return HRESULT is abstract;
      function RevokeInterfaceFromGlobal(
         This : access IGlobalInterfaceTable_Interface;
         dwCookie : DWORD
      ) return HRESULT is abstract;
      function GetInterfaceFromGlobal(
         This : access IGlobalInterfaceTable_Interface;
         dwCookie : DWORD;
         riid : access constant IID;
         ppv : access LPVOID
      ) return HRESULT is abstract;
   type IGlobalInterfaceTable is access IGlobalInterfaceTable_Interface'Class;
   type IGlobalInterfaceTable_Ptr is access IGlobalInterfaceTable;
   type ISynchronize_Interface is interface and IUnknown_Interface;
      function Wait(
         This : access ISynchronize_Interface;
         dwFlags : DWORD;
         dwMilliseconds : DWORD
      ) return HRESULT is abstract;
      function Signal(This : access ISynchronize_Interface) return HRESULT is abstract;
      function Reset(This : access ISynchronize_Interface) return HRESULT is abstract;
   type ISynchronize is access ISynchronize_Interface'Class;
   type ISynchronize_Ptr is access ISynchronize;
   type ISynchronizeHandle_Interface is interface and IUnknown_Interface;
      function GetHandle(
         This : access ISynchronizeHandle_Interface;
         ph : access HANDLE
      ) return HRESULT is abstract;
   type ISynchronizeHandle is access ISynchronizeHandle_Interface'Class;
   type ISynchronizeHandle_Ptr is access ISynchronizeHandle;
   type ISynchronizeEvent_Interface is interface and ISynchronizeHandle_Interface;
      function SetEventHandle(
         This : access ISynchronizeEvent_Interface;
         ph : access HANDLE
      ) return HRESULT is abstract;
   type ISynchronizeEvent is access ISynchronizeEvent_Interface'Class;
   type ISynchronizeEvent_Ptr is access ISynchronizeEvent;
   type ISynchronizeContainer_Interface is interface and IUnknown_Interface;
      function AddSynchronize(
         This : access ISynchronizeContainer_Interface;
         pSync : access ISynchronize
      ) return HRESULT is abstract;
      function WaitMultiple(
         This : access ISynchronizeContainer_Interface;
         dwFlags : DWORD;
         dwTimeOut : DWORD;
         ppSync : access ISynchronize_Ptr
      ) return HRESULT is abstract;
   type ISynchronizeContainer is access ISynchronizeContainer_Interface'Class;
   type ISynchronizeContainer_Ptr is access ISynchronizeContainer;
   type ISynchronizeMutex_Interface is interface and ISynchronize_Interface;
      function ReleaseMutex(This : access ISynchronizeMutex_Interface) return HRESULT is abstract;
   type ISynchronizeMutex is access ISynchronizeMutex_Interface'Class;
   type ISynchronizeMutex_Ptr is access ISynchronizeMutex;
   type LPCANCELMETHODCALLS is access ICancelMethodCalls; -- CXType_Pointer - CXType_Typedef
   type ICancelMethodCalls_Interface is interface and IUnknown_Interface;
      function Cancel(
         This : access ICancelMethodCalls_Interface;
         ulSeconds : ULONG
      ) return HRESULT is abstract;
      function TestCancel(This : access ICancelMethodCalls_Interface) return HRESULT is abstract;
   type ICancelMethodCalls is access ICancelMethodCalls_Interface'Class;
   type ICancelMethodCalls_Ptr is access ICancelMethodCalls;
   type tagDCOM_CALL_STATE is (
      DCOM_NONE,
      DCOM_CALL_COMPLETE,
      DCOM_CALL_CANCELED
   );
   for tagDCOM_CALL_STATE use (
      DCOM_NONE => 0,
      DCOM_CALL_COMPLETE => 1,
      DCOM_CALL_CANCELED => 2
   );
   for tagDCOM_CALL_STATE'Size use 32;
   subtype DCOM_CALL_STATE is tagDCOM_CALL_STATE; -- CXType_Elaborated
   type IAsyncManager_Interface is interface and IUnknown_Interface;
      function CompleteCall(
         This : access IAsyncManager_Interface;
         Result : HRESULT
      ) return HRESULT is abstract;
      function GetCallContext(
         This : access IAsyncManager_Interface;
         riid : access constant IID;
         pInterface : access LPVOID
      ) return HRESULT is abstract;
      function GetState(
         This : access IAsyncManager_Interface;
         pulStateFlags : access ULONG
      ) return HRESULT is abstract;
   type IAsyncManager is access IAsyncManager_Interface'Class;
   type IAsyncManager_Ptr is access IAsyncManager;
   type ICallFactory_Interface is interface and IUnknown_Interface;
      function CreateCall(
         This : access ICallFactory_Interface;
         riid : access constant IID;
         pCtrlUnk : access Void;
         riid2 : access constant IID;
         ppv : access LPVOID
      ) return HRESULT is abstract;
   type ICallFactory is access ICallFactory_Interface'Class;
   type ICallFactory_Ptr is access ICallFactory;
   type IRpcHelper_Interface is interface and IUnknown_Interface;
      function GetDCOMProtocolVersion(
         This : access IRpcHelper_Interface;
         pComVersion : access DWORD
      ) return HRESULT is abstract;
      function GetIIDFromOBJREF(
         This : access IRpcHelper_Interface;
         pObjRef : access Void;
         piid : access LPIID
      ) return HRESULT is abstract;
   type IRpcHelper is access IRpcHelper_Interface'Class;
   type IRpcHelper_Ptr is access IRpcHelper;
   type IReleaseMarshalBuffers_Interface is interface and IUnknown_Interface;
      function ReleaseMarshalBuffer(
         This : access IReleaseMarshalBuffers_Interface;
         pMsg_x : access RPCOLEMESSAGE;
         dwFlags : DWORD;
         pChnl : access Void
      ) return HRESULT is abstract;
   type IReleaseMarshalBuffers is access IReleaseMarshalBuffers_Interface'Class;
   type IReleaseMarshalBuffers_Ptr is access IReleaseMarshalBuffers;
   type IWaitMultiple_Interface is interface and IUnknown_Interface;
      function WaitMultiple(
         This : access IWaitMultiple_Interface;
         timeout : DWORD;
         pSync : access ISynchronize_Ptr
      ) return HRESULT is abstract;
      function AddSynchronize(
         This : access IWaitMultiple_Interface;
         pSync : access ISynchronize
      ) return HRESULT is abstract;
   type IWaitMultiple is access IWaitMultiple_Interface'Class;
   type IWaitMultiple_Ptr is access IWaitMultiple;
   type LPADDRTRACKINGCONTROL is access IAddrTrackingControl; -- CXType_Pointer - CXType_Typedef
   type IAddrTrackingControl_Interface is interface and IUnknown_Interface;
      function EnableCOMDynamicAddrTracking(This : access IAddrTrackingControl_Interface) return HRESULT is abstract;
      function DisableCOMDynamicAddrTracking(This : access IAddrTrackingControl_Interface) return HRESULT is abstract;
   type IAddrTrackingControl is access IAddrTrackingControl_Interface'Class;
   type IAddrTrackingControl_Ptr is access IAddrTrackingControl;
   type LPADDREXCLUSIONCONTROL is access IAddrExclusionControl; -- CXType_Pointer - CXType_Typedef
   type IAddrExclusionControl_Interface is interface and IUnknown_Interface;
      function GetCurrentAddrExclusionList(
         This : access IAddrExclusionControl_Interface;
         riid : access constant IID;
         ppEnumerator : access LPVOID
      ) return HRESULT is abstract;
      function UpdateAddrExclusionList(
         This : access IAddrExclusionControl_Interface;
         pEnumerator : access Void
      ) return HRESULT is abstract;
   type IAddrExclusionControl is access IAddrExclusionControl_Interface'Class;
   type IAddrExclusionControl_Ptr is access IAddrExclusionControl;
   type IPipeByte_Interface is interface and IUnknown_Interface;
      function Pull(
         This : access IPipeByte_Interface;
         buf : access BYTE;
         cRequest : ULONG;
         pcReturned : access ULONG
      ) return HRESULT is abstract;
      function Push(
         This : access IPipeByte_Interface;
         buf : access BYTE;
         cSent : ULONG
      ) return HRESULT is abstract;
   type IPipeByte is access IPipeByte_Interface'Class;
   type IPipeByte_Ptr is access IPipeByte;
   type AsyncIPipeByte_Interface is interface and IUnknown_Interface;
      function Begin_Pull(
         This : access AsyncIPipeByte_Interface;
         cRequest : ULONG
      ) return HRESULT is abstract;
      function Finish_Pull(
         This : access AsyncIPipeByte_Interface;
         buf : access BYTE;
         pcReturned : access ULONG
      ) return HRESULT is abstract;
      function Begin_Push(
         This : access AsyncIPipeByte_Interface;
         buf : access BYTE;
         cSent : ULONG
      ) return HRESULT is abstract;
      function Finish_Push(This : access AsyncIPipeByte_Interface) return HRESULT is abstract;
   type AsyncIPipeByte is access AsyncIPipeByte_Interface'Class;
   type AsyncIPipeByte_Ptr is access AsyncIPipeByte;
   type IPipeLong_Interface is interface and IUnknown_Interface;
      function Pull(
         This : access IPipeLong_Interface;
         buf : access LONG;
         cRequest : ULONG;
         pcReturned : access ULONG
      ) return HRESULT is abstract;
      function Push(
         This : access IPipeLong_Interface;
         buf : access LONG;
         cSent : ULONG
      ) return HRESULT is abstract;
   type IPipeLong is access IPipeLong_Interface'Class;
   type IPipeLong_Ptr is access IPipeLong;
   type AsyncIPipeLong_Interface is interface and IUnknown_Interface;
      function Begin_Pull(
         This : access AsyncIPipeLong_Interface;
         cRequest : ULONG
      ) return HRESULT is abstract;
      function Finish_Pull(
         This : access AsyncIPipeLong_Interface;
         buf : access LONG;
         pcReturned : access ULONG
      ) return HRESULT is abstract;
      function Begin_Push(
         This : access AsyncIPipeLong_Interface;
         buf : access LONG;
         cSent : ULONG
      ) return HRESULT is abstract;
      function Finish_Push(This : access AsyncIPipeLong_Interface) return HRESULT is abstract;
   type AsyncIPipeLong is access AsyncIPipeLong_Interface'Class;
   type AsyncIPipeLong_Ptr is access AsyncIPipeLong;
   type IPipeDouble_Interface is interface and IUnknown_Interface;
      function Pull(
         This : access IPipeDouble_Interface;
         buf : access DOUBLE;
         cRequest : ULONG;
         pcReturned : access ULONG
      ) return HRESULT is abstract;
      function Push(
         This : access IPipeDouble_Interface;
         buf : access DOUBLE;
         cSent : ULONG
      ) return HRESULT is abstract;
   type IPipeDouble is access IPipeDouble_Interface'Class;
   type IPipeDouble_Ptr is access IPipeDouble;
   type AsyncIPipeDouble_Interface is interface and IUnknown_Interface;
      function Begin_Pull(
         This : access AsyncIPipeDouble_Interface;
         cRequest : ULONG
      ) return HRESULT is abstract;
      function Finish_Pull(
         This : access AsyncIPipeDouble_Interface;
         buf : access DOUBLE;
         pcReturned : access ULONG
      ) return HRESULT is abstract;
      function Begin_Push(
         This : access AsyncIPipeDouble_Interface;
         buf : access DOUBLE;
         cSent : ULONG
      ) return HRESULT is abstract;
      function Finish_Push(This : access AsyncIPipeDouble_Interface) return HRESULT is abstract;
   type AsyncIPipeDouble is access AsyncIPipeDouble_Interface'Class;
   type AsyncIPipeDouble_Ptr is access AsyncIPipeDouble;
   type APTTYPEQUALIFIER_x is (
      APTTYPEQUALIFIER_NONE,
      APTTYPEQUALIFIER_IMPLICIT_MTA,
      APTTYPEQUALIFIER_NA_ON_MTA,
      APTTYPEQUALIFIER_NA_ON_STA,
      APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA,
      APTTYPEQUALIFIER_NA_ON_MAINSTA,
      APTTYPEQUALIFIER_APPLICATION_STA
   );
   for APTTYPEQUALIFIER_x use (
      APTTYPEQUALIFIER_NONE => 0,
      APTTYPEQUALIFIER_IMPLICIT_MTA => 1,
      APTTYPEQUALIFIER_NA_ON_MTA => 2,
      APTTYPEQUALIFIER_NA_ON_STA => 3,
      APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA => 4,
      APTTYPEQUALIFIER_NA_ON_MAINSTA => 5,
      APTTYPEQUALIFIER_APPLICATION_STA => 6
   );
   for APTTYPEQUALIFIER_x'Size use 32;
   subtype APTTYPEQUALIFIER is APTTYPEQUALIFIER_x; -- CXType_Elaborated
   type APTTYPE_x is (
      APTTYPE_CURRENT,
      APTTYPE_STA,
      APTTYPE_MTA,
      APTTYPE_NA,
      APTTYPE_MAINSTA
   );
   for APTTYPE_x use (
      APTTYPE_CURRENT => -1,
      APTTYPE_STA => 0,
      APTTYPE_MTA => 1,
      APTTYPE_NA => 2,
      APTTYPE_MAINSTA => 3
   );
   for APTTYPE_x'Size use 32;
   subtype APTTYPE is APTTYPE_x; -- CXType_Elaborated
   type THDTYPE_x is (
      THDTYPE_BLOCKMESSAGES,
      THDTYPE_PROCESSMESSAGES
   );
   for THDTYPE_x use (
      THDTYPE_BLOCKMESSAGES => 0,
      THDTYPE_PROCESSMESSAGES => 1
   );
   for THDTYPE_x'Size use 32;
   subtype THDTYPE is THDTYPE_x; -- CXType_Elaborated
   subtype APARTMENTID is DWORD; -- CXType_Typedef
   type IComThreadingInfo_Interface is interface and IUnknown_Interface;
      function GetCurrentApartmentType(
         This : access IComThreadingInfo_Interface;
         pAptType : access APTTYPE
      ) return HRESULT is abstract;
      function GetCurrentThreadType(
         This : access IComThreadingInfo_Interface;
         pThreadType : access THDTYPE
      ) return HRESULT is abstract;
      function GetCurrentLogicalThreadId(
         This : access IComThreadingInfo_Interface;
         pguidLogicalThreadId : access GUID
      ) return HRESULT is abstract;
      function SetCurrentLogicalThreadId(
         This : access IComThreadingInfo_Interface;
         rguid : access constant GUID
      ) return HRESULT is abstract;
   type IComThreadingInfo is access IComThreadingInfo_Interface'Class;
   type IComThreadingInfo_Ptr is access IComThreadingInfo;
   type IProcessInitControl_Interface is interface and IUnknown_Interface;
      function ResetInitializerTimeout(
         This : access IProcessInitControl_Interface;
         dwSecondsRemaining : DWORD
      ) return HRESULT is abstract;
   type IProcessInitControl is access IProcessInitControl_Interface'Class;
   type IProcessInitControl_Ptr is access IProcessInitControl;
   type CO_MARSHALING_CONTEXT_ATTRIBUTES is (
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12,
      CO_MARSHALING_SOURCE_IS_APP_CONTAINER
   );
   for CO_MARSHALING_CONTEXT_ATTRIBUTES use (
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 => -2147483648,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 => -2147483647,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 => -2147483646,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 => -2147483645,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 => -2147483644,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 => -2147483643,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 => -2147483642,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 => -2147483641,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 => -2147483640,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 => -2147483639,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 => -2147483638,
      CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 => -2147483637,
      CO_MARSHALING_SOURCE_IS_APP_CONTAINER => 0
   );
   for CO_MARSHALING_CONTEXT_ATTRIBUTES'Size use 32;
   type IMarshalingStream_Interface is interface and IStream_Interface;
      function GetMarshalingContextAttribute(
         This : access IMarshalingStream_Interface;
         attribute : CO_MARSHALING_CONTEXT_ATTRIBUTES;
         pAttributeValue : access ULONG_PTR
      ) return HRESULT is abstract;
   type IMarshalingStream is access IMarshalingStream_Interface'Class;
   type IMarshalingStream_Ptr is access IMarshalingStream;
   type IAgileReference_Interface is interface and IUnknown_Interface;
      function Resolve(
         This : access IAgileReference_Interface;
         riid : access constant IID;
         ppvObjectReference : access LPVOID
      ) return HRESULT is abstract;
   type IAgileReference is access IAgileReference_Interface'Class;
   type IAgileReference_Ptr is access IAgileReference;
   function IEnumUnknown_Next_Proxy(
      This : access IEnumUnknown;
      celt : ULONG;
      rgelt : access LPUNKNOWN;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumUnknown_Next_Proxy,"IEnumUnknown_Next_Proxy");
   function IEnumUnknown_Next_Stub(
      This : access IEnumUnknown;
      celt : ULONG;
      rgelt : access LPUNKNOWN;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumUnknown_Next_Stub,"IEnumUnknown_Next_Stub");
   function IEnumString_Next_Proxy(
      This : access IEnumString;
      celt : ULONG;
      rgelt : access LPOLESTR;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumString_Next_Proxy,"IEnumString_Next_Proxy");
   function IEnumString_Next_Stub(
      This : access IEnumString;
      celt : ULONG;
      rgelt : access LPOLESTR;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumString_Next_Stub,"IEnumString_Next_Stub");
   function ISequentialStream_Read_Proxy(
      This : access ISequentialStream;
      pv : access Void;
      cb : ULONG;
      pcbRead : access ULONG
   ) return HRESULT;
   pragma import (C,ISequentialStream_Read_Proxy,"ISequentialStream_Read_Proxy");
   function ISequentialStream_Read_Stub(
      This : access ISequentialStream;
      pv : access byte;
      cb : ULONG;
      pcbRead : access ULONG
   ) return HRESULT;
   pragma import (C,ISequentialStream_Read_Stub,"ISequentialStream_Read_Stub");
   function ISequentialStream_Write_Proxy(
      This : access ISequentialStream;
      pv : access Void;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,ISequentialStream_Write_Proxy,"ISequentialStream_Write_Proxy");
   function ISequentialStream_Write_Stub(
      This : access ISequentialStream;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,ISequentialStream_Write_Stub,"ISequentialStream_Write_Stub");
   function IStream_Seek_Proxy(
      This : access IStream;
      dlibMove : LARGE_INTEGER;
      dwOrigin : DWORD;
      plibNewPosition : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,IStream_Seek_Proxy,"IStream_Seek_Proxy");
   function IStream_Seek_Stub(
      This : access IStream;
      dlibMove : LARGE_INTEGER;
      dwOrigin : DWORD;
      plibNewPosition : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,IStream_Seek_Stub,"IStream_Seek_Stub");
   function IStream_CopyTo_Proxy(
      This : access IStream;
      pstm : access IStream;
      cb : ULARGE_INTEGER;
      pcbRead : access ULARGE_INTEGER;
      pcbWritten : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,IStream_CopyTo_Proxy,"IStream_CopyTo_Proxy");
   function IStream_CopyTo_Stub(
      This : access IStream;
      pstm : access IStream;
      cb : ULARGE_INTEGER;
      pcbRead : access ULARGE_INTEGER;
      pcbWritten : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,IStream_CopyTo_Stub,"IStream_CopyTo_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\cguid.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\combaseapi.h>
   function CoGetMalloc(
      dwMemContext : DWORD;
      ppMalloc : access LPMALLOC
   ) return HRESULT;
   pragma import (C,CoGetMalloc,"CoGetMalloc");
   function CreateStreamOnHGlobal(
      hGlobal_x : HGLOBAL;
      fDeleteOnRelease : BOOL;
      ppstm : access LPSTREAM
   ) return HRESULT;
   pragma import (C,CreateStreamOnHGlobal,"CreateStreamOnHGlobal");
   function GetHGlobalFromStream(
      pstm : LPSTREAM;
      phglobal : access HGLOBAL
   ) return HRESULT;
   pragma import (C,GetHGlobalFromStream,"GetHGlobalFromStream");
   procedure CoUninitialize;
   pragma import (C,CoUninitialize,"CoUninitialize");
   function CoGetCurrentProcess return DWORD;
   pragma import (C,CoGetCurrentProcess,"CoGetCurrentProcess");
   function CoInitializeEx(
      pvReserved : LPVOID;
      dwCoInit : DWORD
   ) return HRESULT;
   pragma import (C,CoInitializeEx,"CoInitializeEx");
   function CoGetCallerTID(
      lpdwTID : LPDWORD
   ) return HRESULT;
   pragma import (C,CoGetCallerTID,"CoGetCallerTID");
   function CoGetCurrentLogicalThreadId(
      pguid : access GUID
   ) return HRESULT;
   pragma import (C,CoGetCurrentLogicalThreadId,"CoGetCurrentLogicalThreadId");
   function CoGetContextToken(
      pToken : access ULONG_PTR
   ) return HRESULT;
   pragma import (C,CoGetContextToken,"CoGetContextToken");
   function CoGetDefaultContext(
      aptType_x : APTTYPE;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetDefaultContext,"CoGetDefaultContext");
   function CoGetApartmentType(
      pAptType : access APTTYPE;
      pAptQualifier : access APTTYPEQUALIFIER
   ) return HRESULT;
   pragma import (C,CoGetApartmentType,"CoGetApartmentType");
   type tagServerInformation is record
      dwServerPid : DWORD;
      dwServerTid : DWORD;
      ui64ServerAddress : UINT64;
   end record;
   subtype ServerInformation is tagServerInformation; -- CXType_Elaborated
   type PServerInformation is access tagServerInformation; -- CXType_Pointer - CXType_Elaborated
   function CoDecodeProxy(
      dwClientPid : DWORD;
      ui64ProxyAddress : UINT64;
      pserverinformation_x : PServerInformation
   ) return HRESULT;
   pragma import (C,CoDecodeProxy,"CoDecodeProxy");
   type CO_MTA_USAGE_COOKIE_x is record
      unused : Interfaces.C.Int;
   end record;
   type CO_MTA_USAGE_COOKIE is access CO_MTA_USAGE_COOKIE_x; -- CXType_Pointer - CXType_Elaborated
   function CoIncrementMTAUsage(
      pCookie : access CO_MTA_USAGE_COOKIE
   ) return HRESULT;
   pragma import (C,CoIncrementMTAUsage,"CoIncrementMTAUsage");
   function CoDecrementMTAUsage(
      Cookie : CO_MTA_USAGE_COOKIE
   ) return HRESULT;
   pragma import (C,CoDecrementMTAUsage,"CoDecrementMTAUsage");
   function CoAllowUnmarshalerCLSID(
      clsid_x : access constant IID
   ) return HRESULT;
   pragma import (C,CoAllowUnmarshalerCLSID,"CoAllowUnmarshalerCLSID");
   function CoGetObjectContext(
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetObjectContext,"CoGetObjectContext");
   function CoGetClassObject(
      rclsid : access constant IID;
      dwClsContext : DWORD;
      pvReserved : LPVOID;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetClassObject,"CoGetClassObject");
   function CoRegisterClassObject(
      rclsid : access constant IID;
      pUnk : LPUNKNOWN;
      dwClsContext : DWORD;
      flags : DWORD;
      lpdwRegister : LPDWORD
   ) return HRESULT;
   pragma import (C,CoRegisterClassObject,"CoRegisterClassObject");
   function CoRevokeClassObject(
      dwRegister : DWORD
   ) return HRESULT;
   pragma import (C,CoRevokeClassObject,"CoRevokeClassObject");
   function CoResumeClassObjects return HRESULT;
   pragma import (C,CoResumeClassObjects,"CoResumeClassObjects");
   function CoSuspendClassObjects return HRESULT;
   pragma import (C,CoSuspendClassObjects,"CoSuspendClassObjects");
   function CoAddRefServerProcess return ULONG;
   pragma import (C,CoAddRefServerProcess,"CoAddRefServerProcess");
   function CoReleaseServerProcess return ULONG;
   pragma import (C,CoReleaseServerProcess,"CoReleaseServerProcess");
   function CoGetPSClsid(
      riid : access constant IID;
      pClsid : access CLSID
   ) return HRESULT;
   pragma import (C,CoGetPSClsid,"CoGetPSClsid");
   function CoRegisterPSClsid(
      riid : access constant IID;
      rclsid : access constant IID
   ) return HRESULT;
   pragma import (C,CoRegisterPSClsid,"CoRegisterPSClsid");
   function CoRegisterSurrogate(
      pSurrogate : LPSURROGATE
   ) return HRESULT;
   pragma import (C,CoRegisterSurrogate,"CoRegisterSurrogate");
   function CoGetMarshalSizeMax(
      pulSize : access ULONG;
      riid : access constant IID;
      pUnk : LPUNKNOWN;
      dwDestContext : DWORD;
      pvDestContext : LPVOID;
      mshlflags_x : DWORD
   ) return HRESULT;
   pragma import (C,CoGetMarshalSizeMax,"CoGetMarshalSizeMax");
   function CoMarshalInterface(
      pStm : LPSTREAM;
      riid : access constant IID;
      pUnk : LPUNKNOWN;
      dwDestContext : DWORD;
      pvDestContext : LPVOID;
      mshlflags_x : DWORD
   ) return HRESULT;
   pragma import (C,CoMarshalInterface,"CoMarshalInterface");
   function CoUnmarshalInterface(
      pStm : LPSTREAM;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoUnmarshalInterface,"CoUnmarshalInterface");
   function CoMarshalHresult(
      pstm : LPSTREAM;
      hresult_x : HRESULT
   ) return HRESULT;
   pragma import (C,CoMarshalHresult,"CoMarshalHresult");
   function CoUnmarshalHresult(
      pstm : LPSTREAM;
      phresult : access HRESULT
   ) return HRESULT;
   pragma import (C,CoUnmarshalHresult,"CoUnmarshalHresult");
   function CoReleaseMarshalData(
      pStm : LPSTREAM
   ) return HRESULT;
   pragma import (C,CoReleaseMarshalData,"CoReleaseMarshalData");
   function CoDisconnectObject(
      pUnk : LPUNKNOWN;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoDisconnectObject,"CoDisconnectObject");
   function CoLockObjectExternal(
      pUnk : LPUNKNOWN;
      fLock : BOOL;
      fLastUnlockReleases : BOOL
   ) return HRESULT;
   pragma import (C,CoLockObjectExternal,"CoLockObjectExternal");
   function CoGetStandardMarshal(
      riid : access constant IID;
      pUnk : LPUNKNOWN;
      dwDestContext : DWORD;
      pvDestContext : LPVOID;
      mshlflags_x : DWORD;
      ppMarshal : access LPMARSHAL
   ) return HRESULT;
   pragma import (C,CoGetStandardMarshal,"CoGetStandardMarshal");
   function CoGetStdMarshalEx(
      pUnkOuter : LPUNKNOWN;
      smexflags : DWORD;
      ppUnkInner : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,CoGetStdMarshalEx,"CoGetStdMarshalEx");
   type tagSTDMSHLFLAGS is (
      SMEXF_SERVER,
      SMEXF_HANDLER
   );
   for tagSTDMSHLFLAGS use (
      SMEXF_SERVER => 1,
      SMEXF_HANDLER => 2
   );
   for tagSTDMSHLFLAGS'Size use 32;
   subtype STDMSHLFLAGS is tagSTDMSHLFLAGS; -- CXType_Elaborated
   function CoIsHandlerConnected(
      pUnk : LPUNKNOWN
   ) return BOOL;
   pragma import (C,CoIsHandlerConnected,"CoIsHandlerConnected");
   function CoMarshalInterThreadInterfaceInStream(
      riid : access constant IID;
      pUnk : LPUNKNOWN;
      ppStm : access LPSTREAM
   ) return HRESULT;
   pragma import (C,CoMarshalInterThreadInterfaceInStream,"CoMarshalInterThreadInterfaceInStream");
   function CoGetInterfaceAndReleaseStream(
      pStm : LPSTREAM;
      iid_x : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetInterfaceAndReleaseStream,"CoGetInterfaceAndReleaseStream");
   function CoCreateFreeThreadedMarshaler(
      punkOuter : LPUNKNOWN;
      ppunkMarshal : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,CoCreateFreeThreadedMarshaler,"CoCreateFreeThreadedMarshaler");
   procedure CoFreeUnusedLibraries;
   pragma import (C,CoFreeUnusedLibraries,"CoFreeUnusedLibraries");
   procedure CoFreeUnusedLibrariesEx(
      dwUnloadDelay : DWORD;
      dwReserved : DWORD
   );
   pragma import (C,CoFreeUnusedLibrariesEx,"CoFreeUnusedLibrariesEx");
   function CoDisconnectContext(
      dwTimeout : DWORD
   ) return HRESULT;
   pragma import (C,CoDisconnectContext,"CoDisconnectContext");
   function CoInitializeSecurity(
      pSecDesc : PSECURITY_DESCRIPTOR;
      cAuthSvc : LONG;
      asAuthSvc : access SOLE_AUTHENTICATION_SERVICE;
      pReserved1 : access Void;
      dwAuthnLevel : DWORD;
      dwImpLevel : DWORD;
      pAuthList : access Void;
      dwCapabilities : DWORD;
      pReserved3 : access Void
   ) return HRESULT;
   pragma import (C,CoInitializeSecurity,"CoInitializeSecurity");
   function CoGetCallContext(
      riid : access constant IID;
      ppInterface : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetCallContext,"CoGetCallContext");
   function CoQueryProxyBlanket(
      pProxy : access IUnknown;
      pwAuthnSvc : access DWORD;
      pAuthzSvc : access DWORD;
      pServerPrincName : access LPOLESTR;
      pAuthnLevel : access DWORD;
      pImpLevel : access DWORD;
      pAuthInfo : access RPC_AUTH_IDENTITY_HANDLE;
      pCapabilites : access DWORD
   ) return HRESULT;
   pragma import (C,CoQueryProxyBlanket,"CoQueryProxyBlanket");
   function CoSetProxyBlanket(
      pProxy : access IUnknown;
      dwAuthnSvc : DWORD;
      dwAuthzSvc : DWORD;
      pServerPrincName : access OLECHAR;
      dwAuthnLevel : DWORD;
      dwImpLevel : DWORD;
      pAuthInfo : RPC_AUTH_IDENTITY_HANDLE;
      dwCapabilities : DWORD
   ) return HRESULT;
   pragma import (C,CoSetProxyBlanket,"CoSetProxyBlanket");
   function CoCopyProxy(
      pProxy : access IUnknown;
      ppCopy : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,CoCopyProxy,"CoCopyProxy");
   function CoQueryClientBlanket(
      pAuthnSvc : access DWORD;
      pAuthzSvc : access DWORD;
      pServerPrincName : access LPOLESTR;
      pAuthnLevel : access DWORD;
      pImpLevel : access DWORD;
      pPrivs : access RPC_AUTHZ_HANDLE;
      pCapabilities : access DWORD
   ) return HRESULT;
   pragma import (C,CoQueryClientBlanket,"CoQueryClientBlanket");
   function CoImpersonateClient return HRESULT;
   pragma import (C,CoImpersonateClient,"CoImpersonateClient");
   function CoRevertToSelf return HRESULT;
   pragma import (C,CoRevertToSelf,"CoRevertToSelf");
   function CoQueryAuthenticationServices(
      pcAuthSvc : access DWORD;
      asAuthSvc : access PSOLE_AUTHENTICATION_SERVICE
   ) return HRESULT;
   pragma import (C,CoQueryAuthenticationServices,"CoQueryAuthenticationServices");
   function CoSwitchCallContext(
      pNewObject : access IUnknown;
      ppOldObject : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,CoSwitchCallContext,"CoSwitchCallContext");
   function CoCreateInstance(
      rclsid : access constant IID;
      pUnkOuter : LPUNKNOWN;
      dwClsContext : DWORD;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoCreateInstance,"CoCreateInstance");
   function CoCreateInstanceEx(
      Clsid_x : access constant IID;
      punkOuter : access IUnknown;
      dwClsCtx : DWORD;
      pServerInfo : access COSERVERINFO;
      dwCount : DWORD;
      pResults : access MULTI_QI
   ) return HRESULT;
   pragma import (C,CoCreateInstanceEx,"CoCreateInstanceEx");
   function CoRegisterActivationFilter(
      pActivationFilter : access IActivationFilter
   ) return HRESULT;
   pragma import (C,CoRegisterActivationFilter,"CoRegisterActivationFilter");
   function CoCreateInstanceFromApp(
      Clsid_x : access constant IID;
      punkOuter : access IUnknown;
      dwClsCtx : DWORD;
      reserved : PVOID;
      dwCount : DWORD;
      pResults : access MULTI_QI
   ) return HRESULT;
   pragma import (C,CoCreateInstanceFromApp,"CoCreateInstanceFromApp");
   function CoGetCancelObject(
      dwThreadId : DWORD;
      iid_x : access constant IID;
      ppUnk : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetCancelObject,"CoGetCancelObject");
   function CoSetCancelObject(
      pUnk : access IUnknown
   ) return HRESULT;
   pragma import (C,CoSetCancelObject,"CoSetCancelObject");
   function CoCancelCall(
      dwThreadId : DWORD;
      ulTimeout : ULONG
   ) return HRESULT;
   pragma import (C,CoCancelCall,"CoCancelCall");
   function CoTestCancel return HRESULT;
   pragma import (C,CoTestCancel,"CoTestCancel");
   function CoEnableCallCancellation(
      pReserved : LPVOID
   ) return HRESULT;
   pragma import (C,CoEnableCallCancellation,"CoEnableCallCancellation");
   function CoDisableCallCancellation(
      pReserved : LPVOID
   ) return HRESULT;
   pragma import (C,CoDisableCallCancellation,"CoDisableCallCancellation");
   function StringFromCLSID(
      rclsid : access constant IID;
      lplpsz : access LPOLESTR
   ) return HRESULT;
   pragma import (C,StringFromCLSID,"StringFromCLSID");
   function CLSIDFromString(
      lpsz : LPCOLESTR;
      pclsid : LPCLSID
   ) return HRESULT;
   pragma import (C,CLSIDFromString,"CLSIDFromString");
   function StringFromIID(
      rclsid : access constant IID;
      lplpsz : access LPOLESTR
   ) return HRESULT;
   pragma import (C,StringFromIID,"StringFromIID");
   function IIDFromString(
      lpsz : LPCOLESTR;
      lpiid_x : LPIID
   ) return HRESULT;
   pragma import (C,IIDFromString,"IIDFromString");
   function ProgIDFromCLSID(
      clsid_x : access constant IID;
      lplpszProgID : access LPOLESTR
   ) return HRESULT;
   pragma import (C,ProgIDFromCLSID,"ProgIDFromCLSID");
   function CLSIDFromProgID(
      lpszProgID : LPCOLESTR;
      lpclsid_x : LPCLSID
   ) return HRESULT;
   pragma import (C,CLSIDFromProgID,"CLSIDFromProgID");
   function StringFromGUID2(
      rguid : access constant GUID;
      lpsz : LPOLESTR;
      cchMax : Interfaces.C.Int
   ) return Interfaces.C.Int;
   pragma import (C,StringFromGUID2,"StringFromGUID2");
   function CoCreateGuid(
      pguid : access GUID
   ) return HRESULT;
   pragma import (C,CoCreateGuid,"CoCreateGuid");
   type tagPROPVARIANT; -- Forward Declaration
   subtype PROPVARIANT is tagPROPVARIANT; -- CXType_Elaborated
   function PropVariantCopy(
      pvarDest : access PROPVARIANT;
      pvarSrc : access constant PROPVARIANT
   ) return HRESULT;
   pragma import (C,PropVariantCopy,"PropVariantCopy");
   function PropVariantClear(
      pvar : access PROPVARIANT
   ) return HRESULT;
   pragma import (C,PropVariantClear,"PropVariantClear");
   function FreePropVariantArray(
      cVariants : ULONG;
      rgvars : access PROPVARIANT
   ) return HRESULT;
   pragma import (C,FreePropVariantArray,"FreePropVariantArray");
   function CoWaitForMultipleHandles(
      dwFlags : DWORD;
      dwTimeout : DWORD;
      cHandles : ULONG;
      pHandles : LPHANDLE;
      lpdwindex : LPDWORD
   ) return HRESULT;
   pragma import (C,CoWaitForMultipleHandles,"CoWaitForMultipleHandles");
   type tagCOWAIT_FLAGS is (
      COWAIT_DEFAULT,
      COWAIT_WAITALL,
      COWAIT_ALERTABLE,
      COWAIT_INPUTAVAILABLE,
      COWAIT_DISPATCH_CALLS,
      COWAIT_DISPATCH_WINDOW_MESSAGES
   );
   for tagCOWAIT_FLAGS use (
      COWAIT_DEFAULT => 0,
      COWAIT_WAITALL => 1,
      COWAIT_ALERTABLE => 2,
      COWAIT_INPUTAVAILABLE => 4,
      COWAIT_DISPATCH_CALLS => 8,
      COWAIT_DISPATCH_WINDOW_MESSAGES => 16
   );
   for tagCOWAIT_FLAGS'Size use 32;
   subtype COWAIT_FLAGS is tagCOWAIT_FLAGS; -- CXType_Elaborated
   type CWMO_FLAGS is (
      CWMO_DEFAULT,
      CWMO_DISPATCH_CALLS,
      CWMO_DISPATCH_WINDOW_MESSAGES
   );
   for CWMO_FLAGS use (
      CWMO_DEFAULT => 0,
      CWMO_DISPATCH_CALLS => 1,
      CWMO_DISPATCH_WINDOW_MESSAGES => 2
   );
   for CWMO_FLAGS'Size use 32;
   function CoWaitForMultipleObjects(
      dwFlags : DWORD;
      dwTimeout : DWORD;
      cHandles : ULONG;
      pHandles : access constant HANDLE;
      lpdwindex : LPDWORD
   ) return HRESULT;
   pragma import (C,CoWaitForMultipleObjects,"CoWaitForMultipleObjects");
   function CoGetTreatAsClass(
      clsidOld : access constant IID;
      pClsidNew : LPCLSID
   ) return HRESULT;
   pragma import (C,CoGetTreatAsClass,"CoGetTreatAsClass");
   function CoInvalidateRemoteMachineBindings(
      pszMachineName : LPOLESTR
   ) return HRESULT;
   pragma import (C,CoInvalidateRemoteMachineBindings,"CoInvalidateRemoteMachineBindings");
   type AgileReferenceOptions is (
      AGILEREFERENCE_DEFAULT,
      AGILEREFERENCE_DELAYEDMARSHAL
   );
   for AgileReferenceOptions use (
      AGILEREFERENCE_DEFAULT => 0,
      AGILEREFERENCE_DELAYEDMARSHAL => 1
   );
   for AgileReferenceOptions'Size use 32;
   function RoGetAgileReference(
      options : Void;
      riid : access constant IID;
      pUnk : access IUnknown;
      ppAgileReference : access IAgileReference_Ptr
   ) return HRESULT;
   pragma import (C,RoGetAgileReference,"RoGetAgileReference");
   subtype LPFNGETCLASSOBJECT is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] HRESULT (const IID &, const IID &, LPVOID *)
   subtype LPFNCANUNLOADNOW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] HRESULT ()
   function DllGetClassObject(
      rclsid : access constant IID;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,DllGetClassObject,"DllGetClassObject");
   function DllCanUnloadNow return HRESULT;
   pragma import (C,DllCanUnloadNow,"DllCanUnloadNow");
   procedure CoTaskMemAlloc(
      cb : SIZE_T
   );
   pragma import (C,CoTaskMemAlloc,"CoTaskMemAlloc");
   procedure CoTaskMemRealloc(
      pv : LPVOID;
      cb : SIZE_T
   );
   pragma import (C,CoTaskMemRealloc,"CoTaskMemRealloc");
   procedure CoTaskMemFree(
      pv : LPVOID
   );
   pragma import (C,CoTaskMemFree,"CoTaskMemFree");
   function CoFileTimeNow(
      lpFileTime_x : access FILETIME
   ) return HRESULT;
   pragma import (C,CoFileTimeNow,"CoFileTimeNow");
   function CLSIDFromProgIDEx(
      lpszProgID : LPCOLESTR;
      lpclsid_x : LPCLSID
   ) return HRESULT;
   pragma import (C,CLSIDFromProgIDEx,"CLSIDFromProgIDEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/objidl.h>
   type IMallocSpy; -- Forward Declaration
   type IBindCtx; -- Forward Declaration
   type IEnumMoniker; -- Forward Declaration
   type IRunnableObject; -- Forward Declaration
   type IRunningObjectTable; -- Forward Declaration
   type IPersist; -- Forward Declaration
   type IPersistStream; -- Forward Declaration
   type IMoniker; -- Forward Declaration
   type IROTData; -- Forward Declaration
   type IEnumSTATSTG; -- Forward Declaration
   type IStorage; -- Forward Declaration
   type IPersistFile; -- Forward Declaration
   type IPersistStorage; -- Forward Declaration
   type ILockBytes; -- Forward Declaration
   type IEnumFORMATETC; -- Forward Declaration
   type IEnumSTATDATA; -- Forward Declaration
   type IRootStorage; -- Forward Declaration
   type IAdviseSink; -- Forward Declaration
   type AsyncIAdviseSink; -- Forward Declaration
   type IAdviseSink2; -- Forward Declaration
   type AsyncIAdviseSink2; -- Forward Declaration
   type IDataObject; -- Forward Declaration
   type IDataAdviseHolder; -- Forward Declaration
   type IMessageFilter; -- Forward Declaration
   type IClassActivator; -- Forward Declaration
   type IFillLockBytes; -- Forward Declaration
   type IProgressNotify; -- Forward Declaration
   type ILayoutStorage; -- Forward Declaration
   type IBlockingLock; -- Forward Declaration
   type ITimeAndNoticeControl; -- Forward Declaration
   type IOplockStorage; -- Forward Declaration
   type IDirectWriterLock; -- Forward Declaration
   type IUrlMon; -- Forward Declaration
   type IForegroundTransfer; -- Forward Declaration
   type IThumbnailExtractor; -- Forward Declaration
   type IDummyHICONIncluder; -- Forward Declaration
   type IProcessLock; -- Forward Declaration
   type ISurrogateService; -- Forward Declaration
   type IInitializeSpy; -- Forward Declaration
   type IApartmentShutdown; -- Forward Declaration
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/unknwn.h>
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/objidl.h>
   type LPMALLOCSPY is access IMallocSpy; -- CXType_Pointer - CXType_Typedef
   type IMallocSpy_Interface is interface and IUnknown_Interface;
      function PreAlloc(
         This : access IMallocSpy_Interface;
         cbRequest : SIZE_T
      ) return SIZE_T is abstract;
      procedure PostAlloc(
         This : access IMallocSpy_Interface;
         pActual : access Void
      ) is abstract;
      procedure PreFree(
         This : access IMallocSpy_Interface;
         pRequest : access Void;
         fSpyed : BOOL
      ) is abstract;
      procedure PostFree(
         This : access IMallocSpy_Interface;
         fSpyed : BOOL
      ) is abstract;
      function PreRealloc(
         This : access IMallocSpy_Interface;
         pRequest : access Void;
         cbRequest : SIZE_T;
         ppNewRequest : access LPVOID;
         fSpyed : BOOL
      ) return SIZE_T is abstract;
      procedure PostRealloc(
         This : access IMallocSpy_Interface;
         pActual : access Void;
         fSpyed : BOOL
      ) is abstract;
      procedure PreGetSize(
         This : access IMallocSpy_Interface;
         pRequest : access Void;
         fSpyed : BOOL
      ) is abstract;
      function PostGetSize(
         This : access IMallocSpy_Interface;
         cbActual : SIZE_T;
         fSpyed : BOOL
      ) return SIZE_T is abstract;
      procedure PreDidAlloc(
         This : access IMallocSpy_Interface;
         pRequest : access Void;
         fSpyed : BOOL
      ) is abstract;
      function PostDidAlloc(
         This : access IMallocSpy_Interface;
         pRequest : access Void;
         fSpyed : BOOL;
         fActual : Interfaces.C.Int
      ) return Interfaces.C.Int is abstract;
      procedure PreHeapMinimize(This : access IMallocSpy_Interface) is abstract;
      procedure PostHeapMinimize(This : access IMallocSpy_Interface) is abstract;
   type IMallocSpy is access IMallocSpy_Interface'Class;
   type IMallocSpy_Ptr is access IMallocSpy;
   type LPBC is access IBindCtx; -- CXType_Pointer - CXType_Typedef
   type LPBINDCTX is access IBindCtx; -- CXType_Pointer - CXType_Typedef
   type tagBIND_OPTS is record
      cbStruct : DWORD;
      grfFlags : DWORD;
      grfMode : DWORD;
      dwTickCountDeadline : DWORD;
   end record;
   subtype BIND_OPTS is tagBIND_OPTS; -- CXType_Elaborated
   type LPBIND_OPTS is access tagBIND_OPTS; -- CXType_Pointer - CXType_Elaborated
   type tagBIND_OPTS2 is record
      dwTrackFlags : DWORD;
      dwClassContext : DWORD;
      locale : LCID;
      pServerInfo : access COSERVERINFO;
   end record;
   subtype BIND_OPTS2 is tagBIND_OPTS2; -- CXType_Elaborated
   type LPBIND_OPTS2 is access tagBIND_OPTS2; -- CXType_Pointer - CXType_Elaborated
   type tagBIND_OPTS3 is record
      hwnd_x : HWND;
   end record;
   subtype BIND_OPTS3 is tagBIND_OPTS3; -- CXType_Elaborated
   type LPBIND_OPTS3 is access tagBIND_OPTS3; -- CXType_Pointer - CXType_Elaborated
   type tagBIND_FLAGS is (
      BIND_MAYBOTHERUSER,
      BIND_JUSTTESTEXISTENCE
   );
   for tagBIND_FLAGS use (
      BIND_MAYBOTHERUSER => 1,
      BIND_JUSTTESTEXISTENCE => 2
   );
   for tagBIND_FLAGS'Size use 32;
   subtype BIND_FLAGS is tagBIND_FLAGS; -- CXType_Elaborated
   type IRunningObjectTable_Ptr is access all IRunningObjectTable; -- Auto Generated Dependancy
   type IBindCtx_Interface is interface and IUnknown_Interface;
      function RegisterObjectBound(
         This : access IBindCtx_Interface;
         punk : access Void
      ) return HRESULT is abstract;
      function RevokeObjectBound(
         This : access IBindCtx_Interface;
         punk : access Void
      ) return HRESULT is abstract;
      function ReleaseBoundObjects(This : access IBindCtx_Interface) return HRESULT is abstract;
      function SetBindOptions(
         This : access IBindCtx_Interface;
         pbindopts : access BIND_OPTS
      ) return HRESULT is abstract;
      function GetBindOptions(
         This : access IBindCtx_Interface;
         pbindopts : access BIND_OPTS
      ) return HRESULT is abstract;
      function GetRunningObjectTable(
         This : access IBindCtx_Interface;
         pprot : access IRunningObjectTable_Ptr
      ) return HRESULT is abstract;
      function RegisterObjectParam(
         This : access IBindCtx_Interface;
         pszKey : LPOLESTR;
         punk : access Void
      ) return HRESULT is abstract;
      function GetObjectParam(
         This : access IBindCtx_Interface;
         pszKey : LPOLESTR;
         ppunk : access LPVOID
      ) return HRESULT is abstract;
      function EnumObjectParam(
         This : access IBindCtx_Interface;
         ppenum : access LPENUMSTRING
      ) return HRESULT is abstract;
      function RevokeObjectParam(
         This : access IBindCtx_Interface;
         pszKey : LPOLESTR
      ) return HRESULT is abstract;
   type IBindCtx is access IBindCtx_Interface'Class;
   type IBindCtx_Ptr is access IBindCtx;
   function IBindCtx_RemoteSetBindOptions_Proxy(
      This : access IBindCtx;
      pbindopts : access BIND_OPTS2
   ) return HRESULT;
   pragma import (C,IBindCtx_RemoteSetBindOptions_Proxy,"IBindCtx_RemoteSetBindOptions_Proxy");
   procedure IBindCtx_RemoteSetBindOptions_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindCtx_RemoteSetBindOptions_Stub,"IBindCtx_RemoteSetBindOptions_Stub");
   function IBindCtx_RemoteGetBindOptions_Proxy(
      This : access IBindCtx;
      pbindopts : access BIND_OPTS2
   ) return HRESULT;
   pragma import (C,IBindCtx_RemoteGetBindOptions_Proxy,"IBindCtx_RemoteGetBindOptions_Proxy");
   procedure IBindCtx_RemoteGetBindOptions_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindCtx_RemoteGetBindOptions_Stub,"IBindCtx_RemoteGetBindOptions_Stub");
   type LPENUMMONIKER is access IEnumMoniker; -- CXType_Pointer - CXType_Typedef
   type IMoniker_Ptr is access all IMoniker; -- Auto Generated Dependancy
   type IEnumMoniker_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumMoniker_Interface;
         celt : ULONG;
         rgelt : access IMoniker_Ptr;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumMoniker_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumMoniker_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumMoniker_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumMoniker is access IEnumMoniker_Interface'Class;
   type IEnumMoniker_Ptr is access IEnumMoniker;
   function IEnumMoniker_RemoteNext_Proxy(
      This : access IEnumMoniker;
      celt : ULONG;
      rgelt : access IMoniker_Ptr;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumMoniker_RemoteNext_Proxy,"IEnumMoniker_RemoteNext_Proxy");
   procedure IEnumMoniker_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumMoniker_RemoteNext_Stub,"IEnumMoniker_RemoteNext_Stub");
   type LPRUNNABLEOBJECT is access IRunnableObject; -- CXType_Pointer - CXType_Typedef
   type IRunnableObject_Interface is interface and IUnknown_Interface;
      function GetRunningClass(
         This : access IRunnableObject_Interface;
         lpClsid_x : LPCLSID
      ) return HRESULT is abstract;
      function Run(
         This : access IRunnableObject_Interface;
         pbc : LPBINDCTX
      ) return HRESULT is abstract;
      function IsRunning(This : access IRunnableObject_Interface) return BOOL is abstract;
      function LockRunning(
         This : access IRunnableObject_Interface;
         fLock : BOOL;
         fLastUnlockCloses : BOOL
      ) return HRESULT is abstract;
      function SetContainedObject(
         This : access IRunnableObject_Interface;
         fContained : BOOL
      ) return HRESULT is abstract;
   type IRunnableObject is access IRunnableObject_Interface'Class;
   type IRunnableObject_Ptr is access IRunnableObject;
   function IRunnableObject_RemoteIsRunning_Proxy(
      This : access IRunnableObject
   ) return HRESULT;
   pragma import (C,IRunnableObject_RemoteIsRunning_Proxy,"IRunnableObject_RemoteIsRunning_Proxy");
   procedure IRunnableObject_RemoteIsRunning_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IRunnableObject_RemoteIsRunning_Stub,"IRunnableObject_RemoteIsRunning_Stub");
   type LPRUNNINGOBJECTTABLE is access IRunningObjectTable; -- CXType_Pointer - CXType_Typedef
   type IRunningObjectTable_Interface is interface and IUnknown_Interface;
      function Register(
         This : access IRunningObjectTable_Interface;
         grfFlags : DWORD;
         punkObject : access Void;
         pmkObjectName : access IMoniker;
         pdwRegister : access DWORD
      ) return HRESULT is abstract;
      function Revoke(
         This : access IRunningObjectTable_Interface;
         dwRegister : DWORD
      ) return HRESULT is abstract;
      function IsRunning(
         This : access IRunningObjectTable_Interface;
         pmkObjectName : access IMoniker
      ) return HRESULT is abstract;
      function GetObjectA(
         This : access IRunningObjectTable_Interface;
         pmkObjectName : access IMoniker;
         ppunkObject : access LPVOID
      ) return HRESULT is abstract;
      function NoteChangeTime(
         This : access IRunningObjectTable_Interface;
         dwRegister : DWORD;
         pfiletime_x : access FILETIME
      ) return HRESULT is abstract;
      function GetTimeOfLastChange(
         This : access IRunningObjectTable_Interface;
         pmkObjectName : access IMoniker;
         pfiletime_x : access FILETIME
      ) return HRESULT is abstract;
      function EnumRunning(
         This : access IRunningObjectTable_Interface;
         ppenumMoniker : access LPENUMMONIKER
      ) return HRESULT is abstract;
   type IRunningObjectTable is access IRunningObjectTable_Interface'Class;
   type LPPERSIST is access IPersist; -- CXType_Pointer - CXType_Typedef
   type IPersist_Interface is interface and IUnknown_Interface;
      function GetClassID(
         This : access IPersist_Interface;
         pClassID : access CLSID
      ) return HRESULT is abstract;
   type IPersist is access IPersist_Interface'Class;
   type IPersist_Ptr is access IPersist;
   type LPPERSISTSTREAM is access IPersistStream; -- CXType_Pointer - CXType_Typedef
   type IPersistStream_Interface is interface and IPersist_Interface;
      function IsDirty(This : access IPersistStream_Interface) return HRESULT is abstract;
      function Load(
         This : access IPersistStream_Interface;
         pStm : access IStream
      ) return HRESULT is abstract;
      function Save(
         This : access IPersistStream_Interface;
         pStm : access IStream;
         fClearDirty : BOOL
      ) return HRESULT is abstract;
      function GetSizeMax(
         This : access IPersistStream_Interface;
         pcbSize : access ULARGE_INTEGER
      ) return HRESULT is abstract;
   type IPersistStream is access IPersistStream_Interface'Class;
   type IPersistStream_Ptr is access IPersistStream;
   type LPMONIKER is access IMoniker; -- CXType_Pointer - CXType_Typedef
   type tagMKSYS is (
      MKSYS_NONE,
      MKSYS_GENERICCOMPOSITE,
      MKSYS_FILEMONIKER,
      MKSYS_ANTIMONIKER,
      MKSYS_ITEMMONIKER,
      MKSYS_POINTERMONIKER,
      MKSYS_CLASSMONIKER,
      MKSYS_OBJREFMONIKER,
      MKSYS_SESSIONMONIKER,
      MKSYS_LUAMONIKER
   );
   for tagMKSYS use (
      MKSYS_NONE => 0,
      MKSYS_GENERICCOMPOSITE => 1,
      MKSYS_FILEMONIKER => 2,
      MKSYS_ANTIMONIKER => 3,
      MKSYS_ITEMMONIKER => 4,
      MKSYS_POINTERMONIKER => 5,
      MKSYS_CLASSMONIKER => 7,
      MKSYS_OBJREFMONIKER => 8,
      MKSYS_SESSIONMONIKER => 9,
      MKSYS_LUAMONIKER => 10
   );
   for tagMKSYS'Size use 32;
   subtype MKSYS is tagMKSYS; -- CXType_Elaborated
   type tagMKREDUCE is (
      MKRREDUCE_ALL,
      MKRREDUCE_THROUGHUSER,
      MKRREDUCE_TOUSER,
      MKRREDUCE_ONE
   );
   for tagMKREDUCE use (
      MKRREDUCE_ALL => 0,
      MKRREDUCE_THROUGHUSER => 65536,
      MKRREDUCE_TOUSER => 131072,
      MKRREDUCE_ONE => 196608
   );
   for tagMKREDUCE'Size use 32;
   subtype MKRREDUCE is tagMKREDUCE; -- CXType_Elaborated
   type IMoniker_Interface is interface and IPersistStream_Interface;
      function BindToObject(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         pmkToLeft : access Void;
         riidResult : access constant IID;
         ppvResult : access LPVOID
      ) return HRESULT is abstract;
      function BindToStorage(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         pmkToLeft : access Void;
         riid : access constant IID;
         ppvObj : access LPVOID
      ) return HRESULT is abstract;
      function Reduce(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         dwReduceHowFar : DWORD;
         ppmkToLeft : access LPVOID;
         ppmkReduced : access LPVOID
      ) return HRESULT is abstract;
      function ComposeWith(
         This : access IMoniker_Interface;
         pmkRight : access Void;
         fOnlyIfNotGeneric : BOOL;
         ppmkComposite : access LPVOID
      ) return HRESULT is abstract;
      function Enum(
         This : access IMoniker_Interface;
         fForward : BOOL;
         ppenumMoniker : access LPENUMMONIKER
      ) return HRESULT is abstract;
      function IsEqual(
         This : access IMoniker_Interface;
         pmkOtherMoniker : access Void
      ) return HRESULT is abstract;
      function Hash(
         This : access IMoniker_Interface;
         pdwHash : access DWORD
      ) return HRESULT is abstract;
      function IsRunning(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         pmkToLeft : access Void;
         pmkNewlyRunning : access Void
      ) return HRESULT is abstract;
      function GetTimeOfLastChange(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         pmkToLeft : access Void;
         pFileTime_x : access FILETIME
      ) return HRESULT is abstract;
      function Inverse(
         This : access IMoniker_Interface;
         ppmk : access LPVOID
      ) return HRESULT is abstract;
      function CommonPrefixWith(
         This : access IMoniker_Interface;
         pmkOther : access Void;
         ppmkPrefix : access LPVOID
      ) return HRESULT is abstract;
      function RelativePathTo(
         This : access IMoniker_Interface;
         pmkOther : access Void;
         ppmkRelPath : access LPVOID
      ) return HRESULT is abstract;
      function GetDisplayName(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         pmkToLeft : access Void;
         ppszDisplayName : access LPOLESTR
      ) return HRESULT is abstract;
      function ParseDisplayName(
         This : access IMoniker_Interface;
         pbc : access IBindCtx;
         pmkToLeft : access Void;
         pszDisplayName : LPOLESTR;
         pchEaten : access ULONG;
         ppmkOut : access LPVOID
      ) return HRESULT is abstract;
      function IsSystemMoniker(
         This : access IMoniker_Interface;
         pdwMksys : access DWORD
      ) return HRESULT is abstract;
   type IMoniker is access IMoniker_Interface'Class;
   function IMoniker_RemoteBindToObject_Proxy(
      This : access IMoniker;
      pbc : access IBindCtx;
      pmkToLeft : access IMoniker;
      riidResult : access constant IID;
      ppvResult : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IMoniker_RemoteBindToObject_Proxy,"IMoniker_RemoteBindToObject_Proxy");
   procedure IMoniker_RemoteBindToObject_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IMoniker_RemoteBindToObject_Stub,"IMoniker_RemoteBindToObject_Stub");
   function IMoniker_RemoteBindToStorage_Proxy(
      This : access IMoniker;
      pbc : access IBindCtx;
      pmkToLeft : access IMoniker;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IMoniker_RemoteBindToStorage_Proxy,"IMoniker_RemoteBindToStorage_Proxy");
   procedure IMoniker_RemoteBindToStorage_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IMoniker_RemoteBindToStorage_Stub,"IMoniker_RemoteBindToStorage_Stub");
   type IROTData_Interface is interface and IUnknown_Interface;
      function GetComparisonData(
         This : access IROTData_Interface;
         pbData : access byte;
         cbMax : ULONG;
         pcbData : access ULONG
      ) return HRESULT is abstract;
   type IROTData is access IROTData_Interface'Class;
   type IROTData_Ptr is access IROTData;
   type LPENUMSTATSTG is access IEnumSTATSTG; -- CXType_Pointer - CXType_Typedef
   type IEnumSTATSTG_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumSTATSTG_Interface;
         celt : ULONG;
         rgelt : access STATSTG;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumSTATSTG_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumSTATSTG_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumSTATSTG_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumSTATSTG is access IEnumSTATSTG_Interface'Class;
   type IEnumSTATSTG_Ptr is access IEnumSTATSTG;
   function IEnumSTATSTG_RemoteNext_Proxy(
      This : access IEnumSTATSTG;
      celt : ULONG;
      rgelt : access STATSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATSTG_RemoteNext_Proxy,"IEnumSTATSTG_RemoteNext_Proxy");
   procedure IEnumSTATSTG_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumSTATSTG_RemoteNext_Stub,"IEnumSTATSTG_RemoteNext_Stub");
   type LPSTORAGE is access IStorage; -- CXType_Pointer - CXType_Typedef
   type tagRemSNB is record
      ulCntStr : ULONG;
      ulCntChar : ULONG;
      rgString : Void;
   end record;
   subtype RemSNB is tagRemSNB; -- CXType_Elaborated
   type wireSNB is access RemSNB; -- CXType_Pointer - CXType_Typedef
   type SNB is access LPOLESTR; -- CXType_Pointer - CXType_Typedef
   type IStorage_Interface is interface and IUnknown_Interface;
      function CreateStream(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR;
         grfMode : DWORD;
         reserved1 : DWORD;
         reserved2 : DWORD;
         ppstm : access LPSTREAM
      ) return HRESULT is abstract;
      function OpenStream(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR;
         reserved1 : access Void;
         grfMode : DWORD;
         reserved2 : DWORD;
         ppstm : access LPSTREAM
      ) return HRESULT is abstract;
      function CreateStorage(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR;
         grfMode : DWORD;
         reserved1 : DWORD;
         reserved2 : DWORD;
         ppstg : access LPVOID
      ) return HRESULT is abstract;
      function OpenStorage(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR;
         pstgPriority : access Void;
         grfMode : DWORD;
         snbExclude : SNB;
         reserved : DWORD;
         ppstg : access LPVOID
      ) return HRESULT is abstract;
      function CopyTo(
         This : access IStorage_Interface;
         ciidExclude : DWORD;
         rgiidExclude : access constant IID;
         snbExclude : SNB;
         pstgDest : access Void
      ) return HRESULT is abstract;
      function MoveElementTo(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR;
         pstgDest : access Void;
         pwcsNewName : access constant OLECHAR;
         grfFlags : DWORD
      ) return HRESULT is abstract;
      function Commit(
         This : access IStorage_Interface;
         grfCommitFlags : DWORD
      ) return HRESULT is abstract;
      function Revert(This : access IStorage_Interface) return HRESULT is abstract;
      function EnumElements(
         This : access IStorage_Interface;
         reserved1 : DWORD;
         reserved2 : access Void;
         reserved3 : DWORD;
         ppenum : access LPENUMSTATSTG
      ) return HRESULT is abstract;
      function DestroyElement(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR
      ) return HRESULT is abstract;
      function RenameElement(
         This : access IStorage_Interface;
         pwcsOldName : access constant OLECHAR;
         pwcsNewName : access constant OLECHAR
      ) return HRESULT is abstract;
      function SetElementTimes(
         This : access IStorage_Interface;
         pwcsName : access constant OLECHAR;
         pctime : access constant FILETIME;
         patime : access constant FILETIME;
         pmtime : access constant FILETIME
      ) return HRESULT is abstract;
      function SetClass(
         This : access IStorage_Interface;
         clsid_x : access constant IID
      ) return HRESULT is abstract;
      function SetStateBits(
         This : access IStorage_Interface;
         grfStateBits : DWORD;
         grfMask : DWORD
      ) return HRESULT is abstract;
      function Stat(
         This : access IStorage_Interface;
         pstatstg : access STATSTG;
         grfStatFlag : DWORD
      ) return HRESULT is abstract;
   type IStorage is access IStorage_Interface'Class;
   type IStorage_Ptr is access IStorage;
   function IStorage_RemoteOpenStream_Proxy(
      This : access IStorage;
      pwcsName : access constant OLECHAR;
      cbReserved1 : ULONG;
      reserved1 : access byte;
      grfMode : DWORD;
      reserved2 : DWORD;
      ppstm : access LPSTREAM
   ) return HRESULT;
   pragma import (C,IStorage_RemoteOpenStream_Proxy,"IStorage_RemoteOpenStream_Proxy");
   procedure IStorage_RemoteOpenStream_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IStorage_RemoteOpenStream_Stub,"IStorage_RemoteOpenStream_Stub");
   function IStorage_RemoteCopyTo_Proxy(
      This : access IStorage;
      ciidExclude : DWORD;
      rgiidExclude : access constant IID;
      snbExclude : SNB;
      pstgDest : access IStorage
   ) return HRESULT;
   pragma import (C,IStorage_RemoteCopyTo_Proxy,"IStorage_RemoteCopyTo_Proxy");
   procedure IStorage_RemoteCopyTo_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IStorage_RemoteCopyTo_Stub,"IStorage_RemoteCopyTo_Stub");
   function IStorage_RemoteEnumElements_Proxy(
      This : access IStorage;
      reserved1 : DWORD;
      cbReserved2 : ULONG;
      reserved2 : access byte;
      reserved3 : DWORD;
      ppenum : access LPENUMSTATSTG
   ) return HRESULT;
   pragma import (C,IStorage_RemoteEnumElements_Proxy,"IStorage_RemoteEnumElements_Proxy");
   procedure IStorage_RemoteEnumElements_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IStorage_RemoteEnumElements_Stub,"IStorage_RemoteEnumElements_Stub");
   type LPPERSISTFILE is access IPersistFile; -- CXType_Pointer - CXType_Typedef
   type IPersistFile_Interface is interface and IPersist_Interface;
      function IsDirty(This : access IPersistFile_Interface) return HRESULT is abstract;
      function Load(
         This : access IPersistFile_Interface;
         pszFileName : LPCOLESTR;
         dwMode : DWORD
      ) return HRESULT is abstract;
      function Save(
         This : access IPersistFile_Interface;
         pszFileName : LPCOLESTR;
         fRemember : BOOL
      ) return HRESULT is abstract;
      function SaveCompleted(
         This : access IPersistFile_Interface;
         pszFileName : LPCOLESTR
      ) return HRESULT is abstract;
      function GetCurFile(
         This : access IPersistFile_Interface;
         ppszFileName : access LPOLESTR
      ) return HRESULT is abstract;
   type IPersistFile is access IPersistFile_Interface'Class;
   type IPersistFile_Ptr is access IPersistFile;
   type LPPERSISTSTORAGE is access IPersistStorage; -- CXType_Pointer - CXType_Typedef
   type IPersistStorage_Interface is interface and IPersist_Interface;
      function IsDirty(This : access IPersistStorage_Interface) return HRESULT is abstract;
      function InitNew(
         This : access IPersistStorage_Interface;
         pStg : access IStorage
      ) return HRESULT is abstract;
      function Load(
         This : access IPersistStorage_Interface;
         pStg : access IStorage
      ) return HRESULT is abstract;
      function Save(
         This : access IPersistStorage_Interface;
         pStgSave : access IStorage;
         fSameAsLoad : BOOL
      ) return HRESULT is abstract;
      function SaveCompleted(
         This : access IPersistStorage_Interface;
         pStgNew : access IStorage
      ) return HRESULT is abstract;
      function HandsOffStorage(This : access IPersistStorage_Interface) return HRESULT is abstract;
   type IPersistStorage is access IPersistStorage_Interface'Class;
   type IPersistStorage_Ptr is access IPersistStorage;
   type LPLOCKBYTES is access ILockBytes; -- CXType_Pointer - CXType_Typedef
   type ILockBytes_Interface is interface and IUnknown_Interface;
      function ReadAt(
         This : access ILockBytes_Interface;
         ulOffset : ULARGE_INTEGER;
         pv : access Void;
         cb : ULONG;
         pcbRead : access ULONG
      ) return HRESULT is abstract;
      function WriteAt(
         This : access ILockBytes_Interface;
         ulOffset : ULARGE_INTEGER;
         pv : access Void;
         cb : ULONG;
         pcbWritten : access ULONG
      ) return HRESULT is abstract;
      function Flush(This : access ILockBytes_Interface) return HRESULT is abstract;
      function SetSize(
         This : access ILockBytes_Interface;
         cb : ULARGE_INTEGER
      ) return HRESULT is abstract;
      function LockRegion(
         This : access ILockBytes_Interface;
         libOffset : ULARGE_INTEGER;
         cb : ULARGE_INTEGER;
         dwLockType : DWORD
      ) return HRESULT is abstract;
      function UnlockRegion(
         This : access ILockBytes_Interface;
         libOffset : ULARGE_INTEGER;
         cb : ULARGE_INTEGER;
         dwLockType : DWORD
      ) return HRESULT is abstract;
      function Stat(
         This : access ILockBytes_Interface;
         pstatstg : access STATSTG;
         grfStatFlag : DWORD
      ) return HRESULT is abstract;
   type ILockBytes is access ILockBytes_Interface'Class;
   type ILockBytes_Ptr is access ILockBytes;
   function ILockBytes_RemoteReadAt_Proxy(
      This : access ILockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access byte;
      cb : ULONG;
      pcbRead : access ULONG
   ) return HRESULT;
   pragma import (C,ILockBytes_RemoteReadAt_Proxy,"ILockBytes_RemoteReadAt_Proxy");
   procedure ILockBytes_RemoteReadAt_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ILockBytes_RemoteReadAt_Stub,"ILockBytes_RemoteReadAt_Stub");
   function ILockBytes_RemoteWriteAt_Proxy(
      This : access ILockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,ILockBytes_RemoteWriteAt_Proxy,"ILockBytes_RemoteWriteAt_Proxy");
   procedure ILockBytes_RemoteWriteAt_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ILockBytes_RemoteWriteAt_Stub,"ILockBytes_RemoteWriteAt_Stub");
   type LPENUMFORMATETC is access IEnumFORMATETC; -- CXType_Pointer - CXType_Typedef
   type tagDVTARGETDEVICE is record
      tdSize : DWORD;
      tdDriverNameOffset : WORD;
      tdDeviceNameOffset : WORD;
      tdPortNameOffset : WORD;
      tdExtDevmodeOffset : WORD;
      tdData : Void;
   end record;
   subtype DVTARGETDEVICE is tagDVTARGETDEVICE; -- CXType_Elaborated
   type LPCLIPFORMAT is access CLIPFORMAT; -- CXType_Pointer - CXType_Typedef
   type tagFORMATETC is record
      cfFormat : CLIPFORMAT;
      ptd : access DVTARGETDEVICE;
      dwAspect : DWORD;
      lindex : LONG;
      tymed : DWORD;
   end record;
   subtype FORMATETC is tagFORMATETC; -- CXType_Elaborated
   type LPFORMATETC is access tagFORMATETC; -- CXType_Pointer - CXType_Elaborated
   type IEnumFORMATETC_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumFORMATETC_Interface;
         celt : ULONG;
         rgelt : access FORMATETC;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumFORMATETC_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumFORMATETC_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumFORMATETC_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumFORMATETC is access IEnumFORMATETC_Interface'Class;
   type IEnumFORMATETC_Ptr is access IEnumFORMATETC;
   function IEnumFORMATETC_RemoteNext_Proxy(
      This : access IEnumFORMATETC;
      celt : ULONG;
      rgelt : access FORMATETC;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumFORMATETC_RemoteNext_Proxy,"IEnumFORMATETC_RemoteNext_Proxy");
   procedure IEnumFORMATETC_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumFORMATETC_RemoteNext_Stub,"IEnumFORMATETC_RemoteNext_Stub");
   type LPENUMSTATDATA is access IEnumSTATDATA; -- CXType_Pointer - CXType_Typedef
   type tagADVF is (
      ADVF_NODATA,
      ADVF_PRIMEFIRST,
      ADVF_ONLYONCE,
      ADVFCACHE_NOHANDLER,
      ADVFCACHE_FORCEBUILTIN,
      ADVFCACHE_ONSAVE,
      ADVF_DATAONSTOP
   );
   for tagADVF use (
      ADVF_NODATA => 1,
      ADVF_PRIMEFIRST => 2,
      ADVF_ONLYONCE => 4,
      ADVFCACHE_NOHANDLER => 8,
      ADVFCACHE_FORCEBUILTIN => 16,
      ADVFCACHE_ONSAVE => 32,
      ADVF_DATAONSTOP => 64
   );
   for tagADVF'Size use 32;
   subtype ADVF is tagADVF; -- CXType_Elaborated
   type tagSTATDATA is record
      formatetc_x : FORMATETC;
      advf_x : DWORD;
      pAdvSink : access IAdviseSink;
      dwConnection : DWORD;
   end record;
   subtype STATDATA is tagSTATDATA; -- CXType_Elaborated
   type LPSTATDATA is access STATDATA; -- CXType_Pointer - CXType_Typedef
   type IEnumSTATDATA_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumSTATDATA_Interface;
         celt : ULONG;
         rgelt : access STATDATA;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumSTATDATA_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumSTATDATA_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumSTATDATA_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumSTATDATA is access IEnumSTATDATA_Interface'Class;
   type IEnumSTATDATA_Ptr is access IEnumSTATDATA;
   function IEnumSTATDATA_RemoteNext_Proxy(
      This : access IEnumSTATDATA;
      celt : ULONG;
      rgelt : access STATDATA;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATDATA_RemoteNext_Proxy,"IEnumSTATDATA_RemoteNext_Proxy");
   procedure IEnumSTATDATA_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumSTATDATA_RemoteNext_Stub,"IEnumSTATDATA_RemoteNext_Stub");
   type LPROOTSTORAGE is access IRootStorage; -- CXType_Pointer - CXType_Typedef
   type IRootStorage_Interface is interface and IUnknown_Interface;
      function SwitchToFile(
         This : access IRootStorage_Interface;
         pszFile : LPOLESTR
      ) return HRESULT is abstract;
   type IRootStorage is access IRootStorage_Interface'Class;
   type IRootStorage_Ptr is access IRootStorage;
   type LPADVISESINK is access IAdviseSink; -- CXType_Pointer - CXType_Typedef
   type tagTYMED is (
      TYMED_NULL,
      TYMED_HGLOBAL,
      TYMED_FILE,
      TYMED_ISTREAM,
      TYMED_ISTORAGE,
      TYMED_GDI,
      TYMED_MFPICT,
      TYMED_ENHMF
   );
   for tagTYMED use (
      TYMED_NULL => 0,
      TYMED_HGLOBAL => 1,
      TYMED_FILE => 2,
      TYMED_ISTREAM => 4,
      TYMED_ISTORAGE => 8,
      TYMED_GDI => 16,
      TYMED_MFPICT => 32,
      TYMED_ENHMF => 64
   );
   for tagTYMED'Size use 32;
   subtype TYMED is tagTYMED; -- CXType_Elaborated
   type tagRemSTGMEDIUM is record
      tymed_x : DWORD;
      dwHandleType : DWORD;
      pData : ULONG;
      pUnkForRelease : ULONG;
      cbData : ULONG;
      data : Void;
   end record;
   subtype RemSTGMEDIUM is tagRemSTGMEDIUM; -- CXType_Elaborated
   type tagSTGMEDIUM is record
      tymed_x : DWORD;
      pUnkForRelease : access IUnknown;
   end record;
   subtype uSTGMEDIUM is tagSTGMEDIUM; -- CXType_Elaborated
   type GDI_OBJECT_x is record
      ObjectType : DWORD;
      u : Void;
   end record;
   type MIDL_IAdviseSink_0002_x is null record; -- Union Placeholder [FIXME]
   subtype GDI_OBJECT is GDI_OBJECT_x; -- CXType_Elaborated
   type userSTGMEDIUM_x is record
      pUnkForRelease : access IUnknown;
   end record;
   type STGMEDIUM_UNION_x is record
      tymed_x : DWORD;
      u : Void;
   end record;
   type MIDL_IAdviseSink_0003_x is null record; -- Union Placeholder [FIXME]
   subtype userSTGMEDIUM is userSTGMEDIUM_x; -- CXType_Elaborated
   type wireSTGMEDIUM is access userSTGMEDIUM; -- CXType_Pointer - CXType_Typedef
   subtype STGMEDIUM is uSTGMEDIUM; -- CXType_Typedef
   type wireASYNC_STGMEDIUM is access userSTGMEDIUM; -- CXType_Pointer - CXType_Typedef
   subtype ASYNC_STGMEDIUM is STGMEDIUM; -- CXType_Typedef
   type LPSTGMEDIUM is access STGMEDIUM; -- CXType_Pointer - CXType_Typedef
   type userFLAG_STGMEDIUM_x is record
      ContextFlags : LONG;
      fPassOwnership : LONG;
      Stgmed : userSTGMEDIUM;
   end record;
   subtype userFLAG_STGMEDIUM is userFLAG_STGMEDIUM_x; -- CXType_Elaborated
   type wireFLAG_STGMEDIUM is access userFLAG_STGMEDIUM; -- CXType_Pointer - CXType_Typedef
   type FLAG_STGMEDIUM_x is record
      ContextFlags : LONG;
      fPassOwnership : LONG;
      Stgmed : STGMEDIUM;
   end record;
   subtype FLAG_STGMEDIUM is FLAG_STGMEDIUM_x; -- CXType_Elaborated
   type IAdviseSink_Interface is interface and IUnknown_Interface;
      procedure OnDataChange(
         This : access IAdviseSink_Interface;
         pFormatetc : access FORMATETC;
         pStgmed : access STGMEDIUM
      ) is abstract;
      procedure OnViewChange(
         This : access IAdviseSink_Interface;
         dwAspect : DWORD;
         lindex : LONG
      ) is abstract;
      procedure OnRename(
         This : access IAdviseSink_Interface;
         pmk : access IMoniker
      ) is abstract;
      procedure OnSave(This : access IAdviseSink_Interface) is abstract;
      procedure OnClose(This : access IAdviseSink_Interface) is abstract;
   type IAdviseSink is access IAdviseSink_Interface'Class;
   type IAdviseSink_Ptr is access IAdviseSink;
   function IAdviseSink_RemoteOnDataChange_Proxy(
      This : access IAdviseSink;
      pFormatetc : access FORMATETC;
      pStgmed : access ASYNC_STGMEDIUM
   ) return HRESULT;
   pragma import (C,IAdviseSink_RemoteOnDataChange_Proxy,"IAdviseSink_RemoteOnDataChange_Proxy");
   procedure IAdviseSink_RemoteOnDataChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IAdviseSink_RemoteOnDataChange_Stub,"IAdviseSink_RemoteOnDataChange_Stub");
   function IAdviseSink_RemoteOnViewChange_Proxy(
      This : access IAdviseSink;
      dwAspect : DWORD;
      lindex : LONG
   ) return HRESULT;
   pragma import (C,IAdviseSink_RemoteOnViewChange_Proxy,"IAdviseSink_RemoteOnViewChange_Proxy");
   procedure IAdviseSink_RemoteOnViewChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IAdviseSink_RemoteOnViewChange_Stub,"IAdviseSink_RemoteOnViewChange_Stub");
   function IAdviseSink_RemoteOnRename_Proxy(
      This : access IAdviseSink;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,IAdviseSink_RemoteOnRename_Proxy,"IAdviseSink_RemoteOnRename_Proxy");
   procedure IAdviseSink_RemoteOnRename_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IAdviseSink_RemoteOnRename_Stub,"IAdviseSink_RemoteOnRename_Stub");
   function IAdviseSink_RemoteOnSave_Proxy(
      This : access IAdviseSink
   ) return HRESULT;
   pragma import (C,IAdviseSink_RemoteOnSave_Proxy,"IAdviseSink_RemoteOnSave_Proxy");
   procedure IAdviseSink_RemoteOnSave_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IAdviseSink_RemoteOnSave_Stub,"IAdviseSink_RemoteOnSave_Stub");
   function IAdviseSink_RemoteOnClose_Proxy(
      This : access IAdviseSink
   ) return HRESULT;
   pragma import (C,IAdviseSink_RemoteOnClose_Proxy,"IAdviseSink_RemoteOnClose_Proxy");
   procedure IAdviseSink_RemoteOnClose_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IAdviseSink_RemoteOnClose_Stub,"IAdviseSink_RemoteOnClose_Stub");
   type AsyncIAdviseSink_Interface is interface and IUnknown_Interface;
      procedure Begin_OnDataChange(
         This : access AsyncIAdviseSink_Interface;
         pFormatetc : access FORMATETC;
         pStgmed : access STGMEDIUM
      ) is abstract;
      procedure Finish_OnDataChange(This : access AsyncIAdviseSink_Interface) is abstract;
      procedure Begin_OnViewChange(
         This : access AsyncIAdviseSink_Interface;
         dwAspect : DWORD;
         lindex : LONG
      ) is abstract;
      procedure Finish_OnViewChange(This : access AsyncIAdviseSink_Interface) is abstract;
      procedure Begin_OnRename(
         This : access AsyncIAdviseSink_Interface;
         pmk : access IMoniker
      ) is abstract;
      procedure Finish_OnRename(This : access AsyncIAdviseSink_Interface) is abstract;
      procedure Begin_OnSave(This : access AsyncIAdviseSink_Interface) is abstract;
      procedure Finish_OnSave(This : access AsyncIAdviseSink_Interface) is abstract;
      procedure Begin_OnClose(This : access AsyncIAdviseSink_Interface) is abstract;
      procedure Finish_OnClose(This : access AsyncIAdviseSink_Interface) is abstract;
   type AsyncIAdviseSink is access AsyncIAdviseSink_Interface'Class;
   type AsyncIAdviseSink_Ptr is access AsyncIAdviseSink;
   function AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
      This : access AsyncIAdviseSink;
      pFormatetc : access FORMATETC;
      pStgmed : access ASYNC_STGMEDIUM
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy,"AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy");
   procedure AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub,"AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub");
   function AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy,"AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy");
   procedure AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub,"AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub");
   function AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
      This : access AsyncIAdviseSink;
      dwAspect : DWORD;
      lindex : LONG
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy,"AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy");
   procedure AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub,"AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub");
   function AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy,"AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy");
   procedure AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub,"AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub");
   function AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
      This : access AsyncIAdviseSink;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnRename_Proxy,"AsyncIAdviseSink_Begin_RemoteOnRename_Proxy");
   procedure AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnRename_Stub,"AsyncIAdviseSink_Begin_RemoteOnRename_Stub");
   function AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnRename_Proxy,"AsyncIAdviseSink_Finish_RemoteOnRename_Proxy");
   procedure AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnRename_Stub,"AsyncIAdviseSink_Finish_RemoteOnRename_Stub");
   function AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnSave_Proxy,"AsyncIAdviseSink_Begin_RemoteOnSave_Proxy");
   procedure AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnSave_Stub,"AsyncIAdviseSink_Begin_RemoteOnSave_Stub");
   function AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnSave_Proxy,"AsyncIAdviseSink_Finish_RemoteOnSave_Proxy");
   procedure AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnSave_Stub,"AsyncIAdviseSink_Finish_RemoteOnSave_Stub");
   function AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnClose_Proxy,"AsyncIAdviseSink_Begin_RemoteOnClose_Proxy");
   procedure AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Begin_RemoteOnClose_Stub,"AsyncIAdviseSink_Begin_RemoteOnClose_Stub");
   function AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnClose_Proxy,"AsyncIAdviseSink_Finish_RemoteOnClose_Proxy");
   procedure AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink_Finish_RemoteOnClose_Stub,"AsyncIAdviseSink_Finish_RemoteOnClose_Stub");
   type LPADVISESINK2 is access IAdviseSink2; -- CXType_Pointer - CXType_Typedef
   type IAdviseSink2_Interface is interface and IAdviseSink_Interface;
      procedure OnLinkSrcChange(
         This : access IAdviseSink2_Interface;
         pmk : access IMoniker
      ) is abstract;
   type IAdviseSink2 is access IAdviseSink2_Interface'Class;
   type IAdviseSink2_Ptr is access IAdviseSink2;
   function IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
      This : access IAdviseSink2;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,IAdviseSink2_RemoteOnLinkSrcChange_Proxy,"IAdviseSink2_RemoteOnLinkSrcChange_Proxy");
   procedure IAdviseSink2_RemoteOnLinkSrcChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IAdviseSink2_RemoteOnLinkSrcChange_Stub,"IAdviseSink2_RemoteOnLinkSrcChange_Stub");
   type AsyncIAdviseSink2_Interface is interface and AsyncIAdviseSink_Interface;
      procedure Begin_OnLinkSrcChange(
         This : access AsyncIAdviseSink2_Interface;
         pmk : access IMoniker
      ) is abstract;
      procedure Finish_OnLinkSrcChange(This : access AsyncIAdviseSink2_Interface) is abstract;
   type AsyncIAdviseSink2 is access AsyncIAdviseSink2_Interface'Class;
   type AsyncIAdviseSink2_Ptr is access AsyncIAdviseSink2;
   function AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
      This : access AsyncIAdviseSink2;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy,"AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy");
   procedure AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub,"AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub");
   function AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
      This : access AsyncIAdviseSink2
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy,"AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy");
   procedure AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub,"AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub");
   type LPDATAOBJECT is access IDataObject; -- CXType_Pointer - CXType_Typedef
   type tagDATADIR is (
      DATADIR_GET,
      DATADIR_SET
   );
   for tagDATADIR use (
      DATADIR_GET => 1,
      DATADIR_SET => 2
   );
   for tagDATADIR'Size use 32;
   subtype DATADIR is tagDATADIR; -- CXType_Elaborated
   type IDataObject_Interface is interface and IUnknown_Interface;
      function GetData(
         This : access IDataObject_Interface;
         pformatetcIn : access FORMATETC;
         pmedium : access STGMEDIUM
      ) return HRESULT is abstract;
      function GetDataHere(
         This : access IDataObject_Interface;
         pformatetc : access FORMATETC;
         pmedium : access STGMEDIUM
      ) return HRESULT is abstract;
      function QueryGetData(
         This : access IDataObject_Interface;
         pformatetc : access FORMATETC
      ) return HRESULT is abstract;
      function GetCanonicalFormatEtc(
         This : access IDataObject_Interface;
         pformatectIn : access FORMATETC;
         pformatetcOut : access FORMATETC
      ) return HRESULT is abstract;
      function SetData(
         This : access IDataObject_Interface;
         pformatetc : access FORMATETC;
         pmedium : access STGMEDIUM;
         fRelease : BOOL
      ) return HRESULT is abstract;
      function EnumFormatEtc(
         This : access IDataObject_Interface;
         dwDirection : DWORD;
         ppenumFormatEtc : access LPENUMFORMATETC
      ) return HRESULT is abstract;
      function DAdvise(
         This : access IDataObject_Interface;
         pformatetc : access FORMATETC;
         advf_x : DWORD;
         pAdvSink : access IAdviseSink;
         pdwConnection : access DWORD
      ) return HRESULT is abstract;
      function DUnadvise(
         This : access IDataObject_Interface;
         dwConnection : DWORD
      ) return HRESULT is abstract;
      function EnumDAdvise(
         This : access IDataObject_Interface;
         ppenumAdvise : access LPENUMSTATDATA
      ) return HRESULT is abstract;
   type IDataObject is access IDataObject_Interface'Class;
   type IDataObject_Ptr is access IDataObject;
   function IDataObject_RemoteGetData_Proxy(
      This : access IDataObject;
      pformatetcIn : access FORMATETC;
      pRemoteMedium : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IDataObject_RemoteGetData_Proxy,"IDataObject_RemoteGetData_Proxy");
   procedure IDataObject_RemoteGetData_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IDataObject_RemoteGetData_Stub,"IDataObject_RemoteGetData_Stub");
   function IDataObject_RemoteGetDataHere_Proxy(
      This : access IDataObject;
      pformatetc : access FORMATETC;
      pRemoteMedium : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IDataObject_RemoteGetDataHere_Proxy,"IDataObject_RemoteGetDataHere_Proxy");
   procedure IDataObject_RemoteGetDataHere_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IDataObject_RemoteGetDataHere_Stub,"IDataObject_RemoteGetDataHere_Stub");
   function IDataObject_RemoteSetData_Proxy(
      This : access IDataObject;
      pformatetc : access FORMATETC;
      pmedium : access FLAG_STGMEDIUM;
      fRelease : BOOL
   ) return HRESULT;
   pragma import (C,IDataObject_RemoteSetData_Proxy,"IDataObject_RemoteSetData_Proxy");
   procedure IDataObject_RemoteSetData_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IDataObject_RemoteSetData_Stub,"IDataObject_RemoteSetData_Stub");
   type LPDATAADVISEHOLDER is access IDataAdviseHolder; -- CXType_Pointer - CXType_Typedef
   type IDataAdviseHolder_Interface is interface and IUnknown_Interface;
      function Advise(
         This : access IDataAdviseHolder_Interface;
         pDataObject : access IDataObject;
         pFetc : access FORMATETC;
         advf_x : DWORD;
         pAdvise : access IAdviseSink;
         pdwConnection : access DWORD
      ) return HRESULT is abstract;
      function Unadvise(
         This : access IDataAdviseHolder_Interface;
         dwConnection : DWORD
      ) return HRESULT is abstract;
      function EnumAdvise(
         This : access IDataAdviseHolder_Interface;
         ppenumAdvise : access LPENUMSTATDATA
      ) return HRESULT is abstract;
      function SendOnDataChange(
         This : access IDataAdviseHolder_Interface;
         pDataObject : access IDataObject;
         dwReserved : DWORD;
         advf_x : DWORD
      ) return HRESULT is abstract;
   type IDataAdviseHolder is access IDataAdviseHolder_Interface'Class;
   type IDataAdviseHolder_Ptr is access IDataAdviseHolder;
   type LPMESSAGEFILTER is access IMessageFilter; -- CXType_Pointer - CXType_Typedef
   type tagCALLTYPE is (
      CALLTYPE_TOPLEVEL,
      CALLTYPE_NESTED,
      CALLTYPE_ASYNC,
      CALLTYPE_TOPLEVEL_CALLPENDING,
      CALLTYPE_ASYNC_CALLPENDING
   );
   for tagCALLTYPE use (
      CALLTYPE_TOPLEVEL => 1,
      CALLTYPE_NESTED => 2,
      CALLTYPE_ASYNC => 3,
      CALLTYPE_TOPLEVEL_CALLPENDING => 4,
      CALLTYPE_ASYNC_CALLPENDING => 5
   );
   for tagCALLTYPE'Size use 32;
   subtype CALLTYPE is tagCALLTYPE; -- CXType_Elaborated
   type tagSERVERCALL is (
      SERVERCALL_ISHANDLED,
      SERVERCALL_REJECTED,
      SERVERCALL_RETRYLATER
   );
   for tagSERVERCALL use (
      SERVERCALL_ISHANDLED => 0,
      SERVERCALL_REJECTED => 1,
      SERVERCALL_RETRYLATER => 2
   );
   for tagSERVERCALL'Size use 32;
   subtype SERVERCALL is tagSERVERCALL; -- CXType_Elaborated
   type tagPENDINGTYPE is (
      PENDINGTYPE_TOPLEVEL,
      PENDINGTYPE_NESTED
   );
   for tagPENDINGTYPE use (
      PENDINGTYPE_TOPLEVEL => 1,
      PENDINGTYPE_NESTED => 2
   );
   for tagPENDINGTYPE'Size use 32;
   subtype PENDINGTYPE is tagPENDINGTYPE; -- CXType_Elaborated
   type tagPENDINGMSG is (
      PENDINGMSG_CANCELCALL,
      PENDINGMSG_WAITNOPROCESS,
      PENDINGMSG_WAITDEFPROCESS
   );
   for tagPENDINGMSG use (
      PENDINGMSG_CANCELCALL => 0,
      PENDINGMSG_WAITNOPROCESS => 1,
      PENDINGMSG_WAITDEFPROCESS => 2
   );
   for tagPENDINGMSG'Size use 32;
   subtype PENDINGMSG is tagPENDINGMSG; -- CXType_Elaborated
   type tagINTERFACEINFO is record
      pUnk : access IUnknown;
      iid_x : IID;
      wMethod : WORD;
   end record;
   subtype INTERFACEINFO is tagINTERFACEINFO; -- CXType_Elaborated
   type LPINTERFACEINFO is access tagINTERFACEINFO; -- CXType_Pointer - CXType_Elaborated
   type IMessageFilter_Interface is interface and IUnknown_Interface;
      function HandleInComingCall(
         This : access IMessageFilter_Interface;
         dwCallType : DWORD;
         htaskCaller : HTASK;
         dwTickCount : DWORD;
         lpInterfaceInfo_x : LPINTERFACEINFO
      ) return DWORD is abstract;
      function RetryRejectedCall(
         This : access IMessageFilter_Interface;
         htaskCallee : HTASK;
         dwTickCount : DWORD;
         dwRejectType : DWORD
      ) return DWORD is abstract;
      function MessagePending(
         This : access IMessageFilter_Interface;
         htaskCallee : HTASK;
         dwTickCount : DWORD;
         dwPendingType : DWORD
      ) return DWORD is abstract;
   type IMessageFilter is access IMessageFilter_Interface'Class;
   type IMessageFilter_Ptr is access IMessageFilter;
   type IClassActivator_Interface is interface and IUnknown_Interface;
      function GetClassObject(
         This : access IClassActivator_Interface;
         rclsid : access constant IID;
         dwClassContext : DWORD;
         locale : LCID;
         riid : access constant IID;
         ppv : access LPVOID
      ) return HRESULT is abstract;
   type IClassActivator is access IClassActivator_Interface'Class;
   type IClassActivator_Ptr is access IClassActivator;
   type IFillLockBytes_Interface is interface and IUnknown_Interface;
      function FillAppend(
         This : access IFillLockBytes_Interface;
         pv : access Void;
         cb : ULONG;
         pcbWritten : access ULONG
      ) return HRESULT is abstract;
      function FillAt(
         This : access IFillLockBytes_Interface;
         ulOffset : ULARGE_INTEGER;
         pv : access Void;
         cb : ULONG;
         pcbWritten : access ULONG
      ) return HRESULT is abstract;
      function SetFillSize(
         This : access IFillLockBytes_Interface;
         ulSize : ULARGE_INTEGER
      ) return HRESULT is abstract;
      function terminate_x(
         This : access IFillLockBytes_Interface;
         bCanceled : BOOL
      ) return HRESULT is abstract;
   type IFillLockBytes is access IFillLockBytes_Interface'Class;
   type IFillLockBytes_Ptr is access IFillLockBytes;
   function IFillLockBytes_RemoteFillAppend_Proxy(
      This : access IFillLockBytes;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,IFillLockBytes_RemoteFillAppend_Proxy,"IFillLockBytes_RemoteFillAppend_Proxy");
   procedure IFillLockBytes_RemoteFillAppend_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IFillLockBytes_RemoteFillAppend_Stub,"IFillLockBytes_RemoteFillAppend_Stub");
   function IFillLockBytes_RemoteFillAt_Proxy(
      This : access IFillLockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,IFillLockBytes_RemoteFillAt_Proxy,"IFillLockBytes_RemoteFillAt_Proxy");
   procedure IFillLockBytes_RemoteFillAt_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IFillLockBytes_RemoteFillAt_Stub,"IFillLockBytes_RemoteFillAt_Stub");
   type IProgressNotify_Interface is interface and IUnknown_Interface;
      function OnProgress(
         This : access IProgressNotify_Interface;
         dwProgressCurrent : DWORD;
         dwProgressMaximum : DWORD;
         fAccurate : BOOL;
         fOwner : BOOL
      ) return HRESULT is abstract;
   type IProgressNotify is access IProgressNotify_Interface'Class;
   type IProgressNotify_Ptr is access IProgressNotify;
   type tagStorageLayout is record
      LayoutType : DWORD;
      pwcsElementName : access OLECHAR;
      cOffset : LARGE_INTEGER;
      cBytes : LARGE_INTEGER;
   end record;
   subtype StorageLayout is tagStorageLayout; -- CXType_Elaborated
   type ILayoutStorage_Interface is interface and IUnknown_Interface;
      function LayoutScript(
         This : access ILayoutStorage_Interface;
         pStorageLayout : access StorageLayout;
         nEntries : DWORD;
         glfInterleavedFlag : DWORD
      ) return HRESULT is abstract;
      function BeginMonitor(This : access ILayoutStorage_Interface) return HRESULT is abstract;
      function EndMonitor(This : access ILayoutStorage_Interface) return HRESULT is abstract;
      function ReLayoutDocfile(
         This : access ILayoutStorage_Interface;
         pwcsNewDfName : access OLECHAR
      ) return HRESULT is abstract;
      function ReLayoutDocfileOnILockBytes(
         This : access ILayoutStorage_Interface;
         pILockBytes : access ILockBytes
      ) return HRESULT is abstract;
   type ILayoutStorage is access ILayoutStorage_Interface'Class;
   type ILayoutStorage_Ptr is access ILayoutStorage;
   type IBlockingLock_Interface is interface and IUnknown_Interface;
      function Lock(
         This : access IBlockingLock_Interface;
         dwTimeout : DWORD
      ) return HRESULT is abstract;
      function Unlock(This : access IBlockingLock_Interface) return HRESULT is abstract;
   type IBlockingLock is access IBlockingLock_Interface'Class;
   type IBlockingLock_Ptr is access IBlockingLock;
   type ITimeAndNoticeControl_Interface is interface and IUnknown_Interface;
      function SuppressChanges(
         This : access ITimeAndNoticeControl_Interface;
         res1 : DWORD;
         res2 : DWORD
      ) return HRESULT is abstract;
   type ITimeAndNoticeControl is access ITimeAndNoticeControl_Interface'Class;
   type ITimeAndNoticeControl_Ptr is access ITimeAndNoticeControl;
   type IOplockStorage_Interface is interface and IUnknown_Interface;
      function CreateStorageEx(
         This : access IOplockStorage_Interface;
         pwcsName : LPCWSTR;
         grfMode : DWORD;
         stgfmt : DWORD;
         grfAttrs : DWORD;
         riid : access constant IID;
         ppstgOpen : access LPVOID
      ) return HRESULT is abstract;
      function OpenStorageEx(
         This : access IOplockStorage_Interface;
         pwcsName : LPCWSTR;
         grfMode : DWORD;
         stgfmt : DWORD;
         grfAttrs : DWORD;
         riid : access constant IID;
         ppstgOpen : access LPVOID
      ) return HRESULT is abstract;
   type IOplockStorage is access IOplockStorage_Interface'Class;
   type IOplockStorage_Ptr is access IOplockStorage;
   type IDirectWriterLock_Interface is interface and IUnknown_Interface;
      function WaitForWriteAccess(
         This : access IDirectWriterLock_Interface;
         dwTimeout : DWORD
      ) return HRESULT is abstract;
      function ReleaseWriteAccess(This : access IDirectWriterLock_Interface) return HRESULT is abstract;
      function HaveWriteAccess(This : access IDirectWriterLock_Interface) return HRESULT is abstract;
   type IDirectWriterLock is access IDirectWriterLock_Interface'Class;
   type IDirectWriterLock_Ptr is access IDirectWriterLock;
   type IUrlMon_Interface is interface and IUnknown_Interface;
      function AsyncGetClassBits(
         This : access IUrlMon_Interface;
         rclsid : access constant IID;
         pszTYPE : LPCWSTR;
         pszExt : LPCWSTR;
         dwFileVersionMS : DWORD;
         dwFileVersionLS : DWORD;
         pszCodeBase : LPCWSTR;
         pbc : access IBindCtx;
         dwClassContext : DWORD;
         riid : access constant IID;
         flags : DWORD
      ) return HRESULT is abstract;
   type IUrlMon is access IUrlMon_Interface'Class;
   type IUrlMon_Ptr is access IUrlMon;
   type IForegroundTransfer_Interface is interface and IUnknown_Interface;
      function AllowForegroundTransfer(
         This : access IForegroundTransfer_Interface;
         lpvReserved : access Void
      ) return HRESULT is abstract;
   type IForegroundTransfer is access IForegroundTransfer_Interface'Class;
   type IForegroundTransfer_Ptr is access IForegroundTransfer;
   type IThumbnailExtractor_Interface is interface and IUnknown_Interface;
      function ExtractThumbnail(
         This : access IThumbnailExtractor_Interface;
         pStg : access IStorage;
         ulLength : ULONG;
         ulHeight : ULONG;
         pulOutputLength : access ULONG;
         pulOutputHeight : access ULONG;
         phOutputBitmap : access HBITMAP
      ) return HRESULT is abstract;
      function OnFileUpdated(
         This : access IThumbnailExtractor_Interface;
         pStg : access IStorage
      ) return HRESULT is abstract;
   type IThumbnailExtractor is access IThumbnailExtractor_Interface'Class;
   type IThumbnailExtractor_Ptr is access IThumbnailExtractor;
   type IDummyHICONIncluder_Interface is interface and IUnknown_Interface;
      function Dummy(
         This : access IDummyHICONIncluder_Interface;
         h1 : HICON;
         h2 : HDC
      ) return HRESULT is abstract;
   type IDummyHICONIncluder is access IDummyHICONIncluder_Interface'Class;
   type IDummyHICONIncluder_Ptr is access IDummyHICONIncluder;
   type tagApplicationType is (
      ServerApplication,
      LibraryApplication
   );
   for tagApplicationType use (
      ServerApplication => 0,
      LibraryApplication => 1
   );
   for tagApplicationType'Size use 32;
   subtype ApplicationType is tagApplicationType; -- CXType_Elaborated
   type tagShutdownType is (
      IdleShutdown,
      ForcedShutdown
   );
   for tagShutdownType use (
      IdleShutdown => 0,
      ForcedShutdown => 1
   );
   for tagShutdownType'Size use 32;
   subtype ShutdownType is tagShutdownType; -- CXType_Elaborated
   type IProcessLock_Interface is interface and IUnknown_Interface;
      function AddRefOnProcess(This : access IProcessLock_Interface) return ULONG is abstract;
      function ReleaseRefOnProcess(This : access IProcessLock_Interface) return ULONG is abstract;
   type IProcessLock is access IProcessLock_Interface'Class;
   type IProcessLock_Ptr is access IProcessLock;
   type ISurrogateService_Interface is interface and IUnknown_Interface;
      function Init(
         This : access ISurrogateService_Interface;
         rguidProcessID : access constant GUID;
         pProcessLock : access IProcessLock;
         pfApplicationAware : access BOOL
      ) return HRESULT is abstract;
      function ApplicationLaunch(
         This : access ISurrogateService_Interface;
         rguidApplID : access constant GUID;
         appType : ApplicationType
      ) return HRESULT is abstract;
      function ApplicationFree(
         This : access ISurrogateService_Interface;
         rguidApplID : access constant GUID
      ) return HRESULT is abstract;
      function CatalogRefresh(
         This : access ISurrogateService_Interface;
         ulReserved : ULONG
      ) return HRESULT is abstract;
      function ProcessShutdown(
         This : access ISurrogateService_Interface;
         shutdowntype_x : ShutdownType
      ) return HRESULT is abstract;
   type ISurrogateService is access ISurrogateService_Interface'Class;
   type ISurrogateService_Ptr is access ISurrogateService;
   type LPINITIALIZESPY is access IInitializeSpy; -- CXType_Pointer - CXType_Typedef
   type IInitializeSpy_Interface is interface and IUnknown_Interface;
      function PreInitialize(
         This : access IInitializeSpy_Interface;
         dwCoInit : DWORD;
         dwCurThreadAptRefs : DWORD
      ) return HRESULT is abstract;
      function PostInitialize(
         This : access IInitializeSpy_Interface;
         hrCoInit : HRESULT;
         dwCoInit : DWORD;
         dwNewThreadAptRefs : DWORD
      ) return HRESULT is abstract;
      function PreUninitialize(
         This : access IInitializeSpy_Interface;
         dwCurThreadAptRefs : DWORD
      ) return HRESULT is abstract;
      function PostUninitialize(
         This : access IInitializeSpy_Interface;
         dwNewThreadAptRefs : DWORD
      ) return HRESULT is abstract;
   type IInitializeSpy is access IInitializeSpy_Interface'Class;
   type IInitializeSpy_Ptr is access IInitializeSpy;
   type IApartmentShutdown_Interface is interface and IUnknown_Interface;
      procedure OnUninitialize(
         This : access IApartmentShutdown_Interface;
         ui64ApartmentIdentifier : UINT64
      ) is abstract;
   type IApartmentShutdown is access IApartmentShutdown_Interface'Class;
   type IApartmentShutdown_Ptr is access IApartmentShutdown;
   function ASYNC_STGMEDIUM_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access ASYNC_STGMEDIUM
   ) return Interfaces.C.unsigned_long;
   pragma import (C,ASYNC_STGMEDIUM_UserSize,"ASYNC_STGMEDIUM_UserSize");
   procedure ASYNC_STGMEDIUM_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access ASYNC_STGMEDIUM
   );
   pragma import (C,ASYNC_STGMEDIUM_UserFree,"ASYNC_STGMEDIUM_UserFree");
   function CLIPFORMAT_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access CLIPFORMAT
   ) return Interfaces.C.unsigned_long;
   pragma import (C,CLIPFORMAT_UserSize,"CLIPFORMAT_UserSize");
   procedure CLIPFORMAT_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access CLIPFORMAT
   );
   pragma import (C,CLIPFORMAT_UserFree,"CLIPFORMAT_UserFree");
   function FLAG_STGMEDIUM_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access FLAG_STGMEDIUM
   ) return Interfaces.C.unsigned_long;
   pragma import (C,FLAG_STGMEDIUM_UserSize,"FLAG_STGMEDIUM_UserSize");
   procedure FLAG_STGMEDIUM_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access FLAG_STGMEDIUM
   );
   pragma import (C,FLAG_STGMEDIUM_UserFree,"FLAG_STGMEDIUM_UserFree");
   function HBITMAP_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HBITMAP
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HBITMAP_UserSize,"HBITMAP_UserSize");
   procedure HBITMAP_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HBITMAP
   );
   pragma import (C,HBITMAP_UserFree,"HBITMAP_UserFree");
   function HDC_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HDC
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HDC_UserSize,"HDC_UserSize");
   procedure HDC_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HDC
   );
   pragma import (C,HDC_UserFree,"HDC_UserFree");
   function HICON_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HICON
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HICON_UserSize,"HICON_UserSize");
   procedure HICON_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HICON
   );
   pragma import (C,HICON_UserFree,"HICON_UserFree");
   function SNB_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access SNB
   ) return Interfaces.C.unsigned_long;
   pragma import (C,SNB_UserSize,"SNB_UserSize");
   procedure SNB_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access SNB
   );
   pragma import (C,SNB_UserFree,"SNB_UserFree");
   function STGMEDIUM_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access STGMEDIUM
   ) return Interfaces.C.unsigned_long;
   pragma import (C,STGMEDIUM_UserSize,"STGMEDIUM_UserSize");
   procedure STGMEDIUM_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access STGMEDIUM
   );
   pragma import (C,STGMEDIUM_UserFree,"STGMEDIUM_UserFree");
   function ASYNC_STGMEDIUM_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access ASYNC_STGMEDIUM
   ) return Interfaces.C.unsigned_long;
   pragma import (C,ASYNC_STGMEDIUM_UserSize64,"ASYNC_STGMEDIUM_UserSize64");
   procedure ASYNC_STGMEDIUM_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access ASYNC_STGMEDIUM
   );
   pragma import (C,ASYNC_STGMEDIUM_UserFree64,"ASYNC_STGMEDIUM_UserFree64");
   function CLIPFORMAT_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access CLIPFORMAT
   ) return Interfaces.C.unsigned_long;
   pragma import (C,CLIPFORMAT_UserSize64,"CLIPFORMAT_UserSize64");
   procedure CLIPFORMAT_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access CLIPFORMAT
   );
   pragma import (C,CLIPFORMAT_UserFree64,"CLIPFORMAT_UserFree64");
   function FLAG_STGMEDIUM_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access FLAG_STGMEDIUM
   ) return Interfaces.C.unsigned_long;
   pragma import (C,FLAG_STGMEDIUM_UserSize64,"FLAG_STGMEDIUM_UserSize64");
   procedure FLAG_STGMEDIUM_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access FLAG_STGMEDIUM
   );
   pragma import (C,FLAG_STGMEDIUM_UserFree64,"FLAG_STGMEDIUM_UserFree64");
   function HBITMAP_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HBITMAP
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HBITMAP_UserSize64,"HBITMAP_UserSize64");
   procedure HBITMAP_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HBITMAP
   );
   pragma import (C,HBITMAP_UserFree64,"HBITMAP_UserFree64");
   function HDC_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HDC
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HDC_UserSize64,"HDC_UserSize64");
   procedure HDC_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HDC
   );
   pragma import (C,HDC_UserFree64,"HDC_UserFree64");
   function HICON_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HICON
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HICON_UserSize64,"HICON_UserSize64");
   procedure HICON_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HICON
   );
   pragma import (C,HICON_UserFree64,"HICON_UserFree64");
   function SNB_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access SNB
   ) return Interfaces.C.unsigned_long;
   pragma import (C,SNB_UserSize64,"SNB_UserSize64");
   procedure SNB_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access SNB
   );
   pragma import (C,SNB_UserFree64,"SNB_UserFree64");
   function STGMEDIUM_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access STGMEDIUM
   ) return Interfaces.C.unsigned_long;
   pragma import (C,STGMEDIUM_UserSize64,"STGMEDIUM_UserSize64");
   procedure STGMEDIUM_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access STGMEDIUM
   );
   pragma import (C,STGMEDIUM_UserFree64,"STGMEDIUM_UserFree64");
   function IBindCtx_SetBindOptions_Proxy(
      This : access IBindCtx;
      pbindopts : access BIND_OPTS
   ) return HRESULT;
   pragma import (C,IBindCtx_SetBindOptions_Proxy,"IBindCtx_SetBindOptions_Proxy");
   function IBindCtx_SetBindOptions_Stub(
      This : access IBindCtx;
      pbindopts : access BIND_OPTS2
   ) return HRESULT;
   pragma import (C,IBindCtx_SetBindOptions_Stub,"IBindCtx_SetBindOptions_Stub");
   function IBindCtx_GetBindOptions_Proxy(
      This : access IBindCtx;
      pbindopts : access BIND_OPTS
   ) return HRESULT;
   pragma import (C,IBindCtx_GetBindOptions_Proxy,"IBindCtx_GetBindOptions_Proxy");
   function IBindCtx_GetBindOptions_Stub(
      This : access IBindCtx;
      pbindopts : access BIND_OPTS2
   ) return HRESULT;
   pragma import (C,IBindCtx_GetBindOptions_Stub,"IBindCtx_GetBindOptions_Stub");
   function IEnumMoniker_Next_Proxy(
      This : access IEnumMoniker;
      celt : ULONG;
      rgelt : access LPMONIKER;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumMoniker_Next_Proxy,"IEnumMoniker_Next_Proxy");
   function IEnumMoniker_Next_Stub(
      This : access IEnumMoniker;
      celt : ULONG;
      rgelt : access LPMONIKER;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumMoniker_Next_Stub,"IEnumMoniker_Next_Stub");
   function IRunnableObject_IsRunning_Proxy(
      This : access IRunnableObject
   ) return BOOL;
   pragma import (C,IRunnableObject_IsRunning_Proxy,"IRunnableObject_IsRunning_Proxy");
   function IRunnableObject_IsRunning_Stub(
      This : access IRunnableObject
   ) return HRESULT;
   pragma import (C,IRunnableObject_IsRunning_Stub,"IRunnableObject_IsRunning_Stub");
   function IMoniker_BindToObject_Proxy(
      This : access IMoniker;
      pbc : access IBindCtx;
      pmkToLeft : access IMoniker;
      riidResult : access constant IID;
      ppvResult : access LPVOID
   ) return HRESULT;
   pragma import (C,IMoniker_BindToObject_Proxy,"IMoniker_BindToObject_Proxy");
   function IMoniker_BindToObject_Stub(
      This : access IMoniker;
      pbc : access IBindCtx;
      pmkToLeft : access IMoniker;
      riidResult : access constant IID;
      ppvResult : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IMoniker_BindToObject_Stub,"IMoniker_BindToObject_Stub");
   function IMoniker_BindToStorage_Proxy(
      This : access IMoniker;
      pbc : access IBindCtx;
      pmkToLeft : access IMoniker;
      riid : access constant IID;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,IMoniker_BindToStorage_Proxy,"IMoniker_BindToStorage_Proxy");
   function IMoniker_BindToStorage_Stub(
      This : access IMoniker;
      pbc : access IBindCtx;
      pmkToLeft : access IMoniker;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IMoniker_BindToStorage_Stub,"IMoniker_BindToStorage_Stub");
   function IEnumSTATSTG_Next_Proxy(
      This : access IEnumSTATSTG;
      celt : ULONG;
      rgelt : access STATSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATSTG_Next_Proxy,"IEnumSTATSTG_Next_Proxy");
   function IEnumSTATSTG_Next_Stub(
      This : access IEnumSTATSTG;
      celt : ULONG;
      rgelt : access STATSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATSTG_Next_Stub,"IEnumSTATSTG_Next_Stub");
   function IStorage_OpenStream_Proxy(
      This : access IStorage;
      pwcsName : access constant OLECHAR;
      reserved1 : access Void;
      grfMode : DWORD;
      reserved2 : DWORD;
      ppstm : access LPSTREAM
   ) return HRESULT;
   pragma import (C,IStorage_OpenStream_Proxy,"IStorage_OpenStream_Proxy");
   function IStorage_OpenStream_Stub(
      This : access IStorage;
      pwcsName : access constant OLECHAR;
      cbReserved1 : ULONG;
      reserved1 : access byte;
      grfMode : DWORD;
      reserved2 : DWORD;
      ppstm : access LPSTREAM
   ) return HRESULT;
   pragma import (C,IStorage_OpenStream_Stub,"IStorage_OpenStream_Stub");
   function IStorage_CopyTo_Proxy(
      This : access IStorage;
      ciidExclude : DWORD;
      rgiidExclude : access constant IID;
      snbExclude : SNB;
      pstgDest : access IStorage
   ) return HRESULT;
   pragma import (C,IStorage_CopyTo_Proxy,"IStorage_CopyTo_Proxy");
   function IStorage_CopyTo_Stub(
      This : access IStorage;
      ciidExclude : DWORD;
      rgiidExclude : access constant IID;
      snbExclude : SNB;
      pstgDest : access IStorage
   ) return HRESULT;
   pragma import (C,IStorage_CopyTo_Stub,"IStorage_CopyTo_Stub");
   function IStorage_EnumElements_Proxy(
      This : access IStorage;
      reserved1 : DWORD;
      reserved2 : access Void;
      reserved3 : DWORD;
      ppenum : access LPENUMSTATSTG
   ) return HRESULT;
   pragma import (C,IStorage_EnumElements_Proxy,"IStorage_EnumElements_Proxy");
   function IStorage_EnumElements_Stub(
      This : access IStorage;
      reserved1 : DWORD;
      cbReserved2 : ULONG;
      reserved2 : access byte;
      reserved3 : DWORD;
      ppenum : access LPENUMSTATSTG
   ) return HRESULT;
   pragma import (C,IStorage_EnumElements_Stub,"IStorage_EnumElements_Stub");
   function ILockBytes_ReadAt_Proxy(
      This : access ILockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access Void;
      cb : ULONG;
      pcbRead : access ULONG
   ) return HRESULT;
   pragma import (C,ILockBytes_ReadAt_Proxy,"ILockBytes_ReadAt_Proxy");
   function ILockBytes_ReadAt_Stub(
      This : access ILockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access byte;
      cb : ULONG;
      pcbRead : access ULONG
   ) return HRESULT;
   pragma import (C,ILockBytes_ReadAt_Stub,"ILockBytes_ReadAt_Stub");
   function ILockBytes_WriteAt_Proxy(
      This : access ILockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access Void;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,ILockBytes_WriteAt_Proxy,"ILockBytes_WriteAt_Proxy");
   function ILockBytes_WriteAt_Stub(
      This : access ILockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,ILockBytes_WriteAt_Stub,"ILockBytes_WriteAt_Stub");
   function IEnumFORMATETC_Next_Proxy(
      This : access IEnumFORMATETC;
      celt : ULONG;
      rgelt : access FORMATETC;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumFORMATETC_Next_Proxy,"IEnumFORMATETC_Next_Proxy");
   function IEnumFORMATETC_Next_Stub(
      This : access IEnumFORMATETC;
      celt : ULONG;
      rgelt : access FORMATETC;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumFORMATETC_Next_Stub,"IEnumFORMATETC_Next_Stub");
   function IEnumSTATDATA_Next_Proxy(
      This : access IEnumSTATDATA;
      celt : ULONG;
      rgelt : access STATDATA;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATDATA_Next_Proxy,"IEnumSTATDATA_Next_Proxy");
   function IEnumSTATDATA_Next_Stub(
      This : access IEnumSTATDATA;
      celt : ULONG;
      rgelt : access STATDATA;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATDATA_Next_Stub,"IEnumSTATDATA_Next_Stub");
   procedure IAdviseSink_OnDataChange_Proxy(
      This : access IAdviseSink;
      pFormatetc : access FORMATETC;
      pStgmed : access STGMEDIUM
   );
   pragma import (C,IAdviseSink_OnDataChange_Proxy,"IAdviseSink_OnDataChange_Proxy");
   function IAdviseSink_OnDataChange_Stub(
      This : access IAdviseSink;
      pFormatetc : access FORMATETC;
      pStgmed : access ASYNC_STGMEDIUM
   ) return HRESULT;
   pragma import (C,IAdviseSink_OnDataChange_Stub,"IAdviseSink_OnDataChange_Stub");
   procedure IAdviseSink_OnViewChange_Proxy(
      This : access IAdviseSink;
      dwAspect : DWORD;
      lindex : LONG
   );
   pragma import (C,IAdviseSink_OnViewChange_Proxy,"IAdviseSink_OnViewChange_Proxy");
   function IAdviseSink_OnViewChange_Stub(
      This : access IAdviseSink;
      dwAspect : DWORD;
      lindex : LONG
   ) return HRESULT;
   pragma import (C,IAdviseSink_OnViewChange_Stub,"IAdviseSink_OnViewChange_Stub");
   procedure IAdviseSink_OnRename_Proxy(
      This : access IAdviseSink;
      pmk : access IMoniker
   );
   pragma import (C,IAdviseSink_OnRename_Proxy,"IAdviseSink_OnRename_Proxy");
   function IAdviseSink_OnRename_Stub(
      This : access IAdviseSink;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,IAdviseSink_OnRename_Stub,"IAdviseSink_OnRename_Stub");
   procedure IAdviseSink_OnSave_Proxy(
      This : access IAdviseSink
   );
   pragma import (C,IAdviseSink_OnSave_Proxy,"IAdviseSink_OnSave_Proxy");
   function IAdviseSink_OnSave_Stub(
      This : access IAdviseSink
   ) return HRESULT;
   pragma import (C,IAdviseSink_OnSave_Stub,"IAdviseSink_OnSave_Stub");
   procedure IAdviseSink_OnClose_Proxy(
      This : access IAdviseSink
   );
   pragma import (C,IAdviseSink_OnClose_Proxy,"IAdviseSink_OnClose_Proxy");
   function IAdviseSink_OnClose_Stub(
      This : access IAdviseSink
   ) return HRESULT;
   pragma import (C,IAdviseSink_OnClose_Stub,"IAdviseSink_OnClose_Stub");
   procedure AsyncIAdviseSink_Begin_OnDataChange_Proxy(
      This : access AsyncIAdviseSink;
      pFormatetc : access FORMATETC;
      pStgmed : access STGMEDIUM
   );
   pragma import (C,AsyncIAdviseSink_Begin_OnDataChange_Proxy,"AsyncIAdviseSink_Begin_OnDataChange_Proxy");
   function AsyncIAdviseSink_Begin_OnDataChange_Stub(
      This : access AsyncIAdviseSink;
      pFormatetc : access FORMATETC;
      pStgmed : access ASYNC_STGMEDIUM
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_OnDataChange_Stub,"AsyncIAdviseSink_Begin_OnDataChange_Stub");
   procedure AsyncIAdviseSink_Finish_OnDataChange_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Finish_OnDataChange_Proxy,"AsyncIAdviseSink_Finish_OnDataChange_Proxy");
   function AsyncIAdviseSink_Finish_OnDataChange_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_OnDataChange_Stub,"AsyncIAdviseSink_Finish_OnDataChange_Stub");
   procedure AsyncIAdviseSink_Begin_OnViewChange_Proxy(
      This : access AsyncIAdviseSink;
      dwAspect : DWORD;
      lindex : LONG
   );
   pragma import (C,AsyncIAdviseSink_Begin_OnViewChange_Proxy,"AsyncIAdviseSink_Begin_OnViewChange_Proxy");
   function AsyncIAdviseSink_Begin_OnViewChange_Stub(
      This : access AsyncIAdviseSink;
      dwAspect : DWORD;
      lindex : LONG
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_OnViewChange_Stub,"AsyncIAdviseSink_Begin_OnViewChange_Stub");
   procedure AsyncIAdviseSink_Finish_OnViewChange_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Finish_OnViewChange_Proxy,"AsyncIAdviseSink_Finish_OnViewChange_Proxy");
   function AsyncIAdviseSink_Finish_OnViewChange_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_OnViewChange_Stub,"AsyncIAdviseSink_Finish_OnViewChange_Stub");
   procedure AsyncIAdviseSink_Begin_OnRename_Proxy(
      This : access AsyncIAdviseSink;
      pmk : access IMoniker
   );
   pragma import (C,AsyncIAdviseSink_Begin_OnRename_Proxy,"AsyncIAdviseSink_Begin_OnRename_Proxy");
   function AsyncIAdviseSink_Begin_OnRename_Stub(
      This : access AsyncIAdviseSink;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_OnRename_Stub,"AsyncIAdviseSink_Begin_OnRename_Stub");
   procedure AsyncIAdviseSink_Finish_OnRename_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Finish_OnRename_Proxy,"AsyncIAdviseSink_Finish_OnRename_Proxy");
   function AsyncIAdviseSink_Finish_OnRename_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_OnRename_Stub,"AsyncIAdviseSink_Finish_OnRename_Stub");
   procedure AsyncIAdviseSink_Begin_OnSave_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Begin_OnSave_Proxy,"AsyncIAdviseSink_Begin_OnSave_Proxy");
   function AsyncIAdviseSink_Begin_OnSave_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_OnSave_Stub,"AsyncIAdviseSink_Begin_OnSave_Stub");
   procedure AsyncIAdviseSink_Finish_OnSave_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Finish_OnSave_Proxy,"AsyncIAdviseSink_Finish_OnSave_Proxy");
   function AsyncIAdviseSink_Finish_OnSave_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_OnSave_Stub,"AsyncIAdviseSink_Finish_OnSave_Stub");
   procedure AsyncIAdviseSink_Begin_OnClose_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Begin_OnClose_Proxy,"AsyncIAdviseSink_Begin_OnClose_Proxy");
   function AsyncIAdviseSink_Begin_OnClose_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Begin_OnClose_Stub,"AsyncIAdviseSink_Begin_OnClose_Stub");
   procedure AsyncIAdviseSink_Finish_OnClose_Proxy(
      This : access AsyncIAdviseSink
   );
   pragma import (C,AsyncIAdviseSink_Finish_OnClose_Proxy,"AsyncIAdviseSink_Finish_OnClose_Proxy");
   function AsyncIAdviseSink_Finish_OnClose_Stub(
      This : access AsyncIAdviseSink
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink_Finish_OnClose_Stub,"AsyncIAdviseSink_Finish_OnClose_Stub");
   procedure IAdviseSink2_OnLinkSrcChange_Proxy(
      This : access IAdviseSink2;
      pmk : access IMoniker
   );
   pragma import (C,IAdviseSink2_OnLinkSrcChange_Proxy,"IAdviseSink2_OnLinkSrcChange_Proxy");
   function IAdviseSink2_OnLinkSrcChange_Stub(
      This : access IAdviseSink2;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,IAdviseSink2_OnLinkSrcChange_Stub,"IAdviseSink2_OnLinkSrcChange_Stub");
   procedure AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
      This : access AsyncIAdviseSink2;
      pmk : access IMoniker
   );
   pragma import (C,AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy,"AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy");
   function AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
      This : access AsyncIAdviseSink2;
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub,"AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub");
   procedure AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
      This : access AsyncIAdviseSink2
   );
   pragma import (C,AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy,"AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy");
   function AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
      This : access AsyncIAdviseSink2
   ) return HRESULT;
   pragma import (C,AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub,"AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub");
   function IDataObject_GetData_Proxy(
      This : access IDataObject;
      pformatetcIn : access FORMATETC;
      pmedium : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IDataObject_GetData_Proxy,"IDataObject_GetData_Proxy");
   function IDataObject_GetData_Stub(
      This : access IDataObject;
      pformatetcIn : access FORMATETC;
      pRemoteMedium : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IDataObject_GetData_Stub,"IDataObject_GetData_Stub");
   function IDataObject_GetDataHere_Proxy(
      This : access IDataObject;
      pformatetc : access FORMATETC;
      pmedium : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IDataObject_GetDataHere_Proxy,"IDataObject_GetDataHere_Proxy");
   function IDataObject_GetDataHere_Stub(
      This : access IDataObject;
      pformatetc : access FORMATETC;
      pRemoteMedium : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IDataObject_GetDataHere_Stub,"IDataObject_GetDataHere_Stub");
   function IDataObject_SetData_Proxy(
      This : access IDataObject;
      pformatetc : access FORMATETC;
      pmedium : access STGMEDIUM;
      fRelease : BOOL
   ) return HRESULT;
   pragma import (C,IDataObject_SetData_Proxy,"IDataObject_SetData_Proxy");
   function IDataObject_SetData_Stub(
      This : access IDataObject;
      pformatetc : access FORMATETC;
      pmedium : access FLAG_STGMEDIUM;
      fRelease : BOOL
   ) return HRESULT;
   pragma import (C,IDataObject_SetData_Stub,"IDataObject_SetData_Stub");
   function IFillLockBytes_FillAppend_Proxy(
      This : access IFillLockBytes;
      pv : access Void;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,IFillLockBytes_FillAppend_Proxy,"IFillLockBytes_FillAppend_Proxy");
   function IFillLockBytes_FillAppend_Stub(
      This : access IFillLockBytes;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,IFillLockBytes_FillAppend_Stub,"IFillLockBytes_FillAppend_Stub");
   function IFillLockBytes_FillAt_Proxy(
      This : access IFillLockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access Void;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,IFillLockBytes_FillAt_Proxy,"IFillLockBytes_FillAt_Proxy");
   function IFillLockBytes_FillAt_Stub(
      This : access IFillLockBytes;
      ulOffset : ULARGE_INTEGER;
      pv : access constant byte;
      cb : ULONG;
      pcbWritten : access ULONG
   ) return HRESULT;
   pragma import (C,IFillLockBytes_FillAt_Stub,"IFillLockBytes_FillAt_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\propidlbase.h>
   type IPropertyStorage; -- Forward Declaration
   type IPropertySetStorage; -- Forward Declaration
   type IEnumSTATPROPSTG; -- Forward Declaration
   type IEnumSTATPROPSETSTG; -- Forward Declaration
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\oaidl.h>
   type ICreateTypeInfo; -- Forward Declaration
   type ICreateTypeInfo2; -- Forward Declaration
   type ICreateTypeLib; -- Forward Declaration
   type ICreateTypeLib2; -- Forward Declaration
   type IDispatch; -- Forward Declaration
   type IEnumVARIANT; -- Forward Declaration
   type ITypeComp; -- Forward Declaration
   type ITypeInfo; -- Forward Declaration
   type ITypeInfo2; -- Forward Declaration
   type ITypeLib; -- Forward Declaration
   type ITypeLib2; -- Forward Declaration
   type ITypeChangeEvents; -- Forward Declaration
   type IErrorInfo; -- Forward Declaration
   type ICreateErrorInfo; -- Forward Declaration
   type ISupportErrorInfo; -- Forward Declaration
   type ITypeFactory; -- Forward Declaration
   type ITypeMarshal; -- Forward Declaration
   type IRecordInfo; -- Forward Declaration
   type IErrorLog; -- Forward Declaration
   type IPropertyBag; -- Forward Declaration
   type ITypeLibRegistrationReader; -- Forward Declaration
   type ITypeLibRegistration; -- Forward Declaration
   subtype CURRENCY is CY; -- CXType_Typedef
   type tagSAFEARRAYBOUND is record
      cElements : ULONG;
      lLbound : LONG;
   end record;
   subtype SAFEARRAYBOUND is tagSAFEARRAYBOUND; -- CXType_Elaborated
   type LPSAFEARRAYBOUND is access tagSAFEARRAYBOUND; -- CXType_Pointer - CXType_Elaborated
   type wireVARIANT_x; -- Forward Declaration
   type wireVARIANT is access wireVARIANT_x; -- CXType_Pointer - CXType_Elaborated
   type wireBRECORD_x; -- Forward Declaration
   type wireBRECORD is access wireBRECORD_x; -- CXType_Pointer - CXType_Elaborated
   type wireSAFEARR_BSTR_x is record
      Size_x : ULONG;
      aBstr : access wireBSTR;
   end record;
   subtype SAFEARR_BSTR is wireSAFEARR_BSTR_x; -- CXType_Elaborated
   type wireSAFEARR_UNKNOWN_x is record
      Size_x : ULONG;
      apUnknown : access LPUNKNOWN;
   end record;
   subtype SAFEARR_UNKNOWN is wireSAFEARR_UNKNOWN_x; -- CXType_Elaborated
   type IDispatch_Ptr is access all IDispatch; -- Auto Generated Dependancy
   type wireSAFEARR_DISPATCH_x is record
      Size_x : ULONG;
      apDispatch : access IDispatch_Ptr;
   end record;
   subtype SAFEARR_DISPATCH is wireSAFEARR_DISPATCH_x; -- CXType_Elaborated
   type wireSAFEARR_VARIANT_x is record
      Size_x : ULONG;
      aVariant : access wireVARIANT;
   end record;
   subtype SAFEARR_VARIANT is wireSAFEARR_VARIANT_x; -- CXType_Elaborated
   type wireSAFEARR_BRECORD_x is record
      Size_x : ULONG;
      aRecord : access wireBRECORD;
   end record;
   subtype SAFEARR_BRECORD is wireSAFEARR_BRECORD_x; -- CXType_Elaborated
   type wireSAFEARR_HAVEIID_x is record
      Size_x : ULONG;
      apUnknown : access LPUNKNOWN;
      iid_x : IID;
   end record;
   subtype SAFEARR_HAVEIID is wireSAFEARR_HAVEIID_x; -- CXType_Elaborated
   type tagSF_TYPE is (
      SF_I2,
      SF_I4,
      SF_BSTR,
      SF_DISPATCH,
      SF_ERROR,
      SF_VARIANT,
      SF_UNKNOWN,
      SF_I1,
      SF_I8,
      SF_RECORD,
      SF_HAVEIID
   );
   for tagSF_TYPE use (
      SF_I2 => 2,
      SF_I4 => 3,
      SF_BSTR => 8,
      SF_DISPATCH => 9,
      SF_ERROR => 10,
      SF_VARIANT => 12,
      SF_UNKNOWN => 13,
      SF_I1 => 16,
      SF_I8 => 20,
      SF_RECORD => 36,
      SF_HAVEIID => 32781
   );
   for tagSF_TYPE'Size use 32;
   subtype SF_TYPE is tagSF_TYPE; -- CXType_Elaborated
   type wireSAFEARRAY_UNION_x is record
      sfType : ULONG;
      u : Void;
   end record;
   type MIDL_IOleAutomationTypes_0001_x is null record; -- Union Placeholder [FIXME]
   subtype SAFEARRAYUNION is wireSAFEARRAY_UNION_x; -- CXType_Elaborated
   type wireSAFEARRAY_x is record
      cDims : USHORT;
      fFeatures : USHORT;
      cbElements : ULONG;
      cLocks : ULONG;
      uArrayStructs : SAFEARRAYUNION;
      rgsabound : Void;
   end record;
   type wireSAFEARRAY is access wireSAFEARRAY_x; -- CXType_Pointer - CXType_Elaborated
   type wirePSAFEARRAY is access wireSAFEARRAY; -- CXType_Pointer - CXType_Typedef
   type tagSAFEARRAY is record
      cDims : USHORT;
      fFeatures : USHORT;
      cbElements : ULONG;
      cLocks : ULONG;
      pvData : PVOID;
      rgsabound : Void;
   end record;
   subtype SAFEARRAY is tagSAFEARRAY; -- CXType_Elaborated
   type LPSAFEARRAY is access SAFEARRAY; -- CXType_Pointer - CXType_Typedef
   type tagVARIANT; -- Forward Declaration
   subtype VARIANT is tagVARIANT; -- CXType_Elaborated
   type tagVARIANT is null record;
   type LPVARIANT is access VARIANT; -- CXType_Pointer - CXType_Typedef
   subtype VARIANTARG is VARIANT; -- CXType_Typedef
   type LPVARIANTARG is access VARIANT; -- CXType_Pointer - CXType_Typedef
   type wireBRECORD_x is record
      fFlags : ULONG;
      clSize : ULONG;
      pRecInfo : access IRecordInfo;
      pRecord : access byte;
   end record;
   type wireVARIANT_x is record
      clSize : DWORD;
      rpcReserved : DWORD;
      vt : USHORT;
      wReserved1 : USHORT;
      wReserved2 : USHORT;
      wReserved3 : USHORT;
   end record;
   subtype DISPID is LONG; -- CXType_Typedef
   subtype MEMBERID is DISPID; -- CXType_Typedef
   subtype HREFTYPE is DWORD; -- CXType_Typedef
   type tagTYPEKIND is (
      TKIND_ENUM,
      TKIND_RECORD,
      TKIND_MODULE,
      TKIND_INTERFACE,
      TKIND_DISPATCH,
      TKIND_COCLASS,
      TKIND_ALIAS,
      TKIND_UNION,
      TKIND_MAX
   );
   for tagTYPEKIND use (
      TKIND_ENUM => 0,
      TKIND_RECORD => 1,
      TKIND_MODULE => 2,
      TKIND_INTERFACE => 3,
      TKIND_DISPATCH => 4,
      TKIND_COCLASS => 5,
      TKIND_ALIAS => 6,
      TKIND_UNION => 7,
      TKIND_MAX => 8
   );
   for tagTYPEKIND'Size use 32;
   subtype TYPEKIND is tagTYPEKIND; -- CXType_Elaborated
   type tagTYPEDESC is record
      vt : VARTYPE;
   end record;
   type tagARRAYDESC; -- Forward Declaration
   subtype TYPEDESC is tagTYPEDESC; -- CXType_Elaborated
   type tagARRAYDESC is record
      tdescElem : TYPEDESC;
      cDims : USHORT;
      rgbounds : Void;
   end record;
   subtype ARRAYDESC is tagARRAYDESC; -- CXType_Elaborated
   type tagPARAMDESCEX is record
      cBytes : ULONG;
      varDefaultValue : VARIANTARG;
   end record;
   subtype PARAMDESCEX is tagPARAMDESCEX; -- CXType_Elaborated
   type LPPARAMDESCEX is access tagPARAMDESCEX; -- CXType_Pointer - CXType_Elaborated
   type tagPARAMDESC is record
      pparamdescex : LPPARAMDESCEX;
      wParamFlags : USHORT;
   end record;
   subtype PARAMDESC is tagPARAMDESC; -- CXType_Elaborated
   type LPPARAMDESC is access tagPARAMDESC; -- CXType_Pointer - CXType_Elaborated
   type tagIDLDESC is record
      dwReserved : ULONG_PTR;
      wIDLFlags : USHORT;
   end record;
   subtype IDLDESC is tagIDLDESC; -- CXType_Elaborated
   type LPIDLDESC is access tagIDLDESC; -- CXType_Pointer - CXType_Elaborated
   type tagELEMDESC is record
      tdesc : TYPEDESC;
   end record;
   subtype ELEMDESC is tagELEMDESC; -- CXType_Elaborated
   type LPELEMDESC is access tagELEMDESC; -- CXType_Pointer - CXType_Elaborated
   type tagTYPEATTR is record
      guid_x : GUID;
      lcid_x : LCID;
      dwReserved : DWORD;
      memidConstructor : MEMBERID;
      memidDestructor : MEMBERID;
      lpstrSchema : LPOLESTR;
      cbSizeInstance : ULONG;
      typekind_x : TYPEKIND;
      cFuncs : WORD;
      cVars : WORD;
      cImplTypes : WORD;
      cbSizeVft : WORD;
      cbAlignment : WORD;
      wTypeFlags : WORD;
      wMajorVerNum : WORD;
      wMinorVerNum : WORD;
      tdescAlias : TYPEDESC;
      idldescType : IDLDESC;
   end record;
   subtype TYPEATTR is tagTYPEATTR; -- CXType_Elaborated
   type LPTYPEATTR is access tagTYPEATTR; -- CXType_Pointer - CXType_Elaborated
   type tagDISPPARAMS is record
      rgvarg : access VARIANTARG;
      rgdispidNamedArgs : access DISPID;
      cArgs : UINT;
      cNamedArgs : UINT;
   end record;
   subtype DISPPARAMS is tagDISPPARAMS; -- CXType_Elaborated
   type tagEXCEPINFO is record
      wCode : WORD;
      wReserved : WORD;
      bstrSource : BSTR;
      bstrDescription : BSTR;
      bstrHelpFile : BSTR;
      dwHelpContext : DWORD;
      pvReserved : PVOID;
      pfnDeferredFillIn : access System.Address;
      scode_x : SCODE;
   end record;
   subtype EXCEPINFO is tagEXCEPINFO; -- CXType_Elaborated
   type LPEXCEPINFO is access tagEXCEPINFO; -- CXType_Pointer - CXType_Elaborated
   type tagCALLCONV is (
      CC_FASTCALL,
      CC_CDECL,
      CC_MSCPASCAL,
      CC_MACPASCAL,
      CC_STDCALL,
      CC_FPFASTCALL,
      CC_SYSCALL,
      CC_MPWCDECL,
      CC_MPWPASCAL,
      CC_MAX
   );
   for tagCALLCONV use (
      CC_FASTCALL => 0,
      CC_CDECL => 1,
      CC_MSCPASCAL => 2,
      CC_MACPASCAL => 3,
      CC_STDCALL => 4,
      CC_FPFASTCALL => 5,
      CC_SYSCALL => 6,
      CC_MPWCDECL => 7,
      CC_MPWPASCAL => 8,
      CC_MAX => 9
   );
   for tagCALLCONV'Size use 32;
   subtype CALLCONV is tagCALLCONV; -- CXType_Elaborated
   type tagFUNCKIND is (
      FUNC_VIRTUAL,
      FUNC_PUREVIRTUAL,
      FUNC_NONVIRTUAL,
      FUNC_STATIC,
      FUNC_DISPATCH
   );
   for tagFUNCKIND use (
      FUNC_VIRTUAL => 0,
      FUNC_PUREVIRTUAL => 1,
      FUNC_NONVIRTUAL => 2,
      FUNC_STATIC => 3,
      FUNC_DISPATCH => 4
   );
   for tagFUNCKIND'Size use 32;
   subtype FUNCKIND is tagFUNCKIND; -- CXType_Elaborated
   type tagINVOKEKIND is (
      INVOKE_FUNC,
      INVOKE_PROPERTYGET,
      INVOKE_PROPERTYPUT,
      INVOKE_PROPERTYPUTREF
   );
   for tagINVOKEKIND use (
      INVOKE_FUNC => 1,
      INVOKE_PROPERTYGET => 2,
      INVOKE_PROPERTYPUT => 4,
      INVOKE_PROPERTYPUTREF => 8
   );
   for tagINVOKEKIND'Size use 32;
   subtype INVOKEKIND is tagINVOKEKIND; -- CXType_Elaborated
   type tagFUNCDESC is record
      memid : MEMBERID;
      lprgscode : access SCODE;
      lprgelemdescParam : access ELEMDESC;
      funckind_x : FUNCKIND;
      invkind : INVOKEKIND;
      callconv_x : CALLCONV;
      cParams : SHORT;
      cParamsOpt : SHORT;
      oVft : SHORT;
      cScodes : SHORT;
      elemdescFunc : ELEMDESC;
      wFuncFlags : WORD;
   end record;
   subtype FUNCDESC is tagFUNCDESC; -- CXType_Elaborated
   type LPFUNCDESC is access tagFUNCDESC; -- CXType_Pointer - CXType_Elaborated
   type tagVARKIND is (
      VAR_PERINSTANCE,
      VAR_STATIC,
      VAR_CONST,
      VAR_DISPATCH
   );
   for tagVARKIND use (
      VAR_PERINSTANCE => 0,
      VAR_STATIC => 1,
      VAR_CONST => 2,
      VAR_DISPATCH => 3
   );
   for tagVARKIND'Size use 32;
   subtype VARKIND is tagVARKIND; -- CXType_Elaborated
   type tagVARDESC is record
      memid : MEMBERID;
      lpstrSchema : LPOLESTR;
      elemdescVar : ELEMDESC;
      wVarFlags : WORD;
      varkind_x : VARKIND;
   end record;
   subtype VARDESC is tagVARDESC; -- CXType_Elaborated
   type LPVARDESC is access tagVARDESC; -- CXType_Pointer - CXType_Elaborated
   type tagTYPEFLAGS is (
      TYPEFLAG_FAPPOBJECT,
      TYPEFLAG_FCANCREATE,
      TYPEFLAG_FLICENSED,
      TYPEFLAG_FPREDECLID,
      TYPEFLAG_FHIDDEN,
      TYPEFLAG_FCONTROL,
      TYPEFLAG_FDUAL,
      TYPEFLAG_FNONEXTENSIBLE,
      TYPEFLAG_FOLEAUTOMATION,
      TYPEFLAG_FRESTRICTED,
      TYPEFLAG_FAGGREGATABLE,
      TYPEFLAG_FREPLACEABLE,
      TYPEFLAG_FDISPATCHABLE,
      TYPEFLAG_FREVERSEBIND,
      TYPEFLAG_FPROXY
   );
   for tagTYPEFLAGS use (
      TYPEFLAG_FAPPOBJECT => 1,
      TYPEFLAG_FCANCREATE => 2,
      TYPEFLAG_FLICENSED => 4,
      TYPEFLAG_FPREDECLID => 8,
      TYPEFLAG_FHIDDEN => 16,
      TYPEFLAG_FCONTROL => 32,
      TYPEFLAG_FDUAL => 64,
      TYPEFLAG_FNONEXTENSIBLE => 128,
      TYPEFLAG_FOLEAUTOMATION => 256,
      TYPEFLAG_FRESTRICTED => 512,
      TYPEFLAG_FAGGREGATABLE => 1024,
      TYPEFLAG_FREPLACEABLE => 2048,
      TYPEFLAG_FDISPATCHABLE => 4096,
      TYPEFLAG_FREVERSEBIND => 8192,
      TYPEFLAG_FPROXY => 16384
   );
   for tagTYPEFLAGS'Size use 32;
   subtype TYPEFLAGS is tagTYPEFLAGS; -- CXType_Elaborated
   type tagFUNCFLAGS is (
      FUNCFLAG_FRESTRICTED,
      FUNCFLAG_FSOURCE,
      FUNCFLAG_FBINDABLE,
      FUNCFLAG_FREQUESTEDIT,
      FUNCFLAG_FDISPLAYBIND,
      FUNCFLAG_FDEFAULTBIND,
      FUNCFLAG_FHIDDEN,
      FUNCFLAG_FUSESGETLASTERROR,
      FUNCFLAG_FDEFAULTCOLLELEM,
      FUNCFLAG_FUIDEFAULT,
      FUNCFLAG_FNONBROWSABLE,
      FUNCFLAG_FREPLACEABLE,
      FUNCFLAG_FIMMEDIATEBIND
   );
   for tagFUNCFLAGS use (
      FUNCFLAG_FRESTRICTED => 1,
      FUNCFLAG_FSOURCE => 2,
      FUNCFLAG_FBINDABLE => 4,
      FUNCFLAG_FREQUESTEDIT => 8,
      FUNCFLAG_FDISPLAYBIND => 16,
      FUNCFLAG_FDEFAULTBIND => 32,
      FUNCFLAG_FHIDDEN => 64,
      FUNCFLAG_FUSESGETLASTERROR => 128,
      FUNCFLAG_FDEFAULTCOLLELEM => 256,
      FUNCFLAG_FUIDEFAULT => 512,
      FUNCFLAG_FNONBROWSABLE => 1024,
      FUNCFLAG_FREPLACEABLE => 2048,
      FUNCFLAG_FIMMEDIATEBIND => 4096
   );
   for tagFUNCFLAGS'Size use 32;
   subtype FUNCFLAGS is tagFUNCFLAGS; -- CXType_Elaborated
   type tagVARFLAGS is (
      VARFLAG_FREADONLY,
      VARFLAG_FSOURCE,
      VARFLAG_FBINDABLE,
      VARFLAG_FREQUESTEDIT,
      VARFLAG_FDISPLAYBIND,
      VARFLAG_FDEFAULTBIND,
      VARFLAG_FHIDDEN,
      VARFLAG_FRESTRICTED,
      VARFLAG_FDEFAULTCOLLELEM,
      VARFLAG_FUIDEFAULT,
      VARFLAG_FNONBROWSABLE,
      VARFLAG_FREPLACEABLE,
      VARFLAG_FIMMEDIATEBIND
   );
   for tagVARFLAGS use (
      VARFLAG_FREADONLY => 1,
      VARFLAG_FSOURCE => 2,
      VARFLAG_FBINDABLE => 4,
      VARFLAG_FREQUESTEDIT => 8,
      VARFLAG_FDISPLAYBIND => 16,
      VARFLAG_FDEFAULTBIND => 32,
      VARFLAG_FHIDDEN => 64,
      VARFLAG_FRESTRICTED => 128,
      VARFLAG_FDEFAULTCOLLELEM => 256,
      VARFLAG_FUIDEFAULT => 512,
      VARFLAG_FNONBROWSABLE => 1024,
      VARFLAG_FREPLACEABLE => 2048,
      VARFLAG_FIMMEDIATEBIND => 4096
   );
   for tagVARFLAGS'Size use 32;
   subtype VARFLAGS is tagVARFLAGS; -- CXType_Elaborated
   type tagCLEANLOCALSTORAGE is record
      pInterface : access IUnknown;
      pStorage : PVOID;
      flags : DWORD;
   end record;
   subtype CLEANLOCALSTORAGE is tagCLEANLOCALSTORAGE; -- CXType_Elaborated
   type tagCUSTDATAITEM is record
      guid_x : GUID;
      varValue : VARIANTARG;
   end record;
   subtype CUSTDATAITEM is tagCUSTDATAITEM; -- CXType_Elaborated
   type LPCUSTDATAITEM is access tagCUSTDATAITEM; -- CXType_Pointer - CXType_Elaborated
   type tagCUSTDATA is record
      cCustData : DWORD;
      prgCustData : LPCUSTDATAITEM;
   end record;
   subtype CUSTDATA is tagCUSTDATA; -- CXType_Elaborated
   type LPCUSTDATA is access tagCUSTDATA; -- CXType_Pointer - CXType_Elaborated
   type LPCREATETYPEINFO is access ICreateTypeInfo; -- CXType_Pointer - CXType_Typedef
   type ICreateTypeInfo_Interface is interface and IUnknown_Interface;
      function SetGuid(
         This : access ICreateTypeInfo_Interface;
         guid_x : access constant GUID
      ) return HRESULT is abstract;
      function SetTypeFlags(
         This : access ICreateTypeInfo_Interface;
         uTypeFlags : UINT
      ) return HRESULT is abstract;
      function SetDocString(
         This : access ICreateTypeInfo_Interface;
         pStrDoc : LPOLESTR
      ) return HRESULT is abstract;
      function SetHelpContext(
         This : access ICreateTypeInfo_Interface;
         dwHelpContext : DWORD
      ) return HRESULT is abstract;
      function SetVersion(
         This : access ICreateTypeInfo_Interface;
         wMajorVerNum : WORD;
         wMinorVerNum : WORD
      ) return HRESULT is abstract;
      function AddRefTypeInfo(
         This : access ICreateTypeInfo_Interface;
         pTInfo : access ITypeInfo;
         phRefType : access HREFTYPE
      ) return HRESULT is abstract;
      function AddFuncDesc(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         pFuncDesc : access FUNCDESC
      ) return HRESULT is abstract;
      function AddImplType(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         hRefType_x : HREFTYPE
      ) return HRESULT is abstract;
      function SetImplTypeFlags(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         implTypeFlags : INT
      ) return HRESULT is abstract;
      function SetAlignment(
         This : access ICreateTypeInfo_Interface;
         cbAlignment : WORD
      ) return HRESULT is abstract;
      function SetSchema(
         This : access ICreateTypeInfo_Interface;
         pStrSchema : LPOLESTR
      ) return HRESULT is abstract;
      function AddVarDesc(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         pVarDesc : access VARDESC
      ) return HRESULT is abstract;
      function SetFuncAndParamNames(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         rgszNames : access LPOLESTR;
         cNames : UINT
      ) return HRESULT is abstract;
      function SetVarName(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         szName : LPOLESTR
      ) return HRESULT is abstract;
      function SetTypeDescAlias(
         This : access ICreateTypeInfo_Interface;
         pTDescAlias : access TYPEDESC
      ) return HRESULT is abstract;
      function DefineFuncAsDllEntry(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         szDllName : LPOLESTR;
         szProcName : LPOLESTR
      ) return HRESULT is abstract;
      function SetFuncDocString(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         szDocString : LPOLESTR
      ) return HRESULT is abstract;
      function SetVarDocString(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         szDocString : LPOLESTR
      ) return HRESULT is abstract;
      function SetFuncHelpContext(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         dwHelpContext : DWORD
      ) return HRESULT is abstract;
      function SetVarHelpContext(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         dwHelpContext : DWORD
      ) return HRESULT is abstract;
      function SetMops(
         This : access ICreateTypeInfo_Interface;
         index : UINT;
         bstrMops : BSTR
      ) return HRESULT is abstract;
      function SetTypeIdldesc(
         This : access ICreateTypeInfo_Interface;
         pIdlDesc : access IDLDESC
      ) return HRESULT is abstract;
      function LayOut(This : access ICreateTypeInfo_Interface) return HRESULT is abstract;
   type ICreateTypeInfo is access ICreateTypeInfo_Interface'Class;
   type ICreateTypeInfo_Ptr is access ICreateTypeInfo;
   type LPCREATETYPEINFO2 is access ICreateTypeInfo2; -- CXType_Pointer - CXType_Typedef
   type ICreateTypeInfo2_Interface is interface and ICreateTypeInfo_Interface;
      function DeleteFuncDesc(
         This : access ICreateTypeInfo2_Interface;
         index : UINT
      ) return HRESULT is abstract;
      function DeleteFuncDescByMemId(
         This : access ICreateTypeInfo2_Interface;
         memid : MEMBERID;
         invKind : INVOKEKIND
      ) return HRESULT is abstract;
      function DeleteVarDesc(
         This : access ICreateTypeInfo2_Interface;
         index : UINT
      ) return HRESULT is abstract;
      function DeleteVarDescByMemId(
         This : access ICreateTypeInfo2_Interface;
         memid : MEMBERID
      ) return HRESULT is abstract;
      function DeleteImplType(
         This : access ICreateTypeInfo2_Interface;
         index : UINT
      ) return HRESULT is abstract;
      function SetCustData(
         This : access ICreateTypeInfo2_Interface;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function SetFuncCustData(
         This : access ICreateTypeInfo2_Interface;
         index : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function SetParamCustData(
         This : access ICreateTypeInfo2_Interface;
         indexFunc : UINT;
         indexParam : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function SetVarCustData(
         This : access ICreateTypeInfo2_Interface;
         index : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function SetImplTypeCustData(
         This : access ICreateTypeInfo2_Interface;
         index : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function SetHelpStringContext(
         This : access ICreateTypeInfo2_Interface;
         dwHelpStringContext : ULONG
      ) return HRESULT is abstract;
      function SetFuncHelpStringContext(
         This : access ICreateTypeInfo2_Interface;
         index : UINT;
         dwHelpStringContext : ULONG
      ) return HRESULT is abstract;
      function SetVarHelpStringContext(
         This : access ICreateTypeInfo2_Interface;
         index : UINT;
         dwHelpStringContext : ULONG
      ) return HRESULT is abstract;
      function Invalidate(This : access ICreateTypeInfo2_Interface) return HRESULT is abstract;
      function SetName(
         This : access ICreateTypeInfo2_Interface;
         szName : LPOLESTR
      ) return HRESULT is abstract;
   type ICreateTypeInfo2 is access ICreateTypeInfo2_Interface'Class;
   type ICreateTypeInfo2_Ptr is access ICreateTypeInfo2;
   type LPCREATETYPELIB is access ICreateTypeLib; -- CXType_Pointer - CXType_Typedef
   type ICreateTypeLib_Interface is interface and IUnknown_Interface;
      function CreateTypeInfo(
         This : access ICreateTypeLib_Interface;
         szName : LPOLESTR;
         tkind : TYPEKIND;
         ppCTInfo : access LPCREATETYPEINFO
      ) return HRESULT is abstract;
      function SetName(
         This : access ICreateTypeLib_Interface;
         szName : LPOLESTR
      ) return HRESULT is abstract;
      function SetVersion(
         This : access ICreateTypeLib_Interface;
         wMajorVerNum : WORD;
         wMinorVerNum : WORD
      ) return HRESULT is abstract;
      function SetGuid(
         This : access ICreateTypeLib_Interface;
         guid_x : access constant GUID
      ) return HRESULT is abstract;
      function SetDocString(
         This : access ICreateTypeLib_Interface;
         szDoc : LPOLESTR
      ) return HRESULT is abstract;
      function SetHelpFileName(
         This : access ICreateTypeLib_Interface;
         szHelpFileName : LPOLESTR
      ) return HRESULT is abstract;
      function SetHelpContext(
         This : access ICreateTypeLib_Interface;
         dwHelpContext : DWORD
      ) return HRESULT is abstract;
      function SetLcid(
         This : access ICreateTypeLib_Interface;
         lcid_x : LCID
      ) return HRESULT is abstract;
      function SetLibFlags(
         This : access ICreateTypeLib_Interface;
         uLibFlags : UINT
      ) return HRESULT is abstract;
      function SaveAllChanges(This : access ICreateTypeLib_Interface) return HRESULT is abstract;
   type ICreateTypeLib is access ICreateTypeLib_Interface'Class;
   type ICreateTypeLib_Ptr is access ICreateTypeLib;
   type LPCREATETYPELIB2 is access ICreateTypeLib2; -- CXType_Pointer - CXType_Typedef
   type ICreateTypeLib2_Interface is interface and ICreateTypeLib_Interface;
      function DeleteTypeInfo(
         This : access ICreateTypeLib2_Interface;
         szName : LPOLESTR
      ) return HRESULT is abstract;
      function SetCustData(
         This : access ICreateTypeLib2_Interface;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function SetHelpStringContext(
         This : access ICreateTypeLib2_Interface;
         dwHelpStringContext : ULONG
      ) return HRESULT is abstract;
      function SetHelpStringDll(
         This : access ICreateTypeLib2_Interface;
         szFileName : LPOLESTR
      ) return HRESULT is abstract;
   type ICreateTypeLib2 is access ICreateTypeLib2_Interface'Class;
   type ICreateTypeLib2_Ptr is access ICreateTypeLib2;
   type LPDISPATCH is access IDispatch; -- CXType_Pointer - CXType_Typedef
   type ITypeInfo_Ptr is access all ITypeInfo; -- Auto Generated Dependancy
   type IDispatch_Interface is interface and IUnknown_Interface;
      function GetTypeInfoCount(
         This : access IDispatch_Interface;
         pctinfo : access UINT
      ) return HRESULT is abstract;
      function GetTypeInfo(
         This : access IDispatch_Interface;
         iTInfo : UINT;
         lcid_x : LCID;
         ppTInfo : access ITypeInfo_Ptr
      ) return HRESULT is abstract;
      function GetIDsOfNames(
         This : access IDispatch_Interface;
         riid : access constant IID;
         rgszNames : access LPOLESTR;
         cNames : UINT;
         lcid_x : LCID;
         rgDispId : access DISPID
      ) return HRESULT is abstract;
      function Invoke(
         This : access IDispatch_Interface;
         dispIdMember : DISPID;
         riid : access constant IID;
         lcid_x : LCID;
         wFlags : WORD;
         pDispParams : access DISPPARAMS;
         pVarResult : access VARIANT;
         pExcepInfo : access EXCEPINFO;
         puArgErr : access UINT
      ) return HRESULT is abstract;
   type IDispatch is access IDispatch_Interface'Class;
   function IDispatch_RemoteInvoke_Proxy(
      This : access IDispatch;
      dispIdMember : DISPID;
      riid : access constant IID;
      lcid_x : LCID;
      dwFlags : DWORD;
      pDispParams : access DISPPARAMS;
      pVarResult : access VARIANT;
      pExcepInfo : access EXCEPINFO;
      pArgErr : access UINT;
      cVarRef : UINT;
      rgVarRefIdx : access UINT;
      rgVarRef : access VARIANTARG
   ) return HRESULT;
   pragma import (C,IDispatch_RemoteInvoke_Proxy,"IDispatch_RemoteInvoke_Proxy");
   procedure IDispatch_RemoteInvoke_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IDispatch_RemoteInvoke_Stub,"IDispatch_RemoteInvoke_Stub");
   type LPENUMVARIANT is access IEnumVARIANT; -- CXType_Pointer - CXType_Typedef
   type IEnumVARIANT_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumVARIANT_Interface;
         celt : ULONG;
         rgVar : access VARIANT;
         pCeltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumVARIANT_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumVARIANT_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumVARIANT_Interface;
         ppEnum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumVARIANT is access IEnumVARIANT_Interface'Class;
   type IEnumVARIANT_Ptr is access IEnumVARIANT;
   function IEnumVARIANT_RemoteNext_Proxy(
      This : access IEnumVARIANT;
      celt : ULONG;
      rgVar : access VARIANT;
      pCeltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumVARIANT_RemoteNext_Proxy,"IEnumVARIANT_RemoteNext_Proxy");
   procedure IEnumVARIANT_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumVARIANT_RemoteNext_Stub,"IEnumVARIANT_RemoteNext_Stub");
   type LPTYPECOMP is access ITypeComp; -- CXType_Pointer - CXType_Typedef
   type tagDESCKIND is (
      DESCKIND_NONE,
      DESCKIND_FUNCDESC,
      DESCKIND_VARDESC,
      DESCKIND_TYPECOMP,
      DESCKIND_IMPLICITAPPOBJ,
      DESCKIND_MAX
   );
   for tagDESCKIND use (
      DESCKIND_NONE => 0,
      DESCKIND_FUNCDESC => 1,
      DESCKIND_VARDESC => 2,
      DESCKIND_TYPECOMP => 3,
      DESCKIND_IMPLICITAPPOBJ => 4,
      DESCKIND_MAX => 5
   );
   for tagDESCKIND'Size use 32;
   subtype DESCKIND is tagDESCKIND; -- CXType_Elaborated
   type tagBINDPTR is null record; -- Union Placeholder [FIXME]
   subtype BINDPTR is tagBINDPTR; -- CXType_Elaborated
   type LPBINDPTR is access tagBINDPTR; -- CXType_Pointer - CXType_Elaborated
   type ITypeComp_Interface is interface and IUnknown_Interface;
      function Bind(
         This : access ITypeComp_Interface;
         szName : LPOLESTR;
         lHashVal : ULONG;
         wFlags : WORD;
         ppTInfo : access ITypeInfo_Ptr;
         pDescKind : access DESCKIND;
         pBindPtr : access BINDPTR
      ) return HRESULT is abstract;
      function BindType(
         This : access ITypeComp_Interface;
         szName : LPOLESTR;
         lHashVal : ULONG;
         ppTInfo : access ITypeInfo_Ptr;
         ppTComp : access LPVOID
      ) return HRESULT is abstract;
   type ITypeComp is access ITypeComp_Interface'Class;
   type ITypeComp_Ptr is access ITypeComp;
   function ITypeComp_RemoteBind_Proxy(
      This : access ITypeComp;
      szName : LPOLESTR;
      lHashVal : ULONG;
      wFlags : WORD;
      ppTInfo : access ITypeInfo_Ptr;
      pDescKind : access DESCKIND;
      ppFuncDesc : access LPFUNCDESC;
      ppVarDesc : access LPVARDESC;
      ppTypeComp : access LPTYPECOMP;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeComp_RemoteBind_Proxy,"ITypeComp_RemoteBind_Proxy");
   procedure ITypeComp_RemoteBind_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeComp_RemoteBind_Stub,"ITypeComp_RemoteBind_Stub");
   function ITypeComp_RemoteBindType_Proxy(
      This : access ITypeComp;
      szName : LPOLESTR;
      lHashVal : ULONG;
      ppTInfo : access ITypeInfo_Ptr
   ) return HRESULT;
   pragma import (C,ITypeComp_RemoteBindType_Proxy,"ITypeComp_RemoteBindType_Proxy");
   procedure ITypeComp_RemoteBindType_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeComp_RemoteBindType_Stub,"ITypeComp_RemoteBindType_Stub");
   type LPTYPEINFO is access ITypeInfo; -- CXType_Pointer - CXType_Typedef
   type TYPEATTR_Ptr is access all TYPEATTR; -- Auto Generated Dependancy
   type FUNCDESC_Ptr is access all FUNCDESC; -- Auto Generated Dependancy
   type VARDESC_Ptr is access all VARDESC; -- Auto Generated Dependancy
   type ITypeLib_Ptr is access all ITypeLib; -- Auto Generated Dependancy
   type ITypeInfo_Interface is interface and IUnknown_Interface;
      function GetTypeAttr(
         This : access ITypeInfo_Interface;
         ppTypeAttr : access TYPEATTR_Ptr
      ) return HRESULT is abstract;
      function GetTypeComp(
         This : access ITypeInfo_Interface;
         ppTComp : access LPTYPECOMP
      ) return HRESULT is abstract;
      function GetFuncDesc(
         This : access ITypeInfo_Interface;
         index : UINT;
         ppFuncDesc : access FUNCDESC_Ptr
      ) return HRESULT is abstract;
      function GetVarDesc(
         This : access ITypeInfo_Interface;
         index : UINT;
         ppVarDesc : access VARDESC_Ptr
      ) return HRESULT is abstract;
      function GetNames(
         This : access ITypeInfo_Interface;
         memid : MEMBERID;
         rgBstrNames : access BSTR;
         cMaxNames : UINT;
         pcNames : access UINT
      ) return HRESULT is abstract;
      function GetRefTypeOfImplType(
         This : access ITypeInfo_Interface;
         index : UINT;
         pRefType : access HREFTYPE
      ) return HRESULT is abstract;
      function GetImplTypeFlags(
         This : access ITypeInfo_Interface;
         index : UINT;
         pImplTypeFlags : access INT
      ) return HRESULT is abstract;
      function GetIDsOfNames(
         This : access ITypeInfo_Interface;
         rgszNames : access LPOLESTR;
         cNames : UINT;
         pMemId : access MEMBERID
      ) return HRESULT is abstract;
      function Invoke(
         This : access ITypeInfo_Interface;
         pvInstance : PVOID;
         memid : MEMBERID;
         wFlags : WORD;
         pDispParams : access DISPPARAMS;
         pVarResult : access VARIANT;
         pExcepInfo : access EXCEPINFO;
         puArgErr : access UINT
      ) return HRESULT is abstract;
      function GetDocumentation(
         This : access ITypeInfo_Interface;
         memid : MEMBERID;
         pBstrName : access BSTR;
         pBstrDocString : access BSTR;
         pdwHelpContext : access DWORD;
         pBstrHelpFile : access BSTR
      ) return HRESULT is abstract;
      function GetDllEntry(
         This : access ITypeInfo_Interface;
         memid : MEMBERID;
         invKind : INVOKEKIND;
         pBstrDllName : access BSTR;
         pBstrName : access BSTR;
         pwOrdinal : access WORD
      ) return HRESULT is abstract;
      function GetRefTypeInfo(
         This : access ITypeInfo_Interface;
         hRefType_x : HREFTYPE;
         ppTInfo : access LPVOID
      ) return HRESULT is abstract;
      function AddressOfMember(
         This : access ITypeInfo_Interface;
         memid : MEMBERID;
         invKind : INVOKEKIND;
         ppv : access PVOID
      ) return HRESULT is abstract;
      function CreateInstance(
         This : access ITypeInfo_Interface;
         pUnkOuter : access Void;
         riid : access constant IID;
         ppvObj : access PVOID
      ) return HRESULT is abstract;
      function GetMops(
         This : access ITypeInfo_Interface;
         memid : MEMBERID;
         pBstrMops : access BSTR
      ) return HRESULT is abstract;
      function GetContainingTypeLib(
         This : access ITypeInfo_Interface;
         ppTLib : access ITypeLib_Ptr;
         pIndex : access UINT
      ) return HRESULT is abstract;
      procedure ReleaseTypeAttr(
         This : access ITypeInfo_Interface;
         pTypeAttr : access TYPEATTR
      ) is abstract;
      procedure ReleaseFuncDesc(
         This : access ITypeInfo_Interface;
         pFuncDesc : access FUNCDESC
      ) is abstract;
      procedure ReleaseVarDesc(
         This : access ITypeInfo_Interface;
         pVarDesc : access VARDESC
      ) is abstract;
   type ITypeInfo is access ITypeInfo_Interface'Class;
   function ITypeInfo_RemoteGetTypeAttr_Proxy(
      This : access ITypeInfo;
      ppTypeAttr : access LPTYPEATTR;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetTypeAttr_Proxy,"ITypeInfo_RemoteGetTypeAttr_Proxy");
   procedure ITypeInfo_RemoteGetTypeAttr_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetTypeAttr_Stub,"ITypeInfo_RemoteGetTypeAttr_Stub");
   function ITypeInfo_RemoteGetFuncDesc_Proxy(
      This : access ITypeInfo;
      index : UINT;
      ppFuncDesc : access LPFUNCDESC;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetFuncDesc_Proxy,"ITypeInfo_RemoteGetFuncDesc_Proxy");
   procedure ITypeInfo_RemoteGetFuncDesc_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetFuncDesc_Stub,"ITypeInfo_RemoteGetFuncDesc_Stub");
   function ITypeInfo_RemoteGetVarDesc_Proxy(
      This : access ITypeInfo;
      index : UINT;
      ppVarDesc : access LPVARDESC;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetVarDesc_Proxy,"ITypeInfo_RemoteGetVarDesc_Proxy");
   procedure ITypeInfo_RemoteGetVarDesc_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetVarDesc_Stub,"ITypeInfo_RemoteGetVarDesc_Stub");
   function ITypeInfo_RemoteGetNames_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      rgBstrNames : access BSTR;
      cMaxNames : UINT;
      pcNames : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetNames_Proxy,"ITypeInfo_RemoteGetNames_Proxy");
   procedure ITypeInfo_RemoteGetNames_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetNames_Stub,"ITypeInfo_RemoteGetNames_Stub");
   function ITypeInfo_LocalGetIDsOfNames_Proxy(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_LocalGetIDsOfNames_Proxy,"ITypeInfo_LocalGetIDsOfNames_Proxy");
   procedure ITypeInfo_LocalGetIDsOfNames_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_LocalGetIDsOfNames_Stub,"ITypeInfo_LocalGetIDsOfNames_Stub");
   function ITypeInfo_LocalInvoke_Proxy(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_LocalInvoke_Proxy,"ITypeInfo_LocalInvoke_Proxy");
   procedure ITypeInfo_LocalInvoke_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_LocalInvoke_Stub,"ITypeInfo_LocalInvoke_Stub");
   function ITypeInfo_RemoteGetDocumentation_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      refPtrFlags : DWORD;
      pBstrName : access BSTR;
      pBstrDocString : access BSTR;
      pdwHelpContext : access DWORD;
      pBstrHelpFile : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetDocumentation_Proxy,"ITypeInfo_RemoteGetDocumentation_Proxy");
   procedure ITypeInfo_RemoteGetDocumentation_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetDocumentation_Stub,"ITypeInfo_RemoteGetDocumentation_Stub");
   function ITypeInfo_RemoteGetDllEntry_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      invKind : INVOKEKIND;
      refPtrFlags : DWORD;
      pBstrDllName : access BSTR;
      pBstrName : access BSTR;
      pwOrdinal : access WORD
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetDllEntry_Proxy,"ITypeInfo_RemoteGetDllEntry_Proxy");
   procedure ITypeInfo_RemoteGetDllEntry_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetDllEntry_Stub,"ITypeInfo_RemoteGetDllEntry_Stub");
   function ITypeInfo_LocalAddressOfMember_Proxy(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_LocalAddressOfMember_Proxy,"ITypeInfo_LocalAddressOfMember_Proxy");
   procedure ITypeInfo_LocalAddressOfMember_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_LocalAddressOfMember_Stub,"ITypeInfo_LocalAddressOfMember_Stub");
   function ITypeInfo_RemoteCreateInstance_Proxy(
      This : access ITypeInfo;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteCreateInstance_Proxy,"ITypeInfo_RemoteCreateInstance_Proxy");
   procedure ITypeInfo_RemoteCreateInstance_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteCreateInstance_Stub,"ITypeInfo_RemoteCreateInstance_Stub");
   function ITypeInfo_RemoteGetContainingTypeLib_Proxy(
      This : access ITypeInfo;
      ppTLib : access ITypeLib_Ptr;
      pIndex : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_RemoteGetContainingTypeLib_Proxy,"ITypeInfo_RemoteGetContainingTypeLib_Proxy");
   procedure ITypeInfo_RemoteGetContainingTypeLib_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_RemoteGetContainingTypeLib_Stub,"ITypeInfo_RemoteGetContainingTypeLib_Stub");
   function ITypeInfo_LocalReleaseTypeAttr_Proxy(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_LocalReleaseTypeAttr_Proxy,"ITypeInfo_LocalReleaseTypeAttr_Proxy");
   procedure ITypeInfo_LocalReleaseTypeAttr_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_LocalReleaseTypeAttr_Stub,"ITypeInfo_LocalReleaseTypeAttr_Stub");
   function ITypeInfo_LocalReleaseFuncDesc_Proxy(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_LocalReleaseFuncDesc_Proxy,"ITypeInfo_LocalReleaseFuncDesc_Proxy");
   procedure ITypeInfo_LocalReleaseFuncDesc_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_LocalReleaseFuncDesc_Stub,"ITypeInfo_LocalReleaseFuncDesc_Stub");
   function ITypeInfo_LocalReleaseVarDesc_Proxy(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_LocalReleaseVarDesc_Proxy,"ITypeInfo_LocalReleaseVarDesc_Proxy");
   procedure ITypeInfo_LocalReleaseVarDesc_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo_LocalReleaseVarDesc_Stub,"ITypeInfo_LocalReleaseVarDesc_Stub");
   type LPTYPEINFO2 is access ITypeInfo2; -- CXType_Pointer - CXType_Typedef
   type ITypeInfo2_Interface is interface and ITypeInfo_Interface;
      function GetTypeKind(
         This : access ITypeInfo2_Interface;
         pTypeKind : access TYPEKIND
      ) return HRESULT is abstract;
      function GetTypeFlags(
         This : access ITypeInfo2_Interface;
         pTypeFlags : access ULONG
      ) return HRESULT is abstract;
      function GetFuncIndexOfMemId(
         This : access ITypeInfo2_Interface;
         memid : MEMBERID;
         invKind : INVOKEKIND;
         pFuncIndex : access UINT
      ) return HRESULT is abstract;
      function GetVarIndexOfMemId(
         This : access ITypeInfo2_Interface;
         memid : MEMBERID;
         pVarIndex : access UINT
      ) return HRESULT is abstract;
      function GetCustData(
         This : access ITypeInfo2_Interface;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function GetFuncCustData(
         This : access ITypeInfo2_Interface;
         index : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function GetParamCustData(
         This : access ITypeInfo2_Interface;
         indexFunc : UINT;
         indexParam : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function GetVarCustData(
         This : access ITypeInfo2_Interface;
         index : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function GetImplTypeCustData(
         This : access ITypeInfo2_Interface;
         index : UINT;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function GetDocumentation2(
         This : access ITypeInfo2_Interface;
         memid : MEMBERID;
         lcid_x : LCID;
         pbstrHelpString : access BSTR;
         pdwHelpStringContext : access DWORD;
         pbstrHelpStringDll : access BSTR
      ) return HRESULT is abstract;
      function GetAllCustData(
         This : access ITypeInfo2_Interface;
         pCustData : access CUSTDATA
      ) return HRESULT is abstract;
      function GetAllFuncCustData(
         This : access ITypeInfo2_Interface;
         index : UINT;
         pCustData : access CUSTDATA
      ) return HRESULT is abstract;
      function GetAllParamCustData(
         This : access ITypeInfo2_Interface;
         indexFunc : UINT;
         indexParam : UINT;
         pCustData : access CUSTDATA
      ) return HRESULT is abstract;
      function GetAllVarCustData(
         This : access ITypeInfo2_Interface;
         index : UINT;
         pCustData : access CUSTDATA
      ) return HRESULT is abstract;
      function GetAllImplTypeCustData(
         This : access ITypeInfo2_Interface;
         index : UINT;
         pCustData : access CUSTDATA
      ) return HRESULT is abstract;
   type ITypeInfo2 is access ITypeInfo2_Interface'Class;
   type ITypeInfo2_Ptr is access ITypeInfo2;
   function ITypeInfo2_RemoteGetDocumentation2_Proxy(
      This : access ITypeInfo2;
      memid : MEMBERID;
      lcid_x : LCID;
      refPtrFlags : DWORD;
      pbstrHelpString : access BSTR;
      pdwHelpStringContext : access DWORD;
      pbstrHelpStringDll : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeInfo2_RemoteGetDocumentation2_Proxy,"ITypeInfo2_RemoteGetDocumentation2_Proxy");
   procedure ITypeInfo2_RemoteGetDocumentation2_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeInfo2_RemoteGetDocumentation2_Stub,"ITypeInfo2_RemoteGetDocumentation2_Stub");
   type tagSYSKIND is (
      SYS_WIN16,
      SYS_WIN32,
      SYS_MAC,
      SYS_WIN64
   );
   for tagSYSKIND use (
      SYS_WIN16 => 0,
      SYS_WIN32 => 1,
      SYS_MAC => 2,
      SYS_WIN64 => 3
   );
   for tagSYSKIND'Size use 32;
   subtype SYSKIND is tagSYSKIND; -- CXType_Elaborated
   type tagLIBFLAGS is (
      LIBFLAG_FRESTRICTED,
      LIBFLAG_FCONTROL,
      LIBFLAG_FHIDDEN,
      LIBFLAG_FHASDISKIMAGE
   );
   for tagLIBFLAGS use (
      LIBFLAG_FRESTRICTED => 1,
      LIBFLAG_FCONTROL => 2,
      LIBFLAG_FHIDDEN => 4,
      LIBFLAG_FHASDISKIMAGE => 8
   );
   for tagLIBFLAGS'Size use 32;
   subtype LIBFLAGS is tagLIBFLAGS; -- CXType_Elaborated
   type LPTYPELIB is access ITypeLib; -- CXType_Pointer - CXType_Typedef
   type tagTLIBATTR is record
      guid_x : GUID;
      lcid_x : LCID;
      syskind_x : SYSKIND;
      wMajorVerNum : WORD;
      wMinorVerNum : WORD;
      wLibFlags : WORD;
   end record;
   subtype TLIBATTR is tagTLIBATTR; -- CXType_Elaborated
   type LPTLIBATTR is access tagTLIBATTR; -- CXType_Pointer - CXType_Elaborated
   type TLIBATTR_Ptr is access all TLIBATTR; -- Auto Generated Dependancy
   type ITypeLib_Interface is interface and IUnknown_Interface;
      function GetTypeInfoCount(This : access ITypeLib_Interface) return UINT is abstract;
      function GetTypeInfo(
         This : access ITypeLib_Interface;
         index : UINT;
         ppTInfo : access LPTYPEINFO
      ) return HRESULT is abstract;
      function GetTypeInfoType(
         This : access ITypeLib_Interface;
         index : UINT;
         pTKind : access TYPEKIND
      ) return HRESULT is abstract;
      function GetTypeInfoOfGuid(
         This : access ITypeLib_Interface;
         guid_x : access constant GUID;
         ppTinfo : access LPTYPEINFO
      ) return HRESULT is abstract;
      function GetLibAttr(
         This : access ITypeLib_Interface;
         ppTLibAttr : access TLIBATTR_Ptr
      ) return HRESULT is abstract;
      function GetTypeComp(
         This : access ITypeLib_Interface;
         ppTComp : access LPTYPECOMP
      ) return HRESULT is abstract;
      function GetDocumentation(
         This : access ITypeLib_Interface;
         index : INT;
         pBstrName : access BSTR;
         pBstrDocString : access BSTR;
         pdwHelpContext : access DWORD;
         pBstrHelpFile : access BSTR
      ) return HRESULT is abstract;
      function IsName(
         This : access ITypeLib_Interface;
         szNameBuf : LPOLESTR;
         lHashVal : ULONG;
         pfName : access BOOL
      ) return HRESULT is abstract;
      function FindName(
         This : access ITypeLib_Interface;
         szNameBuf : LPOLESTR;
         lHashVal : ULONG;
         ppTInfo : access LPTYPEINFO;
         rgMemId : access MEMBERID;
         pcFound : access USHORT
      ) return HRESULT is abstract;
      procedure ReleaseTLibAttr(
         This : access ITypeLib_Interface;
         pTLibAttr : access TLIBATTR
      ) is abstract;
   type ITypeLib is access ITypeLib_Interface'Class;
   function ITypeLib_RemoteGetTypeInfoCount_Proxy(
      This : access ITypeLib;
      pcTInfo : access UINT
   ) return HRESULT;
   pragma import (C,ITypeLib_RemoteGetTypeInfoCount_Proxy,"ITypeLib_RemoteGetTypeInfoCount_Proxy");
   procedure ITypeLib_RemoteGetTypeInfoCount_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib_RemoteGetTypeInfoCount_Stub,"ITypeLib_RemoteGetTypeInfoCount_Stub");
   function ITypeLib_RemoteGetLibAttr_Proxy(
      This : access ITypeLib;
      ppTLibAttr : access LPTLIBATTR;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeLib_RemoteGetLibAttr_Proxy,"ITypeLib_RemoteGetLibAttr_Proxy");
   procedure ITypeLib_RemoteGetLibAttr_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib_RemoteGetLibAttr_Stub,"ITypeLib_RemoteGetLibAttr_Stub");
   function ITypeLib_RemoteGetDocumentation_Proxy(
      This : access ITypeLib;
      index : INT;
      refPtrFlags : DWORD;
      pBstrName : access BSTR;
      pBstrDocString : access BSTR;
      pdwHelpContext : access DWORD;
      pBstrHelpFile : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_RemoteGetDocumentation_Proxy,"ITypeLib_RemoteGetDocumentation_Proxy");
   procedure ITypeLib_RemoteGetDocumentation_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib_RemoteGetDocumentation_Stub,"ITypeLib_RemoteGetDocumentation_Stub");
   function ITypeLib_RemoteIsName_Proxy(
      This : access ITypeLib;
      szNameBuf : LPOLESTR;
      lHashVal : ULONG;
      pfName : access BOOL;
      pBstrLibName : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_RemoteIsName_Proxy,"ITypeLib_RemoteIsName_Proxy");
   procedure ITypeLib_RemoteIsName_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib_RemoteIsName_Stub,"ITypeLib_RemoteIsName_Stub");
   function ITypeLib_RemoteFindName_Proxy(
      This : access ITypeLib;
      szNameBuf : LPOLESTR;
      lHashVal : ULONG;
      ppTInfo : access LPTYPEINFO;
      rgMemId : access MEMBERID;
      pcFound : access USHORT;
      pBstrLibName : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_RemoteFindName_Proxy,"ITypeLib_RemoteFindName_Proxy");
   procedure ITypeLib_RemoteFindName_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib_RemoteFindName_Stub,"ITypeLib_RemoteFindName_Stub");
   function ITypeLib_LocalReleaseTLibAttr_Proxy(
      This : access ITypeLib
   ) return HRESULT;
   pragma import (C,ITypeLib_LocalReleaseTLibAttr_Proxy,"ITypeLib_LocalReleaseTLibAttr_Proxy");
   procedure ITypeLib_LocalReleaseTLibAttr_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib_LocalReleaseTLibAttr_Stub,"ITypeLib_LocalReleaseTLibAttr_Stub");
   type LPTYPELIB2 is access ITypeLib2; -- CXType_Pointer - CXType_Typedef
   type ITypeLib2_Interface is interface and ITypeLib_Interface;
      function GetCustData(
         This : access ITypeLib2_Interface;
         guid_x : access constant GUID;
         pVarVal : access VARIANT
      ) return HRESULT is abstract;
      function GetLibStatistics(
         This : access ITypeLib2_Interface;
         pcUniqueNames : access ULONG;
         pcchUniqueNames : access ULONG
      ) return HRESULT is abstract;
      function GetDocumentation2(
         This : access ITypeLib2_Interface;
         index : INT;
         lcid_x : LCID;
         pbstrHelpString : access BSTR;
         pdwHelpStringContext : access DWORD;
         pbstrHelpStringDll : access BSTR
      ) return HRESULT is abstract;
      function GetAllCustData(
         This : access ITypeLib2_Interface;
         pCustData : access CUSTDATA
      ) return HRESULT is abstract;
   type ITypeLib2 is access ITypeLib2_Interface'Class;
   type ITypeLib2_Ptr is access ITypeLib2;
   function ITypeLib2_RemoteGetLibStatistics_Proxy(
      This : access ITypeLib2;
      pcUniqueNames : access ULONG;
      pcchUniqueNames : access ULONG
   ) return HRESULT;
   pragma import (C,ITypeLib2_RemoteGetLibStatistics_Proxy,"ITypeLib2_RemoteGetLibStatistics_Proxy");
   procedure ITypeLib2_RemoteGetLibStatistics_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib2_RemoteGetLibStatistics_Stub,"ITypeLib2_RemoteGetLibStatistics_Stub");
   function ITypeLib2_RemoteGetDocumentation2_Proxy(
      This : access ITypeLib2;
      index : INT;
      lcid_x : LCID;
      refPtrFlags : DWORD;
      pbstrHelpString : access BSTR;
      pdwHelpStringContext : access DWORD;
      pbstrHelpStringDll : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib2_RemoteGetDocumentation2_Proxy,"ITypeLib2_RemoteGetDocumentation2_Proxy");
   procedure ITypeLib2_RemoteGetDocumentation2_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,ITypeLib2_RemoteGetDocumentation2_Stub,"ITypeLib2_RemoteGetDocumentation2_Stub");
   type LPTYPECHANGEEVENTS is access ITypeChangeEvents; -- CXType_Pointer - CXType_Typedef
   type tagCHANGEKIND is (
      CHANGEKIND_ADDMEMBER,
      CHANGEKIND_DELETEMEMBER,
      CHANGEKIND_SETNAMES,
      CHANGEKIND_SETDOCUMENTATION,
      CHANGEKIND_GENERAL,
      CHANGEKIND_INVALIDATE,
      CHANGEKIND_CHANGEFAILED,
      CHANGEKIND_MAX
   );
   for tagCHANGEKIND use (
      CHANGEKIND_ADDMEMBER => 0,
      CHANGEKIND_DELETEMEMBER => 1,
      CHANGEKIND_SETNAMES => 2,
      CHANGEKIND_SETDOCUMENTATION => 3,
      CHANGEKIND_GENERAL => 4,
      CHANGEKIND_INVALIDATE => 5,
      CHANGEKIND_CHANGEFAILED => 6,
      CHANGEKIND_MAX => 7
   );
   for tagCHANGEKIND'Size use 32;
   subtype CHANGEKIND is tagCHANGEKIND; -- CXType_Elaborated
   type ITypeChangeEvents_Interface is interface and IUnknown_Interface;
      function RequestTypeChange(
         This : access ITypeChangeEvents_Interface;
         changeKind_x : CHANGEKIND;
         pTInfoBefore : access ITypeInfo;
         pStrName : LPOLESTR;
         pfCancel : access INT
      ) return HRESULT is abstract;
      function AfterTypeChange(
         This : access ITypeChangeEvents_Interface;
         changeKind_x : CHANGEKIND;
         pTInfoAfter : access ITypeInfo;
         pStrName : LPOLESTR
      ) return HRESULT is abstract;
   type ITypeChangeEvents is access ITypeChangeEvents_Interface'Class;
   type ITypeChangeEvents_Ptr is access ITypeChangeEvents;
   type LPERRORINFO is access IErrorInfo; -- CXType_Pointer - CXType_Typedef
   type IErrorInfo_Interface is interface and IUnknown_Interface;
      function GetGUID(
         This : access IErrorInfo_Interface;
         pGUID : access GUID
      ) return HRESULT is abstract;
      function GetSource(
         This : access IErrorInfo_Interface;
         pBstrSource : access BSTR
      ) return HRESULT is abstract;
      function GetDescription(
         This : access IErrorInfo_Interface;
         pBstrDescription : access BSTR
      ) return HRESULT is abstract;
      function GetHelpFile(
         This : access IErrorInfo_Interface;
         pBstrHelpFile : access BSTR
      ) return HRESULT is abstract;
      function GetHelpContext(
         This : access IErrorInfo_Interface;
         pdwHelpContext : access DWORD
      ) return HRESULT is abstract;
   type IErrorInfo is access IErrorInfo_Interface'Class;
   type IErrorInfo_Ptr is access IErrorInfo;
   type LPCREATEERRORINFO is access ICreateErrorInfo; -- CXType_Pointer - CXType_Typedef
   type ICreateErrorInfo_Interface is interface and IUnknown_Interface;
      function SetGUID(
         This : access ICreateErrorInfo_Interface;
         rguid : access constant GUID
      ) return HRESULT is abstract;
      function SetSource(
         This : access ICreateErrorInfo_Interface;
         szSource : LPOLESTR
      ) return HRESULT is abstract;
      function SetDescription(
         This : access ICreateErrorInfo_Interface;
         szDescription : LPOLESTR
      ) return HRESULT is abstract;
      function SetHelpFile(
         This : access ICreateErrorInfo_Interface;
         szHelpFile : LPOLESTR
      ) return HRESULT is abstract;
      function SetHelpContext(
         This : access ICreateErrorInfo_Interface;
         dwHelpContext : DWORD
      ) return HRESULT is abstract;
   type ICreateErrorInfo is access ICreateErrorInfo_Interface'Class;
   type ICreateErrorInfo_Ptr is access ICreateErrorInfo;
   type LPSUPPORTERRORINFO is access ISupportErrorInfo; -- CXType_Pointer - CXType_Typedef
   type ISupportErrorInfo_Interface is interface and IUnknown_Interface;
      function InterfaceSupportsErrorInfo(
         This : access ISupportErrorInfo_Interface;
         riid : access constant IID
      ) return HRESULT is abstract;
   type ISupportErrorInfo is access ISupportErrorInfo_Interface'Class;
   type ISupportErrorInfo_Ptr is access ISupportErrorInfo;
   type ITypeFactory_Interface is interface and IUnknown_Interface;
      function CreateFromTypeInfo(
         This : access ITypeFactory_Interface;
         pTypeInfo : access ITypeInfo;
         riid : access constant IID;
         ppv : access LPVOID
      ) return HRESULT is abstract;
   type ITypeFactory is access ITypeFactory_Interface'Class;
   type ITypeFactory_Ptr is access ITypeFactory;
   type ITypeMarshal_Interface is interface and IUnknown_Interface;
      function Size_x(
         This : access ITypeMarshal_Interface;
         pvType : PVOID;
         dwDestContext : DWORD;
         pvDestContext : PVOID;
         pSize_x : access ULONG
      ) return HRESULT is abstract;
      function Marshal(
         This : access ITypeMarshal_Interface;
         pvType : PVOID;
         dwDestContext : DWORD;
         pvDestContext : PVOID;
         cbBufferLength : ULONG;
         pBuffer : access BYTE;
         pcbWritten : access ULONG
      ) return HRESULT is abstract;
      function Unmarshal(
         This : access ITypeMarshal_Interface;
         pvType : PVOID;
         dwFlags : DWORD;
         cbBufferLength : ULONG;
         pBuffer : access BYTE;
         pcbRead : access ULONG
      ) return HRESULT is abstract;
      function Free(
         This : access ITypeMarshal_Interface;
         pvType : PVOID
      ) return HRESULT is abstract;
   type ITypeMarshal is access ITypeMarshal_Interface'Class;
   type ITypeMarshal_Ptr is access ITypeMarshal;
   type LPRECORDINFO is access IRecordInfo; -- CXType_Pointer - CXType_Typedef
   type IRecordInfo_Interface is interface and IUnknown_Interface;
      function RecordInit(
         This : access IRecordInfo_Interface;
         pvNew : PVOID
      ) return HRESULT is abstract;
      function RecordClear(
         This : access IRecordInfo_Interface;
         pvExisting : PVOID
      ) return HRESULT is abstract;
      function RecordCopy(
         This : access IRecordInfo_Interface;
         pvExisting : PVOID;
         pvNew : PVOID
      ) return HRESULT is abstract;
      function GetGuid(
         This : access IRecordInfo_Interface;
         pguid : access GUID
      ) return HRESULT is abstract;
      function GetName(
         This : access IRecordInfo_Interface;
         pbstrName : access BSTR
      ) return HRESULT is abstract;
      function GetSize(
         This : access IRecordInfo_Interface;
         pcbSize : access ULONG
      ) return HRESULT is abstract;
      function GetTypeInfo(
         This : access IRecordInfo_Interface;
         ppTypeInfo : access LPTYPEINFO
      ) return HRESULT is abstract;
      function GetField(
         This : access IRecordInfo_Interface;
         pvData : PVOID;
         szFieldName : LPCOLESTR;
         pvarField : access VARIANT
      ) return HRESULT is abstract;
      function GetFieldNoCopy(
         This : access IRecordInfo_Interface;
         pvData : PVOID;
         szFieldName : LPCOLESTR;
         pvarField : access VARIANT;
         ppvDataCArray : access PVOID
      ) return HRESULT is abstract;
      function PutField(
         This : access IRecordInfo_Interface;
         wFlags : ULONG;
         pvData : PVOID;
         szFieldName : LPCOLESTR;
         pvarField : access VARIANT
      ) return HRESULT is abstract;
      function PutFieldNoCopy(
         This : access IRecordInfo_Interface;
         wFlags : ULONG;
         pvData : PVOID;
         szFieldName : LPCOLESTR;
         pvarField : access VARIANT
      ) return HRESULT is abstract;
      function GetFieldNames(
         This : access IRecordInfo_Interface;
         pcNames : access ULONG;
         rgBstrNames : access BSTR
      ) return HRESULT is abstract;
      function IsMatchingType(
         This : access IRecordInfo_Interface;
         pRecordInfo : access Void
      ) return BOOL is abstract;
      procedure RecordCreate(This : access IRecordInfo_Interface) is abstract;
      function RecordCreateCopy(
         This : access IRecordInfo_Interface;
         pvSource : PVOID;
         ppvDest : access PVOID
      ) return HRESULT is abstract;
      function RecordDestroy(
         This : access IRecordInfo_Interface;
         pvRecord : PVOID
      ) return HRESULT is abstract;
   type IRecordInfo is access IRecordInfo_Interface'Class;
   type IRecordInfo_Ptr is access IRecordInfo;
   type LPERRORLOG is access IErrorLog; -- CXType_Pointer - CXType_Typedef
   type IErrorLog_Interface is interface and IUnknown_Interface;
      function AddError(
         This : access IErrorLog_Interface;
         pszPropName : LPCOLESTR;
         pExcepInfo : access EXCEPINFO
      ) return HRESULT is abstract;
   type IErrorLog is access IErrorLog_Interface'Class;
   type IErrorLog_Ptr is access IErrorLog;
   type LPPROPERTYBAG is access IPropertyBag; -- CXType_Pointer - CXType_Typedef
   type IPropertyBag_Interface is interface and IUnknown_Interface;
      function Read(
         This : access IPropertyBag_Interface;
         pszPropName : LPCOLESTR;
         pVar : access VARIANT;
         pErrorLog : access IErrorLog
      ) return HRESULT is abstract;
      function Write(
         This : access IPropertyBag_Interface;
         pszPropName : LPCOLESTR;
         pVar : access VARIANT
      ) return HRESULT is abstract;
   type IPropertyBag is access IPropertyBag_Interface'Class;
   type IPropertyBag_Ptr is access IPropertyBag;
   function IPropertyBag_RemoteRead_Proxy(
      This : access IPropertyBag;
      pszPropName : LPCOLESTR;
      pVar : access VARIANT;
      pErrorLog : access IErrorLog;
      varType_x : DWORD;
      pUnkObj : access IUnknown
   ) return HRESULT;
   pragma import (C,IPropertyBag_RemoteRead_Proxy,"IPropertyBag_RemoteRead_Proxy");
   procedure IPropertyBag_RemoteRead_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IPropertyBag_RemoteRead_Stub,"IPropertyBag_RemoteRead_Stub");
   type ITypeLibRegistrationReader_Interface is interface and IUnknown_Interface;
      function EnumTypeLibRegistrations(
         This : access ITypeLibRegistrationReader_Interface;
         ppEnumUnknown : access LPENUMUNKNOWN
      ) return HRESULT is abstract;
   type ITypeLibRegistrationReader is access ITypeLibRegistrationReader_Interface'Class;
   type ITypeLibRegistrationReader_Ptr is access ITypeLibRegistrationReader;
   type ITypeLibRegistration_Interface is interface and IUnknown_Interface;
      function GetGuid(
         This : access ITypeLibRegistration_Interface;
         pGuid : access GUID
      ) return HRESULT is abstract;
      function GetVersion(
         This : access ITypeLibRegistration_Interface;
         pVersion : access BSTR
      ) return HRESULT is abstract;
      function GetLcid(
         This : access ITypeLibRegistration_Interface;
         pLcid_x : access LCID
      ) return HRESULT is abstract;
      function GetWin32Path(
         This : access ITypeLibRegistration_Interface;
         pWin32Path : access BSTR
      ) return HRESULT is abstract;
      function GetWin64Path(
         This : access ITypeLibRegistration_Interface;
         pWin64Path : access BSTR
      ) return HRESULT is abstract;
      function GetDisplayName(
         This : access ITypeLibRegistration_Interface;
         pDisplayName : access BSTR
      ) return HRESULT is abstract;
      function GetFlags(
         This : access ITypeLibRegistration_Interface;
         pFlags : access DWORD
      ) return HRESULT is abstract;
      function GetHelpDir(
         This : access ITypeLibRegistration_Interface;
         pHelpDir : access BSTR
      ) return HRESULT is abstract;
   type ITypeLibRegistration is access ITypeLibRegistration_Interface'Class;
   type ITypeLibRegistration_Ptr is access ITypeLibRegistration;
   function BSTR_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access BSTR
   ) return Interfaces.C.unsigned_long;
   pragma import (C,BSTR_UserSize,"BSTR_UserSize");
   procedure BSTR_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access BSTR
   );
   pragma import (C,BSTR_UserFree,"BSTR_UserFree");
   function CLEANLOCALSTORAGE_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access CLEANLOCALSTORAGE
   ) return Interfaces.C.unsigned_long;
   pragma import (C,CLEANLOCALSTORAGE_UserSize,"CLEANLOCALSTORAGE_UserSize");
   procedure CLEANLOCALSTORAGE_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access CLEANLOCALSTORAGE
   );
   pragma import (C,CLEANLOCALSTORAGE_UserFree,"CLEANLOCALSTORAGE_UserFree");
   function VARIANT_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access VARIANT
   ) return Interfaces.C.unsigned_long;
   pragma import (C,VARIANT_UserSize,"VARIANT_UserSize");
   procedure VARIANT_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access VARIANT
   );
   pragma import (C,VARIANT_UserFree,"VARIANT_UserFree");
   function BSTR_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access BSTR
   ) return Interfaces.C.unsigned_long;
   pragma import (C,BSTR_UserSize64,"BSTR_UserSize64");
   procedure BSTR_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access BSTR
   );
   pragma import (C,BSTR_UserFree64,"BSTR_UserFree64");
   function CLEANLOCALSTORAGE_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access CLEANLOCALSTORAGE
   ) return Interfaces.C.unsigned_long;
   pragma import (C,CLEANLOCALSTORAGE_UserSize64,"CLEANLOCALSTORAGE_UserSize64");
   procedure CLEANLOCALSTORAGE_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access CLEANLOCALSTORAGE
   );
   pragma import (C,CLEANLOCALSTORAGE_UserFree64,"CLEANLOCALSTORAGE_UserFree64");
   function VARIANT_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access VARIANT
   ) return Interfaces.C.unsigned_long;
   pragma import (C,VARIANT_UserSize64,"VARIANT_UserSize64");
   procedure VARIANT_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access VARIANT
   );
   pragma import (C,VARIANT_UserFree64,"VARIANT_UserFree64");
   function IDispatch_Invoke_Proxy(
      This : access IDispatch;
      dispIdMember : DISPID;
      riid : access constant IID;
      lcid_x : LCID;
      wFlags : WORD;
      pDispParams : access DISPPARAMS;
      pVarResult : access VARIANT;
      pExcepInfo : access EXCEPINFO;
      puArgErr : access UINT
   ) return HRESULT;
   pragma import (C,IDispatch_Invoke_Proxy,"IDispatch_Invoke_Proxy");
   function IDispatch_Invoke_Stub(
      This : access IDispatch;
      dispIdMember : DISPID;
      riid : access constant IID;
      lcid_x : LCID;
      dwFlags : DWORD;
      pDispParams : access DISPPARAMS;
      pVarResult : access VARIANT;
      pExcepInfo : access EXCEPINFO;
      pArgErr : access UINT;
      cVarRef : UINT;
      rgVarRefIdx : access UINT;
      rgVarRef : access VARIANTARG
   ) return HRESULT;
   pragma import (C,IDispatch_Invoke_Stub,"IDispatch_Invoke_Stub");
   function IEnumVARIANT_Next_Proxy(
      This : access IEnumVARIANT;
      celt : ULONG;
      rgVar : access VARIANT;
      pCeltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumVARIANT_Next_Proxy,"IEnumVARIANT_Next_Proxy");
   function IEnumVARIANT_Next_Stub(
      This : access IEnumVARIANT;
      celt : ULONG;
      rgVar : access VARIANT;
      pCeltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumVARIANT_Next_Stub,"IEnumVARIANT_Next_Stub");
   function ITypeComp_Bind_Proxy(
      This : access ITypeComp;
      szName : LPOLESTR;
      lHashVal : ULONG;
      wFlags : WORD;
      ppTInfo : access LPTYPEINFO;
      pDescKind : access DESCKIND;
      pBindPtr : access BINDPTR
   ) return HRESULT;
   pragma import (C,ITypeComp_Bind_Proxy,"ITypeComp_Bind_Proxy");
   function ITypeComp_Bind_Stub(
      This : access ITypeComp;
      szName : LPOLESTR;
      lHashVal : ULONG;
      wFlags : WORD;
      ppTInfo : access LPTYPEINFO;
      pDescKind : access DESCKIND;
      ppFuncDesc : access LPFUNCDESC;
      ppVarDesc : access LPVARDESC;
      ppTypeComp : access LPTYPECOMP;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeComp_Bind_Stub,"ITypeComp_Bind_Stub");
   function ITypeComp_BindType_Proxy(
      This : access ITypeComp;
      szName : LPOLESTR;
      lHashVal : ULONG;
      ppTInfo : access LPTYPEINFO;
      ppTComp : access LPTYPECOMP
   ) return HRESULT;
   pragma import (C,ITypeComp_BindType_Proxy,"ITypeComp_BindType_Proxy");
   function ITypeComp_BindType_Stub(
      This : access ITypeComp;
      szName : LPOLESTR;
      lHashVal : ULONG;
      ppTInfo : access LPTYPEINFO
   ) return HRESULT;
   pragma import (C,ITypeComp_BindType_Stub,"ITypeComp_BindType_Stub");
   function ITypeInfo_GetTypeAttr_Proxy(
      This : access ITypeInfo;
      ppTypeAttr : access TYPEATTR_Ptr
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetTypeAttr_Proxy,"ITypeInfo_GetTypeAttr_Proxy");
   function ITypeInfo_GetTypeAttr_Stub(
      This : access ITypeInfo;
      ppTypeAttr : access LPTYPEATTR;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetTypeAttr_Stub,"ITypeInfo_GetTypeAttr_Stub");
   function ITypeInfo_GetFuncDesc_Proxy(
      This : access ITypeInfo;
      index : UINT;
      ppFuncDesc : access FUNCDESC_Ptr
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetFuncDesc_Proxy,"ITypeInfo_GetFuncDesc_Proxy");
   function ITypeInfo_GetFuncDesc_Stub(
      This : access ITypeInfo;
      index : UINT;
      ppFuncDesc : access LPFUNCDESC;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetFuncDesc_Stub,"ITypeInfo_GetFuncDesc_Stub");
   function ITypeInfo_GetVarDesc_Proxy(
      This : access ITypeInfo;
      index : UINT;
      ppVarDesc : access VARDESC_Ptr
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetVarDesc_Proxy,"ITypeInfo_GetVarDesc_Proxy");
   function ITypeInfo_GetVarDesc_Stub(
      This : access ITypeInfo;
      index : UINT;
      ppVarDesc : access LPVARDESC;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetVarDesc_Stub,"ITypeInfo_GetVarDesc_Stub");
   function ITypeInfo_GetNames_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      rgBstrNames : access BSTR;
      cMaxNames : UINT;
      pcNames : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetNames_Proxy,"ITypeInfo_GetNames_Proxy");
   function ITypeInfo_GetNames_Stub(
      This : access ITypeInfo;
      memid : MEMBERID;
      rgBstrNames : access BSTR;
      cMaxNames : UINT;
      pcNames : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetNames_Stub,"ITypeInfo_GetNames_Stub");
   function ITypeInfo_GetIDsOfNames_Proxy(
      This : access ITypeInfo;
      rgszNames : access LPOLESTR;
      cNames : UINT;
      pMemId : access MEMBERID
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetIDsOfNames_Proxy,"ITypeInfo_GetIDsOfNames_Proxy");
   function ITypeInfo_GetIDsOfNames_Stub(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetIDsOfNames_Stub,"ITypeInfo_GetIDsOfNames_Stub");
   function ITypeInfo_Invoke_Proxy(
      This : access ITypeInfo;
      pvInstance : PVOID;
      memid : MEMBERID;
      wFlags : WORD;
      pDispParams : access DISPPARAMS;
      pVarResult : access VARIANT;
      pExcepInfo : access EXCEPINFO;
      puArgErr : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_Invoke_Proxy,"ITypeInfo_Invoke_Proxy");
   function ITypeInfo_Invoke_Stub(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_Invoke_Stub,"ITypeInfo_Invoke_Stub");
   function ITypeInfo_GetDocumentation_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      pBstrName : access BSTR;
      pBstrDocString : access BSTR;
      pdwHelpContext : access DWORD;
      pBstrHelpFile : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetDocumentation_Proxy,"ITypeInfo_GetDocumentation_Proxy");
   function ITypeInfo_GetDocumentation_Stub(
      This : access ITypeInfo;
      memid : MEMBERID;
      refPtrFlags : DWORD;
      pBstrName : access BSTR;
      pBstrDocString : access BSTR;
      pdwHelpContext : access DWORD;
      pBstrHelpFile : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetDocumentation_Stub,"ITypeInfo_GetDocumentation_Stub");
   function ITypeInfo_GetDllEntry_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      invKind : INVOKEKIND;
      pBstrDllName : access BSTR;
      pBstrName : access BSTR;
      pwOrdinal : access WORD
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetDllEntry_Proxy,"ITypeInfo_GetDllEntry_Proxy");
   function ITypeInfo_GetDllEntry_Stub(
      This : access ITypeInfo;
      memid : MEMBERID;
      invKind : INVOKEKIND;
      refPtrFlags : DWORD;
      pBstrDllName : access BSTR;
      pBstrName : access BSTR;
      pwOrdinal : access WORD
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetDllEntry_Stub,"ITypeInfo_GetDllEntry_Stub");
   function ITypeInfo_AddressOfMember_Proxy(
      This : access ITypeInfo;
      memid : MEMBERID;
      invKind : INVOKEKIND;
      ppv : access PVOID
   ) return HRESULT;
   pragma import (C,ITypeInfo_AddressOfMember_Proxy,"ITypeInfo_AddressOfMember_Proxy");
   function ITypeInfo_AddressOfMember_Stub(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_AddressOfMember_Stub,"ITypeInfo_AddressOfMember_Stub");
   function ITypeInfo_CreateInstance_Proxy(
      This : access ITypeInfo;
      pUnkOuter : access IUnknown;
      riid : access constant IID;
      ppvObj : access PVOID
   ) return HRESULT;
   pragma import (C,ITypeInfo_CreateInstance_Proxy,"ITypeInfo_CreateInstance_Proxy");
   function ITypeInfo_CreateInstance_Stub(
      This : access ITypeInfo;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,ITypeInfo_CreateInstance_Stub,"ITypeInfo_CreateInstance_Stub");
   function ITypeInfo_GetContainingTypeLib_Proxy(
      This : access ITypeInfo;
      ppTLib : access LPTYPELIB;
      pIndex : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetContainingTypeLib_Proxy,"ITypeInfo_GetContainingTypeLib_Proxy");
   function ITypeInfo_GetContainingTypeLib_Stub(
      This : access ITypeInfo;
      ppTLib : access LPTYPELIB;
      pIndex : access UINT
   ) return HRESULT;
   pragma import (C,ITypeInfo_GetContainingTypeLib_Stub,"ITypeInfo_GetContainingTypeLib_Stub");
   procedure ITypeInfo_ReleaseTypeAttr_Proxy(
      This : access ITypeInfo;
      pTypeAttr : access TYPEATTR
   );
   pragma import (C,ITypeInfo_ReleaseTypeAttr_Proxy,"ITypeInfo_ReleaseTypeAttr_Proxy");
   function ITypeInfo_ReleaseTypeAttr_Stub(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_ReleaseTypeAttr_Stub,"ITypeInfo_ReleaseTypeAttr_Stub");
   procedure ITypeInfo_ReleaseFuncDesc_Proxy(
      This : access ITypeInfo;
      pFuncDesc : access FUNCDESC
   );
   pragma import (C,ITypeInfo_ReleaseFuncDesc_Proxy,"ITypeInfo_ReleaseFuncDesc_Proxy");
   function ITypeInfo_ReleaseFuncDesc_Stub(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_ReleaseFuncDesc_Stub,"ITypeInfo_ReleaseFuncDesc_Stub");
   procedure ITypeInfo_ReleaseVarDesc_Proxy(
      This : access ITypeInfo;
      pVarDesc : access VARDESC
   );
   pragma import (C,ITypeInfo_ReleaseVarDesc_Proxy,"ITypeInfo_ReleaseVarDesc_Proxy");
   function ITypeInfo_ReleaseVarDesc_Stub(
      This : access ITypeInfo
   ) return HRESULT;
   pragma import (C,ITypeInfo_ReleaseVarDesc_Stub,"ITypeInfo_ReleaseVarDesc_Stub");
   function ITypeInfo2_GetDocumentation2_Proxy(
      This : access ITypeInfo2;
      memid : MEMBERID;
      lcid_x : LCID;
      pbstrHelpString : access BSTR;
      pdwHelpStringContext : access DWORD;
      pbstrHelpStringDll : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeInfo2_GetDocumentation2_Proxy,"ITypeInfo2_GetDocumentation2_Proxy");
   function ITypeInfo2_GetDocumentation2_Stub(
      This : access ITypeInfo2;
      memid : MEMBERID;
      lcid_x : LCID;
      refPtrFlags : DWORD;
      pbstrHelpString : access BSTR;
      pdwHelpStringContext : access DWORD;
      pbstrHelpStringDll : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeInfo2_GetDocumentation2_Stub,"ITypeInfo2_GetDocumentation2_Stub");
   function ITypeLib_GetTypeInfoCount_Proxy(
      This : access ITypeLib
   ) return UINT;
   pragma import (C,ITypeLib_GetTypeInfoCount_Proxy,"ITypeLib_GetTypeInfoCount_Proxy");
   function ITypeLib_GetTypeInfoCount_Stub(
      This : access ITypeLib;
      pcTInfo : access UINT
   ) return HRESULT;
   pragma import (C,ITypeLib_GetTypeInfoCount_Stub,"ITypeLib_GetTypeInfoCount_Stub");
   function ITypeLib_GetLibAttr_Proxy(
      This : access ITypeLib;
      ppTLibAttr : access TLIBATTR_Ptr
   ) return HRESULT;
   pragma import (C,ITypeLib_GetLibAttr_Proxy,"ITypeLib_GetLibAttr_Proxy");
   function ITypeLib_GetLibAttr_Stub(
      This : access ITypeLib;
      ppTLibAttr : access LPTLIBATTR;
      pDummy : access CLEANLOCALSTORAGE
   ) return HRESULT;
   pragma import (C,ITypeLib_GetLibAttr_Stub,"ITypeLib_GetLibAttr_Stub");
   function ITypeLib_GetDocumentation_Proxy(
      This : access ITypeLib;
      index : INT;
      pBstrName : access BSTR;
      pBstrDocString : access BSTR;
      pdwHelpContext : access DWORD;
      pBstrHelpFile : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_GetDocumentation_Proxy,"ITypeLib_GetDocumentation_Proxy");
   function ITypeLib_GetDocumentation_Stub(
      This : access ITypeLib;
      index : INT;
      refPtrFlags : DWORD;
      pBstrName : access BSTR;
      pBstrDocString : access BSTR;
      pdwHelpContext : access DWORD;
      pBstrHelpFile : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_GetDocumentation_Stub,"ITypeLib_GetDocumentation_Stub");
   function ITypeLib_IsName_Proxy(
      This : access ITypeLib;
      szNameBuf : LPOLESTR;
      lHashVal : ULONG;
      pfName : access BOOL
   ) return HRESULT;
   pragma import (C,ITypeLib_IsName_Proxy,"ITypeLib_IsName_Proxy");
   function ITypeLib_IsName_Stub(
      This : access ITypeLib;
      szNameBuf : LPOLESTR;
      lHashVal : ULONG;
      pfName : access BOOL;
      pBstrLibName : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_IsName_Stub,"ITypeLib_IsName_Stub");
   function ITypeLib_FindName_Proxy(
      This : access ITypeLib;
      szNameBuf : LPOLESTR;
      lHashVal : ULONG;
      ppTInfo : access LPTYPEINFO;
      rgMemId : access MEMBERID;
      pcFound : access USHORT
   ) return HRESULT;
   pragma import (C,ITypeLib_FindName_Proxy,"ITypeLib_FindName_Proxy");
   function ITypeLib_FindName_Stub(
      This : access ITypeLib;
      szNameBuf : LPOLESTR;
      lHashVal : ULONG;
      ppTInfo : access LPTYPEINFO;
      rgMemId : access MEMBERID;
      pcFound : access USHORT;
      pBstrLibName : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib_FindName_Stub,"ITypeLib_FindName_Stub");
   procedure ITypeLib_ReleaseTLibAttr_Proxy(
      This : access ITypeLib;
      pTLibAttr : access TLIBATTR
   );
   pragma import (C,ITypeLib_ReleaseTLibAttr_Proxy,"ITypeLib_ReleaseTLibAttr_Proxy");
   function ITypeLib_ReleaseTLibAttr_Stub(
      This : access ITypeLib
   ) return HRESULT;
   pragma import (C,ITypeLib_ReleaseTLibAttr_Stub,"ITypeLib_ReleaseTLibAttr_Stub");
   function ITypeLib2_GetLibStatistics_Proxy(
      This : access ITypeLib2;
      pcUniqueNames : access ULONG;
      pcchUniqueNames : access ULONG
   ) return HRESULT;
   pragma import (C,ITypeLib2_GetLibStatistics_Proxy,"ITypeLib2_GetLibStatistics_Proxy");
   function ITypeLib2_GetLibStatistics_Stub(
      This : access ITypeLib2;
      pcUniqueNames : access ULONG;
      pcchUniqueNames : access ULONG
   ) return HRESULT;
   pragma import (C,ITypeLib2_GetLibStatistics_Stub,"ITypeLib2_GetLibStatistics_Stub");
   function ITypeLib2_GetDocumentation2_Proxy(
      This : access ITypeLib2;
      index : INT;
      lcid_x : LCID;
      pbstrHelpString : access BSTR;
      pdwHelpStringContext : access DWORD;
      pbstrHelpStringDll : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib2_GetDocumentation2_Proxy,"ITypeLib2_GetDocumentation2_Proxy");
   function ITypeLib2_GetDocumentation2_Stub(
      This : access ITypeLib2;
      index : INT;
      lcid_x : LCID;
      refPtrFlags : DWORD;
      pbstrHelpString : access BSTR;
      pdwHelpStringContext : access DWORD;
      pbstrHelpStringDll : access BSTR
   ) return HRESULT;
   pragma import (C,ITypeLib2_GetDocumentation2_Stub,"ITypeLib2_GetDocumentation2_Stub");
   function IPropertyBag_Read_Proxy(
      This : access IPropertyBag;
      pszPropName : LPCOLESTR;
      pVar : access VARIANT;
      pErrorLog : access IErrorLog
   ) return HRESULT;
   pragma import (C,IPropertyBag_Read_Proxy,"IPropertyBag_Read_Proxy");
   function IPropertyBag_Read_Stub(
      This : access IPropertyBag;
      pszPropName : LPCOLESTR;
      pVar : access VARIANT;
      pErrorLog : access IErrorLog;
      varType_x : DWORD;
      pUnkObj : access IUnknown
   ) return HRESULT;
   pragma import (C,IPropertyBag_Read_Stub,"IPropertyBag_Read_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\propidlbase.h>
   type tagVersionedStream is record
      guidVersion : GUID;
      pStream : access IStream;
   end record;
   subtype VERSIONEDSTREAM is tagVersionedStream; -- CXType_Elaborated
   type LPVERSIONEDSTREAM is access tagVersionedStream; -- CXType_Pointer - CXType_Elaborated
   type tagCAC is record
      cElems : ULONG;
      pElems : access CHAR;
   end record;
   subtype CAC is tagCAC; -- CXType_Elaborated
   type tagCAUB is record
      cElems : ULONG;
      pElems : access UCHAR;
   end record;
   subtype CAUB is tagCAUB; -- CXType_Elaborated
   type tagCAI is record
      cElems : ULONG;
      pElems : access SHORT;
   end record;
   subtype CAI is tagCAI; -- CXType_Elaborated
   type tagCAUI is record
      cElems : ULONG;
      pElems : access USHORT;
   end record;
   subtype CAUI is tagCAUI; -- CXType_Elaborated
   type tagCAL is record
      cElems : ULONG;
      pElems : access LONG;
   end record;
   subtype CAL is tagCAL; -- CXType_Elaborated
   type tagCAUL is record
      cElems : ULONG;
      pElems : access ULONG;
   end record;
   subtype CAUL is tagCAUL; -- CXType_Elaborated
   type tagCAFLT is record
      cElems : ULONG;
      pElems : access FLOAT;
   end record;
   subtype CAFLT is tagCAFLT; -- CXType_Elaborated
   type tagCADBL is record
      cElems : ULONG;
      pElems : access DOUBLE;
   end record;
   subtype CADBL is tagCADBL; -- CXType_Elaborated
   type tagCACY is record
      cElems : ULONG;
      pElems : access CY;
   end record;
   subtype CACY is tagCACY; -- CXType_Elaborated
   type tagCADATE is record
      cElems : ULONG;
      pElems : access DATE;
   end record;
   subtype CADATE is tagCADATE; -- CXType_Elaborated
   type tagCABSTR is record
      cElems : ULONG;
      pElems : access BSTR;
   end record;
   subtype CABSTR is tagCABSTR; -- CXType_Elaborated
   type tagCABSTRBLOB is record
      cElems : ULONG;
      pElems : access BSTRBLOB;
   end record;
   subtype CABSTRBLOB is tagCABSTRBLOB; -- CXType_Elaborated
   type tagCABOOL is record
      cElems : ULONG;
      pElems : access VARIANT_BOOL;
   end record;
   subtype CABOOL is tagCABOOL; -- CXType_Elaborated
   type tagCASCODE is record
      cElems : ULONG;
      pElems : access SCODE;
   end record;
   subtype CASCODE is tagCASCODE; -- CXType_Elaborated
   type tagCAPROPVARIANT is record
      cElems : ULONG;
      pElems : access PROPVARIANT;
   end record;
   subtype CAPROPVARIANT is tagCAPROPVARIANT; -- CXType_Elaborated
   type tagCAH is record
      cElems : ULONG;
      pElems : access LARGE_INTEGER;
   end record;
   subtype CAH is tagCAH; -- CXType_Elaborated
   type tagCAUH is record
      cElems : ULONG;
      pElems : access ULARGE_INTEGER;
   end record;
   subtype CAUH is tagCAUH; -- CXType_Elaborated
   type tagCALPSTR is record
      cElems : ULONG;
      pElems : access LPSTR;
   end record;
   subtype CALPSTR is tagCALPSTR; -- CXType_Elaborated
   type tagCALPWSTR is record
      cElems : ULONG;
      pElems : access LPWSTR;
   end record;
   subtype CALPWSTR is tagCALPWSTR; -- CXType_Elaborated
   type tagCAFILETIME is record
      cElems : ULONG;
      pElems : access FILETIME;
   end record;
   subtype CAFILETIME is tagCAFILETIME; -- CXType_Elaborated
   type tagCACLIPDATA is record
      cElems : ULONG;
      pElems : access CLIPDATA;
   end record;
   subtype CACLIPDATA is tagCACLIPDATA; -- CXType_Elaborated
   type tagCACLSID is record
      cElems : ULONG;
      pElems : access CLSID;
   end record;
   subtype CACLSID is tagCACLSID; -- CXType_Elaborated
   subtype PROPVAR_PAD1 is WORD; -- CXType_Typedef
   subtype PROPVAR_PAD2 is WORD; -- CXType_Typedef
   subtype PROPVAR_PAD3 is WORD; -- CXType_Typedef
   type tagPROPVARIANT is null record;
   type LPPROPVARIANT is access tagPROPVARIANT; -- CXType_Pointer - CXType_Elaborated
   type tagPROPSPEC is record
      ulKind : ULONG;
   end record;
   subtype PROPSPEC is tagPROPSPEC; -- CXType_Elaborated
   type tagSTATPROPSTG is record
      lpwstrName : LPOLESTR;
      propid_x : PROPID;
      vt : VARTYPE;
   end record;
   subtype STATPROPSTG is tagSTATPROPSTG; -- CXType_Elaborated
   type tagSTATPROPSETSTG is record
      fmtid_x : FMTID;
      clsid_x : CLSID;
      grfFlags : DWORD;
      mtime : FILETIME;
      ctime : FILETIME;
      atime : FILETIME;
      dwOSVersion : DWORD;
   end record;
   subtype STATPROPSETSTG is tagSTATPROPSETSTG; -- CXType_Elaborated
   type IEnumSTATPROPSTG_Ptr is access all IEnumSTATPROPSTG; -- Auto Generated Dependancy
   type IPropertyStorage_Interface is interface and IUnknown_Interface;
      function ReadMultiple(
         This : access IPropertyStorage_Interface;
         cpspec : ULONG;
         rgpspec : Void;
         rgpropvar : Void
      ) return HRESULT is abstract;
      function WriteMultiple(
         This : access IPropertyStorage_Interface;
         cpspec : ULONG;
         rgpspec : Void;
         rgpropvar : Void;
         propidNameFirst : PROPID
      ) return HRESULT is abstract;
      function DeleteMultiple(
         This : access IPropertyStorage_Interface;
         cpspec : ULONG;
         rgpspec : Void
      ) return HRESULT is abstract;
      function ReadPropertyNames(
         This : access IPropertyStorage_Interface;
         cpropid : ULONG;
         rgpropid : Void;
         rglpwstrName : Void
      ) return HRESULT is abstract;
      function WritePropertyNames(
         This : access IPropertyStorage_Interface;
         cpropid : ULONG;
         rgpropid : Void;
         rglpwstrName : Void
      ) return HRESULT is abstract;
      function DeletePropertyNames(
         This : access IPropertyStorage_Interface;
         cpropid : ULONG;
         rgpropid : Void
      ) return HRESULT is abstract;
      function Commit(
         This : access IPropertyStorage_Interface;
         grfCommitFlags : DWORD
      ) return HRESULT is abstract;
      function Revert(This : access IPropertyStorage_Interface) return HRESULT is abstract;
      function Enum(
         This : access IPropertyStorage_Interface;
         ppenum : access IEnumSTATPROPSTG_Ptr
      ) return HRESULT is abstract;
      function SetTimes(
         This : access IPropertyStorage_Interface;
         pctime : access constant FILETIME;
         patime : access constant FILETIME;
         pmtime : access constant FILETIME
      ) return HRESULT is abstract;
      function SetClass(
         This : access IPropertyStorage_Interface;
         clsid_x : access constant IID
      ) return HRESULT is abstract;
      function Stat(
         This : access IPropertyStorage_Interface;
         pstatpsstg : access STATPROPSETSTG
      ) return HRESULT is abstract;
   type IPropertyStorage is access IPropertyStorage_Interface'Class;
   type IPropertyStorage_Ptr is access IPropertyStorage;
   type LPPROPERTYSETSTORAGE is access IPropertySetStorage; -- CXType_Pointer - CXType_Typedef
   type IEnumSTATPROPSETSTG_Ptr is access all IEnumSTATPROPSETSTG; -- Auto Generated Dependancy
   type IPropertySetStorage_Interface is interface and IUnknown_Interface;
      function Create(
         This : access IPropertySetStorage_Interface;
         rfmtid : access constant IID;
         pclsid : access constant CLSID;
         grfFlags : DWORD;
         grfMode : DWORD;
         ppprstg : access IPropertyStorage_Ptr
      ) return HRESULT is abstract;
      function Open(
         This : access IPropertySetStorage_Interface;
         rfmtid : access constant IID;
         grfMode : DWORD;
         ppprstg : access IPropertyStorage_Ptr
      ) return HRESULT is abstract;
      function Delete(
         This : access IPropertySetStorage_Interface;
         rfmtid : access constant IID
      ) return HRESULT is abstract;
      function Enum(
         This : access IPropertySetStorage_Interface;
         ppenum : access IEnumSTATPROPSETSTG_Ptr
      ) return HRESULT is abstract;
   type IPropertySetStorage is access IPropertySetStorage_Interface'Class;
   type IPropertySetStorage_Ptr is access IPropertySetStorage;
   type LPENUMSTATPROPSTG is access IEnumSTATPROPSTG; -- CXType_Pointer - CXType_Typedef
   type IEnumSTATPROPSTG_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumSTATPROPSTG_Interface;
         celt : ULONG;
         rgelt : access STATPROPSTG;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumSTATPROPSTG_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumSTATPROPSTG_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumSTATPROPSTG_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumSTATPROPSTG is access IEnumSTATPROPSTG_Interface'Class;
   function IEnumSTATPROPSTG_RemoteNext_Proxy(
      This : access IEnumSTATPROPSTG;
      celt : ULONG;
      rgelt : access STATPROPSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATPROPSTG_RemoteNext_Proxy,"IEnumSTATPROPSTG_RemoteNext_Proxy");
   procedure IEnumSTATPROPSTG_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumSTATPROPSTG_RemoteNext_Stub,"IEnumSTATPROPSTG_RemoteNext_Stub");
   type LPENUMSTATPROPSETSTG is access IEnumSTATPROPSETSTG; -- CXType_Pointer - CXType_Typedef
   type IEnumSTATPROPSETSTG_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumSTATPROPSETSTG_Interface;
         celt : ULONG;
         rgelt : access STATPROPSETSTG;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumSTATPROPSETSTG_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumSTATPROPSETSTG_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumSTATPROPSETSTG_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumSTATPROPSETSTG is access IEnumSTATPROPSETSTG_Interface'Class;
   function IEnumSTATPROPSETSTG_RemoteNext_Proxy(
      This : access IEnumSTATPROPSETSTG;
      celt : ULONG;
      rgelt : access STATPROPSETSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATPROPSETSTG_RemoteNext_Proxy,"IEnumSTATPROPSETSTG_RemoteNext_Proxy");
   procedure IEnumSTATPROPSETSTG_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumSTATPROPSETSTG_RemoteNext_Stub,"IEnumSTATPROPSETSTG_RemoteNext_Stub");
   type LPPROPERTYSTORAGE is access IPropertyStorage; -- CXType_Pointer - CXType_Typedef
   function LPSAFEARRAY_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access LPSAFEARRAY
   ) return Interfaces.C.unsigned_long;
   pragma import (C,LPSAFEARRAY_UserSize,"LPSAFEARRAY_UserSize");
   procedure LPSAFEARRAY_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access LPSAFEARRAY
   );
   pragma import (C,LPSAFEARRAY_UserFree,"LPSAFEARRAY_UserFree");
   function LPSAFEARRAY_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access LPSAFEARRAY
   ) return Interfaces.C.unsigned_long;
   pragma import (C,LPSAFEARRAY_UserSize64,"LPSAFEARRAY_UserSize64");
   procedure LPSAFEARRAY_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access LPSAFEARRAY
   );
   pragma import (C,LPSAFEARRAY_UserFree64,"LPSAFEARRAY_UserFree64");
   function IEnumSTATPROPSTG_Next_Proxy(
      This : access IEnumSTATPROPSTG;
      celt : ULONG;
      rgelt : access STATPROPSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATPROPSTG_Next_Proxy,"IEnumSTATPROPSTG_Next_Proxy");
   function IEnumSTATPROPSTG_Next_Stub(
      This : access IEnumSTATPROPSTG;
      celt : ULONG;
      rgelt : access STATPROPSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATPROPSTG_Next_Stub,"IEnumSTATPROPSTG_Next_Stub");
   function IEnumSTATPROPSETSTG_Next_Proxy(
      This : access IEnumSTATPROPSETSTG;
      celt : ULONG;
      rgelt : access STATPROPSETSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATPROPSETSTG_Next_Proxy,"IEnumSTATPROPSETSTG_Next_Proxy");
   function IEnumSTATPROPSETSTG_Next_Stub(
      This : access IEnumSTATPROPSETSTG;
      celt : ULONG;
      rgelt : access STATPROPSETSTG;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumSTATPROPSETSTG_Next_Stub,"IEnumSTATPROPSETSTG_Next_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\coml2api.h>
   subtype STGFMT is DWORD; -- CXType_Typedef
   function StgCreateDocfile(
      pwcsName : access constant WCHAR;
      grfMode : DWORD;
      reserved : DWORD;
      ppstgOpen : access LPSTORAGE
   ) return HRESULT;
   pragma import (C,StgCreateDocfile,"StgCreateDocfile");
   function StgCreateDocfileOnILockBytes(
      plkbyt : access ILockBytes;
      grfMode : DWORD;
      reserved : DWORD;
      ppstgOpen : access LPSTORAGE
   ) return HRESULT;
   pragma import (C,StgCreateDocfileOnILockBytes,"StgCreateDocfileOnILockBytes");
   function StgOpenStorage(
      pwcsName : access constant WCHAR;
      pstgPriority : access IStorage;
      grfMode : DWORD;
      snbExclude : SNB;
      reserved : DWORD;
      ppstgOpen : access LPSTORAGE
   ) return HRESULT;
   pragma import (C,StgOpenStorage,"StgOpenStorage");
   function StgOpenStorageOnILockBytes(
      plkbyt : access ILockBytes;
      pstgPriority : access IStorage;
      grfMode : DWORD;
      snbExclude : SNB;
      reserved : DWORD;
      ppstgOpen : access LPSTORAGE
   ) return HRESULT;
   pragma import (C,StgOpenStorageOnILockBytes,"StgOpenStorageOnILockBytes");
   function StgIsStorageFile(
      pwcsName : access constant WCHAR
   ) return HRESULT;
   pragma import (C,StgIsStorageFile,"StgIsStorageFile");
   function StgIsStorageILockBytes(
      plkbyt : access ILockBytes
   ) return HRESULT;
   pragma import (C,StgIsStorageILockBytes,"StgIsStorageILockBytes");
   function StgSetTimes(
      lpszName : access constant WCHAR;
      pctime : access constant FILETIME;
      patime : access constant FILETIME;
      pmtime : access constant FILETIME
   ) return HRESULT;
   pragma import (C,StgSetTimes,"StgSetTimes");
   type tagSTGOPTIONS is record
      usVersion : USHORT;
      reserved : USHORT;
      ulSectorSize : ULONG;
      pwcsTemplateFile : access constant WCHAR;
   end record;
   subtype STGOPTIONS is tagSTGOPTIONS; -- CXType_Elaborated
   function StgCreateStorageEx(
      pwcsName : access constant WCHAR;
      grfMode : DWORD;
      stgfmt_x : DWORD;
      grfAttrs : DWORD;
      pStgOptions : access STGOPTIONS;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      riid : access constant IID;
      ppObjectOpen : access LPVOID
   ) return HRESULT;
   pragma import (C,StgCreateStorageEx,"StgCreateStorageEx");
   function StgOpenStorageEx(
      pwcsName : access constant WCHAR;
      grfMode : DWORD;
      stgfmt_x : DWORD;
      grfAttrs : DWORD;
      pStgOptions : access STGOPTIONS;
      pSecurityDescriptor : PSECURITY_DESCRIPTOR;
      riid : access constant IID;
      ppObjectOpen : access LPVOID
   ) return HRESULT;
   pragma import (C,StgOpenStorageEx,"StgOpenStorageEx");
   function StgCreatePropStg(
      pUnk : access IUnknown;
      fmtid_x : access constant IID;
      pclsid : access constant CLSID;
      grfFlags : DWORD;
      dwReserved : DWORD;
      ppPropStg : access LPPROPERTYSTORAGE
   ) return HRESULT;
   pragma import (C,StgCreatePropStg,"StgCreatePropStg");
   function StgOpenPropStg(
      pUnk : access IUnknown;
      fmtid_x : access constant IID;
      grfFlags : DWORD;
      dwReserved : DWORD;
      ppPropStg : access LPPROPERTYSTORAGE
   ) return HRESULT;
   pragma import (C,StgOpenPropStg,"StgOpenPropStg");
   function StgCreatePropSetStg(
      pStorage : access IStorage;
      dwReserved : DWORD;
      ppPropSetStg : access LPPROPERTYSETSTORAGE
   ) return HRESULT;
   pragma import (C,StgCreatePropSetStg,"StgCreatePropSetStg");
   function FmtIdToPropStgName(
      pfmtid : access constant FMTID;
      oszName : LPOLESTR
   ) return HRESULT;
   pragma import (C,FmtIdToPropStgName,"FmtIdToPropStgName");
   function PropStgNameToFmtId(
      oszName : LPOLESTR;
      pfmtid : access FMTID
   ) return HRESULT;
   pragma import (C,PropStgNameToFmtId,"PropStgNameToFmtId");
   function ReadClassStg(
      pStg : LPSTORAGE;
      pclsid : access CLSID
   ) return HRESULT;
   pragma import (C,ReadClassStg,"ReadClassStg");
   function WriteClassStg(
      pStg : LPSTORAGE;
      rclsid : access constant IID
   ) return HRESULT;
   pragma import (C,WriteClassStg,"WriteClassStg");
   function ReadClassStm(
      pStm : LPSTREAM;
      pclsid : access CLSID
   ) return HRESULT;
   pragma import (C,ReadClassStm,"ReadClassStm");
   function WriteClassStm(
      pStm : LPSTREAM;
      rclsid : access constant IID
   ) return HRESULT;
   pragma import (C,WriteClassStm,"WriteClassStm");
   function GetHGlobalFromILockBytes(
      plkbyt : LPLOCKBYTES;
      phglobal : access HGLOBAL
   ) return HRESULT;
   pragma import (C,GetHGlobalFromILockBytes,"GetHGlobalFromILockBytes");
   function CreateILockBytesOnHGlobal(
      hGlobal_x : HGLOBAL;
      fDeleteOnRelease : BOOL;
      pplkbyt : access LPLOCKBYTES
   ) return HRESULT;
   pragma import (C,CreateILockBytesOnHGlobal,"CreateILockBytesOnHGlobal");
   function GetConvertStg(
      pStg : LPSTORAGE
   ) return HRESULT;
   pragma import (C,GetConvertStg,"GetConvertStg");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\objbase.h>
   type tagCOINIT is (
      COINIT_MULTITHREADED,
      COINIT_APARTMENTTHREADED,
      COINIT_DISABLE_OLE1DDE,
      COINIT_SPEED_OVER_MEMORY
   );
   for tagCOINIT use (
      COINIT_MULTITHREADED => 0,
      COINIT_APARTMENTTHREADED => 2,
      COINIT_DISABLE_OLE1DDE => 4,
      COINIT_SPEED_OVER_MEMORY => 8
   );
   for tagCOINIT'Size use 32;
   subtype COINIT is tagCOINIT; -- CXType_Elaborated
   function CoBuildVersion return DWORD;
   pragma import (C,CoBuildVersion,"CoBuildVersion");
   function CoInitialize(
      pvReserved : LPVOID
   ) return HRESULT;
   pragma import (C,CoInitialize,"CoInitialize");
   function CoRegisterMallocSpy(
      pMallocSpy : LPMALLOCSPY
   ) return HRESULT;
   pragma import (C,CoRegisterMallocSpy,"CoRegisterMallocSpy");
   function CoRevokeMallocSpy return HRESULT;
   pragma import (C,CoRevokeMallocSpy,"CoRevokeMallocSpy");
   function CoCreateStandardMalloc(
      memctx_x : DWORD;
      ppMalloc : access LPMALLOC
   ) return HRESULT;
   pragma import (C,CoCreateStandardMalloc,"CoCreateStandardMalloc");
   function CoRegisterInitializeSpy(
      pSpy : access IInitializeSpy;
      puliCookie : access ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,CoRegisterInitializeSpy,"CoRegisterInitializeSpy");
   function CoRevokeInitializeSpy(
      uliCookie : ULARGE_INTEGER
   ) return HRESULT;
   pragma import (C,CoRevokeInitializeSpy,"CoRevokeInitializeSpy");
   type tagCOMSD is (
      SD_LAUNCHPERMISSIONS,
      SD_ACCESSPERMISSIONS,
      SD_LAUNCHRESTRICTIONS,
      SD_ACCESSRESTRICTIONS
   );
   for tagCOMSD use (
      SD_LAUNCHPERMISSIONS => 0,
      SD_ACCESSPERMISSIONS => 1,
      SD_LAUNCHRESTRICTIONS => 2,
      SD_ACCESSRESTRICTIONS => 3
   );
   for tagCOMSD'Size use 32;
   subtype COMSD is tagCOMSD; -- CXType_Elaborated
   function CoGetSystemSecurityPermissions(
      comSDType : COMSD;
      ppSD : access PSECURITY_DESCRIPTOR
   ) return HRESULT;
   pragma import (C,CoGetSystemSecurityPermissions,"CoGetSystemSecurityPermissions");
   function CoLoadLibrary(
      lpszLibName : LPOLESTR;
      bAutoFree : BOOL
   ) return HINSTANCE;
   pragma import (C,CoLoadLibrary,"CoLoadLibrary");
   procedure CoFreeLibrary(
      hInst : HINSTANCE
   );
   pragma import (C,CoFreeLibrary,"CoFreeLibrary");
   procedure CoFreeAllLibraries;
   pragma import (C,CoFreeAllLibraries,"CoFreeAllLibraries");
   function CoGetInstanceFromFile(
      pServerInfo : access COSERVERINFO;
      pClsid : access CLSID;
      punkOuter : access IUnknown;
      dwClsCtx : DWORD;
      grfMode : DWORD;
      pwszName : access OLECHAR;
      dwCount : DWORD;
      pResults : access MULTI_QI
   ) return HRESULT;
   pragma import (C,CoGetInstanceFromFile,"CoGetInstanceFromFile");
   function CoGetInstanceFromIStorage(
      pServerInfo : access COSERVERINFO;
      pClsid : access CLSID;
      punkOuter : access IUnknown;
      dwClsCtx : DWORD;
      pstg : access Void;
      dwCount : DWORD;
      pResults : access MULTI_QI
   ) return HRESULT;
   pragma import (C,CoGetInstanceFromIStorage,"CoGetInstanceFromIStorage");
   function CoAllowSetForegroundWindow(
      pUnk : access IUnknown;
      lpvReserved : LPVOID
   ) return HRESULT;
   pragma import (C,CoAllowSetForegroundWindow,"CoAllowSetForegroundWindow");
   function DcomChannelSetHResult(
      pvReserved : LPVOID;
      pulReserved : access ULONG;
      appsHR : HRESULT
   ) return HRESULT;
   pragma import (C,DcomChannelSetHResult,"DcomChannelSetHResult");
   function CoIsOle1Class(
      rclsid : access constant IID
   ) return BOOL;
   pragma import (C,CoIsOle1Class,"CoIsOle1Class");
   function CoFileTimeToDosDateTime(
      lpFileTime_x : access FILETIME;
      lpDosDate : LPWORD;
      lpDosTime : LPWORD
   ) return BOOL;
   pragma import (C,CoFileTimeToDosDateTime,"CoFileTimeToDosDateTime");
   function CoDosDateTimeToFileTime(
      nDosDate : WORD;
      nDosTime : WORD;
      lpFileTime_x : access FILETIME
   ) return BOOL;
   pragma import (C,CoDosDateTimeToFileTime,"CoDosDateTimeToFileTime");
   function CoRegisterMessageFilter(
      lpMessageFilter_x : LPMESSAGEFILTER;
      lplpMessageFilter : access LPMESSAGEFILTER
   ) return HRESULT;
   pragma import (C,CoRegisterMessageFilter,"CoRegisterMessageFilter");
   function CoRegisterChannelHook(
      ExtensionUuid : access constant GUID;
      pChannelHook : access IChannelHook
   ) return HRESULT;
   pragma import (C,CoRegisterChannelHook,"CoRegisterChannelHook");
   function CoTreatAsClass(
      clsidOld : access constant IID;
      clsidNew : access constant IID
   ) return HRESULT;
   pragma import (C,CoTreatAsClass,"CoTreatAsClass");
   function CreateDataAdviseHolder(
      ppDAHolder : access LPDATAADVISEHOLDER
   ) return HRESULT;
   pragma import (C,CreateDataAdviseHolder,"CreateDataAdviseHolder");
   function CreateDataCache(
      pUnkOuter : LPUNKNOWN;
      rclsid : access constant IID;
      iid_x : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CreateDataCache,"CreateDataCache");
   function StgOpenAsyncDocfileOnIFillLockBytes(
      pflb : access IFillLockBytes;
      grfMode : DWORD;
      asyncFlags : DWORD;
      ppstgOpen : access LPSTORAGE
   ) return HRESULT;
   pragma import (C,StgOpenAsyncDocfileOnIFillLockBytes,"StgOpenAsyncDocfileOnIFillLockBytes");
   function StgGetIFillLockBytesOnILockBytes(
      pilb : access ILockBytes;
      ppflb : access IFillLockBytes_Ptr
   ) return HRESULT;
   pragma import (C,StgGetIFillLockBytesOnILockBytes,"StgGetIFillLockBytesOnILockBytes");
   function StgGetIFillLockBytesOnFile(
      pwcsName : access constant OLECHAR;
      ppflb : access IFillLockBytes_Ptr
   ) return HRESULT;
   pragma import (C,StgGetIFillLockBytesOnFile,"StgGetIFillLockBytesOnFile");
   function StgOpenLayoutDocfile(
      pwcsDfName : access constant OLECHAR;
      grfMode : DWORD;
      reserved : DWORD;
      ppstgOpen : access LPSTORAGE
   ) return HRESULT;
   pragma import (C,StgOpenLayoutDocfile,"StgOpenLayoutDocfile");
   function CoInstall(
      pbc : access IBindCtx;
      dwFlags : DWORD;
      pClassSpec : access uCLSSPEC;
      pQuery : access QUERYCONTEXT;
      pszCodeBase : LPWSTR
   ) return HRESULT;
   pragma import (C,CoInstall,"CoInstall");
   function BindMoniker(
      pmk : LPMONIKER;
      grfOpt : DWORD;
      iidResult : access constant IID;
      ppvResult : access LPVOID
   ) return HRESULT;
   pragma import (C,BindMoniker,"BindMoniker");
   function CoGetObject(
      pszName : LPCWSTR;
      pBindOptions : access BIND_OPTS;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetObject,"CoGetObject");
   function MkParseDisplayName(
      pbc : LPBC;
      szUserName : LPCOLESTR;
      pchEaten : access ULONG;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,MkParseDisplayName,"MkParseDisplayName");
   function MonikerRelativePathTo(
      pmkSrc : LPMONIKER;
      pmkDest : LPMONIKER;
      ppmkRelPath : access LPMONIKER;
      dwReserved : BOOL
   ) return HRESULT;
   pragma import (C,MonikerRelativePathTo,"MonikerRelativePathTo");
   function MonikerCommonPrefixWith(
      pmkThis : LPMONIKER;
      pmkOther : LPMONIKER;
      ppmkCommon : access LPMONIKER
   ) return HRESULT;
   pragma import (C,MonikerCommonPrefixWith,"MonikerCommonPrefixWith");
   function CreateBindCtx(
      reserved : DWORD;
      ppbc : access LPBC
   ) return HRESULT;
   pragma import (C,CreateBindCtx,"CreateBindCtx");
   function CreateGenericComposite(
      pmkFirst : LPMONIKER;
      pmkRest : LPMONIKER;
      ppmkComposite : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateGenericComposite,"CreateGenericComposite");
   function GetClassFile(
      szFilename : LPCOLESTR;
      pclsid : access CLSID
   ) return HRESULT;
   pragma import (C,GetClassFile,"GetClassFile");
   function CreateClassMoniker(
      rclsid : access constant IID;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateClassMoniker,"CreateClassMoniker");
   function CreateFileMoniker(
      lpszPathName : LPCOLESTR;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateFileMoniker,"CreateFileMoniker");
   function CreateItemMoniker(
      lpszDelim : LPCOLESTR;
      lpszItem : LPCOLESTR;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateItemMoniker,"CreateItemMoniker");
   function CreateAntiMoniker(
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateAntiMoniker,"CreateAntiMoniker");
   function CreatePointerMoniker(
      punk : LPUNKNOWN;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreatePointerMoniker,"CreatePointerMoniker");
   function CreateObjrefMoniker(
      punk : LPUNKNOWN;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateObjrefMoniker,"CreateObjrefMoniker");
   function GetRunningObjectTable(
      reserved : DWORD;
      pprot : access LPRUNNINGOBJECTTABLE
   ) return HRESULT;
   pragma import (C,GetRunningObjectTable,"GetRunningObjectTable");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\urlmon.h>
   type IPersistMoniker; -- Forward Declaration
   type IMonikerProp; -- Forward Declaration
   type IBindProtocol; -- Forward Declaration
   type IBinding; -- Forward Declaration
   type IBindStatusCallback; -- Forward Declaration
   type IBindStatusCallbackEx; -- Forward Declaration
   type IAuthenticate; -- Forward Declaration
   type IAuthenticateEx; -- Forward Declaration
   type IHttpNegotiate; -- Forward Declaration
   type IHttpNegotiate2; -- Forward Declaration
   type IHttpNegotiate3; -- Forward Declaration
   type IWinInetFileStream; -- Forward Declaration
   type IWindowForBindingUI; -- Forward Declaration
   type ICodeInstall; -- Forward Declaration
   type IUri; -- Forward Declaration
   type IUriContainer; -- Forward Declaration
   type IUriBuilder; -- Forward Declaration
   type IUriBuilderFactory; -- Forward Declaration
   type IWinInetInfo; -- Forward Declaration
   type IHttpSecurity; -- Forward Declaration
   type IWinInetHttpInfo; -- Forward Declaration
   type IWinInetHttpTimeouts; -- Forward Declaration
   type IWinInetCacheHints; -- Forward Declaration
   type IWinInetCacheHints2; -- Forward Declaration
   type IBindHost; -- Forward Declaration
   type IInternet; -- Forward Declaration
   type IInternetBindInfo; -- Forward Declaration
   type IInternetBindInfoEx; -- Forward Declaration
   type IInternetProtocolRoot; -- Forward Declaration
   type IInternetProtocol; -- Forward Declaration
   type IInternetProtocolEx; -- Forward Declaration
   type IInternetProtocolSink; -- Forward Declaration
   type IInternetProtocolSinkStackable; -- Forward Declaration
   type IInternetSession; -- Forward Declaration
   type IInternetThreadSwitch; -- Forward Declaration
   type IInternetPriority; -- Forward Declaration
   type IInternetProtocolInfo; -- Forward Declaration
   type IInternetSecurityMgrSite; -- Forward Declaration
   type IInternetSecurityManager; -- Forward Declaration
   type IInternetSecurityManagerEx; -- Forward Declaration
   type IInternetSecurityManagerEx2; -- Forward Declaration
   type IZoneIdentifier; -- Forward Declaration
   type IZoneIdentifier2; -- Forward Declaration
   type IInternetHostSecurityManager; -- Forward Declaration
   type IInternetZoneManager; -- Forward Declaration
   type IInternetZoneManagerEx; -- Forward Declaration
   type IInternetZoneManagerEx2; -- Forward Declaration
   type ISoftDistExt; -- Forward Declaration
   type ICatalogFileInfo; -- Forward Declaration
   type IDataFilter; -- Forward Declaration
   type IEncodingFilterFactory; -- Forward Declaration
   type IWrappedProtocol; -- Forward Declaration
   type IGetBindHandle; -- Forward Declaration
   type IBindCallbackRedirect; -- Forward Declaration
   type IBindHttpSecurity; -- Forward Declaration
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\oleidl.h>
   type IOleAdviseHolder; -- Forward Declaration
   type IOleCache; -- Forward Declaration
   type IOleCache2; -- Forward Declaration
   type IOleCacheControl; -- Forward Declaration
   type IParseDisplayName; -- Forward Declaration
   type IOleContainer; -- Forward Declaration
   type IOleClientSite; -- Forward Declaration
   type IOleObject; -- Forward Declaration
   type IOleWindow; -- Forward Declaration
   type IOleLink; -- Forward Declaration
   type IOleItemContainer; -- Forward Declaration
   type IOleInPlaceUIWindow; -- Forward Declaration
   type IOleInPlaceActiveObject; -- Forward Declaration
   type IOleInPlaceFrame; -- Forward Declaration
   type IOleInPlaceObject; -- Forward Declaration
   type IOleInPlaceSite; -- Forward Declaration
   type IContinue; -- Forward Declaration
   type IViewObject; -- Forward Declaration
   type IViewObject2; -- Forward Declaration
   type IDropSource; -- Forward Declaration
   type IDropTarget; -- Forward Declaration
   type IDropSourceNotify; -- Forward Declaration
   type IEnterpriseDropTarget; -- Forward Declaration
   type IEnumOLEVERB; -- Forward Declaration
   type LPOLEADVISEHOLDER is access IOleAdviseHolder; -- CXType_Pointer - CXType_Typedef
   type IOleAdviseHolder_Interface is interface and IUnknown_Interface;
      function Advise(
         This : access IOleAdviseHolder_Interface;
         pAdvise : access IAdviseSink;
         pdwConnection : access DWORD
      ) return HRESULT is abstract;
      function Unadvise(
         This : access IOleAdviseHolder_Interface;
         dwConnection : DWORD
      ) return HRESULT is abstract;
      function EnumAdvise(
         This : access IOleAdviseHolder_Interface;
         ppenumAdvise : access LPENUMSTATDATA
      ) return HRESULT is abstract;
      function SendOnRename(
         This : access IOleAdviseHolder_Interface;
         pmk : access IMoniker
      ) return HRESULT is abstract;
      function SendOnSave(This : access IOleAdviseHolder_Interface) return HRESULT is abstract;
      function SendOnClose(This : access IOleAdviseHolder_Interface) return HRESULT is abstract;
   type IOleAdviseHolder is access IOleAdviseHolder_Interface'Class;
   type IOleAdviseHolder_Ptr is access IOleAdviseHolder;
   type LPOLECACHE is access IOleCache; -- CXType_Pointer - CXType_Typedef
   type IOleCache_Interface is interface and IUnknown_Interface;
      function Cache(
         This : access IOleCache_Interface;
         pformatetc : access FORMATETC;
         advf_x : DWORD;
         pdwConnection : access DWORD
      ) return HRESULT is abstract;
      function Uncache(
         This : access IOleCache_Interface;
         dwConnection : DWORD
      ) return HRESULT is abstract;
      function EnumCache(
         This : access IOleCache_Interface;
         ppenumSTATDATA : access LPENUMSTATDATA
      ) return HRESULT is abstract;
      function InitCache(
         This : access IOleCache_Interface;
         pDataObject : access IDataObject
      ) return HRESULT is abstract;
      function SetData(
         This : access IOleCache_Interface;
         pformatetc : access FORMATETC;
         pmedium : access STGMEDIUM;
         fRelease : BOOL
      ) return HRESULT is abstract;
   type IOleCache is access IOleCache_Interface'Class;
   type IOleCache_Ptr is access IOleCache;
   type LPOLECACHE2 is access IOleCache2; -- CXType_Pointer - CXType_Typedef
   type tagDISCARDCACHE is (
      DISCARDCACHE_SAVEIFDIRTY,
      DISCARDCACHE_NOSAVE
   );
   for tagDISCARDCACHE use (
      DISCARDCACHE_SAVEIFDIRTY => 0,
      DISCARDCACHE_NOSAVE => 1
   );
   for tagDISCARDCACHE'Size use 32;
   subtype DISCARDCACHE is tagDISCARDCACHE; -- CXType_Elaborated
   type IOleCache2_Interface is interface and IOleCache_Interface;
      function UpdateCache(
         This : access IOleCache2_Interface;
         pDataObject : LPDATAOBJECT;
         grfUpdf : DWORD;
         pReserved : LPVOID
      ) return HRESULT is abstract;
      function DiscardCache_x(
         This : access IOleCache2_Interface;
         dwDiscardOptions : DWORD
      ) return HRESULT is abstract;
   type IOleCache2 is access IOleCache2_Interface'Class;
   type IOleCache2_Ptr is access IOleCache2;
   function IOleCache2_RemoteUpdateCache_Proxy(
      This : access IOleCache2;
      pDataObject : LPDATAOBJECT;
      grfUpdf : DWORD;
      pReserved : LONG_PTR
   ) return HRESULT;
   pragma import (C,IOleCache2_RemoteUpdateCache_Proxy,"IOleCache2_RemoteUpdateCache_Proxy");
   procedure IOleCache2_RemoteUpdateCache_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IOleCache2_RemoteUpdateCache_Stub,"IOleCache2_RemoteUpdateCache_Stub");
   type LPOLECACHECONTROL is access IOleCacheControl; -- CXType_Pointer - CXType_Typedef
   type IOleCacheControl_Interface is interface and IUnknown_Interface;
      function OnRun(
         This : access IOleCacheControl_Interface;
         pDataObject : LPDATAOBJECT
      ) return HRESULT is abstract;
      function OnStop(This : access IOleCacheControl_Interface) return HRESULT is abstract;
   type IOleCacheControl is access IOleCacheControl_Interface'Class;
   type IOleCacheControl_Ptr is access IOleCacheControl;
   type LPPARSEDISPLAYNAME is access IParseDisplayName; -- CXType_Pointer - CXType_Typedef
   type IParseDisplayName_Interface is interface and IUnknown_Interface;
      function ParseDisplayName(
         This : access IParseDisplayName_Interface;
         pbc : access IBindCtx;
         pszDisplayName : LPOLESTR;
         pchEaten : access ULONG;
         ppmkOut : access LPMONIKER
      ) return HRESULT is abstract;
   type IParseDisplayName is access IParseDisplayName_Interface'Class;
   type IParseDisplayName_Ptr is access IParseDisplayName;
   type LPOLECONTAINER is access IOleContainer; -- CXType_Pointer - CXType_Typedef
   type IOleContainer_Interface is interface and IParseDisplayName_Interface;
      function EnumObjects(
         This : access IOleContainer_Interface;
         grfFlags : DWORD;
         ppenum : access LPENUMUNKNOWN
      ) return HRESULT is abstract;
      function LockContainer(
         This : access IOleContainer_Interface;
         fLock : BOOL
      ) return HRESULT is abstract;
   type IOleContainer is access IOleContainer_Interface'Class;
   type IOleContainer_Ptr is access IOleContainer;
   type LPOLECLIENTSITE is access IOleClientSite; -- CXType_Pointer - CXType_Typedef
   type IOleClientSite_Interface is interface and IUnknown_Interface;
      function SaveObject(This : access IOleClientSite_Interface) return HRESULT is abstract;
      function GetMoniker(
         This : access IOleClientSite_Interface;
         dwAssign : DWORD;
         dwWhichMoniker : DWORD;
         ppmk : access LPMONIKER
      ) return HRESULT is abstract;
      function GetContainer(
         This : access IOleClientSite_Interface;
         ppContainer : access LPOLECONTAINER
      ) return HRESULT is abstract;
      function ShowObject(This : access IOleClientSite_Interface) return HRESULT is abstract;
      function OnShowWindow(
         This : access IOleClientSite_Interface;
         fShow : BOOL
      ) return HRESULT is abstract;
      function RequestNewObjectLayout(This : access IOleClientSite_Interface) return HRESULT is abstract;
   type IOleClientSite is access IOleClientSite_Interface'Class;
   type IOleClientSite_Ptr is access IOleClientSite;
   type LPOLEOBJECT is access IOleObject; -- CXType_Pointer - CXType_Typedef
   type tagOLEGETMONIKER is (
      OLEGETMONIKER_ONLYIFTHERE,
      OLEGETMONIKER_FORCEASSIGN,
      OLEGETMONIKER_UNASSIGN,
      OLEGETMONIKER_TEMPFORUSER
   );
   for tagOLEGETMONIKER use (
      OLEGETMONIKER_ONLYIFTHERE => 1,
      OLEGETMONIKER_FORCEASSIGN => 2,
      OLEGETMONIKER_UNASSIGN => 3,
      OLEGETMONIKER_TEMPFORUSER => 4
   );
   for tagOLEGETMONIKER'Size use 32;
   subtype OLEGETMONIKER is tagOLEGETMONIKER; -- CXType_Elaborated
   type tagOLEWHICHMK is (
      OLEWHICHMK_CONTAINER,
      OLEWHICHMK_OBJREL,
      OLEWHICHMK_OBJFULL
   );
   for tagOLEWHICHMK use (
      OLEWHICHMK_CONTAINER => 1,
      OLEWHICHMK_OBJREL => 2,
      OLEWHICHMK_OBJFULL => 3
   );
   for tagOLEWHICHMK'Size use 32;
   subtype OLEWHICHMK is tagOLEWHICHMK; -- CXType_Elaborated
   type tagUSERCLASSTYPE is (
      USERCLASSTYPE_FULL,
      USERCLASSTYPE_SHORT,
      USERCLASSTYPE_APPNAME
   );
   for tagUSERCLASSTYPE use (
      USERCLASSTYPE_FULL => 1,
      USERCLASSTYPE_SHORT => 2,
      USERCLASSTYPE_APPNAME => 3
   );
   for tagUSERCLASSTYPE'Size use 32;
   subtype USERCLASSTYPE is tagUSERCLASSTYPE; -- CXType_Elaborated
   type tagOLEMISC is (
      OLEMISC_RECOMPOSEONRESIZE,
      OLEMISC_ONLYICONIC,
      OLEMISC_INSERTNOTREPLACE,
      OLEMISC_STATIC,
      OLEMISC_CANTLINKINSIDE,
      OLEMISC_CANLINKBYOLE1,
      OLEMISC_ISLINKOBJECT,
      OLEMISC_INSIDEOUT,
      OLEMISC_ACTIVATEWHENVISIBLE,
      OLEMISC_RENDERINGISDEVICEINDEPENDENT,
      OLEMISC_INVISIBLEATRUNTIME,
      OLEMISC_ALWAYSRUN,
      OLEMISC_ACTSLIKEBUTTON,
      OLEMISC_ACTSLIKELABEL,
      OLEMISC_NOUIACTIVATE,
      OLEMISC_ALIGNABLE,
      OLEMISC_SIMPLEFRAME,
      OLEMISC_SETCLIENTSITEFIRST,
      OLEMISC_IMEMODE,
      OLEMISC_IGNOREACTIVATEWHENVISIBLE,
      OLEMISC_WANTSTOMENUMERGE,
      OLEMISC_SUPPORTSMULTILEVELUNDO
   );
   for tagOLEMISC use (
      OLEMISC_RECOMPOSEONRESIZE => 1,
      OLEMISC_ONLYICONIC => 2,
      OLEMISC_INSERTNOTREPLACE => 4,
      OLEMISC_STATIC => 8,
      OLEMISC_CANTLINKINSIDE => 16,
      OLEMISC_CANLINKBYOLE1 => 32,
      OLEMISC_ISLINKOBJECT => 64,
      OLEMISC_INSIDEOUT => 128,
      OLEMISC_ACTIVATEWHENVISIBLE => 256,
      OLEMISC_RENDERINGISDEVICEINDEPENDENT => 512,
      OLEMISC_INVISIBLEATRUNTIME => 1024,
      OLEMISC_ALWAYSRUN => 2048,
      OLEMISC_ACTSLIKEBUTTON => 4096,
      OLEMISC_ACTSLIKELABEL => 8192,
      OLEMISC_NOUIACTIVATE => 16384,
      OLEMISC_ALIGNABLE => 32768,
      OLEMISC_SIMPLEFRAME => 65536,
      OLEMISC_SETCLIENTSITEFIRST => 131072,
      OLEMISC_IMEMODE => 262144,
      OLEMISC_IGNOREACTIVATEWHENVISIBLE => 524288,
      OLEMISC_WANTSTOMENUMERGE => 1048576,
      OLEMISC_SUPPORTSMULTILEVELUNDO => 2097152
   );
   for tagOLEMISC'Size use 32;
   subtype OLEMISC is tagOLEMISC; -- CXType_Elaborated
   type tagOLECLOSE is (
      OLECLOSE_SAVEIFDIRTY,
      OLECLOSE_NOSAVE,
      OLECLOSE_PROMPTSAVE
   );
   for tagOLECLOSE use (
      OLECLOSE_SAVEIFDIRTY => 0,
      OLECLOSE_NOSAVE => 1,
      OLECLOSE_PROMPTSAVE => 2
   );
   for tagOLECLOSE'Size use 32;
   subtype OLECLOSE is tagOLECLOSE; -- CXType_Elaborated
   type IEnumOLEVERB_Ptr is access all IEnumOLEVERB; -- Auto Generated Dependancy
   type IOleObject_Interface is interface and IUnknown_Interface;
      function SetClientSite(
         This : access IOleObject_Interface;
         pClientSite : access IOleClientSite
      ) return HRESULT is abstract;
      function GetClientSite(
         This : access IOleObject_Interface;
         ppClientSite : access LPOLECLIENTSITE
      ) return HRESULT is abstract;
      function SetHostNames(
         This : access IOleObject_Interface;
         szContainerApp : LPCOLESTR;
         szContainerObj : LPCOLESTR
      ) return HRESULT is abstract;
      function Close(
         This : access IOleObject_Interface;
         dwSaveOption : DWORD
      ) return HRESULT is abstract;
      function SetMoniker(
         This : access IOleObject_Interface;
         dwWhichMoniker : DWORD;
         pmk : access IMoniker
      ) return HRESULT is abstract;
      function GetMoniker(
         This : access IOleObject_Interface;
         dwAssign : DWORD;
         dwWhichMoniker : DWORD;
         ppmk : access LPMONIKER
      ) return HRESULT is abstract;
      function InitFromData(
         This : access IOleObject_Interface;
         pDataObject : access IDataObject;
         fCreation : BOOL;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function GetClipboardData(
         This : access IOleObject_Interface;
         dwReserved : DWORD;
         ppDataObject : access LPDATAOBJECT
      ) return HRESULT is abstract;
      function DoVerb(
         This : access IOleObject_Interface;
         iVerb : LONG;
         lpmsg_x : LPMSG;
         pActiveSite : access IOleClientSite;
         lindex : LONG;
         hwndParent : HWND;
         lprcPosRect : LPCRECT
      ) return HRESULT is abstract;
      function EnumVerbs(
         This : access IOleObject_Interface;
         ppEnumOleVerb : access IEnumOLEVERB_Ptr
      ) return HRESULT is abstract;
      function Update(This : access IOleObject_Interface) return HRESULT is abstract;
      function IsUpToDate(This : access IOleObject_Interface) return HRESULT is abstract;
      function GetUserClassID(
         This : access IOleObject_Interface;
         pClsid : access CLSID
      ) return HRESULT is abstract;
      function GetUserType(
         This : access IOleObject_Interface;
         dwFormOfType : DWORD;
         pszUserType : access LPOLESTR
      ) return HRESULT is abstract;
      function SetExtent(
         This : access IOleObject_Interface;
         dwDrawAspect : DWORD;
         psizel_x : access SIZEL
      ) return HRESULT is abstract;
      function GetExtent(
         This : access IOleObject_Interface;
         dwDrawAspect : DWORD;
         psizel_x : access SIZEL
      ) return HRESULT is abstract;
      function Advise(
         This : access IOleObject_Interface;
         pAdvSink : access IAdviseSink;
         pdwConnection : access DWORD
      ) return HRESULT is abstract;
      function Unadvise(
         This : access IOleObject_Interface;
         dwConnection : DWORD
      ) return HRESULT is abstract;
      function EnumAdvise(
         This : access IOleObject_Interface;
         ppenumAdvise : access LPENUMSTATDATA
      ) return HRESULT is abstract;
      function GetMiscStatus(
         This : access IOleObject_Interface;
         dwAspect : DWORD;
         pdwStatus : access DWORD
      ) return HRESULT is abstract;
      function SetColorScheme(
         This : access IOleObject_Interface;
         pLogpal : access LOGPALETTE
      ) return HRESULT is abstract;
   type IOleObject is access IOleObject_Interface'Class;
   type IOleObject_Ptr is access IOleObject;
   type tagOLERENDER is (
      OLERENDER_NONE,
      OLERENDER_DRAW,
      OLERENDER_FORMAT,
      OLERENDER_ASIS
   );
   for tagOLERENDER use (
      OLERENDER_NONE => 0,
      OLERENDER_DRAW => 1,
      OLERENDER_FORMAT => 2,
      OLERENDER_ASIS => 3
   );
   for tagOLERENDER'Size use 32;
   subtype OLERENDER is tagOLERENDER; -- CXType_Elaborated
   type LPOLERENDER is access OLERENDER; -- CXType_Pointer - CXType_Typedef
   type tagOBJECTDESCRIPTOR is record
      cbSize : ULONG;
      clsid_x : CLSID;
      dwDrawAspect : DWORD;
      sizel_x : SIZEL;
      pointl_x : POINTL;
      dwStatus : DWORD;
      dwFullUserTypeName : DWORD;
      dwSrcOfCopy : DWORD;
   end record;
   subtype OBJECTDESCRIPTOR is tagOBJECTDESCRIPTOR; -- CXType_Elaborated
   type POBJECTDESCRIPTOR is access tagOBJECTDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   type LPOBJECTDESCRIPTOR is access tagOBJECTDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   subtype LINKSRCDESCRIPTOR is tagOBJECTDESCRIPTOR; -- CXType_Elaborated
   type PLINKSRCDESCRIPTOR is access tagOBJECTDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   type LPLINKSRCDESCRIPTOR is access tagOBJECTDESCRIPTOR; -- CXType_Pointer - CXType_Elaborated
   type LPOLEWINDOW is access IOleWindow; -- CXType_Pointer - CXType_Typedef
   type IOleWindow_Interface is interface and IUnknown_Interface;
      function GetWindow(
         This : access IOleWindow_Interface;
         phwnd : access HWND
      ) return HRESULT is abstract;
      function ContextSensitiveHelp(
         This : access IOleWindow_Interface;
         fEnterMode : BOOL
      ) return HRESULT is abstract;
   type IOleWindow is access IOleWindow_Interface'Class;
   type IOleWindow_Ptr is access IOleWindow;
   type LPOLELINK is access IOleLink; -- CXType_Pointer - CXType_Typedef
   type tagOLEUPDATE is (
      OLEUPDATE_ALWAYS,
      OLEUPDATE_ONCALL
   );
   for tagOLEUPDATE use (
      OLEUPDATE_ALWAYS => 1,
      OLEUPDATE_ONCALL => 3
   );
   for tagOLEUPDATE'Size use 32;
   subtype OLEUPDATE is tagOLEUPDATE; -- CXType_Elaborated
   type LPOLEUPDATE is access OLEUPDATE; -- CXType_Pointer - CXType_Typedef
   type POLEUPDATE is access OLEUPDATE; -- CXType_Pointer - CXType_Typedef
   type tagOLELINKBIND is (
      OLELINKBIND_EVENIFCLASSDIFF
   );
   for tagOLELINKBIND use (
      OLELINKBIND_EVENIFCLASSDIFF => 1
   );
   for tagOLELINKBIND'Size use 32;
   subtype OLELINKBIND is tagOLELINKBIND; -- CXType_Elaborated
   type IOleLink_Interface is interface and IUnknown_Interface;
      function SetUpdateOptions(
         This : access IOleLink_Interface;
         dwUpdateOpt : DWORD
      ) return HRESULT is abstract;
      function GetUpdateOptions(
         This : access IOleLink_Interface;
         pdwUpdateOpt : access DWORD
      ) return HRESULT is abstract;
      function SetSourceMoniker(
         This : access IOleLink_Interface;
         pmk : access IMoniker;
         rclsid : access constant IID
      ) return HRESULT is abstract;
      function GetSourceMoniker(
         This : access IOleLink_Interface;
         ppmk : access LPMONIKER
      ) return HRESULT is abstract;
      function SetSourceDisplayName(
         This : access IOleLink_Interface;
         pszStatusText : LPCOLESTR
      ) return HRESULT is abstract;
      function GetSourceDisplayName(
         This : access IOleLink_Interface;
         ppszDisplayName : access LPOLESTR
      ) return HRESULT is abstract;
      function BindToSource(
         This : access IOleLink_Interface;
         bindflags : DWORD;
         pbc : access IBindCtx
      ) return HRESULT is abstract;
      function BindIfRunning(This : access IOleLink_Interface) return HRESULT is abstract;
      function GetBoundSource(
         This : access IOleLink_Interface;
         ppunk : access LPVOID
      ) return HRESULT is abstract;
      function UnbindSource(This : access IOleLink_Interface) return HRESULT is abstract;
      function Update(
         This : access IOleLink_Interface;
         pbc : access IBindCtx
      ) return HRESULT is abstract;
   type IOleLink is access IOleLink_Interface'Class;
   type IOleLink_Ptr is access IOleLink;
   type LPOLEITEMCONTAINER is access IOleItemContainer; -- CXType_Pointer - CXType_Typedef
   type tagBINDSPEED is (
      BINDSPEED_INDEFINITE,
      BINDSPEED_MODERATE,
      BINDSPEED_IMMEDIATE
   );
   for tagBINDSPEED use (
      BINDSPEED_INDEFINITE => 1,
      BINDSPEED_MODERATE => 2,
      BINDSPEED_IMMEDIATE => 3
   );
   for tagBINDSPEED'Size use 32;
   subtype BINDSPEED is tagBINDSPEED; -- CXType_Elaborated
   type tagOLECONTF is (
      OLECONTF_EMBEDDINGS,
      OLECONTF_LINKS,
      OLECONTF_OTHERS,
      OLECONTF_ONLYUSER,
      OLECONTF_ONLYIFRUNNING
   );
   for tagOLECONTF use (
      OLECONTF_EMBEDDINGS => 1,
      OLECONTF_LINKS => 2,
      OLECONTF_OTHERS => 4,
      OLECONTF_ONLYUSER => 8,
      OLECONTF_ONLYIFRUNNING => 16
   );
   for tagOLECONTF'Size use 32;
   subtype OLECONTF is tagOLECONTF; -- CXType_Elaborated
   type IOleItemContainer_Interface is interface and IOleContainer_Interface;
      function GetObjectA(
         This : access IOleItemContainer_Interface;
         pszItem : LPOLESTR;
         dwSpeedNeeded : DWORD;
         pbc : access IBindCtx;
         riid : access constant IID;
         ppvObject : access LPVOID
      ) return HRESULT is abstract;
      function GetObjectStorage(
         This : access IOleItemContainer_Interface;
         pszItem : LPOLESTR;
         pbc : access IBindCtx;
         riid : access constant IID;
         ppvStorage : access LPVOID
      ) return HRESULT is abstract;
      function IsRunning(
         This : access IOleItemContainer_Interface;
         pszItem : LPOLESTR
      ) return HRESULT is abstract;
   type IOleItemContainer is access IOleItemContainer_Interface'Class;
   type IOleItemContainer_Ptr is access IOleItemContainer;
   type LPOLEINPLACEUIWINDOW is access IOleInPlaceUIWindow; -- CXType_Pointer - CXType_Typedef
   subtype BORDERWIDTHS is RECT; -- CXType_Typedef
   subtype LPBORDERWIDTHS is LPRECT; -- CXType_Typedef
   subtype LPCBORDERWIDTHS is LPCRECT; -- CXType_Typedef
   type IOleInPlaceUIWindow_Interface is interface and IOleWindow_Interface;
      function GetBorder(
         This : access IOleInPlaceUIWindow_Interface;
         lprectBorder : LPRECT
      ) return HRESULT is abstract;
      function RequestBorderSpace(
         This : access IOleInPlaceUIWindow_Interface;
         pborderwidths : LPCBORDERWIDTHS
      ) return HRESULT is abstract;
      function SetBorderSpace(
         This : access IOleInPlaceUIWindow_Interface;
         pborderwidths : LPCBORDERWIDTHS
      ) return HRESULT is abstract;
      function SetActiveObject(
         This : access IOleInPlaceUIWindow_Interface;
         pActiveObject : access IOleInPlaceActiveObject;
         pszObjName : LPCOLESTR
      ) return HRESULT is abstract;
   type IOleInPlaceUIWindow is access IOleInPlaceUIWindow_Interface'Class;
   type IOleInPlaceUIWindow_Ptr is access IOleInPlaceUIWindow;
   type LPOLEINPLACEACTIVEOBJECT is access IOleInPlaceActiveObject; -- CXType_Pointer - CXType_Typedef
   type IOleInPlaceActiveObject_Interface is interface and IOleWindow_Interface;
      function TranslateAcceleratorA(
         This : access IOleInPlaceActiveObject_Interface;
         lpmsg_x : LPMSG
      ) return HRESULT is abstract;
      function OnFrameWindowActivate(
         This : access IOleInPlaceActiveObject_Interface;
         fActivate : BOOL
      ) return HRESULT is abstract;
      function OnDocWindowActivate(
         This : access IOleInPlaceActiveObject_Interface;
         fActivate : BOOL
      ) return HRESULT is abstract;
      function ResizeBorder(
         This : access IOleInPlaceActiveObject_Interface;
         prcBorder : LPCRECT;
         pUIWindow : access IOleInPlaceUIWindow;
         fFrameWindow : BOOL
      ) return HRESULT is abstract;
      function EnableModeless(
         This : access IOleInPlaceActiveObject_Interface;
         fEnable : BOOL
      ) return HRESULT is abstract;
   type IOleInPlaceActiveObject is access IOleInPlaceActiveObject_Interface'Class;
   type IOleInPlaceActiveObject_Ptr is access IOleInPlaceActiveObject;
   function IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
      This : access IOleInPlaceActiveObject
   ) return HRESULT;
   pragma import (C,IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy,"IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy");
   procedure IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub,"IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub");
   function IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
      This : access IOleInPlaceActiveObject;
      prcBorder : LPCRECT;
      riid : access constant IID;
      pUIWindow : access IOleInPlaceUIWindow;
      fFrameWindow : BOOL
   ) return HRESULT;
   pragma import (C,IOleInPlaceActiveObject_RemoteResizeBorder_Proxy,"IOleInPlaceActiveObject_RemoteResizeBorder_Proxy");
   procedure IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IOleInPlaceActiveObject_RemoteResizeBorder_Stub,"IOleInPlaceActiveObject_RemoteResizeBorder_Stub");
   type LPOLEINPLACEFRAME is access IOleInPlaceFrame; -- CXType_Pointer - CXType_Typedef
   type tagOIFI is record
      cb : UINT;
      fMDIApp : BOOL;
      hwndFrame : HWND;
      haccel_x : HACCEL;
      cAccelEntries : UINT;
   end record;
   subtype OLEINPLACEFRAMEINFO is tagOIFI; -- CXType_Elaborated
   type LPOLEINPLACEFRAMEINFO is access tagOIFI; -- CXType_Pointer - CXType_Elaborated
   type tagOleMenuGroupWidths is record
      width : Void;
   end record;
   subtype OLEMENUGROUPWIDTHS is tagOleMenuGroupWidths; -- CXType_Elaborated
   type LPOLEMENUGROUPWIDTHS is access tagOleMenuGroupWidths; -- CXType_Pointer - CXType_Elaborated
   subtype HOLEMENU is HGLOBAL; -- CXType_Typedef
   type IOleInPlaceFrame_Interface is interface and IOleInPlaceUIWindow_Interface;
      function InsertMenus(
         This : access IOleInPlaceFrame_Interface;
         hmenuShared : HMENU;
         lpMenuWidths : LPOLEMENUGROUPWIDTHS
      ) return HRESULT is abstract;
      function SetMenu(
         This : access IOleInPlaceFrame_Interface;
         hmenuShared : HMENU;
         holemenu_x : HOLEMENU;
         hwndActiveObject : HWND
      ) return HRESULT is abstract;
      function RemoveMenus(
         This : access IOleInPlaceFrame_Interface;
         hmenuShared : HMENU
      ) return HRESULT is abstract;
      function SetStatusText(
         This : access IOleInPlaceFrame_Interface;
         pszStatusText : LPCOLESTR
      ) return HRESULT is abstract;
      function EnableModeless(
         This : access IOleInPlaceFrame_Interface;
         fEnable : BOOL
      ) return HRESULT is abstract;
      function TranslateAcceleratorA(
         This : access IOleInPlaceFrame_Interface;
         lpmsg_x : LPMSG;
         wID : WORD
      ) return HRESULT is abstract;
   type IOleInPlaceFrame is access IOleInPlaceFrame_Interface'Class;
   type IOleInPlaceFrame_Ptr is access IOleInPlaceFrame;
   type LPOLEINPLACEOBJECT is access IOleInPlaceObject; -- CXType_Pointer - CXType_Typedef
   type IOleInPlaceObject_Interface is interface and IOleWindow_Interface;
      function InPlaceDeactivate(This : access IOleInPlaceObject_Interface) return HRESULT is abstract;
      function UIDeactivate(This : access IOleInPlaceObject_Interface) return HRESULT is abstract;
      function SetObjectRects(
         This : access IOleInPlaceObject_Interface;
         lprcPosRect : LPCRECT;
         lprcClipRect : LPCRECT
      ) return HRESULT is abstract;
      function ReactivateAndUndo(This : access IOleInPlaceObject_Interface) return HRESULT is abstract;
   type IOleInPlaceObject is access IOleInPlaceObject_Interface'Class;
   type IOleInPlaceObject_Ptr is access IOleInPlaceObject;
   type LPOLEINPLACESITE is access IOleInPlaceSite; -- CXType_Pointer - CXType_Typedef
   type IOleInPlaceSite_Interface is interface and IOleWindow_Interface;
      function CanInPlaceActivate(This : access IOleInPlaceSite_Interface) return HRESULT is abstract;
      function OnInPlaceActivate(This : access IOleInPlaceSite_Interface) return HRESULT is abstract;
      function OnUIActivate(This : access IOleInPlaceSite_Interface) return HRESULT is abstract;
      function GetWindowContext(
         This : access IOleInPlaceSite_Interface;
         ppFrame : access LPOLEINPLACEFRAME;
         ppDoc : access LPOLEINPLACEUIWINDOW;
         lprcPosRect : LPRECT;
         lprcClipRect : LPRECT;
         lpFrameInfo : LPOLEINPLACEFRAMEINFO
      ) return HRESULT is abstract;
      function Scroll(
         This : access IOleInPlaceSite_Interface;
         scrollExtant : SIZE
      ) return HRESULT is abstract;
      function OnUIDeactivate(
         This : access IOleInPlaceSite_Interface;
         fUndoable : BOOL
      ) return HRESULT is abstract;
      function OnInPlaceDeactivate(This : access IOleInPlaceSite_Interface) return HRESULT is abstract;
      function DiscardUndoState(This : access IOleInPlaceSite_Interface) return HRESULT is abstract;
      function DeactivateAndUndo(This : access IOleInPlaceSite_Interface) return HRESULT is abstract;
      function OnPosRectChange(
         This : access IOleInPlaceSite_Interface;
         lprcPosRect : LPCRECT
      ) return HRESULT is abstract;
   type IOleInPlaceSite is access IOleInPlaceSite_Interface'Class;
   type IOleInPlaceSite_Ptr is access IOleInPlaceSite;
   type IContinue_Interface is interface and IUnknown_Interface;
      function FContinue(This : access IContinue_Interface) return HRESULT is abstract;
   type IContinue is access IContinue_Interface'Class;
   type IContinue_Ptr is access IContinue;
   type LPVIEWOBJECT is access IViewObject; -- CXType_Pointer - CXType_Typedef
   type LOGPALETTE_Ptr is access all LOGPALETTE; -- Auto Generated Dependancy
   type IViewObject_Interface is interface and IUnknown_Interface;
      function Draw(
         This : access IViewObject_Interface;
         dwDrawAspect : DWORD;
         lindex : LONG;
         pvAspect : access Void;
         ptd : access DVTARGETDEVICE;
         hdcTargetDev : HDC;
         hdcDraw : HDC;
         lprcBounds : LPCRECTL;
         lprcWBounds : LPCRECTL;
         pfnContinue : access System.Address;
         dwContinue : ULONG_PTR
      ) return HRESULT is abstract;
      function GetColorSet(
         This : access IViewObject_Interface;
         dwDrawAspect : DWORD;
         lindex : LONG;
         pvAspect : access Void;
         ptd : access DVTARGETDEVICE;
         hicTargetDev : HDC;
         ppColorSet : access LOGPALETTE_Ptr
      ) return HRESULT is abstract;
      function Freeze(
         This : access IViewObject_Interface;
         dwDrawAspect : DWORD;
         lindex : LONG;
         pvAspect : access Void;
         pdwFreeze : access DWORD
      ) return HRESULT is abstract;
      function Unfreeze(
         This : access IViewObject_Interface;
         dwFreeze : DWORD
      ) return HRESULT is abstract;
      function SetAdvise(
         This : access IViewObject_Interface;
         aspects : DWORD;
         advf_x : DWORD;
         pAdvSink : access IAdviseSink
      ) return HRESULT is abstract;
      function GetAdvise(
         This : access IViewObject_Interface;
         pAspects : access DWORD;
         pAdvf : access DWORD;
         ppAdvSink : access LPADVISESINK
      ) return HRESULT is abstract;
   type IViewObject is access IViewObject_Interface'Class;
   type IViewObject_Ptr is access IViewObject;
   function IViewObject_RemoteDraw_Proxy(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : ULONG_PTR;
      ptd : access DVTARGETDEVICE;
      hdcTargetDev : HDC;
      hdcDraw : HDC;
      lprcBounds : LPCRECTL;
      lprcWBounds : LPCRECTL;
      pContinue : access IContinue
   ) return HRESULT;
   pragma import (C,IViewObject_RemoteDraw_Proxy,"IViewObject_RemoteDraw_Proxy");
   procedure IViewObject_RemoteDraw_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IViewObject_RemoteDraw_Stub,"IViewObject_RemoteDraw_Stub");
   function IViewObject_RemoteGetColorSet_Proxy(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : ULONG_PTR;
      ptd : access DVTARGETDEVICE;
      hicTargetDev : ULONG_PTR;
      ppColorSet : access LOGPALETTE_Ptr
   ) return HRESULT;
   pragma import (C,IViewObject_RemoteGetColorSet_Proxy,"IViewObject_RemoteGetColorSet_Proxy");
   procedure IViewObject_RemoteGetColorSet_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IViewObject_RemoteGetColorSet_Stub,"IViewObject_RemoteGetColorSet_Stub");
   function IViewObject_RemoteFreeze_Proxy(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : ULONG_PTR;
      pdwFreeze : access DWORD
   ) return HRESULT;
   pragma import (C,IViewObject_RemoteFreeze_Proxy,"IViewObject_RemoteFreeze_Proxy");
   procedure IViewObject_RemoteFreeze_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IViewObject_RemoteFreeze_Stub,"IViewObject_RemoteFreeze_Stub");
   function IViewObject_RemoteGetAdvise_Proxy(
      This : access IViewObject;
      pAspects : access DWORD;
      pAdvf : access DWORD;
      ppAdvSink : access LPADVISESINK
   ) return HRESULT;
   pragma import (C,IViewObject_RemoteGetAdvise_Proxy,"IViewObject_RemoteGetAdvise_Proxy");
   procedure IViewObject_RemoteGetAdvise_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IViewObject_RemoteGetAdvise_Stub,"IViewObject_RemoteGetAdvise_Stub");
   type LPVIEWOBJECT2 is access IViewObject2; -- CXType_Pointer - CXType_Typedef
   type IViewObject2_Interface is interface and IViewObject_Interface;
      function GetExtent(
         This : access IViewObject2_Interface;
         dwDrawAspect : DWORD;
         lindex : LONG;
         ptd : access DVTARGETDEVICE;
         lpsizel_x : LPSIZEL
      ) return HRESULT is abstract;
   type IViewObject2 is access IViewObject2_Interface'Class;
   type IViewObject2_Ptr is access IViewObject2;
   type LPDROPSOURCE is access IDropSource; -- CXType_Pointer - CXType_Typedef
   type IDropSource_Interface is interface and IUnknown_Interface;
      function QueryContinueDrag(
         This : access IDropSource_Interface;
         fEscapePressed : BOOL;
         grfKeyState : DWORD
      ) return HRESULT is abstract;
      function GiveFeedback(
         This : access IDropSource_Interface;
         dwEffect : DWORD
      ) return HRESULT is abstract;
   type IDropSource is access IDropSource_Interface'Class;
   type IDropSource_Ptr is access IDropSource;
   type LPDROPTARGET is access IDropTarget; -- CXType_Pointer - CXType_Typedef
   type IDropTarget_Interface is interface and IUnknown_Interface;
      function DragEnter(
         This : access IDropTarget_Interface;
         pDataObj : access IDataObject;
         grfKeyState : DWORD;
         pt : POINTL;
         pdwEffect : access DWORD
      ) return HRESULT is abstract;
      function DragOver(
         This : access IDropTarget_Interface;
         grfKeyState : DWORD;
         pt : POINTL;
         pdwEffect : access DWORD
      ) return HRESULT is abstract;
      function DragLeave(This : access IDropTarget_Interface) return HRESULT is abstract;
      function Drop(
         This : access IDropTarget_Interface;
         pDataObj : access IDataObject;
         grfKeyState : DWORD;
         pt : POINTL;
         pdwEffect : access DWORD
      ) return HRESULT is abstract;
   type IDropTarget is access IDropTarget_Interface'Class;
   type IDropTarget_Ptr is access IDropTarget;
   type IDropSourceNotify_Interface is interface and IUnknown_Interface;
      function DragEnterTarget(
         This : access IDropSourceNotify_Interface;
         hwndTarget : HWND
      ) return HRESULT is abstract;
      function DragLeaveTarget(This : access IDropSourceNotify_Interface) return HRESULT is abstract;
   type IDropSourceNotify is access IDropSourceNotify_Interface'Class;
   type IDropSourceNotify_Ptr is access IDropSourceNotify;
   type IEnterpriseDropTarget_Interface is interface and IUnknown_Interface;
      function SetDropSourceEnterpriseId(
         This : access IEnterpriseDropTarget_Interface;
         identity : LPCWSTR
      ) return HRESULT is abstract;
      function IsEvaluatingEdpPolicy(
         This : access IEnterpriseDropTarget_Interface;
         value : access BOOL
      ) return HRESULT is abstract;
   type IEnterpriseDropTarget is access IEnterpriseDropTarget_Interface'Class;
   type IEnterpriseDropTarget_Ptr is access IEnterpriseDropTarget;
   type LPENUMOLEVERB is access IEnumOLEVERB; -- CXType_Pointer - CXType_Typedef
   type tagOLEVERB is record
      lVerb : LONG;
      lpszVerbName : LPOLESTR;
      fuFlags : DWORD;
      grfAttribs : DWORD;
   end record;
   subtype OLEVERB is tagOLEVERB; -- CXType_Elaborated
   type LPOLEVERB is access tagOLEVERB; -- CXType_Pointer - CXType_Elaborated
   type tagOLEVERBATTRIB is (
      OLEVERBATTRIB_NEVERDIRTIES,
      OLEVERBATTRIB_ONCONTAINERMENU
   );
   for tagOLEVERBATTRIB use (
      OLEVERBATTRIB_NEVERDIRTIES => 1,
      OLEVERBATTRIB_ONCONTAINERMENU => 2
   );
   for tagOLEVERBATTRIB'Size use 32;
   subtype OLEVERBATTRIB is tagOLEVERBATTRIB; -- CXType_Elaborated
   type IEnumOLEVERB_Interface is interface and IUnknown_Interface;
      function Next(
         This : access IEnumOLEVERB_Interface;
         celt : ULONG;
         rgelt : LPOLEVERB;
         pceltFetched : access ULONG
      ) return HRESULT is abstract;
      function Skip(
         This : access IEnumOLEVERB_Interface;
         celt : ULONG
      ) return HRESULT is abstract;
      function Reset(This : access IEnumOLEVERB_Interface) return HRESULT is abstract;
      function Clone(
         This : access IEnumOLEVERB_Interface;
         ppenum : access LPVOID
      ) return HRESULT is abstract;
   type IEnumOLEVERB is access IEnumOLEVERB_Interface'Class;
   function IEnumOLEVERB_RemoteNext_Proxy(
      This : access IEnumOLEVERB;
      celt : ULONG;
      rgelt : LPOLEVERB;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumOLEVERB_RemoteNext_Proxy,"IEnumOLEVERB_RemoteNext_Proxy");
   procedure IEnumOLEVERB_RemoteNext_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IEnumOLEVERB_RemoteNext_Stub,"IEnumOLEVERB_RemoteNext_Stub");
   function HACCEL_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HACCEL
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HACCEL_UserSize,"HACCEL_UserSize");
   procedure HACCEL_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HACCEL
   );
   pragma import (C,HACCEL_UserFree,"HACCEL_UserFree");
   function HGLOBAL_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HGLOBAL
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HGLOBAL_UserSize,"HGLOBAL_UserSize");
   procedure HGLOBAL_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HGLOBAL
   );
   pragma import (C,HGLOBAL_UserFree,"HGLOBAL_UserFree");
   function HMENU_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HMENU
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HMENU_UserSize,"HMENU_UserSize");
   procedure HMENU_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HMENU
   );
   pragma import (C,HMENU_UserFree,"HMENU_UserFree");
   function HWND_UserSize(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HWND
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HWND_UserSize,"HWND_UserSize");
   procedure HWND_UserFree(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HWND
   );
   pragma import (C,HWND_UserFree,"HWND_UserFree");
   function HACCEL_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HACCEL
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HACCEL_UserSize64,"HACCEL_UserSize64");
   procedure HACCEL_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HACCEL
   );
   pragma import (C,HACCEL_UserFree64,"HACCEL_UserFree64");
   function HGLOBAL_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HGLOBAL
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HGLOBAL_UserSize64,"HGLOBAL_UserSize64");
   procedure HGLOBAL_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HGLOBAL
   );
   pragma import (C,HGLOBAL_UserFree64,"HGLOBAL_UserFree64");
   function HMENU_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HMENU
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HMENU_UserSize64,"HMENU_UserSize64");
   procedure HMENU_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HMENU
   );
   pragma import (C,HMENU_UserFree64,"HMENU_UserFree64");
   function HWND_UserSize64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : Interfaces.C.unsigned_long;
      param3 : access HWND
   ) return Interfaces.C.unsigned_long;
   pragma import (C,HWND_UserSize64,"HWND_UserSize64");
   procedure HWND_UserFree64(
      param1 : access Interfaces.C.unsigned_long;
      param2 : access HWND
   );
   pragma import (C,HWND_UserFree64,"HWND_UserFree64");
   function IOleCache2_UpdateCache_Proxy(
      This : access IOleCache2;
      pDataObject : LPDATAOBJECT;
      grfUpdf : DWORD;
      pReserved : LPVOID
   ) return HRESULT;
   pragma import (C,IOleCache2_UpdateCache_Proxy,"IOleCache2_UpdateCache_Proxy");
   function IOleCache2_UpdateCache_Stub(
      This : access IOleCache2;
      pDataObject : LPDATAOBJECT;
      grfUpdf : DWORD;
      pReserved : LONG_PTR
   ) return HRESULT;
   pragma import (C,IOleCache2_UpdateCache_Stub,"IOleCache2_UpdateCache_Stub");
   function IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
      This : access IOleInPlaceActiveObject;
      lpmsg_x : LPMSG
   ) return HRESULT;
   pragma import (C,IOleInPlaceActiveObject_TranslateAccelerator_Proxy,"IOleInPlaceActiveObject_TranslateAccelerator_Proxy");
   function IOleInPlaceActiveObject_TranslateAccelerator_Stub(
      This : access IOleInPlaceActiveObject
   ) return HRESULT;
   pragma import (C,IOleInPlaceActiveObject_TranslateAccelerator_Stub,"IOleInPlaceActiveObject_TranslateAccelerator_Stub");
   function IOleInPlaceActiveObject_ResizeBorder_Proxy(
      This : access IOleInPlaceActiveObject;
      prcBorder : LPCRECT;
      pUIWindow : access IOleInPlaceUIWindow;
      fFrameWindow : BOOL
   ) return HRESULT;
   pragma import (C,IOleInPlaceActiveObject_ResizeBorder_Proxy,"IOleInPlaceActiveObject_ResizeBorder_Proxy");
   function IOleInPlaceActiveObject_ResizeBorder_Stub(
      This : access IOleInPlaceActiveObject;
      prcBorder : LPCRECT;
      riid : access constant IID;
      pUIWindow : access IOleInPlaceUIWindow;
      fFrameWindow : BOOL
   ) return HRESULT;
   pragma import (C,IOleInPlaceActiveObject_ResizeBorder_Stub,"IOleInPlaceActiveObject_ResizeBorder_Stub");
   function IViewObject_Draw_Proxy(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : access Void;
      ptd : access DVTARGETDEVICE;
      hdcTargetDev : HDC;
      hdcDraw : HDC;
      lprcBounds : LPCRECTL;
      lprcWBounds : LPCRECTL;
      pfnContinue : access System.Address;
      dwContinue : ULONG_PTR
   ) return HRESULT;
   pragma import (C,IViewObject_Draw_Proxy,"IViewObject_Draw_Proxy");
   function IViewObject_Draw_Stub(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : ULONG_PTR;
      ptd : access DVTARGETDEVICE;
      hdcTargetDev : HDC;
      hdcDraw : HDC;
      lprcBounds : LPCRECTL;
      lprcWBounds : LPCRECTL;
      pContinue : access IContinue
   ) return HRESULT;
   pragma import (C,IViewObject_Draw_Stub,"IViewObject_Draw_Stub");
   function IViewObject_GetColorSet_Proxy(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : access Void;
      ptd : access DVTARGETDEVICE;
      hicTargetDev : HDC;
      ppColorSet : access LOGPALETTE_Ptr
   ) return HRESULT;
   pragma import (C,IViewObject_GetColorSet_Proxy,"IViewObject_GetColorSet_Proxy");
   function IViewObject_GetColorSet_Stub(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : ULONG_PTR;
      ptd : access DVTARGETDEVICE;
      hicTargetDev : ULONG_PTR;
      ppColorSet : access LOGPALETTE_Ptr
   ) return HRESULT;
   pragma import (C,IViewObject_GetColorSet_Stub,"IViewObject_GetColorSet_Stub");
   function IViewObject_Freeze_Proxy(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : access Void;
      pdwFreeze : access DWORD
   ) return HRESULT;
   pragma import (C,IViewObject_Freeze_Proxy,"IViewObject_Freeze_Proxy");
   function IViewObject_Freeze_Stub(
      This : access IViewObject;
      dwDrawAspect : DWORD;
      lindex : LONG;
      pvAspect : ULONG_PTR;
      pdwFreeze : access DWORD
   ) return HRESULT;
   pragma import (C,IViewObject_Freeze_Stub,"IViewObject_Freeze_Stub");
   function IViewObject_GetAdvise_Proxy(
      This : access IViewObject;
      pAspects : access DWORD;
      pAdvf : access DWORD;
      ppAdvSink : access LPADVISESINK
   ) return HRESULT;
   pragma import (C,IViewObject_GetAdvise_Proxy,"IViewObject_GetAdvise_Proxy");
   function IViewObject_GetAdvise_Stub(
      This : access IViewObject;
      pAspects : access DWORD;
      pAdvf : access DWORD;
      ppAdvSink : access LPADVISESINK
   ) return HRESULT;
   pragma import (C,IViewObject_GetAdvise_Stub,"IViewObject_GetAdvise_Stub");
   function IEnumOLEVERB_Next_Proxy(
      This : access IEnumOLEVERB;
      celt : ULONG;
      rgelt : LPOLEVERB;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumOLEVERB_Next_Proxy,"IEnumOLEVERB_Next_Proxy");
   function IEnumOLEVERB_Next_Stub(
      This : access IEnumOLEVERB;
      celt : ULONG;
      rgelt : LPOLEVERB;
      pceltFetched : access ULONG
   ) return HRESULT;
   pragma import (C,IEnumOLEVERB_Next_Stub,"IEnumOLEVERB_Next_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/servprov.h>
   type IServiceProvider; -- Forward Declaration
   type LPSERVICEPROVIDER is access IServiceProvider; -- CXType_Pointer - CXType_Typedef
   type IServiceProvider_Interface is interface and IUnknown_Interface;
      function QueryService(
         This : access IServiceProvider_Interface;
         guidService : access constant GUID;
         riid : access constant IID;
         ppvObject : access LPVOID
      ) return HRESULT is abstract;
   type IServiceProvider is access IServiceProvider_Interface'Class;
   type IServiceProvider_Ptr is access IServiceProvider;
   function IServiceProvider_RemoteQueryService_Proxy(
      This : access IServiceProvider;
      guidService : access constant GUID;
      riid : access constant IID;
      ppvObject : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IServiceProvider_RemoteQueryService_Proxy,"IServiceProvider_RemoteQueryService_Proxy");
   procedure IServiceProvider_RemoteQueryService_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IServiceProvider_RemoteQueryService_Stub,"IServiceProvider_RemoteQueryService_Stub");
   function IServiceProvider_QueryService_Proxy(
      This : access IServiceProvider;
      guidService : access constant GUID;
      riid : access constant IID;
      ppvObject : access LPVOID
   ) return HRESULT;
   pragma import (C,IServiceProvider_QueryService_Proxy,"IServiceProvider_QueryService_Proxy");
   function IServiceProvider_QueryService_Stub(
      This : access IServiceProvider;
      guidService : access constant GUID;
      riid : access constant IID;
      ppvObject : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IServiceProvider_QueryService_Stub,"IServiceProvider_QueryService_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/msxml.h>
   type IXMLDOMImplementation; -- Forward Declaration
   type IXMLDOMNode; -- Forward Declaration
   type IXMLDOMDocumentFragment; -- Forward Declaration
   type IXMLDOMDocument; -- Forward Declaration
   type IXMLDOMNodeList; -- Forward Declaration
   type IXMLDOMNamedNodeMap; -- Forward Declaration
   type IXMLDOMCharacterData; -- Forward Declaration
   type IXMLDOMAttribute; -- Forward Declaration
   type IXMLDOMElement; -- Forward Declaration
   type IXMLDOMText; -- Forward Declaration
   type IXMLDOMComment; -- Forward Declaration
   type IXMLDOMProcessingInstruction; -- Forward Declaration
   type IXMLDOMCDATASection; -- Forward Declaration
   type IXMLDOMDocumentType; -- Forward Declaration
   type IXMLDOMNotation; -- Forward Declaration
   type IXMLDOMEntity; -- Forward Declaration
   type IXMLDOMEntityReference; -- Forward Declaration
   type IXMLDOMParseError; -- Forward Declaration
   type IXTLRuntime; -- Forward Declaration
   type XMLDOMDocumentEvents; -- Forward Declaration
   type IXMLHttpRequest; -- Forward Declaration
   type IXMLDSOControl; -- Forward Declaration
   type IXMLElementCollection; -- Forward Declaration
   type IXMLDocument; -- Forward Declaration
   type IXMLDocument2; -- Forward Declaration
   type IXMLElement; -- Forward Declaration
   type IXMLElement2; -- Forward Declaration
   type IXMLAttribute; -- Forward Declaration
   type IXMLError; -- Forward Declaration
   type xml_error_x is record
      nLine : Interfaces.C.unsigned;
      pchBuf : BSTR;
      cchBuf : Interfaces.C.unsigned;
      ich : Interfaces.C.unsigned;
      pszFound : BSTR;
      pszExpected : BSTR;
      reserved1 : DWORD;
      reserved2 : DWORD;
   end record;
   subtype XML_ERROR is xml_error_x; -- CXType_Elaborated
   type tagDOMNodeType is (
      NODE_INVALID,
      NODE_ELEMENT,
      NODE_ATTRIBUTE,
      NODE_TEXT,
      NODE_CDATA_SECTION,
      NODE_ENTITY_REFERENCE,
      NODE_ENTITY,
      NODE_PROCESSING_INSTRUCTION,
      NODE_COMMENT,
      NODE_DOCUMENT,
      NODE_DOCUMENT_TYPE,
      NODE_DOCUMENT_FRAGMENT,
      NODE_NOTATION
   );
   for tagDOMNodeType use (
      NODE_INVALID => 0,
      NODE_ELEMENT => 1,
      NODE_ATTRIBUTE => 2,
      NODE_TEXT => 3,
      NODE_CDATA_SECTION => 4,
      NODE_ENTITY_REFERENCE => 5,
      NODE_ENTITY => 6,
      NODE_PROCESSING_INSTRUCTION => 7,
      NODE_COMMENT => 8,
      NODE_DOCUMENT => 9,
      NODE_DOCUMENT_TYPE => 10,
      NODE_DOCUMENT_FRAGMENT => 11,
      NODE_NOTATION => 12
   );
   for tagDOMNodeType'Size use 32;
   subtype DOMNodeType is tagDOMNodeType; -- CXType_Elaborated
   type tagXMLEMEM_TYPE is (
      XMLELEMTYPE_ELEMENT,
      XMLELEMTYPE_TEXT,
      XMLELEMTYPE_COMMENT,
      XMLELEMTYPE_DOCUMENT,
      XMLELEMTYPE_DTD,
      XMLELEMTYPE_PI,
      XMLELEMTYPE_OTHER
   );
   for tagXMLEMEM_TYPE use (
      XMLELEMTYPE_ELEMENT => 0,
      XMLELEMTYPE_TEXT => 1,
      XMLELEMTYPE_COMMENT => 2,
      XMLELEMTYPE_DOCUMENT => 3,
      XMLELEMTYPE_DTD => 4,
      XMLELEMTYPE_PI => 5,
      XMLELEMTYPE_OTHER => 6
   );
   for tagXMLEMEM_TYPE'Size use 32;
   subtype XMLELEM_TYPE is tagXMLEMEM_TYPE; -- CXType_Elaborated
   type IXMLDOMImplementation_Interface is interface and IDispatch_Interface;
      function hasFeature(
         This : access IXMLDOMImplementation_Interface;
         feature : BSTR;
         version : BSTR;
         hasFeature : access VARIANT_BOOL
      ) return HRESULT is abstract;
   type IXMLDOMImplementation is access IXMLDOMImplementation_Interface'Class;
   type IXMLDOMImplementation_Ptr is access IXMLDOMImplementation;
   type IXMLDOMNodeList_Ptr is access all IXMLDOMNodeList; -- Auto Generated Dependancy
   type IXMLDOMNamedNodeMap_Ptr is access all IXMLDOMNamedNodeMap; -- Auto Generated Dependancy
   type IXMLDOMDocument_Ptr is access all IXMLDOMDocument; -- Auto Generated Dependancy
   type IXMLDOMNode_Interface is interface and IDispatch_Interface;
      function get_nodeName(
         This : access IXMLDOMNode_Interface;
         name : access BSTR
      ) return HRESULT is abstract;
      function get_nodeValue(
         This : access IXMLDOMNode_Interface;
         value : access VARIANT
      ) return HRESULT is abstract;
      function put_nodeValue(
         This : access IXMLDOMNode_Interface;
         value : VARIANT
      ) return HRESULT is abstract;
      function get_nodeType(
         This : access IXMLDOMNode_Interface;
         type_x : access DOMNodeType
      ) return HRESULT is abstract;
      function get_parentNode(
         This : access IXMLDOMNode_Interface;
         parent : access LPVOID
      ) return HRESULT is abstract;
      function get_childNodes(
         This : access IXMLDOMNode_Interface;
         childList : access IXMLDOMNodeList_Ptr
      ) return HRESULT is abstract;
      function get_firstChild(
         This : access IXMLDOMNode_Interface;
         firstChild : access LPVOID
      ) return HRESULT is abstract;
      function get_lastChild(
         This : access IXMLDOMNode_Interface;
         lastChild : access LPVOID
      ) return HRESULT is abstract;
      function get_previousSibling(
         This : access IXMLDOMNode_Interface;
         previousSibling : access LPVOID
      ) return HRESULT is abstract;
      function get_nextSibling(
         This : access IXMLDOMNode_Interface;
         nextSibling : access LPVOID
      ) return HRESULT is abstract;
      function get_attributes(
         This : access IXMLDOMNode_Interface;
         attributeMap : access IXMLDOMNamedNodeMap_Ptr
      ) return HRESULT is abstract;
      function insertBefore(
         This : access IXMLDOMNode_Interface;
         newChild : access Void;
         refChild : VARIANT;
         outNewChild : access LPVOID
      ) return HRESULT is abstract;
      function replaceChild(
         This : access IXMLDOMNode_Interface;
         newChild : access Void;
         oldChild : access Void;
         outOldChild : access LPVOID
      ) return HRESULT is abstract;
      function removeChild(
         This : access IXMLDOMNode_Interface;
         childNode : access Void;
         oldChild : access LPVOID
      ) return HRESULT is abstract;
      function appendChild(
         This : access IXMLDOMNode_Interface;
         newChild : access Void;
         outNewChild : access LPVOID
      ) return HRESULT is abstract;
      function hasChildNodes(
         This : access IXMLDOMNode_Interface;
         hasChild : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function get_ownerDocument(
         This : access IXMLDOMNode_Interface;
         XMLDOMDocument : access IXMLDOMDocument_Ptr
      ) return HRESULT is abstract;
      function cloneNode(
         This : access IXMLDOMNode_Interface;
         deep : VARIANT_BOOL;
         cloneRoot : access LPVOID
      ) return HRESULT is abstract;
      function get_nodeTypeString(
         This : access IXMLDOMNode_Interface;
         nodeType : access BSTR
      ) return HRESULT is abstract;
      function get_text(
         This : access IXMLDOMNode_Interface;
         text : access BSTR
      ) return HRESULT is abstract;
      function put_text(
         This : access IXMLDOMNode_Interface;
         text : BSTR
      ) return HRESULT is abstract;
      function get_specified(
         This : access IXMLDOMNode_Interface;
         isSpecified : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function get_definition(
         This : access IXMLDOMNode_Interface;
         definitionNode : access LPVOID
      ) return HRESULT is abstract;
      function get_nodeTypedValue(
         This : access IXMLDOMNode_Interface;
         typedValue : access VARIANT
      ) return HRESULT is abstract;
      function put_nodeTypedValue(
         This : access IXMLDOMNode_Interface;
         typedValue : VARIANT
      ) return HRESULT is abstract;
      function get_dataType(
         This : access IXMLDOMNode_Interface;
         dataTypeName : access VARIANT
      ) return HRESULT is abstract;
      function put_dataType(
         This : access IXMLDOMNode_Interface;
         dataTypeName : BSTR
      ) return HRESULT is abstract;
      function get_xml(
         This : access IXMLDOMNode_Interface;
         xmlString : access BSTR
      ) return HRESULT is abstract;
      function transformNode(
         This : access IXMLDOMNode_Interface;
         stylesheet : access Void;
         xmlString : access BSTR
      ) return HRESULT is abstract;
      function selectNodes(
         This : access IXMLDOMNode_Interface;
         queryString : BSTR;
         resultList : access IXMLDOMNodeList_Ptr
      ) return HRESULT is abstract;
      function selectSingleNode(
         This : access IXMLDOMNode_Interface;
         queryString : BSTR;
         resultNode : access LPVOID
      ) return HRESULT is abstract;
      function get_parsed(
         This : access IXMLDOMNode_Interface;
         isParsed : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function get_namespaceURI(
         This : access IXMLDOMNode_Interface;
         namespaceURI : access BSTR
      ) return HRESULT is abstract;
      function get_prefix(
         This : access IXMLDOMNode_Interface;
         prefixString : access BSTR
      ) return HRESULT is abstract;
      function get_baseName(
         This : access IXMLDOMNode_Interface;
         nameString : access BSTR
      ) return HRESULT is abstract;
      function transformNodeToObject(
         This : access IXMLDOMNode_Interface;
         stylesheet : access Void;
         outputObject : VARIANT
      ) return HRESULT is abstract;
   type IXMLDOMNode is access IXMLDOMNode_Interface'Class;
   type IXMLDOMNode_Ptr is access IXMLDOMNode;
   type IXMLDOMDocumentType_Ptr is access all IXMLDOMDocumentType; -- Auto Generated Dependancy
   type IXMLDOMElement_Ptr is access all IXMLDOMElement; -- Auto Generated Dependancy
   type IXMLDOMDocumentFragment_Ptr is access all IXMLDOMDocumentFragment; -- Auto Generated Dependancy
   type IXMLDOMText_Ptr is access all IXMLDOMText; -- Auto Generated Dependancy
   type IXMLDOMComment_Ptr is access all IXMLDOMComment; -- Auto Generated Dependancy
   type IXMLDOMCDATASection_Ptr is access all IXMLDOMCDATASection; -- Auto Generated Dependancy
   type IXMLDOMProcessingInstruction_Ptr is access all IXMLDOMProcessingInstruction; -- Auto Generated Dependancy
   type IXMLDOMAttribute_Ptr is access all IXMLDOMAttribute; -- Auto Generated Dependancy
   type IXMLDOMEntityReference_Ptr is access all IXMLDOMEntityReference; -- Auto Generated Dependancy
   type IXMLDOMParseError_Ptr is access all IXMLDOMParseError; -- Auto Generated Dependancy
   type IXMLDOMDocument_Interface is interface and IXMLDOMNode_Interface;
      function get_doctype(
         This : access IXMLDOMDocument_Interface;
         documentType : access IXMLDOMDocumentType_Ptr
      ) return HRESULT is abstract;
      function get_implementation(
         This : access IXMLDOMDocument_Interface;
         impl : access IXMLDOMImplementation_Ptr
      ) return HRESULT is abstract;
      function get_documentElement(
         This : access IXMLDOMDocument_Interface;
         DOMElement : access IXMLDOMElement_Ptr
      ) return HRESULT is abstract;
      function putref_documentElement(
         This : access IXMLDOMDocument_Interface;
         DOMElement : access IXMLDOMElement
      ) return HRESULT is abstract;
      function createElement(
         This : access IXMLDOMDocument_Interface;
         tagName : BSTR;
         element : access IXMLDOMElement_Ptr
      ) return HRESULT is abstract;
      function createDocumentFragment(
         This : access IXMLDOMDocument_Interface;
         docFrag : access IXMLDOMDocumentFragment_Ptr
      ) return HRESULT is abstract;
      function createTextNode(
         This : access IXMLDOMDocument_Interface;
         data : BSTR;
         text : access IXMLDOMText_Ptr
      ) return HRESULT is abstract;
      function createComment(
         This : access IXMLDOMDocument_Interface;
         data : BSTR;
         comment : access IXMLDOMComment_Ptr
      ) return HRESULT is abstract;
      function createCDATASection(
         This : access IXMLDOMDocument_Interface;
         data : BSTR;
         cdata : access IXMLDOMCDATASection_Ptr
      ) return HRESULT is abstract;
      function createProcessingInstruction(
         This : access IXMLDOMDocument_Interface;
         target : BSTR;
         data : BSTR;
         pi : access IXMLDOMProcessingInstruction_Ptr
      ) return HRESULT is abstract;
      function createAttribute(
         This : access IXMLDOMDocument_Interface;
         name : BSTR;
         attribute : access IXMLDOMAttribute_Ptr
      ) return HRESULT is abstract;
      function createEntityReference(
         This : access IXMLDOMDocument_Interface;
         name : BSTR;
         entityRef : access IXMLDOMEntityReference_Ptr
      ) return HRESULT is abstract;
      function getElementsByTagName(
         This : access IXMLDOMDocument_Interface;
         tagName : BSTR;
         resultList : access IXMLDOMNodeList_Ptr
      ) return HRESULT is abstract;
      function createNode(
         This : access IXMLDOMDocument_Interface;
         type_x : VARIANT;
         name : BSTR;
         namespaceURI : BSTR;
         node : access LPVOID
      ) return HRESULT is abstract;
      function nodeFromID(
         This : access IXMLDOMDocument_Interface;
         idString : BSTR;
         node : access LPVOID
      ) return HRESULT is abstract;
      function load(
         This : access IXMLDOMDocument_Interface;
         xmlSource : VARIANT;
         isSuccessful : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function get_readyState(
         This : access IXMLDOMDocument_Interface;
         value : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_parseError(
         This : access IXMLDOMDocument_Interface;
         errorObj : access IXMLDOMParseError_Ptr
      ) return HRESULT is abstract;
      function get_url(
         This : access IXMLDOMDocument_Interface;
         urlString : access BSTR
      ) return HRESULT is abstract;
      function get_async(
         This : access IXMLDOMDocument_Interface;
         isAsync : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function put_async(
         This : access IXMLDOMDocument_Interface;
         isAsync : VARIANT_BOOL
      ) return HRESULT is abstract;
      function abort_x(This : access IXMLDOMDocument_Interface) return HRESULT is abstract;
      function loadXML(
         This : access IXMLDOMDocument_Interface;
         bstrXML : BSTR;
         isSuccessful : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function save(
         This : access IXMLDOMDocument_Interface;
         destination : VARIANT
      ) return HRESULT is abstract;
      function get_validateOnParse(
         This : access IXMLDOMDocument_Interface;
         isValidating : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function put_validateOnParse(
         This : access IXMLDOMDocument_Interface;
         isValidating : VARIANT_BOOL
      ) return HRESULT is abstract;
      function get_resolveExternals(
         This : access IXMLDOMDocument_Interface;
         isResolving : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function put_resolveExternals(
         This : access IXMLDOMDocument_Interface;
         isResolving : VARIANT_BOOL
      ) return HRESULT is abstract;
      function get_preserveWhiteSpace(
         This : access IXMLDOMDocument_Interface;
         isPreserving : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function put_preserveWhiteSpace(
         This : access IXMLDOMDocument_Interface;
         isPreserving : VARIANT_BOOL
      ) return HRESULT is abstract;
      function put_onreadystatechange(
         This : access IXMLDOMDocument_Interface;
         readystatechangeSink : VARIANT
      ) return HRESULT is abstract;
      function put_ondataavailable(
         This : access IXMLDOMDocument_Interface;
         ondataavailableSink : VARIANT
      ) return HRESULT is abstract;
      function put_ontransformnode(
         This : access IXMLDOMDocument_Interface;
         ontransformnodeSink : VARIANT
      ) return HRESULT is abstract;
   type IXMLDOMDocument is access IXMLDOMDocument_Interface'Class;
   type IXMLDOMNodeList_Interface is interface and IDispatch_Interface;
      function get_item(
         This : access IXMLDOMNodeList_Interface;
         index : Interfaces.C.Long;
         listItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function get_length(
         This : access IXMLDOMNodeList_Interface;
         listLength : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function nextNode(
         This : access IXMLDOMNodeList_Interface;
         nextItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function reset(This : access IXMLDOMNodeList_Interface) return HRESULT is abstract;
      function get_newEnum(
         This : access IXMLDOMNodeList_Interface;
         ppUnk : access LPVOID
      ) return HRESULT is abstract;
   type IXMLDOMNodeList is access IXMLDOMNodeList_Interface'Class;
   type IXMLDOMNamedNodeMap_Interface is interface and IDispatch_Interface;
      function getNamedItem(
         This : access IXMLDOMNamedNodeMap_Interface;
         name : BSTR;
         namedItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function setNamedItem(
         This : access IXMLDOMNamedNodeMap_Interface;
         newItem : access IXMLDOMNode;
         nameItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function removeNamedItem(
         This : access IXMLDOMNamedNodeMap_Interface;
         name : BSTR;
         namedItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function get_item(
         This : access IXMLDOMNamedNodeMap_Interface;
         index : Interfaces.C.Long;
         listItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function get_length(
         This : access IXMLDOMNamedNodeMap_Interface;
         listLength : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function getQualifiedItem(
         This : access IXMLDOMNamedNodeMap_Interface;
         baseName : BSTR;
         namespaceURI : BSTR;
         qualifiedItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function removeQualifiedItem(
         This : access IXMLDOMNamedNodeMap_Interface;
         baseName : BSTR;
         namespaceURI : BSTR;
         qualifiedItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function nextNode(
         This : access IXMLDOMNamedNodeMap_Interface;
         nextItem : access IXMLDOMNode_Ptr
      ) return HRESULT is abstract;
      function reset(This : access IXMLDOMNamedNodeMap_Interface) return HRESULT is abstract;
      function get_newEnum(
         This : access IXMLDOMNamedNodeMap_Interface;
         ppUnk : access LPVOID
      ) return HRESULT is abstract;
   type IXMLDOMNamedNodeMap is access IXMLDOMNamedNodeMap_Interface'Class;
   type IXMLDOMCharacterData_Interface is interface and IXMLDOMNode_Interface;
      function get_data(
         This : access IXMLDOMCharacterData_Interface;
         data : access BSTR
      ) return HRESULT is abstract;
      function put_data(
         This : access IXMLDOMCharacterData_Interface;
         data : BSTR
      ) return HRESULT is abstract;
      function get_length(
         This : access IXMLDOMCharacterData_Interface;
         dataLength : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function substringData(
         This : access IXMLDOMCharacterData_Interface;
         offset : Interfaces.C.Long;
         count : Interfaces.C.Long;
         data : access BSTR
      ) return HRESULT is abstract;
      function appendData(
         This : access IXMLDOMCharacterData_Interface;
         data : BSTR
      ) return HRESULT is abstract;
      function insertData(
         This : access IXMLDOMCharacterData_Interface;
         offset : Interfaces.C.Long;
         data : BSTR
      ) return HRESULT is abstract;
      function deleteData(
         This : access IXMLDOMCharacterData_Interface;
         offset : Interfaces.C.Long;
         count : Interfaces.C.Long
      ) return HRESULT is abstract;
      function replaceData(
         This : access IXMLDOMCharacterData_Interface;
         offset : Interfaces.C.Long;
         count : Interfaces.C.Long;
         data : BSTR
      ) return HRESULT is abstract;
   type IXMLDOMCharacterData is access IXMLDOMCharacterData_Interface'Class;
   type IXMLDOMCharacterData_Ptr is access IXMLDOMCharacterData;
   type IXMLDOMAttribute_Interface is interface and IXMLDOMNode_Interface;
      function get_name(
         This : access IXMLDOMAttribute_Interface;
         attributeName : access BSTR
      ) return HRESULT is abstract;
      function get_value(
         This : access IXMLDOMAttribute_Interface;
         attributeValue : access VARIANT
      ) return HRESULT is abstract;
      function put_value(
         This : access IXMLDOMAttribute_Interface;
         attributeValue : VARIANT
      ) return HRESULT is abstract;
   type IXMLDOMAttribute is access IXMLDOMAttribute_Interface'Class;
   type IXMLDOMElement_Interface is interface and IXMLDOMNode_Interface;
      function get_tagName(
         This : access IXMLDOMElement_Interface;
         tagName : access BSTR
      ) return HRESULT is abstract;
      function getAttribute(
         This : access IXMLDOMElement_Interface;
         name : BSTR;
         value : access VARIANT
      ) return HRESULT is abstract;
      function setAttribute(
         This : access IXMLDOMElement_Interface;
         name : BSTR;
         value : VARIANT
      ) return HRESULT is abstract;
      function removeAttribute(
         This : access IXMLDOMElement_Interface;
         name : BSTR
      ) return HRESULT is abstract;
      function getAttributeNode(
         This : access IXMLDOMElement_Interface;
         name : BSTR;
         attributeNode : access IXMLDOMAttribute_Ptr
      ) return HRESULT is abstract;
      function setAttributeNode(
         This : access IXMLDOMElement_Interface;
         DOMAttribute : access IXMLDOMAttribute;
         attributeNode : access IXMLDOMAttribute_Ptr
      ) return HRESULT is abstract;
      function removeAttributeNode(
         This : access IXMLDOMElement_Interface;
         DOMAttribute : access IXMLDOMAttribute;
         attributeNode : access IXMLDOMAttribute_Ptr
      ) return HRESULT is abstract;
      function getElementsByTagName(
         This : access IXMLDOMElement_Interface;
         tagName : BSTR;
         resultList : access IXMLDOMNodeList_Ptr
      ) return HRESULT is abstract;
      function normalize(This : access IXMLDOMElement_Interface) return HRESULT is abstract;
   type IXMLDOMElement is access IXMLDOMElement_Interface'Class;
   type IXMLDOMText_Interface is interface and IXMLDOMCharacterData_Interface;
      function splitText(
         This : access IXMLDOMText_Interface;
         offset : Interfaces.C.Long;
         rightHandTextNode : access LPVOID
      ) return HRESULT is abstract;
   type IXMLDOMText is access IXMLDOMText_Interface'Class;
   type IXMLDOMProcessingInstruction_Interface is interface and IXMLDOMNode_Interface;
      function get_target(
         This : access IXMLDOMProcessingInstruction_Interface;
         name : access BSTR
      ) return HRESULT is abstract;
      function get_data(
         This : access IXMLDOMProcessingInstruction_Interface;
         value : access BSTR
      ) return HRESULT is abstract;
      function put_data(
         This : access IXMLDOMProcessingInstruction_Interface;
         value : BSTR
      ) return HRESULT is abstract;
   type IXMLDOMProcessingInstruction is access IXMLDOMProcessingInstruction_Interface'Class;
   type IXMLDOMDocumentType_Interface is interface and IXMLDOMNode_Interface;
      function get_name(
         This : access IXMLDOMDocumentType_Interface;
         rootName : access BSTR
      ) return HRESULT is abstract;
      function get_entities(
         This : access IXMLDOMDocumentType_Interface;
         entityMap : access IXMLDOMNamedNodeMap_Ptr
      ) return HRESULT is abstract;
      function get_notations(
         This : access IXMLDOMDocumentType_Interface;
         notationMap : access IXMLDOMNamedNodeMap_Ptr
      ) return HRESULT is abstract;
   type IXMLDOMDocumentType is access IXMLDOMDocumentType_Interface'Class;
   type IXMLDOMNotation_Interface is interface and IXMLDOMNode_Interface;
      function get_publicId(
         This : access IXMLDOMNotation_Interface;
         publicID : access VARIANT
      ) return HRESULT is abstract;
      function get_systemId(
         This : access IXMLDOMNotation_Interface;
         systemID : access VARIANT
      ) return HRESULT is abstract;
   type IXMLDOMNotation is access IXMLDOMNotation_Interface'Class;
   type IXMLDOMNotation_Ptr is access IXMLDOMNotation;
   type IXMLDOMEntity_Interface is interface and IXMLDOMNode_Interface;
      function get_publicId(
         This : access IXMLDOMEntity_Interface;
         publicID : access VARIANT
      ) return HRESULT is abstract;
      function get_systemId(
         This : access IXMLDOMEntity_Interface;
         systemID : access VARIANT
      ) return HRESULT is abstract;
      function get_notationName(
         This : access IXMLDOMEntity_Interface;
         name : access BSTR
      ) return HRESULT is abstract;
   type IXMLDOMEntity is access IXMLDOMEntity_Interface'Class;
   type IXMLDOMEntity_Ptr is access IXMLDOMEntity;
   type IXMLDOMParseError_Interface is interface and IDispatch_Interface;
      function get_errorCode(
         This : access IXMLDOMParseError_Interface;
         errorCode : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_url(
         This : access IXMLDOMParseError_Interface;
         urlString : access BSTR
      ) return HRESULT is abstract;
      function get_reason(
         This : access IXMLDOMParseError_Interface;
         reasonString : access BSTR
      ) return HRESULT is abstract;
      function get_srcText(
         This : access IXMLDOMParseError_Interface;
         sourceString : access BSTR
      ) return HRESULT is abstract;
      function get_line(
         This : access IXMLDOMParseError_Interface;
         lineNumber : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_linepos(
         This : access IXMLDOMParseError_Interface;
         linePosition : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_filepos(
         This : access IXMLDOMParseError_Interface;
         filePosition : access Interfaces.C.Long
      ) return HRESULT is abstract;
   type IXMLDOMParseError is access IXMLDOMParseError_Interface'Class;
   type IXTLRuntime_Interface is interface and IXMLDOMNode_Interface;
      function uniqueID(
         This : access IXTLRuntime_Interface;
         pNode : access Void;
         pID : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function depth(
         This : access IXTLRuntime_Interface;
         pNode : access Void;
         pDepth : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function childNumber(
         This : access IXTLRuntime_Interface;
         pNode : access Void;
         pNumber : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function ancestorChildNumber(
         This : access IXTLRuntime_Interface;
         bstrNodeName : BSTR;
         pNode : access Void;
         pNumber : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function absoluteChildNumber(
         This : access IXTLRuntime_Interface;
         pNode : access Void;
         pNumber : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function formatIndex(
         This : access IXTLRuntime_Interface;
         lIndex : Interfaces.C.Long;
         bstrFormat : BSTR;
         pbstrFormattedString : access BSTR
      ) return HRESULT is abstract;
      function formatNumber(
         This : access IXTLRuntime_Interface;
         dblNumber : Long_Float;
         bstrFormat : BSTR;
         pbstrFormattedString : access BSTR
      ) return HRESULT is abstract;
      function formatDate(
         This : access IXTLRuntime_Interface;
         varDate : VARIANT;
         bstrFormat : BSTR;
         varDestLocale : VARIANT;
         pbstrFormattedString : access BSTR
      ) return HRESULT is abstract;
      function formatTime(
         This : access IXTLRuntime_Interface;
         varTime : VARIANT;
         bstrFormat : BSTR;
         varDestLocale : VARIANT;
         pbstrFormattedString : access BSTR
      ) return HRESULT is abstract;
   type IXTLRuntime is access IXTLRuntime_Interface'Class;
   type IXTLRuntime_Ptr is access IXTLRuntime;
   type IXMLHttpRequest_Interface is interface and IDispatch_Interface;
      function open(
         This : access IXMLHttpRequest_Interface;
         bstrMethod : BSTR;
         bstrUrl : BSTR;
         varAsync : VARIANT;
         bstrUser : VARIANT;
         bstrPassword : VARIANT
      ) return HRESULT is abstract;
      function setRequestHeader(
         This : access IXMLHttpRequest_Interface;
         bstrHeader : BSTR;
         bstrValue : BSTR
      ) return HRESULT is abstract;
      function getResponseHeader(
         This : access IXMLHttpRequest_Interface;
         bstrHeader : BSTR;
         pbstrValue : access BSTR
      ) return HRESULT is abstract;
      function getAllResponseHeaders(
         This : access IXMLHttpRequest_Interface;
         pbstrHeaders : access BSTR
      ) return HRESULT is abstract;
      function send(
         This : access IXMLHttpRequest_Interface;
         varBody : VARIANT
      ) return HRESULT is abstract;
      function abort_x(This : access IXMLHttpRequest_Interface) return HRESULT is abstract;
      function get_status(
         This : access IXMLHttpRequest_Interface;
         plStatus : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_statusText(
         This : access IXMLHttpRequest_Interface;
         pbstrStatus : access BSTR
      ) return HRESULT is abstract;
      function get_responseXML(
         This : access IXMLHttpRequest_Interface;
         ppBody : access LPVOID
      ) return HRESULT is abstract;
      function get_responseText(
         This : access IXMLHttpRequest_Interface;
         pbstrBody : access BSTR
      ) return HRESULT is abstract;
      function get_responseBody(
         This : access IXMLHttpRequest_Interface;
         pvarBody : access VARIANT
      ) return HRESULT is abstract;
      function get_responseStream(
         This : access IXMLHttpRequest_Interface;
         pvarBody : access VARIANT
      ) return HRESULT is abstract;
      function get_readyState(
         This : access IXMLHttpRequest_Interface;
         plState : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function put_onreadystatechange(
         This : access IXMLHttpRequest_Interface;
         pReadyStateSink : access Void
      ) return HRESULT is abstract;
   type IXMLHttpRequest is access IXMLHttpRequest_Interface'Class;
   type IXMLHttpRequest_Ptr is access IXMLHttpRequest;
   type IXMLDSOControl_Interface is interface and IDispatch_Interface;
      function get_XMLDocument(
         This : access IXMLDSOControl_Interface;
         ppDoc : access IXMLDOMDocument_Ptr
      ) return HRESULT is abstract;
      function put_XMLDocument(
         This : access IXMLDSOControl_Interface;
         ppDoc : access IXMLDOMDocument
      ) return HRESULT is abstract;
      function get_JavaDSOCompatible(
         This : access IXMLDSOControl_Interface;
         fJavaDSOCompatible : access BOOL
      ) return HRESULT is abstract;
      function put_JavaDSOCompatible(
         This : access IXMLDSOControl_Interface;
         fJavaDSOCompatible : BOOL
      ) return HRESULT is abstract;
      function get_readyState(
         This : access IXMLDSOControl_Interface;
         state : access Interfaces.C.Long
      ) return HRESULT is abstract;
   type IXMLDSOControl is access IXMLDSOControl_Interface'Class;
   type IXMLDSOControl_Ptr is access IXMLDSOControl;
   type IXMLElementCollection_Interface is interface and IDispatch_Interface;
      function put_length(
         This : access IXMLElementCollection_Interface;
         v : Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_length(
         This : access IXMLElementCollection_Interface;
         p : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_newEnum(
         This : access IXMLElementCollection_Interface;
         ppUnk : access LPVOID
      ) return HRESULT is abstract;
      function item(
         This : access IXMLElementCollection_Interface;
         var1 : VARIANT;
         var2 : VARIANT;
         ppDisp : access LPVOID
      ) return HRESULT is abstract;
   type IXMLElementCollection is access IXMLElementCollection_Interface'Class;
   type IXMLElementCollection_Ptr is access IXMLElementCollection;
   type IXMLElement_Ptr is access all IXMLElement; -- Auto Generated Dependancy
   type IXMLDocument_Interface is interface and IDispatch_Interface;
      function get_root(
         This : access IXMLDocument_Interface;
         p : access IXMLElement_Ptr
      ) return HRESULT is abstract;
      function get_fileSize(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_fileModifiedDate(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_fileUpdatedDate(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_URL(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_URL(
         This : access IXMLDocument_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function get_mimeType(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_readyState(
         This : access IXMLDocument_Interface;
         pl : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_charset(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_charset(
         This : access IXMLDocument_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function get_version(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_doctype(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_dtdURL(
         This : access IXMLDocument_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function createElement(
         This : access IXMLDocument_Interface;
         vType : VARIANT;
         var1 : VARIANT;
         ppElem : access IXMLElement_Ptr
      ) return HRESULT is abstract;
   type IXMLDocument is access IXMLDocument_Interface'Class;
   type IXMLDocument_Ptr is access IXMLDocument;
   type IXMLElement2_Ptr is access all IXMLElement2; -- Auto Generated Dependancy
   type IXMLDocument2_Interface is interface and IDispatch_Interface;
      function get_root(
         This : access IXMLDocument2_Interface;
         p : access IXMLElement2_Ptr
      ) return HRESULT is abstract;
      function get_fileSize(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_fileModifiedDate(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_fileUpdatedDate(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_URL(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_URL(
         This : access IXMLDocument2_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function get_mimeType(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_readyState(
         This : access IXMLDocument2_Interface;
         pl : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_charset(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_charset(
         This : access IXMLDocument2_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function get_version(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_doctype(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function get_dtdURL(
         This : access IXMLDocument2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function createElement(
         This : access IXMLDocument2_Interface;
         vType : VARIANT;
         var1 : VARIANT;
         ppElem : access IXMLElement2_Ptr
      ) return HRESULT is abstract;
      function get_async(
         This : access IXMLDocument2_Interface;
         pf : access VARIANT_BOOL
      ) return HRESULT is abstract;
      function put_async(
         This : access IXMLDocument2_Interface;
         f : VARIANT_BOOL
      ) return HRESULT is abstract;
   type IXMLDocument2 is access IXMLDocument2_Interface'Class;
   type IXMLDocument2_Ptr is access IXMLDocument2;
   type IXMLElement_Interface is interface and IDispatch_Interface;
      function get_tagName(
         This : access IXMLElement_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_tagName(
         This : access IXMLElement_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function get_parent(
         This : access IXMLElement_Interface;
         ppParent : access LPVOID
      ) return HRESULT is abstract;
      function setAttribute(
         This : access IXMLElement_Interface;
         strPropertyName : BSTR;
         PropertyValue : VARIANT
      ) return HRESULT is abstract;
      function getAttribute(
         This : access IXMLElement_Interface;
         strPropertyName : BSTR;
         PropertyValue : access VARIANT
      ) return HRESULT is abstract;
      function removeAttribute(
         This : access IXMLElement_Interface;
         strPropertyName : BSTR
      ) return HRESULT is abstract;
      function get_children(
         This : access IXMLElement_Interface;
         pp : access IXMLElementCollection_Ptr
      ) return HRESULT is abstract;
      function get_type(
         This : access IXMLElement_Interface;
         plType : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_text(
         This : access IXMLElement_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_text(
         This : access IXMLElement_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function addChild(
         This : access IXMLElement_Interface;
         pChildElem : access Void;
         lIndex : Interfaces.C.Long;
         lReserved : Interfaces.C.Long
      ) return HRESULT is abstract;
      function removeChild(
         This : access IXMLElement_Interface;
         pChildElem : access Void
      ) return HRESULT is abstract;
   type IXMLElement is access IXMLElement_Interface'Class;
   type IXMLElement2_Interface is interface and IDispatch_Interface;
      function get_tagName(
         This : access IXMLElement2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_tagName(
         This : access IXMLElement2_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function get_parent(
         This : access IXMLElement2_Interface;
         ppParent : access LPVOID
      ) return HRESULT is abstract;
      function setAttribute(
         This : access IXMLElement2_Interface;
         strPropertyName : BSTR;
         PropertyValue : VARIANT
      ) return HRESULT is abstract;
      function getAttribute(
         This : access IXMLElement2_Interface;
         strPropertyName : BSTR;
         PropertyValue : access VARIANT
      ) return HRESULT is abstract;
      function removeAttribute(
         This : access IXMLElement2_Interface;
         strPropertyName : BSTR
      ) return HRESULT is abstract;
      function get_children(
         This : access IXMLElement2_Interface;
         pp : access IXMLElementCollection_Ptr
      ) return HRESULT is abstract;
      function get_type(
         This : access IXMLElement2_Interface;
         plType : access Interfaces.C.Long
      ) return HRESULT is abstract;
      function get_text(
         This : access IXMLElement2_Interface;
         p : access BSTR
      ) return HRESULT is abstract;
      function put_text(
         This : access IXMLElement2_Interface;
         p : BSTR
      ) return HRESULT is abstract;
      function addChild(
         This : access IXMLElement2_Interface;
         pChildElem : access Void;
         lIndex : Interfaces.C.Long;
         lReserved : Interfaces.C.Long
      ) return HRESULT is abstract;
      function removeChild(
         This : access IXMLElement2_Interface;
         pChildElem : access Void
      ) return HRESULT is abstract;
      function get_attributes(
         This : access IXMLElement2_Interface;
         pp : access IXMLElementCollection_Ptr
      ) return HRESULT is abstract;
   type IXMLElement2 is access IXMLElement2_Interface'Class;
   type IXMLAttribute_Interface is interface and IDispatch_Interface;
      function get_name(
         This : access IXMLAttribute_Interface;
         n : access BSTR
      ) return HRESULT is abstract;
      function get_value(
         This : access IXMLAttribute_Interface;
         v : access BSTR
      ) return HRESULT is abstract;
   type IXMLAttribute is access IXMLAttribute_Interface'Class;
   type IXMLAttribute_Ptr is access IXMLAttribute;
   type IXMLError_Interface is interface and IUnknown_Interface;
      function GetErrorInfo(
         This : access IXMLError_Interface;
         pErrorReturn : access XML_ERROR
      ) return HRESULT is abstract;
   type IXMLError is access IXMLError_Interface'Class;
   type IXMLError_Ptr is access IXMLError;
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\urlmon.h>
   function CreateURLMoniker(
      pMkCtx : LPMONIKER;
      szURL : LPCWSTR;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,CreateURLMoniker,"CreateURLMoniker");
   function CreateURLMonikerEx(
      pMkCtx : LPMONIKER;
      szURL : LPCWSTR;
      ppmk : access LPMONIKER;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,CreateURLMonikerEx,"CreateURLMonikerEx");
   function GetClassURL(
      szURL : LPCWSTR;
      pClsID : access CLSID
   ) return HRESULT;
   pragma import (C,GetClassURL,"GetClassURL");
   function CreateAsyncBindCtx(
      reserved : DWORD;
      pBSCb : access IBindStatusCallback;
      pEFetc : access IEnumFORMATETC;
      ppBC : access LPBC
   ) return HRESULT;
   pragma import (C,CreateAsyncBindCtx,"CreateAsyncBindCtx");
   function CreateURLMonikerEx2(
      pMkCtx : LPMONIKER;
      pUri : access IUri;
      ppmk : access LPMONIKER;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,CreateURLMonikerEx2,"CreateURLMonikerEx2");
   function CreateAsyncBindCtxEx(
      pbc : access IBindCtx;
      dwOptions : DWORD;
      pBSCb : access IBindStatusCallback;
      pEnum : access IEnumFORMATETC;
      ppBC : access LPBC;
      reserved : DWORD
   ) return HRESULT;
   pragma import (C,CreateAsyncBindCtxEx,"CreateAsyncBindCtxEx");
   function MkParseDisplayNameEx(
      pbc : access IBindCtx;
      szDisplayName : LPCWSTR;
      pchEaten : access ULONG;
      ppmk : access LPMONIKER
   ) return HRESULT;
   pragma import (C,MkParseDisplayNameEx,"MkParseDisplayNameEx");
   type IBindStatusCallback_Ptr is access all IBindStatusCallback; -- Auto Generated Dependancy
   function RegisterBindStatusCallback(
      pBC : LPBC;
      pBSCb : access IBindStatusCallback;
      ppBSCBPrev : access IBindStatusCallback_Ptr;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,RegisterBindStatusCallback,"RegisterBindStatusCallback");
   function RevokeBindStatusCallback(
      pBC : LPBC;
      pBSCb : access IBindStatusCallback
   ) return HRESULT;
   pragma import (C,RevokeBindStatusCallback,"RevokeBindStatusCallback");
   function GetClassFileOrMime(
      pBC : LPBC;
      szFilename : LPCWSTR;
      pBuffer : LPVOID;
      cbSize : DWORD;
      szMime : LPCWSTR;
      dwReserved : DWORD;
      pclsid : access CLSID
   ) return HRESULT;
   pragma import (C,GetClassFileOrMime,"GetClassFileOrMime");
   function IsValidURL(
      pBC : LPBC;
      szURL : LPCWSTR;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,IsValidURL,"IsValidURL");
   function CoGetClassObjectFromURL(
      rCLASSID : access constant IID;
      szCODE : LPCWSTR;
      dwFileVersionMS : DWORD;
      dwFileVersionLS : DWORD;
      szTYPE : LPCWSTR;
      pBindCtx : LPBINDCTX;
      dwClsContext : DWORD;
      pvReserved : LPVOID;
      riid : access constant IID;
      ppv : access LPVOID
   ) return HRESULT;
   pragma import (C,CoGetClassObjectFromURL,"CoGetClassObjectFromURL");
   function IEInstallScope(
      pdwScope : LPDWORD
   ) return HRESULT;
   pragma import (C,IEInstallScope,"IEInstallScope");
   function FaultInIEFeature(
      hWnd_x : HWND;
      pClassSpec : access uCLSSPEC;
      pQuery : access QUERYCONTEXT;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,FaultInIEFeature,"FaultInIEFeature");
   function GetComponentIDFromCLSSPEC(
      pClassspec : access uCLSSPEC;
      ppszComponentID : access LPSTR
   ) return HRESULT;
   pragma import (C,GetComponentIDFromCLSSPEC,"GetComponentIDFromCLSSPEC");
   function IsAsyncMoniker(
      pmk : access IMoniker
   ) return HRESULT;
   pragma import (C,IsAsyncMoniker,"IsAsyncMoniker");
   type IBinding_Ptr is access all IBinding; -- Auto Generated Dependancy
   function CreateURLBinding(
      lpszUrl : LPCWSTR;
      pbc : access IBindCtx;
      ppBdg : access IBinding_Ptr
   ) return HRESULT;
   pragma import (C,CreateURLBinding,"CreateURLBinding");
   function RegisterMediaTypes(
      ctypes : UINT;
      rgszTypes : access constant LPCSTR;
      rgcfTypes : access CLIPFORMAT
   ) return HRESULT;
   pragma import (C,RegisterMediaTypes,"RegisterMediaTypes");
   function FindMediaType(
      rgszTypes : LPCSTR;
      rgcfTypes : access CLIPFORMAT
   ) return HRESULT;
   pragma import (C,FindMediaType,"FindMediaType");
   function CreateFormatEnumerator(
      cfmtetc : UINT;
      rgfmtetc : access FORMATETC;
      ppenumfmtetc : access LPENUMFORMATETC
   ) return HRESULT;
   pragma import (C,CreateFormatEnumerator,"CreateFormatEnumerator");
   function RegisterFormatEnumerator(
      pBC : LPBC;
      pEFetc : access IEnumFORMATETC;
      reserved : DWORD
   ) return HRESULT;
   pragma import (C,RegisterFormatEnumerator,"RegisterFormatEnumerator");
   function RevokeFormatEnumerator(
      pBC : LPBC;
      pEFetc : access IEnumFORMATETC
   ) return HRESULT;
   pragma import (C,RevokeFormatEnumerator,"RevokeFormatEnumerator");
   function RegisterMediaTypeClass(
      pBC : LPBC;
      ctypes : UINT;
      rgszTypes : access constant LPCSTR;
      rgclsID : access CLSID;
      reserved : DWORD
   ) return HRESULT;
   pragma import (C,RegisterMediaTypeClass,"RegisterMediaTypeClass");
   function FindMediaTypeClass(
      pBC : LPBC;
      szType : LPCSTR;
      pclsID : access CLSID;
      reserved : DWORD
   ) return HRESULT;
   pragma import (C,FindMediaTypeClass,"FindMediaTypeClass");
   function UrlMkSetSessionOption(
      dwOption : DWORD;
      pBuffer : LPVOID;
      dwBufferLength : DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,UrlMkSetSessionOption,"UrlMkSetSessionOption");
   function UrlMkGetSessionOption(
      dwOption : DWORD;
      pBuffer : LPVOID;
      dwBufferLength : DWORD;
      pdwBufferLengthOut : access DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,UrlMkGetSessionOption,"UrlMkGetSessionOption");
   function FindMimeFromData(
      pBC : LPBC;
      pwzUrl : LPCWSTR;
      pBuffer : LPVOID;
      cbSize : DWORD;
      pwzMimeProposed : LPCWSTR;
      dwMimeFlags : DWORD;
      ppwzMimeOut : access LPWSTR;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,FindMimeFromData,"FindMimeFromData");
   function ObtainUserAgentString(
      dwOption : DWORD;
      pszUAOut : LPSTR;
      cbSize : access DWORD
   ) return HRESULT;
   pragma import (C,ObtainUserAgentString,"ObtainUserAgentString");
   function CompareSecurityIds(
      pbSecurityId1 : access BYTE;
      dwLen1 : DWORD;
      pbSecurityId2 : access BYTE;
      dwLen2 : DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CompareSecurityIds,"CompareSecurityIds");
   function CompatFlagsFromClsid(
      pclsid : access CLSID;
      pdwCompatFlags : LPDWORD;
      pdwMiscStatusFlags : LPDWORD
   ) return HRESULT;
   pragma import (C,CompatFlagsFromClsid,"CompatFlagsFromClsid");
   type IEObjectType is (
      IE_EPM_OBJECT_EVENT,
      IE_EPM_OBJECT_MUTEX,
      IE_EPM_OBJECT_SEMAPHORE,
      IE_EPM_OBJECT_SHARED_MEMORY,
      IE_EPM_OBJECT_WAITABLE_TIMER,
      IE_EPM_OBJECT_FILE,
      IE_EPM_OBJECT_NAMED_PIPE,
      IE_EPM_OBJECT_REGISTRY
   );
   for IEObjectType use (
      IE_EPM_OBJECT_EVENT => 0,
      IE_EPM_OBJECT_MUTEX => 1,
      IE_EPM_OBJECT_SEMAPHORE => 2,
      IE_EPM_OBJECT_SHARED_MEMORY => 3,
      IE_EPM_OBJECT_WAITABLE_TIMER => 4,
      IE_EPM_OBJECT_FILE => 5,
      IE_EPM_OBJECT_NAMED_PIPE => 6,
      IE_EPM_OBJECT_REGISTRY => 7
   );
   for IEObjectType'Size use 32;
   function SetAccessForIEAppContainer(
      hObject : HANDLE;
      ieobjecttype_x : IEObjectType;
      dwAccessMask : DWORD
   ) return HRESULT;
   pragma import (C,SetAccessForIEAppContainer,"SetAccessForIEAppContainer");
   type LPPERSISTMONIKER is access IPersistMoniker; -- CXType_Pointer - CXType_Typedef
   type IPersistMoniker_Interface is interface and IUnknown_Interface;
      function GetClassID(
         This : access IPersistMoniker_Interface;
         pClassID : access CLSID
      ) return HRESULT is abstract;
      function IsDirty(This : access IPersistMoniker_Interface) return HRESULT is abstract;
      function Load(
         This : access IPersistMoniker_Interface;
         fFullyAvailable : BOOL;
         pimkName : access IMoniker;
         pibc : LPBC;
         grfMode : DWORD
      ) return HRESULT is abstract;
      function Save(
         This : access IPersistMoniker_Interface;
         pimkName : access IMoniker;
         pbc : LPBC;
         fRemember : BOOL
      ) return HRESULT is abstract;
      function SaveCompleted(
         This : access IPersistMoniker_Interface;
         pimkName : access IMoniker;
         pibc : LPBC
      ) return HRESULT is abstract;
      function GetCurMoniker(
         This : access IPersistMoniker_Interface;
         ppimkName : access LPMONIKER
      ) return HRESULT is abstract;
   type IPersistMoniker is access IPersistMoniker_Interface'Class;
   type IPersistMoniker_Ptr is access IPersistMoniker;
   type LPMONIKERPROP is access IMonikerProp; -- CXType_Pointer - CXType_Typedef
   type MIDL_IMonikerProp_0001_x is (
      MIMETYPEPROP,
      USE_SRC_URL,
      CLASSIDPROP,
      TRUSTEDDOWNLOADPROP,
      POPUPLEVELPROP
   );
   for MIDL_IMonikerProp_0001_x use (
      MIMETYPEPROP => 0,
      USE_SRC_URL => 1,
      CLASSIDPROP => 2,
      TRUSTEDDOWNLOADPROP => 3,
      POPUPLEVELPROP => 4
   );
   for MIDL_IMonikerProp_0001_x'Size use 32;
   subtype MONIKERPROPERTY is MIDL_IMonikerProp_0001_x; -- CXType_Elaborated
   type IMonikerProp_Interface is interface and IUnknown_Interface;
      function PutProperty(
         This : access IMonikerProp_Interface;
         mkp : MONIKERPROPERTY;
         val : LPCWSTR
      ) return HRESULT is abstract;
   type IMonikerProp is access IMonikerProp_Interface'Class;
   type IMonikerProp_Ptr is access IMonikerProp;
   type LPBINDPROTOCOL is access IBindProtocol; -- CXType_Pointer - CXType_Typedef
   type IBindProtocol_Interface is interface and IUnknown_Interface;
      function CreateBinding(
         This : access IBindProtocol_Interface;
         szUrl : LPCWSTR;
         pbc : access IBindCtx;
         ppb : access IBinding_Ptr
      ) return HRESULT is abstract;
   type IBindProtocol is access IBindProtocol_Interface'Class;
   type IBindProtocol_Ptr is access IBindProtocol;
   type LPBINDING is access IBinding; -- CXType_Pointer - CXType_Typedef
   type IBinding_Interface is interface and IUnknown_Interface;
      function abort_x(This : access IBinding_Interface) return HRESULT is abstract;
      function Suspend(This : access IBinding_Interface) return HRESULT is abstract;
      function Resume(This : access IBinding_Interface) return HRESULT is abstract;
      function SetPriority(
         This : access IBinding_Interface;
         nPriority : LONG
      ) return HRESULT is abstract;
      function GetPriority(
         This : access IBinding_Interface;
         pnPriority : access LONG
      ) return HRESULT is abstract;
      function GetBindResult(
         This : access IBinding_Interface;
         pclsidProtocol : access CLSID;
         pdwResult : access DWORD;
         pszResult : access LPOLESTR;
         pdwReserved : access DWORD
      ) return HRESULT is abstract;
   type IBinding is access IBinding_Interface'Class;
   function IBinding_RemoteGetBindResult_Proxy(
      This : access IBinding;
      pclsidProtocol : access CLSID;
      pdwResult : access DWORD;
      pszResult : access LPOLESTR;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,IBinding_RemoteGetBindResult_Proxy,"IBinding_RemoteGetBindResult_Proxy");
   procedure IBinding_RemoteGetBindResult_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBinding_RemoteGetBindResult_Stub,"IBinding_RemoteGetBindResult_Stub");
   type LPBINDSTATUSCALLBACK is access IBindStatusCallback; -- CXType_Pointer - CXType_Typedef
   type MIDL_IBindStatusCallback_0001_x is (
      BINDVERB_GET,
      BINDVERB_POST,
      BINDVERB_PUT,
      BINDVERB_CUSTOM,
      BINDVERB_RESERVED1
   );
   for MIDL_IBindStatusCallback_0001_x use (
      BINDVERB_GET => 0,
      BINDVERB_POST => 1,
      BINDVERB_PUT => 2,
      BINDVERB_CUSTOM => 3,
      BINDVERB_RESERVED1 => 4
   );
   for MIDL_IBindStatusCallback_0001_x'Size use 32;
   subtype BINDVERB is MIDL_IBindStatusCallback_0001_x; -- CXType_Elaborated
   type MIDL_IBindStatusCallback_0002_x is (
      BINDINFOF_URLENCODESTGMEDDATA,
      BINDINFOF_URLENCODEDEXTRAINFO
   );
   for MIDL_IBindStatusCallback_0002_x use (
      BINDINFOF_URLENCODESTGMEDDATA => 1,
      BINDINFOF_URLENCODEDEXTRAINFO => 2
   );
   for MIDL_IBindStatusCallback_0002_x'Size use 32;
   subtype BINDINFOF is MIDL_IBindStatusCallback_0002_x; -- CXType_Elaborated
   type MIDL_IBindStatusCallback_0003_x is (
      BINDF_RESERVED_2,
      BINDF_ASYNCHRONOUS,
      BINDF_ASYNCSTORAGE,
      BINDF_NOPROGRESSIVERENDERING,
      BINDF_OFFLINEOPERATION,
      BINDF_GETNEWESTVERSION,
      BINDF_NOWRITECACHE,
      BINDF_NEEDFILE,
      BINDF_PULLDATA,
      BINDF_IGNORESECURITYPROBLEM,
      BINDF_RESYNCHRONIZE,
      BINDF_HYPERLINK,
      BINDF_NO_UI,
      BINDF_SILENTOPERATION,
      BINDF_PRAGMA_NO_CACHE,
      BINDF_GETCLASSOBJECT,
      BINDF_RESERVED_1,
      BINDF_FREE_THREADED,
      BINDF_DIRECT_READ,
      BINDF_FORMS_SUBMIT,
      BINDF_GETFROMCACHE_IF_NET_FAIL,
      BINDF_FROMURLMON,
      BINDF_FWD_BACK,
      BINDF_PREFERDEFAULTHANDLER,
      BINDF_ENFORCERESTRICTED,
      BINDF_RESERVED_3,
      BINDF_RESERVED_4,
      BINDF_RESERVED_5,
      BINDF_RESERVED_6,
      BINDF_RESERVED_8,
      BINDF_RESERVED_7
   );
   for MIDL_IBindStatusCallback_0003_x use (
      BINDF_RESERVED_2 => -2147483648,
      BINDF_ASYNCHRONOUS => 1,
      BINDF_ASYNCSTORAGE => 2,
      BINDF_NOPROGRESSIVERENDERING => 4,
      BINDF_OFFLINEOPERATION => 8,
      BINDF_GETNEWESTVERSION => 16,
      BINDF_NOWRITECACHE => 32,
      BINDF_NEEDFILE => 64,
      BINDF_PULLDATA => 128,
      BINDF_IGNORESECURITYPROBLEM => 256,
      BINDF_RESYNCHRONIZE => 512,
      BINDF_HYPERLINK => 1024,
      BINDF_NO_UI => 2048,
      BINDF_SILENTOPERATION => 4096,
      BINDF_PRAGMA_NO_CACHE => 8192,
      BINDF_GETCLASSOBJECT => 16384,
      BINDF_RESERVED_1 => 32768,
      BINDF_FREE_THREADED => 65536,
      BINDF_DIRECT_READ => 131072,
      BINDF_FORMS_SUBMIT => 262144,
      BINDF_GETFROMCACHE_IF_NET_FAIL => 524288,
      BINDF_FROMURLMON => 1048576,
      BINDF_FWD_BACK => 2097152,
      BINDF_PREFERDEFAULTHANDLER => 4194304,
      BINDF_ENFORCERESTRICTED => 8388608,
      BINDF_RESERVED_3 => 16777216,
      BINDF_RESERVED_4 => 33554432,
      BINDF_RESERVED_5 => 67108864,
      BINDF_RESERVED_6 => 134217728,
      BINDF_RESERVED_8 => 536870912,
      BINDF_RESERVED_7 => 1073741824
   );
   for MIDL_IBindStatusCallback_0003_x'Size use 32;
   subtype BINDF is MIDL_IBindStatusCallback_0003_x; -- CXType_Elaborated
   type MIDL_IBindStatusCallback_0004_x is (
      URL_ENCODING_NONE,
      URL_ENCODING_ENABLE_UTF8,
      URL_ENCODING_DISABLE_UTF8
   );
   for MIDL_IBindStatusCallback_0004_x use (
      URL_ENCODING_NONE => 0,
      URL_ENCODING_ENABLE_UTF8 => 268435456,
      URL_ENCODING_DISABLE_UTF8 => 536870912
   );
   for MIDL_IBindStatusCallback_0004_x'Size use 32;
   subtype URL_ENCODING is MIDL_IBindStatusCallback_0004_x; -- CXType_Elaborated
   type tagBINDINFO_x is record
      cbSize : ULONG;
      szExtraInfo : LPWSTR;
      stgmedData : STGMEDIUM;
      grfBindInfoF : DWORD;
      dwBindVerb : DWORD;
      szCustomVerb : LPWSTR;
      cbstgmedData : DWORD;
      dwOptions : DWORD;
      dwOptionsFlags : DWORD;
      dwCodePage : DWORD;
      securityAttributes : SECURITY_ATTRIBUTES;
      iid_x : IID;
      pUnk : access IUnknown;
      dwReserved : DWORD;
   end record;
   subtype BINDINFO is tagBINDINFO_x; -- CXType_Elaborated
   type REMSECURITY_ATTRIBUTES_x is record
      nLength : DWORD;
      lpSecurityDescriptor : DWORD;
      bInheritHandle : BOOL;
   end record;
   subtype REMSECURITY_ATTRIBUTES is REMSECURITY_ATTRIBUTES_x; -- CXType_Elaborated
   type PREMSECURITY_ATTRIBUTES is access REMSECURITY_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type LPREMSECURITY_ATTRIBUTES is access REMSECURITY_ATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type tagRemBINDINFO_x is record
      cbSize : ULONG;
      szExtraInfo : LPWSTR;
      grfBindInfoF : DWORD;
      dwBindVerb : DWORD;
      szCustomVerb : LPWSTR;
      cbstgmedData : DWORD;
      dwOptions : DWORD;
      dwOptionsFlags : DWORD;
      dwCodePage : DWORD;
      securityAttributes : REMSECURITY_ATTRIBUTES;
      iid_x : IID;
      pUnk : access IUnknown;
      dwReserved : DWORD;
   end record;
   subtype RemBINDINFO is tagRemBINDINFO_x; -- CXType_Elaborated
   type tagRemFORMATETC is record
      cfFormat : DWORD;
      ptd : DWORD;
      dwAspect : DWORD;
      lindex : LONG;
      tymed_x : DWORD;
   end record;
   subtype RemFORMATETC is tagRemFORMATETC; -- CXType_Elaborated
   type LPREMFORMATETC is access tagRemFORMATETC; -- CXType_Pointer - CXType_Elaborated
   type MIDL_IBindStatusCallback_0005_x is (
      BINDINFO_OPTIONS_SHDOCVW_NAVIGATE,
      BINDINFO_OPTIONS_WININETFLAG,
      BINDINFO_OPTIONS_ENABLE_UTF8,
      BINDINFO_OPTIONS_DISABLE_UTF8,
      BINDINFO_OPTIONS_USE_IE_ENCODING,
      BINDINFO_OPTIONS_BINDTOOBJECT,
      BINDINFO_OPTIONS_SECURITYOPTOUT,
      BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN,
      BINDINFO_OPTIONS_USEBINDSTRINGCREDS,
      BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS,
      BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE,
      BINDINFO_WPC_DOWNLOADBLOCKED,
      BINDINFO_WPC_LOGGING_ENABLED,
      BINDINFO_OPTIONS_ALLOWCONNECTDATA,
      BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS
   );
   for MIDL_IBindStatusCallback_0005_x use (
      BINDINFO_OPTIONS_SHDOCVW_NAVIGATE => -2147483648,
      BINDINFO_OPTIONS_WININETFLAG => 65536,
      BINDINFO_OPTIONS_ENABLE_UTF8 => 131072,
      BINDINFO_OPTIONS_DISABLE_UTF8 => 262144,
      BINDINFO_OPTIONS_USE_IE_ENCODING => 524288,
      BINDINFO_OPTIONS_BINDTOOBJECT => 1048576,
      BINDINFO_OPTIONS_SECURITYOPTOUT => 2097152,
      BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN => 4194304,
      BINDINFO_OPTIONS_USEBINDSTRINGCREDS => 8388608,
      BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS => 16777216,
      BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE => 33554432,
      BINDINFO_WPC_DOWNLOADBLOCKED => 134217728,
      BINDINFO_WPC_LOGGING_ENABLED => 268435456,
      BINDINFO_OPTIONS_ALLOWCONNECTDATA => 536870912,
      BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS => 1073741824
   );
   for MIDL_IBindStatusCallback_0005_x'Size use 32;
   subtype BINDINFO_OPTIONS is MIDL_IBindStatusCallback_0005_x; -- CXType_Elaborated
   type MIDL_IBindStatusCallback_0006_x is (
      BSCF_FIRSTDATANOTIFICATION,
      BSCF_INTERMEDIATEDATANOTIFICATION,
      BSCF_LASTDATANOTIFICATION,
      BSCF_DATAFULLYAVAILABLE,
      BSCF_AVAILABLEDATASIZEUNKNOWN,
      BSCF_SKIPDRAINDATAFORFILEURLS,
      BSCF_64BITLENGTHDOWNLOAD
   );
   for MIDL_IBindStatusCallback_0006_x use (
      BSCF_FIRSTDATANOTIFICATION => 1,
      BSCF_INTERMEDIATEDATANOTIFICATION => 2,
      BSCF_LASTDATANOTIFICATION => 4,
      BSCF_DATAFULLYAVAILABLE => 8,
      BSCF_AVAILABLEDATASIZEUNKNOWN => 16,
      BSCF_SKIPDRAINDATAFORFILEURLS => 32,
      BSCF_64BITLENGTHDOWNLOAD => 64
   );
   for MIDL_IBindStatusCallback_0006_x'Size use 32;
   subtype BSCF is MIDL_IBindStatusCallback_0006_x; -- CXType_Elaborated
   type tagBINDSTATUS is (
      BINDSTATUS_FINDINGRESOURCE,
      BINDSTATUS_CONNECTING,
      BINDSTATUS_REDIRECTING,
      BINDSTATUS_BEGINDOWNLOADDATA,
      BINDSTATUS_DOWNLOADINGDATA,
      BINDSTATUS_ENDDOWNLOADDATA,
      BINDSTATUS_BEGINDOWNLOADCOMPONENTS,
      BINDSTATUS_INSTALLINGCOMPONENTS,
      BINDSTATUS_ENDDOWNLOADCOMPONENTS,
      BINDSTATUS_USINGCACHEDCOPY,
      BINDSTATUS_SENDINGREQUEST,
      BINDSTATUS_CLASSIDAVAILABLE,
      BINDSTATUS_MIMETYPEAVAILABLE,
      BINDSTATUS_CACHEFILENAMEAVAILABLE,
      BINDSTATUS_BEGINSYNCOPERATION,
      BINDSTATUS_ENDSYNCOPERATION,
      BINDSTATUS_BEGINUPLOADDATA,
      BINDSTATUS_UPLOADINGDATA,
      BINDSTATUS_ENDUPLOADDATA,
      BINDSTATUS_PROTOCOLCLASSID,
      BINDSTATUS_ENCODING,
      BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE,
      BINDSTATUS_CLASSINSTALLLOCATION,
      BINDSTATUS_DECODING,
      BINDSTATUS_LOADINGMIMEHANDLER,
      BINDSTATUS_CONTENTDISPOSITIONATTACH,
      BINDSTATUS_FILTERREPORTMIMETYPE,
      BINDSTATUS_CLSIDCANINSTANTIATE,
      BINDSTATUS_IUNKNOWNAVAILABLE,
      BINDSTATUS_DIRECTBIND,
      BINDSTATUS_RAWMIMETYPE,
      BINDSTATUS_PROXYDETECTING,
      BINDSTATUS_ACCEPTRANGES,
      BINDSTATUS_COOKIE_SENT,
      BINDSTATUS_COMPACT_POLICY_RECEIVED,
      BINDSTATUS_COOKIE_SUPPRESSED,
      BINDSTATUS_COOKIE_STATE_UNKNOWN,
      BINDSTATUS_COOKIE_STATE_ACCEPT,
      BINDSTATUS_COOKIE_STATE_REJECT,
      BINDSTATUS_COOKIE_STATE_PROMPT,
      BINDSTATUS_COOKIE_STATE_LEASH,
      BINDSTATUS_COOKIE_STATE_DOWNGRADE,
      BINDSTATUS_POLICY_HREF,
      BINDSTATUS_P3P_HEADER,
      BINDSTATUS_SESSION_COOKIE_RECEIVED,
      BINDSTATUS_PERSISTENT_COOKIE_RECEIVED,
      BINDSTATUS_SESSION_COOKIES_ALLOWED,
      BINDSTATUS_CACHECONTROL,
      BINDSTATUS_CONTENTDISPOSITIONFILENAME,
      BINDSTATUS_MIMETEXTPLAINMISMATCH,
      BINDSTATUS_PUBLISHERAVAILABLE,
      BINDSTATUS_DISPLAYNAMEAVAILABLE,
      BINDSTATUS_SSLUX_NAVBLOCKED,
      BINDSTATUS_SERVER_MIMETYPEAVAILABLE,
      BINDSTATUS_SNIFFED_CLASSIDAVAILABLE,
      BINDSTATUS_64BIT_PROGRESS,
      BINDSTATUS_RESERVED_0,
      BINDSTATUS_RESERVED_1,
      BINDSTATUS_RESERVED_2,
      BINDSTATUS_RESERVED_3,
      BINDSTATUS_RESERVED_4,
      BINDSTATUS_RESERVED_5,
      BINDSTATUS_RESERVED_6,
      BINDSTATUS_RESERVED_7,
      BINDSTATUS_RESERVED_8,
      BINDSTATUS_RESERVED_9,
      BINDSTATUS_RESERVED_A,
      BINDSTATUS_RESERVED_B,
      BINDSTATUS_RESERVED_C,
      BINDSTATUS_RESERVED_D,
      BINDSTATUS_RESERVED_E,
      BINDSTATUS_RESERVED_F,
      BINDSTATUS_RESERVED_10,
      BINDSTATUS_RESERVED_11,
      BINDSTATUS_RESERVED_12,
      BINDSTATUS_RESERVED_13
   );
   for tagBINDSTATUS use (
      BINDSTATUS_FINDINGRESOURCE => 1,
      BINDSTATUS_CONNECTING => 2,
      BINDSTATUS_REDIRECTING => 3,
      BINDSTATUS_BEGINDOWNLOADDATA => 4,
      BINDSTATUS_DOWNLOADINGDATA => 5,
      BINDSTATUS_ENDDOWNLOADDATA => 6,
      BINDSTATUS_BEGINDOWNLOADCOMPONENTS => 7,
      BINDSTATUS_INSTALLINGCOMPONENTS => 8,
      BINDSTATUS_ENDDOWNLOADCOMPONENTS => 9,
      BINDSTATUS_USINGCACHEDCOPY => 10,
      BINDSTATUS_SENDINGREQUEST => 11,
      BINDSTATUS_CLASSIDAVAILABLE => 12,
      BINDSTATUS_MIMETYPEAVAILABLE => 13,
      BINDSTATUS_CACHEFILENAMEAVAILABLE => 14,
      BINDSTATUS_BEGINSYNCOPERATION => 15,
      BINDSTATUS_ENDSYNCOPERATION => 16,
      BINDSTATUS_BEGINUPLOADDATA => 17,
      BINDSTATUS_UPLOADINGDATA => 18,
      BINDSTATUS_ENDUPLOADDATA => 19,
      BINDSTATUS_PROTOCOLCLASSID => 20,
      BINDSTATUS_ENCODING => 21,
      BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE => 22,
      BINDSTATUS_CLASSINSTALLLOCATION => 23,
      BINDSTATUS_DECODING => 24,
      BINDSTATUS_LOADINGMIMEHANDLER => 25,
      BINDSTATUS_CONTENTDISPOSITIONATTACH => 26,
      BINDSTATUS_FILTERREPORTMIMETYPE => 27,
      BINDSTATUS_CLSIDCANINSTANTIATE => 28,
      BINDSTATUS_IUNKNOWNAVAILABLE => 29,
      BINDSTATUS_DIRECTBIND => 30,
      BINDSTATUS_RAWMIMETYPE => 31,
      BINDSTATUS_PROXYDETECTING => 32,
      BINDSTATUS_ACCEPTRANGES => 33,
      BINDSTATUS_COOKIE_SENT => 34,
      BINDSTATUS_COMPACT_POLICY_RECEIVED => 35,
      BINDSTATUS_COOKIE_SUPPRESSED => 36,
      BINDSTATUS_COOKIE_STATE_UNKNOWN => 37,
      BINDSTATUS_COOKIE_STATE_ACCEPT => 38,
      BINDSTATUS_COOKIE_STATE_REJECT => 39,
      BINDSTATUS_COOKIE_STATE_PROMPT => 40,
      BINDSTATUS_COOKIE_STATE_LEASH => 41,
      BINDSTATUS_COOKIE_STATE_DOWNGRADE => 42,
      BINDSTATUS_POLICY_HREF => 43,
      BINDSTATUS_P3P_HEADER => 44,
      BINDSTATUS_SESSION_COOKIE_RECEIVED => 45,
      BINDSTATUS_PERSISTENT_COOKIE_RECEIVED => 46,
      BINDSTATUS_SESSION_COOKIES_ALLOWED => 47,
      BINDSTATUS_CACHECONTROL => 48,
      BINDSTATUS_CONTENTDISPOSITIONFILENAME => 49,
      BINDSTATUS_MIMETEXTPLAINMISMATCH => 50,
      BINDSTATUS_PUBLISHERAVAILABLE => 51,
      BINDSTATUS_DISPLAYNAMEAVAILABLE => 52,
      BINDSTATUS_SSLUX_NAVBLOCKED => 53,
      BINDSTATUS_SERVER_MIMETYPEAVAILABLE => 54,
      BINDSTATUS_SNIFFED_CLASSIDAVAILABLE => 55,
      BINDSTATUS_64BIT_PROGRESS => 56,
      BINDSTATUS_RESERVED_0 => 57,
      BINDSTATUS_RESERVED_1 => 58,
      BINDSTATUS_RESERVED_2 => 59,
      BINDSTATUS_RESERVED_3 => 60,
      BINDSTATUS_RESERVED_4 => 61,
      BINDSTATUS_RESERVED_5 => 62,
      BINDSTATUS_RESERVED_6 => 63,
      BINDSTATUS_RESERVED_7 => 64,
      BINDSTATUS_RESERVED_8 => 65,
      BINDSTATUS_RESERVED_9 => 66,
      BINDSTATUS_RESERVED_A => 67,
      BINDSTATUS_RESERVED_B => 68,
      BINDSTATUS_RESERVED_C => 69,
      BINDSTATUS_RESERVED_D => 70,
      BINDSTATUS_RESERVED_E => 71,
      BINDSTATUS_RESERVED_F => 72,
      BINDSTATUS_RESERVED_10 => 73,
      BINDSTATUS_RESERVED_11 => 74,
      BINDSTATUS_RESERVED_12 => 75,
      BINDSTATUS_RESERVED_13 => 76
   );
   for tagBINDSTATUS'Size use 32;
   subtype BINDSTATUS is tagBINDSTATUS; -- CXType_Elaborated
   type IBindStatusCallback_Interface is interface and IUnknown_Interface;
      function OnStartBinding(
         This : access IBindStatusCallback_Interface;
         dwReserved : DWORD;
         pib : access IBinding
      ) return HRESULT is abstract;
      function GetPriority(
         This : access IBindStatusCallback_Interface;
         pnPriority : access LONG
      ) return HRESULT is abstract;
      function OnLowResource(
         This : access IBindStatusCallback_Interface;
         reserved : DWORD
      ) return HRESULT is abstract;
      function OnProgress(
         This : access IBindStatusCallback_Interface;
         ulProgress : ULONG;
         ulProgressMax : ULONG;
         ulStatusCode : ULONG;
         szStatusText : LPCWSTR
      ) return HRESULT is abstract;
      function OnStopBinding(
         This : access IBindStatusCallback_Interface;
         hresult_x : HRESULT;
         szError : LPCWSTR
      ) return HRESULT is abstract;
      function GetBindInfo(
         This : access IBindStatusCallback_Interface;
         grfBINDF : access DWORD;
         pbindinfo : access BINDINFO
      ) return HRESULT is abstract;
      function OnDataAvailable(
         This : access IBindStatusCallback_Interface;
         grfBSCF : DWORD;
         dwSize : DWORD;
         pformatetc : access FORMATETC;
         pstgmed : access STGMEDIUM
      ) return HRESULT is abstract;
      function OnObjectAvailable(
         This : access IBindStatusCallback_Interface;
         riid : access constant IID;
         punk : access Void
      ) return HRESULT is abstract;
   type IBindStatusCallback is access IBindStatusCallback_Interface'Class;
   function IBindStatusCallback_RemoteGetBindInfo_Proxy(
      This : access IBindStatusCallback;
      grfBINDF : access DWORD;
      pbindinfo : access RemBINDINFO;
      pstgmed : access RemSTGMEDIUM
   ) return HRESULT;
   pragma import (C,IBindStatusCallback_RemoteGetBindInfo_Proxy,"IBindStatusCallback_RemoteGetBindInfo_Proxy");
   procedure IBindStatusCallback_RemoteGetBindInfo_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindStatusCallback_RemoteGetBindInfo_Stub,"IBindStatusCallback_RemoteGetBindInfo_Stub");
   function IBindStatusCallback_RemoteOnDataAvailable_Proxy(
      This : access IBindStatusCallback;
      grfBSCF : DWORD;
      dwSize : DWORD;
      pformatetc : access RemFORMATETC;
      pstgmed : access RemSTGMEDIUM
   ) return HRESULT;
   pragma import (C,IBindStatusCallback_RemoteOnDataAvailable_Proxy,"IBindStatusCallback_RemoteOnDataAvailable_Proxy");
   procedure IBindStatusCallback_RemoteOnDataAvailable_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindStatusCallback_RemoteOnDataAvailable_Stub,"IBindStatusCallback_RemoteOnDataAvailable_Stub");
   type LPBINDSTATUSCALLBACKEX is access IBindStatusCallbackEx; -- CXType_Pointer - CXType_Typedef
   type MIDL_IBindStatusCallbackEx_0001_x is (
      BINDF2_RESERVED_1,
      BINDF2_DISABLEBASICOVERHTTP,
      BINDF2_DISABLEAUTOCOOKIEHANDLING,
      BINDF2_READ_DATA_GREATER_THAN_4GB,
      BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID,
      BINDF2_SETDOWNLOADMODE,
      BINDF2_DISABLE_HTTP_REDIRECT_CACHING,
      BINDF2_KEEP_CALLBACK_MODULE_LOADED,
      BINDF2_ALLOW_PROXY_CRED_PROMPT,
      BINDF2_RESERVED_17,
      BINDF2_RESERVED_16,
      BINDF2_RESERVED_15,
      BINDF2_RESERVED_14,
      BINDF2_RESERVED_13,
      BINDF2_RESERVED_12,
      BINDF2_RESERVED_11,
      BINDF2_RESERVED_10,
      BINDF2_RESERVED_F,
      BINDF2_RESERVED_E,
      BINDF2_RESERVED_D,
      BINDF2_RESERVED_C,
      BINDF2_RESERVED_B,
      BINDF2_RESERVED_A,
      BINDF2_RESERVED_9,
      BINDF2_RESERVED_8,
      BINDF2_RESERVED_7,
      BINDF2_RESERVED_6,
      BINDF2_RESERVED_5,
      BINDF2_RESERVED_4,
      BINDF2_RESERVED_3,
      BINDF2_RESERVED_2
   );
   for MIDL_IBindStatusCallbackEx_0001_x use (
      BINDF2_RESERVED_1 => -2147483648,
      BINDF2_DISABLEBASICOVERHTTP => 1,
      BINDF2_DISABLEAUTOCOOKIEHANDLING => 2,
      BINDF2_READ_DATA_GREATER_THAN_4GB => 4,
      BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID => 8,
      BINDF2_SETDOWNLOADMODE => 32,
      BINDF2_DISABLE_HTTP_REDIRECT_CACHING => 64,
      BINDF2_KEEP_CALLBACK_MODULE_LOADED => 128,
      BINDF2_ALLOW_PROXY_CRED_PROMPT => 256,
      BINDF2_RESERVED_17 => 512,
      BINDF2_RESERVED_16 => 1024,
      BINDF2_RESERVED_15 => 2048,
      BINDF2_RESERVED_14 => 4096,
      BINDF2_RESERVED_13 => 8192,
      BINDF2_RESERVED_12 => 16384,
      BINDF2_RESERVED_11 => 32768,
      BINDF2_RESERVED_10 => 65536,
      BINDF2_RESERVED_F => 131072,
      BINDF2_RESERVED_E => 262144,
      BINDF2_RESERVED_D => 524288,
      BINDF2_RESERVED_C => 1048576,
      BINDF2_RESERVED_B => 2097152,
      BINDF2_RESERVED_A => 4194304,
      BINDF2_RESERVED_9 => 8388608,
      BINDF2_RESERVED_8 => 16777216,
      BINDF2_RESERVED_7 => 33554432,
      BINDF2_RESERVED_6 => 67108864,
      BINDF2_RESERVED_5 => 134217728,
      BINDF2_RESERVED_4 => 268435456,
      BINDF2_RESERVED_3 => 536870912,
      BINDF2_RESERVED_2 => 1073741824
   );
   for MIDL_IBindStatusCallbackEx_0001_x'Size use 32;
   subtype BINDF2 is MIDL_IBindStatusCallbackEx_0001_x; -- CXType_Elaborated
   type IBindStatusCallbackEx_Interface is interface and IBindStatusCallback_Interface;
      function GetBindInfoEx(
         This : access IBindStatusCallbackEx_Interface;
         grfBINDF : access DWORD;
         pbindinfo : access BINDINFO;
         grfBINDF2 : access DWORD;
         pdwReserved : access DWORD
      ) return HRESULT is abstract;
   type IBindStatusCallbackEx is access IBindStatusCallbackEx_Interface'Class;
   type IBindStatusCallbackEx_Ptr is access IBindStatusCallbackEx;
   function IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
      This : access IBindStatusCallbackEx;
      grfBINDF : access DWORD;
      pbindinfo : access RemBINDINFO;
      pstgmed : access RemSTGMEDIUM;
      grfBINDF2 : access DWORD;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy,"IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy");
   procedure IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub,"IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub");
   type LPAUTHENTICATION is access IAuthenticate; -- CXType_Pointer - CXType_Typedef
   type IAuthenticate_Interface is interface and IUnknown_Interface;
      function Authenticate(
         This : access IAuthenticate_Interface;
         phwnd : access HWND;
         pszUsername : access LPWSTR;
         pszPassword : access LPWSTR
      ) return HRESULT is abstract;
   type IAuthenticate is access IAuthenticate_Interface'Class;
   type IAuthenticate_Ptr is access IAuthenticate;
   type LPAUTHENTICATIONEX is access IAuthenticateEx; -- CXType_Pointer - CXType_Typedef
   type MIDL_IAuthenticateEx_0001_x is (
      AUTHENTICATEF_PROXY,
      AUTHENTICATEF_BASIC,
      AUTHENTICATEF_HTTP
   );
   for MIDL_IAuthenticateEx_0001_x use (
      AUTHENTICATEF_PROXY => 1,
      AUTHENTICATEF_BASIC => 2,
      AUTHENTICATEF_HTTP => 4
   );
   for MIDL_IAuthenticateEx_0001_x'Size use 32;
   subtype AUTHENTICATEF is MIDL_IAuthenticateEx_0001_x; -- CXType_Elaborated
   type tagAUTHENTICATEINFO_x is record
      dwFlags : DWORD;
      dwReserved : DWORD;
   end record;
   subtype AUTHENTICATEINFO is tagAUTHENTICATEINFO_x; -- CXType_Elaborated
   type IAuthenticateEx_Interface is interface and IAuthenticate_Interface;
      function AuthenticateEx(
         This : access IAuthenticateEx_Interface;
         phwnd : access HWND;
         pszUsername : access LPWSTR;
         pszPassword : access LPWSTR;
         pauthinfo : access AUTHENTICATEINFO
      ) return HRESULT is abstract;
   type IAuthenticateEx is access IAuthenticateEx_Interface'Class;
   type IAuthenticateEx_Ptr is access IAuthenticateEx;
   type LPHTTPNEGOTIATE is access IHttpNegotiate; -- CXType_Pointer - CXType_Typedef
   type IHttpNegotiate_Interface is interface and IUnknown_Interface;
      function BeginningTransaction(
         This : access IHttpNegotiate_Interface;
         szURL : LPCWSTR;
         szHeaders : LPCWSTR;
         dwReserved : DWORD;
         pszAdditionalHeaders : access LPWSTR
      ) return HRESULT is abstract;
      function OnResponse(
         This : access IHttpNegotiate_Interface;
         dwResponseCode : DWORD;
         szResponseHeaders : LPCWSTR;
         szRequestHeaders : LPCWSTR;
         pszAdditionalRequestHeaders : access LPWSTR
      ) return HRESULT is abstract;
   type IHttpNegotiate is access IHttpNegotiate_Interface'Class;
   type IHttpNegotiate_Ptr is access IHttpNegotiate;
   type LPHTTPNEGOTIATE2 is access IHttpNegotiate2; -- CXType_Pointer - CXType_Typedef
   type IHttpNegotiate2_Interface is interface and IHttpNegotiate_Interface;
      function GetRootSecurityId(
         This : access IHttpNegotiate2_Interface;
         pbSecurityId : access BYTE;
         pcbSecurityId : access DWORD;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
   type IHttpNegotiate2 is access IHttpNegotiate2_Interface'Class;
   type IHttpNegotiate2_Ptr is access IHttpNegotiate2;
   type LPHTTPNEGOTIATE3 is access IHttpNegotiate3; -- CXType_Pointer - CXType_Typedef
   type IHttpNegotiate3_Interface is interface and IHttpNegotiate2_Interface;
      function GetSerializedClientCertContext(
         This : access IHttpNegotiate3_Interface;
         ppbCert : access PBYTE;
         pcbCert : access DWORD
      ) return HRESULT is abstract;
   type IHttpNegotiate3 is access IHttpNegotiate3_Interface'Class;
   type IHttpNegotiate3_Ptr is access IHttpNegotiate3;
   type LPWININETFILESTREAM is access IWinInetFileStream; -- CXType_Pointer - CXType_Typedef
   type IWinInetFileStream_Interface is interface and IUnknown_Interface;
      function SetHandleForUnlock(
         This : access IWinInetFileStream_Interface;
         hWinInetLockHandle : DWORD_PTR;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
      function SetDeleteFile(
         This : access IWinInetFileStream_Interface;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
   type IWinInetFileStream is access IWinInetFileStream_Interface'Class;
   type IWinInetFileStream_Ptr is access IWinInetFileStream;
   type LPWINDOWFORBINDINGUI is access IWindowForBindingUI; -- CXType_Pointer - CXType_Typedef
   type IWindowForBindingUI_Interface is interface and IUnknown_Interface;
      function GetWindow(
         This : access IWindowForBindingUI_Interface;
         rguidReason : access constant GUID;
         phwnd : access HWND
      ) return HRESULT is abstract;
   type IWindowForBindingUI is access IWindowForBindingUI_Interface'Class;
   type IWindowForBindingUI_Ptr is access IWindowForBindingUI;
   type LPCODEINSTALL is access ICodeInstall; -- CXType_Pointer - CXType_Typedef
   type MIDL_ICodeInstall_0001_x is (
      CIP_DISK_FULL,
      CIP_ACCESS_DENIED,
      CIP_NEWER_VERSION_EXISTS,
      CIP_OLDER_VERSION_EXISTS,
      CIP_NAME_CONFLICT,
      CIP_TRUST_VERIFICATION_COMPONENT_MISSING,
      CIP_EXE_SELF_REGISTERATION_TIMEOUT,
      CIP_UNSAFE_TO_ABORT,
      CIP_NEED_REBOOT,
      CIP_NEED_REBOOT_UI_PERMISSION
   );
   for MIDL_ICodeInstall_0001_x use (
      CIP_DISK_FULL => 0,
      CIP_ACCESS_DENIED => 1,
      CIP_NEWER_VERSION_EXISTS => 2,
      CIP_OLDER_VERSION_EXISTS => 3,
      CIP_NAME_CONFLICT => 4,
      CIP_TRUST_VERIFICATION_COMPONENT_MISSING => 5,
      CIP_EXE_SELF_REGISTERATION_TIMEOUT => 6,
      CIP_UNSAFE_TO_ABORT => 7,
      CIP_NEED_REBOOT => 8,
      CIP_NEED_REBOOT_UI_PERMISSION => 9
   );
   for MIDL_ICodeInstall_0001_x'Size use 32;
   subtype CIP_STATUS is MIDL_ICodeInstall_0001_x; -- CXType_Elaborated
   type ICodeInstall_Interface is interface and IWindowForBindingUI_Interface;
      function OnCodeInstallProblem(
         This : access ICodeInstall_Interface;
         ulStatusCode : ULONG;
         szDestination : LPCWSTR;
         szSource : LPCWSTR;
         dwReserved : DWORD
      ) return HRESULT is abstract;
   type ICodeInstall is access ICodeInstall_Interface'Class;
   type ICodeInstall_Ptr is access ICodeInstall;
   type MIDL_IUri_0001_x is (
      Uri_PROPERTY_ABSOLUTE_URI,
      Uri_PROPERTY_AUTHORITY,
      Uri_PROPERTY_DISPLAY_URI,
      Uri_PROPERTY_DOMAIN,
      Uri_PROPERTY_EXTENSION,
      Uri_PROPERTY_FRAGMENT,
      Uri_PROPERTY_HOST,
      Uri_PROPERTY_PASSWORD,
      Uri_PROPERTY_PATH,
      Uri_PROPERTY_PATH_AND_QUERY,
      Uri_PROPERTY_QUERY,
      Uri_PROPERTY_RAW_URI,
      Uri_PROPERTY_SCHEME_NAME,
      Uri_PROPERTY_USER_INFO,
      Uri_PROPERTY_USER_NAME,
      Uri_PROPERTY_HOST_TYPE,
      Uri_PROPERTY_PORT,
      Uri_PROPERTY_SCHEME,
      Uri_PROPERTY_ZONE
   );
   for MIDL_IUri_0001_x use (
      Uri_PROPERTY_ABSOLUTE_URI => 0,
      Uri_PROPERTY_AUTHORITY => 1,
      Uri_PROPERTY_DISPLAY_URI => 2,
      Uri_PROPERTY_DOMAIN => 3,
      Uri_PROPERTY_EXTENSION => 4,
      Uri_PROPERTY_FRAGMENT => 5,
      Uri_PROPERTY_HOST => 6,
      Uri_PROPERTY_PASSWORD => 7,
      Uri_PROPERTY_PATH => 8,
      Uri_PROPERTY_PATH_AND_QUERY => 9,
      Uri_PROPERTY_QUERY => 10,
      Uri_PROPERTY_RAW_URI => 11,
      Uri_PROPERTY_SCHEME_NAME => 12,
      Uri_PROPERTY_USER_INFO => 13,
      Uri_PROPERTY_USER_NAME => 14,
      Uri_PROPERTY_HOST_TYPE => 15,
      Uri_PROPERTY_PORT => 16,
      Uri_PROPERTY_SCHEME => 17,
      Uri_PROPERTY_ZONE => 18
   );
   for MIDL_IUri_0001_x'Size use 32;
   subtype Uri_PROPERTY is MIDL_IUri_0001_x; -- CXType_Elaborated
   type MIDL_IUri_0002_x is (
      Uri_HOST_UNKNOWN,
      Uri_HOST_DNS,
      Uri_HOST_IPV4,
      Uri_HOST_IPV6,
      Uri_HOST_IDN
   );
   for MIDL_IUri_0002_x use (
      Uri_HOST_UNKNOWN => 0,
      Uri_HOST_DNS => 1,
      Uri_HOST_IPV4 => 2,
      Uri_HOST_IPV6 => 3,
      Uri_HOST_IDN => 4
   );
   for MIDL_IUri_0002_x'Size use 32;
   subtype Uri_HOST_TYPE is MIDL_IUri_0002_x; -- CXType_Elaborated
   type IUri_Interface is interface and IUnknown_Interface;
      function GetPropertyBSTR(
         This : access IUri_Interface;
         uriProp : Uri_PROPERTY;
         pbstrProperty : access BSTR;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function GetPropertyLength(
         This : access IUri_Interface;
         uriProp : Uri_PROPERTY;
         pcchProperty : access DWORD;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function GetPropertyDWORD(
         This : access IUri_Interface;
         uriProp : Uri_PROPERTY;
         pdwProperty : access DWORD;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function HasProperty(
         This : access IUri_Interface;
         uriProp : Uri_PROPERTY;
         pfHasProperty : access BOOL
      ) return HRESULT is abstract;
      function GetAbsoluteUri(
         This : access IUri_Interface;
         pbstrAbsoluteUri : access BSTR
      ) return HRESULT is abstract;
      function GetAuthority(
         This : access IUri_Interface;
         pbstrAuthority : access BSTR
      ) return HRESULT is abstract;
      function GetDisplayUri(
         This : access IUri_Interface;
         pbstrDisplayString : access BSTR
      ) return HRESULT is abstract;
      function GetDomain(
         This : access IUri_Interface;
         pbstrDomain : access BSTR
      ) return HRESULT is abstract;
      function GetExtension(
         This : access IUri_Interface;
         pbstrExtension : access BSTR
      ) return HRESULT is abstract;
      function GetFragment(
         This : access IUri_Interface;
         pbstrFragment : access BSTR
      ) return HRESULT is abstract;
      function GetHost(
         This : access IUri_Interface;
         pbstrHost : access BSTR
      ) return HRESULT is abstract;
      function GetPassword(
         This : access IUri_Interface;
         pbstrPassword : access BSTR
      ) return HRESULT is abstract;
      function GetPath(
         This : access IUri_Interface;
         pbstrPath : access BSTR
      ) return HRESULT is abstract;
      function GetPathAndQuery(
         This : access IUri_Interface;
         pbstrPathAndQuery : access BSTR
      ) return HRESULT is abstract;
      function GetQuery(
         This : access IUri_Interface;
         pbstrQuery : access BSTR
      ) return HRESULT is abstract;
      function GetRawUri(
         This : access IUri_Interface;
         pbstrRawUri : access BSTR
      ) return HRESULT is abstract;
      function GetSchemeName(
         This : access IUri_Interface;
         pbstrSchemeName : access BSTR
      ) return HRESULT is abstract;
      function GetUserInfo(
         This : access IUri_Interface;
         pbstrUserInfo : access BSTR
      ) return HRESULT is abstract;
      function GetUserNameA(
         This : access IUri_Interface;
         pbstrUserName : access BSTR
      ) return HRESULT is abstract;
      function GetHostType(
         This : access IUri_Interface;
         pdwHostType : access DWORD
      ) return HRESULT is abstract;
      function GetPort(
         This : access IUri_Interface;
         pdwPort : access DWORD
      ) return HRESULT is abstract;
      function GetScheme(
         This : access IUri_Interface;
         pdwScheme : access DWORD
      ) return HRESULT is abstract;
      function GetZone(
         This : access IUri_Interface;
         pdwZone : access DWORD
      ) return HRESULT is abstract;
      function GetProperties(
         This : access IUri_Interface;
         pdwFlags : LPDWORD
      ) return HRESULT is abstract;
      function IsEqual(
         This : access IUri_Interface;
         pUri : access Void;
         pfEqual : access BOOL
      ) return HRESULT is abstract;
   type IUri is access IUri_Interface'Class;
   type IUri_Ptr is access IUri;
   function CreateUri(
      pwzURI : LPCWSTR;
      dwFlags : DWORD;
      dwReserved : DWORD_PTR;
      ppURI : access IUri_Ptr
   ) return HRESULT;
   pragma import (C,CreateUri,"CreateUri");
   function CreateUriWithFragment(
      pwzURI : LPCWSTR;
      pwzFragment : LPCWSTR;
      dwFlags : DWORD;
      dwReserved : DWORD_PTR;
      ppURI : access IUri_Ptr
   ) return HRESULT;
   pragma import (C,CreateUriWithFragment,"CreateUriWithFragment");
   function CreateUriFromMultiByteString(
      pszANSIInputUri : LPCSTR;
      dwEncodingFlags : DWORD;
      dwCodePage : DWORD;
      dwCreateFlags : DWORD;
      dwReserved : DWORD_PTR;
      ppUri : access IUri_Ptr
   ) return HRESULT;
   pragma import (C,CreateUriFromMultiByteString,"CreateUriFromMultiByteString");
   type IUriContainer_Interface is interface and IUnknown_Interface;
      function GetIUri(
         This : access IUriContainer_Interface;
         ppIUri : access IUri_Ptr
      ) return HRESULT is abstract;
   type IUriContainer is access IUriContainer_Interface'Class;
   type IUriContainer_Ptr is access IUriContainer;
   type IUriBuilder_Interface is interface and IUnknown_Interface;
      function CreateUriSimple(
         This : access IUriBuilder_Interface;
         dwAllowEncodingPropertyMask : DWORD;
         dwReserved : DWORD_PTR;
         ppIUri : access IUri_Ptr
      ) return HRESULT is abstract;
      function CreateUri(
         This : access IUriBuilder_Interface;
         dwCreateFlags : DWORD;
         dwAllowEncodingPropertyMask : DWORD;
         dwReserved : DWORD_PTR;
         ppIUri : access IUri_Ptr
      ) return HRESULT is abstract;
      function CreateUriWithFlags(
         This : access IUriBuilder_Interface;
         dwCreateFlags : DWORD;
         dwUriBuilderFlags : DWORD;
         dwAllowEncodingPropertyMask : DWORD;
         dwReserved : DWORD_PTR;
         ppIUri : access IUri_Ptr
      ) return HRESULT is abstract;
      function GetIUri(
         This : access IUriBuilder_Interface;
         ppIUri : access IUri_Ptr
      ) return HRESULT is abstract;
      function SetIUri(
         This : access IUriBuilder_Interface;
         pIUri : access IUri
      ) return HRESULT is abstract;
      function GetFragment(
         This : access IUriBuilder_Interface;
         pcchFragment : access DWORD;
         ppwzFragment : access LPCWSTR
      ) return HRESULT is abstract;
      function GetHost(
         This : access IUriBuilder_Interface;
         pcchHost : access DWORD;
         ppwzHost : access LPCWSTR
      ) return HRESULT is abstract;
      function GetPassword(
         This : access IUriBuilder_Interface;
         pcchPassword : access DWORD;
         ppwzPassword : access LPCWSTR
      ) return HRESULT is abstract;
      function GetPath(
         This : access IUriBuilder_Interface;
         pcchPath : access DWORD;
         ppwzPath : access LPCWSTR
      ) return HRESULT is abstract;
      function GetPort(
         This : access IUriBuilder_Interface;
         pfHasPort : access BOOL;
         pdwPort : access DWORD
      ) return HRESULT is abstract;
      function GetQuery(
         This : access IUriBuilder_Interface;
         pcchQuery : access DWORD;
         ppwzQuery : access LPCWSTR
      ) return HRESULT is abstract;
      function GetSchemeName(
         This : access IUriBuilder_Interface;
         pcchSchemeName : access DWORD;
         ppwzSchemeName : access LPCWSTR
      ) return HRESULT is abstract;
      function GetUserNameA(
         This : access IUriBuilder_Interface;
         pcchUserName : access DWORD;
         ppwzUserName : access LPCWSTR
      ) return HRESULT is abstract;
      function SetFragment(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function SetHost(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function SetPassword(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function SetPath(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function SetPortA(
         This : access IUriBuilder_Interface;
         fHasPort : BOOL;
         dwNewValue : DWORD
      ) return HRESULT is abstract;
      function SetQuery(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function SetSchemeName(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function SetUserName(
         This : access IUriBuilder_Interface;
         pwzNewValue : LPCWSTR
      ) return HRESULT is abstract;
      function RemoveProperties(
         This : access IUriBuilder_Interface;
         dwPropertyMask : DWORD
      ) return HRESULT is abstract;
      function HasBeenModified(
         This : access IUriBuilder_Interface;
         pfModified : access BOOL
      ) return HRESULT is abstract;
   type IUriBuilder is access IUriBuilder_Interface'Class;
   type IUriBuilder_Ptr is access IUriBuilder;
   type IUriBuilderFactory_Interface is interface and IUnknown_Interface;
      function CreateIUriBuilder(
         This : access IUriBuilderFactory_Interface;
         dwFlags : DWORD;
         dwReserved : DWORD_PTR;
         ppIUriBuilder : access IUriBuilder_Ptr
      ) return HRESULT is abstract;
      function CreateInitializedIUriBuilder(
         This : access IUriBuilderFactory_Interface;
         dwFlags : DWORD;
         dwReserved : DWORD_PTR;
         ppIUriBuilder : access IUriBuilder_Ptr
      ) return HRESULT is abstract;
   type IUriBuilderFactory is access IUriBuilderFactory_Interface'Class;
   type IUriBuilderFactory_Ptr is access IUriBuilderFactory;
   function CreateIUriBuilder(
      pIUri : access IUri;
      dwFlags : DWORD;
      dwReserved : DWORD_PTR;
      ppIUriBuilder : access IUriBuilder_Ptr
   ) return HRESULT;
   pragma import (C,CreateIUriBuilder,"CreateIUriBuilder");
   type LPWININETINFO is access IWinInetInfo; -- CXType_Pointer - CXType_Typedef
   type IWinInetInfo_Interface is interface and IUnknown_Interface;
      function QueryOption(
         This : access IWinInetInfo_Interface;
         dwOption : DWORD;
         pBuffer : LPVOID;
         pcbBuf : access DWORD
      ) return HRESULT is abstract;
   type IWinInetInfo is access IWinInetInfo_Interface'Class;
   type IWinInetInfo_Ptr is access IWinInetInfo;
   function IWinInetInfo_RemoteQueryOption_Proxy(
      This : access IWinInetInfo;
      dwOption : DWORD;
      pBuffer : access BYTE;
      pcbBuf : access DWORD
   ) return HRESULT;
   pragma import (C,IWinInetInfo_RemoteQueryOption_Proxy,"IWinInetInfo_RemoteQueryOption_Proxy");
   procedure IWinInetInfo_RemoteQueryOption_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IWinInetInfo_RemoteQueryOption_Stub,"IWinInetInfo_RemoteQueryOption_Stub");
   type LPHTTPSECURITY is access IHttpSecurity; -- CXType_Pointer - CXType_Typedef
   type IHttpSecurity_Interface is interface and IWindowForBindingUI_Interface;
      function OnSecurityProblem(
         This : access IHttpSecurity_Interface;
         dwProblem : DWORD
      ) return HRESULT is abstract;
   type IHttpSecurity is access IHttpSecurity_Interface'Class;
   type IHttpSecurity_Ptr is access IHttpSecurity;
   type LPWININETHTTPINFO is access IWinInetHttpInfo; -- CXType_Pointer - CXType_Typedef
   type IWinInetHttpInfo_Interface is interface and IWinInetInfo_Interface;
      function QueryInfo(
         This : access IWinInetHttpInfo_Interface;
         dwOption : DWORD;
         pBuffer : LPVOID;
         pcbBuf : access DWORD;
         pdwFlags : access DWORD;
         pdwReserved : access DWORD
      ) return HRESULT is abstract;
   type IWinInetHttpInfo is access IWinInetHttpInfo_Interface'Class;
   type IWinInetHttpInfo_Ptr is access IWinInetHttpInfo;
   function IWinInetHttpInfo_RemoteQueryInfo_Proxy(
      This : access IWinInetHttpInfo;
      dwOption : DWORD;
      pBuffer : access BYTE;
      pcbBuf : access DWORD;
      pdwFlags : access DWORD;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IWinInetHttpInfo_RemoteQueryInfo_Proxy,"IWinInetHttpInfo_RemoteQueryInfo_Proxy");
   procedure IWinInetHttpInfo_RemoteQueryInfo_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IWinInetHttpInfo_RemoteQueryInfo_Stub,"IWinInetHttpInfo_RemoteQueryInfo_Stub");
   type IWinInetHttpTimeouts_Interface is interface and IUnknown_Interface;
      function GetRequestTimeouts(
         This : access IWinInetHttpTimeouts_Interface;
         pdwConnectTimeout : access DWORD;
         pdwSendTimeout : access DWORD;
         pdwReceiveTimeout : access DWORD
      ) return HRESULT is abstract;
   type IWinInetHttpTimeouts is access IWinInetHttpTimeouts_Interface'Class;
   type IWinInetHttpTimeouts_Ptr is access IWinInetHttpTimeouts;
   type LPWININETCACHEHINTS is access IWinInetCacheHints; -- CXType_Pointer - CXType_Typedef
   type IWinInetCacheHints_Interface is interface and IUnknown_Interface;
      function SetCacheExtension(
         This : access IWinInetCacheHints_Interface;
         pwzExt : LPCWSTR;
         pszCacheFile : LPVOID;
         pcbCacheFile : access DWORD;
         pdwWinInetError : access DWORD;
         pdwReserved : access DWORD
      ) return HRESULT is abstract;
   type IWinInetCacheHints is access IWinInetCacheHints_Interface'Class;
   type IWinInetCacheHints_Ptr is access IWinInetCacheHints;
   type LPWININETCACHEHINTS2 is access IWinInetCacheHints2; -- CXType_Pointer - CXType_Typedef
   type IWinInetCacheHints2_Interface is interface and IWinInetCacheHints_Interface;
      function SetCacheExtension2(
         This : access IWinInetCacheHints2_Interface;
         pwzExt : LPCWSTR;
         pwzCacheFile : access WCHAR;
         pcchCacheFile : access DWORD;
         pdwWinInetError : access DWORD;
         pdwReserved : access DWORD
      ) return HRESULT is abstract;
   type IWinInetCacheHints2 is access IWinInetCacheHints2_Interface'Class;
   type IWinInetCacheHints2_Ptr is access IWinInetCacheHints2;
   type LPBINDHOST is access IBindHost; -- CXType_Pointer - CXType_Typedef
   type IBindHost_Interface is interface and IUnknown_Interface;
      function CreateMoniker(
         This : access IBindHost_Interface;
         szName : LPOLESTR;
         pBC : access IBindCtx;
         ppmk : access LPMONIKER;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function MonikerBindToStorage(
         This : access IBindHost_Interface;
         pMk : access IMoniker;
         pBC : access IBindCtx;
         pBSC : access IBindStatusCallback;
         riid : access constant IID;
         ppvObj : access LPVOID
      ) return HRESULT is abstract;
      function MonikerBindToObject(
         This : access IBindHost_Interface;
         pMk : access IMoniker;
         pBC : access IBindCtx;
         pBSC : access IBindStatusCallback;
         riid : access constant IID;
         ppvObj : access LPVOID
      ) return HRESULT is abstract;
   type IBindHost is access IBindHost_Interface'Class;
   type IBindHost_Ptr is access IBindHost;
   function IBindHost_RemoteMonikerBindToStorage_Proxy(
      This : access IBindHost;
      pMk : access IMoniker;
      pBC : access IBindCtx;
      pBSC : access IBindStatusCallback;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IBindHost_RemoteMonikerBindToStorage_Proxy,"IBindHost_RemoteMonikerBindToStorage_Proxy");
   procedure IBindHost_RemoteMonikerBindToStorage_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindHost_RemoteMonikerBindToStorage_Stub,"IBindHost_RemoteMonikerBindToStorage_Stub");
   function IBindHost_RemoteMonikerBindToObject_Proxy(
      This : access IBindHost;
      pMk : access IMoniker;
      pBC : access IBindCtx;
      pBSC : access IBindStatusCallback;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IBindHost_RemoteMonikerBindToObject_Proxy,"IBindHost_RemoteMonikerBindToObject_Proxy");
   procedure IBindHost_RemoteMonikerBindToObject_Stub(
      This : access IRpcStubBuffer;
      pRpcChannelBuffer : access IRpcChannelBuffer;
      pRpcMessage : PRPC_MESSAGE;
      pdwStubPhase : access DWORD
   );
   pragma import (C,IBindHost_RemoteMonikerBindToObject_Stub,"IBindHost_RemoteMonikerBindToObject_Stub");
   function HlinkSimpleNavigateToString(
      szTarget : LPCWSTR;
      szLocation : LPCWSTR;
      szTargetFrameName : LPCWSTR;
      pUnk : access IUnknown;
      pbc : access IBindCtx;
      param6 : access IBindStatusCallback;
      grfHLNF : DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,HlinkSimpleNavigateToString,"HlinkSimpleNavigateToString");
   function HlinkSimpleNavigateToMoniker(
      pmkTarget : access IMoniker;
      szLocation : LPCWSTR;
      szTargetFrameName : LPCWSTR;
      pUnk : access IUnknown;
      pbc : access IBindCtx;
      param6 : access IBindStatusCallback;
      grfHLNF : DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,HlinkSimpleNavigateToMoniker,"HlinkSimpleNavigateToMoniker");
   function URLOpenStreamA(
      param1 : LPUNKNOWN;
      param2 : LPCSTR;
      param3 : DWORD;
      param4 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLOpenStreamA,"URLOpenStreamA");
   function URLOpenStreamW(
      param1 : LPUNKNOWN;
      param2 : LPCWSTR;
      param3 : DWORD;
      param4 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLOpenStreamW,"URLOpenStreamW");
   function URLOpenPullStreamA(
      param1 : LPUNKNOWN;
      param2 : LPCSTR;
      param3 : DWORD;
      param4 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLOpenPullStreamA,"URLOpenPullStreamA");
   function URLOpenPullStreamW(
      param1 : LPUNKNOWN;
      param2 : LPCWSTR;
      param3 : DWORD;
      param4 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLOpenPullStreamW,"URLOpenPullStreamW");
   function URLDownloadToFileA(
      param1 : LPUNKNOWN;
      param2 : LPCSTR;
      param3 : LPCSTR;
      param4 : DWORD;
      param5 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLDownloadToFileA,"URLDownloadToFileA");
   function URLDownloadToFileW(
      param1 : LPUNKNOWN;
      param2 : LPCWSTR;
      param3 : LPCWSTR;
      param4 : DWORD;
      param5 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLDownloadToFileW,"URLDownloadToFileW");
   function URLDownloadToCacheFileA(
      param1 : LPUNKNOWN;
      param2 : LPCSTR;
      param3 : LPSTR;
      cchFileName : DWORD;
      param5 : DWORD;
      param6 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLDownloadToCacheFileA,"URLDownloadToCacheFileA");
   function URLDownloadToCacheFileW(
      param1 : LPUNKNOWN;
      param2 : LPCWSTR;
      param3 : LPWSTR;
      cchFileName : DWORD;
      param5 : DWORD;
      param6 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLDownloadToCacheFileW,"URLDownloadToCacheFileW");
   function URLOpenBlockingStreamA(
      param1 : LPUNKNOWN;
      param2 : LPCSTR;
      param3 : access LPSTREAM;
      param4 : DWORD;
      param5 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLOpenBlockingStreamA,"URLOpenBlockingStreamA");
   function URLOpenBlockingStreamW(
      param1 : LPUNKNOWN;
      param2 : LPCWSTR;
      param3 : access LPSTREAM;
      param4 : DWORD;
      param5 : LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,URLOpenBlockingStreamW,"URLOpenBlockingStreamW");
   function HlinkGoBack(
      pUnk : access IUnknown
   ) return HRESULT;
   pragma import (C,HlinkGoBack,"HlinkGoBack");
   function HlinkGoForward(
      pUnk : access IUnknown
   ) return HRESULT;
   pragma import (C,HlinkGoForward,"HlinkGoForward");
   function HlinkNavigateString(
      pUnk : access IUnknown;
      szTarget : LPCWSTR
   ) return HRESULT;
   pragma import (C,HlinkNavigateString,"HlinkNavigateString");
   function HlinkNavigateMoniker(
      pUnk : access IUnknown;
      pmkTarget : access IMoniker
   ) return HRESULT;
   pragma import (C,HlinkNavigateMoniker,"HlinkNavigateMoniker");
   type LPIINTERNET is access IInternet; -- CXType_Pointer - CXType_Typedef
   type LPIINTERNETBINDINFO is access IInternetBindInfo; -- CXType_Pointer - CXType_Typedef
   type tagBINDSTRING is (
      BINDSTRING_HEADERS,
      BINDSTRING_ACCEPT_MIMES,
      BINDSTRING_EXTRA_URL,
      BINDSTRING_LANGUAGE,
      BINDSTRING_USERNAME,
      BINDSTRING_PASSWORD,
      BINDSTRING_UA_PIXELS,
      BINDSTRING_UA_COLOR,
      BINDSTRING_OS,
      BINDSTRING_USER_AGENT,
      BINDSTRING_ACCEPT_ENCODINGS,
      BINDSTRING_POST_COOKIE,
      BINDSTRING_POST_DATA_MIME,
      BINDSTRING_URL,
      BINDSTRING_IID,
      BINDSTRING_FLAG_BIND_TO_OBJECT,
      BINDSTRING_PTR_BIND_CONTEXT,
      BINDSTRING_XDR_ORIGIN,
      BINDSTRING_DOWNLOADPATH,
      BINDSTRING_ROOTDOC_URL,
      BINDSTRING_INITIAL_FILENAME,
      BINDSTRING_PROXY_USERNAME,
      BINDSTRING_PROXY_PASSWORD,
      BINDSTRING_ENTERPRISE_ID,
      BINDSTRING_DOC_URL
   );
   for tagBINDSTRING use (
      BINDSTRING_HEADERS => 1,
      BINDSTRING_ACCEPT_MIMES => 2,
      BINDSTRING_EXTRA_URL => 3,
      BINDSTRING_LANGUAGE => 4,
      BINDSTRING_USERNAME => 5,
      BINDSTRING_PASSWORD => 6,
      BINDSTRING_UA_PIXELS => 7,
      BINDSTRING_UA_COLOR => 8,
      BINDSTRING_OS => 9,
      BINDSTRING_USER_AGENT => 10,
      BINDSTRING_ACCEPT_ENCODINGS => 11,
      BINDSTRING_POST_COOKIE => 12,
      BINDSTRING_POST_DATA_MIME => 13,
      BINDSTRING_URL => 14,
      BINDSTRING_IID => 15,
      BINDSTRING_FLAG_BIND_TO_OBJECT => 16,
      BINDSTRING_PTR_BIND_CONTEXT => 17,
      BINDSTRING_XDR_ORIGIN => 18,
      BINDSTRING_DOWNLOADPATH => 19,
      BINDSTRING_ROOTDOC_URL => 20,
      BINDSTRING_INITIAL_FILENAME => 21,
      BINDSTRING_PROXY_USERNAME => 22,
      BINDSTRING_PROXY_PASSWORD => 23,
      BINDSTRING_ENTERPRISE_ID => 24,
      BINDSTRING_DOC_URL => 25
   );
   for tagBINDSTRING'Size use 32;
   subtype BINDSTRING is tagBINDSTRING; -- CXType_Elaborated
   type IInternetBindInfo_Interface is interface and IUnknown_Interface;
      function GetBindInfo(
         This : access IInternetBindInfo_Interface;
         grfBINDF : access DWORD;
         pbindinfo : access BINDINFO
      ) return HRESULT is abstract;
      function GetBindString(
         This : access IInternetBindInfo_Interface;
         ulStringType : ULONG;
         ppwzStr : access LPOLESTR;
         cEl : ULONG;
         pcElFetched : access ULONG
      ) return HRESULT is abstract;
   type IInternetBindInfo is access IInternetBindInfo_Interface'Class;
   type IInternetBindInfo_Ptr is access IInternetBindInfo;
   type LPIINTERNETBINDINFOEX is access IInternetBindInfoEx; -- CXType_Pointer - CXType_Typedef
   type IInternetBindInfoEx_Interface is interface and IInternetBindInfo_Interface;
      function GetBindInfoEx(
         This : access IInternetBindInfoEx_Interface;
         grfBINDF : access DWORD;
         pbindinfo : access BINDINFO;
         grfBINDF2 : access DWORD;
         pdwReserved : access DWORD
      ) return HRESULT is abstract;
   type IInternetBindInfoEx is access IInternetBindInfoEx_Interface'Class;
   type IInternetBindInfoEx_Ptr is access IInternetBindInfoEx;
   type LPIINTERNETPROTOCOLROOT is access IInternetProtocolRoot; -- CXType_Pointer - CXType_Typedef
   type tagPI_FLAGS_x is (
      PI_PARSE_URL,
      PI_FILTER_MODE,
      PI_FORCE_ASYNC,
      PI_USE_WORKERTHREAD,
      PI_MIMEVERIFICATION,
      PI_CLSIDLOOKUP,
      PI_DATAPROGRESS,
      PI_SYNCHRONOUS,
      PI_APARTMENTTHREADED,
      PI_CLASSINSTALL,
      PI_PASSONBINDCTX,
      PI_LOADAPPDIRECT,
      PI_NOMIMEHANDLER,
      PD_FORCE_SWITCH,
      PI_PREFERDEFAULTHANDLER
   );
   for tagPI_FLAGS_x use (
      PI_PARSE_URL => 1,
      PI_FILTER_MODE => 2,
      PI_FORCE_ASYNC => 4,
      PI_USE_WORKERTHREAD => 8,
      PI_MIMEVERIFICATION => 16,
      PI_CLSIDLOOKUP => 32,
      PI_DATAPROGRESS => 64,
      PI_SYNCHRONOUS => 128,
      PI_APARTMENTTHREADED => 256,
      PI_CLASSINSTALL => 512,
      PI_PASSONBINDCTX => 8192,
      PI_LOADAPPDIRECT => 16384,
      PI_NOMIMEHANDLER => 32768,
      PD_FORCE_SWITCH => 65536,
      PI_PREFERDEFAULTHANDLER => 131072
   );
   for tagPI_FLAGS_x'Size use 32;
   subtype PI_FLAGS is tagPI_FLAGS_x; -- CXType_Elaborated
   type tagPROTOCOLDATA_x is record
      grfFlags : DWORD;
      dwState : DWORD;
      pData : LPVOID;
      cbData : ULONG;
   end record;
   subtype PROTOCOLDATA is tagPROTOCOLDATA_x; -- CXType_Elaborated
   type tagStartParam_x is record
      iid_x : IID;
      pIBindCtx : access IBindCtx;
      pItf : access IUnknown;
   end record;
   subtype StartParam is tagStartParam_x; -- CXType_Elaborated
   type IInternetProtocolRoot_Interface is interface and IUnknown_Interface;
      function Start(
         This : access IInternetProtocolRoot_Interface;
         szUrl : LPCWSTR;
         pOIProtSink : access IInternetProtocolSink;
         pOIBindInfo : access IInternetBindInfo;
         grfPI : DWORD;
         dwReserved : HANDLE_PTR
      ) return HRESULT is abstract;
      function Continue(
         This : access IInternetProtocolRoot_Interface;
         pProtocolData : access PROTOCOLDATA
      ) return HRESULT is abstract;
      function abort_x(
         This : access IInternetProtocolRoot_Interface;
         hrReason : HRESULT;
         dwOptions : DWORD
      ) return HRESULT is abstract;
      function terminate_x(
         This : access IInternetProtocolRoot_Interface;
         dwOptions : DWORD
      ) return HRESULT is abstract;
      function Suspend(This : access IInternetProtocolRoot_Interface) return HRESULT is abstract;
      function Resume(This : access IInternetProtocolRoot_Interface) return HRESULT is abstract;
   type IInternetProtocolRoot is access IInternetProtocolRoot_Interface'Class;
   type IInternetProtocolRoot_Ptr is access IInternetProtocolRoot;
   type LPIINTERNETPROTOCOL is access IInternetProtocol; -- CXType_Pointer - CXType_Typedef
   type IInternetProtocol_Interface is interface and IInternetProtocolRoot_Interface;
      function Read(
         This : access IInternetProtocol_Interface;
         pv : access Void;
         cb : ULONG;
         pcbRead : access ULONG
      ) return HRESULT is abstract;
      function Seek(
         This : access IInternetProtocol_Interface;
         dlibMove : LARGE_INTEGER;
         dwOrigin : DWORD;
         plibNewPosition : access ULARGE_INTEGER
      ) return HRESULT is abstract;
      function LockRequest(
         This : access IInternetProtocol_Interface;
         dwOptions : DWORD
      ) return HRESULT is abstract;
      function UnlockRequest(This : access IInternetProtocol_Interface) return HRESULT is abstract;
   type IInternetProtocol is access IInternetProtocol_Interface'Class;
   type IInternetProtocol_Ptr is access IInternetProtocol;
   type IInternetProtocolEx_Interface is interface and IInternetProtocol_Interface;
      function StartEx(
         This : access IInternetProtocolEx_Interface;
         pUri : access IUri;
         pOIProtSink : access IInternetProtocolSink;
         pOIBindInfo : access IInternetBindInfo;
         grfPI : DWORD;
         dwReserved : HANDLE_PTR
      ) return HRESULT is abstract;
   type IInternetProtocolEx is access IInternetProtocolEx_Interface'Class;
   type IInternetProtocolEx_Ptr is access IInternetProtocolEx;
   type LPIINTERNETPROTOCOLSINK is access IInternetProtocolSink; -- CXType_Pointer - CXType_Typedef
   type IInternetProtocolSink_Interface is interface and IUnknown_Interface;
      function Switch(
         This : access IInternetProtocolSink_Interface;
         pProtocolData : access PROTOCOLDATA
      ) return HRESULT is abstract;
      function ReportProgress(
         This : access IInternetProtocolSink_Interface;
         ulStatusCode : ULONG;
         szStatusText : LPCWSTR
      ) return HRESULT is abstract;
      function ReportData(
         This : access IInternetProtocolSink_Interface;
         grfBSCF : DWORD;
         ulProgress : ULONG;
         ulProgressMax : ULONG
      ) return HRESULT is abstract;
      function ReportResult(
         This : access IInternetProtocolSink_Interface;
         hrResult : HRESULT;
         dwError : DWORD;
         szResult : LPCWSTR
      ) return HRESULT is abstract;
   type IInternetProtocolSink is access IInternetProtocolSink_Interface'Class;
   type IInternetProtocolSink_Ptr is access IInternetProtocolSink;
   type LPIINTERNETPROTOCOLSINKStackable is access IInternetProtocolSinkStackable; -- CXType_Pointer - CXType_Typedef
   type IInternetProtocolSinkStackable_Interface is interface and IUnknown_Interface;
      function SwitchSink(
         This : access IInternetProtocolSinkStackable_Interface;
         pOIProtSink : access IInternetProtocolSink
      ) return HRESULT is abstract;
      function CommitSwitch(This : access IInternetProtocolSinkStackable_Interface) return HRESULT is abstract;
      function RollbackSwitch(This : access IInternetProtocolSinkStackable_Interface) return HRESULT is abstract;
   type IInternetProtocolSinkStackable is access IInternetProtocolSinkStackable_Interface'Class;
   type IInternetProtocolSinkStackable_Ptr is access IInternetProtocolSinkStackable;
   type LPIINTERNETSESSION is access IInternetSession; -- CXType_Pointer - CXType_Typedef
   type tagOIBDG_FLAGS_x is (
      OIBDG_APARTMENTTHREADED,
      OIBDG_DATAONLY
   );
   for tagOIBDG_FLAGS_x use (
      OIBDG_APARTMENTTHREADED => 256,
      OIBDG_DATAONLY => 4096
   );
   for tagOIBDG_FLAGS_x'Size use 32;
   subtype OIBDG_FLAGS is tagOIBDG_FLAGS_x; -- CXType_Elaborated
   type IInternetSession_Interface is interface and IUnknown_Interface;
      function RegisterNameSpace(
         This : access IInternetSession_Interface;
         pCF : access IClassFactory;
         rclsid : access constant IID;
         pwzProtocol : LPCWSTR;
         cPatterns : ULONG;
         ppwzPatterns : access constant LPCWSTR;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function UnregisterNameSpace(
         This : access IInternetSession_Interface;
         pCF : access IClassFactory;
         pszProtocol : LPCWSTR
      ) return HRESULT is abstract;
      function RegisterMimeFilter(
         This : access IInternetSession_Interface;
         pCF : access IClassFactory;
         rclsid : access constant IID;
         pwzType : LPCWSTR
      ) return HRESULT is abstract;
      function UnregisterMimeFilter(
         This : access IInternetSession_Interface;
         pCF : access IClassFactory;
         pwzType : LPCWSTR
      ) return HRESULT is abstract;
      function CreateBinding(
         This : access IInternetSession_Interface;
         pBC : LPBC;
         szUrl : LPCWSTR;
         pUnkOuter : access Void;
         ppUnk : access LPVOID;
         ppOInetProt : access LPIINTERNETPROTOCOL;
         dwOption : DWORD
      ) return HRESULT is abstract;
      function SetSessionOption(
         This : access IInternetSession_Interface;
         dwOption : DWORD;
         pBuffer : LPVOID;
         dwBufferLength : DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function GetSessionOption(
         This : access IInternetSession_Interface;
         dwOption : DWORD;
         pBuffer : LPVOID;
         pdwBufferLength : access DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
   type IInternetSession is access IInternetSession_Interface'Class;
   type IInternetSession_Ptr is access IInternetSession;
   type LPIINTERNETTHREADSWITCH is access IInternetThreadSwitch; -- CXType_Pointer - CXType_Typedef
   type IInternetThreadSwitch_Interface is interface and IUnknown_Interface;
      function Prepare(This : access IInternetThreadSwitch_Interface) return HRESULT is abstract;
      function Continue(This : access IInternetThreadSwitch_Interface) return HRESULT is abstract;
   type IInternetThreadSwitch is access IInternetThreadSwitch_Interface'Class;
   type IInternetThreadSwitch_Ptr is access IInternetThreadSwitch;
   type LPIINTERNETPRIORITY is access IInternetPriority; -- CXType_Pointer - CXType_Typedef
   type IInternetPriority_Interface is interface and IUnknown_Interface;
      function SetPriority(
         This : access IInternetPriority_Interface;
         nPriority : LONG
      ) return HRESULT is abstract;
      function GetPriority(
         This : access IInternetPriority_Interface;
         pnPriority : access LONG
      ) return HRESULT is abstract;
   type IInternetPriority is access IInternetPriority_Interface'Class;
   type IInternetPriority_Ptr is access IInternetPriority;
   type LPIINTERNETPROTOCOLINFO is access IInternetProtocolInfo; -- CXType_Pointer - CXType_Typedef
   type tagPARSEACTION_x is (
      PARSE_CANONICALIZE,
      PARSE_FRIENDLY,
      PARSE_SECURITY_URL,
      PARSE_ROOTDOCUMENT,
      PARSE_DOCUMENT,
      PARSE_ANCHOR,
      PARSE_ENCODE_IS_UNESCAPE,
      PARSE_DECODE_IS_ESCAPE,
      PARSE_PATH_FROM_URL,
      PARSE_URL_FROM_PATH,
      PARSE_MIME,
      PARSE_SERVER,
      PARSE_SCHEMA,
      PARSE_SITE,
      PARSE_DOMAIN,
      PARSE_LOCATION,
      PARSE_SECURITY_DOMAIN,
      PARSE_ESCAPE,
      PARSE_UNESCAPE
   );
   for tagPARSEACTION_x use (
      PARSE_CANONICALIZE => 1,
      PARSE_FRIENDLY => 2,
      PARSE_SECURITY_URL => 3,
      PARSE_ROOTDOCUMENT => 4,
      PARSE_DOCUMENT => 5,
      PARSE_ANCHOR => 6,
      PARSE_ENCODE_IS_UNESCAPE => 7,
      PARSE_DECODE_IS_ESCAPE => 8,
      PARSE_PATH_FROM_URL => 9,
      PARSE_URL_FROM_PATH => 10,
      PARSE_MIME => 11,
      PARSE_SERVER => 12,
      PARSE_SCHEMA => 13,
      PARSE_SITE => 14,
      PARSE_DOMAIN => 15,
      PARSE_LOCATION => 16,
      PARSE_SECURITY_DOMAIN => 17,
      PARSE_ESCAPE => 18,
      PARSE_UNESCAPE => 19
   );
   for tagPARSEACTION_x'Size use 32;
   subtype PARSEACTION is tagPARSEACTION_x; -- CXType_Elaborated
   type tagPSUACTION_x is (
      PSU_DEFAULT,
      PSU_SECURITY_URL_ONLY
   );
   for tagPSUACTION_x use (
      PSU_DEFAULT => 1,
      PSU_SECURITY_URL_ONLY => 2
   );
   for tagPSUACTION_x'Size use 32;
   subtype PSUACTION is tagPSUACTION_x; -- CXType_Elaborated
   type tagQUERYOPTION_x is (
      QUERY_EXPIRATION_DATE,
      QUERY_TIME_OF_LAST_CHANGE,
      QUERY_CONTENT_ENCODING,
      QUERY_CONTENT_TYPE,
      QUERY_REFRESH,
      QUERY_RECOMBINE,
      QUERY_CAN_NAVIGATE,
      QUERY_USES_NETWORK,
      QUERY_IS_CACHED,
      QUERY_IS_INSTALLEDENTRY,
      QUERY_IS_CACHED_OR_MAPPED,
      QUERY_USES_CACHE,
      QUERY_IS_SECURE,
      QUERY_IS_SAFE,
      QUERY_USES_HISTORYFOLDER,
      QUERY_IS_CACHED_AND_USABLE_OFFLINE
   );
   for tagQUERYOPTION_x use (
      QUERY_EXPIRATION_DATE => 1,
      QUERY_TIME_OF_LAST_CHANGE => 2,
      QUERY_CONTENT_ENCODING => 3,
      QUERY_CONTENT_TYPE => 4,
      QUERY_REFRESH => 5,
      QUERY_RECOMBINE => 6,
      QUERY_CAN_NAVIGATE => 7,
      QUERY_USES_NETWORK => 8,
      QUERY_IS_CACHED => 9,
      QUERY_IS_INSTALLEDENTRY => 10,
      QUERY_IS_CACHED_OR_MAPPED => 11,
      QUERY_USES_CACHE => 12,
      QUERY_IS_SECURE => 13,
      QUERY_IS_SAFE => 14,
      QUERY_USES_HISTORYFOLDER => 15,
      QUERY_IS_CACHED_AND_USABLE_OFFLINE => 16
   );
   for tagQUERYOPTION_x'Size use 32;
   subtype QUERYOPTION is tagQUERYOPTION_x; -- CXType_Elaborated
   type IInternetProtocolInfo_Interface is interface and IUnknown_Interface;
      function ParseUrl(
         This : access IInternetProtocolInfo_Interface;
         pwzUrl : LPCWSTR;
         ParseAction_x : PARSEACTION;
         dwParseFlags : DWORD;
         pwzResult : LPWSTR;
         cchResult : DWORD;
         pcchResult : access DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function CombineUrl(
         This : access IInternetProtocolInfo_Interface;
         pwzBaseUrl : LPCWSTR;
         pwzRelativeUrl : LPCWSTR;
         dwCombineFlags : DWORD;
         pwzResult : LPWSTR;
         cchResult : DWORD;
         pcchResult : access DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function CompareUrl(
         This : access IInternetProtocolInfo_Interface;
         pwzUrl1 : LPCWSTR;
         pwzUrl2 : LPCWSTR;
         dwCompareFlags : DWORD
      ) return HRESULT is abstract;
      function QueryInfo(
         This : access IInternetProtocolInfo_Interface;
         pwzUrl : LPCWSTR;
         OueryOption : QUERYOPTION;
         dwQueryFlags : DWORD;
         pBuffer : LPVOID;
         cbBuffer : DWORD;
         pcbBuf : access DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
   type IInternetProtocolInfo is access IInternetProtocolInfo_Interface'Class;
   type IInternetProtocolInfo_Ptr is access IInternetProtocolInfo;
   function CoInternetParseUrl(
      pwzUrl : LPCWSTR;
      ParseAction_x : PARSEACTION;
      dwFlags : DWORD;
      pszResult : LPWSTR;
      cchResult : DWORD;
      pcchResult : access DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetParseUrl,"CoInternetParseUrl");
   function CoInternetParseIUri(
      pIUri : access IUri;
      ParseAction_x : PARSEACTION;
      dwFlags : DWORD;
      pwzResult : LPWSTR;
      cchResult : DWORD;
      pcchResult : access DWORD;
      dwReserved : DWORD_PTR
   ) return HRESULT;
   pragma import (C,CoInternetParseIUri,"CoInternetParseIUri");
   function CoInternetCombineUrl(
      pwzBaseUrl : LPCWSTR;
      pwzRelativeUrl : LPCWSTR;
      dwCombineFlags : DWORD;
      pszResult : LPWSTR;
      cchResult : DWORD;
      pcchResult : access DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetCombineUrl,"CoInternetCombineUrl");
   function CoInternetCombineUrlEx(
      pBaseUri : access IUri;
      pwzRelativeUrl : LPCWSTR;
      dwCombineFlags : DWORD;
      ppCombinedUri : access IUri_Ptr;
      dwReserved : DWORD_PTR
   ) return HRESULT;
   pragma import (C,CoInternetCombineUrlEx,"CoInternetCombineUrlEx");
   function CoInternetCombineIUri(
      pBaseUri : access IUri;
      pRelativeUri : access IUri;
      dwCombineFlags : DWORD;
      ppCombinedUri : access IUri_Ptr;
      dwReserved : DWORD_PTR
   ) return HRESULT;
   pragma import (C,CoInternetCombineIUri,"CoInternetCombineIUri");
   function CoInternetCompareUrl(
      pwzUrl1 : LPCWSTR;
      pwzUrl2 : LPCWSTR;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetCompareUrl,"CoInternetCompareUrl");
   function CoInternetGetProtocolFlags(
      pwzUrl : LPCWSTR;
      pdwFlags : access DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetGetProtocolFlags,"CoInternetGetProtocolFlags");
   function CoInternetQueryInfo(
      pwzUrl : LPCWSTR;
      QueryOptions : QUERYOPTION;
      dwQueryFlags : DWORD;
      pvBuffer : LPVOID;
      cbBuffer : DWORD;
      pcbBuffer : access DWORD;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetQueryInfo,"CoInternetQueryInfo");
   function CoInternetGetSession(
      dwSessionMode : DWORD;
      ppIInternetSession : access LPIINTERNETSESSION;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetGetSession,"CoInternetGetSession");
   function CoInternetGetSecurityUrl(
      pwszUrl : LPCWSTR;
      ppwszSecUrl : access LPWSTR;
      psuAction_x : PSUACTION;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetGetSecurityUrl,"CoInternetGetSecurityUrl");
   function AsyncInstallDistributionUnit(
      szDistUnit : LPCWSTR;
      szTYPE : LPCWSTR;
      szExt : LPCWSTR;
      dwFileVersionMS : DWORD;
      dwFileVersionLS : DWORD;
      szURL : LPCWSTR;
      pbc : access IBindCtx;
      pvReserved : LPVOID;
      flags : DWORD
   ) return HRESULT;
   pragma import (C,AsyncInstallDistributionUnit,"AsyncInstallDistributionUnit");
   function CoInternetGetSecurityUrlEx(
      pUri : access IUri;
      ppSecUri : access IUri_Ptr;
      psuAction_x : PSUACTION;
      dwReserved : DWORD_PTR
   ) return HRESULT;
   pragma import (C,CoInternetGetSecurityUrlEx,"CoInternetGetSecurityUrlEx");
   type tagINTERNETFEATURELIST_x is (
      FEATURE_OBJECT_CACHING,
      FEATURE_ZONE_ELEVATION,
      FEATURE_MIME_HANDLING,
      FEATURE_MIME_SNIFFING,
      FEATURE_WINDOW_RESTRICTIONS,
      FEATURE_WEBOC_POPUPMANAGEMENT,
      FEATURE_BEHAVIORS,
      FEATURE_DISABLE_MK_PROTOCOL,
      FEATURE_LOCALMACHINE_LOCKDOWN,
      FEATURE_SECURITYBAND,
      FEATURE_RESTRICT_ACTIVEXINSTALL,
      FEATURE_VALIDATE_NAVIGATE_URL,
      FEATURE_RESTRICT_FILEDOWNLOAD,
      FEATURE_ADDON_MANAGEMENT,
      FEATURE_PROTOCOL_LOCKDOWN,
      FEATURE_HTTP_USERNAME_PASSWORD_DISABLE,
      FEATURE_SAFE_BINDTOOBJECT,
      FEATURE_UNC_SAVEDFILECHECK,
      FEATURE_GET_URL_DOM_FILEPATH_UNENCODED,
      FEATURE_TABBED_BROWSING,
      FEATURE_SSLUX,
      FEATURE_DISABLE_NAVIGATION_SOUNDS,
      FEATURE_DISABLE_LEGACY_COMPRESSION,
      FEATURE_FORCE_ADDR_AND_STATUS,
      FEATURE_XMLHTTP,
      FEATURE_DISABLE_TELNET_PROTOCOL,
      FEATURE_FEEDS,
      FEATURE_BLOCK_INPUT_PROMPTS,
      FEATURE_ENTRY_COUNT
   );
   for tagINTERNETFEATURELIST_x use (
      FEATURE_OBJECT_CACHING => 0,
      FEATURE_ZONE_ELEVATION => 1,
      FEATURE_MIME_HANDLING => 2,
      FEATURE_MIME_SNIFFING => 3,
      FEATURE_WINDOW_RESTRICTIONS => 4,
      FEATURE_WEBOC_POPUPMANAGEMENT => 5,
      FEATURE_BEHAVIORS => 6,
      FEATURE_DISABLE_MK_PROTOCOL => 7,
      FEATURE_LOCALMACHINE_LOCKDOWN => 8,
      FEATURE_SECURITYBAND => 9,
      FEATURE_RESTRICT_ACTIVEXINSTALL => 10,
      FEATURE_VALIDATE_NAVIGATE_URL => 11,
      FEATURE_RESTRICT_FILEDOWNLOAD => 12,
      FEATURE_ADDON_MANAGEMENT => 13,
      FEATURE_PROTOCOL_LOCKDOWN => 14,
      FEATURE_HTTP_USERNAME_PASSWORD_DISABLE => 15,
      FEATURE_SAFE_BINDTOOBJECT => 16,
      FEATURE_UNC_SAVEDFILECHECK => 17,
      FEATURE_GET_URL_DOM_FILEPATH_UNENCODED => 18,
      FEATURE_TABBED_BROWSING => 19,
      FEATURE_SSLUX => 20,
      FEATURE_DISABLE_NAVIGATION_SOUNDS => 21,
      FEATURE_DISABLE_LEGACY_COMPRESSION => 22,
      FEATURE_FORCE_ADDR_AND_STATUS => 23,
      FEATURE_XMLHTTP => 24,
      FEATURE_DISABLE_TELNET_PROTOCOL => 25,
      FEATURE_FEEDS => 26,
      FEATURE_BLOCK_INPUT_PROMPTS => 27,
      FEATURE_ENTRY_COUNT => 28
   );
   for tagINTERNETFEATURELIST_x'Size use 32;
   subtype INTERNETFEATURELIST is tagINTERNETFEATURELIST_x; -- CXType_Elaborated
   function CoInternetSetFeatureEnabled(
      FeatureEntry : INTERNETFEATURELIST;
      dwFlags : DWORD;
      fEnable : BOOL
   ) return HRESULT;
   pragma import (C,CoInternetSetFeatureEnabled,"CoInternetSetFeatureEnabled");
   function CoInternetIsFeatureEnabled(
      FeatureEntry : INTERNETFEATURELIST;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetIsFeatureEnabled,"CoInternetIsFeatureEnabled");
   function CoInternetIsFeatureEnabledForUrl(
      FeatureEntry : INTERNETFEATURELIST;
      dwFlags : DWORD;
      szURL : LPCWSTR;
      pSecMgr : access IInternetSecurityManager
   ) return HRESULT;
   pragma import (C,CoInternetIsFeatureEnabledForUrl,"CoInternetIsFeatureEnabledForUrl");
   function CoInternetIsFeatureEnabledForIUri(
      FeatureEntry : INTERNETFEATURELIST;
      dwFlags : DWORD;
      pIUri : access IUri;
      pSecMgr : access IInternetSecurityManagerEx2
   ) return HRESULT;
   pragma import (C,CoInternetIsFeatureEnabledForIUri,"CoInternetIsFeatureEnabledForIUri");
   function CoInternetIsFeatureZoneElevationEnabled(
      szFromURL : LPCWSTR;
      szToURL : LPCWSTR;
      pSecMgr : access IInternetSecurityManager;
      dwFlags : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetIsFeatureZoneElevationEnabled,"CoInternetIsFeatureZoneElevationEnabled");
   function CopyStgMedium(
      pcstgmedSrc : access constant STGMEDIUM;
      pstgmedDest : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,CopyStgMedium,"CopyStgMedium");
   function CopyBindInfo(
      pcbiSrc : access constant BINDINFO;
      pbiDest : access BINDINFO
   ) return HRESULT;
   pragma import (C,CopyBindInfo,"CopyBindInfo");
   procedure ReleaseBindInfo(
      pbindinfo : access BINDINFO
   );
   pragma import (C,ReleaseBindInfo,"ReleaseBindInfo");
   function IEGetUserPrivateNamespaceName return PWSTR;
   pragma import (C,IEGetUserPrivateNamespaceName,"IEGetUserPrivateNamespaceName");
   type IInternetSecurityManager_Ptr is access all IInternetSecurityManager; -- Auto Generated Dependancy
   function CoInternetCreateSecurityManager(
      pSP : access IServiceProvider;
      ppSM : access IInternetSecurityManager_Ptr;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetCreateSecurityManager,"CoInternetCreateSecurityManager");
   type IInternetZoneManager_Ptr is access all IInternetZoneManager; -- Auto Generated Dependancy
   function CoInternetCreateZoneManager(
      pSP : access IServiceProvider;
      ppZM : access IInternetZoneManager_Ptr;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,CoInternetCreateZoneManager,"CoInternetCreateZoneManager");
   type IInternetSecurityMgrSite_Interface is interface and IUnknown_Interface;
      function GetWindow(
         This : access IInternetSecurityMgrSite_Interface;
         phwnd : access HWND
      ) return HRESULT is abstract;
      function EnableModeless(
         This : access IInternetSecurityMgrSite_Interface;
         fEnable : BOOL
      ) return HRESULT is abstract;
   type IInternetSecurityMgrSite is access IInternetSecurityMgrSite_Interface'Class;
   type IInternetSecurityMgrSite_Ptr is access IInternetSecurityMgrSite;
   type MIDL_IInternetSecurityManager_0001_x is (
      PUAF_DEFAULT,
      PUAF_NOUI,
      PUAF_ISFILE,
      PUAF_WARN_IF_DENIED,
      PUAF_FORCEUI_FOREGROUND,
      PUAF_CHECK_TIFS,
      PUAF_DONTCHECKBOXINDIALOG,
      PUAF_TRUSTED,
      PUAF_ACCEPT_WILDCARD_SCHEME,
      PUAF_ENFORCERESTRICTED,
      PUAF_NOSAVEDFILECHECK,
      PUAF_REQUIRESAVEDFILECHECK,
      PUAF_DONT_USE_CACHE,
      PUAF_RESERVED1,
      PUAF_RESERVED2,
      PUAF_LMZ_UNLOCKED,
      PUAF_LMZ_LOCKED,
      PUAF_DEFAULTZONEPOL,
      PUAF_NPL_USE_LOCKED_IF_RESTRICTED,
      PUAF_NOUIIFLOCKED,
      PUAF_DRAGPROTOCOLCHECK
   );
   for MIDL_IInternetSecurityManager_0001_x use (
      PUAF_DEFAULT => 0,
      PUAF_NOUI => 1,
      PUAF_ISFILE => 2,
      PUAF_WARN_IF_DENIED => 4,
      PUAF_FORCEUI_FOREGROUND => 8,
      PUAF_CHECK_TIFS => 16,
      PUAF_DONTCHECKBOXINDIALOG => 32,
      PUAF_TRUSTED => 64,
      PUAF_ACCEPT_WILDCARD_SCHEME => 128,
      PUAF_ENFORCERESTRICTED => 256,
      PUAF_NOSAVEDFILECHECK => 512,
      PUAF_REQUIRESAVEDFILECHECK => 1024,
      PUAF_DONT_USE_CACHE => 4096,
      PUAF_RESERVED1 => 8192,
      PUAF_RESERVED2 => 16384,
      PUAF_LMZ_UNLOCKED => 65536,
      PUAF_LMZ_LOCKED => 131072,
      PUAF_DEFAULTZONEPOL => 262144,
      PUAF_NPL_USE_LOCKED_IF_RESTRICTED => 524288,
      PUAF_NOUIIFLOCKED => 1048576,
      PUAF_DRAGPROTOCOLCHECK => 2097152
   );
   for MIDL_IInternetSecurityManager_0001_x'Size use 32;
   subtype PUAF is MIDL_IInternetSecurityManager_0001_x; -- CXType_Elaborated
   type MIDL_IInternetSecurityManager_0002_x is (
      PUAFOUT_DEFAULT,
      PUAFOUT_ISLOCKZONEPOLICY
   );
   for MIDL_IInternetSecurityManager_0002_x use (
      PUAFOUT_DEFAULT => 0,
      PUAFOUT_ISLOCKZONEPOLICY => 1
   );
   for MIDL_IInternetSecurityManager_0002_x'Size use 32;
   subtype PUAFOUT is MIDL_IInternetSecurityManager_0002_x; -- CXType_Elaborated
   type MIDL_IInternetSecurityManager_0003_x is (
      SZM_CREATE,
      SZM_DELETE
   );
   for MIDL_IInternetSecurityManager_0003_x use (
      SZM_CREATE => 0,
      SZM_DELETE => 1
   );
   for MIDL_IInternetSecurityManager_0003_x'Size use 32;
   subtype SZM_FLAGS is MIDL_IInternetSecurityManager_0003_x; -- CXType_Elaborated
   type IInternetSecurityManager_Interface is interface and IUnknown_Interface;
      function SetSecuritySite(
         This : access IInternetSecurityManager_Interface;
         pSite : access IInternetSecurityMgrSite
      ) return HRESULT is abstract;
      function GetSecuritySite(
         This : access IInternetSecurityManager_Interface;
         ppSite : access IInternetSecurityMgrSite_Ptr
      ) return HRESULT is abstract;
      function MapUrlToZone(
         This : access IInternetSecurityManager_Interface;
         pwszUrl : LPCWSTR;
         pdwZone : access DWORD;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function GetSecurityId(
         This : access IInternetSecurityManager_Interface;
         pwszUrl : LPCWSTR;
         pbSecurityId : access BYTE;
         pcbSecurityId : access DWORD;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
      function ProcessUrlAction(
         This : access IInternetSecurityManager_Interface;
         pwszUrl : LPCWSTR;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwFlags : DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function QueryCustomPolicy(
         This : access IInternetSecurityManager_Interface;
         pwszUrl : LPCWSTR;
         guidKey : access constant GUID;
         ppPolicy : access PBYTE;
         pcbPolicy : access DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function SetZoneMapping(
         This : access IInternetSecurityManager_Interface;
         dwZone : DWORD;
         lpszPattern : LPCWSTR;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function GetZoneMappings(
         This : access IInternetSecurityManager_Interface;
         dwZone : DWORD;
         ppenumString : access LPENUMSTRING;
         dwFlags : DWORD
      ) return HRESULT is abstract;
   type IInternetSecurityManager is access IInternetSecurityManager_Interface'Class;
   type IInternetSecurityManagerEx_Interface is interface and IInternetSecurityManager_Interface;
      function ProcessUrlActionEx(
         This : access IInternetSecurityManagerEx_Interface;
         pwszUrl : LPCWSTR;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwFlags : DWORD;
         dwReserved : DWORD;
         pdwOutFlags : access DWORD
      ) return HRESULT is abstract;
   type IInternetSecurityManagerEx is access IInternetSecurityManagerEx_Interface'Class;
   type IInternetSecurityManagerEx_Ptr is access IInternetSecurityManagerEx;
   type IInternetSecurityManagerEx2_Interface is interface and IInternetSecurityManagerEx_Interface;
      function MapUrlToZoneEx2(
         This : access IInternetSecurityManagerEx2_Interface;
         pUri : access IUri;
         pdwZone : access DWORD;
         dwFlags : DWORD;
         ppwszMappedUrl : access LPWSTR;
         pdwOutFlags : access DWORD
      ) return HRESULT is abstract;
      function ProcessUrlActionEx2(
         This : access IInternetSecurityManagerEx2_Interface;
         pUri : access IUri;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwFlags : DWORD;
         dwReserved : DWORD_PTR;
         pdwOutFlags : access DWORD
      ) return HRESULT is abstract;
      function GetSecurityIdEx2(
         This : access IInternetSecurityManagerEx2_Interface;
         pUri : access IUri;
         pbSecurityId : access BYTE;
         pcbSecurityId : access DWORD;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
      function QueryCustomPolicyEx2(
         This : access IInternetSecurityManagerEx2_Interface;
         pUri : access IUri;
         guidKey : access constant GUID;
         ppPolicy : access PBYTE;
         pcbPolicy : access DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
   type IInternetSecurityManagerEx2 is access IInternetSecurityManagerEx2_Interface'Class;
   type IInternetSecurityManagerEx2_Ptr is access IInternetSecurityManagerEx2;
   type IZoneIdentifier_Interface is interface and IUnknown_Interface;
      function GetId(
         This : access IZoneIdentifier_Interface;
         pdwZone : access DWORD
      ) return HRESULT is abstract;
      function SetId(
         This : access IZoneIdentifier_Interface;
         dwZone : DWORD
      ) return HRESULT is abstract;
      function Remove(This : access IZoneIdentifier_Interface) return HRESULT is abstract;
   type IZoneIdentifier is access IZoneIdentifier_Interface'Class;
   type IZoneIdentifier_Ptr is access IZoneIdentifier;
   type IZoneIdentifier2_Interface is interface and IZoneIdentifier_Interface;
      function GetLastWriterPackageFamilyName(
         This : access IZoneIdentifier2_Interface;
         packageFamilyName : access LPWSTR
      ) return HRESULT is abstract;
      function SetLastWriterPackageFamilyName(
         This : access IZoneIdentifier2_Interface;
         packageFamilyName : LPCWSTR
      ) return HRESULT is abstract;
      function RemoveLastWriterPackageFamilyName(This : access IZoneIdentifier2_Interface) return HRESULT is abstract;
      function GetAppZoneId(
         This : access IZoneIdentifier2_Interface;
         zone : access DWORD
      ) return HRESULT is abstract;
      function SetAppZoneId(
         This : access IZoneIdentifier2_Interface;
         zone : DWORD
      ) return HRESULT is abstract;
      function RemoveAppZoneId(This : access IZoneIdentifier2_Interface) return HRESULT is abstract;
   type IZoneIdentifier2 is access IZoneIdentifier2_Interface'Class;
   type IZoneIdentifier2_Ptr is access IZoneIdentifier2;
   type IInternetHostSecurityManager_Interface is interface and IUnknown_Interface;
      function GetSecurityId(
         This : access IInternetHostSecurityManager_Interface;
         pbSecurityId : access BYTE;
         pcbSecurityId : access DWORD;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
      function ProcessUrlAction(
         This : access IInternetHostSecurityManager_Interface;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwFlags : DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function QueryCustomPolicy(
         This : access IInternetHostSecurityManager_Interface;
         guidKey : access constant GUID;
         ppPolicy : access PBYTE;
         pcbPolicy : access DWORD;
         pContext_x : access BYTE;
         cbContext : DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
   type IInternetHostSecurityManager is access IInternetHostSecurityManager_Interface'Class;
   type IInternetHostSecurityManager_Ptr is access IInternetHostSecurityManager;
   type LPURLZONEMANAGER is access IInternetZoneManager; -- CXType_Pointer - CXType_Typedef
   type tagURLZONE is (
      URLZONE_INVALID,
      URLZONE_PREDEFINED_MIN,
      URLZONE_INTRANET,
      URLZONE_TRUSTED,
      URLZONE_INTERNET,
      URLZONE_UNTRUSTED,
      URLZONE_PREDEFINED_MAX,
      URLZONE_USER_MIN,
      URLZONE_USER_MAX
   );
   for tagURLZONE use (
      URLZONE_INVALID => -1,
      URLZONE_PREDEFINED_MIN => 0,
      URLZONE_INTRANET => 1,
      URLZONE_TRUSTED => 2,
      URLZONE_INTERNET => 3,
      URLZONE_UNTRUSTED => 4,
      URLZONE_PREDEFINED_MAX => 999,
      URLZONE_USER_MIN => 1000,
      URLZONE_USER_MAX => 10000
   );
   for tagURLZONE'Size use 32;
   subtype URLZONE is tagURLZONE; -- CXType_Elaborated
   type tagURLTEMPLATE is (
      URLTEMPLATE_CUSTOM,
      URLTEMPLATE_PREDEFINED_MIN,
      URLTEMPLATE_MEDLOW,
      URLTEMPLATE_MEDIUM,
      URLTEMPLATE_MEDHIGH,
      URLTEMPLATE_HIGH,
      URLTEMPLATE_PREDEFINED_MAX
   );
   for tagURLTEMPLATE use (
      URLTEMPLATE_CUSTOM => 0,
      URLTEMPLATE_PREDEFINED_MIN => 65536,
      URLTEMPLATE_MEDLOW => 66816,
      URLTEMPLATE_MEDIUM => 69632,
      URLTEMPLATE_MEDHIGH => 70912,
      URLTEMPLATE_HIGH => 73728,
      URLTEMPLATE_PREDEFINED_MAX => 131072
   );
   for tagURLTEMPLATE'Size use 32;
   subtype URLTEMPLATE is tagURLTEMPLATE; -- CXType_Elaborated
   type MIDL_IInternetZoneManager_0001_x is (
      MAX_ZONE_DESCRIPTION,
      MAX_ZONE_PATH
   );
   for MIDL_IInternetZoneManager_0001_x use (
      MAX_ZONE_DESCRIPTION => 200,
      MAX_ZONE_PATH => 260
   );
   for MIDL_IInternetZoneManager_0001_x'Size use 32;
   type MIDL_IInternetZoneManager_0002_x is (
      ZAFLAGS_CUSTOM_EDIT,
      ZAFLAGS_ADD_SITES,
      ZAFLAGS_REQUIRE_VERIFICATION,
      ZAFLAGS_INCLUDE_PROXY_OVERRIDE,
      ZAFLAGS_INCLUDE_INTRANET_SITES,
      ZAFLAGS_NO_UI,
      ZAFLAGS_SUPPORTS_VERIFICATION,
      ZAFLAGS_UNC_AS_INTRANET,
      ZAFLAGS_DETECT_INTRANET,
      ZAFLAGS_USE_LOCKED_ZONES,
      ZAFLAGS_VERIFY_TEMPLATE_SETTINGS,
      ZAFLAGS_NO_CACHE
   );
   for MIDL_IInternetZoneManager_0002_x use (
      ZAFLAGS_CUSTOM_EDIT => 1,
      ZAFLAGS_ADD_SITES => 2,
      ZAFLAGS_REQUIRE_VERIFICATION => 4,
      ZAFLAGS_INCLUDE_PROXY_OVERRIDE => 8,
      ZAFLAGS_INCLUDE_INTRANET_SITES => 16,
      ZAFLAGS_NO_UI => 32,
      ZAFLAGS_SUPPORTS_VERIFICATION => 64,
      ZAFLAGS_UNC_AS_INTRANET => 128,
      ZAFLAGS_DETECT_INTRANET => 256,
      ZAFLAGS_USE_LOCKED_ZONES => 65536,
      ZAFLAGS_VERIFY_TEMPLATE_SETTINGS => 131072,
      ZAFLAGS_NO_CACHE => 262144
   );
   for MIDL_IInternetZoneManager_0002_x'Size use 32;
   subtype ZAFLAGS is MIDL_IInternetZoneManager_0002_x; -- CXType_Elaborated
   type ZONEATTRIBUTES_x is record
      cbSize : ULONG;
      szDisplayName : Void;
      szDescription : Void;
      szIconPath : Void;
      dwTemplateMinLevel : DWORD;
      dwTemplateRecommended : DWORD;
      dwTemplateCurrentLevel : DWORD;
      dwFlags : DWORD;
   end record;
   subtype ZONEATTRIBUTES is ZONEATTRIBUTES_x; -- CXType_Elaborated
   type LPZONEATTRIBUTES is access ZONEATTRIBUTES_x; -- CXType_Pointer - CXType_Elaborated
   type URLZONEREG_x is (
      URLZONEREG_DEFAULT,
      URLZONEREG_HKLM,
      URLZONEREG_HKCU
   );
   for URLZONEREG_x use (
      URLZONEREG_DEFAULT => 0,
      URLZONEREG_HKLM => 1,
      URLZONEREG_HKCU => 2
   );
   for URLZONEREG_x'Size use 32;
   subtype URLZONEREG is URLZONEREG_x; -- CXType_Elaborated
   type IInternetZoneManager_Interface is interface and IUnknown_Interface;
      function GetZoneAttributes(
         This : access IInternetZoneManager_Interface;
         dwZone : DWORD;
         pZoneAttributes : access ZONEATTRIBUTES
      ) return HRESULT is abstract;
      function SetZoneAttributes(
         This : access IInternetZoneManager_Interface;
         dwZone : DWORD;
         pZoneAttributes : access ZONEATTRIBUTES
      ) return HRESULT is abstract;
      function GetZoneCustomPolicy(
         This : access IInternetZoneManager_Interface;
         dwZone : DWORD;
         guidKey : access constant GUID;
         ppPolicy : access PBYTE;
         pcbPolicy : access DWORD;
         urlZoneReg_x : URLZONEREG
      ) return HRESULT is abstract;
      function SetZoneCustomPolicy(
         This : access IInternetZoneManager_Interface;
         dwZone : DWORD;
         guidKey : access constant GUID;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         urlZoneReg_x : URLZONEREG
      ) return HRESULT is abstract;
      function GetZoneActionPolicy(
         This : access IInternetZoneManager_Interface;
         dwZone : DWORD;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         urlZoneReg_x : URLZONEREG
      ) return HRESULT is abstract;
      function SetZoneActionPolicy(
         This : access IInternetZoneManager_Interface;
         dwZone : DWORD;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         urlZoneReg_x : URLZONEREG
      ) return HRESULT is abstract;
      function PromptAction(
         This : access IInternetZoneManager_Interface;
         dwAction : DWORD;
         hwndParent : HWND;
         pwszUrl : LPCWSTR;
         pwszText : LPCWSTR;
         dwPromptFlags : DWORD
      ) return HRESULT is abstract;
      function LogAction(
         This : access IInternetZoneManager_Interface;
         dwAction : DWORD;
         pwszUrl : LPCWSTR;
         pwszText : LPCWSTR;
         dwLogFlags : DWORD
      ) return HRESULT is abstract;
      function CreateZoneEnumerator(
         This : access IInternetZoneManager_Interface;
         pdwEnum : access DWORD;
         pdwCount : access DWORD;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function GetZoneAt(
         This : access IInternetZoneManager_Interface;
         dwEnum : DWORD;
         dwIndex : DWORD;
         pdwZone : access DWORD
      ) return HRESULT is abstract;
      function DestroyZoneEnumerator(
         This : access IInternetZoneManager_Interface;
         dwEnum : DWORD
      ) return HRESULT is abstract;
      function CopyTemplatePoliciesToZone(
         This : access IInternetZoneManager_Interface;
         dwTemplate : DWORD;
         dwZone : DWORD;
         dwReserved : DWORD
      ) return HRESULT is abstract;
   type IInternetZoneManager is access IInternetZoneManager_Interface'Class;
   type IInternetZoneManagerEx_Interface is interface and IInternetZoneManager_Interface;
      function GetZoneActionPolicyEx(
         This : access IInternetZoneManagerEx_Interface;
         dwZone : DWORD;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         urlZoneReg_x : URLZONEREG;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function SetZoneActionPolicyEx(
         This : access IInternetZoneManagerEx_Interface;
         dwZone : DWORD;
         dwAction : DWORD;
         pPolicy : access BYTE;
         cbPolicy : DWORD;
         urlZoneReg_x : URLZONEREG;
         dwFlags : DWORD
      ) return HRESULT is abstract;
   type IInternetZoneManagerEx is access IInternetZoneManagerEx_Interface'Class;
   type IInternetZoneManagerEx_Ptr is access IInternetZoneManagerEx;
   type IInternetZoneManagerEx2_Interface is interface and IInternetZoneManagerEx_Interface;
      function GetZoneAttributesEx(
         This : access IInternetZoneManagerEx2_Interface;
         dwZone : DWORD;
         pZoneAttributes : access ZONEATTRIBUTES;
         dwFlags : DWORD
      ) return HRESULT is abstract;
      function GetZoneSecurityState(
         This : access IInternetZoneManagerEx2_Interface;
         dwZoneIndex : DWORD;
         fRespectPolicy : BOOL;
         pdwState : LPDWORD;
         pfPolicyEncountered : access BOOL
      ) return HRESULT is abstract;
      function GetIESecurityState(
         This : access IInternetZoneManagerEx2_Interface;
         fRespectPolicy : BOOL;
         pdwState : LPDWORD;
         pfPolicyEncountered : access BOOL;
         fNoCache : BOOL
      ) return HRESULT is abstract;
      function FixUnsecureSettings(This : access IInternetZoneManagerEx2_Interface) return HRESULT is abstract;
   type IInternetZoneManagerEx2 is access IInternetZoneManagerEx2_Interface'Class;
   type IInternetZoneManagerEx2_Ptr is access IInternetZoneManagerEx2;
   type tagCODEBASEHOLD_x is record
      cbSize : ULONG;
      szDistUnit : LPWSTR;
      szCodeBase : LPWSTR;
      dwVersionMS : DWORD;
      dwVersionLS : DWORD;
      dwStyle : DWORD;
   end record;
   subtype CODEBASEHOLD is tagCODEBASEHOLD_x; -- CXType_Elaborated
   type LPCODEBASEHOLD is access tagCODEBASEHOLD_x; -- CXType_Pointer - CXType_Elaborated
   type tagSOFTDISTINFO_x is record
      cbSize : ULONG;
      dwFlags : DWORD;
      dwAdState : DWORD;
      szTitle : LPWSTR;
      szAbstract : LPWSTR;
      szHREF : LPWSTR;
      dwInstalledVersionMS : DWORD;
      dwInstalledVersionLS : DWORD;
      dwUpdateVersionMS : DWORD;
      dwUpdateVersionLS : DWORD;
      dwAdvertisedVersionMS : DWORD;
      dwAdvertisedVersionLS : DWORD;
      dwReserved : DWORD;
   end record;
   subtype SOFTDISTINFO is tagSOFTDISTINFO_x; -- CXType_Elaborated
   type LPSOFTDISTINFO is access tagSOFTDISTINFO_x; -- CXType_Pointer - CXType_Elaborated
   type ISoftDistExt_Interface is interface and IUnknown_Interface;
      function ProcessSoftDist(
         This : access ISoftDistExt_Interface;
         szCDFURL : LPCWSTR;
         pSoftDistElement : access IXMLElement;
         lpsdi : LPSOFTDISTINFO
      ) return HRESULT is abstract;
      function GetFirstCodeBase(
         This : access ISoftDistExt_Interface;
         szCodeBase : access LPWSTR;
         dwMaxSize : LPDWORD
      ) return HRESULT is abstract;
      function GetNextCodeBase(
         This : access ISoftDistExt_Interface;
         szCodeBase : access LPWSTR;
         dwMaxSize : LPDWORD
      ) return HRESULT is abstract;
      function AsyncInstallDistributionUnit(
         This : access ISoftDistExt_Interface;
         pbc : access IBindCtx;
         pvReserved : LPVOID;
         flags : DWORD;
         lpcbh : LPCODEBASEHOLD
      ) return HRESULT is abstract;
   type ISoftDistExt is access ISoftDistExt_Interface'Class;
   type ISoftDistExt_Ptr is access ISoftDistExt;
   function GetSoftwareUpdateInfo(
      szDistUnit : LPCWSTR;
      psdi : LPSOFTDISTINFO
   ) return HRESULT;
   pragma import (C,GetSoftwareUpdateInfo,"GetSoftwareUpdateInfo");
   function SetSoftwareUpdateAdvertisementState(
      szDistUnit : LPCWSTR;
      dwAdState : DWORD;
      dwAdvertisedVersionMS : DWORD;
      dwAdvertisedVersionLS : DWORD
   ) return HRESULT;
   pragma import (C,SetSoftwareUpdateAdvertisementState,"SetSoftwareUpdateAdvertisementState");
   type LPCATALOGFILEINFO is access ICatalogFileInfo; -- CXType_Pointer - CXType_Typedef
   type ICatalogFileInfo_Interface is interface and IUnknown_Interface;
      function GetCatalogFile(
         This : access ICatalogFileInfo_Interface;
         ppszCatalogFile : access LPSTR
      ) return HRESULT is abstract;
      function GetJavaTrust(
         This : access ICatalogFileInfo_Interface;
         ppJavaTrust : access LPVOID
      ) return HRESULT is abstract;
   type ICatalogFileInfo is access ICatalogFileInfo_Interface'Class;
   type ICatalogFileInfo_Ptr is access ICatalogFileInfo;
   type LPDATAFILTER is access IDataFilter; -- CXType_Pointer - CXType_Typedef
   type IDataFilter_Interface is interface and IUnknown_Interface;
      function DoEncode(
         This : access IDataFilter_Interface;
         dwFlags : DWORD;
         lInBufferSize : LONG;
         pbInBuffer : access BYTE;
         lOutBufferSize : LONG;
         pbOutBuffer : access BYTE;
         lInBytesAvailable : LONG;
         plInBytesRead : access LONG;
         plOutBytesWritten : access LONG;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function DoDecode(
         This : access IDataFilter_Interface;
         dwFlags : DWORD;
         lInBufferSize : LONG;
         pbInBuffer : access BYTE;
         lOutBufferSize : LONG;
         pbOutBuffer : access BYTE;
         lInBytesAvailable : LONG;
         plInBytesRead : access LONG;
         plOutBytesWritten : access LONG;
         dwReserved : DWORD
      ) return HRESULT is abstract;
      function SetEncodingLevel(
         This : access IDataFilter_Interface;
         dwEncLevel : DWORD
      ) return HRESULT is abstract;
   type IDataFilter is access IDataFilter_Interface'Class;
   type IDataFilter_Ptr is access IDataFilter;
   type tagPROTOCOLFILTERDATA_x is record
      cbSize : DWORD;
      pProtocolSink : access IInternetProtocolSink;
      pProtocol : access IInternetProtocol;
      pUnk : access IUnknown;
      dwFilterFlags : DWORD;
   end record;
   subtype PROTOCOLFILTERDATA is tagPROTOCOLFILTERDATA_x; -- CXType_Elaborated
   type LPENCODINGFILTERFACTORY is access IEncodingFilterFactory; -- CXType_Pointer - CXType_Typedef
   type tagDATAINFO_x is record
      ulTotalSize : ULONG;
      ulavrPacketSize : ULONG;
      ulConnectSpeed : ULONG;
      ulProcessorSpeed : ULONG;
   end record;
   subtype DATAINFO is tagDATAINFO_x; -- CXType_Elaborated
   type IEncodingFilterFactory_Interface is interface and IUnknown_Interface;
      function FindBestFilter(
         This : access IEncodingFilterFactory_Interface;
         pwzCodeIn : LPCWSTR;
         pwzCodeOut : LPCWSTR;
         info : DATAINFO;
         ppDF : access LPDATAFILTER
      ) return HRESULT is abstract;
      function GetDefaultFilter(
         This : access IEncodingFilterFactory_Interface;
         pwzCodeIn : LPCWSTR;
         pwzCodeOut : LPCWSTR;
         ppDF : access LPDATAFILTER
      ) return HRESULT is abstract;
   type IEncodingFilterFactory is access IEncodingFilterFactory_Interface'Class;
   type IEncodingFilterFactory_Ptr is access IEncodingFilterFactory;
   function IsLoggingEnabledA(
      pszUrl : LPCSTR
   ) return BOOL;
   pragma import (C,IsLoggingEnabledA,"IsLoggingEnabledA");
   function IsLoggingEnabledW(
      pwszUrl : LPCWSTR
   ) return BOOL;
   pragma import (C,IsLoggingEnabledW,"IsLoggingEnabledW");
   type tagHIT_LOGGING_INFO_x is record
      dwStructSize : DWORD;
      lpszLoggedUrlName : LPSTR;
      StartTime : SYSTEMTIME;
      EndTime : SYSTEMTIME;
      lpszExtendedInfo : LPSTR;
   end record;
   subtype HIT_LOGGING_INFO is tagHIT_LOGGING_INFO_x; -- CXType_Elaborated
   type LPHIT_LOGGING_INFO is access tagHIT_LOGGING_INFO_x; -- CXType_Pointer - CXType_Elaborated
   function WriteHitLogging(
      lpLogginginfo : LPHIT_LOGGING_INFO
   ) return BOOL;
   pragma import (C,WriteHitLogging,"WriteHitLogging");
   type CONFIRMSAFETY is record
      clsid_x : CLSID;
      pUnk : access IUnknown;
      dwFlags : DWORD;
   end record;
   type LPIWRAPPEDPROTOCOL is access IWrappedProtocol; -- CXType_Pointer - CXType_Typedef
   type IWrappedProtocol_Interface is interface and IUnknown_Interface;
      function GetWrapperCode(
         This : access IWrappedProtocol_Interface;
         pnCode : access LONG;
         dwReserved : DWORD_PTR
      ) return HRESULT is abstract;
   type IWrappedProtocol is access IWrappedProtocol_Interface'Class;
   type IWrappedProtocol_Ptr is access IWrappedProtocol;
   type LPGETBINDHANDLE is access IGetBindHandle; -- CXType_Pointer - CXType_Typedef
   type MIDL_IGetBindHandle_0001_x is (
      BINDHANDLETYPES_APPCACHE,
      BINDHANDLETYPES_DEPENDENCY,
      BINDHANDLETYPES_COUNT
   );
   for MIDL_IGetBindHandle_0001_x use (
      BINDHANDLETYPES_APPCACHE => 0,
      BINDHANDLETYPES_DEPENDENCY => 1,
      BINDHANDLETYPES_COUNT => 2
   );
   for MIDL_IGetBindHandle_0001_x'Size use 32;
   subtype BINDHANDLETYPES is MIDL_IGetBindHandle_0001_x; -- CXType_Elaborated
   type IGetBindHandle_Interface is interface and IUnknown_Interface;
      function GetBindHandle(
         This : access IGetBindHandle_Interface;
         enumRequestedHandle : BINDHANDLETYPES;
         pRetHandle : access HANDLE
      ) return HRESULT is abstract;
   type IGetBindHandle is access IGetBindHandle_Interface'Class;
   type IGetBindHandle_Ptr is access IGetBindHandle;
   type tagPROTOCOL_ARGUMENT_x is record
      szMethod : LPCWSTR;
      szTargetUrl : LPCWSTR;
   end record;
   subtype PROTOCOL_ARGUMENT is tagPROTOCOL_ARGUMENT_x; -- CXType_Elaborated
   type LPPROTOCOL_ARGUMENT is access tagPROTOCOL_ARGUMENT_x; -- CXType_Pointer - CXType_Elaborated
   type LPBINDCALLBACKREDIRECT is access IBindCallbackRedirect; -- CXType_Pointer - CXType_Typedef
   type IBindCallbackRedirect_Interface is interface and IUnknown_Interface;
      function Redirect(
         This : access IBindCallbackRedirect_Interface;
         lpcUrl : LPCWSTR;
         vbCancel : access VARIANT_BOOL
      ) return HRESULT is abstract;
   type IBindCallbackRedirect is access IBindCallbackRedirect_Interface'Class;
   type IBindCallbackRedirect_Ptr is access IBindCallbackRedirect;
   type IBindHttpSecurity_Interface is interface and IUnknown_Interface;
      function GetIgnoreCertMask(
         This : access IBindHttpSecurity_Interface;
         pdwIgnoreCertMask : access DWORD
      ) return HRESULT is abstract;
   type IBindHttpSecurity is access IBindHttpSecurity_Interface'Class;
   type IBindHttpSecurity_Ptr is access IBindHttpSecurity;
   function IBinding_GetBindResult_Proxy(
      This : access IBinding;
      pclsidProtocol : access CLSID;
      pdwResult : access DWORD;
      pszResult : access LPOLESTR;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IBinding_GetBindResult_Proxy,"IBinding_GetBindResult_Proxy");
   function IBinding_GetBindResult_Stub(
      This : access IBinding;
      pclsidProtocol : access CLSID;
      pdwResult : access DWORD;
      pszResult : access LPOLESTR;
      dwReserved : DWORD
   ) return HRESULT;
   pragma import (C,IBinding_GetBindResult_Stub,"IBinding_GetBindResult_Stub");
   function IBindStatusCallback_GetBindInfo_Proxy(
      This : access IBindStatusCallback;
      grfBINDF : access DWORD;
      pbindinfo : access BINDINFO
   ) return HRESULT;
   pragma import (C,IBindStatusCallback_GetBindInfo_Proxy,"IBindStatusCallback_GetBindInfo_Proxy");
   function IBindStatusCallback_GetBindInfo_Stub(
      This : access IBindStatusCallback;
      grfBINDF : access DWORD;
      pbindinfo : access RemBINDINFO;
      pstgmed : access RemSTGMEDIUM
   ) return HRESULT;
   pragma import (C,IBindStatusCallback_GetBindInfo_Stub,"IBindStatusCallback_GetBindInfo_Stub");
   function IBindStatusCallback_OnDataAvailable_Proxy(
      This : access IBindStatusCallback;
      grfBSCF : DWORD;
      dwSize : DWORD;
      pformatetc : access FORMATETC;
      pstgmed : access STGMEDIUM
   ) return HRESULT;
   pragma import (C,IBindStatusCallback_OnDataAvailable_Proxy,"IBindStatusCallback_OnDataAvailable_Proxy");
   function IBindStatusCallback_OnDataAvailable_Stub(
      This : access IBindStatusCallback;
      grfBSCF : DWORD;
      dwSize : DWORD;
      pformatetc : access RemFORMATETC;
      pstgmed : access RemSTGMEDIUM
   ) return HRESULT;
   pragma import (C,IBindStatusCallback_OnDataAvailable_Stub,"IBindStatusCallback_OnDataAvailable_Stub");
   function IBindStatusCallbackEx_GetBindInfoEx_Proxy(
      This : access IBindStatusCallbackEx;
      grfBINDF : access DWORD;
      pbindinfo : access BINDINFO;
      grfBINDF2 : access DWORD;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IBindStatusCallbackEx_GetBindInfoEx_Proxy,"IBindStatusCallbackEx_GetBindInfoEx_Proxy");
   function IBindStatusCallbackEx_GetBindInfoEx_Stub(
      This : access IBindStatusCallbackEx;
      grfBINDF : access DWORD;
      pbindinfo : access RemBINDINFO;
      pstgmed : access RemSTGMEDIUM;
      grfBINDF2 : access DWORD;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IBindStatusCallbackEx_GetBindInfoEx_Stub,"IBindStatusCallbackEx_GetBindInfoEx_Stub");
   function IWinInetInfo_QueryOption_Proxy(
      This : access IWinInetInfo;
      dwOption : DWORD;
      pBuffer : LPVOID;
      pcbBuf : access DWORD
   ) return HRESULT;
   pragma import (C,IWinInetInfo_QueryOption_Proxy,"IWinInetInfo_QueryOption_Proxy");
   function IWinInetInfo_QueryOption_Stub(
      This : access IWinInetInfo;
      dwOption : DWORD;
      pBuffer : access BYTE;
      pcbBuf : access DWORD
   ) return HRESULT;
   pragma import (C,IWinInetInfo_QueryOption_Stub,"IWinInetInfo_QueryOption_Stub");
   function IWinInetHttpInfo_QueryInfo_Proxy(
      This : access IWinInetHttpInfo;
      dwOption : DWORD;
      pBuffer : LPVOID;
      pcbBuf : access DWORD;
      pdwFlags : access DWORD;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IWinInetHttpInfo_QueryInfo_Proxy,"IWinInetHttpInfo_QueryInfo_Proxy");
   function IWinInetHttpInfo_QueryInfo_Stub(
      This : access IWinInetHttpInfo;
      dwOption : DWORD;
      pBuffer : access BYTE;
      pcbBuf : access DWORD;
      pdwFlags : access DWORD;
      pdwReserved : access DWORD
   ) return HRESULT;
   pragma import (C,IWinInetHttpInfo_QueryInfo_Stub,"IWinInetHttpInfo_QueryInfo_Stub");
   function IBindHost_MonikerBindToStorage_Proxy(
      This : access IBindHost;
      pMk : access IMoniker;
      pBC : access IBindCtx;
      pBSC : access IBindStatusCallback;
      riid : access constant IID;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,IBindHost_MonikerBindToStorage_Proxy,"IBindHost_MonikerBindToStorage_Proxy");
   function IBindHost_MonikerBindToStorage_Stub(
      This : access IBindHost;
      pMk : access IMoniker;
      pBC : access IBindCtx;
      pBSC : access IBindStatusCallback;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IBindHost_MonikerBindToStorage_Stub,"IBindHost_MonikerBindToStorage_Stub");
   function IBindHost_MonikerBindToObject_Proxy(
      This : access IBindHost;
      pMk : access IMoniker;
      pBC : access IBindCtx;
      pBSC : access IBindStatusCallback;
      riid : access constant IID;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,IBindHost_MonikerBindToObject_Proxy,"IBindHost_MonikerBindToObject_Proxy");
   function IBindHost_MonikerBindToObject_Stub(
      This : access IBindHost;
      pMk : access IMoniker;
      pBC : access IBindCtx;
      pBSC : access IBindStatusCallback;
      riid : access constant IID;
      ppvObj : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,IBindHost_MonikerBindToObject_Stub,"IBindHost_MonikerBindToObject_Stub");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\propidl.h>
   type PIDMSI_STATUS_VALUE is (
      PIDMSI_STATUS_NORMAL,
      PIDMSI_STATUS_NEW,
      PIDMSI_STATUS_PRELIM,
      PIDMSI_STATUS_DRAFT,
      PIDMSI_STATUS_INPROGRESS,
      PIDMSI_STATUS_EDIT,
      PIDMSI_STATUS_REVIEW,
      PIDMSI_STATUS_PROOF,
      PIDMSI_STATUS_FINAL,
      PIDMSI_STATUS_OTHER
   );
   for PIDMSI_STATUS_VALUE use (
      PIDMSI_STATUS_NORMAL => 0,
      PIDMSI_STATUS_NEW => 1,
      PIDMSI_STATUS_PRELIM => 2,
      PIDMSI_STATUS_DRAFT => 3,
      PIDMSI_STATUS_INPROGRESS => 4,
      PIDMSI_STATUS_EDIT => 5,
      PIDMSI_STATUS_REVIEW => 6,
      PIDMSI_STATUS_PROOF => 7,
      PIDMSI_STATUS_FINAL => 8,
      PIDMSI_STATUS_OTHER => 32767
   );
   for PIDMSI_STATUS_VALUE'Size use 32;
   -- PropVariantInit(); -- inlined function not supported
   type tagSERIALIZEDPROPERTYVALUE is record
      dwType : DWORD;
      rgb : Void;
   end record;
   subtype SERIALIZEDPROPERTYVALUE is tagSERIALIZEDPROPERTYVALUE; -- CXType_Elaborated
   function StgConvertPropertyToVariant(
      pprop : access constant SERIALIZEDPROPERTYVALUE;
      CodePage : USHORT;
      pvar : access PROPVARIANT;
      pma : access Void
   ) return BOOLEAN;
   pragma import (C,StgConvertPropertyToVariant,"StgConvertPropertyToVariant");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\objbase.h>
   function CreateStdProgressIndicator(
      hwndParent : HWND;
      pszTitle : LPCOLESTR;
      pIbscCaller : access IBindStatusCallback;
      ppIbsc : access LPBINDSTATUSCALLBACK
   ) return HRESULT;
   pragma import (C,CreateStdProgressIndicator,"CreateStdProgressIndicator");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\oleauto.h>
   function SysAllocString(
      psz_x : access constant OLECHAR
   ) return BSTR;
   pragma import (C,SysAllocString,"SysAllocString");
   function SysReAllocString(
      pbstr : access BSTR;
      psz_x : access constant OLECHAR
   ) return INT;
   pragma import (C,SysReAllocString,"SysReAllocString");
   function SysAllocStringLen(
      strIn : access constant OLECHAR;
      ui : UINT
   ) return BSTR;
   pragma import (C,SysAllocStringLen,"SysAllocStringLen");
   function SysReAllocStringLen(
      pbstr : access BSTR;
      psz_x : access constant OLECHAR;
      len : Interfaces.C.unsigned
   ) return INT;
   pragma import (C,SysReAllocStringLen,"SysReAllocStringLen");
   function SysAddRefString(
      bstrString : BSTR
   ) return HRESULT;
   pragma import (C,SysAddRefString,"SysAddRefString");
   procedure SysReleaseString(
      bstrString : BSTR
   );
   pragma import (C,SysReleaseString,"SysReleaseString");
   procedure SysFreeString(
      bstrString : BSTR
   );
   pragma import (C,SysFreeString,"SysFreeString");
   function SysStringLen(
      pbstr : BSTR
   ) return UINT;
   pragma import (C,SysStringLen,"SysStringLen");
   function SysStringByteLen(
      bstr_x : BSTR
   ) return UINT;
   pragma import (C,SysStringByteLen,"SysStringByteLen");
   function SysAllocStringByteLen(
      psz_x : LPCSTR;
      len : UINT
   ) return BSTR;
   pragma import (C,SysAllocStringByteLen,"SysAllocStringByteLen");
   function DosDateTimeToVariantTime(
      wDosDate : USHORT;
      wDosTime : USHORT;
      pvtime : access DOUBLE
   ) return INT;
   pragma import (C,DosDateTimeToVariantTime,"DosDateTimeToVariantTime");
   function VariantTimeToDosDateTime(
      vtime : DOUBLE;
      pwDosDate : access USHORT;
      pwDosTime : access USHORT
   ) return INT;
   pragma import (C,VariantTimeToDosDateTime,"VariantTimeToDosDateTime");
   function SystemTimeToVariantTime(
      lpSystemTime_x : LPSYSTEMTIME;
      pvtime : access DOUBLE
   ) return INT;
   pragma import (C,SystemTimeToVariantTime,"SystemTimeToVariantTime");
   function VariantTimeToSystemTime(
      vtime : DOUBLE;
      lpSystemTime_x : LPSYSTEMTIME
   ) return INT;
   pragma import (C,VariantTimeToSystemTime,"VariantTimeToSystemTime");
   function SafeArrayAllocDescriptor(
      cDims : UINT;
      ppsaOut : access LPSAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayAllocDescriptor,"SafeArrayAllocDescriptor");
   function SafeArrayAllocDescriptorEx(
      vt : VARTYPE;
      cDims : UINT;
      ppsaOut : access LPSAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayAllocDescriptorEx,"SafeArrayAllocDescriptorEx");
   function SafeArrayAllocData(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayAllocData,"SafeArrayAllocData");
   function SafeArrayCopyData(
      psaSource : access SAFEARRAY;
      psaTarget : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayCopyData,"SafeArrayCopyData");
   procedure SafeArrayReleaseDescriptor(
      psa : access SAFEARRAY
   );
   pragma import (C,SafeArrayReleaseDescriptor,"SafeArrayReleaseDescriptor");
   function SafeArrayDestroyDescriptor(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayDestroyDescriptor,"SafeArrayDestroyDescriptor");
   procedure SafeArrayReleaseData(
      pData : PVOID
   );
   pragma import (C,SafeArrayReleaseData,"SafeArrayReleaseData");
   function SafeArrayDestroyData(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayDestroyData,"SafeArrayDestroyData");
   function SafeArrayAddRef(
      psa : access SAFEARRAY;
      ppDataToRelease : access PVOID
   ) return HRESULT;
   pragma import (C,SafeArrayAddRef,"SafeArrayAddRef");
   function SafeArrayDestroy(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayDestroy,"SafeArrayDestroy");
   function SafeArrayRedim(
      psa : access SAFEARRAY;
      psaboundNew : access SAFEARRAYBOUND
   ) return HRESULT;
   pragma import (C,SafeArrayRedim,"SafeArrayRedim");
   function SafeArrayGetDim(
      psa : access SAFEARRAY
   ) return UINT;
   pragma import (C,SafeArrayGetDim,"SafeArrayGetDim");
   function SafeArrayGetElemsize(
      psa : access SAFEARRAY
   ) return UINT;
   pragma import (C,SafeArrayGetElemsize,"SafeArrayGetElemsize");
   function SafeArrayGetUBound(
      psa : access SAFEARRAY;
      nDim : UINT;
      plUbound : access LONG
   ) return HRESULT;
   pragma import (C,SafeArrayGetUBound,"SafeArrayGetUBound");
   function SafeArrayGetLBound(
      psa : access SAFEARRAY;
      nDim : UINT;
      plLbound : access LONG
   ) return HRESULT;
   pragma import (C,SafeArrayGetLBound,"SafeArrayGetLBound");
   function SafeArrayLock(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayLock,"SafeArrayLock");
   function SafeArrayUnlock(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayUnlock,"SafeArrayUnlock");
   function SafeArrayAccessData(
      psa : access SAFEARRAY;
      ppvData : access LPVOID
   ) return HRESULT;
   pragma import (C,SafeArrayAccessData,"SafeArrayAccessData");
   function SafeArrayUnaccessData(
      psa : access SAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayUnaccessData,"SafeArrayUnaccessData");
   function SafeArrayGetElement(
      psa : access SAFEARRAY;
      rgIndices : access LONG;
      pv : access Void
   ) return HRESULT;
   pragma import (C,SafeArrayGetElement,"SafeArrayGetElement");
   function SafeArrayPutElement(
      psa : access SAFEARRAY;
      rgIndices : access LONG;
      pv : access Void
   ) return HRESULT;
   pragma import (C,SafeArrayPutElement,"SafeArrayPutElement");
   function SafeArrayCopy(
      psa : access SAFEARRAY;
      ppsaOut : access LPSAFEARRAY
   ) return HRESULT;
   pragma import (C,SafeArrayCopy,"SafeArrayCopy");
   function SafeArrayPtrOfIndex(
      psa : access SAFEARRAY;
      rgIndices : access LONG;
      ppvData : access LPVOID
   ) return HRESULT;
   pragma import (C,SafeArrayPtrOfIndex,"SafeArrayPtrOfIndex");
   function SafeArraySetRecordInfo(
      psa : access SAFEARRAY;
      prinfo : access IRecordInfo
   ) return HRESULT;
   pragma import (C,SafeArraySetRecordInfo,"SafeArraySetRecordInfo");
   function SafeArrayGetRecordInfo(
      psa : access SAFEARRAY;
      prinfo : access LPRECORDINFO
   ) return HRESULT;
   pragma import (C,SafeArrayGetRecordInfo,"SafeArrayGetRecordInfo");
   function SafeArraySetIID(
      psa : access SAFEARRAY;
      guid_x : access constant GUID
   ) return HRESULT;
   pragma import (C,SafeArraySetIID,"SafeArraySetIID");
   function SafeArrayGetIID(
      psa : access SAFEARRAY;
      pguid : access GUID
   ) return HRESULT;
   pragma import (C,SafeArrayGetIID,"SafeArrayGetIID");
   function SafeArrayGetVartype(
      psa : access SAFEARRAY;
      pvt : access VARTYPE
   ) return HRESULT;
   pragma import (C,SafeArrayGetVartype,"SafeArrayGetVartype");
   procedure VariantInit(
      pvarg : access VARIANTARG
   );
   pragma import (C,VariantInit,"VariantInit");
   function VariantClear(
      pvarg : access VARIANTARG
   ) return HRESULT;
   pragma import (C,VariantClear,"VariantClear");
   function VariantCopy(
      pvargDest : access VARIANTARG;
      pvargSrc : access constant VARIANTARG
   ) return HRESULT;
   pragma import (C,VariantCopy,"VariantCopy");
   function VariantCopyInd(
      pvarDest : access VARIANT;
      pvargSrc : access constant VARIANTARG
   ) return HRESULT;
   pragma import (C,VariantCopyInd,"VariantCopyInd");
   function VariantChangeType(
      pvargDest : access VARIANTARG;
      pvarSrc : access constant VARIANTARG;
      wFlags : USHORT;
      vt : VARTYPE
   ) return HRESULT;
   pragma import (C,VariantChangeType,"VariantChangeType");
   function VariantChangeTypeEx(
      pvargDest : access VARIANTARG;
      pvarSrc : access constant VARIANTARG;
      lcid_x : LCID;
      wFlags : USHORT;
      vt : VARTYPE
   ) return HRESULT;
   pragma import (C,VariantChangeTypeEx,"VariantChangeTypeEx");
   function VectorFromBstr(
      bstr_x : BSTR;
      ppsa : access LPSAFEARRAY
   ) return HRESULT;
   pragma import (C,VectorFromBstr,"VectorFromBstr");
   function BstrFromVector(
      psa : access SAFEARRAY;
      pbstr : access BSTR
   ) return HRESULT;
   pragma import (C,BstrFromVector,"BstrFromVector");
   function VarUI1FromI2(
      sIn : SHORT;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromI2,"VarUI1FromI2");
   function VarUI1FromI4(
      lIn : LONG;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromI4,"VarUI1FromI4");
   function VarUI1FromI8(
      i64In : LONG64;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromI8,"VarUI1FromI8");
   function VarUI1FromR4(
      fltIn : FLOAT;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromR4,"VarUI1FromR4");
   function VarUI1FromR8(
      dblIn : DOUBLE;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromR8,"VarUI1FromR8");
   function VarUI1FromCy(
      cyIn : CY;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromCy,"VarUI1FromCy");
   function VarUI1FromDate(
      dateIn : DATE;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromDate,"VarUI1FromDate");
   function VarUI1FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromStr,"VarUI1FromStr");
   function VarUI1FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromDisp,"VarUI1FromDisp");
   function VarUI1FromBool(
      boolIn : VARIANT_BOOL;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromBool,"VarUI1FromBool");
   function VarUI1FromI1(
      cIn : CHAR;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromI1,"VarUI1FromI1");
   function VarUI1FromUI2(
      uiIn : USHORT;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromUI2,"VarUI1FromUI2");
   function VarUI1FromUI4(
      ulIn : ULONG;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromUI4,"VarUI1FromUI4");
   function VarUI1FromUI8(
      ui64In : ULONG64;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromUI8,"VarUI1FromUI8");
   function VarUI1FromDec(
      pdecIn : access constant DECIMAL;
      pbOut : access BYTE
   ) return HRESULT;
   pragma import (C,VarUI1FromDec,"VarUI1FromDec");
   function VarI2FromUI1(
      bIn : BYTE;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromUI1,"VarI2FromUI1");
   function VarI2FromI4(
      lIn : LONG;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromI4,"VarI2FromI4");
   function VarI2FromI8(
      i64In : LONG64;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromI8,"VarI2FromI8");
   function VarI2FromR4(
      fltIn : FLOAT;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromR4,"VarI2FromR4");
   function VarI2FromR8(
      dblIn : DOUBLE;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromR8,"VarI2FromR8");
   function VarI2FromCy(
      cyIn : CY;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromCy,"VarI2FromCy");
   function VarI2FromDate(
      dateIn : DATE;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromDate,"VarI2FromDate");
   function VarI2FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromStr,"VarI2FromStr");
   function VarI2FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromDisp,"VarI2FromDisp");
   function VarI2FromBool(
      boolIn : VARIANT_BOOL;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromBool,"VarI2FromBool");
   function VarI2FromI1(
      cIn : CHAR;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromI1,"VarI2FromI1");
   function VarI2FromUI2(
      uiIn : USHORT;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromUI2,"VarI2FromUI2");
   function VarI2FromUI4(
      ulIn : ULONG;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromUI4,"VarI2FromUI4");
   function VarI2FromUI8(
      ui64In : ULONG64;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromUI8,"VarI2FromUI8");
   function VarI2FromDec(
      pdecIn : access constant DECIMAL;
      psOut : access SHORT
   ) return HRESULT;
   pragma import (C,VarI2FromDec,"VarI2FromDec");
   function VarI4FromUI1(
      bIn : BYTE;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromUI1,"VarI4FromUI1");
   function VarI4FromI2(
      sIn : SHORT;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromI2,"VarI4FromI2");
   function VarI4FromI8(
      i64In : LONG64;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromI8,"VarI4FromI8");
   function VarI4FromR4(
      fltIn : FLOAT;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromR4,"VarI4FromR4");
   function VarI4FromR8(
      dblIn : DOUBLE;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromR8,"VarI4FromR8");
   function VarI4FromCy(
      cyIn : CY;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromCy,"VarI4FromCy");
   function VarI4FromDate(
      dateIn : DATE;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromDate,"VarI4FromDate");
   function VarI4FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromStr,"VarI4FromStr");
   function VarI4FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromDisp,"VarI4FromDisp");
   function VarI4FromBool(
      boolIn : VARIANT_BOOL;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromBool,"VarI4FromBool");
   function VarI4FromI1(
      cIn : CHAR;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromI1,"VarI4FromI1");
   function VarI4FromUI2(
      uiIn : USHORT;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromUI2,"VarI4FromUI2");
   function VarI4FromUI4(
      ulIn : ULONG;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromUI4,"VarI4FromUI4");
   function VarI4FromUI8(
      ui64In : ULONG64;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromUI8,"VarI4FromUI8");
   function VarI4FromDec(
      pdecIn : access constant DECIMAL;
      plOut : access LONG
   ) return HRESULT;
   pragma import (C,VarI4FromDec,"VarI4FromDec");
   function VarI8FromUI1(
      bIn : BYTE;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromUI1,"VarI8FromUI1");
   function VarI8FromI2(
      sIn : SHORT;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromI2,"VarI8FromI2");
   function VarI8FromR4(
      fltIn : FLOAT;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromR4,"VarI8FromR4");
   function VarI8FromR8(
      dblIn : DOUBLE;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromR8,"VarI8FromR8");
   function VarI8FromCy(
      cyIn : CY;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromCy,"VarI8FromCy");
   function VarI8FromDate(
      dateIn : DATE;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromDate,"VarI8FromDate");
   function VarI8FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromStr,"VarI8FromStr");
   function VarI8FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromDisp,"VarI8FromDisp");
   function VarI8FromBool(
      boolIn : VARIANT_BOOL;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromBool,"VarI8FromBool");
   function VarI8FromI1(
      cIn : CHAR;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromI1,"VarI8FromI1");
   function VarI8FromUI2(
      uiIn : USHORT;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromUI2,"VarI8FromUI2");
   function VarI8FromUI4(
      ulIn : ULONG;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromUI4,"VarI8FromUI4");
   function VarI8FromUI8(
      ui64In : ULONG64;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromUI8,"VarI8FromUI8");
   function VarI8FromDec(
      pdecIn : access constant DECIMAL;
      pi64Out : access LONG64
   ) return HRESULT;
   pragma import (C,VarI8FromDec,"VarI8FromDec");
   function VarR4FromUI1(
      bIn : BYTE;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromUI1,"VarR4FromUI1");
   function VarR4FromI2(
      sIn : SHORT;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromI2,"VarR4FromI2");
   function VarR4FromI4(
      lIn : LONG;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromI4,"VarR4FromI4");
   function VarR4FromI8(
      i64In : LONG64;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromI8,"VarR4FromI8");
   function VarR4FromR8(
      dblIn : DOUBLE;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromR8,"VarR4FromR8");
   function VarR4FromCy(
      cyIn : CY;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromCy,"VarR4FromCy");
   function VarR4FromDate(
      dateIn : DATE;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromDate,"VarR4FromDate");
   function VarR4FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromStr,"VarR4FromStr");
   function VarR4FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromDisp,"VarR4FromDisp");
   function VarR4FromBool(
      boolIn : VARIANT_BOOL;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromBool,"VarR4FromBool");
   function VarR4FromI1(
      cIn : CHAR;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromI1,"VarR4FromI1");
   function VarR4FromUI2(
      uiIn : USHORT;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromUI2,"VarR4FromUI2");
   function VarR4FromUI4(
      ulIn : ULONG;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromUI4,"VarR4FromUI4");
   function VarR4FromUI8(
      ui64In : ULONG64;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromUI8,"VarR4FromUI8");
   function VarR4FromDec(
      pdecIn : access constant DECIMAL;
      pfltOut : access FLOAT
   ) return HRESULT;
   pragma import (C,VarR4FromDec,"VarR4FromDec");
   function VarR8FromUI1(
      bIn : BYTE;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromUI1,"VarR8FromUI1");
   function VarR8FromI2(
      sIn : SHORT;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromI2,"VarR8FromI2");
   function VarR8FromI4(
      lIn : LONG;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromI4,"VarR8FromI4");
   function VarR8FromI8(
      i64In : LONG64;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromI8,"VarR8FromI8");
   function VarR8FromR4(
      fltIn : FLOAT;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromR4,"VarR8FromR4");
   function VarR8FromCy(
      cyIn : CY;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromCy,"VarR8FromCy");
   function VarR8FromDate(
      dateIn : DATE;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromDate,"VarR8FromDate");
   function VarR8FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromStr,"VarR8FromStr");
   function VarR8FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromDisp,"VarR8FromDisp");
   function VarR8FromBool(
      boolIn : VARIANT_BOOL;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromBool,"VarR8FromBool");
   function VarR8FromI1(
      cIn : CHAR;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromI1,"VarR8FromI1");
   function VarR8FromUI2(
      uiIn : USHORT;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromUI2,"VarR8FromUI2");
   function VarR8FromUI4(
      ulIn : ULONG;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromUI4,"VarR8FromUI4");
   function VarR8FromUI8(
      ui64In : ULONG64;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromUI8,"VarR8FromUI8");
   function VarR8FromDec(
      pdecIn : access constant DECIMAL;
      pdblOut : access DOUBLE
   ) return HRESULT;
   pragma import (C,VarR8FromDec,"VarR8FromDec");
   function VarDateFromUI1(
      bIn : BYTE;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromUI1,"VarDateFromUI1");
   function VarDateFromI2(
      sIn : SHORT;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromI2,"VarDateFromI2");
   function VarDateFromI4(
      lIn : LONG;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromI4,"VarDateFromI4");
   function VarDateFromI8(
      i64In : LONG64;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromI8,"VarDateFromI8");
   function VarDateFromR4(
      fltIn : FLOAT;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromR4,"VarDateFromR4");
   function VarDateFromR8(
      dblIn : DOUBLE;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromR8,"VarDateFromR8");
   function VarDateFromCy(
      cyIn : CY;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromCy,"VarDateFromCy");
   function VarDateFromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromStr,"VarDateFromStr");
   function VarDateFromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromDisp,"VarDateFromDisp");
   function VarDateFromBool(
      boolIn : VARIANT_BOOL;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromBool,"VarDateFromBool");
   function VarDateFromI1(
      cIn : CHAR;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromI1,"VarDateFromI1");
   function VarDateFromUI2(
      uiIn : USHORT;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromUI2,"VarDateFromUI2");
   function VarDateFromUI4(
      ulIn : ULONG;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromUI4,"VarDateFromUI4");
   function VarDateFromUI8(
      ui64In : ULONG64;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromUI8,"VarDateFromUI8");
   function VarDateFromDec(
      pdecIn : access constant DECIMAL;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromDec,"VarDateFromDec");
   function VarCyFromUI1(
      bIn : BYTE;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromUI1,"VarCyFromUI1");
   function VarCyFromI2(
      sIn : SHORT;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromI2,"VarCyFromI2");
   function VarCyFromI4(
      lIn : LONG;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromI4,"VarCyFromI4");
   function VarCyFromI8(
      i64In : LONG64;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromI8,"VarCyFromI8");
   function VarCyFromR4(
      fltIn : FLOAT;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromR4,"VarCyFromR4");
   function VarCyFromR8(
      dblIn : DOUBLE;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromR8,"VarCyFromR8");
   function VarCyFromDate(
      dateIn : DATE;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromDate,"VarCyFromDate");
   function VarCyFromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromStr,"VarCyFromStr");
   function VarCyFromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromDisp,"VarCyFromDisp");
   function VarCyFromBool(
      boolIn : VARIANT_BOOL;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromBool,"VarCyFromBool");
   function VarCyFromI1(
      cIn : CHAR;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromI1,"VarCyFromI1");
   function VarCyFromUI2(
      uiIn : USHORT;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromUI2,"VarCyFromUI2");
   function VarCyFromUI4(
      ulIn : ULONG;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromUI4,"VarCyFromUI4");
   function VarCyFromUI8(
      ui64In : ULONG64;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromUI8,"VarCyFromUI8");
   function VarCyFromDec(
      pdecIn : access constant DECIMAL;
      pcyOut : access CY
   ) return HRESULT;
   pragma import (C,VarCyFromDec,"VarCyFromDec");
   function VarBstrFromUI1(
      bVal : BYTE;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromUI1,"VarBstrFromUI1");
   function VarBstrFromI2(
      iVal : SHORT;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromI2,"VarBstrFromI2");
   function VarBstrFromI4(
      lIn : LONG;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromI4,"VarBstrFromI4");
   function VarBstrFromI8(
      i64In : LONG64;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromI8,"VarBstrFromI8");
   function VarBstrFromR4(
      fltIn : FLOAT;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromR4,"VarBstrFromR4");
   function VarBstrFromR8(
      dblIn : DOUBLE;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromR8,"VarBstrFromR8");
   function VarBstrFromCy(
      cyIn : CY;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromCy,"VarBstrFromCy");
   function VarBstrFromDate(
      dateIn : DATE;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromDate,"VarBstrFromDate");
   function VarBstrFromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromDisp,"VarBstrFromDisp");
   function VarBstrFromBool(
      boolIn : VARIANT_BOOL;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromBool,"VarBstrFromBool");
   function VarBstrFromI1(
      cIn : CHAR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromI1,"VarBstrFromI1");
   function VarBstrFromUI2(
      uiIn : USHORT;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromUI2,"VarBstrFromUI2");
   function VarBstrFromUI4(
      ulIn : ULONG;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromUI4,"VarBstrFromUI4");
   function VarBstrFromUI8(
      ui64In : ULONG64;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromUI8,"VarBstrFromUI8");
   function VarBstrFromDec(
      pdecIn : access constant DECIMAL;
      lcid_x : LCID;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarBstrFromDec,"VarBstrFromDec");
   function VarBoolFromUI1(
      bIn : BYTE;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromUI1,"VarBoolFromUI1");
   function VarBoolFromI2(
      sIn : SHORT;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromI2,"VarBoolFromI2");
   function VarBoolFromI4(
      lIn : LONG;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromI4,"VarBoolFromI4");
   function VarBoolFromI8(
      i64In : LONG64;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromI8,"VarBoolFromI8");
   function VarBoolFromR4(
      fltIn : FLOAT;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromR4,"VarBoolFromR4");
   function VarBoolFromR8(
      dblIn : DOUBLE;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromR8,"VarBoolFromR8");
   function VarBoolFromDate(
      dateIn : DATE;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromDate,"VarBoolFromDate");
   function VarBoolFromCy(
      cyIn : CY;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromCy,"VarBoolFromCy");
   function VarBoolFromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromStr,"VarBoolFromStr");
   function VarBoolFromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromDisp,"VarBoolFromDisp");
   function VarBoolFromI1(
      cIn : CHAR;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromI1,"VarBoolFromI1");
   function VarBoolFromUI2(
      uiIn : USHORT;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromUI2,"VarBoolFromUI2");
   function VarBoolFromUI4(
      ulIn : ULONG;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromUI4,"VarBoolFromUI4");
   function VarBoolFromUI8(
      i64In : ULONG64;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromUI8,"VarBoolFromUI8");
   function VarBoolFromDec(
      pdecIn : access constant DECIMAL;
      pboolOut : access VARIANT_BOOL
   ) return HRESULT;
   pragma import (C,VarBoolFromDec,"VarBoolFromDec");
   function VarI1FromUI1(
      bIn : BYTE;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromUI1,"VarI1FromUI1");
   function VarI1FromI2(
      uiIn : SHORT;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromI2,"VarI1FromI2");
   function VarI1FromI4(
      lIn : LONG;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromI4,"VarI1FromI4");
   function VarI1FromI8(
      i64In : LONG64;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromI8,"VarI1FromI8");
   function VarI1FromR4(
      fltIn : FLOAT;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromR4,"VarI1FromR4");
   function VarI1FromR8(
      dblIn : DOUBLE;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromR8,"VarI1FromR8");
   function VarI1FromDate(
      dateIn : DATE;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromDate,"VarI1FromDate");
   function VarI1FromCy(
      cyIn : CY;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromCy,"VarI1FromCy");
   function VarI1FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromStr,"VarI1FromStr");
   function VarI1FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromDisp,"VarI1FromDisp");
   function VarI1FromBool(
      boolIn : VARIANT_BOOL;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromBool,"VarI1FromBool");
   function VarI1FromUI2(
      uiIn : USHORT;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromUI2,"VarI1FromUI2");
   function VarI1FromUI4(
      ulIn : ULONG;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromUI4,"VarI1FromUI4");
   function VarI1FromUI8(
      i64In : ULONG64;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromUI8,"VarI1FromUI8");
   function VarI1FromDec(
      pdecIn : access constant DECIMAL;
      pcOut : access CHAR
   ) return HRESULT;
   pragma import (C,VarI1FromDec,"VarI1FromDec");
   function VarUI2FromUI1(
      bIn : BYTE;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromUI1,"VarUI2FromUI1");
   function VarUI2FromI2(
      uiIn : SHORT;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromI2,"VarUI2FromI2");
   function VarUI2FromI4(
      lIn : LONG;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromI4,"VarUI2FromI4");
   function VarUI2FromI8(
      i64In : LONG64;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromI8,"VarUI2FromI8");
   function VarUI2FromR4(
      fltIn : FLOAT;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromR4,"VarUI2FromR4");
   function VarUI2FromR8(
      dblIn : DOUBLE;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromR8,"VarUI2FromR8");
   function VarUI2FromDate(
      dateIn : DATE;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromDate,"VarUI2FromDate");
   function VarUI2FromCy(
      cyIn : CY;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromCy,"VarUI2FromCy");
   function VarUI2FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromStr,"VarUI2FromStr");
   function VarUI2FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromDisp,"VarUI2FromDisp");
   function VarUI2FromBool(
      boolIn : VARIANT_BOOL;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromBool,"VarUI2FromBool");
   function VarUI2FromI1(
      cIn : CHAR;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromI1,"VarUI2FromI1");
   function VarUI2FromUI4(
      ulIn : ULONG;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromUI4,"VarUI2FromUI4");
   function VarUI2FromUI8(
      i64In : ULONG64;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromUI8,"VarUI2FromUI8");
   function VarUI2FromDec(
      pdecIn : access constant DECIMAL;
      puiOut : access USHORT
   ) return HRESULT;
   pragma import (C,VarUI2FromDec,"VarUI2FromDec");
   function VarUI4FromUI1(
      bIn : BYTE;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromUI1,"VarUI4FromUI1");
   function VarUI4FromI2(
      uiIn : SHORT;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromI2,"VarUI4FromI2");
   function VarUI4FromI4(
      lIn : LONG;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromI4,"VarUI4FromI4");
   function VarUI4FromI8(
      i64In : LONG64;
      plOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromI8,"VarUI4FromI8");
   function VarUI4FromR4(
      fltIn : FLOAT;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromR4,"VarUI4FromR4");
   function VarUI4FromR8(
      dblIn : DOUBLE;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromR8,"VarUI4FromR8");
   function VarUI4FromDate(
      dateIn : DATE;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromDate,"VarUI4FromDate");
   function VarUI4FromCy(
      cyIn : CY;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromCy,"VarUI4FromCy");
   function VarUI4FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromStr,"VarUI4FromStr");
   function VarUI4FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromDisp,"VarUI4FromDisp");
   function VarUI4FromBool(
      boolIn : VARIANT_BOOL;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromBool,"VarUI4FromBool");
   function VarUI4FromI1(
      cIn : CHAR;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromI1,"VarUI4FromI1");
   function VarUI4FromUI2(
      uiIn : USHORT;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromUI2,"VarUI4FromUI2");
   function VarUI4FromUI8(
      ui64In : ULONG64;
      plOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromUI8,"VarUI4FromUI8");
   function VarUI4FromDec(
      pdecIn : access constant DECIMAL;
      pulOut : access ULONG
   ) return HRESULT;
   pragma import (C,VarUI4FromDec,"VarUI4FromDec");
   function VarUI8FromUI1(
      bIn : BYTE;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromUI1,"VarUI8FromUI1");
   function VarUI8FromI2(
      sIn : SHORT;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromI2,"VarUI8FromI2");
   function VarUI8FromI4(
      lIn : LONG;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromI4,"VarUI8FromI4");
   function VarUI8FromI8(
      ui64In : LONG64;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromI8,"VarUI8FromI8");
   function VarUI8FromR4(
      fltIn : FLOAT;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromR4,"VarUI8FromR4");
   function VarUI8FromR8(
      dblIn : DOUBLE;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromR8,"VarUI8FromR8");
   function VarUI8FromCy(
      cyIn : CY;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromCy,"VarUI8FromCy");
   function VarUI8FromDate(
      dateIn : DATE;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromDate,"VarUI8FromDate");
   function VarUI8FromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromStr,"VarUI8FromStr");
   function VarUI8FromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromDisp,"VarUI8FromDisp");
   function VarUI8FromBool(
      boolIn : VARIANT_BOOL;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromBool,"VarUI8FromBool");
   function VarUI8FromI1(
      cIn : CHAR;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromI1,"VarUI8FromI1");
   function VarUI8FromUI2(
      uiIn : USHORT;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromUI2,"VarUI8FromUI2");
   function VarUI8FromUI4(
      ulIn : ULONG;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromUI4,"VarUI8FromUI4");
   function VarUI8FromDec(
      pdecIn : access constant DECIMAL;
      pi64Out : access ULONG64
   ) return HRESULT;
   pragma import (C,VarUI8FromDec,"VarUI8FromDec");
   function VarDecFromUI1(
      bIn : BYTE;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromUI1,"VarDecFromUI1");
   function VarDecFromI2(
      uiIn : SHORT;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromI2,"VarDecFromI2");
   function VarDecFromI4(
      lIn : LONG;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromI4,"VarDecFromI4");
   function VarDecFromI8(
      i64In : LONG64;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromI8,"VarDecFromI8");
   function VarDecFromR4(
      fltIn : FLOAT;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromR4,"VarDecFromR4");
   function VarDecFromR8(
      dblIn : DOUBLE;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromR8,"VarDecFromR8");
   function VarDecFromDate(
      dateIn : DATE;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromDate,"VarDecFromDate");
   function VarDecFromCy(
      cyIn : CY;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromCy,"VarDecFromCy");
   function VarDecFromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromStr,"VarDecFromStr");
   function VarDecFromDisp(
      pdispIn : access IDispatch;
      lcid_x : LCID;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromDisp,"VarDecFromDisp");
   function VarDecFromBool(
      boolIn : VARIANT_BOOL;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromBool,"VarDecFromBool");
   function VarDecFromI1(
      cIn : CHAR;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromI1,"VarDecFromI1");
   function VarDecFromUI2(
      uiIn : USHORT;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromUI2,"VarDecFromUI2");
   function VarDecFromUI4(
      ulIn : ULONG;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromUI4,"VarDecFromUI4");
   function VarDecFromUI8(
      ui64In : ULONG64;
      pdecOut : access DECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFromUI8,"VarDecFromUI8");
   type NUMPARSE is record
      cDig : INT;
      dwInFlags : ULONG;
      dwOutFlags : ULONG;
      cchUsed : INT;
      nBaseShift : INT;
      nPwr10 : INT;
   end record;
   function VarParseNumFromStr(
      strIn : LPCOLESTR;
      lcid_x : LCID;
      dwFlags : ULONG;
      pnumprs : access NUMPARSE;
      rgbDig : access BYTE
   ) return HRESULT;
   pragma import (C,VarParseNumFromStr,"VarParseNumFromStr");
   function VarNumFromParseNum(
      pnumprs : access NUMPARSE;
      rgbDig : access BYTE;
      dwVtBits : ULONG;
      pvar : access VARIANT
   ) return HRESULT;
   pragma import (C,VarNumFromParseNum,"VarNumFromParseNum");
   function VarAdd(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarAdd,"VarAdd");
   function VarAnd(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarAnd,"VarAnd");
   function VarCat(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarCat,"VarCat");
   function VarDiv(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarDiv,"VarDiv");
   function VarEqv(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarEqv,"VarEqv");
   function VarIdiv(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarIdiv,"VarIdiv");
   function VarImp(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarImp,"VarImp");
   function VarMod(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarMod,"VarMod");
   function VarMul(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarMul,"VarMul");
   function VarOr(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarOr,"VarOr");
   function VarPow(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarPow,"VarPow");
   function VarSub(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarSub,"VarSub");
   function VarXor(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarXor,"VarXor");
   function VarAbs(
      pvarIn : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarAbs,"VarAbs");
   function VarFix(
      pvarIn : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarFix,"VarFix");
   function VarInt(
      pvarIn : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarInt,"VarInt");
   function VarNeg(
      pvarIn : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarNeg,"VarNeg");
   function VarNot(
      pvarIn : LPVARIANT;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarNot,"VarNot");
   function VarRound(
      pvarIn : LPVARIANT;
      cDecimals : Interfaces.C.Int;
      pvarResult : LPVARIANT
   ) return HRESULT;
   pragma import (C,VarRound,"VarRound");
   function VarCmp(
      pvarLeft : LPVARIANT;
      pvarRight : LPVARIANT;
      lcid_x : LCID;
      dwFlags : ULONG
   ) return HRESULT;
   pragma import (C,VarCmp,"VarCmp");
   function VarDecAdd(
      pdecLeft : LPDECIMAL;
      pdecRight : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecAdd,"VarDecAdd");
   function VarDecDiv(
      pdecLeft : LPDECIMAL;
      pdecRight : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecDiv,"VarDecDiv");
   function VarDecMul(
      pdecLeft : LPDECIMAL;
      pdecRight : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecMul,"VarDecMul");
   function VarDecSub(
      pdecLeft : LPDECIMAL;
      pdecRight : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecSub,"VarDecSub");
   function VarDecAbs(
      pdecIn : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecAbs,"VarDecAbs");
   function VarDecFix(
      pdecIn : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecFix,"VarDecFix");
   function VarDecInt(
      pdecIn : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecInt,"VarDecInt");
   function VarDecNeg(
      pdecIn : LPDECIMAL;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecNeg,"VarDecNeg");
   function VarDecRound(
      pdecIn : LPDECIMAL;
      cDecimals : Interfaces.C.Int;
      pdecResult : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecRound,"VarDecRound");
   function VarDecCmp(
      pdecLeft : LPDECIMAL;
      pdecRight : LPDECIMAL
   ) return HRESULT;
   pragma import (C,VarDecCmp,"VarDecCmp");
   function VarDecCmpR8(
      pdecLeft : LPDECIMAL;
      dblRight : Long_Float
   ) return HRESULT;
   pragma import (C,VarDecCmpR8,"VarDecCmpR8");
   function VarCyAdd(
      cyLeft : CY;
      cyRight : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyAdd,"VarCyAdd");
   function VarCyMul(
      cyLeft : CY;
      cyRight : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyMul,"VarCyMul");
   function VarCyMulI4(
      cyLeft : CY;
      lRight : LONG;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyMulI4,"VarCyMulI4");
   function VarCyMulI8(
      cyLeft : CY;
      lRight : LONG64;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyMulI8,"VarCyMulI8");
   function VarCySub(
      cyLeft : CY;
      cyRight : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCySub,"VarCySub");
   function VarCyAbs(
      cyIn : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyAbs,"VarCyAbs");
   function VarCyFix(
      cyIn : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyFix,"VarCyFix");
   function VarCyInt(
      cyIn : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyInt,"VarCyInt");
   function VarCyNeg(
      cyIn : CY;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyNeg,"VarCyNeg");
   function VarCyRound(
      cyIn : CY;
      cDecimals : Interfaces.C.Int;
      pcyResult : LPCY
   ) return HRESULT;
   pragma import (C,VarCyRound,"VarCyRound");
   function VarCyCmp(
      cyLeft : CY;
      cyRight : CY
   ) return HRESULT;
   pragma import (C,VarCyCmp,"VarCyCmp");
   function VarCyCmpR8(
      cyLeft : CY;
      dblRight : Long_Float
   ) return HRESULT;
   pragma import (C,VarCyCmpR8,"VarCyCmpR8");
   function VarBstrCat(
      bstrLeft : BSTR;
      bstrRight : BSTR;
      pbstrResult : LPBSTR
   ) return HRESULT;
   pragma import (C,VarBstrCat,"VarBstrCat");
   function VarBstrCmp(
      bstrLeft : BSTR;
      bstrRight : BSTR;
      lcid_x : LCID;
      dwFlags : ULONG
   ) return HRESULT;
   pragma import (C,VarBstrCmp,"VarBstrCmp");
   function VarR8Pow(
      dblLeft : Long_Float;
      dblRight : Long_Float;
      pdblResult : access Long_Float
   ) return HRESULT;
   pragma import (C,VarR8Pow,"VarR8Pow");
   function VarR4CmpR8(
      fltLeft : Standard.Float;
      dblRight : Long_Float
   ) return HRESULT;
   pragma import (C,VarR4CmpR8,"VarR4CmpR8");
   function VarR8Round(
      dblIn : Long_Float;
      cDecimals : Interfaces.C.Int;
      pdblResult : access Long_Float
   ) return HRESULT;
   pragma import (C,VarR8Round,"VarR8Round");
   type UDATE is record
      st : SYSTEMTIME;
      wDayOfYear : USHORT;
   end record;
   function VarDateFromUdate(
      pudateIn : access UDATE;
      dwFlags : ULONG;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromUdate,"VarDateFromUdate");
   function VarDateFromUdateEx(
      pudateIn : access UDATE;
      lcid_x : LCID;
      dwFlags : ULONG;
      pdateOut : access DATE
   ) return HRESULT;
   pragma import (C,VarDateFromUdateEx,"VarDateFromUdateEx");
   function VarUdateFromDate(
      dateIn : DATE;
      dwFlags : ULONG;
      pudateOut : access UDATE
   ) return HRESULT;
   pragma import (C,VarUdateFromDate,"VarUdateFromDate");
   function GetAltMonthNames(
      lcid_x : LCID;
      prgp : access SNB
   ) return HRESULT;
   pragma import (C,GetAltMonthNames,"GetAltMonthNames");
   function VarFormat(
      pvarIn : LPVARIANT;
      pstrFormat : LPOLESTR;
      iFirstDay : Interfaces.C.Int;
      iFirstWeek : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarFormat,"VarFormat");
   function VarFormatDateTime(
      pvarIn : LPVARIANT;
      iNamedFormat : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarFormatDateTime,"VarFormatDateTime");
   function VarFormatNumber(
      pvarIn : LPVARIANT;
      iNumDig : Interfaces.C.Int;
      iIncLead : Interfaces.C.Int;
      iUseParens : Interfaces.C.Int;
      iGroup : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarFormatNumber,"VarFormatNumber");
   function VarFormatPercent(
      pvarIn : LPVARIANT;
      iNumDig : Interfaces.C.Int;
      iIncLead : Interfaces.C.Int;
      iUseParens : Interfaces.C.Int;
      iGroup : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarFormatPercent,"VarFormatPercent");
   function VarFormatCurrency(
      pvarIn : LPVARIANT;
      iNumDig : Interfaces.C.Int;
      iIncLead : Interfaces.C.Int;
      iUseParens : Interfaces.C.Int;
      iGroup : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarFormatCurrency,"VarFormatCurrency");
   function VarWeekdayName(
      iWeekday : Interfaces.C.Int;
      fAbbrev : Interfaces.C.Int;
      iFirstDay : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarWeekdayName,"VarWeekdayName");
   function VarMonthName(
      iMonth : Interfaces.C.Int;
      fAbbrev : Interfaces.C.Int;
      dwFlags : ULONG;
      pbstrOut : access BSTR
   ) return HRESULT;
   pragma import (C,VarMonthName,"VarMonthName");
   function VarFormatFromTokens(
      pvarIn : LPVARIANT;
      pstrFormat : LPOLESTR;
      pbTokCur : LPBYTE;
      dwFlags : ULONG;
      pbstrOut : access BSTR;
      lcid_x : LCID
   ) return HRESULT;
   pragma import (C,VarFormatFromTokens,"VarFormatFromTokens");
   function VarTokenizeFormatString(
      pstrFormat : LPOLESTR;
      rgbTok : LPBYTE;
      cbTok : Interfaces.C.Int;
      iFirstDay : Interfaces.C.Int;
      iFirstWeek : Interfaces.C.Int;
      lcid_x : LCID;
      pcbActual : access Interfaces.C.Int
   ) return HRESULT;
   pragma import (C,VarTokenizeFormatString,"VarTokenizeFormatString");
   function LHashValOfNameSysA(
      syskind_x : SYSKIND;
      lcid_x : LCID;
      szName : LPCSTR
   ) return ULONG;
   pragma import (C,LHashValOfNameSysA,"LHashValOfNameSysA");
   function LHashValOfNameSys(
      syskind_x : SYSKIND;
      lcid_x : LCID;
      szName : access constant OLECHAR
   ) return ULONG;
   pragma import (C,LHashValOfNameSys,"LHashValOfNameSys");
   function LoadTypeLib(
      szFile : LPCOLESTR;
      pptlib : access LPTYPELIB
   ) return HRESULT;
   pragma import (C,LoadTypeLib,"LoadTypeLib");
   type tagREGKIND is (
      REGKIND_DEFAULT,
      REGKIND_REGISTER,
      REGKIND_NONE
   );
   for tagREGKIND use (
      REGKIND_DEFAULT => 0,
      REGKIND_REGISTER => 1,
      REGKIND_NONE => 2
   );
   for tagREGKIND'Size use 32;
   subtype REGKIND is tagREGKIND; -- CXType_Elaborated
   function LoadTypeLibEx(
      szFile : LPCOLESTR;
      regkind_x : REGKIND;
      pptlib : access LPTYPELIB
   ) return HRESULT;
   pragma import (C,LoadTypeLibEx,"LoadTypeLibEx");
   function LoadRegTypeLib(
      rguid : access constant GUID;
      wVerMajor : WORD;
      wVerMinor : WORD;
      lcid_x : LCID;
      pptlib : access LPTYPELIB
   ) return HRESULT;
   pragma import (C,LoadRegTypeLib,"LoadRegTypeLib");
   function QueryPathOfRegTypeLib(
      guid_x : access constant GUID;
      wMaj : USHORT;
      wMin : USHORT;
      lcid_x : LCID;
      lpbstrPathName : LPBSTR
   ) return HRESULT;
   pragma import (C,QueryPathOfRegTypeLib,"QueryPathOfRegTypeLib");
   function RegisterTypeLib(
      ptlib : access ITypeLib;
      szFullPath : LPCOLESTR;
      szHelpDir : LPCOLESTR
   ) return HRESULT;
   pragma import (C,RegisterTypeLib,"RegisterTypeLib");
   function UnRegisterTypeLib(
      libID : access constant GUID;
      wVerMajor : WORD;
      wVerMinor : WORD;
      lcid_x : LCID;
      syskind_x : SYSKIND
   ) return HRESULT;
   pragma import (C,UnRegisterTypeLib,"UnRegisterTypeLib");
   function RegisterTypeLibForUser(
      ptlib : access ITypeLib;
      szFullPath : access OLECHAR;
      szHelpDir : access OLECHAR
   ) return HRESULT;
   pragma import (C,RegisterTypeLibForUser,"RegisterTypeLibForUser");
   function UnRegisterTypeLibForUser(
      libID : access constant GUID;
      wMajorVerNum : WORD;
      wMinorVerNum : WORD;
      lcid_x : LCID;
      syskind_x : SYSKIND
   ) return HRESULT;
   pragma import (C,UnRegisterTypeLibForUser,"UnRegisterTypeLibForUser");
   function CreateTypeLib(
      syskind_x : SYSKIND;
      szFile : LPCOLESTR;
      ppctlib : access LPCREATETYPELIB
   ) return HRESULT;
   pragma import (C,CreateTypeLib,"CreateTypeLib");
   function CreateTypeLib2(
      syskind_x : SYSKIND;
      szFile : LPCOLESTR;
      ppctlib : access LPCREATETYPELIB2
   ) return HRESULT;
   pragma import (C,CreateTypeLib2,"CreateTypeLib2");
   type tagPARAMDATA is record
      szName : access OLECHAR;
      vt : VARTYPE;
   end record;
   subtype PARAMDATA is tagPARAMDATA; -- CXType_Elaborated
   type LPPARAMDATA is access tagPARAMDATA; -- CXType_Pointer - CXType_Elaborated
   type tagMETHODDATA is record
      szName : access OLECHAR;
      ppdata : access PARAMDATA;
      dispid_x : DISPID;
      iMeth : UINT;
      cc : CALLCONV;
      cArgs : UINT;
      wFlags : WORD;
      vtReturn : VARTYPE;
   end record;
   subtype METHODDATA is tagMETHODDATA; -- CXType_Elaborated
   type LPMETHODDATA is access tagMETHODDATA; -- CXType_Pointer - CXType_Elaborated
   type tagINTERFACEDATA is record
      pmethdata : access METHODDATA;
      cMembers : UINT;
   end record;
   subtype INTERFACEDATA is tagINTERFACEDATA; -- CXType_Elaborated
   type LPINTERFACEDATA is access tagINTERFACEDATA; -- CXType_Pointer - CXType_Elaborated
   function DispGetParam(
      pdispparams : access DISPPARAMS;
      position : UINT;
      vtTarg : VARTYPE;
      pvarResult : access VARIANT;
      puArgErr : access UINT
   ) return HRESULT;
   pragma import (C,DispGetParam,"DispGetParam");
   function DispGetIDsOfNames(
      ptinfo : access ITypeInfo;
      rgszNames : access LPOLESTR;
      cNames : UINT;
      rgdispid : access DISPID
   ) return HRESULT;
   pragma import (C,DispGetIDsOfNames,"DispGetIDsOfNames");
   function DispInvoke(
      this : access Void;
      ptinfo : access ITypeInfo;
      dispidMember : DISPID;
      wFlags : WORD;
      pparams : access DISPPARAMS;
      pvarResult : access VARIANT;
      pexcepinfo : access EXCEPINFO;
      puArgErr : access UINT
   ) return HRESULT;
   pragma import (C,DispInvoke,"DispInvoke");
   function CreateDispTypeInfo(
      pidata : access INTERFACEDATA;
      lcid_x : LCID;
      pptinfo : access LPTYPEINFO
   ) return HRESULT;
   pragma import (C,CreateDispTypeInfo,"CreateDispTypeInfo");
   function CreateStdDispatch(
      punkOuter : access IUnknown;
      pvThis : access Void;
      ptinfo : access ITypeInfo;
      ppunkStdDisp : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,CreateStdDispatch,"CreateStdDispatch");
   type VARIANTARG_Ptr is access all VARIANTARG; -- Auto Generated Dependancy
   function DispCallFunc(
      pvInstance : access Void;
      oVft : ULONG_PTR;
      cc : CALLCONV;
      vtReturn : VARTYPE;
      cActuals : UINT;
      prgvt : access VARTYPE;
      prgpvarg : access VARIANTARG_Ptr;
      pvargResult : access VARIANT
   ) return HRESULT;
   pragma import (C,DispCallFunc,"DispCallFunc");
   function RegisterActiveObject(
      punk : access IUnknown;
      rclsid : access constant IID;
      dwFlags : DWORD;
      pdwRegister : access DWORD
   ) return HRESULT;
   pragma import (C,RegisterActiveObject,"RegisterActiveObject");
   function RevokeActiveObject(
      dwRegister : DWORD;
      pvReserved : access Void
   ) return HRESULT;
   pragma import (C,RevokeActiveObject,"RevokeActiveObject");
   function GetActiveObject(
      rclsid : access constant IID;
      pvReserved : access Void;
      ppunk : access LPUNKNOWN
   ) return HRESULT;
   pragma import (C,GetActiveObject,"GetActiveObject");
   function SetErrorInfo(
      dwReserved : ULONG;
      perrinfo : access IErrorInfo
   ) return HRESULT;
   pragma import (C,SetErrorInfo,"SetErrorInfo");
   function GetErrorInfo(
      dwReserved : ULONG;
      pperrinfo : access LPERRORINFO
   ) return HRESULT;
   pragma import (C,GetErrorInfo,"GetErrorInfo");
   function CreateErrorInfo(
      pperrinfo : access LPCREATEERRORINFO
   ) return HRESULT;
   pragma import (C,CreateErrorInfo,"CreateErrorInfo");
   function GetRecordInfoFromTypeInfo(
      pTypeInfo : access ITypeInfo;
      ppRecInfo : access LPRECORDINFO
   ) return HRESULT;
   pragma import (C,GetRecordInfoFromTypeInfo,"GetRecordInfoFromTypeInfo");
   function GetRecordInfoFromGuids(
      rGuidTypeLib : access constant GUID;
      uVerMajor : ULONG;
      uVerMinor : ULONG;
      lcid_x : LCID;
      rGuidTypeInfo : access constant GUID;
      ppRecInfo : access LPRECORDINFO
   ) return HRESULT;
   pragma import (C,GetRecordInfoFromGuids,"GetRecordInfoFromGuids");
   function OaBuildVersion return ULONG;
   pragma import (C,OaBuildVersion,"OaBuildVersion");
   procedure ClearCustData(
      pCustData : LPCUSTDATA
   );
   pragma import (C,ClearCustData,"ClearCustData");
   procedure OaEnablePerUserTLibRegistration;
   pragma import (C,OaEnablePerUserTLibRegistration,"OaEnablePerUserTLibRegistration");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um/ole2.h>
   function OleBuildVersion return DWORD;
   pragma import (C,OleBuildVersion,"OleBuildVersion");
   function WriteFmtUserTypeStg(
      pstg : LPSTORAGE;
      cf : CLIPFORMAT;
      lpszUserType : LPOLESTR
   ) return HRESULT;
   pragma import (C,WriteFmtUserTypeStg,"WriteFmtUserTypeStg");
   function ReadFmtUserTypeStg(
      pstg : LPSTORAGE;
      pcf : access CLIPFORMAT;
      lplpszUserType : access LPOLESTR
   ) return HRESULT;
   pragma import (C,ReadFmtUserTypeStg,"ReadFmtUserTypeStg");
   function OleInitialize(
      pvReserved : LPVOID
   ) return HRESULT;
   pragma import (C,OleInitialize,"OleInitialize");
   procedure OleUninitialize;
   pragma import (C,OleUninitialize,"OleUninitialize");
   function OleQueryLinkFromData(
      pSrcDataObject : LPDATAOBJECT
   ) return HRESULT;
   pragma import (C,OleQueryLinkFromData,"OleQueryLinkFromData");
   function OleQueryCreateFromData(
      pSrcDataObject : LPDATAOBJECT
   ) return HRESULT;
   pragma import (C,OleQueryCreateFromData,"OleQueryCreateFromData");
   function OleCreate(
      rclsid : access constant IID;
      riid : access constant IID;
      renderopt : DWORD;
      pFormatEtc : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreate,"OleCreate");
   function OleCreateEx(
      rclsid : access constant IID;
      riid : access constant IID;
      dwFlags : DWORD;
      renderopt : DWORD;
      cFormats : ULONG;
      rgAdvf : access DWORD;
      rgFormatEtc : LPFORMATETC;
      lpAdviseSink_x : access IAdviseSink;
      rgdwConnection : access DWORD;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateEx,"OleCreateEx");
   function OleCreateFromData(
      pSrcDataObj : LPDATAOBJECT;
      riid : access constant IID;
      renderopt : DWORD;
      pFormatEtc : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateFromData,"OleCreateFromData");
   function OleCreateFromDataEx(
      pSrcDataObj : LPDATAOBJECT;
      riid : access constant IID;
      dwFlags : DWORD;
      renderopt : DWORD;
      cFormats : ULONG;
      rgAdvf : access DWORD;
      rgFormatEtc : LPFORMATETC;
      lpAdviseSink_x : access IAdviseSink;
      rgdwConnection : access DWORD;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateFromDataEx,"OleCreateFromDataEx");
   function OleCreateLinkFromData(
      pSrcDataObj : LPDATAOBJECT;
      riid : access constant IID;
      renderopt : DWORD;
      pFormatEtc : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateLinkFromData,"OleCreateLinkFromData");
   function OleCreateLinkFromDataEx(
      pSrcDataObj : LPDATAOBJECT;
      riid : access constant IID;
      dwFlags : DWORD;
      renderopt : DWORD;
      cFormats : ULONG;
      rgAdvf : access DWORD;
      rgFormatEtc : LPFORMATETC;
      lpAdviseSink_x : access IAdviseSink;
      rgdwConnection : access DWORD;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateLinkFromDataEx,"OleCreateLinkFromDataEx");
   function OleCreateStaticFromData(
      pSrcDataObj : LPDATAOBJECT;
      iid_x : access constant IID;
      renderopt : DWORD;
      pFormatEtc : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateStaticFromData,"OleCreateStaticFromData");
   function OleCreateLink(
      pmkLinkSrc : LPMONIKER;
      riid : access constant IID;
      renderopt : DWORD;
      lpFormatEtc_x : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateLink,"OleCreateLink");
   function OleCreateLinkEx(
      pmkLinkSrc : LPMONIKER;
      riid : access constant IID;
      dwFlags : DWORD;
      renderopt : DWORD;
      cFormats : ULONG;
      rgAdvf : access DWORD;
      rgFormatEtc : LPFORMATETC;
      lpAdviseSink_x : access IAdviseSink;
      rgdwConnection : access DWORD;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateLinkEx,"OleCreateLinkEx");
   function OleCreateLinkToFile(
      lpszFileName : LPCOLESTR;
      riid : access constant IID;
      renderopt : DWORD;
      lpFormatEtc_x : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateLinkToFile,"OleCreateLinkToFile");
   function OleCreateLinkToFileEx(
      lpszFileName : LPCOLESTR;
      riid : access constant IID;
      dwFlags : DWORD;
      renderopt : DWORD;
      cFormats : ULONG;
      rgAdvf : access DWORD;
      rgFormatEtc : LPFORMATETC;
      lpAdviseSink_x : access IAdviseSink;
      rgdwConnection : access DWORD;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateLinkToFileEx,"OleCreateLinkToFileEx");
   function OleCreateFromFile(
      rclsid : access constant IID;
      lpszFileName : LPCOLESTR;
      riid : access constant IID;
      renderopt : DWORD;
      lpFormatEtc_x : LPFORMATETC;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateFromFile,"OleCreateFromFile");
   function OleCreateFromFileEx(
      rclsid : access constant IID;
      lpszFileName : LPCOLESTR;
      riid : access constant IID;
      dwFlags : DWORD;
      renderopt : DWORD;
      cFormats : ULONG;
      rgAdvf : access DWORD;
      rgFormatEtc : LPFORMATETC;
      lpAdviseSink_x : access IAdviseSink;
      rgdwConnection : access DWORD;
      pClientSite : LPOLECLIENTSITE;
      pStg : LPSTORAGE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateFromFileEx,"OleCreateFromFileEx");
   function OleLoad(
      pStg : LPSTORAGE;
      riid : access constant IID;
      pClientSite : LPOLECLIENTSITE;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleLoad,"OleLoad");
   function OleSave(
      pPS : LPPERSISTSTORAGE;
      pStg : LPSTORAGE;
      fSameAsLoad : BOOL
   ) return HRESULT;
   pragma import (C,OleSave,"OleSave");
   function OleLoadFromStream(
      pStm : LPSTREAM;
      iidInterface : access constant IID;
      ppvObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleLoadFromStream,"OleLoadFromStream");
   function OleSaveToStream(
      pPStm : LPPERSISTSTREAM;
      pStm : LPSTREAM
   ) return HRESULT;
   pragma import (C,OleSaveToStream,"OleSaveToStream");
   function OleSetContainedObject(
      pUnknown : LPUNKNOWN;
      fContained : BOOL
   ) return HRESULT;
   pragma import (C,OleSetContainedObject,"OleSetContainedObject");
   function OleNoteObjectVisible(
      pUnknown : LPUNKNOWN;
      fVisible : BOOL
   ) return HRESULT;
   pragma import (C,OleNoteObjectVisible,"OleNoteObjectVisible");
   function RegisterDragDrop(
      hwnd_x : HWND;
      pDropTarget : LPDROPTARGET
   ) return HRESULT;
   pragma import (C,RegisterDragDrop,"RegisterDragDrop");
   function RevokeDragDrop(
      hwnd_x : HWND
   ) return HRESULT;
   pragma import (C,RevokeDragDrop,"RevokeDragDrop");
   function DoDragDrop(
      pDataObj : LPDATAOBJECT;
      pDropSource : LPDROPSOURCE;
      dwOKEffects : DWORD;
      pdwEffect : LPDWORD
   ) return HRESULT;
   pragma import (C,DoDragDrop,"DoDragDrop");
   function OleSetClipboard(
      pDataObj : LPDATAOBJECT
   ) return HRESULT;
   pragma import (C,OleSetClipboard,"OleSetClipboard");
   function OleGetClipboard(
      ppDataObj : access LPDATAOBJECT
   ) return HRESULT;
   pragma import (C,OleGetClipboard,"OleGetClipboard");
   function OleGetClipboardWithEnterpriseInfo(
      dataObject : access LPDATAOBJECT;
      dataEnterpriseId : access PWSTR;
      sourceDescription : access PWSTR;
      targetDescription : access PWSTR;
      dataDescription : access PWSTR
   ) return HRESULT;
   pragma import (C,OleGetClipboardWithEnterpriseInfo,"OleGetClipboardWithEnterpriseInfo");
   function OleFlushClipboard return HRESULT;
   pragma import (C,OleFlushClipboard,"OleFlushClipboard");
   function OleIsCurrentClipboard(
      pDataObj : LPDATAOBJECT
   ) return HRESULT;
   pragma import (C,OleIsCurrentClipboard,"OleIsCurrentClipboard");
   function OleCreateMenuDescriptor(
      hmenuCombined : HMENU;
      lpMenuWidths : LPOLEMENUGROUPWIDTHS
   ) return HOLEMENU;
   pragma import (C,OleCreateMenuDescriptor,"OleCreateMenuDescriptor");
   function OleSetMenuDescriptor(
      holemenu_x : HOLEMENU;
      hwndFrame : HWND;
      hwndActiveObject : HWND;
      lpFrame : LPOLEINPLACEFRAME;
      lpActiveObj : LPOLEINPLACEACTIVEOBJECT
   ) return HRESULT;
   pragma import (C,OleSetMenuDescriptor,"OleSetMenuDescriptor");
   function OleDestroyMenuDescriptor(
      holemenu_x : HOLEMENU
   ) return HRESULT;
   pragma import (C,OleDestroyMenuDescriptor,"OleDestroyMenuDescriptor");
   function OleTranslateAccelerator(
      lpFrame : LPOLEINPLACEFRAME;
      lpFrameInfo : LPOLEINPLACEFRAMEINFO;
      lpmsg_x : LPMSG
   ) return HRESULT;
   pragma import (C,OleTranslateAccelerator,"OleTranslateAccelerator");
   function OleDuplicateData(
      hSrc : HANDLE;
      cfFormat : CLIPFORMAT;
      uiFlags : UINT
   ) return HANDLE;
   pragma import (C,OleDuplicateData,"OleDuplicateData");
   function OleDraw(
      pUnknown : LPUNKNOWN;
      dwAspect : DWORD;
      hdcDraw : HDC;
      lprcBounds : LPCRECT
   ) return HRESULT;
   pragma import (C,OleDraw,"OleDraw");
   function OleRun(
      pUnknown : LPUNKNOWN
   ) return HRESULT;
   pragma import (C,OleRun,"OleRun");
   function OleIsRunning(
      pObject : LPOLEOBJECT
   ) return BOOL;
   pragma import (C,OleIsRunning,"OleIsRunning");
   function OleLockRunning(
      pUnknown : LPUNKNOWN;
      fLock : BOOL;
      fLastUnlockCloses : BOOL
   ) return HRESULT;
   pragma import (C,OleLockRunning,"OleLockRunning");
   procedure ReleaseStgMedium(
      param1 : LPSTGMEDIUM
   );
   pragma import (C,ReleaseStgMedium,"ReleaseStgMedium");
   function CreateOleAdviseHolder(
      ppOAHolder : access LPOLEADVISEHOLDER
   ) return HRESULT;
   pragma import (C,CreateOleAdviseHolder,"CreateOleAdviseHolder");
   function OleCreateDefaultHandler(
      clsid_x : access constant IID;
      pUnkOuter : LPUNKNOWN;
      riid : access constant IID;
      lplpObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateDefaultHandler,"OleCreateDefaultHandler");
   function OleCreateEmbeddingHelper(
      clsid_x : access constant IID;
      pUnkOuter : LPUNKNOWN;
      flags : DWORD;
      pCF : LPCLASSFACTORY;
      riid : access constant IID;
      lplpObj : access LPVOID
   ) return HRESULT;
   pragma import (C,OleCreateEmbeddingHelper,"OleCreateEmbeddingHelper");
   function IsAccelerator(
      hAccel_x : HACCEL;
      cAccelEntries : Interfaces.C.Int;
      lpMsg_x : LPMSG;
      lpwCmd : access WORD
   ) return BOOL;
   pragma import (C,IsAccelerator,"IsAccelerator");
   function OleGetIconOfFile(
      lpszPath : LPOLESTR;
      fUseFileAsLabel : BOOL
   ) return HGLOBAL;
   pragma import (C,OleGetIconOfFile,"OleGetIconOfFile");
   function OleGetIconOfClass(
      rclsid : access constant IID;
      lpszLabel : LPOLESTR;
      fUseTypeAsLabel : BOOL
   ) return HGLOBAL;
   pragma import (C,OleGetIconOfClass,"OleGetIconOfClass");
   function OleMetafilePictFromIconAndLabel(
      hIcon_x : HICON;
      lpszLabel : LPOLESTR;
      lpszSourceFile : LPOLESTR;
      iIconIndex : UINT
   ) return HGLOBAL;
   pragma import (C,OleMetafilePictFromIconAndLabel,"OleMetafilePictFromIconAndLabel");
   function OleRegGetUserType(
      clsid_x : access constant IID;
      dwFormOfType : DWORD;
      pszUserType : access LPOLESTR
   ) return HRESULT;
   pragma import (C,OleRegGetUserType,"OleRegGetUserType");
   function OleRegGetMiscStatus(
      clsid_x : access constant IID;
      dwAspect : DWORD;
      pdwStatus : access DWORD
   ) return HRESULT;
   pragma import (C,OleRegGetMiscStatus,"OleRegGetMiscStatus");
   function OleRegEnumFormatEtc(
      clsid_x : access constant IID;
      dwDirection : DWORD;
      ppenum : access LPENUMFORMATETC
   ) return HRESULT;
   pragma import (C,OleRegEnumFormatEtc,"OleRegEnumFormatEtc");
   function OleRegEnumVerbs(
      clsid_x : access constant IID;
      ppenum : access LPENUMOLEVERB
   ) return HRESULT;
   pragma import (C,OleRegEnumVerbs,"OleRegEnumVerbs");
   type OLESTREAM_x; -- Forward Declaration
   type LPOLESTREAM is access OLESTREAM_x; -- CXType_Pointer - CXType_Elaborated
   type OLESTREAMVTBL_x is record
      Get : access System.Address;
      Put : access System.Address;
   end record;
   subtype OLESTREAMVTBL is OLESTREAMVTBL_x; -- CXType_Elaborated
   type LPOLESTREAMVTBL is access OLESTREAMVTBL; -- CXType_Pointer - CXType_Typedef
   type OLESTREAM_x is record
      lpstbl : LPOLESTREAMVTBL;
   end record;
   subtype OLESTREAM is OLESTREAM_x; -- CXType_Elaborated
   function OleConvertOLESTREAMToIStorage(
      lpolestream_x : LPOLESTREAM;
      pstg : LPSTORAGE;
      ptd : access constant DVTARGETDEVICE
   ) return HRESULT;
   pragma import (C,OleConvertOLESTREAMToIStorage,"OleConvertOLESTREAMToIStorage");
   function OleConvertIStorageToOLESTREAM(
      pstg : LPSTORAGE;
      lpolestream_x : LPOLESTREAM
   ) return HRESULT;
   pragma import (C,OleConvertIStorageToOLESTREAM,"OleConvertIStorageToOLESTREAM");
   function OleDoAutoConvert(
      pStg : LPSTORAGE;
      pClsidNew : LPCLSID
   ) return HRESULT;
   pragma import (C,OleDoAutoConvert,"OleDoAutoConvert");
   function OleGetAutoConvert(
      clsidOld : access constant IID;
      pClsidNew : LPCLSID
   ) return HRESULT;
   pragma import (C,OleGetAutoConvert,"OleGetAutoConvert");
   function OleSetAutoConvert(
      clsidOld : access constant IID;
      clsidNew : access constant IID
   ) return HRESULT;
   pragma import (C,OleSetAutoConvert,"OleSetAutoConvert");
   function SetConvertStg(
      pStg : LPSTORAGE;
      fConvert : BOOL
   ) return HRESULT;
   pragma import (C,SetConvertStg,"SetConvertStg");
   function OleConvertIStorageToOLESTREAMEx(
      pstg : LPSTORAGE;
      cfFormat : CLIPFORMAT;
      lWidth : LONG;
      lHeight : LONG;
      dwSize : DWORD;
      pmedium : LPSTGMEDIUM;
      polestm : LPOLESTREAM
   ) return HRESULT;
   pragma import (C,OleConvertIStorageToOLESTREAMEx,"OleConvertIStorageToOLESTREAMEx");
   function OleConvertOLESTREAMToIStorageEx(
      polestm : LPOLESTREAM;
      pstg : LPSTORAGE;
      pcfFormat : access CLIPFORMAT;
      plwWidth : access LONG;
      plHeight : access LONG;
      pdwSize : access DWORD;
      pmedium : LPSTGMEDIUM
   ) return HRESULT;
   pragma import (C,OleConvertOLESTREAMToIStorageEx,"OleConvertOLESTREAMToIStorageEx");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\commdlg.h>
   subtype LPOFNHOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   type tagOFN_NT4A is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      lpstrFilter : LPCSTR;
      lpstrCustomFilter : LPSTR;
      nMaxCustFilter : DWORD;
      nFilterIndex : DWORD;
      lpstrFile : LPSTR;
      nMaxFile : DWORD;
      lpstrFileTitle : LPSTR;
      nMaxFileTitle : DWORD;
      lpstrInitialDir : LPCSTR;
      lpstrTitle : LPCSTR;
      Flags : DWORD;
      nFileOffset : WORD;
      nFileExtension : WORD;
      lpstrDefExt : LPCSTR;
      lCustData : LPARAM;
      lpfnHook : LPOFNHOOKPROC;
      lpTemplateName : LPCSTR;
   end record;
   subtype OPENFILENAME_NT4A is tagOFN_NT4A; -- CXType_Elaborated
   type LPOPENFILENAME_NT4A is access tagOFN_NT4A; -- CXType_Pointer - CXType_Elaborated
   type tagOFN_NT4W is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      lpstrFilter : LPCWSTR;
      lpstrCustomFilter : LPWSTR;
      nMaxCustFilter : DWORD;
      nFilterIndex : DWORD;
      lpstrFile : LPWSTR;
      nMaxFile : DWORD;
      lpstrFileTitle : LPWSTR;
      nMaxFileTitle : DWORD;
      lpstrInitialDir : LPCWSTR;
      lpstrTitle : LPCWSTR;
      Flags : DWORD;
      nFileOffset : WORD;
      nFileExtension : WORD;
      lpstrDefExt : LPCWSTR;
      lCustData : LPARAM;
      lpfnHook : LPOFNHOOKPROC;
      lpTemplateName : LPCWSTR;
   end record;
   subtype OPENFILENAME_NT4W is tagOFN_NT4W; -- CXType_Elaborated
   type LPOPENFILENAME_NT4W is access tagOFN_NT4W; -- CXType_Pointer - CXType_Elaborated
   subtype OPENFILENAME_NT4 is OPENFILENAME_NT4A; -- CXType_Typedef
   subtype LPOPENFILENAME_NT4 is LPOPENFILENAME_NT4A; -- CXType_Typedef
   type tagOFNA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      lpstrFilter : LPCSTR;
      lpstrCustomFilter : LPSTR;
      nMaxCustFilter : DWORD;
      nFilterIndex : DWORD;
      lpstrFile : LPSTR;
      nMaxFile : DWORD;
      lpstrFileTitle : LPSTR;
      nMaxFileTitle : DWORD;
      lpstrInitialDir : LPCSTR;
      lpstrTitle : LPCSTR;
      Flags : DWORD;
      nFileOffset : WORD;
      nFileExtension : WORD;
      lpstrDefExt : LPCSTR;
      lCustData : LPARAM;
      lpfnHook : LPOFNHOOKPROC;
      lpTemplateName : LPCSTR;
      pvReserved : access Void;
      dwReserved : DWORD;
      FlagsEx : DWORD;
   end record;
   subtype OPENFILENAMEA is tagOFNA; -- CXType_Elaborated
   type LPOPENFILENAMEA is access tagOFNA; -- CXType_Pointer - CXType_Elaborated
   type tagOFNW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      lpstrFilter : LPCWSTR;
      lpstrCustomFilter : LPWSTR;
      nMaxCustFilter : DWORD;
      nFilterIndex : DWORD;
      lpstrFile : LPWSTR;
      nMaxFile : DWORD;
      lpstrFileTitle : LPWSTR;
      nMaxFileTitle : DWORD;
      lpstrInitialDir : LPCWSTR;
      lpstrTitle : LPCWSTR;
      Flags : DWORD;
      nFileOffset : WORD;
      nFileExtension : WORD;
      lpstrDefExt : LPCWSTR;
      lCustData : LPARAM;
      lpfnHook : LPOFNHOOKPROC;
      lpTemplateName : LPCWSTR;
      pvReserved : access Void;
      dwReserved : DWORD;
      FlagsEx : DWORD;
   end record;
   subtype OPENFILENAMEW is tagOFNW; -- CXType_Elaborated
   type LPOPENFILENAMEW is access tagOFNW; -- CXType_Pointer - CXType_Elaborated
   subtype OPENFILENAME is OPENFILENAMEA; -- CXType_Typedef
   subtype LPOPENFILENAME is LPOPENFILENAMEA; -- CXType_Typedef
   function GetOpenFileNameA(
      param1 : LPOPENFILENAMEA
   ) return BOOL;
   pragma import (C,GetOpenFileNameA,"GetOpenFileNameA");
   function GetOpenFileNameW(
      param1 : LPOPENFILENAMEW
   ) return BOOL;
   pragma import (C,GetOpenFileNameW,"GetOpenFileNameW");
   function GetSaveFileNameA(
      param1 : LPOPENFILENAMEA
   ) return BOOL;
   pragma import (C,GetSaveFileNameA,"GetSaveFileNameA");
   function GetSaveFileNameW(
      param1 : LPOPENFILENAMEW
   ) return BOOL;
   pragma import (C,GetSaveFileNameW,"GetSaveFileNameW");
   function GetFileTitleA(
      param1 : LPCSTR;
      Buf : LPSTR;
      cchSize : WORD
   ) return Interfaces.C.Short;
   pragma import (C,GetFileTitleA,"GetFileTitleA");
   function GetFileTitleW(
      param1 : LPCWSTR;
      Buf : LPWSTR;
      cchSize : WORD
   ) return Interfaces.C.Short;
   pragma import (C,GetFileTitleW,"GetFileTitleW");
   subtype LPCCHOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   type OFNOTIFYA_x is record
      hdr : NMHDR;
      lpOFN : LPOPENFILENAMEA;
      pszFile : LPSTR;
   end record;
   subtype OFNOTIFYA is OFNOTIFYA_x; -- CXType_Elaborated
   type LPOFNOTIFYA is access OFNOTIFYA_x; -- CXType_Pointer - CXType_Elaborated
   type OFNOTIFYW_x is record
      hdr : NMHDR;
      lpOFN : LPOPENFILENAMEW;
      pszFile : LPWSTR;
   end record;
   subtype OFNOTIFYW is OFNOTIFYW_x; -- CXType_Elaborated
   type LPOFNOTIFYW is access OFNOTIFYW_x; -- CXType_Pointer - CXType_Elaborated
   subtype OFNOTIFY is OFNOTIFYA; -- CXType_Typedef
   subtype LPOFNOTIFY is LPOFNOTIFYA; -- CXType_Typedef
   type OFNOTIFYEXA_x is record
      hdr : NMHDR;
      lpOFN : LPOPENFILENAMEA;
      psf : LPVOID;
      pidl : LPVOID;
   end record;
   subtype OFNOTIFYEXA is OFNOTIFYEXA_x; -- CXType_Elaborated
   type LPOFNOTIFYEXA is access OFNOTIFYEXA_x; -- CXType_Pointer - CXType_Elaborated
   type OFNOTIFYEXW_x is record
      hdr : NMHDR;
      lpOFN : LPOPENFILENAMEW;
      psf : LPVOID;
      pidl : LPVOID;
   end record;
   subtype OFNOTIFYEXW is OFNOTIFYEXW_x; -- CXType_Elaborated
   type LPOFNOTIFYEXW is access OFNOTIFYEXW_x; -- CXType_Pointer - CXType_Elaborated
   subtype OFNOTIFYEX is OFNOTIFYEXA; -- CXType_Typedef
   subtype LPOFNOTIFYEX is LPOFNOTIFYEXA; -- CXType_Typedef
   type tagCHOOSECOLORA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HWND;
      rgbResult : COLORREF;
      lpCustColors : access COLORREF;
      Flags : DWORD;
      lCustData : LPARAM;
      lpfnHook : LPCCHOOKPROC;
      lpTemplateName : LPCSTR;
   end record;
   subtype CHOOSECOLORA is tagCHOOSECOLORA; -- CXType_Elaborated
   type LPCHOOSECOLORA is access tagCHOOSECOLORA; -- CXType_Pointer - CXType_Elaborated
   type tagCHOOSECOLORW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HWND;
      rgbResult : COLORREF;
      lpCustColors : access COLORREF;
      Flags : DWORD;
      lCustData : LPARAM;
      lpfnHook : LPCCHOOKPROC;
      lpTemplateName : LPCWSTR;
   end record;
   subtype CHOOSECOLORW is tagCHOOSECOLORW; -- CXType_Elaborated
   type LPCHOOSECOLORW is access tagCHOOSECOLORW; -- CXType_Pointer - CXType_Elaborated
   subtype CHOOSECOLOR is CHOOSECOLORA; -- CXType_Typedef
   subtype LPCHOOSECOLOR is LPCHOOSECOLORA; -- CXType_Typedef
   function ChooseColorA_x(
      param1 : LPCHOOSECOLORA
   ) return BOOL;
   pragma import (C,ChooseColorA_x,"ChooseColorA");
   function ChooseColorW_x(
      param1 : LPCHOOSECOLORW
   ) return BOOL;
   pragma import (C,ChooseColorW_x,"ChooseColorW");
   subtype LPFRHOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   type tagFINDREPLACEA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      Flags : DWORD;
      lpstrFindWhat : LPSTR;
      lpstrReplaceWith : LPSTR;
      wFindWhatLen : WORD;
      wReplaceWithLen : WORD;
      lCustData : LPARAM;
      lpfnHook : LPFRHOOKPROC;
      lpTemplateName : LPCSTR;
   end record;
   subtype FINDREPLACEA is tagFINDREPLACEA; -- CXType_Elaborated
   type LPFINDREPLACEA is access tagFINDREPLACEA; -- CXType_Pointer - CXType_Elaborated
   type tagFINDREPLACEW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hInstance_x : HINSTANCE;
      Flags : DWORD;
      lpstrFindWhat : LPWSTR;
      lpstrReplaceWith : LPWSTR;
      wFindWhatLen : WORD;
      wReplaceWithLen : WORD;
      lCustData : LPARAM;
      lpfnHook : LPFRHOOKPROC;
      lpTemplateName : LPCWSTR;
   end record;
   subtype FINDREPLACEW is tagFINDREPLACEW; -- CXType_Elaborated
   type LPFINDREPLACEW is access tagFINDREPLACEW; -- CXType_Pointer - CXType_Elaborated
   subtype FINDREPLACE is FINDREPLACEA; -- CXType_Typedef
   subtype LPFINDREPLACE is LPFINDREPLACEA; -- CXType_Typedef
   function FindTextA(
      param1 : LPFINDREPLACEA
   ) return HWND;
   pragma import (C,FindTextA,"FindTextA");
   function FindTextW(
      param1 : LPFINDREPLACEW
   ) return HWND;
   pragma import (C,FindTextW,"FindTextW");
   function ReplaceTextA(
      param1 : LPFINDREPLACEA
   ) return HWND;
   pragma import (C,ReplaceTextA,"ReplaceTextA");
   function ReplaceTextW(
      param1 : LPFINDREPLACEW
   ) return HWND;
   pragma import (C,ReplaceTextW,"ReplaceTextW");
   subtype LPCFHOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   type tagCHOOSEFONTA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDC_x : HDC;
      lpLogFont_x : LPLOGFONTA;
      iPointSize : INT;
      Flags : DWORD;
      rgbColors : COLORREF;
      lCustData : LPARAM;
      lpfnHook : LPCFHOOKPROC;
      lpTemplateName : LPCSTR;
      hInstance_x : HINSTANCE;
      lpszStyle : LPSTR;
      nFontType : WORD;
      MISSING_ALIGNMENT_x : WORD;
      nSizeMin : INT;
      nSizeMax : INT;
   end record;
   subtype CHOOSEFONTA is tagCHOOSEFONTA; -- CXType_Elaborated
   type tagCHOOSEFONTW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDC_x : HDC;
      lpLogFont_x : LPLOGFONTW;
      iPointSize : INT;
      Flags : DWORD;
      rgbColors : COLORREF;
      lCustData : LPARAM;
      lpfnHook : LPCFHOOKPROC;
      lpTemplateName : LPCWSTR;
      hInstance_x : HINSTANCE;
      lpszStyle : LPWSTR;
      nFontType : WORD;
      MISSING_ALIGNMENT_x : WORD;
      nSizeMin : INT;
      nSizeMax : INT;
   end record;
   subtype CHOOSEFONTW is tagCHOOSEFONTW; -- CXType_Elaborated
   subtype CHOOSEFONT is CHOOSEFONTA; -- CXType_Typedef
   type LPCHOOSEFONTA is access CHOOSEFONTA; -- CXType_Pointer - CXType_Typedef
   type LPCHOOSEFONTW is access CHOOSEFONTW; -- CXType_Pointer - CXType_Typedef
   subtype LPCHOOSEFONT is LPCHOOSEFONTA; -- CXType_Typedef
   type PCCHOOSEFONTA is access constant CHOOSEFONTA; -- CXType_Pointer - CXType_Typedef
   type PCCHOOSEFONTW is access constant CHOOSEFONTW; -- CXType_Pointer - CXType_Typedef
   subtype PCCHOOSEFONT is PCCHOOSEFONTA; -- CXType_Typedef
   function ChooseFontA_x(
      param1 : LPCHOOSEFONTA
   ) return BOOL;
   pragma import (C,ChooseFontA_x,"ChooseFontA");
   function ChooseFontW_x(
      param1 : LPCHOOSEFONTW
   ) return BOOL;
   pragma import (C,ChooseFontW_x,"ChooseFontW");
   subtype LPPRINTHOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   subtype LPSETUPHOOKPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   type tagPDA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDevMode : HGLOBAL;
      hDevNames : HGLOBAL;
      hDC_x : HDC;
      Flags : DWORD;
      nFromPage : WORD;
      nToPage : WORD;
      nMinPage : WORD;
      nMaxPage : WORD;
      nCopies : WORD;
      hInstance_x : HINSTANCE;
      lCustData : LPARAM;
      lpfnPrintHook : LPPRINTHOOKPROC;
      lpfnSetupHook : LPSETUPHOOKPROC;
      lpPrintTemplateName : LPCSTR;
      lpSetupTemplateName : LPCSTR;
      hPrintTemplate : HGLOBAL;
      hSetupTemplate : HGLOBAL;
   end record;
   subtype PRINTDLGA is tagPDA; -- CXType_Elaborated
   type LPPRINTDLGA is access tagPDA; -- CXType_Pointer - CXType_Elaborated
   type tagPDW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDevMode : HGLOBAL;
      hDevNames : HGLOBAL;
      hDC_x : HDC;
      Flags : DWORD;
      nFromPage : WORD;
      nToPage : WORD;
      nMinPage : WORD;
      nMaxPage : WORD;
      nCopies : WORD;
      hInstance_x : HINSTANCE;
      lCustData : LPARAM;
      lpfnPrintHook : LPPRINTHOOKPROC;
      lpfnSetupHook : LPSETUPHOOKPROC;
      lpPrintTemplateName : LPCWSTR;
      lpSetupTemplateName : LPCWSTR;
      hPrintTemplate : HGLOBAL;
      hSetupTemplate : HGLOBAL;
   end record;
   subtype PRINTDLGW is tagPDW; -- CXType_Elaborated
   type LPPRINTDLGW is access tagPDW; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTDLG is PRINTDLGA; -- CXType_Typedef
   subtype LPPRINTDLG is LPPRINTDLGA; -- CXType_Typedef
   function PrintDlgA_x(
      pPD : LPPRINTDLGA
   ) return BOOL;
   pragma import (C,PrintDlgA_x,"PrintDlgA");
   function PrintDlgW_x(
      pPD : LPPRINTDLGW
   ) return BOOL;
   pragma import (C,PrintDlgW_x,"PrintDlgW");
   type IPrintDialogCallback_Interface is interface and IUnknown_Interface;
      function QueryInterface(
         This : access IPrintDialogCallback_Interface;
         riid : access constant IID;
         ppvObj : access LPVOID
      ) return HRESULT is abstract;
      function AddRef(This : access IPrintDialogCallback_Interface) return ULONG is abstract;
      function Release(This : access IPrintDialogCallback_Interface) return ULONG is abstract;
      function InitDone(This : access IPrintDialogCallback_Interface) return HRESULT is abstract;
      function SelectionChange(This : access IPrintDialogCallback_Interface) return HRESULT is abstract;
      function HandleMessage(
         This : access IPrintDialogCallback_Interface;
         hDlg : HWND;
         uMsg : UINT;
         wParam_x : WPARAM;
         lParam_x : LPARAM;
         pResult : access LRESULT
      ) return HRESULT is abstract;
   type IPrintDialogCallback is access IPrintDialogCallback_Interface'Class;
   type IPrintDialogCallback_Ptr is access IPrintDialogCallback;
   type IPrintDialogServices_Interface is interface and IUnknown_Interface;
      function QueryInterface(
         This : access IPrintDialogServices_Interface;
         riid : access constant IID;
         ppvObj : access LPVOID
      ) return HRESULT is abstract;
      function AddRef(This : access IPrintDialogServices_Interface) return ULONG is abstract;
      function Release(This : access IPrintDialogServices_Interface) return ULONG is abstract;
      function GetCurrentDevMode(
         This : access IPrintDialogServices_Interface;
         pDevMode_x : LPDEVMODE;
         pcbSize : access UINT
      ) return HRESULT is abstract;
      function GetCurrentPrinterName(
         This : access IPrintDialogServices_Interface;
         pPrinterName : LPWSTR;
         pcchSize : access UINT
      ) return HRESULT is abstract;
      function GetCurrentPortName(
         This : access IPrintDialogServices_Interface;
         pPortName : LPWSTR;
         pcchSize : access UINT
      ) return HRESULT is abstract;
   type IPrintDialogServices is access IPrintDialogServices_Interface'Class;
   type IPrintDialogServices_Ptr is access IPrintDialogServices;
   type tagPRINTPAGERANGE is record
      nFromPage : DWORD;
      nToPage : DWORD;
   end record;
   subtype PRINTPAGERANGE is tagPRINTPAGERANGE; -- CXType_Elaborated
   type LPPRINTPAGERANGE is access PRINTPAGERANGE; -- CXType_Pointer - CXType_Typedef
   type PCPRINTPAGERANGE is access constant PRINTPAGERANGE; -- CXType_Pointer - CXType_Typedef
   type tagPDEXA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDevMode : HGLOBAL;
      hDevNames : HGLOBAL;
      hDC_x : HDC;
      Flags : DWORD;
      Flags2 : DWORD;
      ExclusionFlags : DWORD;
      nPageRanges : DWORD;
      nMaxPageRanges : DWORD;
      lpPageRanges : LPPRINTPAGERANGE;
      nMinPage : DWORD;
      nMaxPage : DWORD;
      nCopies : DWORD;
      hInstance_x : HINSTANCE;
      lpPrintTemplateName : LPCSTR;
      lpCallback : LPUNKNOWN;
      nPropertyPages : DWORD;
      lphPropertyPages : access HPROPSHEETPAGE;
      nStartPage : DWORD;
      dwResultAction : DWORD;
   end record;
   subtype PRINTDLGEXA is tagPDEXA; -- CXType_Elaborated
   type LPPRINTDLGEXA is access tagPDEXA; -- CXType_Pointer - CXType_Elaborated
   type tagPDEXW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDevMode : HGLOBAL;
      hDevNames : HGLOBAL;
      hDC_x : HDC;
      Flags : DWORD;
      Flags2 : DWORD;
      ExclusionFlags : DWORD;
      nPageRanges : DWORD;
      nMaxPageRanges : DWORD;
      lpPageRanges : LPPRINTPAGERANGE;
      nMinPage : DWORD;
      nMaxPage : DWORD;
      nCopies : DWORD;
      hInstance_x : HINSTANCE;
      lpPrintTemplateName : LPCWSTR;
      lpCallback : LPUNKNOWN;
      nPropertyPages : DWORD;
      lphPropertyPages : access HPROPSHEETPAGE;
      nStartPage : DWORD;
      dwResultAction : DWORD;
   end record;
   subtype PRINTDLGEXW is tagPDEXW; -- CXType_Elaborated
   type LPPRINTDLGEXW is access tagPDEXW; -- CXType_Pointer - CXType_Elaborated
   subtype PRINTDLGEX is PRINTDLGEXA; -- CXType_Typedef
   subtype LPPRINTDLGEX is LPPRINTDLGEXA; -- CXType_Typedef
   function PrintDlgExA_x(
      pPD : LPPRINTDLGEXA
   ) return HRESULT;
   pragma import (C,PrintDlgExA_x,"PrintDlgExA");
   function PrintDlgExW_x(
      pPD : LPPRINTDLGEXW
   ) return HRESULT;
   pragma import (C,PrintDlgExW_x,"PrintDlgExW");
   type tagDEVNAMES is record
      wDriverOffset : WORD;
      wDeviceOffset : WORD;
      wOutputOffset : WORD;
      wDefault : WORD;
   end record;
   subtype DEVNAMES is tagDEVNAMES; -- CXType_Elaborated
   type LPDEVNAMES is access DEVNAMES; -- CXType_Pointer - CXType_Typedef
   type PCDEVNAMES is access constant DEVNAMES; -- CXType_Pointer - CXType_Typedef
   function CommDlgExtendedError return DWORD;
   pragma import (C,CommDlgExtendedError,"CommDlgExtendedError");
   subtype LPPAGEPAINTHOOK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   subtype LPPAGESETUPHOOK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] UINT_PTR (HWND, UINT, WPARAM, LPARAM)
   type tagPSDA is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDevMode : HGLOBAL;
      hDevNames : HGLOBAL;
      Flags : DWORD;
      ptPaperSize : POINT;
      rtMinMargin : RECT;
      rtMargin : RECT;
      hInstance_x : HINSTANCE;
      lCustData : LPARAM;
      lpfnPageSetupHook : LPPAGESETUPHOOK;
      lpfnPagePaintHook : LPPAGEPAINTHOOK;
      lpPageSetupTemplateName : LPCSTR;
      hPageSetupTemplate : HGLOBAL;
   end record;
   subtype PAGESETUPDLGA is tagPSDA; -- CXType_Elaborated
   type LPPAGESETUPDLGA is access tagPSDA; -- CXType_Pointer - CXType_Elaborated
   type tagPSDW is record
      lStructSize : DWORD;
      hwndOwner : HWND;
      hDevMode : HGLOBAL;
      hDevNames : HGLOBAL;
      Flags : DWORD;
      ptPaperSize : POINT;
      rtMinMargin : RECT;
      rtMargin : RECT;
      hInstance_x : HINSTANCE;
      lCustData : LPARAM;
      lpfnPageSetupHook : LPPAGESETUPHOOK;
      lpfnPagePaintHook : LPPAGEPAINTHOOK;
      lpPageSetupTemplateName : LPCWSTR;
      hPageSetupTemplate : HGLOBAL;
   end record;
   subtype PAGESETUPDLGW is tagPSDW; -- CXType_Elaborated
   type LPPAGESETUPDLGW is access tagPSDW; -- CXType_Pointer - CXType_Elaborated
   subtype PAGESETUPDLG is PAGESETUPDLGA; -- CXType_Typedef
   subtype LPPAGESETUPDLG is LPPAGESETUPDLGA; -- CXType_Typedef
   function PageSetupDlgA_x(
      param1 : LPPAGESETUPDLGA
   ) return BOOL;
   pragma import (C,PageSetupDlgA_x,"PageSetupDlgA");
   function PageSetupDlgW_x(
      param1 : LPPAGESETUPDLGW
   ) return BOOL;
   pragma import (C,PageSetupDlgW_x,"PageSetupDlgW");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared\stralign.h>
   function uaw_CharUpperW(
      String : LPUWSTR
   ) return LPUWSTR;
   pragma import (C,uaw_CharUpperW,"uaw_CharUpperW");
   function uaw_lstrcmpW(
      String1 : PCUWSTR;
      String2 : PCUWSTR
   ) return Interfaces.C.Int;
   pragma import (C,uaw_lstrcmpW,"uaw_lstrcmpW");
   function uaw_lstrcmpiW(
      String1 : PCUWSTR;
      String2 : PCUWSTR
   ) return Interfaces.C.Int;
   pragma import (C,uaw_lstrcmpiW,"uaw_lstrcmpiW");
   function uaw_lstrlenW(
      String : LPCUWSTR
   ) return Interfaces.C.Int;
   pragma import (C,uaw_lstrlenW,"uaw_lstrlenW");
   function uaw_wcschr(
      String : PCUWSTR;
      Character : WCHAR
   ) return PUWSTR;
   pragma import (C,uaw_wcschr,"uaw_wcschr");
   function uaw_wcscpy(
      Destination : PUWSTR;
      Source : PCUWSTR
   ) return PUWSTR;
   pragma import (C,uaw_wcscpy,"uaw_wcscpy");
   function uaw_wcsicmp(
      String1 : PCUWSTR;
      String2 : PCUWSTR
   ) return Interfaces.C.Int;
   pragma import (C,uaw_wcsicmp,"uaw_wcsicmp");
   function uaw_wcslen(
      String : PCUWSTR
   ) return size_t;
   pragma import (C,uaw_wcslen,"uaw_wcslen");
   function uaw_wcsrchr(
      String : PCUWSTR;
      Character : WCHAR
   ) return PUWSTR;
   pragma import (C,uaw_wcsrchr,"uaw_wcsrchr");
   -- ua_CharUpperW(); -- inlined function not supported
   -- ua_lstrcmpW(); -- inlined function not supported
   -- ua_lstrcmpiW(); -- inlined function not supported
   -- ua_lstrlenW(); -- inlined function not supported
   type PUWSTR_C is access constant WCHAR; -- CXType_Pointer - CXType_Typedef
   -- ua_wcschr(); -- inlined function not supported
   -- ua_wcsrchr(); -- inlined function not supported
   -- ua_wcscpy(); -- inlined function not supported
   -- ua_wcscpy_s(); -- inlined function not supported
   -- ua_wcslen(); -- inlined function not supported
   -- ua_wcsicmp(); -- inlined function not supported
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\winsvc.h>
   type SERVICE_TRIGGER_CUSTOM_STATE_ID is record
      Data : Void;
   end record;
   type SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM_x is record
      u : Void;
   end record;
   subtype SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM is SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM_x; -- CXType_Elaborated
   type LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM is access SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_DESCRIPTIONA_x is record
      lpDescription : LPSTR;
   end record;
   subtype SERVICE_DESCRIPTIONA is SERVICE_DESCRIPTIONA_x; -- CXType_Elaborated
   type LPSERVICE_DESCRIPTIONA is access SERVICE_DESCRIPTIONA_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_DESCRIPTIONW_x is record
      lpDescription : LPWSTR;
   end record;
   subtype SERVICE_DESCRIPTIONW is SERVICE_DESCRIPTIONW_x; -- CXType_Elaborated
   type LPSERVICE_DESCRIPTIONW is access SERVICE_DESCRIPTIONW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SERVICE_DESCRIPTION is SERVICE_DESCRIPTIONA; -- CXType_Typedef
   subtype LPSERVICE_DESCRIPTION is LPSERVICE_DESCRIPTIONA; -- CXType_Typedef
   type SC_ACTION_TYPE_x is (
      SC_ACTION_NONE,
      SC_ACTION_RESTART,
      SC_ACTION_REBOOT,
      SC_ACTION_RUN_COMMAND,
      SC_ACTION_OWN_RESTART
   );
   for SC_ACTION_TYPE_x use (
      SC_ACTION_NONE => 0,
      SC_ACTION_RESTART => 1,
      SC_ACTION_REBOOT => 2,
      SC_ACTION_RUN_COMMAND => 3,
      SC_ACTION_OWN_RESTART => 4
   );
   for SC_ACTION_TYPE_x'Size use 32;
   subtype SC_ACTION_TYPE is SC_ACTION_TYPE_x; -- CXType_Elaborated
   type SC_ACTION_x is record
      type_x : SC_ACTION_TYPE;
      delay_x : DWORD;
   end record;
   subtype SC_ACTION is SC_ACTION_x; -- CXType_Elaborated
   type LPSC_ACTION is access SC_ACTION_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_FAILURE_ACTIONSA_x is record
      dwResetPeriod : DWORD;
      lpRebootMsg : LPSTR;
      lpCommand : LPSTR;
      cActions : DWORD;
      lpsaActions : access SC_ACTION;
   end record;
   subtype SERVICE_FAILURE_ACTIONSA is SERVICE_FAILURE_ACTIONSA_x; -- CXType_Elaborated
   type LPSERVICE_FAILURE_ACTIONSA is access SERVICE_FAILURE_ACTIONSA_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_FAILURE_ACTIONSW_x is record
      dwResetPeriod : DWORD;
      lpRebootMsg : LPWSTR;
      lpCommand : LPWSTR;
      cActions : DWORD;
      lpsaActions : access SC_ACTION;
   end record;
   subtype SERVICE_FAILURE_ACTIONSW is SERVICE_FAILURE_ACTIONSW_x; -- CXType_Elaborated
   type LPSERVICE_FAILURE_ACTIONSW is access SERVICE_FAILURE_ACTIONSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SERVICE_FAILURE_ACTIONS is SERVICE_FAILURE_ACTIONSA; -- CXType_Typedef
   subtype LPSERVICE_FAILURE_ACTIONS is LPSERVICE_FAILURE_ACTIONSA; -- CXType_Typedef
   type SERVICE_DELAYED_AUTO_START_INFO_x is record
      fDelayedAutostart : BOOL;
   end record;
   subtype SERVICE_DELAYED_AUTO_START_INFO is SERVICE_DELAYED_AUTO_START_INFO_x; -- CXType_Elaborated
   type LPSERVICE_DELAYED_AUTO_START_INFO is access SERVICE_DELAYED_AUTO_START_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_FAILURE_ACTIONS_FLAG_x is record
      fFailureActionsOnNonCrashFailures : BOOL;
   end record;
   subtype SERVICE_FAILURE_ACTIONS_FLAG is SERVICE_FAILURE_ACTIONS_FLAG_x; -- CXType_Elaborated
   type LPSERVICE_FAILURE_ACTIONS_FLAG is access SERVICE_FAILURE_ACTIONS_FLAG_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_SID_INFO_x is record
      dwServiceSidType : DWORD;
   end record;
   subtype SERVICE_SID_INFO is SERVICE_SID_INFO_x; -- CXType_Elaborated
   type LPSERVICE_SID_INFO is access SERVICE_SID_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_REQUIRED_PRIVILEGES_INFOA_x is record
      pmszRequiredPrivileges : LPSTR;
   end record;
   subtype SERVICE_REQUIRED_PRIVILEGES_INFOA is SERVICE_REQUIRED_PRIVILEGES_INFOA_x; -- CXType_Elaborated
   type LPSERVICE_REQUIRED_PRIVILEGES_INFOA is access SERVICE_REQUIRED_PRIVILEGES_INFOA_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_REQUIRED_PRIVILEGES_INFOW_x is record
      pmszRequiredPrivileges : LPWSTR;
   end record;
   subtype SERVICE_REQUIRED_PRIVILEGES_INFOW is SERVICE_REQUIRED_PRIVILEGES_INFOW_x; -- CXType_Elaborated
   type LPSERVICE_REQUIRED_PRIVILEGES_INFOW is access SERVICE_REQUIRED_PRIVILEGES_INFOW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SERVICE_REQUIRED_PRIVILEGES_INFO is SERVICE_REQUIRED_PRIVILEGES_INFOA; -- CXType_Typedef
   subtype LPSERVICE_REQUIRED_PRIVILEGES_INFO is LPSERVICE_REQUIRED_PRIVILEGES_INFOA; -- CXType_Typedef
   type SERVICE_PRESHUTDOWN_INFO_x is record
      dwPreshutdownTimeout : DWORD;
   end record;
   subtype SERVICE_PRESHUTDOWN_INFO is SERVICE_PRESHUTDOWN_INFO_x; -- CXType_Elaborated
   type LPSERVICE_PRESHUTDOWN_INFO is access SERVICE_PRESHUTDOWN_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_x is record
      dwDataType : DWORD;
      cbData : DWORD;
      pData : PBYTE;
   end record;
   subtype SERVICE_TRIGGER_SPECIFIC_DATA_ITEM is SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_x; -- CXType_Elaborated
   type PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM is access SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_TRIGGER_x is record
      dwTriggerType : DWORD;
      dwAction : DWORD;
      pTriggerSubtype : access GUID;
      cDataItems : DWORD;
      pDataItems : PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
   end record;
   subtype SERVICE_TRIGGER is SERVICE_TRIGGER_x; -- CXType_Elaborated
   type PSERVICE_TRIGGER is access SERVICE_TRIGGER_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_TRIGGER_INFO_x is record
      cTriggers : DWORD;
      pTriggers : PSERVICE_TRIGGER;
      pReserved : PBYTE;
   end record;
   subtype SERVICE_TRIGGER_INFO is SERVICE_TRIGGER_INFO_x; -- CXType_Elaborated
   type PSERVICE_TRIGGER_INFO is access SERVICE_TRIGGER_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_PREFERRED_NODE_INFO_x is record
      usPreferredNode : USHORT;
      fDelete : BOOLEAN;
   end record;
   subtype SERVICE_PREFERRED_NODE_INFO is SERVICE_PREFERRED_NODE_INFO_x; -- CXType_Elaborated
   type LPSERVICE_PREFERRED_NODE_INFO is access SERVICE_PREFERRED_NODE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_TIMECHANGE_INFO_x is record
      liNewTime : LARGE_INTEGER;
      liOldTime : LARGE_INTEGER;
   end record;
   subtype SERVICE_TIMECHANGE_INFO is SERVICE_TIMECHANGE_INFO_x; -- CXType_Elaborated
   type PSERVICE_TIMECHANGE_INFO is access SERVICE_TIMECHANGE_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_LAUNCH_PROTECTED_INFO_x is record
      dwLaunchProtected : DWORD;
   end record;
   subtype SERVICE_LAUNCH_PROTECTED_INFO is SERVICE_LAUNCH_PROTECTED_INFO_x; -- CXType_Elaborated
   type PSERVICE_LAUNCH_PROTECTED_INFO is access SERVICE_LAUNCH_PROTECTED_INFO_x; -- CXType_Pointer - CXType_Elaborated
   type SC_HANDLE_x is record
      unused : Interfaces.C.Int;
   end record;
   type SC_HANDLE is access SC_HANDLE_x; -- CXType_Pointer - CXType_Elaborated
   type LPSC_HANDLE is access SC_HANDLE; -- CXType_Pointer - CXType_Typedef
   type SERVICE_STATUS_HANDLE_x is record
      unused : Interfaces.C.Int;
   end record;
   type SERVICE_STATUS_HANDLE is access SERVICE_STATUS_HANDLE_x; -- CXType_Pointer - CXType_Elaborated
   type SC_STATUS_TYPE_x is (
      SC_STATUS_PROCESS_INFO
   );
   for SC_STATUS_TYPE_x use (
      SC_STATUS_PROCESS_INFO => 0
   );
   for SC_STATUS_TYPE_x'Size use 32;
   subtype SC_STATUS_TYPE is SC_STATUS_TYPE_x; -- CXType_Elaborated
   type SC_ENUM_TYPE_x is (
      SC_ENUM_PROCESS_INFO
   );
   for SC_ENUM_TYPE_x use (
      SC_ENUM_PROCESS_INFO => 0
   );
   for SC_ENUM_TYPE_x'Size use 32;
   subtype SC_ENUM_TYPE is SC_ENUM_TYPE_x; -- CXType_Elaborated
   type SERVICE_STATUS_x is record
      dwServiceType : DWORD;
      dwCurrentState : DWORD;
      dwControlsAccepted : DWORD;
      dwWin32ExitCode : DWORD;
      dwServiceSpecificExitCode : DWORD;
      dwCheckPoint : DWORD;
      dwWaitHint : DWORD;
   end record;
   subtype SERVICE_STATUS is SERVICE_STATUS_x; -- CXType_Elaborated
   type LPSERVICE_STATUS is access SERVICE_STATUS_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_STATUS_PROCESS_x is record
      dwServiceType : DWORD;
      dwCurrentState : DWORD;
      dwControlsAccepted : DWORD;
      dwWin32ExitCode : DWORD;
      dwServiceSpecificExitCode : DWORD;
      dwCheckPoint : DWORD;
      dwWaitHint : DWORD;
      dwProcessId : DWORD;
      dwServiceFlags : DWORD;
   end record;
   subtype SERVICE_STATUS_PROCESS is SERVICE_STATUS_PROCESS_x; -- CXType_Elaborated
   type LPSERVICE_STATUS_PROCESS is access SERVICE_STATUS_PROCESS_x; -- CXType_Pointer - CXType_Elaborated
   type ENUM_SERVICE_STATUSA_x is record
      lpServiceName : LPSTR;
      lpDisplayName : LPSTR;
      ServiceStatus : SERVICE_STATUS;
   end record;
   subtype ENUM_SERVICE_STATUSA is ENUM_SERVICE_STATUSA_x; -- CXType_Elaborated
   type LPENUM_SERVICE_STATUSA is access ENUM_SERVICE_STATUSA_x; -- CXType_Pointer - CXType_Elaborated
   type ENUM_SERVICE_STATUSW_x is record
      lpServiceName : LPWSTR;
      lpDisplayName : LPWSTR;
      ServiceStatus : SERVICE_STATUS;
   end record;
   subtype ENUM_SERVICE_STATUSW is ENUM_SERVICE_STATUSW_x; -- CXType_Elaborated
   type LPENUM_SERVICE_STATUSW is access ENUM_SERVICE_STATUSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype ENUM_SERVICE_STATUS is ENUM_SERVICE_STATUSA; -- CXType_Typedef
   subtype LPENUM_SERVICE_STATUS is LPENUM_SERVICE_STATUSA; -- CXType_Typedef
   type ENUM_SERVICE_STATUS_PROCESSA_x is record
      lpServiceName : LPSTR;
      lpDisplayName : LPSTR;
      ServiceStatusProcess : SERVICE_STATUS_PROCESS;
   end record;
   subtype ENUM_SERVICE_STATUS_PROCESSA is ENUM_SERVICE_STATUS_PROCESSA_x; -- CXType_Elaborated
   type LPENUM_SERVICE_STATUS_PROCESSA is access ENUM_SERVICE_STATUS_PROCESSA_x; -- CXType_Pointer - CXType_Elaborated
   type ENUM_SERVICE_STATUS_PROCESSW_x is record
      lpServiceName : LPWSTR;
      lpDisplayName : LPWSTR;
      ServiceStatusProcess : SERVICE_STATUS_PROCESS;
   end record;
   subtype ENUM_SERVICE_STATUS_PROCESSW is ENUM_SERVICE_STATUS_PROCESSW_x; -- CXType_Elaborated
   type LPENUM_SERVICE_STATUS_PROCESSW is access ENUM_SERVICE_STATUS_PROCESSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype ENUM_SERVICE_STATUS_PROCESS is ENUM_SERVICE_STATUS_PROCESSA; -- CXType_Typedef
   subtype LPENUM_SERVICE_STATUS_PROCESS is LPENUM_SERVICE_STATUS_PROCESSA; -- CXType_Typedef
   subtype SC_LOCK is LPVOID; -- CXType_Typedef
   type QUERY_SERVICE_LOCK_STATUSA_x is record
      fIsLocked : DWORD;
      lpLockOwner : LPSTR;
      dwLockDuration : DWORD;
   end record;
   subtype QUERY_SERVICE_LOCK_STATUSA is QUERY_SERVICE_LOCK_STATUSA_x; -- CXType_Elaborated
   type LPQUERY_SERVICE_LOCK_STATUSA is access QUERY_SERVICE_LOCK_STATUSA_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_SERVICE_LOCK_STATUSW_x is record
      fIsLocked : DWORD;
      lpLockOwner : LPWSTR;
      dwLockDuration : DWORD;
   end record;
   subtype QUERY_SERVICE_LOCK_STATUSW is QUERY_SERVICE_LOCK_STATUSW_x; -- CXType_Elaborated
   type LPQUERY_SERVICE_LOCK_STATUSW is access QUERY_SERVICE_LOCK_STATUSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype QUERY_SERVICE_LOCK_STATUS is QUERY_SERVICE_LOCK_STATUSA; -- CXType_Typedef
   subtype LPQUERY_SERVICE_LOCK_STATUS is LPQUERY_SERVICE_LOCK_STATUSA; -- CXType_Typedef
   type QUERY_SERVICE_CONFIGA_x is record
      dwServiceType : DWORD;
      dwStartType : DWORD;
      dwErrorControl : DWORD;
      lpBinaryPathName : LPSTR;
      lpLoadOrderGroup : LPSTR;
      dwTagId : DWORD;
      lpDependencies : LPSTR;
      lpServiceStartName : LPSTR;
      lpDisplayName : LPSTR;
   end record;
   subtype QUERY_SERVICE_CONFIGA is QUERY_SERVICE_CONFIGA_x; -- CXType_Elaborated
   type LPQUERY_SERVICE_CONFIGA is access QUERY_SERVICE_CONFIGA_x; -- CXType_Pointer - CXType_Elaborated
   type QUERY_SERVICE_CONFIGW_x is record
      dwServiceType : DWORD;
      dwStartType : DWORD;
      dwErrorControl : DWORD;
      lpBinaryPathName : LPWSTR;
      lpLoadOrderGroup : LPWSTR;
      dwTagId : DWORD;
      lpDependencies : LPWSTR;
      lpServiceStartName : LPWSTR;
      lpDisplayName : LPWSTR;
   end record;
   subtype QUERY_SERVICE_CONFIGW is QUERY_SERVICE_CONFIGW_x; -- CXType_Elaborated
   type LPQUERY_SERVICE_CONFIGW is access QUERY_SERVICE_CONFIGW_x; -- CXType_Pointer - CXType_Elaborated
   subtype QUERY_SERVICE_CONFIG is QUERY_SERVICE_CONFIGA; -- CXType_Typedef
   subtype LPQUERY_SERVICE_CONFIG is LPQUERY_SERVICE_CONFIGA; -- CXType_Typedef
   subtype SERVICE_MAIN_FUNCTIONW is System.Address; -- [FIXME - CXType_FunctionProto] void (DWORD, LPWSTR *)
   subtype SERVICE_MAIN_FUNCTIONA is System.Address; -- [FIXME - CXType_FunctionProto] void (DWORD, LPTSTR *)
   subtype LPSERVICE_MAIN_FUNCTIONW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (DWORD, LPWSTR *)
   subtype LPSERVICE_MAIN_FUNCTIONA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (DWORD, LPSTR *)
   type SERVICE_TABLE_ENTRYA_x is record
      lpServiceName : LPSTR;
      lpServiceProc : LPSERVICE_MAIN_FUNCTIONA;
   end record;
   subtype SERVICE_TABLE_ENTRYA is SERVICE_TABLE_ENTRYA_x; -- CXType_Elaborated
   type LPSERVICE_TABLE_ENTRYA is access SERVICE_TABLE_ENTRYA_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_TABLE_ENTRYW_x is record
      lpServiceName : LPWSTR;
      lpServiceProc : LPSERVICE_MAIN_FUNCTIONW;
   end record;
   subtype SERVICE_TABLE_ENTRYW is SERVICE_TABLE_ENTRYW_x; -- CXType_Elaborated
   type LPSERVICE_TABLE_ENTRYW is access SERVICE_TABLE_ENTRYW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SERVICE_TABLE_ENTRY is SERVICE_TABLE_ENTRYA; -- CXType_Typedef
   subtype LPSERVICE_TABLE_ENTRY is LPSERVICE_TABLE_ENTRYA; -- CXType_Typedef
   subtype HANDLER_FUNCTION is System.Address; -- [FIXME - CXType_FunctionProto] void (DWORD)
   subtype HANDLER_FUNCTION_EX is System.Address; -- [FIXME - CXType_FunctionProto] DWORD (DWORD, DWORD, LPVOID, LPVOID)
   subtype LPHANDLER_FUNCTION is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (DWORD)
   subtype LPHANDLER_FUNCTION_EX is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] DWORD (DWORD, DWORD, LPVOID, LPVOID)
   subtype PFN_SC_NOTIFY_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] void (PVOID)
   type SERVICE_NOTIFY_1_x is record
      dwVersion : DWORD;
      pfnNotifyCallback : PFN_SC_NOTIFY_CALLBACK;
      pContext_x : PVOID;
      dwNotificationStatus : DWORD;
      ServiceStatus : SERVICE_STATUS_PROCESS;
   end record;
   subtype SERVICE_NOTIFY_1 is SERVICE_NOTIFY_1_x; -- CXType_Elaborated
   type PSERVICE_NOTIFY_1 is access SERVICE_NOTIFY_1_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_NOTIFY_2A_x is record
      dwVersion : DWORD;
      pfnNotifyCallback : PFN_SC_NOTIFY_CALLBACK;
      pContext_x : PVOID;
      dwNotificationStatus : DWORD;
      ServiceStatus : SERVICE_STATUS_PROCESS;
      dwNotificationTriggered : DWORD;
      pszServiceNames : LPSTR;
   end record;
   subtype SERVICE_NOTIFY_2A is SERVICE_NOTIFY_2A_x; -- CXType_Elaborated
   type PSERVICE_NOTIFY_2A is access SERVICE_NOTIFY_2A_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_NOTIFY_2W_x is record
      dwVersion : DWORD;
      pfnNotifyCallback : PFN_SC_NOTIFY_CALLBACK;
      pContext_x : PVOID;
      dwNotificationStatus : DWORD;
      ServiceStatus : SERVICE_STATUS_PROCESS;
      dwNotificationTriggered : DWORD;
      pszServiceNames : LPWSTR;
   end record;
   subtype SERVICE_NOTIFY_2W is SERVICE_NOTIFY_2W_x; -- CXType_Elaborated
   type PSERVICE_NOTIFY_2W is access SERVICE_NOTIFY_2W_x; -- CXType_Pointer - CXType_Elaborated
   subtype SERVICE_NOTIFY_2 is SERVICE_NOTIFY_2A; -- CXType_Typedef
   subtype PSERVICE_NOTIFY_2 is PSERVICE_NOTIFY_2A; -- CXType_Typedef
   subtype SERVICE_NOTIFYA is SERVICE_NOTIFY_2A; -- CXType_Typedef
   type PSERVICE_NOTIFYA is access SERVICE_NOTIFY_2A; -- CXType_Pointer - CXType_Typedef
   subtype SERVICE_NOTIFYW is SERVICE_NOTIFY_2W; -- CXType_Typedef
   type PSERVICE_NOTIFYW is access SERVICE_NOTIFY_2W; -- CXType_Pointer - CXType_Typedef
   subtype SERVICE_NOTIFY is SERVICE_NOTIFYA; -- CXType_Typedef
   subtype PSERVICE_NOTIFY is PSERVICE_NOTIFYA; -- CXType_Typedef
   type SERVICE_CONTROL_STATUS_REASON_PARAMSA_x is record
      dwReason : DWORD;
      pszComment : LPSTR;
      ServiceStatus : SERVICE_STATUS_PROCESS;
   end record;
   subtype SERVICE_CONTROL_STATUS_REASON_PARAMSA is SERVICE_CONTROL_STATUS_REASON_PARAMSA_x; -- CXType_Elaborated
   type PSERVICE_CONTROL_STATUS_REASON_PARAMSA is access SERVICE_CONTROL_STATUS_REASON_PARAMSA_x; -- CXType_Pointer - CXType_Elaborated
   type SERVICE_CONTROL_STATUS_REASON_PARAMSW_x is record
      dwReason : DWORD;
      pszComment : LPWSTR;
      ServiceStatus : SERVICE_STATUS_PROCESS;
   end record;
   subtype SERVICE_CONTROL_STATUS_REASON_PARAMSW is SERVICE_CONTROL_STATUS_REASON_PARAMSW_x; -- CXType_Elaborated
   type PSERVICE_CONTROL_STATUS_REASON_PARAMSW is access SERVICE_CONTROL_STATUS_REASON_PARAMSW_x; -- CXType_Pointer - CXType_Elaborated
   subtype SERVICE_CONTROL_STATUS_REASON_PARAMS is SERVICE_CONTROL_STATUS_REASON_PARAMSA; -- CXType_Typedef
   subtype PSERVICE_CONTROL_STATUS_REASON_PARAMS is PSERVICE_CONTROL_STATUS_REASON_PARAMSA; -- CXType_Typedef
   type SERVICE_START_REASON_x is record
      dwReason : DWORD;
   end record;
   subtype SERVICE_START_REASON is SERVICE_START_REASON_x; -- CXType_Elaborated
   type PSERVICE_START_REASON is access SERVICE_START_REASON_x; -- CXType_Pointer - CXType_Elaborated
   function ChangeServiceConfigA(
      hService : SC_HANDLE;
      dwServiceType : DWORD;
      dwStartType : DWORD;
      dwErrorControl : DWORD;
      lpBinaryPathName : LPCSTR;
      lpLoadOrderGroup : LPCSTR;
      lpdwTagId : LPDWORD;
      lpDependencies : LPCSTR;
      lpServiceStartName : LPCSTR;
      lpPassword : LPCSTR;
      lpDisplayName : LPCSTR
   ) return BOOL;
   pragma import (C,ChangeServiceConfigA,"ChangeServiceConfigA");
   function ChangeServiceConfigW(
      hService : SC_HANDLE;
      dwServiceType : DWORD;
      dwStartType : DWORD;
      dwErrorControl : DWORD;
      lpBinaryPathName : LPCWSTR;
      lpLoadOrderGroup : LPCWSTR;
      lpdwTagId : LPDWORD;
      lpDependencies : LPCWSTR;
      lpServiceStartName : LPCWSTR;
      lpPassword : LPCWSTR;
      lpDisplayName : LPCWSTR
   ) return BOOL;
   pragma import (C,ChangeServiceConfigW,"ChangeServiceConfigW");
   function ChangeServiceConfig2A(
      hService : SC_HANDLE;
      dwInfoLevel : DWORD;
      lpInfo : LPVOID
   ) return BOOL;
   pragma import (C,ChangeServiceConfig2A,"ChangeServiceConfig2A");
   function ChangeServiceConfig2W(
      hService : SC_HANDLE;
      dwInfoLevel : DWORD;
      lpInfo : LPVOID
   ) return BOOL;
   pragma import (C,ChangeServiceConfig2W,"ChangeServiceConfig2W");
   function CloseServiceHandle(
      hSCObject : SC_HANDLE
   ) return BOOL;
   pragma import (C,CloseServiceHandle,"CloseServiceHandle");
   function ControlService(
      hService : SC_HANDLE;
      dwControl : DWORD;
      lpServiceStatus : LPSERVICE_STATUS
   ) return BOOL;
   pragma import (C,ControlService,"ControlService");
   function CreateServiceA(
      hSCManager : SC_HANDLE;
      lpServiceName : LPCSTR;
      lpDisplayName : LPCSTR;
      dwDesiredAccess : DWORD;
      dwServiceType : DWORD;
      dwStartType : DWORD;
      dwErrorControl : DWORD;
      lpBinaryPathName : LPCSTR;
      lpLoadOrderGroup : LPCSTR;
      lpdwTagId : LPDWORD;
      lpDependencies : LPCSTR;
      lpServiceStartName : LPCSTR;
      lpPassword : LPCSTR
   ) return SC_HANDLE;
   pragma import (C,CreateServiceA,"CreateServiceA");
   function CreateServiceW(
      hSCManager : SC_HANDLE;
      lpServiceName : LPCWSTR;
      lpDisplayName : LPCWSTR;
      dwDesiredAccess : DWORD;
      dwServiceType : DWORD;
      dwStartType : DWORD;
      dwErrorControl : DWORD;
      lpBinaryPathName : LPCWSTR;
      lpLoadOrderGroup : LPCWSTR;
      lpdwTagId : LPDWORD;
      lpDependencies : LPCWSTR;
      lpServiceStartName : LPCWSTR;
      lpPassword : LPCWSTR
   ) return SC_HANDLE;
   pragma import (C,CreateServiceW,"CreateServiceW");
   function DeleteService(
      hService : SC_HANDLE
   ) return BOOL;
   pragma import (C,DeleteService,"DeleteService");
   function EnumDependentServicesA(
      hService : SC_HANDLE;
      dwServiceState : DWORD;
      lpServices : LPENUM_SERVICE_STATUSA;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD;
      lpServicesReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumDependentServicesA,"EnumDependentServicesA");
   function EnumDependentServicesW(
      hService : SC_HANDLE;
      dwServiceState : DWORD;
      lpServices : LPENUM_SERVICE_STATUSW;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD;
      lpServicesReturned : LPDWORD
   ) return BOOL;
   pragma import (C,EnumDependentServicesW,"EnumDependentServicesW");
   function EnumServicesStatusA(
      hSCManager : SC_HANDLE;
      dwServiceType : DWORD;
      dwServiceState : DWORD;
      lpServices : LPENUM_SERVICE_STATUSA;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD;
      lpServicesReturned : LPDWORD;
      lpResumeHandle : LPDWORD
   ) return BOOL;
   pragma import (C,EnumServicesStatusA,"EnumServicesStatusA");
   function EnumServicesStatusW(
      hSCManager : SC_HANDLE;
      dwServiceType : DWORD;
      dwServiceState : DWORD;
      lpServices : LPENUM_SERVICE_STATUSW;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD;
      lpServicesReturned : LPDWORD;
      lpResumeHandle : LPDWORD
   ) return BOOL;
   pragma import (C,EnumServicesStatusW,"EnumServicesStatusW");
   function EnumServicesStatusExA(
      hSCManager : SC_HANDLE;
      InfoLevel : SC_ENUM_TYPE;
      dwServiceType : DWORD;
      dwServiceState : DWORD;
      lpServices : LPBYTE;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD;
      lpServicesReturned : LPDWORD;
      lpResumeHandle : LPDWORD;
      pszGroupName : LPCSTR
   ) return BOOL;
   pragma import (C,EnumServicesStatusExA,"EnumServicesStatusExA");
   function EnumServicesStatusExW(
      hSCManager : SC_HANDLE;
      InfoLevel : SC_ENUM_TYPE;
      dwServiceType : DWORD;
      dwServiceState : DWORD;
      lpServices : LPBYTE;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD;
      lpServicesReturned : LPDWORD;
      lpResumeHandle : LPDWORD;
      pszGroupName : LPCWSTR
   ) return BOOL;
   pragma import (C,EnumServicesStatusExW,"EnumServicesStatusExW");
   function GetServiceKeyNameA(
      hSCManager : SC_HANDLE;
      lpDisplayName : LPCSTR;
      lpServiceName : LPSTR;
      lpcchBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetServiceKeyNameA,"GetServiceKeyNameA");
   function GetServiceKeyNameW(
      hSCManager : SC_HANDLE;
      lpDisplayName : LPCWSTR;
      lpServiceName : LPWSTR;
      lpcchBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetServiceKeyNameW,"GetServiceKeyNameW");
   function GetServiceDisplayNameA(
      hSCManager : SC_HANDLE;
      lpServiceName : LPCSTR;
      lpDisplayName : LPSTR;
      lpcchBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetServiceDisplayNameA,"GetServiceDisplayNameA");
   function GetServiceDisplayNameW(
      hSCManager : SC_HANDLE;
      lpServiceName : LPCWSTR;
      lpDisplayName : LPWSTR;
      lpcchBuffer : LPDWORD
   ) return BOOL;
   pragma import (C,GetServiceDisplayNameW,"GetServiceDisplayNameW");
   function LockServiceDatabase(
      hSCManager : SC_HANDLE
   ) return SC_LOCK;
   pragma import (C,LockServiceDatabase,"LockServiceDatabase");
   function NotifyBootConfigStatus(
      BootAcceptable : BOOL
   ) return BOOL;
   pragma import (C,NotifyBootConfigStatus,"NotifyBootConfigStatus");
   function OpenSCManagerA(
      lpMachineName : LPCSTR;
      lpDatabaseName : LPCSTR;
      dwDesiredAccess : DWORD
   ) return SC_HANDLE;
   pragma import (C,OpenSCManagerA,"OpenSCManagerA");
   function OpenSCManagerW(
      lpMachineName : LPCWSTR;
      lpDatabaseName : LPCWSTR;
      dwDesiredAccess : DWORD
   ) return SC_HANDLE;
   pragma import (C,OpenSCManagerW,"OpenSCManagerW");
   function OpenServiceA(
      hSCManager : SC_HANDLE;
      lpServiceName : LPCSTR;
      dwDesiredAccess : DWORD
   ) return SC_HANDLE;
   pragma import (C,OpenServiceA,"OpenServiceA");
   function OpenServiceW(
      hSCManager : SC_HANDLE;
      lpServiceName : LPCWSTR;
      dwDesiredAccess : DWORD
   ) return SC_HANDLE;
   pragma import (C,OpenServiceW,"OpenServiceW");
   function QueryServiceConfigA(
      hService : SC_HANDLE;
      lpServiceConfig : LPQUERY_SERVICE_CONFIGA;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceConfigA,"QueryServiceConfigA");
   function QueryServiceConfigW(
      hService : SC_HANDLE;
      lpServiceConfig : LPQUERY_SERVICE_CONFIGW;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceConfigW,"QueryServiceConfigW");
   function QueryServiceConfig2A(
      hService : SC_HANDLE;
      dwInfoLevel : DWORD;
      lpBuffer : LPBYTE;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceConfig2A,"QueryServiceConfig2A");
   function QueryServiceConfig2W(
      hService : SC_HANDLE;
      dwInfoLevel : DWORD;
      lpBuffer : LPBYTE;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceConfig2W,"QueryServiceConfig2W");
   function QueryServiceLockStatusA(
      hSCManager : SC_HANDLE;
      lpLockStatus : LPQUERY_SERVICE_LOCK_STATUSA;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceLockStatusA,"QueryServiceLockStatusA");
   function QueryServiceLockStatusW(
      hSCManager : SC_HANDLE;
      lpLockStatus : LPQUERY_SERVICE_LOCK_STATUSW;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceLockStatusW,"QueryServiceLockStatusW");
   function QueryServiceObjectSecurity(
      hService : SC_HANDLE;
      dwSecurityInformation : SECURITY_INFORMATION;
      lpSecurityDescriptor : PSECURITY_DESCRIPTOR;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceObjectSecurity,"QueryServiceObjectSecurity");
   function QueryServiceStatus(
      hService : SC_HANDLE;
      lpServiceStatus : LPSERVICE_STATUS
   ) return BOOL;
   pragma import (C,QueryServiceStatus,"QueryServiceStatus");
   function QueryServiceStatusEx(
      hService : SC_HANDLE;
      InfoLevel : SC_STATUS_TYPE;
      lpBuffer : LPBYTE;
      cbBufSize : DWORD;
      pcbBytesNeeded : LPDWORD
   ) return BOOL;
   pragma import (C,QueryServiceStatusEx,"QueryServiceStatusEx");
   function RegisterServiceCtrlHandlerA(
      lpServiceName : LPCSTR;
      lpHandlerProc : LPHANDLER_FUNCTION
   ) return SERVICE_STATUS_HANDLE;
   pragma import (C,RegisterServiceCtrlHandlerA,"RegisterServiceCtrlHandlerA");
   function RegisterServiceCtrlHandlerW(
      lpServiceName : LPCWSTR;
      lpHandlerProc : LPHANDLER_FUNCTION
   ) return SERVICE_STATUS_HANDLE;
   pragma import (C,RegisterServiceCtrlHandlerW,"RegisterServiceCtrlHandlerW");
   function RegisterServiceCtrlHandlerExA(
      lpServiceName : LPCSTR;
      lpHandlerProc : LPHANDLER_FUNCTION_EX;
      lpContext_x : LPVOID
   ) return SERVICE_STATUS_HANDLE;
   pragma import (C,RegisterServiceCtrlHandlerExA,"RegisterServiceCtrlHandlerExA");
   function RegisterServiceCtrlHandlerExW(
      lpServiceName : LPCWSTR;
      lpHandlerProc : LPHANDLER_FUNCTION_EX;
      lpContext_x : LPVOID
   ) return SERVICE_STATUS_HANDLE;
   pragma import (C,RegisterServiceCtrlHandlerExW,"RegisterServiceCtrlHandlerExW");
   function SetServiceObjectSecurity(
      hService : SC_HANDLE;
      dwSecurityInformation : SECURITY_INFORMATION;
      lpSecurityDescriptor : PSECURITY_DESCRIPTOR
   ) return BOOL;
   pragma import (C,SetServiceObjectSecurity,"SetServiceObjectSecurity");
   function SetServiceStatus(
      hServiceStatus : SERVICE_STATUS_HANDLE;
      lpServiceStatus : LPSERVICE_STATUS
   ) return BOOL;
   pragma import (C,SetServiceStatus,"SetServiceStatus");
   function StartServiceCtrlDispatcherA(
      lpServiceStartTable : access constant SERVICE_TABLE_ENTRYA
   ) return BOOL;
   pragma import (C,StartServiceCtrlDispatcherA,"StartServiceCtrlDispatcherA");
   function StartServiceCtrlDispatcherW(
      lpServiceStartTable : access constant SERVICE_TABLE_ENTRYW
   ) return BOOL;
   pragma import (C,StartServiceCtrlDispatcherW,"StartServiceCtrlDispatcherW");
   function StartServiceA(
      hService : SC_HANDLE;
      dwNumServiceArgs : DWORD;
      lpServiceArgVectors : access LPCSTR
   ) return BOOL;
   pragma import (C,StartServiceA,"StartServiceA");
   function StartServiceW(
      hService : SC_HANDLE;
      dwNumServiceArgs : DWORD;
      lpServiceArgVectors : access LPCWSTR
   ) return BOOL;
   pragma import (C,StartServiceW,"StartServiceW");
   function UnlockServiceDatabase(
      ScLock : SC_LOCK
   ) return BOOL;
   pragma import (C,UnlockServiceDatabase,"UnlockServiceDatabase");
   function NotifyServiceStatusChangeA(
      hService : SC_HANDLE;
      dwNotifyMask : DWORD;
      pNotifyBuffer : PSERVICE_NOTIFYA
   ) return DWORD;
   pragma import (C,NotifyServiceStatusChangeA,"NotifyServiceStatusChangeA");
   function NotifyServiceStatusChangeW(
      hService : SC_HANDLE;
      dwNotifyMask : DWORD;
      pNotifyBuffer : PSERVICE_NOTIFYW
   ) return DWORD;
   pragma import (C,NotifyServiceStatusChangeW,"NotifyServiceStatusChangeW");
   function ControlServiceExA(
      hService : SC_HANDLE;
      dwControl : DWORD;
      dwInfoLevel : DWORD;
      pControlParams : PVOID
   ) return BOOL;
   pragma import (C,ControlServiceExA,"ControlServiceExA");
   function ControlServiceExW(
      hService : SC_HANDLE;
      dwControl : DWORD;
      dwInfoLevel : DWORD;
      pControlParams : PVOID
   ) return BOOL;
   pragma import (C,ControlServiceExW,"ControlServiceExW");
   function QueryServiceDynamicInformation(
      hServiceStatus : SERVICE_STATUS_HANDLE;
      dwInfoLevel : DWORD;
      ppDynamicInfo : access PVOID
   ) return BOOL;
   pragma import (C,QueryServiceDynamicInformation,"QueryServiceDynamicInformation");
   type SC_EVENT_TYPE_x is (
      SC_EVENT_DATABASE_CHANGE,
      SC_EVENT_PROPERTY_CHANGE,
      SC_EVENT_STATUS_CHANGE
   );
   for SC_EVENT_TYPE_x use (
      SC_EVENT_DATABASE_CHANGE => 0,
      SC_EVENT_PROPERTY_CHANGE => 1,
      SC_EVENT_STATUS_CHANGE => 2
   );
   for SC_EVENT_TYPE_x'Size use 32;
   subtype SC_EVENT_TYPE is SC_EVENT_TYPE_x; -- CXType_Elaborated
   type PSC_EVENT_TYPE is access SC_EVENT_TYPE_x; -- CXType_Pointer - CXType_Elaborated
   subtype SC_NOTIFICATION_CALLBACK is System.Address; -- [FIXME - CXType_FunctionProto] void (DWORD, PVOID)
   subtype PSC_NOTIFICATION_CALLBACK is System.Address; -- [FIXME - CXType_Pointer - CXType_FunctionProto] void (DWORD, PVOID)
   type SC_NOTIFICATION_REGISTRATION_x; -- Forward Declaration
   type PSC_NOTIFICATION_REGISTRATION is access SC_NOTIFICATION_REGISTRATION_x; -- CXType_Pointer - CXType_Elaborated
   function SubscribeServiceChangeNotifications(
      hService : SC_HANDLE;
      eEventType : SC_EVENT_TYPE;
      pCallback : PSC_NOTIFICATION_CALLBACK;
      pCallbackContext : PVOID;
      pSubscription : access PSC_NOTIFICATION_REGISTRATION
   ) return DWORD;
   pragma import (C,SubscribeServiceChangeNotifications,"SubscribeServiceChangeNotifications");
   procedure UnsubscribeServiceChangeNotifications(
      pSubscription : PSC_NOTIFICATION_REGISTRATION
   );
   pragma import (C,UnsubscribeServiceChangeNotifications,"UnsubscribeServiceChangeNotifications");
   function WaitServiceState(
      hService : SC_HANDLE;
      dwNotify : DWORD;
      dwTimeout : DWORD;
      hCancelEvent : HANDLE
   ) return DWORD;
   pragma import (C,WaitServiceState,"WaitServiceState");
   type SERVICE_REGISTRY_STATE_TYPE is (
      ServiceRegistryStateParameters,
      ServiceRegistryStatePersistent,
      MaxServiceRegistryStateType
   );
   for SERVICE_REGISTRY_STATE_TYPE use (
      ServiceRegistryStateParameters => 0,
      ServiceRegistryStatePersistent => 1,
      MaxServiceRegistryStateType => 2
   );
   for SERVICE_REGISTRY_STATE_TYPE'Size use 32;
   function GetServiceRegistryStateKey(
      ServiceStatusHandle : SERVICE_STATUS_HANDLE;
      StateType : SERVICE_REGISTRY_STATE_TYPE;
      AccessMask : DWORD;
      ServiceStateKey : access HKEY
   ) return DWORD;
   pragma import (C,GetServiceRegistryStateKey,"GetServiceRegistryStateKey");
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\mcx.h>
   type MODEMDEVCAPS_x is record
      dwActualSize : DWORD;
      dwRequiredSize : DWORD;
      dwDevSpecificOffset : DWORD;
      dwDevSpecificSize : DWORD;
      dwModemProviderVersion : DWORD;
      dwModemManufacturerOffset : DWORD;
      dwModemManufacturerSize : DWORD;
      dwModemModelOffset : DWORD;
      dwModemModelSize : DWORD;
      dwModemVersionOffset : DWORD;
      dwModemVersionSize : DWORD;
      dwDialOptions : DWORD;
      dwCallSetupFailTimer : DWORD;
      dwInactivityTimeout : DWORD;
      dwSpeakerVolume : DWORD;
      dwSpeakerMode : DWORD;
      dwModemOptions : DWORD;
      dwMaxDTERate : DWORD;
      dwMaxDCERate : DWORD;
      abVariablePortion : Void;
   end record;
   subtype MODEMDEVCAPS is MODEMDEVCAPS_x; -- CXType_Elaborated
   type PMODEMDEVCAPS is access MODEMDEVCAPS_x; -- CXType_Pointer - CXType_Elaborated
   type LPMODEMDEVCAPS is access MODEMDEVCAPS_x; -- CXType_Pointer - CXType_Elaborated
   type MODEMSETTINGS_x is record
      dwActualSize : DWORD;
      dwRequiredSize : DWORD;
      dwDevSpecificOffset : DWORD;
      dwDevSpecificSize : DWORD;
      dwCallSetupFailTimer : DWORD;
      dwInactivityTimeout : DWORD;
      dwSpeakerVolume : DWORD;
      dwSpeakerMode : DWORD;
      dwPreferredModemOptions : DWORD;
      dwNegotiatedModemOptions : DWORD;
      dwNegotiatedDCERate : DWORD;
      abVariablePortion : Void;
   end record;
   subtype MODEMSETTINGS is MODEMSETTINGS_x; -- CXType_Elaborated
   type PMODEMSETTINGS is access MODEMSETTINGS_x; -- CXType_Pointer - CXType_Elaborated
   type LPMODEMSETTINGS is access MODEMSETTINGS_x; -- CXType_Pointer - CXType_Elaborated
   -- #include <C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um\imm.h>
   type HIMC_x is record
      unused : Interfaces.C.Int;
   end record;
   type HIMC is access HIMC_x; -- CXType_Pointer - CXType_Elaborated
   type HIMCC_x is record
      unused : Interfaces.C.Int;
   end record;
   type HIMCC is access HIMCC_x; -- CXType_Pointer - CXType_Elaborated
   type LPHKL is access HKL; -- CXType_Pointer - CXType_Typedef
   type tagCOMPOSITIONFORM is record
      dwStyle : DWORD;
      ptCurrentPos : POINT;
      rcArea : RECT;
   end record;
   subtype COMPOSITIONFORM is tagCOMPOSITIONFORM; -- CXType_Elaborated
   type PCOMPOSITIONFORM is access tagCOMPOSITIONFORM; -- CXType_Pointer - CXType_Elaborated
   type NPCOMPOSITIONFORM is access tagCOMPOSITIONFORM; -- CXType_Pointer - CXType_Elaborated
   type LPCOMPOSITIONFORM is access tagCOMPOSITIONFORM; -- CXType_Pointer - CXType_Elaborated
   type tagCANDIDATEFORM is record
      dwIndex : DWORD;
      dwStyle : DWORD;
      ptCurrentPos : POINT;
      rcArea : RECT;
   end record;
   subtype CANDIDATEFORM is tagCANDIDATEFORM; -- CXType_Elaborated
   type PCANDIDATEFORM is access tagCANDIDATEFORM; -- CXType_Pointer - CXType_Elaborated
   type NPCANDIDATEFORM is access tagCANDIDATEFORM; -- CXType_Pointer - CXType_Elaborated
   type LPCANDIDATEFORM is access tagCANDIDATEFORM; -- CXType_Pointer - CXType_Elaborated
   type tagCANDIDATELIST is record
      dwSize : DWORD;
      dwStyle : DWORD;
      dwCount : DWORD;
      dwSelection : DWORD;
      dwPageStart : DWORD;
      dwPageSize : DWORD;
      dwOffset : Void;
   end record;
   subtype CANDIDATELIST is tagCANDIDATELIST; -- CXType_Elaborated
   type PCANDIDATELIST is access tagCANDIDATELIST; -- CXType_Pointer - CXType_Elaborated
   type NPCANDIDATELIST is access tagCANDIDATELIST; -- CXType_Pointer - CXType_Elaborated
   type LPCANDIDATELIST is access tagCANDIDATELIST; -- CXType_Pointer - CXType_Elaborated
   type tagREGISTERWORDA is record
      lpReading : LPSTR;
      lpWord_x : LPSTR;
   end record;
   subtype REGISTERWORDA is tagREGISTERWORDA; -- CXType_Elaborated
   type PREGISTERWORDA is access tagREGISTERWORDA; -- CXType_Pointer - CXType_Elaborated
   type NPREGISTERWORDA is access tagREGISTERWORDA; -- CXType_Pointer - CXType_Elaborated
   type LPREGISTERWORDA is access tagREGISTERWORDA; -- CXType_Pointer - CXType_Elaborated
   type tagREGISTERWORDW is record
      lpReading : LPWSTR;
      lpWord_x : LPWSTR;
   end record;
   subtype REGISTERWORDW is tagREGISTERWORDW; -- CXType_Elaborated
   type PREGISTERWORDW is access tagREGISTERWORDW; -- CXType_Pointer - CXType_Elaborated
   type NPREGISTERWORDW is access tagREGISTERWORDW; -- CXType_Pointer - CXType_Elaborated
   type LPREGISTERWORDW is access tagREGISTERWORDW; -- CXType_Pointer - CXType_Elaborated
   subtype REGISTERWORD is REGISTERWORDA; -- CXType_Typedef
   subtype PREGISTERWORD is PREGISTERWORDA; -- CXType_Typedef
   subtype NPREGISTERWORD is NPREGISTERWORDA; -- CXType_Typedef
   subtype LPREGISTERWORD is LPREGISTERWORDA; -- CXType_Typedef
   type tagRECONVERTSTRING is record
      dwSize : DWORD;
      dwVersion : DWORD;
      dwStrLen : DWORD;
      dwStrOffset : DWORD;
      dwCompStrLen : DWORD;
      dwCompStrOffset : DWORD;
      dwTargetStrLen : DWORD;
      dwTargetStrOffset : DWORD;
   end record;
   subtype RECONVERTSTRING is tagRECONVERTSTRING; -- CXType_Elaborated
   type PRECONVERTSTRING is access tagRECONVERTSTRING; -- CXType_Pointer - CXType_Elaborated
   type NPRECONVERTSTRING is access tagRECONVERTSTRING; -- CXType_Pointer - CXType_Elaborated
   type LPRECONVERTSTRING is access tagRECONVERTSTRING; -- CXType_Pointer - CXType_Elaborated
   type tagSTYLEBUFA is record
      dwStyle : DWORD;
      szDescription : Void;
   end record;
   subtype STYLEBUFA is tagSTYLEBUFA; -- CXType_Elaborated
   type PSTYLEBUFA is access tagSTYLEBUFA; -- CXType_Pointer - CXType_Elaborated
   type NPSTYLEBUFA is access tagSTYLEBUFA; -- CXType_Pointer - CXType_Elaborated
   type LPSTYLEBUFA is access tagSTYLEBUFA; -- CXType_Pointer - CXType_Elaborated
   type tagSTYLEBUFW is record
      dwStyle : DWORD;
      szDescription : Void;
   end record;
   subtype STYLEBUFW is tagSTYLEBUFW; -- CXType_Elaborated
   type PSTYLEBUFW is access tagSTYLEBUFW; -- CXType_Pointer - CXType_Elaborated
   type NPSTYLEBUFW is access tagSTYLEBUFW; -- CXType_Pointer - CXType_Elaborated
   type LPSTYLEBUFW is access tagSTYLEBUFW; -- CXType_Pointer - CXType_Elaborated
   subtype STYLEBUF is STYLEBUFA; -- CXType_Typedef
   subtype PSTYLEBUF is PSTYLEBUFA; -- CXType_Typedef
   subtype NPSTYLEBUF is NPSTYLEBUFA; -- CXType_Typedef
   subtype LPSTYLEBUF is LPSTYLEBUFA; -- CXType_Typedef
   type tagIMEMENUITEMINFOA is record
      cbSize : UINT;
      fType : UINT;
      fState : UINT;
      wID : UINT;
      hbmpChecked : HBITMAP;
      hbmpUnchecked : HBITMAP;
      dwItemData : DWORD;
      szString : Void;
      hbmpItem : HBITMAP;
   end record;
   subtype IMEMENUITEMINFOA is tagIMEMENUITEMINFOA; -- CXType_Elaborated
   type PIMEMENUITEMINFOA is access tagIMEMENUITEMINFOA; -- CXType_Pointer - CXType_Elaborated
   type NPIMEMENUITEMINFOA is access tagIMEMENUITEMINFOA; -- CXType_Pointer - CXType_Elaborated
   type LPIMEMENUITEMINFOA is access tagIMEMENUITEMINFOA; -- CXType_Pointer - CXType_Elaborated
   type tagIMEMENUITEMINFOW is record
      cbSize : UINT;
      fType : UINT;
      fState : UINT;
      wID : UINT;
      hbmpChecked : HBITMAP;
      hbmpUnchecked : HBITMAP;
      dwItemData : DWORD;
      szString : Void;
      hbmpItem : HBITMAP;
   end record;
   subtype IMEMENUITEMINFOW is tagIMEMENUITEMINFOW; -- CXType_Elaborated
   type PIMEMENUITEMINFOW is access tagIMEMENUITEMINFOW; -- CXType_Pointer - CXType_Elaborated
   type NPIMEMENUITEMINFOW is access tagIMEMENUITEMINFOW; -- CXType_Pointer - CXType_Elaborated
   type LPIMEMENUITEMINFOW is access tagIMEMENUITEMINFOW; -- CXType_Pointer - CXType_Elaborated
   subtype IMEMENUITEMINFO is IMEMENUITEMINFOA; -- CXType_Typedef
   subtype PIMEMENUITEMINFO is PIMEMENUITEMINFOA; -- CXType_Typedef
   subtype NPIMEMENUITEMINFO is NPIMEMENUITEMINFOA; -- CXType_Typedef
   subtype LPIMEMENUITEMINFO is LPIMEMENUITEMINFOA; -- CXType_Typedef
   type tagIMECHARPOSITION is record
      dwSize : DWORD;
      dwCharPos : DWORD;
      pt : POINT;
      cLineHeight : UINT;
      rcDocument : RECT;
   end record;
   subtype IMECHARPOSITION is tagIMECHARPOSITION; -- CXType_Elaborated
   type PIMECHARPOSITION is access tagIMECHARPOSITION; -- CXType_Pointer - CXType_Elaborated
   type NPIMECHARPOSITION is access tagIMECHARPOSITION; -- CXType_Pointer - CXType_Elaborated
   type LPIMECHARPOSITION is access tagIMECHARPOSITION; -- CXType_Pointer - CXType_Elaborated
   subtype IMCENUMPROC is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] BOOL (HIMC, LPARAM)
   function ImmInstallIMEA(
      lpszIMEFileName : LPCSTR;
      lpszLayoutText : LPCSTR
   ) return HKL;
   pragma import (C,ImmInstallIMEA,"ImmInstallIMEA");
   function ImmInstallIMEW(
      lpszIMEFileName : LPCWSTR;
      lpszLayoutText : LPCWSTR
   ) return HKL;
   pragma import (C,ImmInstallIMEW,"ImmInstallIMEW");
   function ImmGetDefaultIMEWnd(
      param1 : HWND
   ) return HWND;
   pragma import (C,ImmGetDefaultIMEWnd,"ImmGetDefaultIMEWnd");
   function ImmGetDescriptionA(
      param1 : HKL;
      lpszDescription : LPSTR;
      uBufLen : UINT
   ) return UINT;
   pragma import (C,ImmGetDescriptionA,"ImmGetDescriptionA");
   function ImmGetDescriptionW(
      param1 : HKL;
      lpszDescription : LPWSTR;
      uBufLen : UINT
   ) return UINT;
   pragma import (C,ImmGetDescriptionW,"ImmGetDescriptionW");
   function ImmGetIMEFileNameA(
      param1 : HKL;
      lpszFileName : LPSTR;
      uBufLen : UINT
   ) return UINT;
   pragma import (C,ImmGetIMEFileNameA,"ImmGetIMEFileNameA");
   function ImmGetIMEFileNameW(
      param1 : HKL;
      lpszFileName : LPWSTR;
      uBufLen : UINT
   ) return UINT;
   pragma import (C,ImmGetIMEFileNameW,"ImmGetIMEFileNameW");
   function ImmGetProperty(
      param1 : HKL;
      param2 : DWORD
   ) return DWORD;
   pragma import (C,ImmGetProperty,"ImmGetProperty");
   function ImmIsIME(
      param1 : HKL
   ) return BOOL;
   pragma import (C,ImmIsIME,"ImmIsIME");
   function ImmSimulateHotKey(
      param1 : HWND;
      param2 : DWORD
   ) return BOOL;
   pragma import (C,ImmSimulateHotKey,"ImmSimulateHotKey");
   function ImmCreateContext return HIMC;
   pragma import (C,ImmCreateContext,"ImmCreateContext");
   function ImmDestroyContext(
      param1 : HIMC
   ) return BOOL;
   pragma import (C,ImmDestroyContext,"ImmDestroyContext");
   function ImmGetContext(
      param1 : HWND
   ) return HIMC;
   pragma import (C,ImmGetContext,"ImmGetContext");
   function ImmReleaseContext(
      param1 : HWND;
      param2 : HIMC
   ) return BOOL;
   pragma import (C,ImmReleaseContext,"ImmReleaseContext");
   function ImmAssociateContext(
      param1 : HWND;
      param2 : HIMC
   ) return HIMC;
   pragma import (C,ImmAssociateContext,"ImmAssociateContext");
   function ImmAssociateContextEx(
      param1 : HWND;
      param2 : HIMC;
      param3 : DWORD
   ) return BOOL;
   pragma import (C,ImmAssociateContextEx,"ImmAssociateContextEx");
   function ImmGetCompositionStringA(
      param1 : HIMC;
      param2 : DWORD;
      lpBuf : LPVOID;
      dwBufLen : DWORD
   ) return LONG;
   pragma import (C,ImmGetCompositionStringA,"ImmGetCompositionStringA");
   function ImmGetCompositionStringW(
      param1 : HIMC;
      param2 : DWORD;
      lpBuf : LPVOID;
      dwBufLen : DWORD
   ) return LONG;
   pragma import (C,ImmGetCompositionStringW,"ImmGetCompositionStringW");
   function ImmSetCompositionStringA(
      param1 : HIMC;
      dwIndex : DWORD;
      lpComp : LPVOID;
      dwCompLen : DWORD;
      lpRead : LPVOID;
      dwReadLen : DWORD
   ) return BOOL;
   pragma import (C,ImmSetCompositionStringA,"ImmSetCompositionStringA");
   function ImmSetCompositionStringW(
      param1 : HIMC;
      dwIndex : DWORD;
      lpComp : LPVOID;
      dwCompLen : DWORD;
      lpRead : LPVOID;
      dwReadLen : DWORD
   ) return BOOL;
   pragma import (C,ImmSetCompositionStringW,"ImmSetCompositionStringW");
   function ImmGetCandidateListCountA(
      param1 : HIMC;
      lpdwListCount : LPDWORD
   ) return DWORD;
   pragma import (C,ImmGetCandidateListCountA,"ImmGetCandidateListCountA");
   function ImmGetCandidateListCountW(
      param1 : HIMC;
      lpdwListCount : LPDWORD
   ) return DWORD;
   pragma import (C,ImmGetCandidateListCountW,"ImmGetCandidateListCountW");
   function ImmGetCandidateListA(
      param1 : HIMC;
      deIndex : DWORD;
      lpCandList : LPCANDIDATELIST;
      dwBufLen : DWORD
   ) return DWORD;
   pragma import (C,ImmGetCandidateListA,"ImmGetCandidateListA");
   function ImmGetCandidateListW(
      param1 : HIMC;
      deIndex : DWORD;
      lpCandList : LPCANDIDATELIST;
      dwBufLen : DWORD
   ) return DWORD;
   pragma import (C,ImmGetCandidateListW,"ImmGetCandidateListW");
   function ImmGetGuideLineA(
      param1 : HIMC;
      dwIndex : DWORD;
      lpBuf : LPSTR;
      dwBufLen : DWORD
   ) return DWORD;
   pragma import (C,ImmGetGuideLineA,"ImmGetGuideLineA");
   function ImmGetGuideLineW(
      param1 : HIMC;
      dwIndex : DWORD;
      lpBuf : LPWSTR;
      dwBufLen : DWORD
   ) return DWORD;
   pragma import (C,ImmGetGuideLineW,"ImmGetGuideLineW");
   function ImmGetConversionStatus(
      param1 : HIMC;
      lpfdwConversion : LPDWORD;
      lpfdwSentence : LPDWORD
   ) return BOOL;
   pragma import (C,ImmGetConversionStatus,"ImmGetConversionStatus");
   function ImmSetConversionStatus(
      param1 : HIMC;
      param2 : DWORD;
      param3 : DWORD
   ) return BOOL;
   pragma import (C,ImmSetConversionStatus,"ImmSetConversionStatus");
   function ImmGetOpenStatus(
      param1 : HIMC
   ) return BOOL;
   pragma import (C,ImmGetOpenStatus,"ImmGetOpenStatus");
   function ImmSetOpenStatus(
      param1 : HIMC;
      param2 : BOOL
   ) return BOOL;
   pragma import (C,ImmSetOpenStatus,"ImmSetOpenStatus");
   function ImmGetCompositionFontA(
      param1 : HIMC;
      lplf : LPLOGFONTA
   ) return BOOL;
   pragma import (C,ImmGetCompositionFontA,"ImmGetCompositionFontA");
   function ImmGetCompositionFontW(
      param1 : HIMC;
      lplf : LPLOGFONTW
   ) return BOOL;
   pragma import (C,ImmGetCompositionFontW,"ImmGetCompositionFontW");
   function ImmSetCompositionFontA(
      param1 : HIMC;
      lplf : LPLOGFONTA
   ) return BOOL;
   pragma import (C,ImmSetCompositionFontA,"ImmSetCompositionFontA");
   function ImmSetCompositionFontW(
      param1 : HIMC;
      lplf : LPLOGFONTW
   ) return BOOL;
   pragma import (C,ImmSetCompositionFontW,"ImmSetCompositionFontW");
   function ImmConfigureIMEA(
      param1 : HKL;
      param2 : HWND;
      param3 : DWORD;
      param4 : LPVOID
   ) return BOOL;
   pragma import (C,ImmConfigureIMEA,"ImmConfigureIMEA");
   function ImmConfigureIMEW(
      param1 : HKL;
      param2 : HWND;
      param3 : DWORD;
      param4 : LPVOID
   ) return BOOL;
   pragma import (C,ImmConfigureIMEW,"ImmConfigureIMEW");
   function ImmEscapeA(
      param1 : HKL;
      param2 : HIMC;
      param3 : UINT;
      param4 : LPVOID
   ) return LRESULT;
   pragma import (C,ImmEscapeA,"ImmEscapeA");
   function ImmEscapeW(
      param1 : HKL;
      param2 : HIMC;
      param3 : UINT;
      param4 : LPVOID
   ) return LRESULT;
   pragma import (C,ImmEscapeW,"ImmEscapeW");
   function ImmGetConversionListA(
      param1 : HKL;
      param2 : HIMC;
      lpSrc : LPCSTR;
      lpDst : LPCANDIDATELIST;
      dwBufLen : DWORD;
      uFlag : UINT
   ) return DWORD;
   pragma import (C,ImmGetConversionListA,"ImmGetConversionListA");
   function ImmGetConversionListW(
      param1 : HKL;
      param2 : HIMC;
      lpSrc : LPCWSTR;
      lpDst : LPCANDIDATELIST;
      dwBufLen : DWORD;
      uFlag : UINT
   ) return DWORD;
   pragma import (C,ImmGetConversionListW,"ImmGetConversionListW");
   function ImmNotifyIME(
      param1 : HIMC;
      dwAction : DWORD;
      dwIndex : DWORD;
      dwValue : DWORD
   ) return BOOL;
   pragma import (C,ImmNotifyIME,"ImmNotifyIME");
   function ImmGetStatusWindowPos(
      param1 : HIMC;
      lpptPos : LPPOINT
   ) return BOOL;
   pragma import (C,ImmGetStatusWindowPos,"ImmGetStatusWindowPos");
   function ImmSetStatusWindowPos(
      param1 : HIMC;
      lpptPos : LPPOINT
   ) return BOOL;
   pragma import (C,ImmSetStatusWindowPos,"ImmSetStatusWindowPos");
   function ImmGetCompositionWindow(
      param1 : HIMC;
      lpCompForm : LPCOMPOSITIONFORM
   ) return BOOL;
   pragma import (C,ImmGetCompositionWindow,"ImmGetCompositionWindow");
   function ImmSetCompositionWindow(
      param1 : HIMC;
      lpCompForm : LPCOMPOSITIONFORM
   ) return BOOL;
   pragma import (C,ImmSetCompositionWindow,"ImmSetCompositionWindow");
   function ImmGetCandidateWindow(
      param1 : HIMC;
      param2 : DWORD;
      lpCandidate : LPCANDIDATEFORM
   ) return BOOL;
   pragma import (C,ImmGetCandidateWindow,"ImmGetCandidateWindow");
   function ImmSetCandidateWindow(
      param1 : HIMC;
      lpCandidate : LPCANDIDATEFORM
   ) return BOOL;
   pragma import (C,ImmSetCandidateWindow,"ImmSetCandidateWindow");
   function ImmIsUIMessageA(
      param1 : HWND;
      param2 : UINT;
      param3 : WPARAM;
      param4 : LPARAM
   ) return BOOL;
   pragma import (C,ImmIsUIMessageA,"ImmIsUIMessageA");
   function ImmIsUIMessageW(
      param1 : HWND;
      param2 : UINT;
      param3 : WPARAM;
      param4 : LPARAM
   ) return BOOL;
   pragma import (C,ImmIsUIMessageW,"ImmIsUIMessageW");
   function ImmGetVirtualKey(
      param1 : HWND
   ) return UINT;
   pragma import (C,ImmGetVirtualKey,"ImmGetVirtualKey");
   subtype REGISTERWORDENUMPROCA is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPCSTR, DWORD, LPCSTR, LPVOID)
   subtype REGISTERWORDENUMPROCW is System.Address; -- [FIXME - CXType_Pointer - CXType_Unexposed] int (LPCWSTR, DWORD, LPCWSTR, LPVOID)
   function ImmRegisterWordA(
      param1 : HKL;
      lpszReading : LPCSTR;
      param3 : DWORD;
      lpszRegister : LPCSTR
   ) return BOOL;
   pragma import (C,ImmRegisterWordA,"ImmRegisterWordA");
   function ImmRegisterWordW(
      param1 : HKL;
      lpszReading : LPCWSTR;
      param3 : DWORD;
      lpszRegister : LPCWSTR
   ) return BOOL;
   pragma import (C,ImmRegisterWordW,"ImmRegisterWordW");
   function ImmUnregisterWordA(
      param1 : HKL;
      lpszReading : LPCSTR;
      param3 : DWORD;
      lpszUnregister : LPCSTR
   ) return BOOL;
   pragma import (C,ImmUnregisterWordA,"ImmUnregisterWordA");
   function ImmUnregisterWordW(
      param1 : HKL;
      lpszReading : LPCWSTR;
      param3 : DWORD;
      lpszUnregister : LPCWSTR
   ) return BOOL;
   pragma import (C,ImmUnregisterWordW,"ImmUnregisterWordW");
   function ImmGetRegisterWordStyleA(
      param1 : HKL;
      nItem : UINT;
      lpStyleBuf_x : LPSTYLEBUFA
   ) return UINT;
   pragma import (C,ImmGetRegisterWordStyleA,"ImmGetRegisterWordStyleA");
   function ImmGetRegisterWordStyleW(
      param1 : HKL;
      nItem : UINT;
      lpStyleBuf_x : LPSTYLEBUFW
   ) return UINT;
   pragma import (C,ImmGetRegisterWordStyleW,"ImmGetRegisterWordStyleW");
   function ImmEnumRegisterWordA(
      param1 : HKL;
      param2 : REGISTERWORDENUMPROCA;
      lpszReading : LPCSTR;
      param4 : DWORD;
      lpszRegister : LPCSTR;
      param6 : LPVOID
   ) return UINT;
   pragma import (C,ImmEnumRegisterWordA,"ImmEnumRegisterWordA");
   function ImmEnumRegisterWordW(
      param1 : HKL;
      param2 : REGISTERWORDENUMPROCW;
      lpszReading : LPCWSTR;
      param4 : DWORD;
      lpszRegister : LPCWSTR;
      param6 : LPVOID
   ) return UINT;
   pragma import (C,ImmEnumRegisterWordW,"ImmEnumRegisterWordW");
   function ImmDisableIME(
      param1 : DWORD
   ) return BOOL;
   pragma import (C,ImmDisableIME,"ImmDisableIME");
   function ImmEnumInputContext(
      idThread : DWORD;
      lpfn : IMCENUMPROC;
      lParam_x : LPARAM
   ) return BOOL;
   pragma import (C,ImmEnumInputContext,"ImmEnumInputContext");
   function ImmGetImeMenuItemsA(
      param1 : HIMC;
      param2 : DWORD;
      param3 : DWORD;
      lpImeParentMenu : LPIMEMENUITEMINFOA;
      lpImeMenu : LPIMEMENUITEMINFOA;
      dwSize : DWORD
   ) return DWORD;
   pragma import (C,ImmGetImeMenuItemsA,"ImmGetImeMenuItemsA");
   function ImmGetImeMenuItemsW(
      param1 : HIMC;
      param2 : DWORD;
      param3 : DWORD;
      lpImeParentMenu : LPIMEMENUITEMINFOW;
      lpImeMenu : LPIMEMENUITEMINFOW;
      dwSize : DWORD
   ) return DWORD;
   pragma import (C,ImmGetImeMenuItemsW,"ImmGetImeMenuItemsW");
   function ImmDisableTextFrameService(
      idThread : DWORD
   ) return BOOL;
   pragma import (C,ImmDisableTextFrameService,"ImmDisableTextFrameService");
   function ImmDisableLegacyIME return BOOL;
   pragma import (C,ImmDisableLegacyIME,"ImmDisableLegacyIME");
   
   -----------------------------------------------------------------------------
   -- Opaque types
   -----------------------------------------------------------------------------
   
   type crt_locale_data_x is null record;
   type crt_multibyte_data_x is null record;
   type TP_CALLBACK_INSTANCE_x is null record;
   type TP_POOL_x is null record;
   type TP_CLEANUP_GROUP_x is null record;
   type ACTIVATION_CONTEXT_x is null record;
   type TP_WORK_x is null record;
   type TP_TIMER_x is null record;
   type TP_WAIT_x is null record;
   type TP_IO_x is null record;
   type TEB_x is null record;
   type PROC_THREAD_ATTRIBUTE_LIST_x is null record;
   type NET_ADDRESS_INFO_x is null record;
   type NDR_ASYNC_MESSAGE_x is null record;
   type NDR_CORRELATION_INFO_x is null record;
   type NDR_ALLOC_ALL_NODES_CONTEXT is null record;
   type NDR_POINTER_QUEUE_STATE is null record;
   type NDR_PROC_CONTEXT_x is null record;
   type PSP_x is null record;
   type INoMarshal is null record;
   type IAgileObject is null record;
   type IMarshal2 is null record;
   type IEnumContextProps is null record;
   type IContext is null record;
   type IObjContext is null record;
   type IFastRundown is null record;
   type IInternet is null record;
   type IXMLDOMDocumentFragment is null record;
   type IXMLDOMComment is null record;
   type IXMLDOMCDATASection is null record;
   type IXMLDOMEntityReference is null record;
   type XMLDOMDocumentEvents is null record;
   type SC_NOTIFICATION_REGISTRATION_x is null record;
   
   -----------------------------------------------------------------------------
   
end;
